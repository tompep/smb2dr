	                            ; -----------------------------------------
	                            ; -----------------------------------------
	                            ;   Super Mario Bros. 2 (USA) disassembly
	                            ;     https://github.com/xkeeper0/smb2/
	                            ; -----------------------------------------
	                            ; -----------------------------------------
	                            
	                            .include "config.asm"
	                            ; ----------------------------------------
	                            ;  Super Mario Bros. 2 Disassembly Config
	                            ; ----------------------------------------
	                            ;
	                            ; By default, this repository is set up to build an identical copy
	                            ; of the original PRG0 revision of Super Mario Bros. 2 (USA).
	                            ;
	                            ; You can tweak the build settings below. To remove
	                            ; the default options, comment them out.
	                            ; (Changing the assignment to 0 won't work.)
	                            ;
	                            ; To enable them indefinitely, uncomment the definition.
	                            ;
	                            ; To enable them for a single build from the command line, use
	                            ; build -dFLAGNAME
	                            ; For example, to build a PRG1/Rev A ROM,
	                            ; build -dREV_A
	                            
	                            ; ----------------------------------------
	                            ; Compatibility fixes for the disassembly
	                            ; In some locations, Nintendo used absolute addressing instead of
	                            ; zero-page for addresses in the zero page.
	                            ; This flag adds in raw bytes to match the opcodes,
	                            ; as this assembler isn't capable of forcing absolute addressing for zp.
	                            ;
	                            ; Note that if you use this, you should probably use
	                            ; PRESERVE_FREE_SPACE, too.
	                            COMPATIBILITY = 1
	                            
	                            ; ----------------------------------------
	                            ; Preserve unused space.
	                            ; Free space in the original ROM will continue to be padded outwards,
	                            ; to the extent that it was in the original.
	                            ; Adding your own code should shrink the free space afterwards automatically.
	                            ;
	                            ; Turning this off will "squish" most banks and move free space
	                            ; within them to the end, making it easier to add your own code anywhere.
	                            ; ...but it might also cause problems if data gets relocated
	                            ; when it isn't properly pointed to.
	                            ;PRESERVE_UNUSED_SPACE = 1
	                            
	                            
	                            ; ----------------------------------------
	                            ; Build PRG1 / Revision A ROM.
	                            ;
	                            ; Differences:
	                            ;
	                            ; PRG-2-3: Fixes bug where killing one of the mini FryGuy enemies
	                            ;          while changing size from taking damage would cause
	                            ;          the enemy to do the "flip over and fall off" death
	                            ;          instead of the "puff of smoke" death, which caused
	                            ;          the "number of small bosses left" number to not
	                            ;          decrease. Which meant the boss fight never ended.
	                            ;          Hope you had an extra life and a second controller...
	                            ;
	                            ; PRG-E-F: Fixes a minor issue when played on PAL consoles where
	                            ;          remarkably poor luck would cause the bonus chance screen
	                            ;          to end up rendering completely invisibly due to an NMI hitting
	                            ;          at the worst possible time.
	                            ;          The fix just waits for an NMI cycle before doing its work.
	                            ;
	                            REV_A = 1
	                            
	                            
	                            
	                            ; ----------------------------------------
	                            ; Patches that fix bugs or glitches
	                            
	                            
	                            ; Show all 8 frames of CHR cycling animation
	                            FIX_CHR_CYCLE = 1
	                            
	                            ; Fixes the POW falling log glitch
	                            FIX_POW_LOG_GLITCH = 1
	                            
	                            ; Fixes vine climbing bug when holding up and down simultaneously
	                            FIX_CLIMB_ZIP = 1
	                            
	                            ; Fixes green platform tiles in Subspace
	                            FIX_SUBSPACE_TILES = 1
	                            
	                            
	                            ; ----------------------------------------
	                            ; Patches that alter the game in
	                            ; interesting or useful ways
	                            
	                            
	                            ; Skips Bonus Chance after the end of a level
	                            ; DISABLE_BONUS_CHANCE = 1
	                            
	                            ; Go to the Charater Select screen after death
	                            ;CHARACTER_SELECT_AFTER_DEATH = 1
	                            
	                            ; Restore the prototype's DPCM samples and/or music;
	                            ; NOTE: The prototype underground music requires the shortened prototype ending music to fit
	                            ; everything in the music header table. Use EXPAND_MUSIC to remove this restriction.
	                            ;PROTOTYPE_DPCM_SAMPLES = 1
	                            ;PROTOTYPE_INSTRUMENTS = 1
	                            ;PROTOTYPE_MUSIC_STARMAN = 1
	                            ;PROTOTYPE_MUSIC_UNDERGROUND = 1
	                            ;PROTOTYPE_MUSIC_ENDING = 1
	                            
	                            ; Include debugging tools
	                            ; (push Select to open the debug menu)
	                            ; DEBUG = 1
	                            
	                            ; Include controller 2 debug features
	                            ; (@TODO: explain usage)
	                            ; CONTROLLER_2_DEBUG = 1
	                            
	                            ; ----------------------------------------
	                            ; Patches and enhancements largely useful
	                            ; only to people hacking the game
	                            
	                            
	                            ; Use MMC5 (mapper 5) instead of MMC3 (mapper 4)
	                            ; Based on RetroRain's MMC5 patch (https://www.romhacking.net/hacks/2568)
	                            ; MMC5 = 1
	                            
	                            ; Pads title screen PPU data for easier modification
	                            ; PAD_TITLE_SCREEN_PPU_DATA = 1
	                            
	                            ; Expands various lookup tables so that more values can be added
	                            ;EXPAND_TABLES = 1
	                            
	                            ; Skip unnecessary bonus chance RAM copy
	                            ;BONUS_CHANCE_RAM_CLEANUP = 1
	                            
	                            ; Uses an alternative pointer method for music headers to allow for more segments
	                            ; EXPAND_MUSIC = 1
	                            
	                            ; Encode world tileset in unused 3 bits of area header byte 2
	                            AREA_HEADER_TILESET = 1
	                            
	                            ; Encode level engine object mode switch in unused 2 bits of area header byte 4
	                            ENABLE_LEVEL_OBJECT_MODE = 1
	                            
	                            ; Enables additional level engine features
	                            ; LEVEL_ENGINE_UPGRADES = 1
	                            
	                            ; Enables quicksand tile behavior outside of worlds 2 and 6
	                            ALWAYS_ALLOW_QUICKSAND = 1
	                            
	                            ; Disables door pointers, so that area pointers are always required
	                            DISABLE_DOOR_POINTERS = 1
	                            
	                            ; Enables full-page door/vine searching so that entrances don't need to align
	                            ;ROBUST_TRANSITION_SEARCH = 1
	                            
	                            JUMP_THROW_FIX = 1
	                            
	                            INVERSE_LEVEL = 1
	                            
	                            BOSS_MUSHROOM = 1
	                            
	                            RANDOMIZER_T = 1
	                            
	                            HEALTH_REVAMP = 1
	                            
	                            PLAYER_STUFF = 1
	                            
	                            PLAYER_STUFF_HOLD = 1
	                            
	                            PLAYER_STUFF_MOVE_CS = 1
	                            
	                            PLAYER_STUFF_STORE = 1
	                            
	                            FLAGSET = 1
	                            
	                            DEBUG = 1
	                            
	                            EXTENDED_PTR_CONTINUE = 1
	                            
	                            ;PLAYER_STUFF_JAR = 1
	                            
	                            PLAYER_STUFF_BONUS = 1
	                            
	                            HOT_SPOTS = 1
	                            
	                            SLOT_CHANGES = 1
	                            
	                            SCROLL_FIX = 1
	                            
	                            PLAYER_STUFF_expand_sprites = 1
	                            
	                            ; -----------------------------------------
	                            ; Add NES header
	  4E 45 53 1A               	.db "NES", $1a ; identification of the iNES header
	  08                        	.db 8 ; number of 16KB PRG-ROM pages
	  10                        	.db 16 ; number of 8KB CHR-ROM pages
	                            
	                            IFNDEF MMC5
	  40                        	.db $40 ; mapper and mirroring
	  00 00 00 00 00 00 00 00.. 	.dsb 9, $00 ; clear the remaining bytes
	                            ENDIF
	                            
	                            IFDEF MMC5
	                            	.db $52 ; mapper and mirroring
	                            	.dsb 3, $00
	                            	.db $70 ; RAM size
	                            	.dsb 5, $00 ; clear the remaining bytes
	                            ENDIF
	                            
	                            
	                            ; -----------------------------------------
	                            ; Add macros
	                            .include "src/macros.asm"
	                            ;
	                            ; Macros
	                            ; ======
	                            ;
	                            ;
	                            
	                            ; Include COMPATIBILITY-flag-related macros
	                            include "src/compatibility-shims.asm"
	                            ;
	                            ; Macros for compatibility reasons
	                            ; ================================
	                            ;
	                            ; asm6f doesn't have a way of specifying "aboslute mode" by force,
	                            ; and some areas of SMB2 use it even in cases where a zero-page instruction
	                            ; would have been sufficient, so these are here to allow those to exist
	                            ; (by emitting the raw bytes) if needed
	                            ;
	                            
	                            
	                            ;
	                            ; Emit a NOP if PRESERVE_UNUSED_SPACE is on,
	                            ; as non-compat opcodes are one byte smaller
	                            ; (will keep data in place if using proper ZP opcodes)
	                            ;
	                            MACRO NOP_compat
	                            	IFDEF PRESERVE_UNUSED_SPACE
	                            		NOP
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; LDA $0000
	                            ;
	                            MACRO LDA_abs addr
	                            	IFDEF COMPATIBILITY
	                            		.db $ad
	                            		.dw addr
	                            	ELSE
	                            		LDA addr
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; LDA $0000, X
	                            ;
	                            MACRO LDA_abs_X addr
	                            	IFDEF COMPATIBILITY
	                            		.db $bd
	                            		.dw addr
	                            	ELSE
	                            		LDA addr, X
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; LDX $0000
	                            ;
	                            MACRO LDX_abs addr
	                            	IFDEF COMPATIBILITY
	                            		.db $ae
	                            		.dw addr
	                            	ELSE
	                            		LDX addr
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; LDY $0000
	                            ;
	                            MACRO LDY_abs addr
	                            	IFDEF COMPATIBILITY
	                            		.db $ac
	                            		.dw addr
	                            	ELSE
	                            		LDX addr
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; STA $0000
	                            ;
	                            MACRO STA_abs addr
	                            	IFDEF COMPATIBILITY
	                            		.db $8d
	                            		.dw addr
	                            	ELSE
	                            		STA addr
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; STY $0000
	                            ;
	                            MACRO STY_abs addr
	                            	IFDEF COMPATIBILITY
	                            		.db $8c
	                            		.dw addr
	                            	ELSE
	                            		STY addr
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; INC $0000
	                            ;
	                            MACRO INC_abs addr
	                            	IFDEF COMPATIBILITY
	                            		.db $ee
	                            		.dw addr
	                            	ELSE
	                            		INC addr
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; AND $0000
	                            ;
	                            MACRO AND_abs addr
	                            	IFDEF COMPATIBILITY
	                            		.db $2d
	                            		.dw addr
	                            	ELSE
	                            		INC addr
	                            		NOP_compat
	                            	ENDIF
	                            ENDM
	                            
	                            ;
	                            ; Pad out unused space used in the original, if needed
	                            ;
	                            MACRO unusedSpace padTo with
	                            	IFDEF PRESERVE_UNUSED_SPACE
	                            		.pad padTo, with
	                            	ENDIF
	                            ENDM
	                            
	                            ; distTo
	                            ; Outputs distance (byte) to label
	                            ; e.g.:
	                            ; .db (+ - $)  is  distTo +
	                            ;
	                            MACRO distTo label
	                            	.db (label - $)
	                            ENDM
	                            
	                            MACRO enemy x, y, type
	                            	.db type, x << 4 | y
	                            ENDM
	                            
	                            ;
	                            ; LevelHeader macro
	                            ;
	                            ; The order of the parameters is slightly different than how it's encoded, but
	                            ; hopefully this order is a little more intuitive?
	                            ;
	                            MACRO levelHeader pages, horizontal, bgPalette, spritePalette, music, objectTypeAXFX, objectType3X9X, groundSetting, groundType
	                            	.db horizontal << 7 | bgPalette << 3 | spritePalette
	                            	.db %11100000 | groundSetting
	                            	.db pages << 4 | objectTypeAXFX << 2 | objectType3X9X
	                            	IFNDEF LEVEL_ENGINE_UPGRADES
	                            		.db groundType << 3 | music
	                            	ENDIF
	                            	IFDEF LEVEL_ENGINE_UPGRADES
	                            		.db groundType << 4 | music
	                            	ENDIF
	                            ENDM
	                            
	                            MACRO musicPointerOffset label, offset
	                            	.db (label - MusicPointerOffset + offset)
	                            ENDM
	                            
	                            MACRO musicPart label
	                            	.db (label - MusicPartPointers)
	                            ENDM
	                            
	                            MACRO noteLength label
	                            	.db (label - NoteLengthTable)
	                            ENDM
	                            
	                            ;
	                            ; MusicHeader macro, to replace this:
	                            ;	noteLength NoteLengthTable_300bpm
	                            ;	.dw MusicDataXXX
	                            ;	.db MusicDataXXX_Triangle - MusicDataXXX
	                            ;	.db MusicDataXXX_Square1 - MusicDataXXX
	                            ;	.db MusicDataXXX_Noise - MusicDataXXX
	                            ;	; no noise channel, using $00 from below
	                            ;
	                            ; Setting "noise" or "dpcm" to -1 will suppress output of $00 for music headers
	                            ; "reuse" the note length from the following header to save bytes.
	                            ;
	                            ; If EXPAND_MUSIC is enabled, the $00 will always be output.
	                            ;
	                            MACRO musicHeader noteLengthLabel, square2, triangle, square1, noise, dpcm
	                            	noteLength noteLengthLabel
	                            	.dw square2
	                            	IF triangle <= 0
	                            		.db $00
	                            	ELSE
	                            		.db (triangle - square2)
	                            	ENDIF
	                            	IF square1 <= 0
	                            		.db $00
	                            	ELSE
	                            		.db (square1 - square2)
	                            	ENDIF
	                            
	                            	IFNDEF EXPAND_MUSIC
	                            		IF noise = 0
	                            			.db $00
	                            		ELSEIF noise > 0
	                            			.db (noise - square2)
	                            		ENDIF
	                            		IF dpcm = 0
	                            			.db $00
	                            		ELSEIF dpcm > 0
	                            			.db (dpcm - square2)
	                            		ENDIF
	                            	ELSE
	                            		IF noise <= 0
	                            			.db $00
	                            		ELSE
	                            			.db (noise - square2)
	                            		ENDIF
	                            		IF dpcm <= 0
	                            			.db $00
	                            		ELSE
	                            			.db (dpcm - square2)
	                            		ENDIF
	                            	ENDIF
	                            ENDM
	                            
	                            ; -----------------------------------------
	                            ; Add definitions
	                            .enum $0000
00000                           .include "src/defs.asm"
00000                           .ignorenl
00000                           
00000                           ; MMC3
00000                           IFNDEF MMC5
00000                           VMirror = $00
00000                           HMirror = $01
00000                           NametableMapping = $A000
00000                           ENDIF
00000                           
00000                           ; MMC5
00000                           IFDEF MMC5
00000                           VMirror = $44
00000                           HMirror = $50
00000                           NametableMapping = $5105
00000                           ENDIF
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; Each level has a maximum of 10 ($00~$09) areas.
00000                           ; Extra ones are generally empty or pointers to the last 'real' area.
00000                           ; "Common jars", if used in a level, occupy area $04.
00000                           ; but if common jars aren't used, it can (and often is) a regular area.
00000                           AreaIndex_Start = $00
00000                           AreaIndex_Jar = $04
00000                           
00000                           ; enum PlayerStates (width 1 byte)
00000                           PlayerState_Normal = $00
00000                           PlayerState_Climbing = $01
00000                           PlayerState_Lifting = $02
00000                           PlayerState_ClimbingAreaTransition = $03
00000                           PlayerState_GoingDownJar = $04
00000                           PlayerState_ExitingJar = $05
00000                           PlayerState_HawkmouthEating = $06
00000                           PlayerState_Dying = $07
00000                           PlayerState_ChangingSize = $08
00000                           
00000                           ; enum TransitionTypes (width 1 byte)
00000                           TransitionType_Reset = $00
00000                           TransitionType_Door = $01
00000                           TransitionType_Jar = $02
00000                           TransitionType_Vine = $03
00000                           TransitionType_SubSpace = $04
00000                           TransitionType_Rocket = $05
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum Characters
00000                           Character_Mario = $00
00000                           Character_Princess = $01
00000                           Character_Toad = $02
00000                           Character_Luigi = $03
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum APUOffset
00000                           APUOffset_Square1 = $00
00000                           APUOffset_Square2 = $04
00000                           APUOffset_Triangle = $08
00000                           APUOffset_Noise = $0C
00000                           
00000                           ; enum Music1
00000                           IFNDEF EXPAND_MUSIC
00000                             Music1_Overworld = $01
00000                             Music1_CharacterSelect = $02
00000                             Music1_Inside = $04
00000                             Music1_Boss = $08
00000                             Music1_Invincible = $10
00000                             Music1_Subspace = $20
00000                             Music1_Wart = $40
00000                             Music1_Title = $80
00000                           ELSE
00000                             Music1_Overworld = $01
00000                             Music1_CharacterSelect = $02
00000                             Music1_Inside = $03
00000                             Music1_Boss = $04
00000                             Music1_Invincible = $05
00000                             Music1_Subspace = $06
00000                             Music1_Wart = $07
00000                             Music1_Title = $08
00000                           ENDIF
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum Music2
00000                           IFNDEF EXPAND_MUSIC
00000                             Music2_MushroomGetJingle = $01
00000                             Music2_BossClearFanfare = $02
00000                             Music2_EndingAndCast = $04
00000                             Music2_DeathJingle = $08
00000                             Music2_GameOver = $10
00000                             Music2_CrystalGetFanfare = $20
00000                             Music2_SlotWarpFanfare = $40
00000                           ELSE
00000                             Music2_MushroomGetJingle = $01
00000                             Music2_BossClearFanfare = $02
00000                             Music2_EndingAndCast = $03
00000                             Music2_DeathJingle = $04
00000                             Music2_GameOver = $05
00000                             Music2_CrystalGetFanfare = $06
00000                             Music2_SlotWarpFanfare = $07
00000                           ENDIF
00000                           Music2_StopMusic = $80
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum ControllerInput (bitfield) (width 1 byte)
00000                           ControllerInput_Right = %00000001
00000                           ControllerInput_Left = %00000010
00000                           ControllerInput_Down = %00000100
00000                           ControllerInput_Up =  %00001000
00000                           ControllerInput_Start = %00010000
00000                           ControllerInput_Select = %00100000
00000                           ControllerInput_B = %01000000
00000                           ControllerInput_A = %10000000
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum DPCM (width 1 byte)
00000                           IFNDEF EXPAND_MUSIC
00000                             DPCM_DoorOpenBombBom = $01
00000                             DPCM_DrumSample_A = $02
00000                             DPCM_PlayerHurt = $04
00000                             DPCM_ItemPull = $08
00000                             DPCM_BossDeath = $10
00000                             DPCM_DrumSample_B = $20
00000                             DPCM_BossHurt = $40
00000                             DPCM_PlayerDeath = $80
00000                           ELSE
00000                             DPCM_DoorOpenBombBom = $01
00000                             DPCM_DrumSample_A = $02
00000                             DPCM_PlayerHurt = $03
00000                             DPCM_ItemPull = $04
00000                             DPCM_BossDeath = $05
00000                             DPCM_DrumSample_B = $06
00000                             DPCM_BossHurt = $07
00000                             DPCM_PlayerDeath = $08
00000                           ENDIF
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum SoundEffect1 (width 1 byte)
00000                           SoundEffect1_BirdoShot = $01
00000                           SoundEffect1_PotionDoorBong = $02
00000                           SoundEffect1_CherryGet = $04
00000                           SoundEffect1_ThrowItem = $08
00000                           SoundEffect1_1UP = $10
00000                           SoundEffect1_EnemyHit = $20
00000                           SoundEffect1_StopwatchTick = $40
00000                           SoundEffect1_HawkOpen_WartBarf = $80
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum PRGBank (width 1 byte)
00000                           PRGBank_0_1 = $00
00000                           PRGBank_2_3 = $01
00000                           PRGBank_4_5 = $02
00000                           PRGBank_6_7 = $03
00000                           PRGBank_8_9 = $04
00000                           PRGBank_A_B = $05
00000                           PRGBank_C_D = $06
00000                           PRGBank_E_F = $07
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum ScreenUpdateBuffer
00000                           ScreenUpdateBuffer_RAM_301 = $00
00000                           ScreenUpdateBuffer_RAM_583 = $01
00000                           ScreenUpdateBuffer_RAM_55F = $02
00000                           ScreenUpdateBuffer_CharacterSelect = $03
00000                           ScreenUpdateBuffer_BANKE_DE7A = $04
00000                           ScreenUpdateBuffer_Text_Game_Over = $05
00000                           ScreenUpdateBuffer_RAM_67B = $06
00000                           ScreenUpdateBuffer_Text_Retry = $07
00000                           ScreenUpdateBuffer_RAM_7168 = $08 ; pause / title card?
00000                           ScreenUpdateBuffer_RAM_67B_again = $09
00000                           ScreenUpdateBuffer_RAM_693 = $0A
00000                           ScreenUpdateBuffer_RAM_6ab = $0B
00000                           ScreenUpdateBuffer_RAM_6bd = $0C
00000                           ScreenUpdateBuffer_RAM_6cc = $0D
00000                           ScreenUpdateBuffer_RAM_6e9 = $0E
00000                           ScreenUpdateBuffer_RAM_6da = $0F
00000                           ScreenUpdateBuffer_RAM_6df = $10
00000                           ScreenUpdateBuffer_RAM_6e4 = $11
00000                           ScreenUpdateBuffer_RAM_7194 = $12
00000                           ScreenUpdateBuffer_RAM_71a8 = $13
00000                           ScreenUpdateBuffer_RAM_721b = $14
00000                           ScreenUpdateBuffer_TitleCard = $15
00000                           ScreenUpdateBuffer_PauseExtraLife = $16
00000                           ScreenUpdateBuffer_RAM_BonusChanceLayout = $17
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum EndingUpdateBuffer (width 1 byte)
00000                           EndingUpdateBuffer_RAM_301 = $00
00000                           EndingUpdateBuffer_JarRoom = $01
00000                           EndingUpdateBuffer_CeilingTextAndPodium = $02
00000                           EndingUpdateBuffer_FloorAndSubconParade = $03
00000                           EndingUpdateBuffer_PaletteFade1 = $04
00000                           EndingUpdateBuffer_PaletteFade2 = $05
00000                           EndingUpdateBuffer_PaletteFade3 = $06
00000                           EndingUpdateBuffer_SubconStandStill = $07
00000                           EndingUpdateBuffer_Unused_THE_END = $08
00000                           EndingUpdateBuffer_Text_MARIO = $09
00000                           EndingUpdateBuffer_Text_PRINCESS = $0A
00000                           EndingUpdateBuffer_Text_TOAD = $0B
00000                           EndingUpdateBuffer_Text_LUIGI = $0C
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum SoundEffect2 (width 1 byte)
00000                           SoundEffect2_Jump = $01
00000                           SoundEffect2_Climbing = $02
00000                           SoundEffect2_CoinGet = $04
00000                           SoundEffect2_Shrinking = $08
00000                           SoundEffect2_IntroFallSlide = $10
00000                           SoundEffect2_Growing = $20
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum PPUStatus (bitfield) (width 1 byte)
00000                           PPUStatus_SpriteOverflow = %100000
00000                           PPUStatus_Sprite0Hit = %1000000
00000                           PPUStatus_VBlankHit = %10000000
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum SoundEffect3
00000                           SoundEffect3_ShortNoise = $01 ; Whale spout
00000                           SoundEffect3_Rumble_A = $02 ; Rocket
00000                           SoundEffect3_Rumble_B = $04 ; POW rumble
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum SlotMachineSymbols (width 1 byte)
00000                           Slot_Cherry = $00
00000                           Slot_Star = $08
00000                           Slot_Turnip = $10
00000                           Slot_Snifit = $18
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum SpriteAnimations
00000                           SpriteAnimation_Walking = $00
00000                           SpriteAnimation_WalkingCarrying = $01
00000                           SpriteAnimation_Standing = $02
00000                           SpriteAnimation_StandingCarrying = $03
00000                           SpriteAnimation_Ducking = $04
00000                           SpriteAnimation_5 = $05
00000                           SpriteAnimation_Jumping = $06
00000                           SpriteAnimation_Dead = $07
00000                           SpriteAnimation_Pulling = $08
00000                           SpriteAnimation_Throwing = $09
00000                           SpriteAnimation_Climbing = $0A
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum PlayerHealthValues
00000                           PlayerHealth_1_HP = $0F
00000                           PlayerHealth_2_HP = $1F
00000                           PlayerHealth_3_HP = $2F
00000                           PlayerHealth_4_HP = $3F
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum PPUMaskBitmask (bitfield) (width 1 byte)
00000                           PPUMask_Grayscale = %00000001
00000                           PPUMask_ShowLeft8Pixels_BG = %00000010
00000                           PPUMask_ShowLeft8Pixels_SPR = %00000100
00000                           PPUMask_ShowBackground = %00001000
00000                           PPUMask_ShowSprites = %00010000
00000                           PPUMask_RedEmphasis = %00100000
00000                           PPUMask_GreenEmphasis = %01000000
00000                           PPUMask_BlueEmphasis = %10000000
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum PPUTileDataLength (bitfield) (width 1 byte)
00000                           PPUData_Length = $00
00000                           PPUTileData_RepeatOneTile = $40
00000                           PPUData_Horizontal = $00
00000                           PPUData_Vertical = $80
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum GameModes
00000                           GameMode_InGame = $00
00000                           GameMode_TitleCard = $01
00000                           GameMode_GameOver = $02
00000                           GameMode_BonusChance = $03
00000                           GameMode_Warp = $04
00000                           
00000                           ; enum Stack100
00000                           Stack100_Menu = %01000000 ; static screens (eg. character select)
00000                           Stack100_Pause = %01000001 ; static screen with muted square channels (pause)
00000                           Stack100_Transition = %10000000 ; used for transitions, disable input and mirroring
00000                           Stack100_Gameplay = %11000000 ; normal gameplay
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum PPUControl (bitfield) (width 1 byte)
00000                           PPUCtrl_BaseAddress = $03
00000                           PPUCtrl_Base2000 = $00
00000                           PPUCtrl_Base2400 = $01
00000                           PPUCtrl_Base2800 = $02
00000                           PPUCtrl_Base2C00 = $03
00000                           PPUCtrl_WriteHorizontal = $00
00000                           PPUCtrl_WriteVertical = $04
00000                           PPUCtrl_Sprite0000 = $00
00000                           PPUCtrl_Sprite1000 = $08
00000                           PPUCtrl_Background0000 = $00
00000                           PPUCtrl_Background1000 = $10
00000                           PPUCtrl_SpriteSize8x8 = $00
00000                           PPUCtrl_SpriteSize8x16 = $20
00000                           PPUCtrl_NMIDisabled = $00
00000                           PPUCtrl_NMIEnabled = $80
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum EnemyStates
00000                           EnemyState_Inactive = $00
00000                           EnemyState_Alive = $01
00000                           EnemyState_Dead = $02
00000                           EnemyState_BlockFizzle = $03
00000                           EnemyState_BombExploding = $04
00000                           EnemyState_PuffOfSmoke = $05
00000                           EnemyState_Sand = $06
00000                           EnemyState_7 = $07
00000                           EnemyState_27 = $27
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum ObjectAttribute (bitfield)
00000                           ObjAttrib_Palette = %00000011
00000                           ObjAttrib_Palette0 = $00
00000                           ObjAttrib_Palette1 = $01
00000                           ObjAttrib_Palette2 = $02
00000                           ObjAttrib_Palette3 = $03
00000                           ObjAttrib_Horizontal = %00000100 ; use with ObjAttrib_16x32 for 32x16
00000                           ObjAttrib_FrontFacing = %00001000 ; no direction-based mirroring
00000                           ObjAttrib_Mirrored = %00010000
00000                           ObjAttrib_BehindBackground = %00100000
00000                           ObjAttrib_16x32 = %01000000
00000                           ObjAttrib_UpsideDown = %10000000 ; appears behind background when pulling
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum BackgroundTileIds
00000                           BackgroundTile_Black = $00
00000                           BackgroundTile_BgCloudLeft = $01
00000                           BackgroundTile_BgCloudRight = $02
00000                           BackgroundTile_BgCloudSmall = $03
00000                           BackgroundTile_WaterfallTop = $04
00000                           BackgroundTile_Waterfall = $05
00000                           BackgroundTile_WaterfallSplash = $06
00000                           BackgroundTile_Chain = $07
00000                           BackgroundTile_WaterTop = $08
00000                           BackgroundTile_HouseLeft = $09
00000                           BackgroundTile_Water = $0A
00000                           BackgroundTile_HouseMiddle = $0B
00000                           BackgroundTile_WaterWhale = $0C
00000                           BackgroundTile_HouseRight = $0D
00000                           BackgroundTile_Unused0E = $0E
00000                           BackgroundTile_Unused0F = $0F
00000                           BackgroundTile_Unused10 = $10
00000                           BackgroundTile_WaterWhaleTail = $11
00000                           BackgroundTile_JumpThroughBlock = $12
00000                           BackgroundTile_CloudLeft = $13
00000                           BackgroundTile_CloudMiddle = $14
00000                           BackgroundTile_CloudRight = $15
00000                           BackgroundTile_JumpThroughIce = $16
00000                           BackgroundTile_ChainStandable = $17
00000                           BackgroundTile_SolidBrick0 = $18
00000                           BackgroundTile_GroundBrick0 = $19
00000                           BackgroundTile_Spikes = $1A
00000                           BackgroundTile_SolidRoundBrick0 = $1B
00000                           BackgroundTile_SolidBlock = $1C
00000                           BackgroundTile_CactusTop = $1D
00000                           BackgroundTile_CactusMiddle = $1E
00000                           BackgroundTile_FrozenRock = $1F
00000                           BackgroundTile_LogPillarTop0 = $20
00000                           BackgroundTile_LogPillarMiddle0 = $21
00000                           BackgroundTile_ClawGripRock = $22
00000                           BackgroundTile_Unused23 = $23 ; These are just solid palette-swapped mirrors of $40
00000                           BackgroundTile_Unused24 = $24
00000                           BackgroundTile_Unused25 = $25
00000                           BackgroundTile_Unused26 = $26
00000                           BackgroundTile_Unused27 = $27
00000                           BackgroundTile_Unused28 = $28
00000                           BackgroundTile_Unused29 = $29
00000                           BackgroundTile_Unused2A = $2A
00000                           BackgroundTile_Unused2B = $2B
00000                           BackgroundTile_Unused2C = $2C
00000                           BackgroundTile_Unused2D = $2D
00000                           BackgroundTile_Unused2E = $2E
00000                           BackgroundTile_Unused2F = $2F
00000                           BackgroundTile_Unused30 = $30
00000                           BackgroundTile_Unused31 = $31
00000                           BackgroundTile_Unused32 = $32
00000                           BackgroundTile_Unused33 = $33
00000                           BackgroundTile_Unused34 = $34
00000                           BackgroundTile_Unused35 = $35
00000                           BackgroundTile_Unused36 = $36
00000                           BackgroundTile_Unused37 = $37
00000                           BackgroundTile_Unused38 = $38
00000                           BackgroundTile_Unused39 = $39
00000                           BackgroundTile_Unused3A = $3A
00000                           BackgroundTile_Unused3B = $3B
00000                           BackgroundTile_Unused3C = $3C
00000                           BackgroundTile_Unused3D = $3D
00000                           BackgroundTile_Unused3E = $3E
00000                           BackgroundTile_Unused3F = $3F
00000                           BackgroundTile_Sky = $40
00000                           BackgroundTile_SubspaceMushroom1 = $41
00000                           BackgroundTile_SubspaceMushroom2 = $42
00000                           BackgroundTile_GrassCoin = $43
00000                           BackgroundTile_GrassLargeVeggie = $44
00000                           BackgroundTile_GrassSmallVeggie = $45
00000                           BackgroundTile_GrassRocket = $46
00000                           BackgroundTile_GrassShell = $47
00000                           BackgroundTile_GrassBomb = $48
00000                           BackgroundTile_GrassPotion = $49
00000                           BackgroundTile_Grass1UP = $4A
00000                           BackgroundTile_GrassPow = $4B
00000                           BackgroundTile_GrassBobOmb = $4C
00000                           BackgroundTile_GrassInactive = $4D
00000                           BackgroundTile_Cherry = $4E
00000                           BackgroundTile_DoorTop = $4F
00000                           BackgroundTile_DoorBottomLock = $50
00000                           BackgroundTile_DoorBottom = $51
00000                           BackgroundTile_LightDoor = $52
00000                           BackgroundTile_LightTrailRight = $53
00000                           BackgroundTile_LightTrail = $54
00000                           BackgroundTile_LightTrailLeft = $55
00000                           BackgroundTile_LightDoorEndLevel = $56
00000                           BackgroundTile_DoorBottomLockStuck = $57
00000                           BackgroundTile_DrawBridgeChain = $58
00000                           BackgroundTile_Whale = $59
00000                           BackgroundTile_WhaleEye = $5A
00000                           BackgroundTile_Phanto = $5B
00000                           BackgroundTile_TreeBackgroundLeft = $5C
00000                           BackgroundTile_TreeBackgroundMiddleLeft = $5D
00000                           BackgroundTile_TreeBackgroundRight = $5E
00000                           BackgroundTile_TreeBackgroundMiddleRight = $5F
00000                           BackgroundTile_WhaleTopLeft = $60
00000                           BackgroundTile_WhaleTop = $61
00000                           BackgroundTile_WhaleTopRight = $62
00000                           BackgroundTile_WhaleTail = $63
00000                           BackgroundTile_JumpThroughMachineBlock = $64
00000                           BackgroundTile_Bridge = $65
00000                           BackgroundTile_BridgeShadow = $66
00000                           BackgroundTile_ConveyorLeft = $67
00000                           BackgroundTile_ConveyorRight = $68
00000                           BackgroundTile_MushroomBlock = $69
00000                           BackgroundTile_Unused6AMushroomBlock = $6A
00000                           BackgroundTile_Unused6BMushroomBlock = $6B
00000                           BackgroundTile_POWBlock = $6C
00000                           BackgroundTile_Unused6D = $6D ; Used to mark where the liftable blocks end
00000                           BackgroundTile_SolidBrick1 = $6E
00000                           BackgroundTile_JarTopPointer = $6F
00000                           BackgroundTile_JarMiddle = $70
00000                           BackgroundTile_JarBottom = $71
00000                           BackgroundTile_JarSmall = $72
00000                           BackgroundTile_JarTopGeneric = $73
00000                           BackgroundTile_JarTopNonEnterable = $74
00000                           BackgroundTile_LogLeft = $75
00000                           BackgroundTile_LogMiddle = $76
00000                           BackgroundTile_LogRight = $77
00000                           BackgroundTile_LogRightTree = $78
00000                           BackgroundTile_LogPillarTop1 = $79
00000                           BackgroundTile_LogPillarMiddle1 = $7A
00000                           BackgroundTile_Unused7B = $7B
00000                           BackgroundTile_Unused7C = $7C
00000                           BackgroundTile_Unused7D = $7D
00000                           BackgroundTile_Unused7E = $7E
00000                           BackgroundTile_Unused7F = $7F
00000                           BackgroundTile_Ladder = $80
00000                           BackgroundTile_LadderShadow = $81
00000                           BackgroundTile_PalmTreeTrunk = $82
00000                           BackgroundTile_DarkDoor = $83
00000                           BackgroundTile_PyramidLeftAngle = $84
00000                           BackgroundTile_PyramidLeft = $85
00000                           BackgroundTile_PyramidRight = $86
00000                           BackgroundTile_PyramidRightAngle = $87
00000                           BackgroundTile_StarBg1 = $88
00000                           BackgroundTile_StarBg2 = $89
00000                           BackgroundTile_QuicksandSlow = $8A
00000                           BackgroundTile_QuicksandFast = $8B
00000                           BackgroundTile_HornTopLeft = $8C
00000                           BackgroundTile_HornTopRight = $8D
00000                           BackgroundTile_HornBottomLeft = $8E
00000                           BackgroundTile_HornBottomRight = $8F
00000                           BackgroundTile_BackgroundBrick = $90
00000                           BackgroundTile_JumpthroughSand = $91
00000                           BackgroundTile_JumpthroughWoodBlock = $92
00000                           BackgroundTile_DiggableSand = $93
00000                           BackgroundTile_LadderStandable = $94
00000                           BackgroundTile_LadderStandableShadow = $95
00000                           BackgroundTile_JumpthroughSandBlock = $96
00000                           BackgroundTile_JumpthroughBrick = $97
00000                           BackgroundTile_98 = $98
00000                           BackgroundTile_SolidSand = $99
00000                           BackgroundTile_9A = $9A
00000                           BackgroundTile_SolidBrick2 = $9B
00000                           BackgroundTile_GroundBrick2 = $9C
00000                           BackgroundTile_BombableBrick = $9D
00000                           BackgroundTile_JarWall = $9E ; solid color, solid wall
00000                           BackgroundTile_RockWallAngle = $9F
00000                           BackgroundTile_RockWall = $A0
00000                           BackgroundTile_RockWallOffset = $A1
00000                           BackgroundTile_SolidRoundBrick2 = $A2
00000                           BackgroundTile_SolidBrick2Wall = $A3
00000                           BackgroundTile_SolidWood = $A4
00000                           BackgroundTile_RockWallEyeLeft = $A5 ; World 6
00000                           BackgroundTile_RockWallEyeRight = $A6 ; World 6
00000                           BackgroundTile_RockWallMouth = $A7 ; World 6
00000                           BackgroundTile_WindowTop = $A8 ; World 7
00000                           BackgroundTile_DoorwayTop = $A9 ; World 7
00000                           BackgroundTile_ColumnPillarTop2 = $AA
00000                           BackgroundTile_ColumnPillarMiddle2 = $AB
00000                           BackgroundTile_UnusedAC = $AC
00000                           BackgroundTile_UnusedAD = $AD
00000                           BackgroundTile_UnusedAE = $AE
00000                           BackgroundTile_UnusedAF = $AF
00000                           BackgroundTile_UnusedB0 = $B0 ; These are just solid palette-swapped mirrors of $C4
00000                           BackgroundTile_UnusedB1 = $B1
00000                           BackgroundTile_UnusedB2 = $B2
00000                           BackgroundTile_UnusedB3 = $B3 ; SolidPlatformLeft2
00000                           BackgroundTile_UnusedB4 = $B4 ; SolidPlatformMiddle2
00000                           BackgroundTile_UnusedB5 = $B5 ; SolidPlatformRight2
00000                           BackgroundTile_UnusedB6 = $B6 ; SolidPlatformTopLeft2
00000                           BackgroundTile_UnusedB7 = $B7
00000                           BackgroundTile_UnusedB8 = $B8 ; SolidPlatformTop2
00000                           BackgroundTile_UnusedB9 = $B9
00000                           BackgroundTile_UnusedBA = $BA ; SolidPlatformTopRight2
00000                           BackgroundTile_UnusedBB = $BB
00000                           BackgroundTile_UnusedBC = $BC ; SolidPlatformTopLeftOverlap2
00000                           BackgroundTile_UnusedBD = $BD ; SolidPlatformTopRightOverlap2
00000                           BackgroundTile_UnusedBE = $BE ; SolidPlatformTopLeftOverlapEdge2
00000                           BackgroundTile_UnusedBF = $BF ; SolidPlatformTopRightOverlapEdge2
00000                           BackgroundTile_PalmTreeTop = $C0
00000                           BackgroundTile_VineTop = $C1
00000                           BackgroundTile_Vine = $C2
00000                           BackgroundTile_VineBottom = $C3
00000                           BackgroundTile_ClimbableSky = $C4
00000                           BackgroundTile_UnusedC5 = $C5
00000                           BackgroundTile_JarOutsideBackground = $C6 ; solid color, background
00000                           BackgroundTile_GreenPlatformLeft = $C7
00000                           BackgroundTile_GreenPlatformMiddle = $C8
00000                           BackgroundTile_GreenPlatformRight = $C9
00000                           BackgroundTile_GreenPlatformTopLeft = $CA
00000                           BackgroundTile_MushroomTopLeft = $CB
00000                           BackgroundTile_GreenPlatformTop = $CC
00000                           BackgroundTile_MushroomTopMiddle = $CD
00000                           BackgroundTile_GreenPlatformTopRight = $CE
00000                           BackgroundTile_MushroomTopRight = $CF
00000                           BackgroundTile_GreenPlatformTopLeftOverlap = $D0
00000                           BackgroundTile_GreenPlatformTopRightOverlap = $D1
00000                           BackgroundTile_GreenPlatformTopLeftOverlapEdge = $D2
00000                           BackgroundTile_GreenPlatformTopRightOverlapEdge = $D3
00000                           BackgroundTile_VineStandable = $D4
00000                           BackgroundTile_SolidGrass = $D5
00000                           BackgroundTile_SolidBrick3 = $D6
00000                           BackgroundTile_GroundBrick3 = $D7 ; World 7
00000                           BackgroundTile_UnusedD8 = $D8
00000                           BackgroundTile_UnusedD9 = $D9
00000                           BackgroundTile_UnusedDA = $DA
00000                           BackgroundTile_UnusedDB = $DB
00000                           BackgroundTile_UnusedDC = $DC
00000                           BackgroundTile_UnusedDD = $DD
00000                           BackgroundTile_UnusedDE = $DE
00000                           BackgroundTile_UnusedDF = $DF
00000                           BackgroundTile_UnusedE0 = $E0
00000                           BackgroundTile_UnusedE1 = $E1
00000                           BackgroundTile_UnusedE2 = $E2
00000                           BackgroundTile_UnusedE3 = $E3
00000                           BackgroundTile_UnusedE4 = $E4
00000                           BackgroundTile_UnusedE5 = $E5
00000                           BackgroundTile_UnusedE6 = $E6
00000                           BackgroundTile_UnusedE7 = $E7
00000                           BackgroundTile_UnusedE8 = $E8
00000                           BackgroundTile_UnusedE9 = $E9
00000                           BackgroundTile_UnusedEA = $EA
00000                           BackgroundTile_UnusedEB = $EB
00000                           BackgroundTile_UnusedEC = $EC
00000                           BackgroundTile_UnusedED = $ED
00000                           BackgroundTile_UnusedEE = $EE
00000                           BackgroundTile_UnusedEF = $EF
00000                           BackgroundTile_UnusedF0 = $F0
00000                           BackgroundTile_UnusedF1 = $F1
00000                           BackgroundTile_UnusedF2 = $F2
00000                           BackgroundTile_UnusedF3 = $F3
00000                           BackgroundTile_UnusedF4 = $F4
00000                           BackgroundTile_UnusedF5 = $F5
00000                           BackgroundTile_UnusedF6 = $F6
00000                           BackgroundTile_UnusedF7 = $F7
00000                           BackgroundTile_UnusedF8 = $F8
00000                           BackgroundTile_UnusedF9 = $F9
00000                           BackgroundTile_UnusedFA = $FA
00000                           BackgroundTile_UnusedFB = $FB
00000                           BackgroundTile_UnusedFC = $FC
00000                           BackgroundTile_UnusedFD = $FD
00000                           BackgroundTile_UnusedFE = $FE
00000                           BackgroundTile_UnusedFF = $FF
00000                           
00000                           ; enum EnemyIds
00000                           Enemy_Heart = $00
00000                           Enemy_ShyguyRed = $01
00000                           Enemy_Tweeter = $02
00000                           Enemy_ShyguyPink = $03
00000                           Enemy_Porcupo = $04
00000                           Enemy_SnifitRed = $05
00000                           Enemy_SnifitGray = $06
00000                           Enemy_SnifitPink = $07
00000                           Enemy_Ostro = $08
00000                           Enemy_BobOmb = $09
00000                           Enemy_AlbatossCarryingBobOmb = $0A
00000                           Enemy_AlbatossStartRight = $0B
00000                           Enemy_AlbatossStartLeft = $0C
00000                           Enemy_NinjiRunning = $0D
00000                           Enemy_NinjiJumping = $0E
00000                           Enemy_BeezoDiving = $0F
00000                           Enemy_BeezoStraight = $10
00000                           Enemy_WartBubble = $11
00000                           Enemy_Pidgit = $12
00000                           Enemy_Trouter = $13
00000                           Enemy_Hoopstar = $14
00000                           Enemy_JarGeneratorShyguy = $15
00000                           Enemy_JarGeneratorBobOmb = $16
00000                           Enemy_Phanto = $17
00000                           Enemy_CobratJar = $18
00000                           Enemy_CobratSand = $19
00000                           Enemy_Pokey = $1A
00000                           Enemy_Bullet = $1B
00000                           Enemy_Birdo = $1C
00000                           Enemy_Mouser = $1D
00000                           Enemy_Egg = $1E
00000                           Enemy_Tryclyde = $1F
00000                           Enemy_Fireball = $20
00000                           Enemy_Clawgrip = $21
00000                           Enemy_ClawgripRock = $22
00000                           Enemy_PanserStationaryFiresAngled = $23
00000                           Enemy_PanserWalking = $24
00000                           Enemy_PanserStationaryFiresUp = $25
00000                           Enemy_Autobomb = $26
00000                           Enemy_AutobombFire = $27
00000                           Enemy_WhaleSpout = $28
00000                           Enemy_Flurry = $29
00000                           Enemy_Fryguy = $2A
00000                           Enemy_FryguySplit = $2B
00000                           Enemy_Wart = $2C
00000                           Enemy_HawkmouthBoss = $2D
00000                           Enemy_Spark1 = $2E ; clockwise, slow
00000                           Enemy_Spark2 = $2F ; clockwise, fast
00000                           Enemy_Spark3 = $30 ; counter-clockwise, slow
00000                           Enemy_Spark4 = $31 ; counter-clockwise, fast
00000                           Enemy_VegetableSmall = $32
00000                           Enemy_VegetableLarge = $33
00000                           Enemy_VegetableWart = $34
00000                           Enemy_Shell = $35
00000                           Enemy_Coin = $36
00000                           Enemy_Bomb = $37
00000                           Enemy_Rocket = $38
00000                           Enemy_MushroomBlock = $39
00000                           Enemy_POWBlock = $3A
00000                           Enemy_FallingLogs = $3B
00000                           Enemy_SubspaceDoor = $3C
00000                           Enemy_Key = $3D
00000                           Enemy_SubspacePotion = $3E
00000                           Enemy_Mushroom = $3F
00000                           Enemy_Mushroom1up = $40
00000                           Enemy_FlyingCarpet = $41
00000                           Enemy_HawkmouthRight = $42
00000                           Enemy_HawkmouthLeft = $43
00000                           Enemy_CrystalBall = $44
00000                           Enemy_Starman = $45
00000                           Enemy_Stopwatch = $46
00000                           Enemy_AttackAlbatossCarryingBobOmb = $47
00000                           Enemy_AttackBeezo = $48
00000                           Enemy_StopAttack = $49
00000                           Enemy_VegetableThrower = $4A ; Used in Wart's room
00000                           Enemy_4B = $4B ; crash
00000                           Enemy_4C = $4C ; weird! makes game think you can always jump and pick up an enemy
00000                           Enemy_4D = $4D ; crash
00000                           Enemy_4E = $4E ; hangs, forces background scroll?
00000                           Enemy_4F = $4F ; hangs, forces background scroll?
00000                           Enemy_50 = $50 ; crash, b+w palette?
00000                           Enemy_51 = $51 ; crash
00000                           Enemy_52 = $52 ; hangs, forces background scroll?
00000                           Enemy_53 = $53 ; hangs, forces background scroll?
00000                           Enemy_54 = $54 ; weird invisible thing that doesn't quite crash
00000                           Enemy_55 = $55 ; seems to mess up player physics
00000                           Enemy_56 = $56 ; crash
00000                           Enemy_57 = $57 ; seems to mess up player physics
00000                           Enemy_58 = $58 ; seems to mess up player physics
00000                           Enemy_59 = $59 ; crash
00000                           Enemy_5A = $5A ; crash
00000                           Enemy_5B = $5B ; hangs, forces background scroll?
00000                           Enemy_BossBirdo = $5C
00000                           Enemy_BossMouser = $5D
00000                           Enemy_BossEgg = $5E
00000                           Enemy_BossTryclyde = $5F
00000                           Enemy_BossFireball = $60
00000                           Enemy_BossClawgrip = $61
00000                           Enemy_BossClawgripRock = $62
00000                           Enemy_BossPanserStationaryFiresAngled = $63
00000                           Enemy_BossPanserWalking = $64
00000                           Enemy_BossPanserStationaryFiresUp = $65
00000                           Enemy_BossAutobomb = $66
00000                           Enemy_BossAutobombFire = $67
00000                           Enemy_BossWhaleSpout = $68
00000                           Enemy_BossFlurry = $69
00000                           Enemy_BossFryguy = $6A
00000                           Enemy_BossFryguySplit = $6B
00000                           Enemy_BossWart = $6C
00000                           Enemy_BossHawkmouthBoss = $6D
00000                           Enemy_BossSpark1 = $6E
00000                           Enemy_BossSpark2 = $6F
00000                           Enemy_BossSpark3 = $70
00000                           Enemy_BossSpark4 = $71
00000                           Enemy_BossVegetableSmall = $72
00000                           Enemy_BossVegetableLarge = $73
00000                           Enemy_BossVegetableWart = $74
00000                           Enemy_BossShell = $75
00000                           Enemy_BossCoin = $76
00000                           Enemy_BossBomb = $77
00000                           Enemy_BossRocket = $78
00000                           Enemy_BossMushroomBlock = $79
00000                           Enemy_BossPOWBlock = $7A
00000                           Enemy_BossFallingLogs = $7B
00000                           Enemy_BossSubspaceDoor = $7C
00000                           Enemy_BossKey = $7D
00000                           Enemy_BossSubspacePotion = $7E
00000                           Enemy_BossMushroom = $7F
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           LevelDirection_Horizontal = 1
00000                           LevelDirection_Vertical = 0
00000                           
00000                           LevelMusic_Overworld = 0
00000                           LevelMusic_Underground = 1
00000                           LevelMusic_Boss = 2
00000                           LevelMusic_Wart = 3
00000                           
00000                           ; ---------------------------------------------------------------------------
00000                           
00000                           ; enum CollisionFlags (bitfield) (width 1 byte)
00000                           CollisionFlags_00 = %00000000
00000                           CollisionFlags_Right = %00000001
00000                           CollisionFlags_Left = %00000010
00000                           CollisionFlags_Down = %00000100
00000                           CollisionFlags_Up = %00001000
00000                           CollisionFlags_Damage = %00010000
00000                           CollisionFlags_PlayerOnTop = %00100000
00000                           CollisionFlags_PlayerInsideMaybe = %01000000
00000                           CollisionFlags_80 = %10000000
00000                           
00000                           ; enum CHRBank (width 1 byte)
00000                           
00000                           CHRBank_Mario = $00
00000                           CHRBank_Luigi = $01
00000                           CHRBank_Princess = $02
00000                           CHRBank_Toad = $03
00000                           CHRBank_MarioSmall = $04
00000                           CHRBank_LuigiSmall = $05
00000                           CHRBank_PrincessSmall = $06
00000                           CHRBank_ToadSmall = $07
00000                           
00000                           CHRBank_CommonEnemies1 = $08
00000                           CHRBank_CommonEnemies2 = $09
00000                           
00000                           CHRBank_BackgroundGrassClawgrip = $0A
00000                           
00000                           CHRBank_EnemiesGrass = $0C
00000                           CHRBank_EnemiesDesert = $0D
00000                           CHRBank_EnemiesIce = $0E
00000                           CHRBank_EnemiesSky = $0F
00000                           
00000                           CHRBank_BackgroundGrass = $10
00000                           CHRBank_BackgroundDesert = $12
00000                           CHRBank_BackgroundIce = $14
00000                           CHRBank_BackgroundSky = $16
00000                           
00000                           CHRBank_Animated1 = $18
00000                           CHRBank_Animated2 = $1A
00000                           CHRBank_Animated3 = $1C
00000                           CHRBank_Animated4 = $1E
00000                           CHRBank_Animated5 = $20
00000                           CHRBank_Animated6 = $22
00000                           CHRBank_Animated7 = $24
00000                           CHRBank_Animated8 = $26
00000                           
00000                           CHRBank_TitleScreenBG1 = $28
00000                           CHRBank_TitleScreenBG2 = $2A
00000                           
00000                           CHRBank_CharacterSelectBG1 = $2C
00000                           CHRBank_CharacterSelectBG2 = $2E
00000                           CHRBank_CharacterSelectSprites = $30
00000                           
00000                           CHRBank_ChanceBG1 = $34
00000                           CHRBank_ChanceBG2 = $36
00000                           
00000                           CHRBank_CelebrationBG1 = $38
00000                           CHRBank_CelebrationBG2 = $3A
00000                           
00000                           CHRBank_TitleCardGrass = $40
00000                           CHRBank_TitleCardDesert = $42
00000                           CHRBank_TitleCardIce = $44
00000                           CHRBank_TitleCardSky = $46
00000                           
00000                           CHRBank_EndingSprites = $48
00000                           CHRBank_EndingCast1 = $4C
00000                           CHRBank_EndingCast2 = $4D
00000                           CHRBank_EndingCast3 = $4E
00000                           CHRBank_EndingCast4 = $4F
00000                           CHRBank_EndingBackground1 = $50
00000                           CHRBank_EndingBackground2 = $54
00000                           CHRBank_EndingBackground3 = $58
00000                           CHRBank_EndingBackground4 = $5C
00000                           CHRBank_EndingBackground5 = $60
00000                           CHRBank_EndingBackground6 = $64
00000                           CHRBank_EndingBackground7 = $68
00000                           CHRBank_EndingBackground8 = $6C
00000                           
00000                           
00000                           .endinl
00000                           .ende
	                            
	                            ; Add RAM definitions
	                            .enum $0000
00000                           .include "src/ram.asm"
00000                           ;
00000                           ; NES and cart RAM
00000                           ; ================
00000                           ;
00000                           ; What's inside: some bits, some bytes. @todo: describe more
00000                           ;
00000                           ;   - 0000-00FF: Zero page, various things, enemies/player data
00000                           ;   - 0100-01FF: Stack area
00000                           ;   - 0200-02FF: Sprite OAM DMA area
00000                           ;   - 0300-03FF: PPU buffers, etc.
00000                           ;   - 0400-04FF: Some enemy data, other small game-state stuff
00000                           ;   - 0500-05FF: PPU buffers, more game state tracking and other crap
00000                           ;   - 0600-06FF: Music engine, bonus chance, more PPU buffers, etc.
00000                           ;   - 0700-07FF: Tile layout for subspace/jar areas
00000                           ;
00000                           ;   - 2000-2007: PPU registers
00000                           ;   - 4000-4017: APU and joypad registers
00000                           ;   - 5000-5015: Used by MMC5 expansion
00000                           ;   - 6000-7FFF: on-cart RAM; decoded level, level data, enemy data, and more
00000                           ;
00000                           ;   - 8000-FFFF: you're in the wrong file, pal. that's rom.
00000                           ;
00000                           
00000                           byte_RAM_0:
00000                           	.dsb 1 ; $0000
00001                           byte_RAM_1:
00001                           	.dsb 1 ; $0001
00002                           byte_RAM_2:
00002                           	.dsb 1 ; $0002
00003                           byte_RAM_3:
00003                           	.dsb 1 ; $0003
00004                           byte_RAM_4:
00004                           	.dsb 1 ; $0004
00005                           byte_RAM_5:
00005                           	.dsb 1 ; $0005
00006                           byte_RAM_6:
00006                           	.dsb 1 ; $0006
00007                           byte_RAM_7:
00007                           	.dsb 1 ; $0007
00008                           byte_RAM_8:
00008                           	.dsb 1 ; $0008
00009                           byte_RAM_9:
00009                           	.dsb 1 ; $0009
0000A                           byte_RAM_A:
0000A                           	.dsb 1 ; $000a
0000B                           byte_RAM_B:
0000B                           	.dsb 1 ; $000b
0000C                           byte_RAM_C:
0000C                           	.dsb 1 ; $000c
0000D                           byte_RAM_D:
0000D                           	.dsb 1 ; $000d
0000E                           byte_RAM_E:
0000E                           	.dsb 1 ; $000e
0000F                           byte_RAM_F:
0000F                           	.dsb 1 ; $000f
00010                           ; global counter
00010                           byte_RAM_10:
00010                           	.dsb 1 ; $0010
00011                           ScreenUpdateIndex:
00011                           	.dsb 1 ; $0011
00012                           byte_RAM_12:
00012                           	.dsb 1 ; $0012
00013                           BreakStartLevelLoop:
00013                           	.dsb 1 ; $0013
00014                           
00014                           PlayerXHi:
00014                           	.dsb 1 ; $0014
00015                           ObjectXHi:
00015                           	.dsb 1 ; $0015
00016                           	.dsb 1 ; 1                ; $0016
00017                           	.dsb 1 ; 2                ; $0017
00018                           	.dsb 1 ; 3                ; $0018
00019                           	.dsb 1 ; 4                ; $0019
0001A                           	.dsb 1 ; 5                ; $001a
0001B                           	.dsb 1 ; 6                ; $001b
0001C                           	.dsb 1 ; 7                ; $001c
0001D                           	.dsb 1 ; 8                ; $001d
0001E                           
0001E                           PlayerYHi:
0001E                           	.dsb 1 ; $001e
0001F                           ObjectYHi:
0001F                           	.dsb 1 ; $001f
00020                           	.dsb 1 ; 1                ; $0020
00021                           	.dsb 1 ; 2                ; $0021
00022                           	.dsb 1 ; 3                ; $0022
00023                           	.dsb 1 ; 4                ; $0023
00024                           	.dsb 1 ; 5                ; $0024
00025                           	.dsb 1 ; 6                ; $0025
00026                           	.dsb 1 ; 7                ; $0026
00027                           	.dsb 1 ; 8                ; $0027
00028                           
00028                           PlayerXLo:
00028                           	.dsb 1 ; $0028
00029                           ObjectXLo:
00029                           	.dsb 1 ; $0029
0002A                           	.dsb 1 ; 1                ; $002a
0002B                           	.dsb 1 ; 2                ; $002b
0002C                           	.dsb 1 ; 3                ; $002c
0002D                           	.dsb 1 ; 4                ; $002d
0002E                           	.dsb 1 ; 5                ; $002e
0002F                           	.dsb 1 ; 6                ; $002f
00030                           	.dsb 1 ; 7                ; $0030
00031                           	.dsb 1 ; 8                ; $0031
00032                           
00032                           PlayerYLo:
00032                           	.dsb 1 ; $0032
00033                           ObjectYLo:
00033                           	.dsb 1 ; $0033
00034                           	.dsb 1 ; 1                ; $0034
00035                           	.dsb 1 ; 2                ; $0035
00036                           	.dsb 1 ; 3                ; $0036
00037                           	.dsb 1 ; 4                ; $0037
00038                           	.dsb 1 ; 5                ; $0038
00039                           	.dsb 1 ; 6                ; $0039
0003A                           	.dsb 1 ; 7                ; $003a
0003B                           	.dsb 1 ; 8                ; $003b
0003C                           
0003C                           PlayerXVelocity:
0003C                           	.dsb 1 ; $003c
0003D                           ObjectXVelocity:
0003D                           	.dsb 1 ; $003d
0003E                           	.dsb 1 ; 1                ; $003e
0003F                           	.dsb 1 ; 2                ; $003f
00040                           	.dsb 1 ; 3                ; $0040
00041                           	.dsb 1 ; 4                ; $0041
00042                           	.dsb 1 ; 5                ; $0042
00043                           	.dsb 1 ; 6                ; $0043
00044                           	.dsb 1 ; 7                ; $0044
00045                           	.dsb 1 ; 8                ; $0045
00046                           
00046                           PlayerYVelocity:
00046                           	.dsb 1 ; $0046
00047                           ObjectYVelocity:
00047                           	.dsb 1 ; $0047
00048                           	.dsb 1 ; 1                ; $0048
00049                           	.dsb 1 ; 2                ; $0049
0004A                           	.dsb 1 ; 3                ; $004a
0004B                           	.dsb 1 ; 4                ; $004b
0004C                           	.dsb 1 ; 5                ; $004c
0004D                           	.dsb 1 ; 6                ; $004d
0004E                           	.dsb 1 ; 7                ; $004e
0004F                           	.dsb 1 ; 8                ; $004f
00050                           
00050                           ;
00050                           ; Player and Object States
00050                           ; ========================
00050                           ;
00050                           ; Some of these are for players, some of these are for objects/enemies
00050                           ;
00050                           ; $00 Normal
00050                           ; $01 ?
00050                           ; $02 Lifting up object
00050                           ; $03 ?
00050                           ; $04 Going down vase (causes warp if poked)
00050                           ; $05 Exiting vase
00050                           ; $06 ?
00050                           ; $07 Dying (falls off screen)
00050                           ; $08 Shrinking
00050                           ; $09+ Crash?
00050                           ; $27 @TODO object-related?
00050                           ;
00050                           PlayerState:
00050                           	.dsb 1 ; $0050
00051                           EnemyState:
00051                           	.dsb 1 ; $0051
00052                           	.dsb 1 ; 1                ; $0052
00053                           	.dsb 1 ; 2                ; $0053
00054                           	.dsb 1 ; 3                ; $0054
00055                           	.dsb 1 ; 4                ; $0055
00056                           	.dsb 1 ; 5                ; $0056
00057                           	.dsb 1 ; 6                ; $0057
00058                           	.dsb 1 ; 7                ; $0058
00059                           	.dsb 1 ; 8                ; $0059
0005A                           
0005A                           PlayerCollision: ; see CollisionFlags enum for bit definitions
0005A                           	.dsb 1 ; $005a
0005B                           EnemyCollision:
0005B                           	.dsb 1 ; $005b
0005C                           	.dsb 1 ; 1                ; $005c
0005D                           	.dsb 1 ; 2                ; $005d
0005E                           	.dsb 1 ; 3                ; $005e
0005F                           	.dsb 1 ; 4                ; $005f
00060                           	.dsb 1 ; 5                ; $0060
00061                           	.dsb 1 ; 6                ; $0061
00062                           	.dsb 1 ; 7                ; $0062
00063                           	.dsb 1 ; 8                ; $0063
00064                           
00064                           PlayerAttributes:
00064                           	.dsb 1 ; $0064
00065                           ObjectAttributes:
00065                           	.dsb 1 ; $0065
00066                           	.dsb 1 ; 1                ; $0066
00067                           	.dsb 1 ; 2                ; $0067
00068                           	.dsb 1 ; 3                ; $0068
00069                           	.dsb 1 ; 4                ; $0069
0006A                           	.dsb 1 ; 5                ; $006a
0006B                           	.dsb 1 ; 6                ; $006b
0006C                           	.dsb 1 ; 7                ; $006c
0006D                           	.dsb 1 ; 8                ; $006d
0006E                           
0006E                           ; $02 if moving left, $01 otherwise?
0006E                           PlayerMovementDirection:
0006E                           	.dsb 1 ; $006e
0006F                           EnemyMovementDirection:
0006F                           	.dsb 1 ; $006f
00070                           	.dsb 1 ; 1                ; $0070
00071                           	.dsb 1 ; 2                ; $0071
00072                           	.dsb 1 ; 3                ; $0072
00073                           	.dsb 1 ; 4                ; $0073
00074                           	.dsb 1 ; 5                ; $0074
00075                           	.dsb 1 ; 6                ; $0075
00076                           	.dsb 1 ; 7                ; $0076
00077                           	.dsb 1 ; 8                ; $0077
00078                           
00078                           ; FOR RENT
00078                           	.dsb 1 ; $0078
00079                           ; This is set on entering subspace, depending
00079                           ; on which particular mushroom is on the screen
00079                           ; (used to determine if it should show up
00079                           ; and also which mushroom it marks as collected)
00079                           ;
00079                           ; This also seems to determine a few other things:
00079                           ; - Tweeter jumps
00079                           ; - Falling log height
00079                           ; - Birdo subtype
00079                           ; etc.
00079                           ;
00079                           EnemyVariable:
00079                           	.dsb 1 ; DATA XREF: BANK0:9082w ; $0079
0007A                           	.dsb 1 ; 1 ; $007a
0007B                           	.dsb 1 ; 2 ; $007b
0007C                           	.dsb 1 ; 3 ; $007c
0007D                           	.dsb 1 ; 4 ; $007d
0007E                           	.dsb 1 ; 5 ; $007e
0007F                           	.dsb 1 ; 6 ; $007f
00080                           	.dsb 1 ; 7 ; $0080
00081                           	.dsb 1 ; 8 ; $0081
00082                           
00082                           PlayerStateTimer:
00082                           	.dsb 1 ; $0082
00083                           FreeSubconsTimer:
00083                           	.dsb 1 ; $0083
00084                           PlayerWalkFrameCounter: ; used for controlling speed of walk animation
00084                           	.dsb 1 ; $0084
00085                           DamageInvulnTime:
00085                           	.dsb 1 ; $0085
00086                           EnemyTimer:
00086                           	.dsb 1 ; $0086
00087                           	.dsb 1 ; 1                ; $0087
00088                           	.dsb 1 ; 2                ; $0088
00089                           	.dsb 1 ; 3                ; $0089
0008A                           	.dsb 1 ; 4                ; $008a
0008B                           	.dsb 1 ; 5                ; $008b
0008C                           	.dsb 1 ; 6                ; $008c
0008D                           	.dsb 1 ; 7                ; $008d
0008E                           FreeSubconsCorkCounter:
0008E                           	.dsb 1 ; $008e
0008F                           ; $00 Mario
0008F                           ; $01 Princess
0008F                           ; $02 Toad
0008F                           ; $03 Luigi
0008F                           CurrentCharacter:
0008F                           	.dsb 1 ; $008f
00090                           ObjectType:
00090                           	.dsb 1 ; $0090
00091                           	.dsb 1 ; 1                ; $0091
00092                           	.dsb 1 ; 2                ; $0092
00093                           	.dsb 1 ; 3                ; $0093
00094                           	.dsb 1 ; 4                ; $0094
00095                           	.dsb 1 ; 5                ; $0095
00096                           	.dsb 1 ; 6                ; $0096
00097                           	.dsb 1 ; 7                ; $0097
00098                           	.dsb 1 ; 8                ; $0098
00099                           ; $00 = on ground or enemy, $01 = in air
00099                           PlayerInAir:
00099                           	.dsb 1 ; $0099
0009A                           PlayerDucking:
0009A                           	.dsb 1 ; $009a
0009B                           PlayerWalkFrame:
0009B                           	.dsb 1 ; $009b
0009C                           HoldingItem:
0009C                           	.dsb 1 ; $009c
0009D                           ; $00 = left, $01 = right
0009D                           PlayerDirection:
0009D                           	.dsb 1 ; $009d
0009E                           ; FOR RENT
0009E                           byte_RAM_9E:
0009E                           	.dsb 1 ; $009e
0009F                           ObjectAnimationTimer:
0009F                           	.dsb 1 ; DATA XREF: BANK0:9099w ; $009f
000A0                           	.dsb 1 ; 1                ; $00a0
000A1                           	.dsb 1 ; 2                ; $00a1
000A2                           	.dsb 1 ; 3                ; $00a2
000A3                           	.dsb 1 ; 4                ; $00a3
000A4                           	.dsb 1 ; 5                ; $00a4
000A5                           	.dsb 1 ; 6                ; $00a5
000A6                           	.dsb 1 ; 7                ; $00a6
000A7                           	.dsb 1 ; 8                ; $00a7
000A8                           
000A8                           ; Set to 7 when lifting, then stays at 1
000A8                           ; Note that this doesn't seem to actually
000A8                           ; make you carry an item, it just THINKS
000A8                           ; it's being carried.
000A8                           ObjectBeingCarriedTimer:
000A8                           	.dsb 1 ; $00a8
000A9                           	.dsb 1 ; $00a9
000AA                           	.dsb 1 ; $00aa
000AB                           	.dsb 1 ; $00ab
000AC                           	.dsb 1 ; $00ac
000AD                           	.dsb 1 ; $00ad
000AE                           	.dsb 1 ; $00ae
000AF                           	.dsb 1 ; $00af
000B0                           	.dsb 1 ; $00b0
000B1                           
000B1                           EnemyArray_B1:
000B1                           	.dsb 1 ; $00b1
000B2                           	.dsb 1 ; $00b2
000B3                           	.dsb 1 ; $00b3
000B4                           	.dsb 1 ; $00b4
000B5                           	.dsb 1 ; $00b5
000B6                           	.dsb 1 ; $00b6
000B7                           	.dsb 1 ; $00b7
000B8                           	.dsb 1 ; $00b8
000B9                           	.dsb 1 ; $00b9
000BA                           
000BA                           ; PlayerXCameraOffset?
000BA                           byte_RAM_BA:
000BA                           	.dsb 1 ; $00ba
000BB                           CurrentMusicPointer:
000BB                           	.dsb 2 ; $00bb
000BD                           NextFrequencyLo:
000BD                           	.dsb 1 ; $00bd
000BE                           NextFrequencyHi:
000BE                           	.dsb 1 ; $00be
000BF                           ; $00BF and $00C0 are never written, but referenced by the music engine.
000BF                           ; Seems like they were intended to be either instrument start offets or
000BF                           ; duty/volume/envelope for the square channels, but it's not totally clear
000BF                           ; from the code, and doesn't actually function as written?
000BF                           MusicSquareInstrumentStartOffset: ; (unused; read but never initialized)
000BF                           	.dsb 1 ; $00bf
000C0                           MusicSquareEnvelope: ; (unused; always overwritten)
000C0                           	.dsb 1 ; $00c0
000C1                           SoundEffect1DataOffset:
000C1                           	.dsb 1 ; $00c1
000C2                           IFNDEF EXPAND_MUSIC
000C2                           MusicSquare2Lo: ; (unused)
000C2                           ENDIF
000C2                           	.dsb 1 ; $00c2
000C3                           	.dsb 1 ; $00c3
000C4                           SoundEffectTimer2:
000C4                           	.dsb 1 ; $00c4
000C5                           ; FOR RENT
000C5                           byte_RAM_C5:
000C5                           	.dsb 1 ; $00c5
000C6                           ; FOR RENT
000C6                           byte_RAM_C6:
000C6                           	.dsb 1 ; $00c6
000C7                           PlayerAnimationFrame:
000C7                           	.dsb 1 ; $00c7
000C8                           ; related to y-mirroring
000C8                           byte_RAM_C8:
000C8                           	.dsb 1 ; $00c8
000C9                           ; related to x-mirroring
000C9                           byte_RAM_C9:
000C9                           	.dsb 1 ; $00c9
000CA                           ; Not sure about this, but seems to be that way
000CA                           ScreenYHi:
000CA                           	.dsb 1 ; $00ca
000CB                           ; Not sure about this either
000CB                           ScreenYLo:
000CB                           	.dsb 1 ; $00cb
000CC                           
000CC                           RawEnemyData:
000CC                           	.dsb 1 ; $00cc
000CD                           	.dsb 1 ; $00cd
000CE                           byte_RAM_CE:
000CE                           	.dsb 1 ; $00ce
000CF                           byte_RAM_CF:
000CF                           	.dsb 1 ; $00cf
000D0                           byte_RAM_D0:
000D0                           	.dsb 1 ; $00d0
000D1                           byte_RAM_D1:
000D1                           	.dsb 1 ; $00d1
000D2                           byte_RAM_D2:
000D2                           	.dsb 1 ; $00d2
000D3                           byte_RAM_D3:
000D3                           	.dsb 1 ; $00d3
000D4                           byte_RAM_D4:
000D4                           	.dsb 1 ; $00d4
000D5                           byte_RAM_D5:
000D5                           	.dsb 1 ; $00d5
000D6                           byte_RAM_D6:
000D6                           	.dsb 1 ; $00d6
000D7                           byte_RAM_D7:
000D7                           	.dsb 1 ; $00d7
000D8                           
000D8                           ; @TODO understand better
000D8                           ; $01 = scroll up, $02 = scroll down
000D8                           ; (vertical areas only..?)
000D8                           NeedVerticalScroll:
000D8                           	.dsb 1 ; $00d8
000D9                           EnemyArray_D9:
000D9                           	.dsb 1 ; $00d9
000DA                           	.dsb 1 ; 1                ; $00da
000DB                           	.dsb 1 ; 2                ; $00db
000DC                           	.dsb 1 ; 3                ; $00dc
000DD                           	.dsb 1 ; 4                ; $00dd
000DE                           	.dsb 1 ; 5                ; $00de
000DF                           	.dsb 1 ; 6                ; $00df
000E0                           	.dsb 1 ; 7                ; $00e0
000E1                           byte_RAM_E1:
000E1                           	.dsb 1 ; $00e1
000E2                           byte_RAM_E2:
000E2                           	.dsb 1 ; $00e2
000E3                           byte_RAM_E3:
000E3                           	.dsb 1 ; $00e3
000E4                           byte_RAM_E4:
000E4                           	.dsb 1 ; $00e4
000E5                           byte_RAM_E5:
000E5                           	.dsb 1 ; $00e5
000E6                           byte_RAM_E6:
000E6                           	.dsb 1 ; $00e6
000E7                           byte_RAM_E7:
000E7                           	.dsb 1 ; $00e7
000E8                           byte_RAM_E8:
000E8                           	.dsb 1 ; $00e8
000E9                           byte_RAM_E9:
000E9                           	.dsb 1 ; $00e9
000EA                           byte_RAM_EA:
000EA                           	.dsb 1 ; $00ea
000EB                           NMIWaitFlag:
000EB                           	.dsb 1 ; $00eb
000EC                           IsHorizontalLevel:
000EC                           	.dsb 1 ; $00ec
000ED                           byte_RAM_ED:
000ED                           	.dsb 1 ; $00ed
000EE                           byte_RAM_EE:
000EE                           	.dsb 1 ; $00ee
000EF                           byte_RAM_EF:
000EF                           	.dsb 1 ; $00ef
000F0                           ; Set this to the location of PPU data to be drawn
000F0                           ; to the screen (somehow).
000F0                           ;
000F0                           ; Common value of $0301, which is where minor
000F0                           ; PPU updates are stored in memory.
000F0                           RAM_PPUDataBufferPointer:
000F0                           	.dsb 2 ; $00f0
000F2                           byte_RAM_F2:
000F2                           	.dsb 1 ; $00f2
000F3                           byte_RAM_F3:
000F3                           	.dsb 1 ; $00f3
000F4                           byte_RAM_F4:
000F4                           	.dsb 1 ; $00f4
000F5                           Player1JoypadPress:
000F5                           	.dsb 1 ; $00f5
000F6                           Player2JoypadPress:
000F6                           	.dsb 1 ; $00f6
000F7                           Player1JoypadHeld:
000F7                           	.dsb 1 ; $00f7
000F8                           Player2JoypadHeld:
000F8                           	.dsb 1 ; $00f8
000F9                           	.dsb 1 ; $00f9
000FA                           	.dsb 1 ; $00fa
000FB                           	.dsb 1 ; $00fb
000FC                           PPUScrollYMirror:
000FC                           	.dsb 1 ; $00fc
000FD                           PPUScrollXMirror:
000FD                           	.dsb 1 ; $00fd
000FE                           PPUMaskMirror:
000FE                           	.dsb 1 ; $00fe
000FF                           PPUCtrlMirror:
000FF                           	.dsb 1 ; $00ff
00100                           
00100                           
00100                           StackArea:
00100                           	.dsb $100   ; $0100 - $01FF
00200                           
00200                           SpriteDMAArea:
00200                           	.dsb $100   ; $0200 - $02FF
00300                           
00300                           byte_RAM_300:
00300                           	.dsb 1 ; $0300
00301                           PPUBuffer_301:
00301                           	.dsb 1 ; $0301
00302                           	.dsb 1 ; $0302
00303                           	.dsb 1 ; $0303
00304                           	.dsb 1 ; $0304
00305                           	.dsb 1 ; $0305
00306                           	.dsb 1 ; $0306
00307                           	.dsb 1 ; $0307
00308                           	.dsb 1 ; $0308
00309                           	.dsb 1 ; $0309
0030A                           	.dsb 1 ; $030a
0030B                           	.dsb 1 ; $030b
0030C                           	.dsb 1 ; $030c
0030D                           	.dsb 1 ; $030d
0030E                           	.dsb 1 ; $030e
0030F                           	.dsb 1 ; $030f
00310                           	.dsb 1 ; $0310
00311                           	.dsb 1 ; $0311
00312                           	.dsb 1 ; $0312
00313                           	.dsb 1 ; $0313
00314                           unk_RAM_314: ; related to color swapping
00314                           	.dsb 1 ; $0314
00315                           	.dsb 1 ; $0315
00316                           	.dsb 1 ; $0316
00317                           	.dsb 1 ; $0317
00318                           unk_RAM_318:
00318                           	.dsb 1 ; $0318
00319                           	.dsb 1 ; $0319
0031A                           	.dsb 1 ; $031a
0031B                           	.dsb 1 ; $031b
0031C                           	.dsb 1 ; $031c
0031D                           	.dsb 1 ; $031d
0031E                           	.dsb 1 ; $031e
0031F                           	.dsb 1 ; $031f
00320                           	.dsb 1 ; $0320
00321                           	.dsb 1 ; $0321
00322                           	.dsb 1 ; $0322
00323                           	.dsb 1 ; $0323
00324                           	.dsb 1 ; $0324
00325                           	.dsb 1 ; $0325
00326                           	.dsb 1 ; $0326
00327                           	.dsb 1 ; $0327
00328                           	.dsb 1 ; $0328
00329                           	.dsb 1 ; $0329
0032A                           	.dsb 1 ; $032a
0032B                           	.dsb 1 ; $032b
0032C                           	.dsb 1 ; $032c
0032D                           	.dsb 1 ; $032d
0032E                           	.dsb 1 ; $032e
0032F                           	.dsb 1 ; $032f
00330                           	.dsb 1 ; $0330
00331                           	.dsb 1 ; $0331
00332                           	.dsb 1 ; $0332
00333                           	.dsb 1 ; $0333
00334                           	.dsb 1 ; $0334
00335                           	.dsb 1 ; $0335
00336                           	.dsb 1 ; $0336
00337                           	.dsb 1 ; $0337
00338                           	.dsb 1 ; $0338
00339                           	.dsb 1 ; $0339
0033A                           	.dsb 1 ; $033a
0033B                           	.dsb 1 ; $033b
0033C                           	.dsb 1 ; $033c
0033D                           	.dsb 1 ; $033d
0033E                           	.dsb 1 ; $033e
0033F                           	.dsb 1 ; $033f
00340                           	.dsb 1 ; $0340
00341                           	.dsb 1 ; $0341
00342                           	.dsb 1 ; $0342
00343                           	.dsb 1 ; $0343
00344                           	.dsb 1 ; $0344
00345                           	.dsb 1 ; $0345
00346                           	.dsb 1 ; $0346
00347                           	.dsb 1 ; $0347
00348                           	.dsb 1 ; $0348
00349                           	.dsb 1 ; $0349
0034A                           	.dsb 1 ; $034a
0034B                           	.dsb 1 ; $034b
0034C                           	.dsb 1 ; $034c
0034D                           	.dsb 1 ; $034d
0034E                           	.dsb 1 ; $034e
0034F                           	.dsb 1 ; $034f
00350                           	.dsb 1 ; $0350
00351                           	.dsb 1 ; $0351
00352                           	.dsb 1 ; $0352
00353                           	.dsb 1 ; $0353
00354                           	.dsb 1 ; $0354
00355                           	.dsb 1 ; $0355
00356                           	.dsb 1 ; $0356
00357                           	.dsb 1 ; $0357
00358                           	.dsb 1 ; $0358
00359                           	.dsb 1 ; $0359
0035A                           	.dsb 1 ; $035a
0035B                           	.dsb 1 ; $035b
0035C                           	.dsb 1 ; $035c
0035D                           	.dsb 1 ; $035d
0035E                           	.dsb 1 ; $035e
0035F                           	.dsb 1 ; $035f
00360                           	.dsb 1 ; $0360
00361                           	.dsb 1 ; $0361
00362                           	.dsb 1 ; $0362
00363                           	.dsb 1 ; $0363
00364                           	.dsb 1 ; $0364
00365                           	.dsb 1 ; $0365
00366                           	.dsb 1 ; $0366
00367                           	.dsb 1 ; $0367
00368                           	.dsb 1 ; $0368
00369                           	.dsb 1 ; $0369
0036A                           	.dsb 1 ; $036a
0036B                           	.dsb 1 ; $036b
0036C                           	.dsb 1 ; $036c
0036D                           	.dsb 1 ; $036d
0036E                           	.dsb 1 ; $036e
0036F                           	.dsb 1 ; $036f
00370                           	.dsb 1 ; $0370
00371                           	.dsb 1 ; $0371
00372                           	.dsb 1 ; $0372
00373                           	.dsb 1 ; $0373
00374                           	.dsb 1 ; $0374
00375                           	.dsb 1 ; $0375
00376                           	.dsb 1 ; $0376
00377                           	.dsb 1 ; $0377
00378                           	.dsb 1 ; $0378
00379                           	.dsb 1 ; $0379
0037A                           	.dsb 1 ; $037a
0037B                           	.dsb 1 ; $037b
0037C                           	.dsb 1 ; $037c
0037D                           	.dsb 1 ; $037d
0037E                           	.dsb 1 ; $037e
0037F                           	.dsb 1 ; $037f
00380                           unk_RAM_380:
00380                           	.dsb 1 ; $0380
00381                           unk_RAM_381:
00381                           	.dsb 1 ; $0381
00382                           	.dsb 1 ; $0382
00383                           	.dsb 1 ; $0383
00384                           	.dsb 1 ; $0384
00385                           	.dsb 1 ; $0385
00386                           	.dsb 1 ; $0386
00387                           	.dsb 1 ; $0387
00388                           	.dsb 1 ; $0388
00389                           	.dsb 1 ; $0389
0038A                           	.dsb 1 ; $038a
0038B                           	.dsb 1 ; $038b
0038C                           	.dsb 1 ; $038c
0038D                           	.dsb 1 ; $038d
0038E                           	.dsb 1 ; $038e
0038F                           	.dsb 1 ; $038f
00390                           	.dsb 1 ; $0390
00391                           	.dsb 1 ; $0391
00392                           	.dsb 1 ; $0392
00393                           	.dsb 1 ; $0393
00394                           	.dsb 1 ; $0394
00395                           	.dsb 1 ; $0395
00396                           	.dsb 1 ; $0396
00397                           	.dsb 1 ; $0397
00398                           	.dsb 1 ; $0398
00399                           	.dsb 1 ; $0399
0039A                           	.dsb 1 ; $039a
0039B                           	.dsb 1 ; $039b
0039C                           	.dsb 1 ; $039c
0039D                           	.dsb 1 ; $039d
0039E                           unk_RAM_39E:
0039E                           	.dsb 1 ; $039e
0039F                           unk_RAM_39F:
0039F                           	.dsb 1 ; $039f
003A0                           	.dsb 1 ; $03a0
003A1                           	.dsb 1 ; $03a1
003A2                           	.dsb 1 ; $03a2
003A3                           	.dsb 1 ; $03a3
003A4                           	.dsb 1 ; $03a4
003A5                           	.dsb 1 ; $03a5
003A6                           	.dsb 1 ; $03a6
003A7                           	.dsb 1 ; $03a7
003A8                           	.dsb 1 ; $03a8
003A9                           	.dsb 1 ; $03a9
003AA                           	.dsb 1 ; $03aa
003AB                           	.dsb 1 ; $03ab
003AC                           	.dsb 1 ; $03ac
003AD                           	.dsb 1 ; $03ad
003AE                           	.dsb 1 ; $03ae
003AF                           	.dsb 1 ; $03af
003B0                           	.dsb 1 ; $03b0
003B1                           	.dsb 1 ; $03b1
003B2                           	.dsb 1 ; $03b2
003B3                           	.dsb 1 ; $03b3
003B4                           	.dsb 1 ; $03b4
003B5                           	.dsb 1 ; $03b5
003B6                           	.dsb 1 ; $03b6
003B7                           	.dsb 1 ; $03b7
003B8                           	.dsb 1 ; $03b8
003B9                           	.dsb 1 ; $03b9
003BA                           	.dsb 1 ; $03ba
003BB                           	.dsb 1 ; $03bb
003BC                           byte_RAM_3BC:
003BC                           	.dsb 1 ; $03bc
003BD                           byte_RAM_3BD:
003BD                           	.dsb 1 ; $03bd
003BE                           unk_RAM_3BE:
003BE                           	.dsb 1 ; $03be
003BF                           	.dsb 1 ; $03bf
003C0                           	.dsb 1 ; $03c0
003C1                           	.dsb 1 ; $03c1
003C2                           	.dsb 1 ; $03c2
003C3                           	.dsb 1 ; $03c3
003C4                           	.dsb 1 ; $03c4
003C5                           	.dsb 1 ; $03c5
003C6                           	.dsb 1 ; $03c6
003C7                           	.dsb 1 ; $03c7
003C8                           	.dsb 1 ; $03c8
003C9                           	.dsb 1 ; $03c9
003CA                           	.dsb 1 ; $03ca
003CB                           	.dsb 1 ; $03cb
003CC                           	.dsb 1 ; $03cc
003CD                           	.dsb 1 ; $03cd
003CE                           	.dsb 1 ; $03ce
003CF                           	.dsb 1 ; $03cf
003D0                           	.dsb 1 ; $03d0
003D1                           	.dsb 1 ; $03d1
003D2                           	.dsb 1 ; $03d2
003D3                           	.dsb 1 ; $03d3
003D4                           	.dsb 1 ; $03d4
003D5                           	.dsb 1 ; $03d5
003D6                           	.dsb 1 ; $03d6
003D7                           	.dsb 1 ; $03d7
003D8                           	.dsb 1 ; $03d8
003D9                           	.dsb 1 ; $03d9
003DA                           	.dsb 1 ; $03da
003DB                           	.dsb 1 ; $03db
003DC                           	.dsb 1 ; $03dc
003DD                           	.dsb 1 ; $03dd
003DE                           	.dsb 1 ; $03de
003DF                           	.dsb 1 ; $03df
003E0                           	.dsb 1 ; $03e0
003E1                           	.dsb 1 ; $03e1
003E2                           	.dsb 1 ; $03e2
003E3                           	.dsb 1 ; $03e3
003E4                           	.dsb 1 ; $03e4
003E5                           	.dsb 1 ; $03e5
003E6                           	.dsb 1 ; $03e6
003E7                           	.dsb 1 ; $03e7
003E8                           	.dsb 1 ; $03e8
003E9                           	.dsb 1 ; $03e9
003EA                           	.dsb 1 ; $03ea
003EB                           	.dsb 1 ; $03eb
003EC                           	.dsb 1 ; $03ec
003ED                           	.dsb 1 ; $03ed
003EE                           	.dsb 1 ; $03ee
003EF                           	.dsb 1 ; $03ef
003F0                           	.dsb 1 ; $03f0
003F1                           	.dsb 1 ; $03f1
003F2                           	.dsb 1 ; $03f2
003F3                           	.dsb 1 ; $03f3
003F4                           	.dsb 1 ; $03f4
003F5                           	.dsb 1 ; $03f5
003F6                           	.dsb 1 ; $03f6
003F7                           	.dsb 1 ; $03f7
003F8                           	.dsb 1 ; $03f8
003F9                           	.dsb 1 ; $03f9
003FA                           	.dsb 1 ; $03fa
003FB                           	.dsb 1 ; $03fb
003FC                           	.dsb 1 ; $03fc
003FD                           	.dsb 1 ; $03fd
003FE                           	.dsb 1 ; $03fe
003FF                           	.dsb 1 ; $03ff
00400                           SpriteFlickerSlot:
00400                           	.dsb 1 ; $0400
00401                           
00401                           ; FOR RENT
00401                           IFDEF INVERSE_LEVEL
00401                           Arbitrary_CNT:
00401                           ENDIF
00401                           	.dsb 1 ; $0401
00402                           ; FOR RENT
00402                           	.dsb 1 ; $0402
00403                           ; FOR RENT
00403                           	.dsb 1 ; $0403
00404                           ; unused? written but never read
00404                           PreviousCharacter:
00404                           	.dsb 1 ; $0404
00405                           ; unused? written but never read
00405                           PreviousWorld:
00405                           	.dsb 1 ; $0405
00406                           ; FOR RENT
00406                           	.dsb 1 ; $0406
00407                           
00407                           PlayerXSubpixel:
00407                           	.dsb 1 ; $0407
00408                           ObjectXSubpixel:
00408                           	.dsb 1 ; $0408
00409                           	.dsb 1 ; $0409
0040A                           	.dsb 1 ; $040a
0040B                           	.dsb 1 ; $040b
0040C                           	.dsb 1 ; $040c
0040D                           	.dsb 1 ; $040d
0040E                           	.dsb 1 ; $040e
0040F                           	.dsb 1 ; $040f
00410                           	.dsb 1 ; $0410
00411                           
00411                           PlayerYSubpixel:
00411                           	.dsb 1 ; $0411
00412                           ObjectYSubpixel:
00412                           	.dsb 1 ; $0412
00413                           	.dsb 1 ; $0413
00414                           	.dsb 1 ; $0414
00415                           	.dsb 1 ; $0415
00416                           	.dsb 1 ; $0416
00417                           	.dsb 1 ; $0417
00418                           	.dsb 1 ; $0418
00419                           	.dsb 1 ; $0419
0041A                           	.dsb 1 ; $041a
0041B                           
0041B                           PlayerLock:
0041B                           	.dsb 1 ; $041b
0041C                           ObjectLock:
0041C                           	.dsb 1 ; $041c
0041D                           	.dsb 1 ; $041d
0041E                           	.dsb 1 ; $041e
0041F                           	.dsb 1 ; $041f
00420                           	.dsb 1 ; $0420
00421                           	.dsb 1 ; $0421
00422                           	.dsb 1 ; $0422
00423                           	.dsb 1 ; $0423
00424                           	.dsb 1 ; $0424
00425                           
00425                           ; $00 = none, $01 = up, $02 = down
00425                           VerticalScrollDirection:
00425                           	.dsb 1 ; $0425
00426                           byte_RAM_426:
00426                           	.dsb 1 ; $0426
00427                           byte_RAM_427:
00427                           	.dsb 1 ; $0427
00428                           PlayerScreenX:
00428                           	.dsb 1 ; $0428
00429                           SpriteTempScreenX:
00429                           	.dsb 1 ; $0429
0042A                           PlayerScreenYHi:
0042A                           	.dsb 1 ; $042a
0042B                           PlayerScreenYLo:
0042B                           	.dsb 1 ; $042b
0042C                           SpriteTempScreenY:
0042C                           	.dsb 1 ; $042c
0042D                           ObjectBeingCarriedIndex:
0042D                           	.dsb 1 ; $042d
0042E                           
0042E                           ; FOR RENT
0042E                           	.dsb 1 ; $042e
0042F                           ; stun timer?
0042F                           EnemyArray_42F:
0042F                           	.dsb 1 ; $042f
00430                           	.dsb 1 ; $0430
00431                           	.dsb 1 ; $0431
00432                           	.dsb 1 ; $0432
00433                           	.dsb 1 ; $0433
00434                           	.dsb 1 ; $0434
00435                           	.dsb 1 ; $0435
00436                           	.dsb 1 ; $0436
00437                           
00437                           ; FOR RENT
00437                           	.dsb 1 ; $0437
00438                           EnemyArray_438:
00438                           	.dsb 1 ; $0438
00439                           	.dsb 1 ; $0439
0043A                           	.dsb 1 ; $043a
0043B                           	.dsb 1 ; $043b
0043C                           	.dsb 1 ; $043c
0043D                           	.dsb 1 ; $043d
0043E                           	.dsb 1 ; $043e
0043F                           	.dsb 1 ; $043f
00440                           
00440                           ; FOR RENT
00440                           	.dsb 1 ; $0440
00441                           ; Despawn offset
00441                           unk_RAM_441:
00441                           	.dsb 1 ; $0441
00442                           	.dsb 1 ; $0442
00443                           	.dsb 1 ; $0443
00444                           	.dsb 1 ; $0444
00445                           	.dsb 1 ; $0445
00446                           	.dsb 1 ; $0446
00447                           	.dsb 1 ; $0447
00448                           	.dsb 1 ; $0448
00449                           
00449                           ; FOR RENT
00449                           	.dsb 1 ; $0449
0044A                           ObjectShakeTimer:
0044A                           	.dsb 1 ; $044a
0044B                           	.dsb 1 ; $044b
0044C                           	.dsb 1 ; $044c
0044D                           	.dsb 1 ; $044d
0044E                           	.dsb 1 ; $044e
0044F                           	.dsb 1 ; $044f
00450                           	.dsb 1 ; $0450
00451                           	.dsb 1 ; $0451
00452                           
00452                           ; FOR RENT
00452                           	.dsb 1 ; $0452
00453                           EnemyArray_453:
00453                           	.dsb 1 ; $0453
00454                           	.dsb 1 ; $0454
00455                           	.dsb 1 ; $0455
00456                           	.dsb 1 ; $0456
00457                           	.dsb 1 ; $0457
00458                           	.dsb 1 ; $0458
00459                           	.dsb 1 ; $0459
0045A                           	.dsb 1 ; $045a
0045B                           
0045B                           ; FOR RENT
0045B                           	.dsb 1 ; $045b
0045C                           ; Flashing timer
0045C                           EnemyArray_45C:
0045C                           	.dsb 1 ; $045c
0045D                           	.dsb 1 ; $045d
0045E                           	.dsb 1 ; $045e
0045F                           	.dsb 1 ; $045f
00460                           	.dsb 1 ; $0460
00461                           	.dsb 1 ; $0461
00462                           	.dsb 1 ; $0462
00463                           	.dsb 1 ; $0463
00464                           
00464                           ; FOR RENT
00464                           	.dsb 1 ; $0464
00465                           EnemyHP:
00465                           	.dsb 1 ; $00 ; $0465
00466                           	.dsb 1 ; $01 ; $0466
00467                           	.dsb 1 ; $02 ; $0467
00468                           	.dsb 1 ; $03 ; $0468
00469                           	.dsb 1 ; $04 ; $0469
0046A                           	.dsb 1 ; $046a
0046B                           	.dsb 1 ; $046b
0046C                           	.dsb 1 ; $046c
0046D                           
0046D                           unk_RAM_46D:
0046D                           	.dsb 1 ; $046d
0046E                           EnemyArray_46E:
0046E                           	.dsb 1 ; $046e
0046F                           	.dsb 1 ; $046f
00470                           	.dsb 1 ; $0470
00471                           	.dsb 1 ; $0471
00472                           	.dsb 1 ; $0472
00473                           	.dsb 1 ; $0473
00474                           	.dsb 1 ; $0474
00475                           	.dsb 1 ; $0475
00476                           
00476                           ; FOR RENT
00476                           	.dsb 1 ; $0476
00477                           EnemyArray_477:
00477                           	.dsb 1 ; $0477
00478                           	.dsb 1 ; $0478
00479                           	.dsb 1 ; $0479
0047A                           	.dsb 1 ; $047a
0047B                           	.dsb 1 ; $047b
0047C                           	.dsb 1 ; $047c
0047D                           	.dsb 1 ; $047d
0047E                           	.dsb 1 ; $047e
0047F                           
0047F                           ; FOR RENT
0047F                           	.dsb 1 ; $047f
00480                           EnemyArray_480:
00480                           	.dsb 1 ; $0480
00481                           	.dsb 1 ; $0481
00482                           	.dsb 1 ; $0482
00483                           	.dsb 1 ; $0483
00484                           	.dsb 1 ; $0484
00485                           	.dsb 1 ; $0485
00486                           	.dsb 1 ; $0486
00487                           	.dsb 1 ; $0487
00488                           
00488                           ; FOR RENT
00488                           	.dsb 1 ; $0488
00489                           EnemyArray_489:
00489                           	.dsb 1 ; $0489
0048A                           	.dsb 1 ; $048a
0048B                           	.dsb 1 ; $048b
0048C                           	.dsb 1 ; $048c
0048D                           	.dsb 1 ; $048d
0048E                           	.dsb 1 ; $048e
0048F                           	.dsb 1 ; $048f
00490                           	.dsb 1 ; $0490
00491                           
00491                           unk_RAM_491:
00491                           	.dsb 1 ; $0491
00492                           EnemyArray_492:
00492                           	.dsb 1 ; $0492
00493                           	.dsb 1 ; $0493
00494                           	.dsb 1 ; $0494
00495                           	.dsb 1 ; $0495
00496                           	.dsb 1 ; $0496
00497                           	.dsb 1 ; $0497
00498                           	.dsb 1 ; $0498
00499                           	.dsb 1 ; $0499
0049A                           
0049A                           ; FOR RENT
0049A                           	.dsb 1 ; $049a
0049B                           unk_RAM_49B:
0049B                           	.dsb 1 ; $049b
0049C                           	.dsb 1 ; $049c
0049D                           	.dsb 1 ; $049d
0049E                           	.dsb 1 ; $049e
0049F                           	.dsb 1 ; $049f
004A0                           	.dsb 1 ; $04a0
004A1                           	.dsb 1 ; $04a1
004A2                           	.dsb 1 ; $04a2
004A3                           
004A3                           ; FOR RENT
004A3                           	.dsb 1 ; $04a3
004A4                           unk_RAM_4A4:
004A4                           	.dsb 1 ; $04a4
004A5                           	.dsb 1 ; $04a5
004A6                           	.dsb 1 ; $04a6
004A7                           	.dsb 1 ; $04a7
004A8                           	.dsb 1 ; $04a8
004A9                           	.dsb 1 ; $04a9
004AA                           	.dsb 1 ; $04aa
004AB                           	.dsb 1 ; $04ab
004AC                           
004AC                           ; FOR RENT
004AC                           	.dsb 1 ; $04ac
004AD                           EnemiesKilledForHeart:
004AD                           	.dsb 1 ; $04ad
004AE                           AreaInitialized:
004AE                           	.dsb 1 ; $04ae
004AF                           ObjectCarriedOver:
004AF                           	.dsb 1 ; $04af
004B0                           KeyUsed:
004B0                           	.dsb 1 ; $04b0
004B1                           ; FOR RENT
004B1                           IFDEF RANDOMIZER_T:
004B1                           AreaTransitioned_Invuln:
004B1                           ENDIF
004B1                           	.dsb 1 ; $04b1
004B2                           PlayerRidingCarpet:
004B2                           	.dsb 1 ; $04b2
004B3                           SubspaceDoorTimer:
004B3                           	.dsb 1 ; $04b3
004B4                           ; Probably set to 1 when Hawkmouth eats the player and starts closing
004B4                           HawkmouthClosing:
004B4                           	.dsb 1 ; $04b4
004B5                           ; Set to 01 on crystal get, Hawkmouth opens to 30
004B5                           CrystalAndHawkmouthOpenSize:
004B5                           	.dsb 1 ; $04b5
004B6                           ; Hawkmouth won't start opening until this hits 0
004B6                           HawkmouthOpenTimer:
004B6                           	.dsb 1 ; $04b6
004B7                           SubspaceTimer:
004B7                           	.dsb 1 ; $04b7
004B8                           BossBeaten:
004B8                           	.dsb 1 ; $04b8
004B9                           SwarmType:
004B9                           	.dsb 1 ; $04b9
004BA                           ; FOR RENT
004BA                           	.dsb 1 ; $04ba
004BB                           ; FOR RENT
004BB                           	.dsb 1 ; $04bb
004BC                           SkyColor:
004BC                           	.dsb 1 ; $04bc
004BD                           DoorAnimationTimer:
004BD                           	.dsb 1 ; $04bd
004BE                           ScreenBoundaryLeftHi:
004BE                           	.dsb 1 ; $04be
004BF                           ScreenBoundaryRightHi:
004BF                           	.dsb 1 ; $04bf
004C0                           ScreenBoundaryLeftLo:
004C0                           	.dsb 1 ; $04c0
004C1                           ScreenBoundaryRightLo:
004C1                           	.dsb 1 ; $04c1
004C2                           ; xF: Hearts - 1 ($0F=1HP, $1F=2HP, etc)
004C2                           PlayerHealth:
004C2                           	.dsb 1 ; $04c2
004C3                           ; $00: Max 2
004C3                           ; $01: Max 3
004C3                           ; $02: Max 4
004C3                           PlayerMaxHealth:
004C3                           	.dsb 1 ; $04c3
004C4                           POWQuakeTimer:
004C4                           	.dsb 1 ; $04c4
004C5                           BackgroundYOffset:
004C5                           	.dsb 1 ; $04c5
004C6                           SkyFlashTimer:
004C6                           	.dsb 1 ; $04c6
004C7                           PlayerInRocket:
004C7                           	.dsb 1 ; $04c7
004C8                           	.dsb 1 ; $04c8
004C9                           JumpFloatTimer:
004C9                           	.dsb 1 ; $04c9
004CA                           CrouchJumpTimer:
004CA                           	.dsb 1 ; $04ca
004CB                           
004CB                           PlayerXAcceleration:
004CB                           	.dsb 1 ; $04cb
004CC                           ObjectXAcceleration:
004CC                           	.dsb 1 ; $04cc
004CD                           	.dsb 1 ; $04cd
004CE                           	.dsb 1 ; $04ce
004CF                           	.dsb 1 ; $04cf
004D0                           	.dsb 1 ; $04d0
004D1                           	.dsb 1 ; $04d1
004D2                           	.dsb 1 ; $04d2
004D3                           	.dsb 1 ; $04d3
004D4                           
004D4                           ; FOR RENT
004D4                           	.dsb 1 ; $04d4
004D5                           PlayerYAcceleration:
004D5                           	.dsb 1 ; $04d5
004D6                           ObjectYAcceleration:
004D6                           	.dsb 1 ; $04d6
004D7                           	.dsb 1 ; $04d7
004D8                           	.dsb 1 ; $04d8
004D9                           	.dsb 1 ; $04d9
004DA                           	.dsb 1 ; $04da
004DB                           	.dsb 1 ; $04db
004DC                           	.dsb 1 ; $04dc
004DD                           	.dsb 1 ; $04dd
004DE                           
004DE                           ; FOR RENT
004DE                           	.dsb 1 ; $04de
004DF                           QuicksandDepth:
004DF                           	.dsb 1 ; $04df
004E0                           StarInvincibilityTimer:
004E0                           	.dsb 1 ; $04e0
004E1                           PlayerXLo_Init:
004E1                           	.dsb 1 ; $04e1
004E2                           PlayerYLo_Init:
004E2                           	.dsb 1 ; $04e2
004E3                           PlayerScreenX_Init:
004E3                           	.dsb 1 ; $04e3
004E4                           PlayerScreenYLo_Init:
004E4                           	.dsb 1 ; $04e4
004E5                           PlayerYVelocity_Init:
004E5                           	.dsb 1 ; $04e5
004E6                           PlayerState_Init:
004E6                           	.dsb 1 ; $04e6
004E7                           CurrentLevel_Init:
004E7                           	.dsb 1 ; $04e7
004E8                           CurrentLevelArea_Init:
004E8                           	.dsb 1 ; $04e8
004E9                           CurrentLevelEntryPage_Init:
004E9                           	.dsb 1 ; $04e9
004EA                           TransitionType_Init:
004EA                           	.dsb 1 ; $04ea
004EB                           ; something to do with sinking in quicksand
004EB                           byte_RAM_4EB:
004EB                           	.dsb 1 ; $04eb
004EC                           ; $00: In game
004EC                           ; $01: Level title card
004EC                           ; $02: Game over
004EC                           ; $03: Bonus chance
004EC                           ; $04+: Warp
004EC                           GameMode:
004EC                           	.dsb 1 ; $04ec
004ED                           ExtraLives:
004ED                           	.dsb 1 ; $04ed
004EE                           ; $00: None
004EE                           ; $01: Default jar
004EE                           ; $02: Pointer jar
004EE                           InJarType:
004EE                           	.dsb 1 ; $04ee
004EF                           unk_RAM_4EF:
004EF                           	.dsb 1 ; $04ef
004F0                           	.dsb 1 ; $04f0
004F1                           	.dsb 1 ; $04f1
004F2                           	.dsb 1 ; $04f2
004F3                           	.dsb 1 ; $04f3
004F4                           	.dsb 1 ; $04f4
004F5                           	.dsb 1 ; $04f5
004F6                           	.dsb 1 ; $04f6
004F7                           	.dsb 1 ; $04f7
004F8                           FryguySplitFlames:
004F8                           	.dsb 1 ; $04f8
004F9                           VegetableThrowerShotCounter:
004F9                           	.dsb 1 ; $04f9
004FA                           ScrollXLock:
004FA                           	.dsb 1 ; $04fa
004FB                           Mushroom1Pulled:
004FB                           	.dsb 1 ; $04fb
004FC                           Mushroom2Pulled:
004FC                           	.dsb 1 ; $04fc
004FD                           PokeyTempScreenX:
004FD                           	.dsb 1 ; $04fd
004FE                           ; FOR RENT
004FE                           	.dsb 1 ; $04fe
004FF                           StopwatchTimer:
004FF                           	.dsb 1 ; $04ff
00500                           ; FOR RENT
00500                           	.dsb 1 ; $0500
00501                           ; FOR RENT
00501                           	.dsb 1 ; $0501
00502                           byte_RAM_502:
00502                           	.dsb 1 ; $0502
00503                           ; FOR RENT
00503                           	.dsb 1 ; $0503
00504                           CameraScrollTiles:
00504                           	.dsb 1 ; $0504
00505                           byte_RAM_505:
00505                           	.dsb 1 ; $0505
00506                           byte_RAM_506:
00506                           	.dsb 1 ; $0506
00507                           byte_RAM_507:
00507                           	.dsb 1 ; $0507
00508                           ; FOR RENT
00508                           	.dsb 1 ; $0508
00509                           PPUScrollYMirror_Backup:
00509                           	.dsb 1 ; $0509
0050A                           PPUScrollXMirror_Backup:
0050A                           	.dsb 1 ; $050a
0050B                           byte_RAM_50B:
0050B                           	.dsb 1 ; $050b
0050C                           byte_RAM_50C:
0050C                           	.dsb 1 ; $050c
0050D                           byte_RAM_50D:
0050D                           	.dsb 1 ; $050d
0050E                           byte_RAM_50E:
0050E                           	.dsb 1 ; $050e
0050F                           PlayerXHi_Backup:
0050F                           	.dsb 1 ; $050f
00510                           PlayerYHi_Backup:
00510                           	.dsb 1 ; $0510
00511                           PlayerXLo_Backup:
00511                           	.dsb 1 ; $0511
00512                           PlayerYLo_Backup:
00512                           	.dsb 1 ; $0512
00513                           ScreenYHi_Backup:
00513                           	.dsb 1 ; $0513
00514                           ScreenBoundaryLeftHi_Backup:
00514                           	.dsb 1 ; $0514
00515                           ScreenYLo_Backup:
00515                           	.dsb 1 ; $0515
00516                           ; FOR RENT
00516                           	.dsb 1 ; $0516
00517                           byte_RAM_517:
00517                           	.dsb 1 ; $0517
00518                           ; FOR RENT
00518                           	.dsb 1 ; $0518
00519                           CurrentLevelAreaCopy:
00519                           	.dsb 1 ; $0519
0051A                           ; FOR RENT
0051A                           	.dsb 1 ; $051a
0051B                           byte_RAM_51B:
0051B                           	.dsb 1 ; $051b
0051C                           byte_RAM_51C:
0051C                           	.dsb 1 ; $051c
0051D                           AreaPointersByPage:
0051D                           	.dsb 1 ; $051d
0051E                           	.dsb 1 ; $051e
0051F                           	.dsb 1 ; $051f
00520                           	.dsb 1 ; $0520
00521                           	.dsb 1 ; $0521
00522                           	.dsb 1 ; $0522
00523                           	.dsb 1 ; $0523
00524                           	.dsb 1 ; $0524
00525                           	.dsb 1 ; $0525
00526                           	.dsb 1 ; $0526
00527                           	.dsb 1 ; $0527
00528                           	.dsb 1 ; $0528
00529                           	.dsb 1 ; $0529
0052A                           	.dsb 1 ; $052a
0052B                           	.dsb 1 ; $052b
0052C                           	.dsb 1 ; $052c
0052D                           	.dsb 1 ; $052d
0052E                           	.dsb 1 ; $052e
0052F                           	.dsb 1 ; $052f
00530                           	.dsb 1 ; $0530
00531                           CurrentLevel:
00531                           	.dsb 1 ; $0531
00532                           CurrentLevelArea:
00532                           	.dsb 1 ; $0532
00533                           CurrentLevelEntryPage:
00533                           	.dsb 1 ; $0533
00534                           TransitionType:
00534                           	.dsb 1 ; $0534
00535                           	; Seems to be set depending on how you transitioned areas last.
00535                           	; $00 = ? (Start of level?)
00535                           	; $01 = Door
00535                           	; $02 = Jar
00535                           	; $03 = Vine
00535                           CurrentLevelPage:
00535                           	.dsb 1 ; $0535
00536                           CurrentLevelPageX:
00536                           	.dsb 1 ; $0536
00537                           byte_RAM_537:
00537                           	.dsb 1 ; $0537
00538                           byte_RAM_538:
00538                           	.dsb 1 ; $0538
00539                           byte_RAM_539:
00539                           	.dsb 1 ; $0539
0053A                           byte_RAM_53A:
0053A                           	.dsb 1 ; $053a
0053B                           	.dsb 1 ; $053b
0053C                           	.dsb 1 ; $053c
0053D                           byte_RAM_53D:
0053D                           	.dsb 1 ; $053d
0053E                           byte_RAM_53E:
0053E                           	.dsb 1 ; $053e
0053F                           CurrentLevelPages:
0053F                           	.dsb 1 ; $053f
00540                           byte_RAM_540:
00540                           	.dsb 1 ; $0540
00541                           GroundSetting:
00541                           	.dsb 1 ; $0541
00542                           ; area object type xxOO
00542                           ObjectType3Xthru9X:
00542                           	.dsb 1 ; $0542
00543                           ; area object type OOxx
00543                           ObjectTypeAXthruFX:
00543                           	.dsb 1 ; $0543
00544                           CompareMusicIndex:
00544                           	.dsb 1 ; $0544
00545                           CurrentMusicIndex:
00545                           	.dsb 1 ; $0545
00546                           
00546                           CharacterStatsRAM:
00546                           PickupSpeedAnimation:
00546                           	.dsb 1 ; $0546
00547                           	.dsb 1 ; 1                ; $0547
00548                           	.dsb 1 ; 2                ; $0548
00549                           	.dsb 1 ; 3                ; $0549
0054A                           	.dsb 1 ; 4                ; $054a
0054B                           	.dsb 1 ; 5                ; $054b
0054C                           JumpHeightStanding:
0054C                           	.dsb 1 ; $054c
0054D                           JumpHeightStandingCarrying:
0054D                           	.dsb 1 ; $054d
0054E                           JumpHeightCrouching:
0054E                           	.dsb 1 ; $054e
0054F                           JumpHeightCrouchingCarrying:
0054F                           	.dsb 1 ; $054f
00550                           JumpHeightRunning:
00550                           	.dsb 1 ; $0550
00551                           JumpHeightRunningCarrying:
00551                           	.dsb 1 ; $0551
00552                           JumpHeightQuicksand:
00552                           	.dsb 1 ; $0552
00553                           JumpFloatLength:
00553                           	.dsb 1 ; $0553
00554                           GravityWithoutJumpButton:
00554                           	.dsb 1 ; $0554
00555                           GravityWithJumpButton:
00555                           	.dsb 1 ; $0555
00556                           GravityQuicksand:
00556                           	.dsb 1 ; $0556
00557                           RunSpeedRight:
00557                           	.dsb 1 ; $0557
00558                           RunSpeedRightCarrying:
00558                           	.dsb 1 ; $0558
00559                           RunSpeedRightQuicksand:
00559                           	.dsb 1 ; $0559
0055A                           RunSpeedLeft:
0055A                           	.dsb 1 ; $055a
0055B                           RunSpeedLeftCarrying:
0055B                           	.dsb 1 ; $055b
0055C                           RunSpeedLeftQuicksand:
0055C                           	.dsb 1 ; $055c
0055D                           ; FOR RENT
0055D                           	.dsb 1 ; $055d
0055E                           GroundType:
0055E                           	.dsb 1 ; $055e
0055F                           PPUBuffer_55F:
0055F                           	.dsb 1 ; $055f
00560                           	.dsb 1 ; $0560
00561                           	.dsb 1 ; $0561
00562                           	.dsb 1 ; $0562
00563                           	.dsb 1 ; $0563
00564                           	.dsb 1 ; $0564
00565                           	.dsb 1 ; $0565
00566                           	.dsb 1 ; $0566
00567                           	.dsb 1 ; $0567
00568                           	.dsb 1 ; $0568
00569                           	.dsb 1 ; $0569
0056A                           	.dsb 1 ; $056a
0056B                           	.dsb 1 ; $056b
0056C                           	.dsb 1 ; $056c
0056D                           	.dsb 1 ; $056d
0056E                           	.dsb 1 ; $056e
0056F                           	.dsb 1 ; $056f
00570                           	.dsb 1 ; $0570
00571                           	.dsb 1 ; $0571
00572                           	.dsb 1 ; $0572
00573                           	.dsb 1 ; $0573
00574                           	.dsb 1 ; $0574
00575                           	.dsb 1 ; $0575
00576                           	.dsb 1 ; $0576
00577                           	.dsb 1 ; $0577
00578                           	.dsb 1 ; $0578
00579                           	.dsb 1 ; $0579
0057A                           	.dsb 1 ; $057a
0057B                           	.dsb 1 ; $057b
0057C                           	.dsb 1 ; $057c
0057D                           	.dsb 1 ; $057d
0057E                           	.dsb 1 ; $057e
0057F                           	.dsb 1 ; $057f
00580                           	.dsb 1 ; $0580
00581                           	.dsb 1 ; $0581
00582                           	.dsb 1 ; $0582
00583                           PPUBuffer_583:
00583                           	.dsb 1 ; $0583
00584                           	.dsb 1 ; $0584
00585                           	.dsb 1 ; $0585
00586                           	.dsb 1 ; $0586
00587                           	.dsb 1 ; $0587
00588                           byte_RAM_588:
00588                           	.dsb 1 ; $0588
00589                           	.dsb 1 ; $0589
0058A                           	.dsb 1 ; $058a
0058B                           	.dsb 1 ; $058b
0058C                           	.dsb 1 ; $058c
0058D                           	.dsb 1 ; $058d
0058E                           	.dsb 1 ; $058e
0058F                           	.dsb 1 ; $058f
00590                           	.dsb 1 ; $0590
00591                           	.dsb 1 ; $0591
00592                           	.dsb 1 ; $0592
00593                           	.dsb 1 ; $0593
00594                           	.dsb 1 ; $0594
00595                           	.dsb 1 ; $0595
00596                           	.dsb 1 ; $0596
00597                           	.dsb 1 ; $0597
00598                           	.dsb 1 ; $0598
00599                           byte_RAM_599:
00599                           	.dsb 1 ; $0599
0059A                           byte_RAM_59A:
0059A                           	.dsb 1 ; $059a
0059B                           	.dsb 1 ; $059b
0059C                           unk_RAM_59C:
0059C                           	.dsb 1 ; $059c
0059D                           	.dsb 1 ; $059d
0059E                           	.dsb 1 ; $059e
0059F                           	.dsb 1 ; $059f
005A0                           	.dsb 1 ; $05a0
005A1                           	.dsb 1 ; $05a1
005A2                           	.dsb 1 ; $05a2
005A3                           	.dsb 1 ; $05a3
005A4                           	.dsb 1 ; $05a4
005A5                           	.dsb 1 ; $05a5
005A6                           	.dsb 1 ; $05a6
005A7                           	.dsb 1 ; $05a7
005A8                           	.dsb 1 ; $05a8
005A9                           	.dsb 1 ; $05a9
005AA                           	.dsb 1 ; $05aa
005AB                           	.dsb 1 ; $05ab
005AC                           PseudoRNGValues:
005AC                           	.dsb 1 ; $05ac
005AD                           	.dsb 1 ; $05ad
005AE                           	.dsb 1 ; $05ae
005AF                           	.dsb 1 ; $05af
005B0                           	.dsb 1 ; $05b0
005B1                           	.dsb 1 ; $05b1
005B2                           	.dsb 1 ; $05b2
005B3                           	.dsb 1 ; $05b3
005B4                           	.dsb 1 ; $05b4
005B5                           	.dsb 1 ; $05b5
005B6                           	.dsb 1 ; $05b6
005B7                           	.dsb 1 ; $05b7
005B8                           	.dsb 1 ; $05b8
005B9                           	.dsb 1 ; $05b9
005BA                           ; initialized but never used?
005BA                           byte_RAM_5BA:
005BA                           	.dsb 1 ; $05ba
005BB                           ; set to $10 if a subspace door is ever created, but never used?
005BB                           byte_RAM_5BB:
005BB                           	.dsb 1 ; $05bb
005BC                           PhantoActivateTimer:
005BC                           	.dsb 1 ; $05bc
005BD                           CardScreenUpdateIndex:
005BD                           	.dsb 1 ; $05bd
005BE                           Contributors:
005BE                           	.dsb 1 ; $05be
005BF                           	.dsb 1 ; $05bf
005C0                           	.dsb 1 ; $05c0
005C1                           	.dsb 1 ; $05c1
005C2                           NumContributors:
005C2                           	.dsb 1 ; $05c2
005C3                           ContributorIndex:
005C3                           	.dsb 1 ; $05c3
005C4                           ContributorTimer:
005C4                           	.dsb 1 ; $05c4
005C5                           Continues:
005C5                           	.dsb 1 ; $05c5
005C6                           
005C6                           ; FOR RENT
005C6                           IFNDEF EXTENDED_PTR_CONTINUE: 
005C6                           	.dsb 1 ; $05c6
005C6                           	.dsb 1 ; $05c7
005C6                           	.dsb 1 ; $05c8
005C6                           	.dsb 1 ; $05c9
005C6                           	.dsb 1 ; $05ca
005C6                           ENDIF
005C6                           IFDEF EXTENDED_PTR_CONTINUE:
005C6                           ContinueLevel:
005C6                           	.dsb 1 ; $05c6
005C7                           ContinueArea:
005C7                           	.dsb 1 ; $05c7
005C8                           ContinuePage:
005C8                           	.dsb 1 ; $05c8
005C9                           ContinueTransition:
005C9                           	.dsb 1 ; $05c9
005CA                           StoreContinue:
005CA                           	.dsb 1 ; $05ca
005CB                           ENDIF
005CB                           	.dsb 1 ; $05cb
005CC                           	.dsb 1 ; $05cc
005CD                           	.dsb 1 ; $05cd
005CE                           	.dsb 1 ; $05ce
005CF                           	.dsb 1 ; $05cf
005D0                           	.dsb 1 ; $05d0
005D1                           	.dsb 1 ; $05d1
005D2                           	.dsb 1 ; $05d2
005D3                           	.dsb 1 ; $05d3
005D4                           	.dsb 1 ; $05d4
005D5                           	.dsb 1 ; $05d5
005D6                           	.dsb 1 ; $05d6
005D7                           	.dsb 1 ; $05d7
005D8                           	.dsb 1 ; $05d8
005D9                           	.dsb 1 ; $05d9
005DA                           	.dsb 1 ; $05da
005DB                           	.dsb 1 ; $05db
005DC                           	.dsb 1 ; $05dc
005DD                           	.dsb 1 ; $05dd
005DE                           	.dsb 1 ; $05de
005DF                           	.dsb 1 ; $05df
005E0                           	.dsb 1 ; $05e0
005E1                           	.dsb 1 ; $05e1
005E2                           	.dsb 1 ; $05e2
005E3                           	.dsb 1 ; $05e3
005E4                           	.dsb 1 ; $05e4
005E5                           	.dsb 1 ; $05e5
005E6                           	.dsb 1 ; $05e6
005E7                           	.dsb 1 ; $05e7
005E8                           	.dsb 1 ; $05e8
005E9                           	.dsb 1 ; $05e9
005EA                           	.dsb 1 ; $05ea
005EB                           	.dsb 1 ; $05eb
005EC                           
005EC                           MusicPointerCurrentPart:
005EC                           	.dsb 1 ; $05ec
005ED                           MusicSquare1NoteStartLength:
005ED                           	.dsb 1 ; $05ed
005EE                           MusicPointerFirstPart:
005EE                           	.dsb 1 ; $05ee
005EF                           MusicPointerEndPart:
005EF                           	.dsb 1 ; $05ef
005F0                           MusicPointerLoopPart:
005F0                           	.dsb 1 ; $05f0
005F1                           MusicSquare2Patch:
005F1                           	.dsb 1 ; $05f1
005F2                           MusicSquare1Patch:
005F2                           	.dsb 1 ; $05f2
005F3                           MusicResume1:
005F3                           	.dsb 1 ; $05f3
005F4                           NextOctave:
005F4                           	.dsb 1 ; $05f4
005F5                           CurrentMusicNoiseStartOffset:
005F5                           	.dsb 1 ; $05f5
005F6                           ; FOR RENT
005F6                           	.dsb 1 ; $05f6
005F7                           	.dsb 1 ; $05f7
005F8                           	.dsb 1 ; $05f8
005F9                           MusicSquare1Lo:
005F9                           	.dsb 1 ; $05f9 (unused; written to but not read)
005FA                           MusicDPCMNoteLength:
005FA                           	.dsb 1 ; $05fa
005FB                           MusicDPCMNoteStartLength:
005FB                           	.dsb 1 ; $05fb
005FC                           CurrentMusicDPCMStartOffset:
005FC                           	.dsb 1 ; $05fc
005FD                           IFDEF EXPAND_MUSIC
005FD                           MusicSquare2Lo: ; needs to be +$04 relative to MusicSquare1Lo
005FD                           ENDIF
005FD                           	.dsb 1 ; $05fd (unused; written to but not read)
005FE                           	.dsb 1 ; $05fe
005FF                           CurrentMusicDPCMOffset:
005FF                           	.dsb 1 ; $05ff
00600                           
00600                           ; #01 Overworld
00600                           ; #02 Character Select
00600                           ; #04 Inside
00600                           ; #08 Boss
00600                           ; #10 Invincible
00600                           ; #20 Subspace
00600                           ; #40 Wart
00600                           ; #80 Title
00600                           MusicQueue1:
00600                           	.dsb 1 ; $0600
00601                           
00601                           ; $01 Item pull A
00601                           ; $02 Drum sample A
00601                           ; $04 Player hurt (>1 HP left)
00601                           ; $08 Item pull B
00601                           ; $10 Enemy scream A
00601                           ; $20 Drum sample B
00601                           ; $40 Enemy scream B
00601                           ; $80 Enemy scream C
00601                           DPCMQueue:
00601                           	.dsb 1 ; $0601
00602                           
00602                           ; $01 Birdo/etc shoot noise
00602                           ; $02 Potion door creation
00602                           ; $04 Cherry collect
00602                           ; $08 Throw item
00602                           ; $10 1-up
00602                           ; $20 Enemy hit/killed
00602                           ; $40 Stopwatch tick
00602                           ; $80 Wart spit
00602                           SoundEffectQueue1:
00602                           	.dsb 1 ; $0602
00603                           
00603                           ; $01 Warp fanfare, slot entry jingle
00603                           ; $02 Boss clear fanfare
00603                           ; $04 Celebration
00603                           ; $08 Death jingle
00603                           ; $10 Game over
00603                           ; $20 Mini-fanfare (slot win, crystal get)
00603                           ; $40 Same as $01
00603                           ; $80 Silence (stops music)
00603                           MusicQueue2:
00603                           	.dsb 1 ; $0603
00604                           
00604                           ; $01 Jump
00604                           ; $02 Climbing
00604                           ; $04 Coin collected
00604                           ; $08 Shrinking
00604                           ; $10 Intro "falling" sound
00604                           ; $20 Growing
00604                           ; $40 -N/A-
00604                           ; $80 -N/A-
00604                           SoundEffectQueue2:
00604                           	.dsb 1 ; $0604
00605                           
00605                           ; $01 Short noise
00605                           ; $02 Rumbling sound
00605                           ; $04 Rumbling sound
00605                           ; $08 -N/A-
00605                           ; $10 -N/A-
00605                           ; $20 -N/A-
00605                           ; $40 -N/A-
00605                           ; $80 -N/A-
00605                           SoundEffectQueue3:
00605                           	.dsb 1 ; $0605
00606                           
00606                           MusicPlaying2:
00606                           	.dsb 1 ; $0606
00607                           SoundEffectPlaying1:
00607                           	.dsb 1 ; $0607
00608                           DPCMPlaying:
00608                           	.dsb 1 ; $0608
00609                           MusicPlaying1:
00609                           	.dsb 1 ; $0609
0060A                           DPCMTimer:
0060A                           	.dsb 1 ; $060a
0060B                           ; FOR RENT
0060B                           MusicSquare1NoteBend:
0060B                           	.dsb 1 ; $060b
0060C                           MusicSquare1NoteSweep:
0060C                           	.dsb 1 ; $060c
0060D                           SoundEffectPlaying2:
0060D                           	.dsb 1 ; $060d
0060E                           SoundEffectPlaying3:
0060E                           	.dsb 1 ; $060e
0060F                           MusicSquare2NoteBend:
0060F                           	.dsb 1 ; $060f
00610                           ; FOR RENT
00610                           	.dsb 1 ; $0610
00611                           SoundEffectTimer3:
00611                           	.dsb 1 ; $0611
00612                           MusicTempoSetting:
00612                           	.dsb 1 ; $0612
00613                           CurrentMusicSquare2Offset:
00613                           	.dsb 1 ; $0613
00614                           CurrentMusicSquare1Offset:
00614                           	.dsb 1 ; $0614
00615                           CurrentMusicTriangleOffset:
00615                           	.dsb 1 ; $0615
00616                           CurrentMusicNoiseOffset:
00616                           	.dsb 1 ; $0616
00617                           MusicSquare2NoteStartLength:
00617                           	.dsb 1 ; $0617
00618                           MusicSquare2NoteLength:
00618                           	.dsb 1 ; $0618
00619                           MusicSquare2InstrumentOffset:
00619                           	.dsb 1 ; $0619
0061A                           MusicSquare1NoteLength:
0061A                           	.dsb 1 ; $061a
0061B                           MusicSquare1InstrumentOffset:
0061B                           	.dsb 1 ; $061b
0061C                           MusicTriangleNoteStartLength:
0061C                           	.dsb 1 ; $061c
0061D                           MusicTriangleNoteLength:
0061D                           	.dsb 1 ; $061d
0061E                           MusicNoiseNoteLength:
0061E                           	.dsb 1 ; $061e
0061F                           MusicNoiseNoteStartLength:
0061F                           	.dsb 1 ; $061f
00620                           Mushroom1upPulled:
00620                           	.dsb 1 ; $0620
00621                           SubspaceVisits:
00621                           	.dsb 1 ; $0621
00622                           SubspaceCoins:
00622                           	.dsb 1 ; $0622
00623                           SwarmCounter:
00623                           	.dsb 1 ; $0623
00624                           GroundSlipperiness:
00624                           	.dsb 1 ; $0624
00625                           IFDEF PLAYER_STUFF
00625                           PlayerIntermediateValue:
00625                           ENDIF
00625                           ; FOR RENT
00625                           	.dsb 1 ; $0625
00626                           ; FOR RENT
00626                           	.dsb 1 ; $0626
00627                           DoAreaTransition:
00627                           	.dsb 1 ; $0627
00628                           InSubspaceOrJar:
00628                           	.dsb 1 ; $0628
00629                           CurrentLevelRelative:
00629                           	.dsb 1 ; $0629
0062A                           CherryCount:
0062A                           	.dsb 1 ; $062a
0062B                           SlotMachineCoins:
0062B                           	.dsb 1 ; $062b
0062C                           BigVeggiesPulled:
0062C                           	.dsb 1 ; $062c
0062D                           CharacterLevelsCompleted:
0062D                           	.dsb 1 ; $062d
0062E                           	.dsb 1 ; $062e
0062F                           	.dsb 1 ; $062f
00630                           	.dsb 1 ; $0630
00631                           MaxLevelsCompleted:
00631                           	.dsb 1 ; $0631
00632                           ; FOR RENT
00632                           	.dsb 1 ; $0632
00633                           ; FOR RENT
00633                           LevelObjectMode:
00633                           	.dsb 1 ; $0633
00634                           
00634                           IFDEF AREA_HEADER_TILESET
00634                           CurrentWorldTileset:
00634                           	.dsb 1 ; $0634
00635                           CurrentWorld:
00635                           	.dsb 1 ; $0635
00636                           ENDIF
00636                           
00636                           IFNDEF AREA_HEADER_TILESET
00636                           ; FOR RENT
00636                           	.dsb 1 ; $0634
00636                           CurrentWorld:
00636                           CurrentWorldTileset:
00636                           	.dsb 1 ; $0635
00636                           ENDIF
00636                           
00636                           ; gets set to $A5 in DoCharacterSelectMenu to skip the bank switch
00636                           CharacterSelectBankSwitch:
00636                           	.dsb 1 ; $0636
00637                           RestorePlayerPalette0:
00637                           	.dsb 1 ; $0637
00638                           RestorePlayerPalette1:
00638                           	.dsb 1 ; $0638
00639                           RestorePlayerPalette2:
00639                           	.dsb 1 ; $0639
0063A                           RestorePlayerPalette3:
0063A                           	.dsb 1 ; $063a
0063B                           SlotMachineReelOrder1RAM:
0063B                           	.dsb 1 ; $063b
0063C                           	.dsb 1 ; $063c
0063D                           	.dsb 1 ; $063d
0063E                           	.dsb 1 ; $063e
0063F                           	.dsb 1 ; $063f
00640                           	.dsb 1 ; $0640
00641                           	.dsb 1 ; $0641
00642                           	.dsb 1 ; $0642
00643                           SlotMachineReelOrder2RAM:
00643                           	.dsb 1 ; $0643
00644                           	.dsb 1 ; $0644
00645                           	.dsb 1 ; $0645
00646                           	.dsb 1 ; $0646
00647                           	.dsb 1 ; $0647
00648                           	.dsb 1 ; $0648
00649                           	.dsb 1 ; $0649
0064A                           	.dsb 1 ; $064a
0064B                           SlotMachineReelOrder3RAM:
0064B                           	.dsb 1 ; $064b
0064C                           	.dsb 1 ; $064c
0064D                           	.dsb 1 ; $064d
0064E                           	.dsb 1 ; $064e
0064F                           	.dsb 1 ; $064f
00650                           	.dsb 1 ; $0650
00651                           	.dsb 1 ; $0651
00652                           	.dsb 1 ; $0652
00653                           unk_RAM_653:
00653                           	.dsb 1 ; $0653
00654                           	.dsb 1 ; $0654
00655                           	.dsb 1 ; $0655
00656                           	.dsb 1 ; $0656
00657                           	.dsb 1 ; $0657
00658                           	.dsb 1 ; $0658
00659                           	.dsb 1 ; $0659
0065A                           	.dsb 1 ; $065a
0065B                           	.dsb 1 ; $065b
0065C                           	.dsb 1 ; $065c
0065D                           	.dsb 1 ; $065d
0065E                           	.dsb 1 ; $065e
0065F                           	.dsb 1 ; $065f
00660                           	.dsb 1 ; $0660
00661                           	.dsb 1 ; $0661
00662                           	.dsb 1 ; $0662
00663                           	.dsb 1 ; $0663
00664                           	.dsb 1 ; $0664
00665                           	.dsb 1 ; $0665
00666                           	.dsb 1 ; $0666
00667                           	.dsb 1 ; $0667
00668                           	.dsb 1 ; $0668
00669                           	.dsb 1 ; $0669
0066A                           	.dsb 1 ; $066a
0066B                           	.dsb 1 ; $066b
0066C                           	.dsb 1 ; $066c
0066D                           	.dsb 1 ; $066d
0066E                           	.dsb 1 ; $066e
0066F                           	.dsb 1 ; $066f
00670                           	.dsb 1 ; $0670
00671                           	.dsb 1 ; $0671
00672                           	.dsb 1 ; $0672
00673                           	.dsb 1 ; $0673
00674                           	.dsb 1 ; $0674
00675                           	.dsb 1 ; $0675
00676                           	.dsb 1 ; $0676
00677                           	.dsb 1 ; $0677
00678                           	.dsb 1 ; $0678
00679                           	.dsb 1 ; $0679
0067A                           	.dsb 1 ; $067a
0067B                           PPUBuffer_67B:
0067B                           	.dsb 1 ; $067b
0067C                           	.dsb 1 ; $067c
0067D                           	.dsb 1 ; $067d
0067E                           byte_RAM_67E:
0067E                           	.dsb 1 ; $067e
0067F                           	.dsb 1 ; $067f
00680                           	.dsb 1 ; $0680
00681                           	.dsb 1 ; $0681
00682                           	.dsb 1 ; $0682
00683                           	.dsb 1 ; $0683
00684                           	.dsb 1 ; $0684
00685                           	.dsb 1 ; $0685
00686                           	.dsb 1 ; $0686
00687                           	.dsb 1 ; $0687
00688                           	.dsb 1 ; $0688
00689                           	.dsb 1 ; $0689
0068A                           	.dsb 1 ; $068a
0068B                           	.dsb 1 ; $068b
0068C                           	.dsb 1 ; $068c
0068D                           	.dsb 1 ; $068d
0068E                           	.dsb 1 ; $068e
0068F                           byte_RAM_68F:
0068F                           	.dsb 1 ; $068f
00690                           	.dsb 1 ; $0690
00691                           	.dsb 1 ; $0691
00692                           	.dsb 1 ; $0692
00693                           PPUBuffer_693:
00693                           	.dsb 1 ; $0693
00694                           	.dsb 1 ; $0694
00695                           	.dsb 1 ; $0695
00696                           	.dsb 1 ; $0696
00697                           	.dsb 1 ; $0697
00698                           	.dsb 1 ; $0698
00699                           	.dsb 1 ; $0699
0069A                           	.dsb 1 ; $069a
0069B                           	.dsb 1 ; $069b
0069C                           	.dsb 1 ; $069c
0069D                           	.dsb 1 ; $069d
0069E                           	.dsb 1 ; $069e
0069F                           	.dsb 1 ; $069f
006A0                           	.dsb 1 ; $06a0
006A1                           	.dsb 1 ; $06a1
006A2                           	.dsb 1 ; $06a2
006A3                           	.dsb 1 ; $06a3
006A4                           	.dsb 1 ; $06a4
006A5                           	.dsb 1 ; $06a5
006A6                           	.dsb 1 ; $06a6
006A7                           	.dsb 1 ; $06a7
006A8                           	.dsb 1 ; $06a8
006A9                           	.dsb 1 ; $06a9
006AA                           	.dsb 1 ; $06aa
006AB                           PPUBuffer_6AB:
006AB                           	.dsb 1 ; $06ab
006AC                           	.dsb 1 ; $06ac
006AD                           	.dsb 1 ; $06ad
006AE                           	.dsb 1 ; $06ae
006AF                           	.dsb 1 ; $06af
006B0                           	.dsb 1 ; $06b0
006B1                           	.dsb 1 ; $06b1
006B2                           	.dsb 1 ; $06b2
006B3                           	.dsb 1 ; $06b3
006B4                           	.dsb 1 ; $06b4
006B5                           	.dsb 1 ; $06b5
006B6                           	.dsb 1 ; $06b6
006B7                           	.dsb 1 ; $06b7
006B8                           	.dsb 1 ; $06b8
006B9                           	.dsb 1 ; $06b9
006BA                           	.dsb 1 ; $06ba
006BB                           	.dsb 1 ; $06bb
006BC                           	.dsb 1 ; $06bc
006BD                           PPUBuffer_6BD:
006BD                           	.dsb 1 ; $06bd
006BE                           	.dsb 1 ; $06be
006BF                           	.dsb 1 ; $06bf
006C0                           	.dsb 1 ; $06c0
006C1                           	.dsb 1 ; $06c1
006C2                           	.dsb 1 ; $06c2
006C3                           	.dsb 1 ; $06c3
006C4                           	.dsb 1 ; $06c4
006C5                           	.dsb 1 ; $06c5
006C6                           	.dsb 1 ; $06c6
006C7                           	.dsb 1 ; $06c7
006C8                           byte_RAM_6C8:
006C8                           	.dsb 1 ; $06c8
006C9                           	.dsb 1 ; $06c9
006CA                           	.dsb 1 ; $06ca
006CB                           	.dsb 1 ; $06cb
006CC                           PPUBuffer_6CC:
006CC                           	.dsb 1 ; $06cc
006CD                           	.dsb 1 ; $06cd
006CE                           	.dsb 1 ; $06ce
006CF                           	.dsb 1 ; $06cf
006D0                           	.dsb 1 ; $06d0
006D1                           	.dsb 1 ; $06d1
006D2                           	.dsb 1 ; $06d2
006D3                           	.dsb 1 ; $06d3
006D4                           	.dsb 1 ; $06d4
006D5                           	.dsb 1 ; $06d5
006D6                           	.dsb 1 ; $06d6
006D7                           	.dsb 1 ; $06d7
006D8                           	.dsb 1 ; $06d8
006D9                           	.dsb 1 ; $06d9
006DA                           PPUBuffer_6DA:
006DA                           	.dsb 1 ; $06da
006DB                           	.dsb 1 ; $06db
006DC                           	.dsb 1 ; $06dc
006DD                           	.dsb 1 ; $06dd
006DE                           	.dsb 1 ; $06de
006DF                           PPUBuffer_6DF:
006DF                           	.dsb 1 ; $06df
006E0                           	.dsb 1 ; $06e0
006E1                           	.dsb 1 ; $06e1
006E2                           	.dsb 1 ; $06e2
006E3                           	.dsb 1 ; $06e3
006E4                           PPUBuffer_6E4:
006E4                           	.dsb 1 ; $06e4
006E5                           	.dsb 1 ; $06e5
006E6                           	.dsb 1 ; $06e6
006E7                           	.dsb 1 ; $06e7
006E8                           	.dsb 1 ; $06e8
006E9                           PPUBuffer_6E9:
006E9                           	.dsb 1 ; $06e9
006EA                           	.dsb 1 ; $06ea
006EB                           	.dsb 1 ; $06eb
006EC                           	.dsb 1 ; $06ec
006ED                           	.dsb 1 ; $06ed
006EE                           	.dsb 1 ; $06ee
006EF                           	.dsb 1 ; $06ef
006F0                           	.dsb 1 ; $06f0
006F1                           	.dsb 1 ; $06f1
006F2                           MMC3PRGBankTemp:
006F2                           	.dsb 1 ; $06f2
006F3                           
006F3                           ; Game milestone counter, probably used for debugging
006F3                           ;   $00 = Title screen
006F3                           ;   $01 = Gameplay
006F3                           ;   $02 = Contributors
006F3                           ;   $03 = Mario sleeping
006F3                           GameMilestoneCounter:
006F3                           	.dsb 1 ; $06f3
006F4                           
006F4                           Player1JoypadUnk:
006F4                           	.dsb 1 ; $06f4
006F5                           Player2JoypadUnk:
006F5                           	.dsb 1 ; $06f5
006F6                           PlayerCurrentSize:
006F6                           	.dsb 1 ; $06f6
006F7                           BackgroundCHR1:
006F7                           	.dsb 1 ; $06f7
006F8                           BackgroundCHR2:
006F8                           	.dsb 1 ; $06f8
006F9                           SpriteCHR1:
006F9                           	.dsb 1 ; $06f9
006FA                           SpriteCHR2:
006FA                           	.dsb 1 ; $06fa
006FB                           SpriteCHR3:
006FB                           	.dsb 1 ; $06fb
006FC                           SpriteCHR4:
006FC                           	.dsb 1 ; $06fc
006FD                           BackgroundCHR2Timer:
006FD                           	.dsb 1 ; $06fd
006FE                           IFDEF INVERSE_LEVEL
006FE                           InvertGroundSetting:
006FE                           ENDIF
006FE                           ; FOR RENT
006FE                           	.dsb 1 ; $06fe
006FF                           ; FOR RENT
006FF                           	.dsb 1 ; $06ff
00700                           
00700                           ; When moving into subspace,  this area is turned into a tile represenation
00700                           ; of the current screen as it will be shown (e.g. reversed, like in-game)
00700                           ; Not sure if anything else uses this area yet
00700                           SubAreaTileLayout:
00700                           	.dsb $100   ; $0700-$07FF
00800                           
00800                           
00800                           ;
00800                           ; PPU registers
00800                           ; $2000-$2007
00800                           ;
00800                           
00800                           PPUCTRL = $2000
00800                           PPUMASK = $2001
00800                           PPUSTATUS = $2002
00800                           OAMADDR = $2003
00800                           OAMDATA = $2004
00800                           PPUSCROLL = $2005
00800                           PPUADDR = $2006
00800                           PPUDATA = $2007
00800                           
00800                           ;
00800                           ; APU registers and joypad registers
00800                           ;  $4000-$4015         $4016-$4017
00800                           ;
00800                           
00800                           SQ1_VOL = $4000
00800                           SQ1_SWEEP = $4001
00800                           SQ1_LO = $4002
00800                           SQ1_HI = $4003
00800                           
00800                           SQ2_VOL = $4004
00800                           SQ2_SWEEP = $4005
00800                           SQ2_LO = $4006
00800                           SQ2_HI = $4007
00800                           
00800                           TRI_LINEAR = $4008
00800                           _APU_TRI_UNUSED = $4009
00800                           TRI_LO = $400a
00800                           TRI_HI = $400b
00800                           
00800                           NOISE_VOL = $400c
00800                           _APU_NOISE_UNUSED = $400d
00800                           NOISE_LO = $400e
00800                           NOISE_HI = $400f
00800                           
00800                           DMC_FREQ = $4010
00800                           DMC_RAW = $4011
00800                           DMC_START = $4012
00800                           DMC_LEN = $4013
00800                           
00800                           OAM_DMA = $4014
00800                           
00800                           SND_CHN = $4015
00800                           
00800                           JOY1 = $4016
00800                           JOY2 = $4017
00800                           
00800                           ; Leftover code in prg-e-f references this
00800                           ; (otherwise unused, since, well, not FDS)
00800                           FDS_WAVETABLE_VOL = $4080
00800                           
00800                           
00800                           ;
00800                           ; Expansion chip stuff for MMC5 support
00800                           ; $5000-$5015
00800                           ;
00800                           
00800                           MMC5_PULSE1_VOL = $5000
00800                           MMC5_PULSE1_SWEEP = $5001
00800                           MMC5_PULSE1_LO = $5002
00800                           MMC5_PULSE1_HI = $5003
00800                           
00800                           MMC5_PULSE2_VOL = $5004
00800                           MMC5_PULSE2_SWEEP = $5005
00800                           MMC5_PULSE2_LO = $5006
00800                           MMC5_PULSE2_HI = $5007
00800                           
00800                           MMC5_PCM_MODE_IRQ = $5010
00800                           MMC5_RAW_PCM = $5011
00800                           
00800                           MMC5_SND_CHN = $5015
00800                           
00800                           
00800                           ;
00800                           ; Cartridge on-board RAM
00800                           ; Decoded level data is stored in memory here,
00800                           ; as well as some other junk
00800                           ; $6000-$7FFF
00800                           ;
00800                           
00800                           DecodedLevelData = $6000
00800                           
00800                           ; collision y data?
00800                           ; byte_BANKF_F099 copied to RAM
00800                           ; these various addrs are used(?) around prg-2-3
00800                           unk_RAM_7100 = $7100
00800                           
00800                           byte_RAM_710B = $710b
00800                           
00800                           unk_RAM_7114 = $7114
00800                           
00800                           byte_RAM_711F = $711f
00800                           
00800                           ; collision x data?
00800                           unk_RAM_7128 = $7128
00800                           
00800                           unk_RAM_713C = $713c
00800                           
00800                           ; MysteryData14439 copied to RAM
00800                           ; Does anything read this???
00800                           unk_RAM_7150 = $7150
00800                           
00800                           PPUBuffer_7168 = $7168
00800                           unk_RAM_716B = $716b
00800                           byte_RAM_717D = $717d
00800                           byte_RAM_717F = $717f
00800                           byte_RAM_7180 = $7180
00800                           byte_RAM_7181 = $7181
00800                           byte_RAM_7191 = $7191
00800                           byte_RAM_7192 = $7192
00800                           
00800                           PPUBuffer_7194 = $7194
00800                           byte_RAM_71A6 = $71a6
00800                           
00800                           PPUBuffer_71A8 = $71a8
00800                           byte_RAM_71AB = $71ab
00800                           byte_RAM_71AF = $71af
00800                           
00800                           ; byte_BANKA_84E1 copied to RAM
00800                           byte_RAM_71CC = $71cc
00800                           
00800                           ; byte_BANKF_F607 copied to RAM
00800                           unk_RAM_71D1 = $71d1
00800                           
00800                           byte_RAM_71FE = $71fe
00800                           
00800                           PPUBuffer_721B = $721b
00800                           
00800                           byte_RAM_7222 = $7222
00800                           
00800                           byte_RAM_7229 = $7229
00800                           
00800                           byte_RAM_7232 = $7232
00800                           
00800                           unk_RAM_7265 = $7265
00800                           
00800                           unk_RAM_7266 = $7266
00800                           
00800                           byte_RAM_7267 = $7267
00800                           
00800                           unk_RAM_7268 = $7268
00800                           
00800                           byte_RAM_726B = $726b
00800                           
00800                           BonusChanceLayoutRAM = $7400
00800                           
00800                           BonusChanceLayoutRAM2 = $7500
00800                           
00800                           RawLevelData = $7800
00800                           
00800                           RawJarData = $7a00
00800                           
00800                           RawEnemyDataAddr = $7b00
00800                           
00800                           ;
00800                           ; Extra enhancement support for 2P debug mode controls
00800                           ; Spread around to some 'for rent' addresses
00800                           ;
00800                           IFDEF CONTROLLER_2_DEBUG
00800                           	UpdateJoypadsTemp = $00c6
00800                           	CarryYOffsetsRAM = $7e00
00800                           	StatOffsetsRAM = $7e10
00800                           	ChangeCharacterTimer = $7e80
00800                           	ChangeCharacterPoofTimer = $7e81
00800                           	CreateObjectType = $7e82
00800                           	CreateObjectAttributes = $7e83
00800                           ENDIF
00800                           
00800                           ItemCarryYOffsetsRAM = $7f00
00800                           .ende
	                            
	                            ; -----------------------------------------
	                            ; Add each of the 16 banks.
	                            ; In SMB2, banks are swapped in pairs.
	                            ; The game was clearly designed originally to use the MMC1 mapper,
	                            ; and very minimal changes were made to make that work.
	                            ; These banks are still TECHNICALLY two different banks,
	                            ; but due to this little hack a lot of data runs between
	                            ; bank boundaries, and it's easier to keep together
	                            ; You should split these again if you plan on making any
	                            ; really huge modifications...
	                            
	                            ; ----------------------------------------
	                            ; Banks 0 and 1. Basically potpourri.
	                            ; Lots of crap everywhere.
	                            ; Title screen and some other stuff too.
	                            .base $8000
08000                           .include "src/prg-0-1.asm"
08000                           ;
08000                           ; Bank 0 & Bank 1
08000                           ; ===============
08000                           ;
08000                           ; What's inside:
08000                           ;
08000                           ;   - Title screen
08000                           ;   - Player controls
08000                           ;   - Player state handling
08000                           ;   - Enemy handling
08000                           ;
08000                           
08000                           ;
08000                           ; Initializes a vertical area
08000                           ;
08000                           InitializeAreaVertical:
08000 AD 02 05                  	LDA byte_RAM_502
08003 D0 58                     	BNE loc_BANK0_805D
08005                           
08005 A9 01                     	LDA #HMirror
08007 20 15 FE                  	JSR ChangeNametableMirroring
0800A                           
0800A AD 33 05                  	LDA CurrentLevelEntryPage
0800D D0 04                     	BNE loc_BANK0_8013
0800F                           
0800F                           loc_BANK0_800F:
0800F A9 09                     	LDA #$09
08011 D0 03                     	BNE loc_BANK0_8016
08013                           
08013                           loc_BANK0_8013:
08013 38                        	SEC
08014 E9 01                     	SBC #$01
08016                           
08016                           loc_BANK0_8016:
08016 09 C0                     	ORA #$C0
08018 85 CF                     	STA byte_RAM_CF
0801A 38                        	SEC
0801B E9 40                     	SBC #$40
0801D 85 CE                     	STA byte_RAM_CE
0801F AD 33 05                  	LDA CurrentLevelEntryPage
08022                           
08022                           loc_BANK0_8022:
08022 18                        	CLC
08023 69 01                     	ADC #$01
08025 C9 0A                     	CMP #$0A
08027 D0 02                     	BNE loc_BANK0_802B
08029                           
08029 A9 00                     	LDA #$00
0802B                           
0802B                           loc_BANK0_802B:
0802B 09 10                     	ORA #$10
0802D 85 D0                     	STA byte_RAM_D0
0802F AD 33 05                  	LDA CurrentLevelEntryPage
08032 A0 00                     	LDY #$00
08034 20 A6 86                  	JSR sub_BANK0_86EE
08037                           
08037 A9 20                     	LDA #$20
08039 85 D3                     	STA byte_RAM_D3
0803B A9 60                     	LDA #$60
0803D 85 D4                     	STA byte_RAM_D4
0803F EE 02 05                  	INC byte_RAM_502
08042 A9 E0                     	LDA #$E0
08044 85 E2                     	STA byte_RAM_E2
08046 A9 01                     	LDA #$01
08048 85 E4                     	STA byte_RAM_E4
0804A 8D 3A 05                  	STA byte_RAM_53A
0804D 4A                        	LSR A
0804E 85 D2                     	STA byte_RAM_D2
08050 AC 33 05                  	LDY CurrentLevelEntryPage
08053 20 2E 9A                  	JSR sub_BANK0_95AF
08056                           
08056 85 CB                     	STA ScreenYLo
08058 84 CA                     	STY ScreenYHi
0805A 20 70 98                  	JSR sub_BANK0_946D
0805D                           
0805D                           loc_BANK0_805D:
0805D A9 00                     	LDA #$00
0805F 85 06                     	STA byte_RAM_6
08061 A9 FF                     	LDA #$0FF
08063 8D 05 05                  	STA byte_RAM_505
08066                           
08066                           loc_BANK0_8066:
08066 A9 A0                     	LDA #$A0
08068 8D 07 05                  	STA byte_RAM_507
0806B 20 3D 82                  	JSR sub_BANK0_823D
0806E                           
0806E AD 3A 05                  	LDA byte_RAM_53A
08071 D0 0F                     	BNE locret_BANK0_8082
08073                           
08073 E6 13                     	INC BreakStartLevelLoop
08075 A9 E8                     	LDA #$E8
08077 85 E1                     	STA byte_RAM_E1
08079 A9 C8                     	LDA #$C8
0807B 85 E2                     	STA byte_RAM_E2
0807D A9 00                     	LDA #$00
0807F 8D 02 05                  	STA byte_RAM_502
08082                           
08082                           locret_BANK0_8082:
08082 60                        	RTS
08083                           
08083                           
08083                           ; =============== S U B R O U T I N E =======================================
08083                           
08083                           sub_BANK0_8083:
08083 A5 D8                     	LDA NeedVerticalScroll
08085 29 04                     	AND #$04
08087 D0 14                     	BNE loc_BANK0_809D
08089                           
08089 A5 D8                     	LDA NeedVerticalScroll
0808B 29 07                     	AND #$07
0808D D0 03                     	BNE loc_BANK0_8092
0808F                           
0808F 4C 9C 81                  	JMP loc_BANK0_819C
08092                           
08092                           ; ---------------------------------------------------------------------------
08092                           
08092                           loc_BANK0_8092:
08092 A5 D8                     	LDA NeedVerticalScroll
08094 09 04                     	ORA #$04
08096 85 D8                     	STA NeedVerticalScroll
08098 A9 12                     	LDA #$12
0809A 8D 04 05                  	STA CameraScrollTiles
0809D                           
0809D                           loc_BANK0_809D:
0809D A5 D8                     	LDA NeedVerticalScroll
0809F 4A                        	LSR A
080A0 A5 FC                     	LDA PPUScrollYMirror
080A2 90 5F                     	BCC loc_BANK0_8103
080A4                           
080A4 D0 0B                     	BNE loc_BANK0_80B1
080A6                           
080A6 A5 CF                     	LDA byte_RAM_CF
080A8 29 0F                     	AND #$0F
080AA C9 09                     	CMP #$09
080AC D0 03                     	BNE loc_BANK0_80B1
080AE                           
080AE 4C 9C 81                  	JMP loc_BANK0_819C
080B1                           
080B1                           ; ---------------------------------------------------------------------------
080B1                           
080B1                           loc_BANK0_80B1:
080B1 A9 01                     	LDA #$01
080B3 20 47 89                  	JSR SetObjectLocks
080B6                           
080B6 A5 FC                     	LDA PPUScrollYMirror
080B8 38                        	SEC
080B9 E9 04                     	SBC #$04
080BB 85 FC                     	STA PPUScrollYMirror
080BD A5 CB                     	LDA ScreenYLo
080BF 38                        	SEC
080C0 E9 04                     	SBC #$04
080C2 85 CB                     	STA ScreenYLo
080C4 B0 02                     	BCS loc_BANK0_80C8
080C6                           
080C6 C6 CA                     	DEC ScreenYHi
080C8                           
080C8                           loc_BANK0_80C8:
080C8 A5 FC                     	LDA PPUScrollYMirror
080CA C9 FC                     	CMP #$0FC
080CC D0 0D                     	BNE loc_BANK0_80DB
080CE                           
080CE A9 EC                     	LDA #$0EC
080D0 85 FC                     	STA PPUScrollYMirror
080D2 A5 C8                     	LDA byte_RAM_C8
080D4 49 02                     	EOR #$02
080D6 85 C8                     	STA byte_RAM_C8
080D8 4A                        	LSR A
080D9 85 C9                     	STA byte_RAM_C9
080DB                           
080DB                           loc_BANK0_80DB:
080DB A5 FC                     	LDA PPUScrollYMirror
080DD 29 07                     	AND #$07
080DF F0 01                     	BEQ loc_BANK0_80E2
080E1                           
080E1 60                        	RTS
080E2                           
080E2                           ; ---------------------------------------------------------------------------
080E2                           
080E2                           loc_BANK0_80E2:
080E2 A2 00                     	LDX #$00
080E4 20 87 82                  	JSR loc_BANK0_8287
080E7                           
080E7 E8                        	INX
080E8 20 87 82                  	JSR loc_BANK0_8287
080EB                           
080EB A5 FC                     	LDA PPUScrollYMirror
080ED 29 0F                     	AND #$0F
080EF D0 0A                     	BNE loc_BANK0_80FB
080F1                           
080F1 A2 00                     	LDX #$00
080F3 20 97 82                  	JSR sub_BANK0_8297
080F6                           
080F6 A2 01                     	LDX #$01
080F8 20 97 82                  	JSR sub_BANK0_8297
080FB                           
080FB                           loc_BANK0_80FB:
080FB A2 01                     	LDX #$01
080FD 20 E2 82                  	JSR sub_BANK0_82E2
08100                           
08100 4C 70 81                  	JMP loc_BANK0_8170
08103                           
08103                           ; ---------------------------------------------------------------------------
08103                           
08103                           loc_BANK0_8103:
08103 D0 1C                     	BNE loc_BANK0_8121
08105                           
08105 AD 3F 05                  	LDA CurrentLevelPages
08108 85 0F                     	STA byte_RAM_F
0810A C9 09                     	CMP #$09
0810C D0 06                     	BNE loc_BANK0_8114
0810E                           
0810E A9 00                     	LDA #$00
08110 85 0F                     	STA byte_RAM_F
08112 F0 02                     	BEQ loc_BANK0_8116
08114                           
08114                           loc_BANK0_8114:
08114 E6 0F                     	INC byte_RAM_F
08116                           
08116                           loc_BANK0_8116:
08116 A5 D0                     	LDA byte_RAM_D0
08118 29 0F                     	AND #$0F
0811A C5 0F                     	CMP byte_RAM_F
0811C D0 03                     	BNE loc_BANK0_8121
0811E                           
0811E 4C 9C 81                  	JMP loc_BANK0_819C
08121                           
08121                           ; ---------------------------------------------------------------------------
08121                           
08121                           loc_BANK0_8121:
08121 A9 01                     	LDA #$01
08123 20 47 89                  	JSR SetObjectLocks
08126                           
08126 A5 FC                     	LDA PPUScrollYMirror
08128 18                        	CLC
08129 69 04                     	ADC #$04
0812B 85 FC                     	STA PPUScrollYMirror
0812D A5 CB                     	LDA ScreenYLo
0812F 18                        	CLC
08130 69 04                     	ADC #$04
08132 85 CB                     	STA ScreenYLo
08134 90 02                     	BCC loc_BANK0_8138
08136                           
08136 E6 CA                     	INC ScreenYHi
08138                           
08138                           loc_BANK0_8138:
08138 A5 FC                     	LDA PPUScrollYMirror
0813A 29 07                     	AND #$07
0813C F0 01                     	BEQ loc_BANK0_813F
0813E                           
0813E 60                        	RTS
0813F                           
0813F                           ; ---------------------------------------------------------------------------
0813F                           
0813F                           loc_BANK0_813F:
0813F A5 FC                     	LDA PPUScrollYMirror
08141 C9 F0                     	CMP #$F0
08143 D0 0D                     	BNE loc_BANK0_8152
08145                           
08145 A9 00                     	LDA #$00
08147 85 FC                     	STA PPUScrollYMirror
08149 A5 C8                     	LDA byte_RAM_C8
0814B 49 02                     	EOR #$02
0814D 85 C8                     	STA byte_RAM_C8
0814F 4A                        	LSR A
08150 85 C9                     	STA byte_RAM_C9
08152                           
08152                           loc_BANK0_8152:
08152 A2 02                     	LDX #$02
08154 20 8F 82                  	JSR sub_BANK0_828F
08157                           
08157 CA                        	DEX
08158 20 8F 82                  	JSR sub_BANK0_828F
0815B                           
0815B A5 D4                     	LDA byte_RAM_D4
0815D 29 20                     	AND #$20
0815F D0 0A                     	BNE loc_BANK0_816B
08161                           
08161 A2 02                     	LDX #$02
08163 20 BE 82                  	JSR sub_BANK0_82BE
08166                           
08166 A2 01                     	LDX #$01
08168 20 BE 82                  	JSR sub_BANK0_82BE
0816B                           
0816B                           loc_BANK0_816B:
0816B A2 02                     	LDX #$02
0816D 20 E2 82                  	JSR sub_BANK0_82E2
08170                           
08170                           loc_BANK0_8170:
08170 AD 04 05                  	LDA CameraScrollTiles
08173 C9 12                     	CMP #$12
08175 D0 18                     	BNE loc_BANK0_818F
08177                           
08177 A9 01                     	LDA #$01
08179 85 E4                     	STA byte_RAM_E4
0817B A5 D8                     	LDA NeedVerticalScroll
0817D 4A                        	LSR A
0817E 90 06                     	BCC loc_BANK0_8186
08180                           
08180 A2 01                     	LDX #$01
08182 A9 00                     	LDA #$00
08184 F0 04                     	BEQ loc_BANK0_818A
08186                           
08186                           loc_BANK0_8186:
08186 A2 02                     	LDX #$02
08188 A9 10                     	LDA #$10
0818A                           
0818A                           loc_BANK0_818A:
0818A 85 01                     	STA byte_RAM_1
0818C 20 14 83                  	JSR sub_BANK0_8314
0818F                           
0818F                           loc_BANK0_818F:
0818F 20 3E 83                  	JSR sub_BANK0_833E
08192                           
08192 CE 04 05                  	DEC CameraScrollTiles
08195 D0 09                     	BNE locret_BANK0_81A0
08197                           
08197 A9 00                     	LDA #$00
08199 20 47 89                  	JSR SetObjectLocks
0819C                           
0819C                           loc_BANK0_819C:
0819C A9 00                     	LDA #$00
0819E 85 D8                     	STA NeedVerticalScroll
081A0                           
081A0                           locret_BANK0_81A0:
081A0 60                        	RTS
081A1                           
081A1                           ; End of function sub_BANK0_8083
081A1                           
081A1                           ; ---------------------------------------------------------------------------
081A1 01                        	.db $01
081A2                           
081A2                           
081A2                           ;
081A2                           ; Stashes screen scrolling information so that it can be restored after leaving
081A2                           ; the pause screen
081A2                           ;
081A2                           StashScreenScrollPosition:
081A2 A5 FC                     	LDA PPUScrollYMirror
081A4 8D 09 05                  	STA PPUScrollYMirror_Backup
081A7 A5 FD                     	LDA PPUScrollXMirror
081A9 8D 0A 05                  	STA PPUScrollXMirror_Backup
081AC A5 C8                     	LDA byte_RAM_C8
081AE 8D 0B 05                  	STA byte_RAM_50B
081B1 A5 C9                     	LDA byte_RAM_C9
081B3 8D 0C 05                  	STA byte_RAM_50C
081B6 A5 CA                     	LDA ScreenYHi
081B8 8D 13 05                  	STA ScreenYHi_Backup
081BB A5 CB                     	LDA ScreenYLo
081BD 8D 15 05                  	STA ScreenYLo_Backup
081C0 AD BE 04                  	LDA ScreenBoundaryLeftHi
081C3 8D 14 05                  	STA ScreenBoundaryLeftHi_Backup
081C6 A5 E1                     	LDA byte_RAM_E1
081C8 8D 17 05                  	STA byte_RAM_517
081CB A9 00                     	LDA #$00
081CD 85 FC                     	STA PPUScrollYMirror
081CF 85 FD                     	STA PPUScrollXMirror
081D1 85 C8                     	STA byte_RAM_C8
081D3 85 C9                     	STA byte_RAM_C9
081D5 60                        	RTS
081D6                           
081D6                           
081D6                           RestoreScreenScrollPosition:
081D6 AD 09 05                  	LDA PPUScrollYMirror_Backup
081D9 85 FC                     	STA PPUScrollYMirror
081DB AD 0A 05                  	LDA PPUScrollXMirror_Backup
081DE 85 FD                     	STA PPUScrollXMirror
081E0 8D C0 04                  	STA ScreenBoundaryLeftLo
081E3 AD 0B 05                  	LDA byte_RAM_50B
081E6 85 C8                     	STA byte_RAM_C8
081E8 AD 0C 05                  	LDA byte_RAM_50C
081EB 85 C9                     	STA byte_RAM_C9
081ED AD 14 05                  	LDA ScreenBoundaryLeftHi_Backup
081F0 8D BE 04                  	STA ScreenBoundaryLeftHi
081F3 AD 13 05                  	LDA ScreenYHi_Backup
081F6 85 CA                     	STA ScreenYHi
081F8 AD 15 05                  	LDA ScreenYLo_Backup
081FB 85 CB                     	STA ScreenYLo
081FD 60                        	RTS
081FE                           
081FE                           
081FE                           ; =============== S U B R O U T I N E =======================================
081FE                           
081FE                           sub_BANK0_81FE:
081FE A5 CF                     	LDA byte_RAM_CF
08200 29 10                     	AND #$10
08202 F0 07                     	BEQ loc_BANK0_820B
08204                           
08204 A5 E1                     	LDA byte_RAM_E1
08206 38                        	SEC
08207 E9 08                     	SBC #$08
08209 85 E1                     	STA byte_RAM_E1
0820B                           
0820B                           loc_BANK0_820B:
0820B A9 01                     	LDA #$01
0820D 85 E4                     	STA byte_RAM_E4
0820F A5 CF                     	LDA byte_RAM_CF
08211 85 CE                     	STA byte_RAM_CE
08213 A9 10                     	LDA #$10
08215 85 01                     	STA byte_RAM_1
08217 A2 00                     	LDX #$00
08219 20 14 83                  	JSR sub_BANK0_8314
0821C                           
0821C A5 D3                     	LDA byte_RAM_D3
0821E 85 D2                     	STA byte_RAM_D2
08220 A5 E1                     	LDA byte_RAM_E1
08222 85 E2                     	STA byte_RAM_E2
08224 A2 01                     	LDX #$01
08226 20 6A 84                  	JSR sub_BANK0_846A
08229                           
08229 A9 F0                     	LDA #$F0
0822B 8D 06 05                  	STA byte_RAM_506
0822E 8D 07 05                  	STA byte_RAM_507
08231 A5 D0                     	LDA byte_RAM_D0
08233 8D 05 05                  	STA byte_RAM_505
08236 E6 D5                     	INC byte_RAM_D5
08238 A9 01                     	LDA #$01
0823A 85 06                     	STA byte_RAM_6
0823C 60                        	RTS
0823D                           
0823D                           ; End of function sub_BANK0_81FE
0823D                           
0823D                           ; =============== S U B R O U T I N E =======================================
0823D                           
0823D                           sub_BANK0_823D:
0823D A2 00                     	LDX #$00
0823F 8E 37 05                  	STX byte_RAM_537
08242 20 E2 82                  	JSR sub_BANK0_82E2
08245                           
08245 20 3E 83                  	JSR sub_BANK0_833E
08248                           
08248 A2 00                     	LDX #$00
0824A 20 8F 82                  	JSR sub_BANK0_828F
0824D                           
0824D AD 06 05                  	LDA byte_RAM_506
08250 C5 D1                     	CMP byte_RAM_D1
08252 D0 23                     	BNE loc_BANK0_8277
08254                           
08254 AD 07 05                  	LDA byte_RAM_507
08257 18                        	CLC
08258 69 20                     	ADC #$20
0825A C5 D2                     	CMP byte_RAM_D2
0825C D0 19                     	BNE loc_BANK0_8277
0825E                           
0825E                           loc_BANK0_825E:
0825E A5 06                     	LDA byte_RAM_6
08260 AA                        	TAX
08261 F0 05                     	BEQ loc_BANK0_8268
08263                           
08263 AD 17 05                  	LDA byte_RAM_517
08266 85 E1                     	STA byte_RAM_E1
08268                           
08268                           loc_BANK0_8268:
08268 EE 37 05                  	INC byte_RAM_537
0826B A9 00                     	LDA #$00
0826D 9D 3A 05                  	STA byte_RAM_53A, X
08270 8D 3D 05                  	STA byte_RAM_53D
08273 8D 3E 05                  	STA byte_RAM_53E
08276 60                        	RTS
08277                           
08277                           ; ---------------------------------------------------------------------------
08277                           
08277                           loc_BANK0_8277:
08277 A5 D2                     	LDA byte_RAM_D2
08279 29 20                     	AND #$20
0827B D0 11                     	BNE locret_BANK0_828E
0827D                           
0827D A5 CE                     	LDA byte_RAM_CE
0827F CD 05 05                  	CMP byte_RAM_505
08282 F0 DA                     	BEQ loc_BANK0_825E
08284                           
08284 4C BE 82                  	JMP sub_BANK0_82BE
08287                           
08287                           ; ---------------------------------------------------------------------------
08287                           
08287                           loc_BANK0_8287:
08287 B5 D3                     	LDA byte_RAM_D3, X
08289 38                        	SEC
0828A E9 20                     	SBC #$20
0828C 95 D3                     	STA byte_RAM_D3, X
0828E                           
0828E                           locret_BANK0_828E:
0828E 60                        	RTS
0828F                           
0828F                           ; End of function sub_BANK0_823D
0828F                           
0828F                           ; =============== S U B R O U T I N E =======================================
0828F                           
0828F                           sub_BANK0_828F:
0828F B5 D2                     	LDA byte_RAM_D2, X
08291 18                        	CLC
08292 69 20                     	ADC #$20
08294 95 D2                     	STA byte_RAM_D2, X
08296 60                        	RTS
08297                           
08297                           ; End of function sub_BANK0_828F
08297                           
08297                           ; =============== S U B R O U T I N E =======================================
08297                           
08297                           sub_BANK0_8297:
08297 B5 CF                     	LDA byte_RAM_CF, X
08299 38                        	SEC
0829A E9 10                     	SBC #$10
0829C 95 CF                     	STA byte_RAM_CF, X
0829E 29 F0                     	AND #$F0
082A0 C9 F0                     	CMP #$F0
082A2 D0 19                     	BNE locret_BANK0_82BD
082A4                           
082A4 B5 CF                     	LDA byte_RAM_CF, X
082A6 29 0F                     	AND #$0F
082A8 18                        	CLC
082A9 69 E0                     	ADC #$E0
082AB 95 CF                     	STA byte_RAM_CF, X
082AD D6 CF                     	DEC byte_RAM_CF, X
082AF B5 CF                     	LDA byte_RAM_CF, X
082B1 C9 DF                     	CMP #$0DF
082B3 D0 04                     	BNE loc_BANK0_82B9
082B5                           
082B5                           loc_BANK0_82B5:
082B5 A9 E9                     	LDA #$E9
082B7 95 CF                     	STA byte_RAM_CF, X
082B9                           
082B9                           loc_BANK0_82B9:
082B9 A9 A0                     	LDA #$A0
082BB 95 D3                     	STA byte_RAM_D3, X
082BD                           
082BD                           locret_BANK0_82BD:
082BD 60                        	RTS
082BE                           
082BE                           ; End of function sub_BANK0_8297
082BE                           
082BE                           ; =============== S U B R O U T I N E =======================================
082BE                           
082BE                           sub_BANK0_82BE:
082BE B5 CE                     	LDA byte_RAM_CE, X
082C0 18                        	CLC
082C1 69 10                     	ADC #$10
082C3 95 CE                     	STA byte_RAM_CE, X
082C5 29 F0                     	AND #$F0
082C7 C9 F0                     	CMP #$F0
082C9 D0 16                     	BNE locret_BANK0_82E1
082CB                           
082CB B5 CE                     	LDA byte_RAM_CE, X
082CD 29 0F                     	AND #$0F
082CF 95 CE                     	STA byte_RAM_CE, X
082D1 F6 CE                     	INC byte_RAM_CE, X
082D3 B5 CE                     	LDA byte_RAM_CE, X
082D5 C9 0A                     	CMP #$0A
082D7 D0 04                     	BNE loc_BANK0_82DD
082D9                           
082D9 A9 00                     	LDA #$00
082DB 95 CE                     	STA byte_RAM_CE, X
082DD                           
082DD                           loc_BANK0_82DD:
082DD A9 00                     	LDA #$00
082DF 95 D2                     	STA byte_RAM_D2, X
082E1                           
082E1                           locret_BANK0_82E1:
082E1 60                        	RTS
082E2                           
082E2                           ; End of function sub_BANK0_82BE
082E2                           
082E2                           ; =============== S U B R O U T I N E =======================================
082E2                           
082E2                           sub_BANK0_82E2:
082E2 B5 CE                     	LDA byte_RAM_CE, X
082E4 29 0F                     	AND #$0F
082E6 A8                        	TAY
082E7 B9 E9 B0                  	LDA DecodedLevelPageStartLo_Bank1, Y
082EA 85 E9                     	STA byte_RAM_E9
082EC B9 F4 B0                  	LDA DecodedLevelPageStartHi_Bank1, Y
082EF 85 EA                     	STA byte_RAM_EA
082F1 B5 CE                     	LDA byte_RAM_CE, X
082F3 29 F0                     	AND #$F0
082F5 85 D7                     	STA byte_RAM_D7
082F7 B5 CE                     	LDA byte_RAM_CE, X
082F9 4A                        	LSR A
082FA 90 04                     	BCC loc_BANK0_8300
082FC                           
082FC A9 20                     	LDA #$20
082FE D0 02                     	BNE loc_BANK0_8302
08300                           
08300                           loc_BANK0_8300:
08300 A9 28                     	LDA #$28
08302                           
08302                           loc_BANK0_8302:
08302 85 D1                     	STA byte_RAM_D1
08304 B5 CE                     	LDA byte_RAM_CE, X
08306 29 C0                     	AND #$C0
08308 0A                        	ASL A
08309 2A                        	ROL A
0830A 2A                        	ROL A
0830B 65 D1                     	ADC byte_RAM_D1
0830D 85 D1                     	STA byte_RAM_D1
0830F                           
0830F                           loc_BANK0_830F:
0830F B5 D2                     	LDA byte_RAM_D2, X
08311 85 D2                     	STA byte_RAM_D2
08313                           
08313                           locret_BANK0_8313:
08313 60                        	RTS
08314                           
08314                           ; End of function sub_BANK0_82E2
08314                           
08314                           ; =============== S U B R O U T I N E =======================================
08314                           
08314                           sub_BANK0_8314:
08314 B5 CE                     	LDA byte_RAM_CE, X
08316 29 10                     	AND #$10
08318 F0 F9                     	BEQ locret_BANK0_8313
0831A                           
0831A B5 CE                     	LDA byte_RAM_CE, X
0831C 85 03                     	STA byte_RAM_3
0831E 38                        	SEC
0831F E5 01                     	SBC byte_RAM_1
08321 95 CE                     	STA byte_RAM_CE, X
08323 20 E2 82                  	JSR sub_BANK0_82E2
08326                           
08326                           loc_BANK0_8326:
08326 A9 0F                     	LDA #$0F
08328 85 E3                     	STA byte_RAM_E3
0832A A9 00                     	LDA #$00
0832C 85 D6                     	STA byte_RAM_D6
0832E                           
0832E                           loc_BANK0_832E:
0832E 20 AC 84                  	JSR sub_BANK0_84AC
08331                           
08331 A5 E3                     	LDA byte_RAM_E3
08333 10 F9                     	BPL loc_BANK0_832E
08335                           
08335 A5 03                     	LDA byte_RAM_3
08337 95 CE                     	STA byte_RAM_CE, X
08339 C6 E4                     	DEC byte_RAM_E4
0833B 4C E2 82                  	JMP sub_BANK0_82E2
0833E                           
0833E                           ; End of function sub_BANK0_8314
0833E                           
0833E                           ; =============== S U B R O U T I N E =======================================
0833E                           
0833E                           sub_BANK0_833E:
0833E AE 00 03                  	LDX byte_RAM_300
08341 A5 D1                     	LDA byte_RAM_D1
08343 9D 01 03                  	STA PPUBuffer_301, X
08346 E8                        	INX
08347 A5 D2                     	LDA byte_RAM_D2
08349 9D 01 03                  	STA PPUBuffer_301, X
0834C E8                        	INX
0834D A9 20                     	LDA #$20
0834F 9D 01 03                  	STA PPUBuffer_301, X
08352 E8                        	INX
08353 A9 00                     	LDA #$00
08355 85 D6                     	STA byte_RAM_D6
08357 A9 0F                     	LDA #$0F
08359 85 E3                     	STA byte_RAM_E3
0835B A5 D5                     	LDA byte_RAM_D5
0835D F0 0D                     	BEQ loc_BANK0_836C
0835F                           
0835F A4 D7                     	LDY byte_RAM_D7
08361 C0 E0                     	CPY #$E0
08363 D0 07                     	BNE loc_BANK0_836C
08365                           
08365 A9 00                     	LDA #$00
08367 85 E4                     	STA byte_RAM_E4
08369 EE 39 05                  	INC byte_RAM_539
0836C                           
0836C                           loc_BANK0_836C:
0836C A4 D7                     	LDY byte_RAM_D7
0836E B1 E9                     	LDA (byte_RAM_E9), Y
08370 8D 1B 05                  	STA byte_RAM_51B
08373 29 C0                     	AND #$C0
08375 0A                        	ASL A
08376 2A                        	ROL A
08377 2A                        	ROL A
08378 A8                        	TAY
08379 B9 81 BA                  	LDA TileQuadPointersLo, Y
0837C 85 00                     	STA byte_RAM_0
0837E B9 85 BA                  	LDA TileQuadPointersHi, Y
08381 85 01                     	STA byte_RAM_1
08383 A4 D7                     	LDY byte_RAM_D7
08385 B1 E9                     	LDA (byte_RAM_E9), Y
08387 0A                        	ASL A
08388 0A                        	ASL A
08389 A8                        	TAY
0838A A5 D5                     	LDA byte_RAM_D5
0838C F0 02                     	BEQ loc_BANK0_8390
0838E                           
0838E C8                        	INY
0838F C8                        	INY
08390                           
08390                           loc_BANK0_8390:
08390 B1 00                     	LDA (byte_RAM_0), Y
08392 9D 01 03                  	STA PPUBuffer_301, X
08395 E6 D6                     	INC byte_RAM_D6
08397 E8                        	INX
08398 C8                        	INY
08399 A5 D6                     	LDA byte_RAM_D6
0839B 4A                        	LSR A
0839C B0 F2                     	BCS loc_BANK0_8390
0839E                           
0839E E6 D7                     	INC byte_RAM_D7
083A0 A5 D5                     	LDA byte_RAM_D5
083A2 F0 03                     	BEQ loc_BANK0_83A7
083A4                           
083A4 20 88 84                  	JSR sub_BANK0_8488
083A7                           
083A7                           loc_BANK0_83A7:
083A7 A5 D6                     	LDA byte_RAM_D6
083A9 C9 20                     	CMP #$20
083AB 90 BF                     	BCC loc_BANK0_836C
083AD                           
083AD A9 00                     	LDA #$00
083AF 9D 01 03                  	STA PPUBuffer_301, X
083B2 8E 00 03                  	STX byte_RAM_300
083B5 A5 D5                     	LDA byte_RAM_D5
083B7 F0 52                     	BEQ loc_BANK0_840B
083B9                           
083B9 A5 E4                     	LDA byte_RAM_E4
083BB F0 05                     	BEQ loc_BANK0_83C2
083BD                           
083BD C6 E4                     	DEC byte_RAM_E4
083BF 4C DE 83                  	JMP loc_BANK0_83DE
083C2                           
083C2                           ; ---------------------------------------------------------------------------
083C2                           
083C2                           loc_BANK0_83C2:
083C2 A5 D8                     	LDA NeedVerticalScroll
083C4 4A                        	LSR A
083C5 B0 0D                     	BCS loc_BANK0_83D4
083C7                           
083C7 A2 01                     	LDX #$01
083C9 20 12 84                  	JSR sub_BANK0_8412
083CC                           
083CC A2 01                     	LDX #$01
083CE 20 6A 84                  	JSR sub_BANK0_846A
083D1                           
083D1 4C DE 83                  	JMP loc_BANK0_83DE
083D4                           
083D4                           ; ---------------------------------------------------------------------------
083D4                           
083D4                           loc_BANK0_83D4:
083D4 A2 00                     	LDX #$00
083D6 20 12 84                  	JSR sub_BANK0_8412
083D9                           
083D9 A2 00                     	LDX #$00
083DB 20 78 84                  	JSR sub_BANK0_8478
083DE                           
083DE                           loc_BANK0_83DE:
083DE A2 00                     	LDX #$00
083E0 A5 D8                     	LDA NeedVerticalScroll
083E2 4A                        	LSR A
083E3 90 15                     	BCC loc_BANK0_83FA
083E5                           
083E5 E8                        	INX
083E6 B5 CF                     	LDA byte_RAM_CF, X
083E8 29 F0                     	AND #$F0
083EA C9 E0                     	CMP #$E0
083EC F0 06                     	BEQ loc_BANK0_83F4
083EE                           
083EE B5 CF                     	LDA byte_RAM_CF, X
083F0 29 10                     	AND #$10
083F2 D0 17                     	BNE loc_BANK0_840B
083F4                           
083F4                           loc_BANK0_83F4:
083F4 20 78 84                  	JSR sub_BANK0_8478
083F7                           
083F7 4C 0B 84                  	JMP loc_BANK0_840B
083FA                           
083FA                           ; ---------------------------------------------------------------------------
083FA                           
083FA                           loc_BANK0_83FA:
083FA B5 CF                     	LDA byte_RAM_CF, X
083FC 29 F0                     	AND #$F0
083FE C9 E0                     	CMP #$E0
08400 F0 06                     	BEQ loc_BANK0_8408
08402                           
08402 B5 CF                     	LDA byte_RAM_CF, X
08404 29 10                     	AND #$10
08406 F0 03                     	BEQ loc_BANK0_840B
08408                           
08408                           loc_BANK0_8408:
08408 20 6A 84                  	JSR sub_BANK0_846A
0840B                           
0840B                           loc_BANK0_840B:
0840B A5 D5                     	LDA byte_RAM_D5
0840D 49 01                     	EOR #$01
0840F 85 D5                     	STA byte_RAM_D5
08411 60                        	RTS
08412                           
08412                           ; End of function sub_BANK0_833E
08412                           
08412                           ; =============== S U B R O U T I N E =======================================
08412                           
08412                           ; something to do with background tile palettes in vertical levels?
08412                           sub_BANK0_8412:
08412 AC 00 03                  	LDY byte_RAM_300
08415 A5 D1                     	LDA byte_RAM_D1
08417 09 03                     	ORA #$03
08419 99 01 03                  	STA PPUBuffer_301, Y
0841C C8                        	INY
0841D B5 E1                     	LDA byte_RAM_E1, X
0841F 99 01 03                  	STA PPUBuffer_301, Y
08422 C8                        	INY
08423 A9 08                     	LDA #$08
08425 99 01 03                  	STA PPUBuffer_301, Y
08428 C8                        	INY
08429 A2 07                     	LDX #$07
0842B                           
0842B                           loc_BANK0_842B:
0842B AD 39 05                  	LDA byte_RAM_539
0842E F0 0B                     	BEQ loc_BANK0_843B
08430                           
08430 B5 D9                     	LDA EnemyArray_D9, X
08432 4A                        	LSR A
08433 4A                        	LSR A
08434 4A                        	LSR A
08435 4A                        	LSR A
08436 95 D9                     	STA EnemyArray_D9, X
08438 4C 52 84                  	JMP loc_BANK0_8452
0843B                           
0843B                           ; ---------------------------------------------------------------------------
0843B                           
0843B                           loc_BANK0_843B:
0843B A5 D8                     	LDA NeedVerticalScroll
0843D 4A                        	LSR A
0843E 90 12                     	BCC loc_BANK0_8452
08440                           
08440                           loc_BANK0_8440:
08440 B5 D9                     	LDA EnemyArray_D9, X
08442 0A                        	ASL A
08443 0A                        	ASL A
08444 0A                        	ASL A
08445 0A                        	ASL A
08446 85 01                     	STA byte_RAM_1
08448 B5 D9                     	LDA EnemyArray_D9, X
0844A 4A                        	LSR A
0844B 4A                        	LSR A
0844C 4A                        	LSR A
0844D 4A                        	LSR A
0844E 05 01                     	ORA byte_RAM_1
08450                           
08450                           loc_BANK0_8450:
08450 95 D9                     	STA EnemyArray_D9, X
08452                           
08452                           loc_BANK0_8452:
08452 B5 D9                     	LDA EnemyArray_D9, X
08454 99 01 03                  	STA PPUBuffer_301, Y
08457 C8                        	INY
08458 CA                        	DEX
08459 10 D0                     	BPL loc_BANK0_842B
0845B                           
0845B A9 01                     	LDA #$01
0845D 85 E4                     	STA byte_RAM_E4
0845F 4A                        	LSR A
08460 8D 39 05                  	STA byte_RAM_539
08463 99 01 03                  	STA PPUBuffer_301, Y
08466 8C 00 03                  	STY byte_RAM_300
08469 60                        	RTS
0846A                           
0846A                           ; End of function sub_BANK0_8412
0846A                           
0846A                           ; =============== S U B R O U T I N E =======================================
0846A                           
0846A                           sub_BANK0_846A:
0846A B5 E1                     	LDA byte_RAM_E1, X
0846C 18                        	CLC
0846D 69 08                     	ADC #$08
0846F 95 E1                     	STA byte_RAM_E1, X
08471 90 04                     	BCC locret_BANK0_8477
08473                           
08473 A9 C0                     	LDA #$C0
08475 95 E1                     	STA byte_RAM_E1, X
08477                           
08477                           locret_BANK0_8477:
08477 60                        	RTS
08478                           
08478                           ; End of function sub_BANK0_846A
08478                           
08478                           ; =============== S U B R O U T I N E =======================================
08478                           
08478                           sub_BANK0_8478:
08478 B5 E1                     	LDA byte_RAM_E1, X
0847A 38                        	SEC
0847B E9 08                     	SBC #$08
0847D 95 E1                     	STA byte_RAM_E1, X
0847F C9 C0                     	CMP #$C0
08481 B0 04                     	BCS locret_BANK0_8487
08483                           
08483 A9 F8                     	LDA #$F8
08485 95 E1                     	STA byte_RAM_E1, X
08487                           
08487                           locret_BANK0_8487:
08487 60                        	RTS
08488                           
08488                           ; End of function sub_BANK0_8478
08488                           
08488                           ; =============== S U B R O U T I N E =======================================
08488                           
08488                           sub_BANK0_8488:
08488 A5 E3                     	LDA byte_RAM_E3
0848A 4A                        	LSR A
0848B A8                        	TAY
0848C B9 D9 00                  	LDA EnemyArray_D9, Y
0848F 4A                        	LSR A
08490 4A                        	LSR A
08491 99 D9 00                  	STA EnemyArray_D9, Y
08494 AD 1B 05                  	LDA byte_RAM_51B
08497 29 C0                     	AND #$C0
08499 19 D9 00                  	ORA EnemyArray_D9, Y
0849C 99 D9 00                  	STA EnemyArray_D9, Y
0849F C6 E3                     	DEC byte_RAM_E3
084A1 60                        	RTS
084A2                           
084A2                           ; End of function sub_BANK0_8488
084A2                           
084A2                           ; ---------------------------------------------------------------------------
084A2                           
084A2                           _code_04A2:
084A2 A2 07                     	LDX #$07
084A4 A9 00                     	LDA #$00
084A6                           
084A6                           loc_BANK0_84A6:
084A6 95 D9                     	STA EnemyArray_D9, X
084A8 CA                        	DEX
084A9 D0 FB                     	BNE loc_BANK0_84A6
084AB                           
084AB 60                        	RTS
084AC                           
084AC                           ; =============== S U B R O U T I N E =======================================
084AC                           
084AC                           sub_BANK0_84AC:
084AC A4 D7                     	LDY byte_RAM_D7
084AE B1 E9                     	LDA (byte_RAM_E9), Y
084B0 8D 1B 05                  	STA byte_RAM_51B
084B3 E6 D7                     	INC byte_RAM_D7
084B5 4C 88 84                  	JMP sub_BANK0_8488
084B8                           
084B8                           ; End of function sub_BANK0_84AC
084B8                           
084B8                           ; ---------------------------------------------------------------------------
084B8                           
084B8                           ; Unused space in the original ($84B8 - $84FF)
084B8                           unusedSpace $8500, $FF
084B8                           	IFDEF PRESERVE_UNUSED_SPACE
084B8                           		.pad $8500, $FF
084B8                           	ENDIF
084B8                           
084B8                           
084B8                           ;
084B8                           ; Initializes a horizontal area
084B8                           ;
084B8                           InitializeAreaHorizontal:
084B8 AD 02 05                  	LDA byte_RAM_502
084BB D0 57                     	BNE loc_BANK0_855C
084BD                           
084BD A9 00                     	LDA #VMirror
084BF 20 15 FE                  	JSR ChangeNametableMirroring
084C2                           
084C2 20 70 98                  	JSR sub_BANK0_946D
084C5                           
084C5 A9 00                     	LDA #$00
084C7 85 FC                     	STA PPUScrollYMirror
084C9 AD 33 05                  	LDA CurrentLevelEntryPage
084CC D0 04                     	BNE loc_BANK0_851A
084CE                           
084CE A9 09                     	LDA #$09
084D0 D0 03                     	BNE loc_BANK0_851D
084D2                           
084D2                           loc_BANK0_851A:
084D2 38                        	SEC
084D3 E9 01                     	SBC #$01
084D5                           
084D5                           loc_BANK0_851D:
084D5 09 D0                     	ORA #$D0
084D7 85 CF                     	STA byte_RAM_CF
084D9 38                        	SEC
084DA E9 20                     	SBC #$20
084DC 85 CE                     	STA byte_RAM_CE
084DE AD 33 05                  	LDA CurrentLevelEntryPage
084E1 18                        	CLC
084E2 69 01                     	ADC #$01
084E4 C9 0A                     	CMP #$0A
084E6 D0 02                     	BNE loc_BANK0_8532
084E8                           
084E8 A9 00                     	LDA #$00
084EA                           
084EA                           loc_BANK0_8532:
084EA 09 10                     	ORA #$10
084EC 85 D0                     	STA byte_RAM_D0
084EE AD 33 05                  	LDA CurrentLevelEntryPage
084F1 A0 01                     	LDY #$01
084F3 20 A6 86                  	JSR sub_BANK0_86EE
084F6                           
084F6 EE 02 05                  	INC byte_RAM_502
084F9 AD 33 05                  	LDA CurrentLevelEntryPage
084FC 8D BE 04                  	STA ScreenBoundaryLeftHi
084FF A9 01                     	LDA #$01
08501 8D 3A 05                  	STA byte_RAM_53A
08504 4A                        	LSR A
08505 85 06                     	STA byte_RAM_6
08507 A9 FF                     	LDA #$0FF
08509 8D 05 05                  	STA byte_RAM_505
0850C A9 0F                     	LDA #$0F
0850E 8D 07 05                  	STA byte_RAM_507
08511 20 22 85                  	JSR sub_BANK0_856A
08514                           
08514                           loc_BANK0_855C:
08514 20 62 87                  	JSR sub_BANK0_87AA
08517                           
08517 AD 3A 05                  	LDA byte_RAM_53A
0851A D0 05                     	BNE locret_BANK0_8569
0851C                           
0851C 8D 02 05                  	STA byte_RAM_502
0851F E6 13                     	INC BreakStartLevelLoop
08521                           
08521                           locret_BANK0_8569:
08521 60                        	RTS
08522                           
08522                           
08522                           ; =============== S U B R O U T I N E =======================================
08522                           
08522                           sub_BANK0_856A:
08522 AD 33 05                  	LDA CurrentLevelEntryPage
08525 D0 07                     	BNE loc_BANK0_8576
08527                           
08527 A5 BA                     	LDA byte_RAM_BA
08529 30 74                     	BMI loc_BANK0_85E7
0852B                           
0852B AD 33 05                  	LDA CurrentLevelEntryPage
0852E                           
0852E                           loc_BANK0_8576:
0852E CD 3F 05                  	CMP CurrentLevelPages
08531 D0 04                     	BNE loc_BANK0_857F
08533                           
08533 A5 BA                     	LDA byte_RAM_BA
08535 10 68                     	BPL loc_BANK0_85E7
08537                           
08537                           loc_BANK0_857F:
08537 A2 02                     	LDX #$02
08539 A5 BA                     	LDA byte_RAM_BA
0853B 10 06                     	BPL loc_BANK0_858B
0853D                           
0853D A9 FF                     	LDA #$0FF
0853F 85 0B                     	STA byte_RAM_B
08541 D0 04                     	BNE loc_BANK0_858F
08543                           
08543                           loc_BANK0_858B:
08543 A9 00                     	LDA #$00
08545 85 0B                     	STA byte_RAM_B
08547                           
08547                           loc_BANK0_858F:
08547 A5 BA                     	LDA byte_RAM_BA
08549 29 F0                     	AND #$F0
0854B 18                        	CLC
0854C 75 CE                     	ADC byte_RAM_CE, X
0854E 08                        	PHP
0854F 65 0B                     	ADC byte_RAM_B
08551 28                        	PLP
08552 85 0C                     	STA byte_RAM_C
08554 A5 0B                     	LDA byte_RAM_B
08556 D0 11                     	BNE loc_BANK0_85B1
08558                           
08558 90 20                     	BCC loc_BANK0_85C2
0855A                           
0855A B5 CE                     	LDA byte_RAM_CE, X
0855C 29 0F                     	AND #$0F
0855E C9 09                     	CMP #$09
08560 D0 18                     	BNE loc_BANK0_85C2
08562                           
08562 A5 0C                     	LDA byte_RAM_C
08564 29 F0                     	AND #$F0
08566 4C 7C 85                  	JMP loc_BANK0_85C4
08569                           
08569                           ; ---------------------------------------------------------------------------
08569                           
08569                           loc_BANK0_85B1:
08569 B0 0F                     	BCS loc_BANK0_85C2
0856B                           
0856B B5 CE                     	LDA byte_RAM_CE, X
0856D 29 0F                     	AND #$0F
0856F D0 09                     	BNE loc_BANK0_85C2
08571                           
08571 A5 0C                     	LDA byte_RAM_C
08573 29 F0                     	AND #$F0
08575 69 09                     	ADC #$09
08577 4C 7C 85                  	JMP loc_BANK0_85C4
0857A                           
0857A                           ; ---------------------------------------------------------------------------
0857A                           
0857A                           loc_BANK0_85C2:
0857A A5 0C                     	LDA byte_RAM_C
0857C                           
0857C                           loc_BANK0_85C4:
0857C 95 CE                     	STA byte_RAM_CE, X
0857E CA                        	DEX
0857F 10 C6                     	BPL loc_BANK0_858F
08581                           
08581 A5 BA                     	LDA byte_RAM_BA
08583 85 FD                     	STA PPUScrollXMirror
08585 8D C0 04                  	STA ScreenBoundaryLeftLo
08588 29 F0                     	AND #$F0
0858A 8D 36 05                  	STA CurrentLevelPageX
0858D A5 BA                     	LDA byte_RAM_BA
0858F 10 0E                     	BPL loc_BANK0_85E7
08591                           
08591 CE BE 04                  	DEC ScreenBoundaryLeftHi
08594 A5 C9                     	LDA byte_RAM_C9
08596 49 01                     	EOR #$01
08598 85 C9                     	STA byte_RAM_C9
0859A A9 01                     	LDA #$01
0859C 8D 07 05                  	STA byte_RAM_507
0859F                           
0859F                           loc_BANK0_85E7:
0859F A9 00                     	LDA #$00
085A1 85 BA                     	STA byte_RAM_BA
085A3 60                        	RTS
085A4                           
085A4                           ; End of function sub_BANK0_856A
085A4                           
085A4                           ; =============== S U B R O U T I N E =======================================
085A4                           
085A4                           sub_BANK0_85EC:
085A4 A9 00                     	LDA #$00
085A6 8D 1C 05                  	STA byte_RAM_51C
085A9 AD 38 05                  	LDA byte_RAM_538
085AC F0 36                     	BEQ loc_BANK0_862C
085AE                           
085AE AD 38 05                  	LDA byte_RAM_538
085B1 4A                        	LSR A
085B2 B0 1C                     	BCS loc_BANK0_8618
085B4                           
085B4 A2 02                     	LDX #$02
085B6 86 09                     	STX byte_RAM_9
085B8 A9 10                     	LDA #$10
085BA 85 01                     	STA byte_RAM_1
085BC CA                        	DEX
085BD AD 38 05                  	LDA byte_RAM_538
085C0 85 D8                     	STA NeedVerticalScroll
085C2 20 EB 88                  	JSR sub_BANK0_8901
085C5                           
085C5 A5 03                     	LDA byte_RAM_3
085C7 85 D0                     	STA byte_RAM_D0
085C9 A9 00                     	LDA #$00
085CB 8D 38 05                  	STA byte_RAM_538
085CE F0 14                     	BEQ loc_BANK0_862C
085D0                           
085D0                           loc_BANK0_8618:
085D0 A2 01                     	LDX #$01
085D2 86 09                     	STX byte_RAM_9
085D4 CA                        	DEX
085D5 86 01                     	STX byte_RAM_1
085D7 AD 38 05                  	LDA byte_RAM_538
085DA 85 D8                     	STA NeedVerticalScroll
085DC 20 EB 88                  	JSR sub_BANK0_8901
085DF                           
085DF A9 00                     	LDA #$00
085E1 8D 38 05                  	STA byte_RAM_538
085E4                           
085E4                           loc_BANK0_862C:
085E4 A5 BA                     	LDA byte_RAM_BA
085E6 D0 01                     	BNE loc_BANK0_8631
085E8                           
085E8 60                        	RTS
085E9                           
085E9                           ; ---------------------------------------------------------------------------
085E9                           
085E9                           loc_BANK0_8631:
085E9 A5 BA                     	LDA byte_RAM_BA
085EB 10 07                     	BPL loc_BANK0_863C
085ED                           
085ED A9 01                     	LDA #$01
085EF 85 D8                     	STA NeedVerticalScroll
085F1 4C 52 86                  	JMP loc_BANK0_869A
085F4                           
085F4                           ; ---------------------------------------------------------------------------
085F4                           
085F4                           loc_BANK0_863C:
085F4 A9 02                     	LDA #$02
085F6 85 D8                     	STA NeedVerticalScroll
085F8 A6 BA                     	LDX byte_RAM_BA
085FA                           
085FA                           loc_BANK0_8642:
085FA A5 FD                     	LDA PPUScrollXMirror
085FC D0 0B                     	BNE loc_BANK0_8651
085FE                           
085FE AD BE 04                  	LDA ScreenBoundaryLeftHi
08601 CD 3F 05                  	CMP CurrentLevelPages
08604 D0 03                     	BNE loc_BANK0_8651
08606                           
08606 4C A1 86                  	JMP loc_BANK0_86E9
08609                           
08609                           ; ---------------------------------------------------------------------------
08609                           
08609                           loc_BANK0_8651:
08609 A5 FD                     	LDA PPUScrollXMirror
0860B 18                        	CLC
0860C 69 01                     	ADC #$01
0860E 85 FD                     	STA PPUScrollXMirror
08610 8D C0 04                  	STA ScreenBoundaryLeftLo
08613 90 0C                     	BCC loc_BANK0_8669
08615                           
08615 EE BE 04                  	INC ScreenBoundaryLeftHi
08618 A5 C9                     	LDA byte_RAM_C9
0861A 49 01                     	EOR #$01
0861C 85 C9                     	STA byte_RAM_C9
0861E 0A                        	ASL A
0861F 85 C8                     	STA byte_RAM_C8
08621                           
08621                           loc_BANK0_8669:
08621 AD BE 04                  	LDA ScreenBoundaryLeftHi
08624 CD 3F 05                  	CMP CurrentLevelPages
08627 F0 14                     	BEQ loc_BANK0_8685
08629                           
08629 A5 FD                     	LDA PPUScrollXMirror
0862B 29 F0                     	AND #$F0
0862D CD 36 05                  	CMP CurrentLevelPageX
08630 F0 08                     	BEQ loc_BANK0_8682
08632                           
08632 8D 36 05                  	STA CurrentLevelPageX
08635 A9 01                     	LDA #$01
08637 8D 1C 05                  	STA byte_RAM_51C
0863A                           
0863A                           loc_BANK0_8682:
0863A CA                        	DEX
0863B D0 BD                     	BNE loc_BANK0_8642
0863D                           
0863D                           loc_BANK0_8685:
0863D AD 1C 05                  	LDA byte_RAM_51C
08640 F0 5F                     	BEQ loc_BANK0_86E9
08642                           
08642 A2 02                     	LDX #$02
08644                           
08644                           loc_BANK0_868C:
08644 20 B4 87                  	JSR loc_BANK0_87FC
08647                           
08647 CA                        	DEX
08648 D0 FA                     	BNE loc_BANK0_868C
0864A                           
0864A A2 02                     	LDX #$02
0864C 20 CA 87                  	JSR sub_BANK0_8812
0864F                           
0864F 4C 9E 86                  	JMP loc_BANK0_86E6
08652                           
08652                           ; ---------------------------------------------------------------------------
08652                           
08652                           loc_BANK0_869A:
08652 A6 BA                     	LDX byte_RAM_BA
08654                           
08654                           loc_BANK0_869C:
08654 A5 FD                     	LDA PPUScrollXMirror
08656 D0 08                     	BNE loc_BANK0_86A8
08658                           
08658 AD BE 04                  	LDA ScreenBoundaryLeftHi
0865B D0 03                     	BNE loc_BANK0_86A8
0865D                           
0865D 4C A1 86                  	JMP loc_BANK0_86E9
08660                           
08660                           ; ---------------------------------------------------------------------------
08660                           
08660                           loc_BANK0_86A8:
08660 A5 FD                     	LDA PPUScrollXMirror
08662 38                        	SEC
08663 E9 01                     	SBC #$01
08665 85 FD                     	STA PPUScrollXMirror
08667 8D C0 04                  	STA ScreenBoundaryLeftLo
0866A B0 0C                     	BCS loc_BANK0_86C0
0866C                           
0866C CE BE 04                  	DEC ScreenBoundaryLeftHi
0866F A5 C9                     	LDA byte_RAM_C9
08671 49 01                     	EOR #$01
08673 85 C9                     	STA byte_RAM_C9
08675 0A                        	ASL A
08676 85 C8                     	STA byte_RAM_C8
08678                           
08678                           loc_BANK0_86C0:
08678 A5 FD                     	LDA PPUScrollXMirror
0867A 29 F0                     	AND #$F0
0867C CD 36 05                  	CMP CurrentLevelPageX
0867F F0 08                     	BEQ loc_BANK0_86D1
08681                           
08681 8D 36 05                  	STA CurrentLevelPageX
08684 A9 01                     	LDA #$01
08686 8D 1C 05                  	STA byte_RAM_51C
08689                           
08689                           loc_BANK0_86D1:
08689 E8                        	INX
0868A D0 C8                     	BNE loc_BANK0_869C
0868C                           
0868C AD 1C 05                  	LDA byte_RAM_51C
0868F F0 10                     	BEQ loc_BANK0_86E9
08691                           
08691 A2 02                     	LDX #$02
08693                           
08693                           loc_BANK0_86DB:
08693 20 9E 87                  	JSR loc_BANK0_87E6
08696                           
08696 CA                        	DEX
08697 D0 FA                     	BNE loc_BANK0_86DB
08699                           
08699 A2 01                     	LDX #$01
0869B 20 CA 87                  	JSR sub_BANK0_8812
0869E                           
0869E                           loc_BANK0_86E6:
0869E 20 2A 88                  	JSR sub_BANK0_8872
086A1                           
086A1                           loc_BANK0_86E9:
086A1 A9 00                     	LDA #$00
086A3 85 D8                     	STA NeedVerticalScroll
086A5 60                        	RTS
086A6                           
086A6                           ; End of function sub_BANK0_85EC
086A6                           
086A6                           ; =============== S U B R O U T I N E =======================================
086A6                           
086A6                           sub_BANK0_86EE:
086A6 4A                        	LSR A
086A7 B0 0B                     	BCS loc_BANK0_86FC
086A9                           
086A9 A9 01                     	LDA #$01
086AB 85 C9                     	STA byte_RAM_C9
086AD 0A                        	ASL A
086AE 85 C8                     	STA byte_RAM_C8
086B0 A9 20                     	LDA #$20
086B2 D0 09                     	BNE loc_BANK0_8705
086B4                           
086B4                           loc_BANK0_86FC:
086B4 A9 00                     	LDA #$00
086B6 85 C9                     	STA byte_RAM_C9
086B8 85 C8                     	STA byte_RAM_C8
086BA B9 C1 86                  	LDA byte_BANK0_8709, Y
086BD                           
086BD                           loc_BANK0_8705:
086BD 8D 06 05                  	STA byte_RAM_506
086C0 60                        	RTS
086C1                           
086C1                           ; End of function sub_BANK0_86EE
086C1                           
086C1                           ; ---------------------------------------------------------------------------
086C1                           byte_BANK0_8709:
086C1 28                        	.db $28
086C2 24                        	.db $24
086C3                           ; The sub-area "page" is is the index in the DecodedLevelPageStart table.
086C3                           ; This is why there are 10 blank pages in the jar enemy data.
086C3                           SubAreaPage:
086C3 0A                        	.db $0A
086C4                           
086C4                           ; =============== S U B R O U T I N E =======================================
086C4                           
086C4                           sub_BANK0_870C:
086C4 A5 FD                     	LDA PPUScrollXMirror
086C6 8D 0A 05                  	STA PPUScrollXMirror_Backup
086C9 A5 C9                     	LDA byte_RAM_C9
086CB 8D 0C 05                  	STA byte_RAM_50C
086CE AD BE 04                  	LDA ScreenBoundaryLeftHi
086D1 8D 14 05                  	STA ScreenBoundaryLeftHi_Backup
086D4 EE 3D 05                  	INC byte_RAM_53D
086D7 AD C3 86                  	LDA SubAreaPage
086DA 8D 33 05                  	STA CurrentLevelEntryPage
086DD 20 A6 86                  	JSR sub_BANK0_86EE
086E0                           
086E0 A9 00                     	LDA #$00
086E2 85 FD                     	STA PPUScrollXMirror
086E4 8D C0 04                  	STA ScreenBoundaryLeftLo
086E7 AD C3 86                  	LDA SubAreaPage
086EA 8D BE 04                  	STA ScreenBoundaryLeftHi
086ED 20 70 98                  	JSR sub_BANK0_946D
086F0                           
086F0 AD C3 86                  	LDA SubAreaPage
086F3 85 CE                     	STA byte_RAM_CE
086F5 A9 E0                     	LDA #$E0
086F7 8D 06 05                  	STA byte_RAM_506
086FA AD C3 86                  	LDA SubAreaPage
086FD 18                        	CLC
086FE 69 F0                     	ADC #$F0
08700 8D 05 05                  	STA byte_RAM_505
08703 60                        	RTS
08704                           
08704                           ; End of function sub_BANK0_870C
08704                           
08704                           ; =============== S U B R O U T I N E =======================================
08704                           
08704                           sub_BANK0_874C:
08704 AD 0A 05                  	LDA PPUScrollXMirror_Backup
08707 85 FD                     	STA PPUScrollXMirror
08709 8D C0 04                  	STA ScreenBoundaryLeftLo
0870C AD 0C 05                  	LDA byte_RAM_50C
0870F 85 C9                     	STA byte_RAM_C9
08711 AD 14 05                  	LDA ScreenBoundaryLeftHi_Backup
08714 8D BE 04                  	STA ScreenBoundaryLeftHi
08717 AD 3D 05                  	LDA byte_RAM_53D
0871A D0 20                     	BNE locret_BANK0_8784
0871C                           
0871C EE 3E 05                  	INC byte_RAM_53E
0871F EE 3D 05                  	INC byte_RAM_53D
08722 E6 D5                     	INC byte_RAM_D5
08724 20 2B 98                  	JSR sub_BANK0_9428
08727                           
08727 A5 CF                     	LDA byte_RAM_CF
08729 85 CE                     	STA byte_RAM_CE
0872B A9 10                     	LDA #$10
0872D 85 01                     	STA byte_RAM_1
0872F A9 F0                     	LDA #$F0
08731 8D 06 05                  	STA byte_RAM_506
08734 8D 07 05                  	STA byte_RAM_507
08737 A5 D0                     	LDA byte_RAM_D0
08739 8D 05 05                  	STA byte_RAM_505
0873C                           
0873C                           locret_BANK0_8784:
0873C 60                        	RTS
0873D                           
0873D                           ; End of function sub_BANK0_874C
0873D                           
0873D                           ; =============== S U B R O U T I N E =======================================
0873D                           
0873D                           sub_BANK0_8785:
0873D A5 CF                     	LDA byte_RAM_CF
0873F 85 CE                     	STA byte_RAM_CE
08741 A9 10                     	LDA #$10
08743 85 01                     	STA byte_RAM_1
08745 A9 F0                     	LDA #$F0
08747 8D 06 05                  	STA byte_RAM_506
0874A 8D 07 05                  	STA byte_RAM_507
0874D A5 D0                     	LDA byte_RAM_D0
0874F 18                        	CLC
08750 69 10                     	ADC #$10
08752 69 00                     	ADC #$00
08754 C9 0A                     	CMP #$0A
08756 D0 02                     	BNE loc_BANK0_87A2
08758                           
08758 A9 00                     	LDA #$00
0875A                           
0875A                           loc_BANK0_87A2:
0875A 8D 05 05                  	STA byte_RAM_505
0875D A9 01                     	LDA #$01
0875F 85 06                     	STA byte_RAM_6
08761 60                        	RTS
08762                           
08762                           ; End of function sub_BANK0_8785
08762                           
08762                           ; =============== S U B R O U T I N E =======================================
08762                           
08762                           sub_BANK0_87AA:
08762 A2 00                     	LDX #$00
08764 8E 37 05                  	STX byte_RAM_537
08767 8E 1C 05                  	STX byte_RAM_51C
0876A 86 D8                     	STX NeedVerticalScroll
0876C 20 CA 87                  	JSR sub_BANK0_8812
0876F                           
0876F 20 2A 88                  	JSR sub_BANK0_8872
08772                           
08772 AD 06 05                  	LDA byte_RAM_506
08775 C5 D1                     	CMP byte_RAM_D1
08777 D0 19                     	BNE loc_BANK0_87DA
08779                           
08779 AD 07 05                  	LDA byte_RAM_507
0877C 18                        	CLC
0877D 69 01                     	ADC #$01
0877F C5 D2                     	CMP byte_RAM_D2
08781 D0 0F                     	BNE loc_BANK0_87DA
08783                           
08783                           loc_BANK0_87CB:
08783 A9 00                     	LDA #$00
08785 8D 3A 05                  	STA byte_RAM_53A
08788 8D 3D 05                  	STA byte_RAM_53D
0878B 8D 3E 05                  	STA byte_RAM_53E
0878E EE 37 05                  	INC byte_RAM_537
08791 60                        	RTS
08792                           
08792                           ; ---------------------------------------------------------------------------
08792                           
08792                           loc_BANK0_87DA:
08792 A5 CE                     	LDA byte_RAM_CE
08794 CD 05 05                  	CMP byte_RAM_505
08797 F0 EA                     	BEQ loc_BANK0_87CB
08799                           
08799 A2 00                     	LDX #$00
0879B 4C B4 87                  	JMP loc_BANK0_87FC
0879E                           
0879E                           ; ---------------------------------------------------------------------------
0879E                           
0879E                           loc_BANK0_87E6:
0879E B5 CE                     	LDA byte_RAM_CE, X
087A0 38                        	SEC
087A1 E9 10                     	SBC #$10
087A3 95 CE                     	STA byte_RAM_CE, X
087A5 B0 0C                     	BCS locret_BANK0_87FB
087A7                           
087A7 D6 CE                     	DEC byte_RAM_CE, X
087A9 B5 CE                     	LDA byte_RAM_CE, X
087AB C9 EF                     	CMP #$0EF
087AD D0 04                     	BNE locret_BANK0_87FB
087AF                           
087AF A9 F9                     	LDA #$F9
087B1 95 CE                     	STA byte_RAM_CE, X
087B3                           
087B3                           locret_BANK0_87FB:
087B3 60                        	RTS
087B4                           
087B4                           ; ---------------------------------------------------------------------------
087B4                           
087B4                           loc_BANK0_87FC:
087B4 B5 CE                     	LDA byte_RAM_CE, X
087B6 18                        	CLC
087B7 69 10                     	ADC #$10
087B9 95 CE                     	STA byte_RAM_CE, X
087BB 90 0C                     	BCC locret_BANK0_8811
087BD                           
087BD F6 CE                     	INC byte_RAM_CE, X
087BF B5 CE                     	LDA byte_RAM_CE, X
087C1 C9 0A                     	CMP #$0A
087C3 D0 04                     	BNE locret_BANK0_8811
087C5                           
087C5 A9 00                     	LDA #$00
087C7 95 CE                     	STA byte_RAM_CE, X
087C9                           
087C9                           locret_BANK0_8811:
087C9 60                        	RTS
087CA                           
087CA                           ; End of function sub_BANK0_87AA
087CA                           
087CA                           ; =============== S U B R O U T I N E =======================================
087CA                           
087CA                           sub_BANK0_8812:
087CA 84 0F                     	STY byte_RAM_F
087CC B5 CE                     	LDA byte_RAM_CE, X
087CE 29 0F                     	AND #$0F
087D0 A8                        	TAY
087D1 B9 E9 B0                  	LDA DecodedLevelPageStartLo_Bank1, Y
087D4 85 E9                     	STA byte_RAM_E9
087D6 B9 F4 B0                  	LDA DecodedLevelPageStartHi_Bank1, Y
087D9 85 EA                     	STA byte_RAM_EA
087DB B5 CE                     	LDA byte_RAM_CE, X
087DD 4A                        	LSR A
087DE 4A                        	LSR A
087DF 4A                        	LSR A
087E0 4A                        	LSR A
087E1 85 D7                     	STA byte_RAM_D7
087E3 0A                        	ASL A
087E4 85 D2                     	STA byte_RAM_D2
087E6 A0 20                     	LDY #$20
087E8 B5 CE                     	LDA byte_RAM_CE, X
087EA 4A                        	LSR A
087EB B0 02                     	BCS loc_BANK0_8837
087ED                           
087ED A0 24                     	LDY #$24
087EF                           
087EF                           loc_BANK0_8837:
087EF 84 D1                     	STY byte_RAM_D1
087F1 A4 0F                     	LDY byte_RAM_F
087F3 60                        	RTS
087F4                           
087F4                           ; End of function sub_BANK0_8812
087F4                           
087F4                           ; =============== S U B R O U T I N E =======================================
087F4                           
087F4                           sub_BANK0_883C:
087F4 86 08                     	STX byte_RAM_8
087F6 A6 09                     	LDX byte_RAM_9
087F8 A0 02                     	LDY #$02
087FA B5 CE                     	LDA byte_RAM_CE, X
087FC 85 03                     	STA byte_RAM_3
087FE 38                        	SEC
087FF E5 01                     	SBC byte_RAM_1
08801 95 CE                     	STA byte_RAM_CE, X
08803 20 CA 87                  	JSR sub_BANK0_8812
08806                           
08806 A9 07                     	LDA #$07
08808 85 E3                     	STA byte_RAM_E3
0880A A9 00                     	LDA #$00
0880C 85 D6                     	STA byte_RAM_D6
0880E                           
0880E                           loc_BANK0_8856:
0880E 20 0F 89                  	JSR sub_BANK0_8925
08811                           
08811 A5 E3                     	LDA byte_RAM_E3
08813 10 F9                     	BPL loc_BANK0_8856
08815                           
08815 A5 D2                     	LDA byte_RAM_D2
08817 29 1C                     	AND #$1C
08819 4A                        	LSR A
0881A 4A                        	LSR A
0881B 09 C0                     	ORA #$C0
0881D 8D BD 03                  	STA byte_RAM_3BD
08820 A5 D1                     	LDA byte_RAM_D1
08822 09 03                     	ORA #$03
08824 8D BC 03                  	STA byte_RAM_3BC
08827 A6 08                     	LDX byte_RAM_8
08829 60                        	RTS
0882A                           
0882A                           ; End of function sub_BANK0_883C
0882A                           
0882A                           ; =============== S U B R O U T I N E =======================================
0882A                           
0882A                           sub_BANK0_8872:
0882A A9 0F                     	LDA #$0F
0882C 85 E3                     	STA byte_RAM_E3
0882E A9 00                     	LDA #$00
08830 85 D6                     	STA byte_RAM_D6
08832 85 D5                     	STA byte_RAM_D5
08834 AA                        	TAX
08835                           
08835                           loc_BANK0_887D:
08835                           IFNDEF PLAYER_STUFF
08835                           	LDY byte_RAM_D7
08835                           	LDA (byte_RAM_E9), Y
08835                           ENDIF
08835                           IFDEF PLAYER_STUFF
08835 8A                            TXA
08836 48                            PHA
08837 A4 D7                     	LDY byte_RAM_D7
08839 B1 E9                     	LDA (byte_RAM_E9), Y
0883B C9 41                         CMP #BackgroundTile_SubspaceMushroom1
0883D F0 04                         BEQ +
0883F C9 42                         CMP #BackgroundTile_SubspaceMushroom2
08841 D0 23                         BNE +++
08843 A2 80                     +   LDX #CustomBitFlag_Secret
08845 20 45 F1                      JSR ChkFlagPlayer
08848 D0 1C                         BNE +++
0884A A4 D7                     	LDY byte_RAM_D7
0884C B1 E9                     	LDA (byte_RAM_E9), Y
0884E 38                            SEC
0884F E9 41                     	SBC #BackgroundTile_SubspaceMushroom1
08851 AA                            TAX
08852 20 1F F1                      JSR GetMushFlag_Bitmask
08855 20 4E F1                      JSR ChkFlagLevel
08858 F0 0C                         BEQ +++
0885A 68                            PLA
0885B AA                            TAX
0885C A9 40                         LDA #SoundEffect1_StopwatchTick
0885E 8D 02 06                      STA SoundEffectQueue1
08861 A9 54                     	LDA #BackgroundTile_LightTrail 
08863 4C 6C 88                      JMP +
08866 68                        +++ PLA
08867 AA                            TAX   
08868 A4 D7                         LDY byte_RAM_D7
0886A B1 E9                     	LDA (byte_RAM_E9), Y
0886C                           +
0886C                           ENDIF
0886C 8D 1B 05                  	STA byte_RAM_51B
0886F 29 C0                     	AND #$C0
08871 0A                        	ASL A
08872 2A                        	ROL A
08873 2A                        	ROL A
08874 A8                        	TAY
08875 B9 81 BA                  	LDA TileQuadPointersLo, Y
08878 85 00                     	STA byte_RAM_0
0887A B9 85 BA                  	LDA TileQuadPointersHi, Y
0887D 85 01                     	STA byte_RAM_1
0887F                           
0887F                           loc_BANK0_8894:
0887F                           IFNDEF PLAYER_STUFF
0887F                           	LDY byte_RAM_D7
0887F                           	LDA (byte_RAM_E9), Y
0887F                           ENDIF
0887F                           IFDEF PLAYER_STUFF
0887F AD 1B 05                      LDA byte_RAM_51B
08882                           ENDIF
08882 0A                        	ASL A
08883 0A                        	ASL A
08884 A8                        	TAY
08885 A5 D5                     	LDA byte_RAM_D5
08887 F0 01                     	BEQ loc_BANK0_88A0
08889                           
08889 C8                        	INY
0888A                           
0888A                           loc_BANK0_88A0:
0888A B1 00                     	LDA (byte_RAM_0), Y
0888C 9D 80 03                  	STA unk_RAM_380, X
0888F C8                        	INY
08890 B1 00                     	LDA (byte_RAM_0), Y
08892 9D 9E 03                  	STA unk_RAM_39E, X
08895 C8                        	INY
08896 B1 00                     	LDA (byte_RAM_0), Y
08898 9D 81 03                  	STA unk_RAM_381, X
0889B C8                        	INY
0889C B1 00                     	LDA (byte_RAM_0), Y
0889E 9D 9F 03                  	STA unk_RAM_39F, X
088A1 E6 D6                     	INC byte_RAM_D6
088A3 E8                        	INX
088A4 E8                        	INX
088A5 A5 D7                     	LDA byte_RAM_D7
088A7 18                        	CLC
088A8 69 10                     	ADC #$10
088AA 85 D7                     	STA byte_RAM_D7
088AC A5 D6                     	LDA byte_RAM_D6
088AE C9 0F                     	CMP #$0F
088B0 90 83                     	BCC loc_BANK0_887D
088B2                           
088B2 A9 00                     	LDA #$00
088B4 8D BC 03                  	STA byte_RAM_3BC
088B7 A5 D8                     	LDA NeedVerticalScroll
088B9 4A                        	LSR A
088BA B0 20                     	BCS loc_BANK0_88F2
088BC                           
088BC A5 D2                     	LDA byte_RAM_D2
088BE 29 02                     	AND #$02
088C0 F0 25                     	BEQ loc_BANK0_88FD
088C2                           
088C2 A5 D8                     	LDA NeedVerticalScroll
088C4 D0 1C                     	BNE loc_BANK0_88F8
088C6                           
088C6 A9 10                     	LDA #$10
088C8 85 01                     	STA byte_RAM_1
088CA A2 00                     	LDX #$00
088CC 86 09                     	STX byte_RAM_9
088CE E8                        	INX
088CF 20 EB 88                  	JSR sub_BANK0_8901
088D2                           
088D2 A5 03                     	LDA byte_RAM_3
088D4 85 CE                     	STA byte_RAM_CE
088D6 20 CA 87                  	JSR sub_BANK0_8812
088D9                           
088D9 4C E7 88                  	JMP loc_BANK0_88FD
088DC                           
088DC                           ; ---------------------------------------------------------------------------
088DC                           
088DC                           loc_BANK0_88F2:
088DC A5 D2                     	LDA byte_RAM_D2
088DE 29 02                     	AND #$02
088E0 D0 05                     	BNE loc_BANK0_88FD
088E2                           
088E2                           loc_BANK0_88F8:
088E2 A5 D8                     	LDA NeedVerticalScroll
088E4 8D 38 05                  	STA byte_RAM_538
088E7                           
088E7                           loc_BANK0_88FD:
088E7 EE 1C 05                  	INC byte_RAM_51C
088EA 60                        	RTS
088EB                           
088EB                           ; End of function sub_BANK0_8872
088EB                           
088EB                           ; =============== S U B R O U T I N E =======================================
088EB                           
088EB                           sub_BANK0_8901:
088EB 20 F4 87                  	JSR sub_BANK0_883C
088EE                           
088EE A2 07                     	LDX #$07
088F0 86 0E                     	STX byte_RAM_E
088F2 A0 00                     	LDY #$00
088F4                           
088F4                           loc_BANK0_890A:
088F4 A6 0E                     	LDX byte_RAM_E
088F6 B5 D9                     	LDA EnemyArray_D9, X
088F8 99 BE 03                  	STA unk_RAM_3BE, Y
088FB C8                        	INY
088FC CA                        	DEX
088FD CA                        	DEX
088FE CA                        	DEX
088FF CA                        	DEX
08900 B5 D9                     	LDA EnemyArray_D9, X
08902 99 BE 03                  	STA unk_RAM_3BE, Y
08905 C8                        	INY
08906 C6 0E                     	DEC byte_RAM_E
08908 A5 0E                     	LDA byte_RAM_E
0890A C9 03                     	CMP #03
0890C D0 E6                     	BNE loc_BANK0_890A
0890E                           
0890E 60                        	RTS
0890F                           
0890F                           ; End of function sub_BANK0_8901
0890F                           
0890F                           ; =============== S U B R O U T I N E =======================================
0890F                           
0890F                           sub_BANK0_8925:
0890F 84 0F                     	STY byte_RAM_F
08911 A9 01                     	LDA #01
08913 85 04                     	STA byte_RAM_4
08915 A4 D7                     	LDY byte_RAM_D7
08917 A6 E3                     	LDX byte_RAM_E3
08919                           
08919                           loc_BANK0_892F:
08919 B5 D9                     	LDA EnemyArray_D9, X
0891B 4A                        	LSR A
0891C 4A                        	LSR A
0891D 95 D9                     	STA EnemyArray_D9, X
0891F B1 E9                     	LDA (byte_RAM_E9), Y
08921 29 C0                     	AND #$C0
08923 15 D9                     	ORA EnemyArray_D9, X
08925 95 D9                     	STA EnemyArray_D9, X
08927 C8                        	INY
08928 B5 D9                     	LDA EnemyArray_D9, X
0892A 4A                        	LSR A
0892B 4A                        	LSR A
0892C 95 D9                     	STA EnemyArray_D9, X
0892E B1 E9                     	LDA (byte_RAM_E9), Y
08930 29 C0                     	AND #$C0
08932 15 D9                     	ORA EnemyArray_D9, X
08934 95 D9                     	STA EnemyArray_D9, X
08936 A5 D7                     	LDA byte_RAM_D7
08938 18                        	CLC
08939 69 10                     	ADC #$10
0893B A8                        	TAY
0893C 85 D7                     	STA byte_RAM_D7
0893E C6 04                     	DEC byte_RAM_4
08940 10 D7                     	BPL loc_BANK0_892F
08942                           
08942 C6 E3                     	DEC byte_RAM_E3
08944 A4 0F                     	LDY byte_RAM_F
08946 60                        	RTS
08947                           
08947                           ; End of function sub_BANK0_8925
08947                           
08947                           
08947                           SetObjectLocks:
08947 A2 07                     	LDX #$07
08949                           
08949                           SetObjectLocks_Loop:
08949 9D 1B 04                  	STA ObjectLock - 1, X
0894C CA                        	DEX
0894D 10 FA                     	BPL SetObjectLocks_Loop
0894F                           
0894F 60                        	RTS
08950                           
08950                           
08950                           
08950                           ; Unused space in the original ($8966 - $89FF)
08950                           unusedSpace $8A00, $FF
08950                           	IFDEF PRESERVE_UNUSED_SPACE
08950                           		.pad $8A00, $FF
08950                           	ENDIF
08950                           
08950                           
08950                           GrowShrinkSFXIndexes:
08950 08                        	.db SoundEffect2_Shrinking
08951 20                        	.db SoundEffect2_Growing
08952                           
08952                           
08952                           HandlePlayerState:
08952                           IFDEF CONTROLLER_2_DEBUG
08952                           	JSR CheckPlayer2Joypad
08952                           ENDIF
08952                           
08952 A5 50                     	LDA PlayerState ; Handles player states?
08954 C9 02                     	CMP #PlayerState_Lifting
08956 B0 27                     	BCS loc_BANK0_8A26 ; If the player is changing size, just handle that
08958                           
08958                           IFDEF FLAGSET
08958                           SkipSizeCheck:
08958 A4 8F                         LDY CurrentCharacter
0895A B9 C9 EE                      LDA DokiMode, Y
0895D 29 01                         AND #CustomCharFlag_Shrinking
0895F F0 1E                         BEQ loc_BANK0_8A26
08961                           ENDIF
08961                           
08961 A9 00                     	LDA #$00 ; Check if the player needs to change size
08963 A0 10                     	LDY #$10
08965 CC C2 04                  	CPY PlayerHealth
08968 2A                        	ROL A
08969 4D F6 06                  	EOR PlayerCurrentSize
0896C F0 11                     	BEQ loc_BANK0_8A26
0896E AC F6 06                  	LDY PlayerCurrentSize
08971 B9 50 89                  	LDA GrowShrinkSFXIndexes, Y
08974 8D 04 06                  	STA SoundEffectQueue2
08977 A9 1E                     	LDA #$1E
08979 85 82                     	STA PlayerStateTimer
0897B A9 08                     	LDA #PlayerState_ChangingSize
0897D 85 50                     	STA PlayerState
0897F                           
0897F                           
0897F                           loc_BANK0_8A26:
0897F A9 00                     	LDA #ObjAttrib_Palette0
08981 85 64                     	STA PlayerAttributes
08983 A5 50                     	LDA PlayerState
08985 20 A6 D9                  	JSR JumpToTableAfterJump ; Player state handling?
08988                           
08988 29 8A                     	.dw HandlePlayerState_Normal ; Normal
0898A E8 8A                     	.dw HandlePlayerState_Climbing ; Climbing
0898C 9E 8A                     	.dw HandlePlayerState_Lifting ; Lifting
0898E C4 8B                     	.dw HandlePlayerState_ClimbingAreaTransition ; Climbing area transition
08990 73 8B                     	.dw HandlePlayerState_GoingDownJar ; Going down jar
08992 AF 8B                     	.dw HandlePlayerState_ExitingJar ; Exiting jar
08994 0B 8C                     	.dw HandlePlayerState_HawkmouthEating ; Hawkmouth eating
08996 4A 8A                     	.dw HandlePlayerState_Dying ; Dying
08998 38 8C                     	.dw HandlePlayerState_ChangingSize ; Changing size
0899A                           IFDEF SCROLL_FIX
0899A 9C 89                     	.dw HandlePlayerState_Nothing ; Normal
0899C                           
0899C                           
0899C                           HandlePlayerState_Nothing:
0899C A5 82                         LDA PlayerStateTimer 
0899E D0 02                         BNE +
089A0 85 50                         STA PlayerState
089A2 8D 1B 04                  +   STA PlayerLock
089A5 A9 00                         LDA #$0
089A7 85 F7                     	STA Player1JoypadHeld
089A9 85 F5                     	STA Player1JoypadPress
089AB AD BD 04                      LDA DoorAnimationTimer
089AE D0 03                         BNE +
089B0 20 35 8A                      JSR HandlePlayer_NoInput
089B3                           +
089B3 60                            RTS
089B4                           
089B4                           PlayerState_Nothing = $9 
089B4                           ENDIF
089B4                           
089B4                           IFDEF PLAYER_STUFF
089B4                           ChangeSizeStart:
089B4 AD F6 06                      LDA PlayerCurrentSize
089B7 49 01                         EOR #$1
089B9 8D F6 06                      STA PlayerCurrentSize
089BC A9 08                     	LDA #PlayerState_ChangingSize
089BE 85 50                     	STA PlayerState
089C0 A9 1E                         LDA #$1E
089C2 85 82                         STA PlayerStateTimer
089C4 A0 01                         LDY #$1
089C6 B9 50 89                  	LDA GrowShrinkSFXIndexes, Y
089C9 8D 04 06                  	STA SoundEffectQueue2
089CC 60                            RTS
089CD                           HandlePlayer_ChangeChar: ; make this less dumb
089CD AD F1 EE                      LDA CharSelectAnytime 
089D0 F0 38                         BEQ +
089D2 A5 99                         LDA PlayerInAir
089D4 D0 34                         BNE +
089D6 A5 F7                     	LDA Player1JoypadHeld
089D8 29 20                     	AND #ControllerInput_Select
089DA F0 2E                         BEQ +
089DC A5 F5                     	LDA Player1JoypadPress
089DE 29 02                     	AND #ControllerInput_Left
089E0 F0 11                         BEQ ++
089E2 E6 8F                     -   INC CurrentCharacter
089E4 20 32 E7                      JSR ChkToNextValidCharacter
089E7 D0 F9                         BNE -
089E9 A5 8F                         LDA CurrentCharacter
089EB CD 04 04                      CMP PreviousCharacter
089EE F0 1A                         BEQ +
089F0 4C B4 89                      JMP ChangeSizeStart
089F3                           ++
089F3 A5 F5                     	LDA Player1JoypadPress
089F5 29 01                     	AND #ControllerInput_Right
089F7 F0 11                         BEQ +
089F9 C6 8F                     -   DEC CurrentCharacter
089FB 20 32 E7                      JSR ChkToNextValidCharacter
089FE D0 F9                         BNE -
08A00 A5 8F                         LDA CurrentCharacter
08A02 CD 04 04                      CMP PreviousCharacter
08A05 F0 03                         BEQ +
08A07 4C B4 89                      JMP ChangeSizeStart
08A0A                           +
08A0A A5 8F                         LDA CurrentCharacter
08A0C CD 04 04                      CMP PreviousCharacter
08A0F F0 0F                         BEQ ++
08A11 A5 82                         LDA PlayerStateTimer
08A13 D0 04                         BNE +
08A15 A9 08                         LDA #$8
08A17 85 82                         STA PlayerStateTimer
08A19                           +
08A19 C9 03                         CMP #$3
08A1B B0 03                         BCS ++
08A1D 20 50 EC                      JSR CustomCopyChar
08A20                           ++
08A20 AD F3 76                      LDA ProjectileTimer
08A23 F0 03                         BEQ +
08A25 CE F3 76                      DEC ProjectileTimer
08A28 60                        +   RTS
08A29                           ENDIF
08A29                           
08A29                           HandlePlayerState_Normal:
08A29                           IFDEF PLAYER_STUFF
08A29 20 CD 89                      JSR HandlePlayer_ChangeChar
08A2C 20 A4 E9                      JSR WarpWhistle_Function
08A2F                           ENDIF
08A2F 20 05 8E                  	JSR PlayerGravity
08A32                           
08A32                           	; player animation frame, crouch jump charging
08A32 20 7B 8C                  	JSR sub_BANK0_8C1A
08A35                           
08A35                           IFDEF PLAYER_STUFF
08A35                           HandlePlayer_NoInput:
08A35                           ENDIF
08A35                           
08A35                           	; maybe only y-collision?
08A35 20 DE 90                  	JSR PlayerTileCollision
08A38                           
08A38                           	; screen boundary x-collision
08A38 20 D9 96                  	JSR PlayerAreaBoundaryCollision
08A3B                           
08A3B 20 88 90                  	JSR ApplyPlayerPhysicsY
08A3E                           
08A3E                           
08A3E                           ;
08A3E                           ; Applies player physics on the x-axis
08A3E                           ;
08A3E                           ApplyPlayerPhysicsX:
08A3E A2 00                     	LDX #$00
08A40 20 8A 90                  	JSR ApplyPlayerPhysics
08A43                           
08A43 A5 EC                     	LDA IsHorizontalLevel
08A45 D0 02                     	BNE ApplyPlayerPhysicsX_Exit
08A47                           
08A47 85 14                     	STA PlayerXHi
08A49                           
08A49                           ApplyPlayerPhysicsX_Exit:
08A49 60                        	RTS
08A4A                           
08A4A                           
08A4A                           ;
08A4A                           ; What goes up must come down
08A4A                           ;
08A4A                           HandlePlayerState_Dying:
08A4A A5 82                     	LDA PlayerStateTimer
08A4C D0 4F                     	BNE locret_BANK0_8A86
08A4E                           
08A4E AD 2A 04                  	LDA PlayerScreenYHi
08A51 C9 02                     	CMP #02
08A53 F0 10                     	BEQ LoseALife
08A55                           
08A55 20 88 90                  	JSR ApplyPlayerPhysicsY
08A58                           
08A58 A5 46                     	LDA PlayerYVelocity
08A5A 30 04                     	BMI loc_BANK0_8A72
08A5C                           
08A5C C9 39                     	CMP #$39
08A5E B0 3D                     	BCS locret_BANK0_8A86
08A60                           
08A60                           loc_BANK0_8A72:
08A60 E6 46                     	INC PlayerYVelocity
08A62 E6 46                     	INC PlayerYVelocity
08A64 60                        	RTS
08A65                           
08A65                           ; ---------------------------------------------------------------------------
08A65                           
08A65                           LoseALife:
08A65 A9 02                     	LDA #02
08A67 85 C7                     	STA PlayerAnimationFrame
08A69 A0 01                     	LDY #$01 ; Set game mode to title card
08A6B                           IFDEF FLAGSET
08A6B EE E7 73                      INC Level_Count_LivesLost
08A6E                           ENDIF
08A6E CE ED 04                  	DEC ExtraLives
08A71                           IFDEF FLAGSET
08A71                           IFDEF PLAYER_STUFF
08A71 AE EE EE                      LDX IndependentLives
08A74 F0 1E                         BEQ +
08A76 A6 8F                         LDX CurrentCharacter
08A78 DE F8 73                      DEC PlayerIndependentLives, X
08A7B BD F8 73                      LDA PlayerIndependentLives, X
08A7E 8D ED 04                      STA ExtraLives
08A81 D0 14                         BNE ++
08A83 BD 5E E3                      LDA CharLookupTable, X
08A86 0D E0 7D                      ORA CharacterLock_Variable
08A89 8D E0 7D                      STA CharacterLock_Variable
08A8C C9 0F                         CMP #$F
08A8E D0 07                         BNE ++
08A90 C8                            INY
08A91 4C 9A 8A                      JMP SetGameModeAfterDeath
08A94 AD ED 04                  +   LDA ExtraLives  
08A97                           ++
08A97                           ENDIF
08A97                           ENDIF
08A97 D0 01                     	BNE SetGameModeAfterDeath
08A99                           
08A99 C8                        	INY ; If no lives, increase game mode
08A9A                           ; from 1 (title card) to 2 (game over)
08A9A                           
08A9A                           SetGameModeAfterDeath:
08A9A 8C EC 04                  	STY GameMode
08A9D                           
08A9D                           locret_BANK0_8A86:
08A9D 60                        	RTS
08A9E                           
08A9E                           ; ---------------------------------------------------------------------------
08A9E                           
08A9E                           HandlePlayerState_Lifting:
08A9E A5 82                     	LDA PlayerStateTimer
08AA0 D0 36                     	BNE locret_BANK0_8AC1
08AA2                           
08AA2 AE 2D 04                  	LDX ObjectBeingCarriedIndex
08AA5 B4 A8                     	LDY ObjectBeingCarriedTimer, X
08AA7 C0 02                     	CPY #$02
08AA9 90 27                     	BCC loc_BANK0_8ABB
08AAB                           
08AAB C0 07                     	CPY #$07
08AAD D0 05                     	BNE loc_BANK0_8A9D
08AAF                           
08AAF A9 08                     	LDA #DPCM_ItemPull
08AB1 8D 01 06                  	STA DPCMQueue
08AB4                           
08AB4                           loc_BANK0_8A9D:
08AB4 D6 A8                     	DEC ObjectBeingCarriedTimer, X
08AB6 B9 DD 8A                  	LDA PlayerLiftFrames, Y
08AB9 85 C7                     	STA PlayerAnimationFrame
08ABB B5 51                     	LDA EnemyState, X
08ABD C9 06                     	CMP #$06
08ABF F0 06                     	BEQ loc_BANK0_8AB0
08AC1                           
08AC1 B5 90                     	LDA ObjectType, X
08AC3 C9 32                     	CMP #Enemy_VegetableSmall
08AC5 D0 05                     	BNE loc_BANK0_8AB5
08AC7                           
08AC7                           loc_BANK0_8AB0:
08AC7 B9 D7 8A                  	LDA PlayerLiftTimer - 2, Y
08ACA 10 03                     	BPL loc_BANK0_8AB8
08ACC                           
08ACC                           loc_BANK0_8AB5:
08ACC B9 44 05                  	LDA PickupSpeedAnimation - 2, Y
08ACF                           
08ACF                           loc_BANK0_8AB8:
08ACF 85 82                     	STA PlayerStateTimer
08AD1 60                        	RTS
08AD2                           
08AD2                           ; ---------------------------------------------------------------------------
08AD2                           
08AD2                           loc_BANK0_8ABB:
08AD2 85 50                     	STA PlayerState
08AD4 E6 99                     	INC PlayerInAir
08AD6                           
08AD6                           loc_BANK0_8ABF:
08AD6 E6 9A                     	INC PlayerDucking
08AD8                           
08AD8                           locret_BANK0_8AC1:
08AD8 60                        	RTS
08AD9                           
08AD9                           
08AD9                           PlayerLiftTimer:
08AD9 00                        	.db $00
08ADA 01                        	.db $01
08ADB 01                        	.db $01
08ADC 01                        	.db $01
08ADD                           
08ADD                           PlayerLiftFrames:
08ADD 01                        	.db $01
08ADE 02                        	.db $02
08ADF 04                        	.db $04
08AE0 04                        	.db $04
08AE1 04                        	.db $04
08AE2 04                        	.db $04
08AE3 08                        	.db $08
08AE4 08                        	.db $08
08AE5                           
08AE5                           byte_BANK0_8ACE:
08AE5 00                        	.db $00
08AE6 10                        	.db $10
08AE7 F0                        	.db $F0
08AE8                           ; ---------------------------------------------------------------------------
08AE8                           
08AE8                           HandlePlayerState_Climbing:
08AE8 A5 F7                     	LDA Player1JoypadHeld
08AEA 29 0C                     	AND #ControllerInput_Down | ControllerInput_Up
08AEC 4A                        	LSR A
08AED 4A                        	LSR A
08AEE A8                        	TAY
08AEF C0 02                     	CPY #$02
08AF1 D0 03                     	BNE loc_BANK0_8ADF
08AF3                           
08AF3 20 46 8B                  	JSR PlayerClimbAnimation
08AF6                           
08AF6                           loc_BANK0_8ADF:
08AF6 B9 EF F4                  	LDA ClimbSpeed, Y
08AF9                           IFDEF PLAYER_STUFF
08AF9 98                            TYA
08AFA 48                            PHA
08AFB A2 04                         LDX #CustomBitFlag_PowerWalk
08AFD 20 45 F1                      JSR ChkFlagPlayer
08B00 D0 08                         BNE +
08B02 68                            PLA
08B03 A8                            TAY
08B04 B9 F3 F4                      LDA ClimbSpeedPowered, Y
08B07 4C 0F 8B                      JMP ++
08B0A 68                        +   PLA
08B0B A8                            TAY
08B0C B9 EF F4                  	LDA ClimbSpeed, Y
08B0F                           ++
08B0F                           ENDIF
08B0F 85 46                     	STA PlayerYVelocity
08B11 A5 F7                     	LDA Player1JoypadHeld
08B13 29 03                     	AND #ControllerInput_Right | ControllerInput_Left
08B15 A8                        	TAY
08B16 B9 E5 8A                  	LDA byte_BANK0_8ACE, Y
08B19 85 3C                     	STA PlayerXVelocity
08B1B A5 28                     	LDA PlayerXLo
08B1D 18                        	CLC
08B1E 69 04                     	ADC #$04
08B20 29 0F                     	AND #$0F
08B22 C9 08                     	CMP #$08
08B24 B0 1B                     	BCS loc_BANK0_8B14
08B26                           
08B26 AC 5E F2                  	LDY byte_BANKF_F00B
08B29 A5 46                     	LDA PlayerYVelocity
08B2B 30 01                     	BMI loc_BANK0_8B01
08B2D                           
08B2D C8                        	INY
08B2E                           
08B2E                           loc_BANK0_8B01:
08B2E A2 00                     	LDX #$00
08B30 20 62 8B                  	JSR PlayerTileCollision_CheckClimbable
08B33                           
08B33 B0 06                     	BCS loc_BANK0_8B0E
08B35                           
08B35                           loc_BANK0_8B08:
08B35 A5 46                     	LDA PlayerYVelocity
08B37 10 08                     	BPL loc_BANK0_8B14
08B39                           
08B39 86 46                     	STX PlayerYVelocity
08B3B                           
08B3B                           loc_BANK0_8B0E:
08B3B 20 3E 8A                  	JSR ApplyPlayerPhysicsX
08B3E                           
08B3E 4C 88 90                  	JMP ApplyPlayerPhysicsY
08B41                           
08B41                           ; ---------------------------------------------------------------------------
08B41                           
08B41                           loc_BANK0_8B14:
08B41 A9 00                     	LDA #$00
08B43 85 50                     	STA PlayerState
08B45 60                        	RTS
08B46                           
08B46                           
08B46                           ;
08B46                           ; Does climbing animation and sound
08B46                           ;
08B46                           PlayerClimbAnimation:
08B46 A5 10                     	LDA byte_RAM_10
08B48 29 07                     	AND #$07
08B4A D0 0B                     	BNE PlayerClimbAnimation_Exit
08B4C                           
08B4C A5 9D                     	LDA PlayerDirection
08B4E 49 01                     	EOR #$01
08B50 85 9D                     	STA PlayerDirection
08B52 A9 02                     	LDA #SoundEffect2_Climbing
08B54 8D 04 06                  	STA SoundEffectQueue2
08B57                           
08B57                           PlayerClimbAnimation_Exit:
08B57 60                        	RTS
08B58                           
08B58                           
08B58                           ClimbableTiles:
08B58 C2                        	.db BackgroundTile_Vine
08B59 D4                        	.db BackgroundTile_VineStandable
08B5A C3                        	.db BackgroundTile_VineBottom
08B5B C4                        	.db BackgroundTile_ClimbableSky
08B5C 07                        	.db BackgroundTile_Chain
08B5D 80                        	.db BackgroundTile_Ladder
08B5E 81                        	.db BackgroundTile_LadderShadow
08B5F 94                        	.db BackgroundTile_LadderStandable
08B60 95                        	.db BackgroundTile_LadderStandableShadow
08B61 17                        	.db BackgroundTile_ChainStandable
08B62                           
08B62                           
08B62                           ;
08B62                           ; Checks whether the player is on a climbable tile
08B62                           ;
08B62                           ; Input
08B62                           ;   byte_RAM_0 = tile ID
08B62                           ; Output
08B62                           ;   C = set if the player is on a climbable tile
08B62                           ;
08B62                           PlayerTileCollision_CheckClimbable:
08B62 20 12 96                  	JSR sub_BANK0_924F
08B65                           
08B65 A5 00                     	LDA byte_RAM_0
08B67 A0 09                     	LDY #$09
08B69                           
08B69                           PlayerTileCollision_CheckClimbable_Loop:
08B69 D9 58 8B                  	CMP ClimbableTiles, Y
08B6C F0 04                     	BEQ PlayerTileCollision_CheckClimbable_Exit
08B6E                           
08B6E 88                        	DEY
08B6F 10 F8                     	BPL PlayerTileCollision_CheckClimbable_Loop
08B71                           
08B71 18                        	CLC
08B72                           
08B72                           PlayerTileCollision_CheckClimbable_Exit:
08B72 60                        	RTS
08B73                           
08B73                           
08B73                           HandlePlayerState_GoingDownJar:
08B73 A9 20                     	LDA #ObjAttrib_BehindBackground
08B75 85 64                     	STA PlayerAttributes
08B77 E6 32                     	INC PlayerYLo
08B79 A5 32                     	LDA PlayerYLo
08B7B 29 0F                     	AND #$0F
08B7D D0 2F                     	BNE HandlePlayerState_GoingDownJar_Exit
08B7F                           
08B7F 85 50                     	STA PlayerState
08B81 20 66 FA                  	JSR DoAreaReset
08B84                           
08B84 68                        	PLA
08B85 68                        	PLA
08B86 20 11 98                  	JSR StashPlayerPosition_Bank0
08B89                           
08B89                           IFNDEF PLAYER_STUFF
08B89                           	LDA #TransitionType_Jar
08B89                           ENDIF
08B89                           IFDEF PLAYER_STUFF
08B89 A9 01                     	LDA #TransitionType_Door
08B8B                           ENDIF
08B8B 8D 34 05                  	STA TransitionType
08B8E AD EE 04                  	LDA InJarType
08B91 D0 06                     	BNE HandlePlayerState_GoingDownJar_NonWarp
08B93                           
08B93 A9 04                     	LDA #GameMode_Warp
08B95 8D EC 04                  	STA GameMode
08B98 60                        	RTS
08B99                           
08B99                           HandlePlayerState_GoingDownJar_NonWarp:
08B99 C9 01                     	CMP #$01
08B9B F0 09                     	BEQ HandlePlayerState_GoingDownJar_Regular
08B9D                           
08B9D 8D 27 06                  	STA DoAreaTransition
08BA0                           IFDEF PLAYER_STUFF
08BA0 A9 00                         LDA #0
08BA2 8D EE 04                      STA InJarType
08BA5                           ENDIF
08BA5 60                        	RTS
08BA6                           
08BA6                           HandlePlayerState_GoingDownJar_Regular:
08BA6 8D 28 06                  	STA InSubspaceOrJar
08BA9                           IFDEF PLAYER_STUFF
08BA9 A9 00                         LDA #0
08BAB 8D EE 04                      STA InJarType
08BAE                           ENDIF
08BAE                           
08BAE                           HandlePlayerState_GoingDownJar_Exit:
08BAE 60                        	RTS
08BAF                           
08BAF                           
08BAF                           HandlePlayerState_ExitingJar:
08BAF A9 20                     	LDA #ObjAttrib_BehindBackground
08BB1 85 64                     	STA PlayerAttributes
08BB3 C6 32                     	DEC PlayerYLo
08BB5 A5 32                     	LDA PlayerYLo
08BB7 29 0F                     	AND #$0F
08BB9 D0 02                     	BNE locret_BANK0_8B86
08BBB                           
08BBB 85 50                     	STA PlayerState
08BBD                           
08BBD                           locret_BANK0_8B86:
08BBD 60                        	RTS
08BBE                           
08BBE                           ; ---------------------------------------------------------------------------
08BBE                           byte_BANK0_8B87:
08BBE 00                        	.db $00
08BBF FF                        	.db $FF
08BC0                           
08BC0                           byte_BANK0_8B89:
08BC0 EE                        	.db $EE
08BC1 DE                        	.db $DE
08BC2                           
08BC2                           byte_BANK0_8B8B:
08BC2 09                        	.db $09
08BC3 A1                        	.db $A1
08BC4                           ; ---------------------------------------------------------------------------
08BC4                           
08BC4                           HandlePlayerState_ClimbingAreaTransition:
08BC4 A5 46                     	LDA PlayerYVelocity
08BC6 0A                        	ASL A
08BC7 2A                        	ROL A
08BC8 29 01                     	AND #$01
08BCA A8                        	TAY ;; get left most byte (negative)
08BCB AD 2A 04                  	LDA PlayerScreenYHi
08BCE D9 BE 8B                  	CMP byte_BANK0_8B87, Y
08BD1 D0 1D                     	BNE loc_BANK0_8BB0
08BD3                           
08BD3 AD 2B 04                  	LDA PlayerScreenYLo
08BD6 D9 C0 8B                  	CMP byte_BANK0_8B89, Y
08BD9 D0 15                     	BNE loc_BANK0_8BB0
08BDB                           
08BDB 20 66 FA                  	JSR DoAreaReset
08BDE                           
08BDE                           IFDEF PLAYER_STUFF
08BDE 20 7C E8                      JSR SetGameModeBonusChanceCustom
08BE1 AD EC 04                      LDA GameMode
08BE4 F0 01                         BEQ +
08BE6 60                            RTS
08BE7                           +
08BE7                           ENDIF
08BE7 EE 27 06                  	INC DoAreaTransition
08BEA A9 03                     	LDA #TransitionType_Vine
08BEC 8D 34 05                  	STA TransitionType
08BEF 60                        	RTS
08BF0                           
08BF0                           ; ---------------------------------------------------------------------------
08BF0                           
08BF0                           loc_BANK0_8BB0:
08BF0 AD 2A 04                  	LDA PlayerScreenYHi
08BF3 D0 08                     	BNE loc_BANK0_8BBD
08BF5                           
08BF5 AD 2B 04                  	LDA PlayerScreenYLo
08BF8 D9 C2 8B                  	CMP byte_BANK0_8B8B, Y
08BFB F0 09                     	BEQ loc_BANK0_8BC6
08BFD                           
08BFD                           loc_BANK0_8BBD:
08BFD 98                        	TYA
08BFE F0 03                     	BEQ loc_BANK0_8BC3
08C00                           
08C00 20 46 8B                  	JSR PlayerClimbAnimation
08C03                           
08C03                           loc_BANK0_8BC3:
08C03 4C 88 90                  	JMP ApplyPlayerPhysicsY
08C06                           
08C06                           ; ---------------------------------------------------------------------------
08C06                           
08C06                           loc_BANK0_8BC6:
08C06 A9 01                     	LDA #PlayerState_Climbing
08C08 85 50                     	STA PlayerState
08C0A 60                        	RTS
08C0B                           
08C0B                           ; ---------------------------------------------------------------------------
08C0B                           
08C0B                           HandlePlayerState_HawkmouthEating:
08C0B A5 82                     	LDA PlayerStateTimer
08C0D F0 21                     	BEQ loc_BANK0_8BE9
08C0F                           
08C0F 20 88 90                  	JSR ApplyPlayerPhysicsY
08C12                           
08C12                           	LDA_abs PlayerCollision
08C12                           	IFDEF COMPATIBILITY
08C12 AD                        		.db $ad
08C13 5A 00                     		.dw PlayerCollision
08C15                           	ELSE
08C15                           		LDA PlayerCollision
08C15                           		NOP_compat
08C15                           	ENDIF
08C15                           
08C15 F0 1B                     	BEQ locret_BANK0_8BEB
08C17                           
08C17 A9 20                     	LDA #ObjAttrib_BehindBackground
08C19 85 64                     	STA PlayerAttributes
08C1B                           IFNDEF RANDOMIZER_T
08C1B                           	LDA #$04
08C1B                           	STA PlayerXVelocity
08C1B                           	LDA #$01
08C1B                           	STA PlayerDirection
08C1B                           ENDIF
08C1B                           IFDEF RANDOMIZER_T
08C1B A5 3C                     	LDA PlayerXVelocity
08C1D 30 07                         BMI +
08C1F A9 04                         LDA #$4
08C21 85 3C                     	STA PlayerXVelocity
08C23 4C 2A 8C                      JMP ++
08C26 A9 FC                     +   LDA #$FC
08C28 85 3C                     	STA PlayerXVelocity
08C2A                           ++
08C2A                           ENDIF
08C2A                           
08C2A                           loc_BANK0_8BE3:
08C2A 20 3E 8A                  	JSR ApplyPlayerPhysicsX
08C2D                           
08C2D 4C DD 8E                  	JMP PlayerWalkJumpAnim
08C30                           
08C30                           ; ---------------------------------------------------------------------------
08C30                           
08C30                           loc_BANK0_8BE9:
08C30 85 50                     	STA PlayerState
08C32                           
08C32                           locret_BANK0_8BEB:
08C32 60                        	RTS
08C33                           
08C33                           
08C33                           ; Alternate between large and small graphics on these frames when changing size
08C33                           ChangingSizeKeyframes:
08C33 05                        	.db $05
08C34 0A                        	.db $0A
08C35 0F                        	.db $0F
08C36 14                        	.db $14
08C37 19                        	.db $19
08C38                           
08C38                           
08C38                           HandlePlayerState_ChangingSize:
08C38 A5 82                     	LDA PlayerStateTimer
08C3A F0 29                     	BEQ loc_BANK0_8C0D
08C3C                           
08C3C E6 85                     	INC DamageInvulnTime
08C3E                           
08C3E A0 04                     	LDY #$04
08C40                           HandlePlayerState_ChangingSize_Loop:
08C40 D9 33 8C                  	CMP ChangingSizeKeyframes, Y
08C43 D0 0B                     	BNE HandlePlayerState_ChangingSize_Next
08C45                           
08C45 AD F6 06                  	LDA PlayerCurrentSize
08C48 49 01                     	EOR #$01
08C4A 8D F6 06                  	STA PlayerCurrentSize
08C4D 4C 48 FD                  	JMP LoadCharacterCHRBanks
08C50                           
08C50                           HandlePlayerState_ChangingSize_Next:
08C50 88                        	DEY
08C51 10 ED                     	BPL HandlePlayerState_ChangingSize_Loop
08C53                           
08C53                           IFDEF PLAYER_STUFF
08C53 A4 8F                         LDY CurrentCharacter
08C55 B9 C9 EE                      LDA DokiMode, Y
08C58 29 01                         AND #CustomCharFlag_Shrinking
08C5A D0 08                         BNE +
08C5C A9 00                         LDA #$0
08C5E 8D F6 06                      STA PlayerCurrentSize
08C61 4C 48 FD                  	JMP LoadCharacterCHRBanks
08C64                           +
08C64                           ENDIF
08C64                           
08C64 60                        	RTS
08C65                           
08C65                           ; ---------------------------------------------------------------------------
08C65                           
08C65                           loc_BANK0_8C0D:
08C65 A4 C7                     	LDY PlayerAnimationFrame
08C67 C0 0A                     	CPY #$0A
08C69 D0 02                     	BNE loc_BANK0_8C15
08C6B                           
08C6B A9 01                     	LDA #PlayerState_Climbing
08C6D                           
08C6D                           loc_BANK0_8C15:
08C6D 85 50                     	STA PlayerState
08C6F                           IFDEF PLAYER_STUFF
08C6F 20 50 EC                      JSR CustomCopyChar
08C72                           ENDIF
08C72 60                        	RTS
08C73                           
08C73                           ; ---------------------------------------------------------------------------
08C73                           
08C73                           PlayerControlAcceleration:
08C73 FE                        	.db $FE
08C74 02                        	.db $02
08C75                           IFDEF PLAYER_STUFF
08C75 FE                        	.db $FE
08C76 02                        	.db $02
08C77 FE                        	.db $FE
08C78 02                        	.db $02
08C79 FE                        	.db $FE
08C7A 02                        	.db $02
08C7B                           ENDIF
08C7B                           
08C7B                           ; =============== S U B R O U T I N E =======================================
08C7B                           
08C7B                           ; player crouch subroutine
08C7B                           sub_BANK0_8C1A:
08C7B 20 DD 8E                  	JSR PlayerWalkJumpAnim
08C7E                           
08C7E                           IFDEF PLAYER_STUFF
08C7E A5 F5                     	LDA Player1JoypadPress
08C80 10 7A                         BPL +++ ; branch if not pressing A Button
08C82 A5 99                     	LDA PlayerInAir
08C84 C9 01                         CMP #1
08C86 90 74                         BCC +++
08C88 C9 02                         CMP #2
08C8A F0 2D                         BEQ + 
08C8C A2 10                         LDX #CustomBitFlag_AirHop
08C8E 20 3F F1                      JSR ChkFlagPlayer2
08C91 D0 26                         BNE +
08C93 A5 9C                         LDA HoldingItem
08C95 F0 22                         BEQ +
08C97 20 AA 8F                      JSR SkipToThrowCheck
08C9A A5 9C                         LDA HoldingItem
08C9C D0 1B                         BNE +
08C9E A9 00                         LDA #$0
08CA0 95 3D                     	STA ObjectXVelocity, X
08CA2 A9 20                         LDA #$20
08CA4 95 47                     	STA ObjectYVelocity, X
08CA6 E6 99                         INC PlayerInAir
08CA8 20 BB 8D                  	JSR PlayerStartJump
08CAB A9 01                     	LDA #SoundEffect2_Jump
08CAD 8D 04 06                  	STA SoundEffectQueue2
08CB0 A5 F5                     	LDA Player1JoypadPress
08CB2 49 80                         EOR #ControllerInput_A
08CB4 85 F5                         STA Player1JoypadPress
08CB6 4C FC 8C                      JMP +++
08CB9                           +
08CB9 A2 04                         LDX #CustomBitFlag_SpaceJump
08CBB 20 39 F1                      JSR ChkFlagPlayer3
08CBE D0 1D                         BNE +
08CC0 A5 46                         LDA PlayerYVelocity
08CC2 30 19                         BMI +
08CC4 A5 46                         LDA PlayerYVelocity
08CC6 C9 30                         CMP #$30
08CC8 B0 13                         BCS +
08CCA 20 BB 8D                  	JSR PlayerStartJump
08CCD E6 99                         INC PlayerInAir
08CCF A9 01                     	LDA #SoundEffect2_Jump
08CD1 8D 04 06                  	STA SoundEffectQueue2
08CD4 A5 F5                     	LDA Player1JoypadPress
08CD6 49 80                         EOR #ControllerInput_A
08CD8 85 F5                         STA Player1JoypadPress
08CDA 4C FC 8C                      JMP +++
08CDD                           +
08CDD A2 01                         LDX #CustomBitFlag_KirbyJump
08CDF 20 39 F1                      JSR ChkFlagPlayer3
08CE2 D0 18                         BNE +++
08CE4 20 BB 8D                  	JSR PlayerStartJump
08CE7 E6 99                         INC PlayerInAir
08CE9 A5 46                     	LDA PlayerYVelocity
08CEB 0A                            ASL
08CEC 66 46                         ROR PlayerYVelocity
08CEE A9 01                     	LDA #SoundEffect2_Jump
08CF0 8D 04 06                  	STA SoundEffectQueue2
08CF3 A5 F5                     	LDA Player1JoypadPress
08CF5 49 80                         EOR #ControllerInput_A
08CF7 85 F5                         STA Player1JoypadPress
08CF9 4C FC 8C                      JMP +++
08CFC                           +++
08CFC 20 A9 B3                      JSR Player_FloatJump
08CFF 20 C3 B3                      JSR Player_GroundPound
08D02 A5 99                     	LDA PlayerInAir
08D04                           ENDIF
08D04 D0 5F                     	BNE ResetPartialCrouchJumpTimer
08D06                           
08D06 A5 9A                     	LDA PlayerDucking
08D08 F0 09                     	BEQ loc_BANK0_8C2B
08D0A                           
08D0A                           IFNDEF PLAYER_STUFF
08D0A                           	LDA PlayerStateTimer
08D0A                           	BNE loc_BANK0_8C92
08D0A                           ENDIF
08D0A                           IFDEF PLAYER_STUFF
08D0A A5 82                     	LDA PlayerStateTimer
08D0C F0 03                         BEQ +
08D0E 4C B0 8D                  	JMP loc_BANK0_8C92
08D11                           +
08D11                           ENDIF
08D11                           
08D11 C6 9A                     	DEC PlayerDucking
08D13                           
08D13                           loc_BANK0_8C2B:
08D13 A5 F5                     	LDA Player1JoypadPress
08D15 10 25                     	BPL loc_BANK0_8C3D ; branch if not pressing A Button
08D17                           
08D17 E6 99                     	INC PlayerInAir
08D19 A9 06                     	LDA #SpriteAnimation_Jumping
08D1B 85 C7                     	STA PlayerAnimationFrame
08D1D                           IFDEF PLAYER_STUFF
08D1D A4 8F                         LDY CurrentCharacter
08D1F B9 FF EE                      LDA StartingProjectile, Y
08D22 C9 0B                         CMP #$0b
08D24 B0 04                         BCS ++
08D26 A5 9C                         LDA HoldingItem
08D28 F0 04                         BEQ +
08D2A A9 01                     ++  LDA #SpriteAnimation_WalkingCarrying
08D2C 85 C7                     	STA PlayerAnimationFrame
08D2E                           +
08D2E A5 F5                     	LDA Player1JoypadPress
08D30 49 80                         EOR #ControllerInput_A
08D32 85 F5                         STA Player1JoypadPress
08D34                           ENDIF
08D34 20 BB 8D                  	JSR PlayerStartJump
08D37                           
08D37 A9 01                     	LDA #SoundEffect2_Jump
08D39 8D 04 06                  	STA SoundEffectQueue2
08D3C                           
08D3C                           loc_BANK0_8C3D:
08D3C AD B2 04                  	LDA PlayerRidingCarpet
08D3F D0 6F                     	BNE loc_BANK0_8C92
08D41                           
08D41 AD DF 04                  	LDA QuicksandDepth
08D44 D0 1F                     	BNE ResetPartialCrouchJumpTimer
08D46                           
08D46 A5 F7                     	LDA Player1JoypadHeld ; skip if down button is not pressed
08D48 29 04                     	AND #ControllerInput_Down
08D4A F0 19                     	BEQ ResetPartialCrouchJumpTimer
08D4C                           
08D4C E6 9A                     	INC PlayerDucking ; set ducking state?
08D4E A9 04                     	LDA #SpriteAnimation_Ducking ; set ducking animation
08D50 85 C7                     	STA PlayerAnimationFrame
08D52 A5 99                     	LDA PlayerInAir ; skip ahead if player is in air
08D54 D0 0F                     	BNE ResetPartialCrouchJumpTimer
08D56                           
08D56 AD CA 04                  	LDA CrouchJumpTimer ; check if crouch jump is charged
08D59 C9 3C                     	CMP #$3C
08D5B B0 53                     	BCS loc_BANK0_8C92
08D5D                           
08D5D EE CA 04                  	INC CrouchJumpTimer ; increment crouch jump charge
08D60                           IFDEF PLAYER_STUFF
08D60 20 69 B3                      JSR Player_PowerCharge
08D63                           ENDIF
08D63 D0 4B                     	BNE loc_BANK0_8C92
08D65                           
08D65                           ResetPartialCrouchJumpTimer: ; reset crouch jump timer if it isn't full
08D65 AD CA 04                  	LDA CrouchJumpTimer
08D68 C9 3C                     	CMP #$3C ; max crouch jump timer
08D6A B0 05                     	BCS loc_BANK0_8C6F
08D6C                           
08D6C A9 00                     	LDA #$00 ; reset crouch jump timer to zero
08D6E 8D CA 04                  	STA CrouchJumpTimer
08D71                           
08D71                           loc_BANK0_8C6F:
08D71 A5 F7                     	LDA Player1JoypadHeld
08D73 29 03                     	AND #ControllerInput_Right | ControllerInput_Left
08D75 F0 39                     	BEQ loc_BANK0_8C92
08D77 29 01                     	AND #$01
08D79 85 9D                     	STA PlayerDirection
08D7B                           IFDEF PLAYER_STUFF
08D7B 6A                            ROR
08D7C A5 8F                         LDA CurrentCharacter
08D7E 2A                            ROL
08D7F                           ENDIF
08D7F A8                        	TAY
08D80 AD 24 06                  	LDA GroundSlipperiness
08D83 4A                        	LSR A
08D84 4A                        	LSR A
08D85 25 10                     	AND byte_RAM_10
08D87 D0 20                     	BNE ResetCrouchJumpTimer
08D89                           
08D89                           IFDEF PLAYER_STUFF
08D89 A5 99                         LDA PlayerInAir
08D8B 6A                            ROR
08D8C A5 8F                         LDA CurrentCharacter
08D8E 2A                            ROL
08D8F AA                            TAX
08D90 A5 10                         LDA byte_RAM_10
08D92 3D E1 EE                      AND AccelReduction, X
08D95 D0 08                         BNE +++
08D97                           ENDIF
08D97 A5 3C                     	LDA PlayerXVelocity
08D99 18                        	CLC
08D9A 79 73 8C                  	ADC PlayerControlAcceleration, Y
08D9D 85 3C                     	STA PlayerXVelocity
08D9F                           
08D9F                           IFDEF PLAYER_STUFF
08D9F                           +++
08D9F A2 04                         LDX #CustomBitFlag_PowerWalk
08DA1 20 45 F1                      JSR ChkFlagPlayer
08DA4 D0 03                         BNE +
08DA6 4C B7 8D                      JMP loc_BANK0_8C95
08DA9                           +
08DA9                           ENDIF
08DA9                           
08DA9                           ResetCrouchJumpTimer:
08DA9 A9 00                     	LDA #$00
08DAB 8D CA 04                  	STA CrouchJumpTimer
08DAE F0 07                     	BEQ loc_BANK0_8C95 ; unconditional branch?
08DB0                           
08DB0                           loc_BANK0_8C92:
08DB0                           IFDEF PLAYER_STUFF
08DB0 A5 F7                     	LDA Player1JoypadHeld
08DB2 29 03                     	AND #ControllerInput_Right | ControllerInput_Left
08DB4                           ENDIF
08DB4 20 67 8E                  	JSR sub_BANK0_8D2C
08DB7                           
08DB7                           loc_BANK0_8C95:
08DB7 20 31 8F                  	JSR sub_BANK0_8DC0
08DBA                           
08DBA 60                        	RTS
08DBB                           
08DBB                           ; End of function sub_BANK0_8C1A
08DBB                           
08DBB                           
08DBB                           ;
08DBB                           ; Starts a jump
08DBB                           ;
08DBB                           ; The jump height is based on a lookup table using the following bitfield:
08DBB                           ;
08DBB                           ; %xxxxxRCI
08DBB                           ;   R = whether the player is running
08DBB                           ;   C = whether the crouch timer is charged
08DBB                           ;   I = whether the player is holding an item
08DBB                           ;
08DBB                           PlayerStartJump:
08DBB AD DF 04                  	LDA QuicksandDepth
08DBE C9 02                     	CMP #$02
08DC0 90 07                     	BCC PlayerStartJump_LoadXVelocity
08DC2                           	; Quicksand
08DC2 AD 52 05                  	LDA JumpHeightQuicksand
08DC5 85 46                     	STA PlayerYVelocity
08DC7 D0 36                     	BNE PlayerStartJump_Exit
08DC9                           
08DC9                           PlayerStartJump_LoadXVelocity:
08DC9                           	; The x-velocity may affect the jump
08DC9 A5 3C                     	LDA PlayerXVelocity
08DCB 10 05                     	BPL PlayerStartJump_CheckXSpeed
08DCD                           
08DCD                           	; Absolute value of x-velocity
08DCD 49 FF                     	EOR #$0FF
08DCF 18                        	CLC
08DD0 69 01                     	ADC #$01
08DD2                           
08DD2                           PlayerStartJump_CheckXSpeed:
08DD2                           	; Set carry flag if the x-speed is fast enough
08DD2 C9 08                     	CMP #$08
08DD4                           	; Clear y subpixel
08DD4 A9 00                     	LDA #$00
08DD6 8D 11 04                  	STA PlayerYSubpixel
08DD9                           	; Set bit for x-speed using carry flag
08DD9 2A                        	ROL A
08DDA                           
08DDA                           	; Check crouch jump timer
08DDA                           IFDEF PLAYER_STUFF
08DDA 20 79 B3                      JSR Player_PowerWalkInvincibility
08DDD                           ENDIF
08DDD AC CA 04                  	LDY CrouchJumpTimer
08DE0 C0 3C                     	CPY #$3C
08DE2                           
08DE2 90 08                     	BCC PlayerStartJump_SetYVelocity
08DE4                           
08DE4                           	; Clear Player1JoypadHeld for a crouch jump
08DE4                           IFDEF JUMP_THROW_FIX
08DE4 A9 F0                         LDA #$F0 ;; thx smb2 improvement patch (spiderdave) 
08DE6 25 F7                         AND Player1JoypadHeld
08DE8 85 F7                         STA Player1JoypadHeld
08DEA A9 00                         LDA #$0
08DEC                           ENDIF
08DEC                           IFNDEF JUMP_THROW_FIX
08DEC                           	LDA #$00
08DEC                           	STA Player1JoypadHeld
08DEC                           ENDIF
08DEC                           
08DEC                           PlayerStartJump_SetYVelocity:
08DEC                           	; Set bit for charged jump using carry flag
08DEC 2A                        	ROL A
08DED                           	; Set bit for whether player is holding an item
08DED 0A                        	ASL A
08DEE 05 9C                     	ORA HoldingItem
08DF0 A8                        	TAY
08DF1 B9 4C 05                  	LDA JumpHeightStanding, Y
08DF4 85 46                     	STA PlayerYVelocity
08DF6                           IFDEF PLAYER_STUFF
08DF6 20 9B B3                      JSR Player_HiJump
08DF9                           ENDIF
08DF9                           
08DF9 AD 53 05                  	LDA JumpFloatLength
08DFC 8D C9 04                  	STA JumpFloatTimer
08DFF                           
08DFF                           PlayerStartJump_Exit:
08DFF A9 00                     	LDA #$00
08E01 8D CA 04                  	STA CrouchJumpTimer
08E04 60                        	RTS
08E05                           
08E05                           
08E05                           ; =============== S U B R O U T I N E =======================================
08E05                           
08E05                           ;
08E05                           ; Apply gravity to the player's y-velocity
08E05                           ;
08E05                           ; This also handles floating
08E05                           ;
08E05                           PlayerGravity:
08E05                           IFDEF PLAYER_STUFF
08E05 A2 01                         LDX #CustomBitFlag_AllTerrain
08E07 A9 00                         LDA #$0
08E09 20 3F F1                      JSR ChkFlagPlayer2
08E0C F0 0C                         BEQ loc_BANK0_8CE5
08E0E                           ENDIF
08E0E AD DF 04                  	LDA QuicksandDepth
08E11 C9 02                     	CMP #$02
08E13 90 05                     	BCC loc_BANK0_8CE5
08E15                           
08E15 AD 56 05                  	LDA GravityQuicksand
08E18 D0 2E                     	BNE loc_BANK0_8D13
08E1A                           
08E1A                           loc_BANK0_8CE5:
08E1A AD 54 05                  	LDA GravityWithoutJumpButton
08E1D A4 F7                     	LDY Player1JoypadHeld ; holding jump button to fight physics
08E1F 10 1F                     	BPL PlayerGravity_Falling
08E21                           
08E21 AD 55 05                  	LDA GravityWithJumpButton
08E24 A4 46                     	LDY PlayerYVelocity
08E26 C0 FC                     	CPY #$0FC
08E28 30 16                     	BMI PlayerGravity_Falling
08E2A                           
08E2A AC C9 04                  	LDY JumpFloatTimer
08E2D F0 11                     	BEQ PlayerGravity_Falling
08E2F                           
08E2F CE C9 04                  	DEC JumpFloatTimer
08E32 A5 10                     	LDA byte_RAM_10
08E34 4A                        	LSR A
08E35 4A                        	LSR A
08E36 4A                        	LSR A
08E37 29 03                     	AND #$03
08E39 A8                        	TAY
08E3A B9 5B 8E                  	LDA FloatingYVelocity, Y
08E3D 85 46                     	STA PlayerYVelocity
08E3F 60                        	RTS
08E40                           
08E40                           PlayerGravity_Falling:
08E40 A4 46                     	LDY PlayerYVelocity
08E42 30 04                     	BMI loc_BANK0_8D13
08E44                           
08E44 C0 39                     	CPY #$39
08E46 B0 05                     	BCS loc_BANK0_8D18
08E48                           
08E48                           loc_BANK0_8D13:
08E48 18                        	CLC
08E49 65 46                     	ADC PlayerYVelocity
08E4B 85 46                     	STA PlayerYVelocity
08E4D                           
08E4D                           loc_BANK0_8D18:
08E4D AD C9 04                  	LDA JumpFloatTimer
08E50 CD 53 05                  	CMP JumpFloatLength
08E53 F0 05                     	BEQ PlayerGravity_Exit
08E55                           
08E55 A9 00                     	LDA #$00
08E57 8D C9 04                  	STA JumpFloatTimer
08E5A                           
08E5A                           PlayerGravity_Exit:
08E5A 60                        	RTS
08E5B                           
08E5B                           
08E5B                           FloatingYVelocity:
08E5B FC                        	.db $FC
08E5C 00                        	.db $00
08E5D 04                        	.db $04
08E5E 00                        	.db $00
08E5F                           
08E5F                           PlayerXDeceleration:
08E5F FD                        	.db $FD
08E60 03                        	.db $03
08E61                           IFDEF PLAYER_STUFF
08E61 FD                        	.db $FD
08E62 03                        	.db $03
08E63 FD                        	.db $FD
08E64 03                        	.db $03
08E65 FD                        	.db $FD
08E66 03                        	.db $03
08E67                           ENDIF
08E67                           
08E67                           
08E67                           ; =============== S U B R O U T I N E =======================================
08E67                           
08E67                           sub_BANK0_8D2C:
08E67                           IFDEF PLAYER_STUFF
08E67 A6 8F                         LDX CurrentCharacter
08E69 BD C9 EE                      LDA DokiMode, X
08E6C 29 40                         AND #CustomCharFlag_AirControl
08E6E D0 0B                         BNE ++
08E70                           ENDIF
08E70 A5 99                     	LDA PlayerInAir
08E72 D0 5B                     	BNE locret_BANK0_8D61
08E74                           
08E74 A5 10                     	LDA byte_RAM_10
08E76 2D 24 06                  	AND GroundSlipperiness
08E79 D0 26                     	BNE loc_BANK0_8D4D
08E7B                           IFDEF PLAYER_STUFF
08E7B                           ++
08E7B A5 99                         LDA PlayerInAir
08E7D 6A                            ROR
08E7E A5 8F                         LDA CurrentCharacter
08E80 2A                            ROL
08E81 AA                            TAX
08E82 A5 10                         LDA byte_RAM_10
08E84 3D E1 EE                      AND AccelReduction, X
08E87 D0 18                         BNE loc_BANK0_8D4D
08E89                           ENDIF
08E89                           
08E89 A5 3C                     	LDA PlayerXVelocity
08E8B 29 80                     	AND #$80
08E8D 0A                        	ASL A
08E8E                           IFDEF PLAYER_STUFF
08E8E A5 8F                     	LDA CurrentCharacter
08E90                           ENDIF
08E90 2A                        	ROL A
08E91 A8                        	TAY
08E92 A5 3C                     	LDA PlayerXVelocity
08E94 79 5F 8E                  	ADC PlayerXDeceleration, Y
08E97 AA                        	TAX
08E98 59 73 8C                  	EOR PlayerControlAcceleration, Y
08E9B 30 02                     	BMI loc_BANK0_8D4B
08E9D                           
08E9D A2 00                     	LDX #$00
08E9F                           
08E9F                           loc_BANK0_8D4B:
08E9F 86 3C                     	STX PlayerXVelocity
08EA1                           
08EA1                           loc_BANK0_8D4D:
08EA1 A5 9A                     	LDA PlayerDucking
08EA3 D0 2A                     	BNE locret_BANK0_8D61
08EA5                           
08EA5 A5 C7                     	LDA PlayerAnimationFrame
08EA7 C9 09                     	CMP #SpriteAnimation_Throwing
08EA9 F0 24                     	BEQ locret_BANK0_8D61
08EAB                           
08EAB                           IFDEF PLAYER_STUFF
08EAB A5 99                     	LDA PlayerInAir
08EAD D0 20                     	BNE locret_BANK0_8D61
08EAF 05 3C                         ORA PlayerXVelocity
08EB1 05 9C                         ORA HoldingItem
08EB3 05 9A                         ORA PlayerDucking
08EB5 D0 0E                         BNE +
08EB7 A6 8F                         LDX CurrentCharacter
08EB9 BD CD EE                      LDA MoreCharacteristics, X
08EBC 29 01                         AND #CustomCharFlag_StandStill
08EBE F0 05                         BEQ +
08EC0 A9 0B                         LDA #SpriteAnimation_CustomFrame1
08EC2 85 C7                         STA PlayerAnimationFrame
08EC4 60                            RTS
08EC5                           +
08EC5                           ENDIF
08EC5                           
08EC5 A9 02                     	LDA #SpriteAnimation_Standing
08EC7 85 C7                     	STA PlayerAnimationFrame
08EC9 A9 00                     	LDA #$00
08ECB 85 84                     	STA PlayerWalkFrameCounter
08ECD                           
08ECD                           loc_BANK0_8D5F:
08ECD 85 9B                     	STA PlayerWalkFrame
08ECF                           
08ECF                           locret_BANK0_8D61:
08ECF 60                        	RTS
08ED0                           
08ED0                           ; End of function sub_BANK0_8D2C
08ED0                           
08ED0                           ; ---------------------------------------------------------------------------
08ED0                           
08ED0                           PlayerWalkFrameDurations:
08ED0 0C                        	.db $0C
08ED1 0A                        	.db $0A
08ED2 08                        	.db $08
08ED3 05                        	.db $05
08ED4 03                        	.db $03
08ED5 02                        	.db $02
08ED6 02                        	.db $02
08ED7 02                        	.db $02
08ED8 02                        	.db $02
08ED9 02                        	.db $02
08EDA                           
08EDA                           PlayerWalkFrames:
08EDA 02                        	.db SpriteAnimation_Standing ; $00
08EDB 00                        	.db SpriteAnimation_Walking ; $01
08EDC 09                        	.db SpriteAnimation_Throwing ; ; $02
08EDD                           
08EDD                           ; =============== S U B R O U T I N E =======================================
08EDD                           
08EDD                           ; jump animation subroutine
08EDD                           PlayerWalkJumpAnim:
08EDD A5 9A                     	LDA PlayerDucking ; exit if we're ducking, since the player will be ducking
08EDF D0 41                     	BNE ExitPlayerWalkJumpAnim
08EE1                           
08EE1                           	; if we're not in the air, skip ahead
08EE1 A5 99                     	LDA PlayerInAir
08EE3 F0 11                     	BEQ PlayerWalkAnim
08EE5                           
08EE5                           IFNDEF PLAYER_STUFF
08EE5                           	LDA CurrentCharacter ; does this character get to flutter jump?
08EE5                           	CMP #Character_Luigi
08EE5                           	BNE ExitPlayerWalkJumpAnim
08EE5                           ENDIF
08EE5                           IFDEF PLAYER_STUFF
08EE5 A6 8F                     	LDX CurrentCharacter ; does this character get to flutter jump?
08EE7 BD C9 EE                      LDA DokiMode, X
08EEA 29 04                         AND #CustomCharFlag_Fluttering
08EEC F0 34                     	BEQ ExitPlayerWalkJumpAnim
08EEE                           ENDIF
08EEE                           
08EEE A5 84                     	LDA PlayerWalkFrameCounter
08EF0 D0 29                     	BNE UpdatePlayerAnimationFrame ; maintain current frame
08EF2                           
08EF2 A9 02                     	LDA #$02 ; fast animation
08EF4 D0 1B                     	BNE NextPlayerWalkFrame
08EF6                           
08EF6                           PlayerWalkAnim:
08EF6 A5 84                     	LDA PlayerWalkFrameCounter
08EF8 D0 21                     	BNE UpdatePlayerAnimationFrame ; maintain current frame
08EFA                           
08EFA A9 05                     	LDA #$05
08EFC AC 24 06                  	LDY GroundSlipperiness
08EFF D0 10                     	BNE NextPlayerWalkFrame
08F01                           
08F01 A5 3C                     	LDA PlayerXVelocity
08F03 10 05                     	BPL PlayerWalkFrameDuration
08F05                           
08F05                           	; use absolute value of PlayerXVelocity
08F05 49 FF                     	EOR #$0FF
08F07 18                        	CLC
08F08 69 01                     	ADC #$01
08F0A                           
08F0A                           PlayerWalkFrameDuration:
08F0A 4A                        	LSR A
08F0B 4A                        	LSR A
08F0C 4A                        	LSR A
08F0D A8                        	TAY
08F0E B9 D0 8E                  	LDA PlayerWalkFrameDurations, Y
08F11                           
08F11                           NextPlayerWalkFrame:
08F11 85 84                     	STA PlayerWalkFrameCounter ; hold frame for duration specified in accumulator
08F13 C6 9B                     	DEC PlayerWalkFrame
08F15 10 04                     	BPL UpdatePlayerAnimationFrame
08F17                           
08F17 A9 01                     	LDA #$01 ; next walk frame
08F19 85 9B                     	STA PlayerWalkFrame
08F1B                           
08F1B                           UpdatePlayerAnimationFrame:
08F1B A4 9B                     	LDY PlayerWalkFrame
08F1D B9 DA 8E                  	LDA PlayerWalkFrames, Y
08F20 85 C7                     	STA PlayerAnimationFrame
08F22                           
08F22                           ExitPlayerWalkJumpAnim:
08F22 60                        	RTS
08F23                           
08F23                           
08F23                           ThrowXVelocity:
08F23 00                        	.db $00 ; standing, left (blocks)
08F24 00                        	.db $00 ; standing, right (blocks)
08F25 D0                        	.db $D0 ; moving, left (blocks)
08F26 30                        	.db $30 ; moving, right (blocks)
08F27 D0                        	.db $D0 ; standing, left (projectiles)
08F28 30                        	.db $30 ; standing, right (projectiles)
08F29 D0                        	.db $D0 ; moving, left (projectiles)
08F2A 30                        	.db $30 ; moving, right (projectiles)
08F2B                           
08F2B                           ThrowYVelocity:
08F2B 18                        	.db $18 ; standing (blocks)
08F2C 00                        	.db $00 ; moving (blocks)
08F2D 18                        	.db $18 ; standing (projectiles)
08F2E F8                        	.db $F8 ; moving (projectiles)
08F2F                           
08F2F                           ; used for objects that can be thrown next to the player
08F2F                           SoftThrowOffset:
08F2F F0                        	.db $F0
08F30 10                        	.db $10
08F31                           
08F31                           
08F31                           ; =============== S U B R O U T I N E =======================================
08F31                           
08F31                           sub_BANK0_8DC0:
08F31 A0 02                     	LDY #$02
08F33 AD DF 04                  	LDA QuicksandDepth
08F36 C9 02                     	CMP #$02
08F38 B0 17                     	BCS loc_BANK0_8DE0
08F3A                           
08F3A 88                        	DEY
08F3B A5 9C                     	LDA HoldingItem
08F3D F0 11                     	BEQ loc_BANK0_8DDF
08F3F                           
08F3F AE 2D 04                  	LDX ObjectBeingCarriedIndex
08F42 B5 90                     	LDA ObjectType, X
08F44 C9 32                     	CMP #Enemy_VegetableSmall
08F46 90 09                     	BCC loc_BANK0_8DE0
08F48                           
08F48 C9 39                     	CMP #Enemy_MushroomBlock
08F4A 90 04                     	BCC loc_BANK0_8DDF
08F4C                           
08F4C C9 3B                     	CMP #Enemy_FallingLogs
08F4E 90 01                     	BCC loc_BANK0_8DE0
08F50                           
08F50                           loc_BANK0_8DDF:
08F50 88                        	DEY
08F51                           
08F51                           loc_BANK0_8DE0:
08F51                           IFDEF FLAGSET
08F51 A6 8F                         LDX CurrentCharacter
08F53 BD C9 EE                      LDA DokiMode, X
08F56 29 02                         AND #CustomCharFlag_Running
08F58 D0 06                         BNE ++
08F5A B9 57 05                  	LDA RunSpeedRight, Y
08F5D 4C 6C 8F                      JMP loc_BANK0_8DEC
08F60                           ++
08F60                           ENDIF
08F60 B9 57 05                  	LDA RunSpeedRight, Y
08F63 24 F7                     	BIT Player1JoypadHeld
08F65 50 05                     	BVC loc_BANK0_8DEC
08F67                           
08F67 4A                        	LSR A
08F68 18                        	CLC
08F69 79 57 05                  	ADC RunSpeedRight, Y
08F6C                           
08F6C                           loc_BANK0_8DEC:
08F6C C5 3C                     	CMP PlayerXVelocity
08F6E 10 02                     	BPL loc_BANK0_8DF2
08F70 85 3C                         STA PlayerXVelocity
08F72                           loc_BANK0_8DF2:
08F72                           IFDEF FLAGSET
08F72 A6 8F                         LDX CurrentCharacter
08F74 BD C9 EE                      LDA DokiMode, X
08F77 29 02                         AND #CustomCharFlag_Running
08F79 D0 06                         BNE ++
08F7B B9 5A 05                  	LDA RunSpeedLeft, Y
08F7E 4C 8E 8F                      JMP loc_BANK0_8DFF
08F81                           ++
08F81                           ENDIF
08F81 B9 5A 05                  	LDA RunSpeedLeft, Y
08F84 24 F7                     	BIT Player1JoypadHeld
08F86 50 06                     	BVC loc_BANK0_8DFF
08F88 38                        	SEC
08F89 6A                        	ROR A
08F8A 18                        	CLC
08F8B 79 5A 05                  	ADC RunSpeedLeft, Y
08F8E                           
08F8E                           loc_BANK0_8DFF:
08F8E C5 3C                     	CMP PlayerXVelocity
08F90 30 02                     	BMI loc_BANK0_8E05
08F92 85 3C                     	STA PlayerXVelocity
08F94                           
08F94                           loc_BANK0_8E05:
08F94 24 F5                     	BIT Player1JoypadPress
08F96                           IFNDEF PLAYER_STUFF_STORE
08F96                           	BVC locret_BANK0_8E41
08F96                           ENDIF
08F96                           IFDEF PLAYER_STUFF_STORE
08F96 50 4A                     	BVC locret_BANK0_8E41
08F98 20 3C B6                      JSR StoreItem
08F9B A5 9C                         LDA HoldingItem
08F9D D0 0B                         BNE +
08F9F A5 99                         LDA PlayerInAir
08FA1 F0 07                         BEQ + 
08FA3 20 A0 B5                      JSR CreateFireballStart
08FA6 A5 9C                         LDA HoldingItem
08FA8 D0 38                         BNE locret_BANK0_8E41
08FAA                           +   
08FAA                           SkipToThrowCheck:
08FAA                           ENDIF
08FAA A5 9C                         LDA HoldingItem
08FAC F0 34                     	BEQ locret_BANK0_8E41 
08FAE A0 00                     	LDY #$00
08FB0 AE 2D 04                  	LDX ObjectBeingCarriedIndex
08FB3 B5 51                     	LDA EnemyState, X
08FB5 C9 06                     	CMP #EnemyState_Sand
08FB7 F0 29                     	BEQ locret_BANK0_8E41
08FB9                           
08FB9 B5 90                     	LDA ObjectType, X
08FBB C9 39                     	CMP #Enemy_MushroomBlock
08FBD 90 04                     	BCC loc_BANK0_8E22
08FBF                           
08FBF C9 3A                     	CMP #Enemy_POWBlock
08FC1 90 06                     	BCC loc_BANK0_8E28
08FC3                           
08FC3                           loc_BANK0_8E22:
08FC3 C9 37                     	CMP #Enemy_Bomb
08FC5 90 1C                     	BCC loc_BANK0_8E42
08FC7                           
08FC7 A0 02                     	LDY #$02
08FC9                           
08FC9                           loc_BANK0_8E28:
08FC9 84 07                     	STY byte_RAM_7
08FCB A5 9D                     	LDA PlayerDirection
08FCD 0A                        	ASL A
08FCE 05 9A                     	ORA PlayerDucking
08FD0 AA                        	TAX
08FD1 BC 59 F2                  	LDY byte_BANKF_F006, X
08FD4 A2 00                     	LDX #$00
08FD6 20 12 96                  	JSR sub_BANK0_924F
08FD9                           
08FD9 A5 00                     	LDA byte_RAM_0
08FDB A4 07                     	LDY byte_RAM_7
08FDD 20 17 93                  	JSR sub_BANK0_9053
08FE0                           
08FE0 90 01                     	BCC loc_BANK0_8E42
08FE2                           	; else carried item can't be thrown
08FE2                           
08FE2                           locret_BANK0_8E41:
08FE2                           
08FE2 60                        	RTS
08FE3                           
08FE3                           ; ---------------------------------------------------------------------------
08FE3                           
08FE3                           loc_BANK0_8E42:
08FE3 A9 09                     	LDA #SpriteAnimation_Throwing
08FE5 85 C7                     	STA PlayerAnimationFrame
08FE7 A9 02                     	LDA #$02
08FE9 85 9B                     	STA PlayerWalkFrame
08FEB A9 0A                     	LDA #$0A
08FED 85 84                     	STA PlayerWalkFrameCounter
08FEF C6 9C                     	DEC HoldingItem
08FF1 A9 08                     	LDA #SoundEffect1_ThrowItem
08FF3 8D 02 06                  	STA SoundEffectQueue1
08FF6 A9 00                     	LDA #$00
08FF8 85 9A                     	STA PlayerDucking
08FFA 85 F5                     	STA Player1JoypadPress
08FFC 85 01                     	STA byte_RAM_1
08FFE AE 2D 04                  	LDX ObjectBeingCarriedIndex
09001 A9 36                     	LDA #Enemy_Coin
09003 D5 90                     	CMP ObjectType, X
09005 26 01                     	ROL byte_RAM_1
09007 A5 3C                     	LDA PlayerXVelocity
09009 10 05                     	BPL loc_BANK0_8E6F
0900B                           
0900B 49 FF                     	EOR #$0FF
0900D 18                        	CLC
0900E 69 01                     	ADC #$01
09010                           
09010                           loc_BANK0_8E6F:
09010 C9 08                     	CMP #$08
09012 26 01                     	ROL byte_RAM_1
09014 D0 14                     	BNE loc_BANK0_8E89
09016                           
09016 A4 9D                     	LDY PlayerDirection
09018 B9 2F 8F                  	LDA SoftThrowOffset, Y
0901B 18                        	CLC
0901C 75 29                     	ADC ObjectXLo, X
0901E 95 29                     	STA ObjectXLo, X
09020 A5 EC                     	LDA IsHorizontalLevel
09022 F0 06                     	BEQ loc_BANK0_8E89
09024                           
09024 88                        	DEY
09025 98                        	TYA
09026 75 15                     	ADC ObjectXHi, X
09028                           
09028                           loc_BANK0_8E87:
09028 95 15                     	STA ObjectXHi, X
0902A                           
0902A                           loc_BANK0_8E89:
0902A A4 01                     	LDY byte_RAM_1
0902C B9 2B 8F                  	LDA ThrowYVelocity, Y
0902F 95 47                     	STA ObjectYVelocity, X
09031 A5 01                     	LDA byte_RAM_1
09033 0A                        	ASL A
09034 05 9D                     	ORA PlayerDirection
09036 A8                        	TAY
09037 B9 23 8F                      LDA ThrowXVelocity, Y
0903A                           IFDEF PLAYER_STUFF
0903A 8D 25 06                      STA PlayerIntermediateValue
0903D 8A                            TXA ;; preserve obj position
0903E 48                            PHA
0903F A2 01                         LDX #CustomBitFlag_PowerThrow
09041 A9 00                         LDA #$0
09043 20 45 F1                      JSR ChkFlagPlayer
09046 D0 22                         BNE +
09048 AD CA 04                  	LDA CrouchJumpTimer ; check if crouch jump is charged
0904B C9 3C                     	CMP #$3C
0904D 90 1B                     	BCC +
0904F A9 00                         LDA #0 ; success
09051 8D CA 04                      STA CrouchJumpTimer
09054 A9 80                     	LDA #SoundEffect1_HawkOpen_WartBarf
09056 8D 02 06                  	STA SoundEffectQueue1
09059 A5 9D                         LDA PlayerDirection
0905B F0 08                         BEQ ++
0905D A9 70                         LDA #$70
0905F 8D 25 06                      STA PlayerIntermediateValue
09062 4C 6A 90                      JMP +
09065 A9 90                     ++  LDA #$90
09067 8D 25 06                      STA PlayerIntermediateValue
0906A 68                        +   PLA ;; resume obj position
0906B AA                            TAX
0906C A5 01                     	LDA byte_RAM_1
0906E 0A                        	ASL A
0906F 05 9D                     	ORA PlayerDirection
09071 A8                        	TAY ;; pretty sure this accidentally sets something incorrectly to not reduce object speed
09072 A9 00                     	LDA #$0
09074 18                            CLC
09075 6D 25 06                      ADC PlayerIntermediateValue
09078 95 3D                     	STA ObjectXVelocity, X
0907A A9 00                         LDA #$0
0907C 8D 25 06                      STA PlayerIntermediateValue
0907F                           ENDIF
0907F                           IFNDEF PLAYER_STUFF
0907F                           	STA ObjectXVelocity, X
0907F                           ENDIF
0907F A9 01                     	LDA #$01
09081 9D 2F 04                  	STA EnemyArray_42F, X
09084 4A                        	LSR A
09085 95 A8                     	STA ObjectBeingCarriedTimer, X
09087 60                        	RTS
09088                           
09088                           
09088                           ;
09088                           ; Applies player physics on the y-axis
09088                           ;
09088                           ApplyPlayerPhysicsY:
09088 A2 0A                     	LDX #$0A
0908A                           
0908A                           ;
0908A                           ; Applies player physics, although could theoretically be used for objects too
0908A                           ;
0908A                           ; Input
0908A                           ;   X = direction ($00 for horizontal, $0A for vertical)
0908A                           ;
0908A                           ApplyPlayerPhysics:
0908A                           	; Add acceleration to velocity
0908A B5 3C                     	LDA PlayerXVelocity, X
0908C 18                        	CLC
0908D 7D CB 04                  	ADC PlayerXAcceleration, X
09090 08                        	PHP
09091 10 05                     	BPL loc_BANK0_8EB4
09093                           
09093 49 FF                     	EOR #$FF
09095 18                        	CLC
09096 69 01                     	ADC #$01
09098                           
09098                           loc_BANK0_8EB4:
09098 48                        	PHA
09099                           	; Upper nybble of velocity is for lo position
09099 4A                        	LSR A
0909A 4A                        	LSR A
0909B 4A                        	LSR A
0909C 4A                        	LSR A
0909D A8                        	TAY
0909E                           
0909E                           	; Lower nybble of velocity is for subpixel position
0909E 68                        	PLA
0909F 0A                        	ASL A
090A0 0A                        	ASL A
090A1 0A                        	ASL A
090A2 0A                        	ASL A
090A3 18                        	CLC
090A4                           
090A4 7D 07 04                  	ADC PlayerXSubpixel, X
090A7 9D 07 04                  	STA PlayerXSubpixel, X
090AA                           
090AA 98                        	TYA
090AB 69 00                     	ADC #$00
090AD 28                        	PLP
090AE 10 05                     	BPL loc_BANK0_8ED1
090B0                           
090B0 49 FF                     	EOR #$0FF
090B2 18                        	CLC
090B3 69 01                     	ADC #$01
090B5                           
090B5                           loc_BANK0_8ED1:
090B5 A0 00                     	LDY #$00
090B7 C9 00                     	CMP #$00
090B9 10 01                     	BPL loc_BANK0_8ED8
090BB                           
090BB 88                        	DEY
090BC                           
090BC                           loc_BANK0_8ED8:
090BC 18                        	CLC
090BD 75 28                     	ADC PlayerXLo, X
090BF 95 28                     	STA PlayerXLo, X
090C1 98                        	TYA
090C2 75 14                     	ADC PlayerXHi, X
090C4 95 14                     	STA PlayerXHi, X
090C6 A9 00                     	LDA #$00
090C8 9D CB 04                  	STA PlayerXAcceleration, X
090CB 60                        	RTS
090CC                           
090CC                           
090CC                           ;
090CC                           ; Jumpthrough collision results
090CC                           ;
090CC                           ; This table determines per direction whether a tile is solid (for jumpthrough
090CC                           ; blocks) or interactive (for spikes/ice/conveyors)
090CC                           ;
090CC                           ;   $01 = true
090CC                           ;   $02 = false
090CC                           ;
090CC                           JumpthroughTileCollisionTable:
090CC                           InteractiveTileCollisionTable:
090CC 02                        	.db $02 ; jumpthrough bottom (y-velocity < 0)
090CD 02                        	.db $02
090CE 01                        	.db $01 ; jumpthrough top (y-velocity > 0)
090CF 01                        	.db $01
090D0 02                        	.db $02 ; jumpthrough right (x-velocity < 0)
090D1 02                        	.db $02
090D2 02                        	.db $02 ; jumpthrough left (x-velocity > 0)
090D3 02                        	.db $02
090D4                           
090D4                           CollisionFlagTableThing:
090D4 08                        	.db CollisionFlags_Up
090D5 08                        	.db CollisionFlags_Up
090D6 04                        	.db CollisionFlags_Down
090D7 04                        	.db CollisionFlags_Down
090D8 02                        	.db CollisionFlags_Left
090D9 02                        	.db CollisionFlags_Left
090DA 01                        	.db CollisionFlags_Right
090DB 01                        	.db CollisionFlags_Right
090DC                           
090DC                           ConveyorSpeedTable:
090DC F0                        	.db $F0
090DD 10                        	.db $10
090DE                           
090DE                           
090DE                           ;
090DE                           ; Player Tile Collision
090DE                           ; =====================
090DE                           ;
090DE                           ; Handles player collision with background tiles
090DE                           ;
090DE                           PlayerTileCollision:
090DE                           	; Reset a bunch of collision flags
090DE A9 00                     	LDA #$00
090E0 85 5A                     	STA PlayerCollision
090E2 8D 24 06                  	STA GroundSlipperiness
090E5 85 07                     	STA byte_RAM_7
090E7 85 0A                     	STA byte_RAM_A ; conveyor
090E9 85 0E                     	STA byte_RAM_E ; spikes
090EB 85 0C                     	STA byte_RAM_C ; ice
090ED                           
090ED 20 A9 92                  	JSR PlayerTileCollision_CheckCherryAndClimbable
090F0                           
090F0                           	; Determine bounding box lookup index
090F0 A5 9A                     	LDA PlayerDucking
090F2 0A                        	ASL A
090F3 05 9C                     	ORA HoldingItem
090F5 AA                        	TAX
090F6                           
090F6                           	; Look up the bounding box for collision detection
090F6 BD 53 F2                  	LDA byte_BANKF_F000, X
090F9 85 08                     	STA byte_RAM_8
090FB                           
090FB                           	; Determine whether the player is going up
090FB A5 46                     	LDA PlayerYVelocity
090FD 18                        	CLC
090FE 6D D5 04                  	ADC PlayerYAcceleration
09101 10 0F                     	BPL PlayerTileCollision_Downward
09103                           
09103                           PlayerTileCollision_Upward:
09103 20 B6 91                  	JSR sub_BANK0_8FB2 ; use top two tiles
09106 20 A1 92                  	JSR sub_BANK0_8FF5 ; skip bottom two tiles
09109                           
09109 A5 5A                     	LDA PlayerCollision
0910B D0 6E                     	BNE PlayerTileCollision_CheckDamageTile
0910D                           IFNDEF PLAYER_STUFF
0910D                           	BEQ PlayerTileCollision_Horizontal
0910D                           ENDIF
0910D                           IFDEF PLAYER_STUFF
0910D D0 03                     	BNE +
0910F 4C 99 91                      JMP PlayerTileCollision_Horizontal
09112                           +
09112                           ENDIF
09112                           
09112                           PlayerTileCollision_Downward:
09112 20 A1 92                  	JSR sub_BANK0_8FF5
09115 20 B6 91                  	JSR sub_BANK0_8FB2
09118                           
09118 A5 5A                     	LDA PlayerCollision
0911A D0 28                     	BNE PlayerTileCollision_CheckInteractiveTiles
0911C                           
0911C A9 00                     	LDA #$00
0911E A2 01                     	LDX #$01
09120                           
09120                           	; Do the quicksand check in worlds 2 and 6
09120 AC 34 06                  	LDY CurrentWorldTileset
09123 C0 01                     	CPY #$01
09125 F0 04                     	BEQ PlayerTileCollision_Downward_CheckQuicksand
09127                           
09127 C0 05                     	CPY #$05
09129                           IFNDEF ALWAYS_ALLOW_QUICKSAND
09129                           	BNE PlayerTileCollision_Downward_AfterCheckQuicksand
09129                           ENDIF
09129                           IFDEF ALWAYS_ALLOW_QUICKSAND
09129 EA                        	NOP
0912A EA                        	NOP
0912B                           ENDIF
0912B                           
0912B                           PlayerTileCollision_Downward_CheckQuicksand:
0912B 20 0A B1                  	JSR PlayerTileCollision_CheckQuicksand
0912E                           
0912E                           PlayerTileCollision_Downward_AfterCheckQuicksand:
0912E 8D DF 04                  	STA QuicksandDepth
09131 86 99                     	STX PlayerInAir
09133                           IFDEF PLAYER_STUFF
09133 A2 01                         LDX #CustomBitFlag_AllTerrain
09135 A9 00                         LDA #$0
09137 20 3F F1                      JSR ChkFlagPlayer2
0913A D0 05                         BNE +
0913C A9 00                         LDA #$0
0913E 8D DF 04                      STA QuicksandDepth
09141                           +
09141                           ENDIF
09141 4C 99 91                  	JMP PlayerTileCollision_Horizontal
09144                           
09144                           PlayerTileCollision_CheckInteractiveTiles:
09144                           	; Reset quicksand depth
09144 A9 00                     	LDA #$00
09146 8D DF 04                  	STA QuicksandDepth
09149                           
09149 A5 32                     	LDA PlayerYLo
0914B 29 0C                     	AND #$0C
0914D D0 4A                     	BNE PlayerTileCollision_Horizontal
0914F                           
0914F 85 99                     	STA PlayerInAir
09151 A5 32                     	LDA PlayerYLo
09153 29 F0                     	AND #$F0
09155 85 32                     	STA PlayerYLo
09157                           
09157                           IFDEF PLAYER_STUFF
09157 A2 01                         LDX #CustomBitFlag_AllTerrain
09159 A9 00                         LDA #$0
0915B 20 3F F1                      JSR ChkFlagPlayer2
0915E D0 03                         BNE +
09160 4C 78 91                      JMP PlayerTileCollision_CheckJar
09163                           +
09163                           ENDIF
09163                           
09163                           PlayerTileCollision_CheckConveyorTile:
09163 46 0A                     	LSR byte_RAM_A
09165 90 08                     	BCC PlayerTileCollision_CheckSlipperyTile
09167                           
09167 A6 0A                     	LDX byte_RAM_A
09169 BD DC 90                  	LDA ConveyorSpeedTable, X
0916C 8D CB 04                  	STA PlayerXAcceleration
0916F                           
0916F                           PlayerTileCollision_CheckSlipperyTile:
0916F 46 0C                     	LSR byte_RAM_C
09171 90 05                     	BCC PlayerTileCollision_CheckJar
09173                           
09173 A9 0F                     	LDA #$0F
09175 8D 24 06                  	STA GroundSlipperiness
09178                           
09178                           PlayerTileCollision_CheckJar:
09178 20 63 94                  	JSR TileBehavior_CheckJar
0917B                           
0917B                           PlayerTileCollision_CheckDamageTile:
0917B                           IFDEF PLAYER_STUFF
0917B 20 08 B4                      JSR Player_GroundPoundHit
0917E                           ENDIF
0917E A9 00                     	LDA #$00
09180 85 46                     	STA PlayerYVelocity
09182 8D D5 04                  	STA PlayerYAcceleration
09185 AD E0 04                  	LDA StarInvincibilityTimer
09188 D0 0F                     	BNE PlayerTileCollision_Horizontal
0918A                           
0918A 46 0E                     	LSR byte_RAM_E ; spikes
0918C 90 0B                     	BCC PlayerTileCollision_Horizontal
0918E                           
0918E AD 28 04                  	LDA PlayerScreenX
09191 8D 29 04                  	STA SpriteTempScreenX
09194 66 12                     	ROR byte_RAM_12
09196 20 4D B1                  	JSR PlayerTileCollision_HurtPlayer
09199                           
09199                           PlayerTileCollision_Horizontal:
09199 A0 02                     	LDY #$02
0919B A5 3C                     	LDA PlayerXVelocity
0919D 18                        	CLC
0919E 6D CB 04                  	ADC PlayerXAcceleration
091A1 30 04                     	BMI loc_BANK0_8FA3
091A3                           
091A3 88                        	DEY
091A4 20 A1 92                  	JSR sub_BANK0_8FF5
091A7                           
091A7                           loc_BANK0_8FA3:
091A7 84 6E                     	STY PlayerMovementDirection
091A9 20 B6 91                  	JSR sub_BANK0_8FB2
091AC                           
091AC A5 5A                     	LDA PlayerCollision
091AE 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
091B0 F0 03                     	BEQ PlayerTileCollision_Exit
091B2                           
091B2 4C F6 96                  	JMP PlayerHorizontalCollision_Bank0
091B5                           
091B5                           PlayerTileCollision_Exit:
091B5 60                        	RTS
091B6                           
091B6                           
091B6                           ; =============== S U B R O U T I N E =======================================
091B6                           
091B6                           ;
091B6                           ; Check two tiles?
091B6                           ;
091B6                           ; Output
091B6                           ;   byte_RAM_7 += 2
091B6                           ;   byte_RAM_8 += 2
091B6                           ;
091B6                           sub_BANK0_8FB2:
091B6 20 B9 91                  	JSR loc_BANK0_8FB5
091B9                           
091B9                           loc_BANK0_8FB5:
091B9 A2 00                     	LDX #$00
091BB A4 08                     	LDY byte_RAM_8
091BD 20 12 96                  	JSR sub_BANK0_924F
091C0                           
091C0 A6 07                     	LDX byte_RAM_7
091C2 BC CC 90                  	LDY JumpthroughTileCollisionTable, X
091C5 A5 00                     	LDA byte_RAM_0
091C7 20 17 93                  	JSR sub_BANK0_9053
091CA                           
091CA                           IFNDEF HOT_SPOTS
091CA                           	BCC loc_BANK0_8FF2
091CA                           ENDIF
091CA                           
091CA                           IFDEF HOT_SPOTS
091CA B0 03                     	BCS + 
091CC 4C 9E 92                      JMP loc_BANK0_8FF2
091CF                           +
091CF C9 7F                     	CMP #BackgroundTile_LAD
091D1 D0 08                         BNE ++
091D3 20 4D B1                      JSR PlayerTileCollision_HurtPlayer
091D6 A6 07                     	LDX byte_RAM_7
091D8 4C 97 92                      JMP loc_BANK0_8FEB
091DB                           ++
091DB C9 AF                     	CMP #BackgroundTile_TreasureBlock
091DD F0 57                         BEQ +++
091DF C9 7E                     	CMP #BackgroundTile_TB_RED
091E1 F0 53                         BEQ +++
091E3 C9 7D                     +	CMP #BackgroundTile_LockBlock
091E5 D0 10                         BNE +
091E7 A5 9C                         LDA HoldingItem
091E9 F0 0C                         BEQ +
091EB AE 2D 04                      LDX ObjectBeingCarriedIndex
091EE B5 90                         LDA ObjectType, X
091F0 C9 3D                         CMP #Enemy_Key
091F2 D0 7C                         BNE ++
091F4 4C 36 92                      JMP +++
091F7                           +
091F7 A5 46                         LDA PlayerYVelocity
091F9 10 1E                         BPL +
091FB A5 5A                         LDA PlayerCollision
091FD C9 08                         CMP #CollisionFlags_Up
091FF D0 6F                         BNE ++
09201 A5 00                         LDA byte_RAM_0
09203 C9 69                     	CMP #BackgroundTile_MushroomBlock
09205 D0 12                         BNE +
09207 A5 9C                         LDA HoldingItem
09209 D0 0E                         BNE +
0920B 24 F7                     	BIT Player1JoypadHeld
0920D 50 0A                     	BVC +
0920F A9 00                         LDA #$0
09211 85 09                     	STA byte_RAM_9
09213 20 38 93                      JSR loc_BANK0_9074
09216 4C 9E 92                      JMP loc_BANK0_8FF2
09219                           +
09219 C9 6C                     	CMP #BackgroundTile_POWBlock
0921B D0 0D                         BNE +
0921D A9 20                     	LDA #$20
0921F 8D C4 04                  	STA POWQuakeTimer
09222 A9 04                     	LDA #SoundEffect3_Rumble_B
09224 8D 05 06                  	STA SoundEffectQueue3
09227 4C 36 92                      JMP +++
0922A                           +
0922A C9 AC                         CMP #BackgroundTile_BreakBlock1
0922C F0 08                         BEQ +++
0922E C9 AD                         CMP #BackgroundTile_BreakBlock2
09230 F0 04                         BEQ +++
09232 C9 7C                         CMP #BackgroundTile_PB1
09234 D0 3A                         BNE ++
09236                           +++ ;; fix player height issue (use bounding box?)
09236 A9 02                         LDA #$2
09238 8D F9 76                      STA HotSpotMidvar
0923B A9 40                         LDA #$40
0923D 8D FA 76                      STA HotSpotMidvar2
09240 A0 00                         LDY #$00
09242 84 09                     	STY byte_RAM_9
09244 20 42 93                      JSR CreateBushItem_NoReset
09247 A9 20                         LDA #SoundEffect1_EnemyHit
09249 8D 02 06                      STA SoundEffectQueue1
0924C E0 09                     	CPX #$09
0924E F0 20                         BEQ ++
09250 A5 05                     	LDA byte_RAM_5
09252 95 29                         STA ObjectXLo,X
09254 A5 06                     	LDA byte_RAM_6
09256 95 33                         STA ObjectYLo,X
09258 B5 90                         LDA ObjectType,X
0925A C9 39                         CMP #Enemy_MushroomBlock
0925C D0 0D                         BNE +
0925E A9 01                         LDA #$1
09260 9D 2F 04                      STA EnemyArray_42F, X
09263 A9 03                     	LDA #EnemyState_BlockFizzle
09265 95 51                     	STA EnemyState, X
09267 A9 18                     	LDA #$18
09269 95 86                     	STA EnemyTimer, X
0926B                           +
0926B A2 00                         LDX #0
0926D 4C 97 92                      JMP loc_BANK0_8FEB
09270 A5 00                     ++  LDA byte_RAM_0
09272 A6 07                     	LDX byte_RAM_7
09274                           ENDIF
09274                           
09274 C9 1A                     	CMP #BackgroundTile_Spikes
09276 D0 07                     	BNE loc_BANK0_8FD3
09278                           
09278                           	; Spikes behavior
09278 BD CC 90                  	LDA InteractiveTileCollisionTable, X
0927B 85 0E                     	STA byte_RAM_E ; spikes
0927D D0 18                     	BNE loc_BANK0_8FEB
0927F                           
0927F                           loc_BANK0_8FD3:
0927F C9 16                     	CMP #BackgroundTile_JumpThroughIce
09281 D0 07                     	BNE loc_BANK0_8FDE
09283                           
09283                           	; Ice behavior
09283 BD CC 90                  	LDA InteractiveTileCollisionTable, X
09286 85 0C                     	STA byte_RAM_C
09288 D0 0D                     	BNE loc_BANK0_8FEB
0928A                           
0928A                           loc_BANK0_8FDE:
0928A 38                        	SEC
0928B E9 67                     	SBC #BackgroundTile_ConveyorLeft
0928D C9 02                     	CMP #$02
0928F B0 06                     	BCS loc_BANK0_8FEB
09291                           
09291                           	; Conveyor behavior
09291 0A                        	ASL A
09292 1D CC 90                  	ORA InteractiveTileCollisionTable, X
09295 85 0A                     	STA byte_RAM_A
09297                           
09297                           loc_BANK0_8FEB:
09297 BD D4 90                  	LDA CollisionFlagTableThing, X
0929A 05 5A                     	ORA PlayerCollision
0929C 85 5A                     	STA PlayerCollision
0929E                           
0929E                           loc_BANK0_8FF2:
0929E 4C A4 92                  	JMP loc_BANK0_8FF8
092A1                           
092A1                           ; End of function sub_BANK0_8FB2
092A1                           
092A1                           ; =============== S U B R O U T I N E =======================================
092A1                           
092A1                           ;
092A1                           ; Skip two tiles?
092A1                           ;
092A1                           ; Output
092A1                           ;   byte_RAM_7 += 2
092A1                           ;   byte_RAM_8 += 2
092A1                           ;
092A1                           sub_BANK0_8FF5:
092A1 20 A4 92                  	JSR loc_BANK0_8FF8
092A4                           
092A4                           loc_BANK0_8FF8:
092A4 E6 07                     	INC byte_RAM_7
092A6 E6 08                     	INC byte_RAM_8
092A8 60                        	RTS
092A9                           
092A9                           
092A9                           PlayerTileCollision_CheckCherryAndClimbable:
092A9 AC 5D F2                  	LDY byte_BANKF_F00A
092AC                           
092AC                           	; byte_RAM_10 seems to be a global counter
092AC                           	; this code increments Y every other frame, but why?
092AC A5 10                     	LDA byte_RAM_10
092AE 4A                        	LSR A
092AF B0 01                     	BCS PlayerTileCollision_CheckCherryAndClimbable_AfterTick
092B1 C8                        	INY
092B2                           
092B2                           PlayerTileCollision_CheckCherryAndClimbable_AfterTick:
092B2 A2 00                     	LDX #$00
092B4 20 62 8B                  	JSR PlayerTileCollision_CheckClimbable
092B7                           
092B7 B0 26                     	BCS PlayerTileCollision_Climbable
092B9                           
092B9 A5 00                     	LDA byte_RAM_0
092BB C9 4E                     	CMP #BackgroundTile_Cherry
092BD D0 57                     	BNE PlayerTileCollision_Climbable_Exit
092BF                           
092BF EE 2A 06                  	INC CherryCount
092C2                           IFDEF FLAGSET
092C2 EE E9 73                      INC Level_Count_Cherries
092C5 EE E9 73                      INC Level_Count_Cherries
092C8                           ENDIF
092C8 AD 2A 06                  	LDA CherryCount
092CB E9 05                     	SBC #$05
092CD D0 06                     	BNE PlayerTileCollision_Cherry
092CF                           
092CF 8D 2A 06                  	STA CherryCount
092D2 20 46 B0                  	JSR CreateStarman
092D5                           
092D5                           PlayerTileCollision_Cherry:
092D5 A9 04                     	LDA #SoundEffect1_CherryGet
092D7 8D 02 06                  	STA SoundEffectQueue1
092DA A9 40                     	LDA #BackgroundTile_Sky
092DC 4C 7F 97                  	JMP loc_BANK0_937C
092DF                           
092DF                           PlayerTileCollision_Climbable:
092DF A5 F7                     	LDA Player1JoypadHeld
092E1 29 0C                     	AND #ControllerInput_Down | ControllerInput_Up
092E3 F0 31                     	BEQ PlayerTileCollision_Climbable_Exit
092E5                           
092E5                           IFNDEF PLAYER_STUFF_HOLD
092E5                           	LDY HoldingItem
092E5                           	BNE PlayerTileCollision_Climbable_Exit
092E5                           ENDIF
092E5                           IFDEF PLAYER_STUFF_HOLD
092E5 A4 9C                         LDY HoldingItem
092E7 F0 10                         BEQ +
092E9 AE 2D 04                      LDX ObjectBeingCarriedIndex
092EC B5 90                         LDA ObjectType, X
092EE C9 3D                         CMP #Enemy_Key
092F0 F0 07                         BEQ +
092F2 C9 3E                         CMP #Enemy_SubspacePotion
092F4 F0 03                         BEQ +
092F6 4C 16 93                  	JMP PlayerTileCollision_Climbable_Exit
092F9 A0 00                     +   LDY #$0
092FB                           ENDIF
092FB                           
092FB A5 28                     	LDA PlayerXLo
092FD 18                        	CLC
092FE 69 04                     	ADC #$04
09300 29 0F                     	AND #$0F
09302 C9 08                     	CMP #$08
09304 B0 10                     	BCS PlayerTileCollision_Climbable_Exit
09306                           
09306 A9 01                     	LDA #PlayerState_Climbing
09308 85 50                     	STA PlayerState
0930A 84 99                     	STY PlayerInAir
0930C 84 9A                     	STY PlayerDucking
0930E A9 0A                     	LDA #SpriteAnimation_Climbing
09310 85 C7                     	STA PlayerAnimationFrame
09312                           
09312                           	; Break JSR PlayerTileCollision_CheckCherryAndClimbable
09312 68                        	PLA
09313 68                        	PLA
09314                           	; Break JSR PlayerTileCollision
09314 68                        	PLA
09315 68                        	PLA
09316                           
09316                           PlayerTileCollision_Climbable_Exit:
09316 60                        	RTS
09317                           
09317                           
09317                           ;
09317                           ; Check whether a collision has occured
09317                           ;
09317                           ; Input
09317                           ;   A = tile ID ???
09317                           ;   Y = collision table offset
09317                           ; Output
09317                           ;   C = whether or not a collision occurred
09317                           ;
09317                           sub_BANK0_9053:
09317                           IFDEF PLAYER_STUFF_TILE_NEW
09317                               PHA
09317                               INY
09317                               LSR
09317                               LSR
09317                               TAX
09317                               PLA
09317                               AND NewSolidTable, X
09317                               CMP #$FF
09317                               RTS
09317                           
09317                           LookupAndTile:
09317                               %01
09317                               %0100
09317                               %010000
09317                               %01000000
09317                               %10
09317                               %1000
09317                               %100000
09317                               %10000000
09317                               %11
09317                               %1100
09317                               %110000
09317                               %11000000
09317                           ENDIF
09317                           
09317                           IFNDEF PLAYER_STUFF_TILE_NEW
09317 48                        	PHA
09318 29 C0                     	AND #$C0
0931A 0A                        	ASL A
0931B 2A                        	ROL A
0931C 2A                        	ROL A
0931D 79 26 93                  	ADC TileGroupTable, Y
09320 A8                        	TAY
09321 68                        	PLA
09322 D9 7C F9                  	CMP TileSolidnessTable, Y
09325 60                        	RTS
09326                           ENDIF
09326                           
09326                           ;
09326                           ; These map the two high bits of a tile to offets in TileSolidnessTable
09326                           ;
09326                           TileGroupTable:
09326 00                        	.db $00 ; solid to mushroom blocks
09327 04                        	.db $04 ; solid on top
09328 08                        	.db $08 ; solid on all sides
09329                           
09329                           
09329                           PickUpToEnemyTypeTable:
09329 39                        	.db Enemy_MushroomBlock ; $00
0932A 39                        	.db Enemy_MushroomBlock ; $01
0932B 39                        	.db Enemy_MushroomBlock ; $02
0932C 3A                        	.db Enemy_POWBlock ; $03
0932D 36                        	.db Enemy_Coin ; $04
0932E 33                        	.db Enemy_VegetableLarge ; $05
0932F 32                        	.db Enemy_VegetableSmall ; $06
09330 38                        	.db Enemy_Rocket ; $07
09331 35                        	.db Enemy_Shell ; $08
09332 37                        	.db Enemy_Bomb ; $09
09333 3E                        	.db Enemy_SubspacePotion ; $0A
09334 40                        	.db Enemy_Mushroom1up ; $0B
09335 3A                        	.db Enemy_POWBlock ; $0C
09336 09                        	.db Enemy_BobOmb ; $0D
09337 39                        	.db Enemy_MushroomBlock ; $0E ; this one seems to be overridden for digging in sand
09338                           
09338                           
09338                           ; find a slot for the item being lifted
09338                           
09338                           loc_BANK0_9074:
09338                           IFDEF HOT_SPOTS
09338 A9 00                         LDA #$00
0933A 8D F9 76                      STA HotSpotMidvar ;; use another variable name to share
0933D A9 40                         LDA #$40
0933F 8D FA 76                      STA HotSpotMidvar2 ;; use another variable name to share
09342                           CreateBushItem_NoReset:
09342                           ENDIF
09342 A2 06                     	LDX #$06
09344                           
09344                           loc_BANK0_9076:
09344 B5 51                     	LDA EnemyState, X
09346 F0 06                     	BEQ loc_BANK0_9080
09348                           
09348 E8                        	INX
09349 E0 09                     	CPX #$09
0934B 90 F7                     	BCC loc_BANK0_9076
0934D                           
0934D 60                        	RTS
0934E                           
0934E                           ; create the sprite for the item being picked up
0934E                           loc_BANK0_9080:
0934E A5 00                     	LDA byte_RAM_0
09350 95 79                     	STA EnemyVariable, X
09352 A5 03                     	LDA byte_RAM_3
09354 95 15                     	STA ObjectXHi, X
09356 A5 04                     	LDA byte_RAM_4
09358 95 1F                     	STA ObjectYHi, X
0935A A5 05                     	LDA byte_RAM_5
0935C 95 29                     	STA ObjectXLo, X
0935E A5 06                     	LDA byte_RAM_6
09360 95 33                     	STA ObjectYLo, X
09362 A9 00                     	LDA #$00
09364 9D 2F 04                  	STA EnemyArray_42F, X
09367 95 9F                     	STA ObjectAnimationTimer, X
09369 95 B1                     	STA EnemyArray_B1, X
0936B 20 D6 B0                  	JSR UnlinkEnemyFromRawData_Bank1
0936E                           
0936E A9 01                     	LDA #EnemyState_Alive
09370 A4 09                     	LDY byte_RAM_9
09372 C0 0E                     	CPY #$0E
09374 D0 06                     	BNE loc_BANK0_90AE
09376                           
09376 A9 20                     	LDA #$20
09378 95 86                     	STA EnemyTimer, X
0937A A9 06                     	LDA #EnemyState_Sand
0937C                           
0937C                           loc_BANK0_90AE:
0937C 95 51                     	STA EnemyState, X
0937E B9 29 93                  	LDA PickUpToEnemyTypeTable, Y ; What sprite is spawned for you when lifting a bg object
09381 95 90                     	STA ObjectType, X
09383                           
09383                           IFDEF HOT_SPOTS
09383                               ; lookup hotspot
09383 20 7B EE                      JSR HotSpotLookup
09386 C9 FF                         CMP #$FF
09388 F0 21                         BEQ +
0938A EE F9 76                      INC HotSpotMidvar
0938D 95 90                     	STA ObjectType, X
0938F C9 3F                         CMP #Enemy_Mushroom
09391 D0 10                         BNE ++
09393 B9 A1 76                      LDA Hot_Spots + 1, Y
09396 9D 20 76                      STA MushroomEffect, X
09399 A9 FF                         LDA #$FF
0939B 95 79                         STA EnemyVariable, X
0939D 8A                            TXA
0939E 85 12                         STA byte_RAM_12
093A0 4C AB 93                      JMP +
093A3                           ++
093A3 B9 A2 76                      LDA Hot_Spots + 2, Y
093A6 F0 03                         BEQ +
093A8 8D FA 76                      STA HotSpotMidvar2
093AB                               ;; do nothing for now
093AB                           +
093AB B5 90                         LDA ObjectType, X
093AD                           ENDIF
093AD                           
093AD A0 FF                     	LDY #$0FF ; regular bomb fuse
093AF C9 37                     	CMP #Enemy_Bomb
093B1 F0 06                     	BEQ loc_BANK0_90C1
093B3                           
093B3 C9 09                     	CMP #Enemy_BobOmb
093B5 D0 06                     	BNE loc_BANK0_90C5
093B7                           
093B7 A0 50                     	LDY #$50 ; BobOmb fuse
093B9                           
093B9                           loc_BANK0_90C1:
093B9 94 86                     	STY EnemyTimer, X
093BB D0 39                     	BNE loc_BANK0_90EA
093BD                           
093BD                           loc_BANK0_90C5:
093BD C9 40                     	CMP #Enemy_Mushroom1up
093BF D0 20                     	BNE loc_BANK0_90D5
093C1                           
093C1                           IFDEF FLAGSET
093C1 8A                            TXA
093C2 48                            PHA
093C3 A2 08                         LDX #CustomBitFlag_1up 
093C5 20 83 F1                      JSR ApplyFlagLevel
093C8 F0 06                         BEQ +
093CA EE E3 73                      INC Level_Count_1ups
093CD CE 20 06                      DEC Mushroom1upPulled
093D0 EE 20 06                  +   INC Mushroom1upPulled 
093D3 68                            PLA
093D4 AA                            TAX
093D5                           ENDIF
093D5 AD 20 06                  	LDA Mushroom1upPulled
093D8 F0 1C                     	BEQ loc_BANK0_90EA
093DA                           
093DA A9 32                     	LDA #Enemy_VegetableSmall
093DC 95 90                     	STA ObjectType, X
093DE                           
093DE 4C F6 93                  	JMP loc_BANK0_90EA
093E1                           
093E1                           loc_BANK0_90D5:
093E1 C9 33                     	CMP #Enemy_VegetableLarge
093E3 D0 11                     	BNE loc_BANK0_90EA
093E5                           
093E5 AC 2C 06                  	LDY BigVeggiesPulled
093E8 C8                        	INY
093E9 C0 05                     	CPY #$05
093EB 90 06                     	BCC loc_BANK0_90E7
093ED                           
093ED A9 46                     	LDA #Enemy_Stopwatch
093EF 95 90                     	STA ObjectType, X
093F1 A0 00                     	LDY #$00
093F3                           
093F3                           loc_BANK0_90E7:
093F3 8C 2C 06                  	STY BigVeggiesPulled
093F6                           
093F6                           loc_BANK0_90EA:
093F6 20 79 B0                  	JSR loc_BANK1_B9EB
093F9                           
093F9 A9 04                     	LDA #CollisionFlags_Down
093FB 95 5B                     	STA EnemyCollision, X
093FD                           IFNDEF HOT_SPOTS
093FD                           	LDA #BackgroundTile_Sky
093FD                           	JSR ReplaceTile_Bank0
093FD                           ENDIF
093FD                           
093FD                           IFDEF HOT_SPOTS
093FD AD FA 76                  	LDA HotSpotMidvar2
09400 C9 FF                         CMP #$FF
09402 D0 02                         BNE +
09404 A9 40                         LDA #$40
09406 20 52 97                  +   JSR ReplaceTile_Bank0
09409 AD F9 76                      LDA HotSpotMidvar
0940C C9 02                         CMP #$2
0940E B0 1C                         BCS +
09410                           ENDIF
09410 A9 07                     	LDA #$07
09412 95 A8                     	STA ObjectBeingCarriedTimer, X
09414 8E 2D 04                  	STX ObjectBeingCarriedIndex
09417 A9 02                     	LDA #PlayerState_Lifting
09419 85 50                     	STA PlayerState
0941B A9 06                     	LDA #$06
0941D 85 82                     	STA PlayerStateTimer
0941F A9 08                     	LDA #SpriteAnimation_Pulling
09421 85 C7                     	STA PlayerAnimationFrame
09423                           
09423 E6 9C                     	INC HoldingItem
09425                           IFDEF HOT_SPOTS
09425 AD F9 76                      LDA HotSpotMidvar
09428 F0 38                         BEQ +++
0942A C6 9C                         DEC HoldingItem
0942C                           +
0942C A9 00                         LDA #$0
0942E 95 A8                     	STA ObjectBeingCarriedTimer, X
09430 B5 90                         LDA ObjectType, X 
09432 C9 45                         CMP #Enemy_Starman
09434 F0 16                         BEQ +
09436 C9 37                     	CMP #Enemy_Bomb
09438 F0 12                         BEQ +
0943A C9 13                         CMP #$13
0943C 90 0E                         BCC +
0943E 8A                            TXA
0943F 48                            PHA
09440 20 20 DF                      JSR EnemyInit1toF
09443 68                            PLA
09444 AA                            TAX
09445 A9 00                         LDA #$0
09447 95 3D                         STA ObjectXVelocity, X
09449 4C 51 94                      JMP ++
0944C A9 01                     +   LDA #$1
0944E 9D 2F 04                      STA EnemyArray_42F, X
09451                           ++
09451 A9 D0                         LDA #$D0
09453 95 47                         STA ObjectYVelocity, X
09455 A5 28                         LDA PlayerXLo
09457 95 29                         STA ObjectXLo, X
09459 A5 32                         LDA PlayerYLo
0945B 95 33                         STA ObjectYLo, X
0945D A9 08                     	LDA #SoundEffect1_ThrowItem
0945F 8D 02 06                  	STA SoundEffectQueue1
09462                           +++
09462                           ENDIF
09462 60                        	RTS
09463                           
09463                           
09463                           TileBehavior_CheckJar:
09463                           IFNDEF PLAYER_STUFF
09463                           	LDY HoldingItem
09463                           	BNE loc_BANK0_917C
09463                           ENDIF
09463                           IFDEF PLAYER_STUFF
09463 A4 9C                     	LDY HoldingItem
09465 F0 03                         BEQ +
09467 4C EB 94                  	JMP loc_BANK0_917C
0946A                           +
0946A                           ENDIF
0946A                           
0946A A5 9A                     	LDA PlayerDucking
0946C F0 49                     	BEQ TileBehavior_CheckPickUp
0946E                           
0946E A5 00                     	LDA byte_RAM_0
09470 AE 28 06                  	LDX InSubspaceOrJar
09473 E0 02                     	CPX #$02
09475 D0 06                     	BNE TileBehavior_CheckJar_NotSubspace
09477                           
09477                           	; In SubSpace, a non-enterable jar can be entered
09477                           	; Now Y = $00
09477 C9 74                     	CMP #BackgroundTile_JarTopNonEnterable
09479 F0 0C                     	BEQ TileBehavior_GoDownJar
0947B                           
0947B D0 6E                     	BNE loc_BANK0_917C
0947D                           
0947D                           TileBehavior_CheckJar_NotSubspace:
0947D C8                        	INY
0947E                           	; Now Y = $01
0947E C9 73                     	CMP #BackgroundTile_JarTopGeneric
09480 F0 05                     	BEQ TileBehavior_GoDownJar
09482                           
09482 C9 6F                     	CMP #BackgroundTile_JarTopPointer
09484 D0 65                     	BNE loc_BANK0_917C
09486                           
09486 C8                        	INY
09487                           	; Now Y = $02
09487                           
09487                           TileBehavior_GoDownJar:
09487 A5 28                     	LDA PlayerXLo
09489 18                        	CLC
0948A 69 04                     	ADC #$04
0948C 29 0F                     	AND #$0F
0948E C9 08                     	CMP #$08
09490 B0 59                     	BCS loc_BANK0_917C
09492                           
09492                           	; Stop horiziontal movement
09492 A9 00                     	LDA #$00
09494 85 3C                     	STA PlayerXVelocity
09496                           
09496                           	; We're going down the jar!
09496 A9 04                     	LDA #PlayerState_GoingDownJar
09498 85 50                     	STA PlayerState
0949A                           
0949A                           	; What kind of jar are we going down?
0949A                           	; $00 = warp, $01 = regular, $02 = pointer
0949A 8C EE 04                  	STY InJarType
0949D                           
0949D                           ;
0949D                           ; Snaps the player to the closest tile (for entering doors and jars)
0949D                           ;
0949D                           IFDEF PLAYER_STUFF
0949D                           SnapPlayerToTile:
0949D A5 28                     	LDA PlayerXLo
0949F 18                        	CLC
094A0 69 08                     	ADC #$08
094A2 85 28                     	STA PlayerXLo
094A4 8D F0 76                      STA RandomDropType
094A7                           
094A7 A5 14                         LDA PlayerXHi
094A9 69 00                         ADC #$0
094AB 85 14                         STA PlayerXHi
094AD 8D 35 05                      STA CurrentLevelPage
094B0                           
094B0 A5 28                     	LDA PlayerXLo
094B2 29 F0                     	AND #$F0
094B4 85 28                     	STA PlayerXLo
094B6                           SnapPlayerToTile_Exit:
094B6 60                        	RTS
094B7                           ENDIF
094B7                           
094B7                           IFNDEF PLAYER_STUFF
094B7                           SnapPlayerToTile:
094B7                           	LDA PlayerXLo
094B7                           	CLC
094B7                           	ADC #$08
094B7                           	AND #$F0
094B7                           	STA PlayerXLo
094B7                           	BCC SnapPlayerToTile_Exit
094B7                           
094B7                           	LDA IsHorizontalLevel
094B7                           	BEQ SnapPlayerToTile_Exit
094B7                           
094B7                           	INC PlayerXHi
094B7                           
094B7                           SnapPlayerToTile_Exit:
094B7                           	RTS
094B7                           ENDIF
094B7                           
094B7                           
094B7                           TileBehavior_CheckPickUp:
094B7 24 F5                     	BIT Player1JoypadPress
094B9 50 30                     	BVC loc_BANK0_917C ;; #ControllerInput_B
094BB                           
094BB                           	; B button pressed
094BB                           
094BB A5 28                     	LDA PlayerXLo
094BD 18                        	CLC
094BE 69 06                     	ADC #$06
094C0 29 0F                     	AND #$0F
094C2 C9 0C                     	CMP #$0C
094C4 B0 25                     	BCS loc_BANK0_917C
094C6                           
094C6 A5 00                     	LDA byte_RAM_0
094C8 C9 93                     	CMP #BackgroundTile_DiggableSand
094CA D0 04                     	BNE loc_BANK0_916E
094CC                           
094CC A9 0E                     	LDA #$0E
094CE D0 16                     	BNE loc_BANK0_9177
094D0                           
094D0                           ; blocks that can be picked up
094D0                           loc_BANK0_916E:
094D0                           IFDEF PLAYER_STUFF
094D0 AE E9 EE                      LDX GBreaker
094D3 F0 08                         BEQ +
094D5 A5 9C                         LDA HoldingItem
094D7 D0 04                         BNE +
094D9 A8                            TAY
094DA 4C E6 94                      JMP loc_BANK0_9177
094DD                           +   
094DD                           ENDIF
094DD                           
094DD C9 6D                     	CMP #BackgroundTile_Unused6D
094DF B0 0A                     	BCS loc_BANK0_917C
094E1                           
094E1                           	; convert to an index in PickUpToEnemyTypeTable
094E1 38                        	SEC
094E2 E9 69                     	SBC #BackgroundTile_MushroomBlock
094E4 90 05                     	BCC loc_BANK0_917C
094E6                           
094E6                           loc_BANK0_9177:
094E6 85 09                     	STA byte_RAM_9
094E8 4C 38 93                  	JMP loc_BANK0_9074
094EB                           
094EB                           ; ---------------------------------------------------------------------------
094EB                           
094EB                           loc_BANK0_917C:
094EB A5 9A                     	LDA PlayerDucking
094ED D0 60                     	BNE locret_BANK0_91CE
094EF                           
094EF A5 06                     	LDA byte_RAM_6
094F1 38                        	SEC
094F2 E9 10                     	SBC #$10
094F4 85 06                     	STA byte_RAM_6
094F6 85 E6                     	STA byte_RAM_E6
094F8 A5 04                     	LDA byte_RAM_4
094FA E9 00                     	SBC #$00
094FC 85 04                     	STA byte_RAM_4
094FE 85 01                     	STA byte_RAM_1
09500 A5 03                     	LDA byte_RAM_3
09502 85 02                     	STA byte_RAM_2
09504 20 84 96                  	JSR sub_BANK0_92C1
09507                           
09507 B0 46                     	BCS locret_BANK0_91CE
09509                           
09509 20 DC B0                  	JSR SetTileOffsetAndAreaPageAddr_Bank1
0950C                           
0950C A4 E7                     	LDY byte_RAM_E7
0950E B1 01                     	LDA (byte_RAM_1), Y
09510 A6 9C                     	LDX HoldingItem
09512 F0 00                     	BEQ loc_BANK0_91AE
09514                           
09514                           IFNDEF PLAYER_STUFF_HOLD
09514                           	LDX ObjectBeingCarriedIndex
09514                           	LDY ObjectType, X
09514                           	CPY #Enemy_Key
09514                           	BNE locret_BANK0_91CE
09514                           ENDIF
09514                           
09514                           loc_BANK0_91AE:
09514 AE 28 06                  	LDX InSubspaceOrJar
09517 E0 02                     	CPX #$02
09519 F0 0A                     	BEQ loc_BANK0_91BF
0951B                           
0951B A0 04                     	LDY #$04
0951D                           
0951D                           ; check to see if the tile matches one of the door tiles
0951D                           loc_BANK0_91B7:
0951D D9 0D 96                  	CMP DoorTiles, Y
09520 F0 53                     	BEQ loc_BANK0_91EB
09522                           
09522 88                        	DEY
09523 10 F8                     	BPL loc_BANK0_91B7
09525                           
09525                           loc_BANK0_91BF:
09525                           IFDEF HOT_SPOTS
09525 C9 4C                     	CMP #BackgroundTile_GrassBobOmb
09527 D0 10                         BNE +
09529 EE F9 76                      INC HotSpotMidvar
0952C EE F9 76                      INC HotSpotMidvar
0952F A0 0D                         LDY #$0D
09531 84 09                     	STY byte_RAM_9
09533 20 42 93                      JSR CreateBushItem_NoReset
09536 4C 4F 95                      JMP locret_BANK0_91CE
09539                           +
09539                           ENDIF
09539 24 F5                     	BIT Player1JoypadPress
0953B 50 12                     	BVC locret_BANK0_91CE
0953D                           IFDEF PLAYER_STUFF
0953D 85 00                     	STA byte_RAM_0
0953F A5 9C                         LDA HoldingItem
09541 F0 01                         BEQ +
09543 60                            RTS
09544 A5 00                     +   LDA byte_RAM_0
09546                           ENDIF
09546                           
09546 C9 4D                     	CMP #BackgroundTile_GrassInactive
09548 B0 05                     	BCS locret_BANK0_91CE
0954A                           
0954A 38                        	SEC
0954B E9 43                     	SBC #BackgroundTile_GrassCoin
0954D B0 0A                     	BCS loc_BANK0_91CF
0954F                           
0954F                           locret_BANK0_91CE:
0954F                           IFDEF PLAYER_STUFF
0954F A5 F5                         LDA Player1JoypadPress
09551 29 40                         AND #ControllerInput_B
09553 F0 03                         BEQ locret_BANK0_91CE_Default
09555 20 A0 B5                      JSR CreateFireballStart
09558                           locret_BANK0_91CE_Default:
09558                           ENDIF
09558 60                        	RTS
09559                           
09559                           ; ---------------------------------------------------------------------------
09559                           
09559                           loc_BANK0_91CF:
09559 AE 28 06                  	LDX InSubspaceOrJar
0955C E0 02                     	CPX #$02
0955E D0 0D                     	BNE loc_BANK0_91E3
09560                           
09560 AD 21 06                  	LDA SubspaceVisits
09563 C9 02                     	CMP #$02
09565 B0 05                     	BCS loc_BANK0_91E2 ; skip if we've already visited Subspace twice
09567                           
09567 EE 22 06                  	INC SubspaceCoins
0956A A2 00                     	LDX #$00
0956C                           
0956C                           loc_BANK0_91E2:
0956C 8A                        	TXA
0956D                           
0956D                           loc_BANK0_91E3:
0956D 18                        	CLC
0956E 69 04                     	ADC #$04
09570 85 09                     	STA byte_RAM_9
09572 4C 38 93                  	JMP loc_BANK0_9074
09575                           
09575                           
09575                           
09575                           ; ---------------------------------------------------------------------------
09575                           
09575                           ;
09575                           ; Checks to see if we're trying to go through the door
09575                           ;
09575                           ; Input
09575                           ;   Y = tile index in DoorTiles
09575                           loc_BANK0_91EB:
09575 A5 F5                     	LDA Player1JoypadPress
09577 29 08                     	AND #ControllerInput_Up
09579 F0 D4                     	BEQ locret_BANK0_91CE
0957B                           
0957B                           	; player is holding up and is trying to go through this door
0957B A5 28                     	LDA PlayerXLo
0957D 18                        	CLC
0957E 69 05                     	ADC #$05
09580 29 0F                     	AND #$0F
09582 C9 0A                     	CMP #$0A
09584 B0 C9                     	BCS locret_BANK0_91CE
09586                           
09586 C0 04                     	CPY #$04 ; index of BackgroundTile_LightDoorEndLevel
09588 D0 01                     	BNE loc_BANK0_9205
0958A                           
0958A                           	; setting GameMode to $03 to go to Bonus Chance
0958A 88                        	DEY
0958B                           IFNDEF PLAYER_STUFF
0958B                           	STY GameMode ;; GameMode_BonusChance
0958B                           	RTS
0958B                           ENDIF
0958B                           
0958B                           
0958B                           ; ---------------------------------------------------------------------------
0958B                           
0958B                           loc_BANK0_9205:
0958B A9 01                     	LDA #TransitionType_Door
0958D 8D 34 05                  	STA TransitionType
09590 98                        	TYA
09591 20 A6 D9                  	JSR JumpToTableAfterJump
09594                           
09594                           DoorHandlingPointers:
09594 9C 95                     	.dw DoorHandling_UnlockedDoor ; unlocked door
09596 BD 95                     	.dw DoorHandling_LockedDoor ; locked door
09598 EE 95                     	.dw DoorHandling_Entrance ; dark door
0959A EE 95                     	.dw DoorHandling_Entrance ; light door
0959C                           
0959C                           
0959C                           DoorHandling_UnlockedDoor:
0959C 20 F2 AF                  	JSR DoorAnimation_Unlocked
0959F                           
0959F                           DoorHandling_GoThroughDoor:
0959F EE BD 04                  	INC DoorAnimationTimer
095A2 EE 1B 04                  	INC PlayerLock
095A5                           IFDEF SCROLL_FIX
095A5 A9 09                         LDA #PlayerState_Nothing
095A7 85 50                         STA PlayerState
095A9 A9 50                         LDA #$50
095AB 85 82                         STA PlayerStateTimer
095AD A9 00                         LDA #$0
095AF 85 3C                         STA PlayerXVelocity
095B1 8D CB 04                      STA PlayerXAcceleration
095B4                           ENDIF
095B4 20 9D 94                  	JSR SnapPlayerToTile
095B7                           
095B7 A9 01                     	LDA #DPCM_DoorOpenBombBom
095B9 8D 01 06                  	STA DPCMQueue
095BC                           
095BC                           DoorHandling_Exit:
095BC 60                        	RTS
095BD                           
095BD                           
095BD                           DoorHandling_LockedDoor:
095BD                           IFDEF PLAYER_STUFF
095BD A2 08                         LDX #CustomBitFlag_MasterKey
095BF A9 00                         LDA #$0
095C1 20 3F F1                      JSR ChkFlagPlayer2
095C4 D0 03                         BNE +
095C6 4C D7 95                      JMP SetFlagUnlock  ;; still need to have an object to set ?
095C9                           +
095C9                           ENDIF
095C9 A5 9C                     	LDA HoldingItem
095CB                           	; don't come to a locked door empty-handed
095CB F0 EF                     	BEQ DoorHandling_Exit
095CD                           
095CD                           	; and make sure you have a key
095CD AC 2D 04                  	LDY ObjectBeingCarriedIndex
095D0 B9 90 00                  	LDA ObjectType, Y
095D3 C9 3D                     	CMP #Enemy_Key
095D5 D0 E5                     	BNE DoorHandling_Exit
095D7                           
095D7                           SetFlagUnlock:
095D7                           IFNDEF FLAGSET
095D7                           	; the key has been used
095D7                           	INC KeyUsed
095D7                           ENDIF
095D7                           IFDEF FLAGSET
095D7 98                            TYA
095D8 48                            PHA
095D9 A2 40                         LDX #CustomBitFlag_Key 
095DB 20 83 F1                      JSR ApplyFlagLevel
095DE EE E5 73                      INC Level_Count_Unlocks
095E1 68                            PLA
095E2 A8                            TAY
095E3                           ENDIF
095E3 98                        	TYA
095E4 AA                        	TAX
095E5                           
095E5 20 C1 B0                  	JSR TurnKeyIntoPuffOfSmoke
095E8 20 EE AF                  	JSR DoorAnimation_Locked
095EB 4C 9F 95                  	JMP DoorHandling_GoThroughDoor
095EE                           
095EE                           
095EE                           DoorHandling_Entrance:
095EE                           IFDEF PLAYER_STUFF
095EE 20 9D 94                      JSR SnapPlayerToTile
095F1 A9 09                         LDA #PlayerState_Nothing
095F3 85 50                         STA PlayerState
095F5 A9 00                         LDA #$0
095F7 85 82                         STA PlayerStateTimer
095F9 85 3C                         STA PlayerXVelocity
095FB 8D CB 04                      STA PlayerXAcceleration
095FE 20 7C E8                      JSR SetGameModeBonusChanceCustom
09601 AD EC 04                      LDA GameMode
09604 F0 01                         BEQ +
09606 60                            RTS
09607                           +
09607                           ENDIF
09607 EE 27 06                  	INC DoAreaTransition
0960A 4C 66 FA                  	JMP DoAreaReset
0960D                           
0960D                           
0960D                           DoorTiles:
0960D 51                        	.db BackgroundTile_DoorBottom
0960E 50                        	.db BackgroundTile_DoorBottomLock
0960F 83                        	.db BackgroundTile_DarkDoor
09610 52                        	.db BackgroundTile_LightDoor
09611 56                        	.db BackgroundTile_LightDoorEndLevel
09612                           
09612                           
09612                           ;
09612                           ; Seems to determine what kind of tile the player has collided with?
09612                           ;
09612                           ; Input
09612                           ;   Y = bounding box offset?
09612                           ; Output
09612                           ;   byte_RAM_0 = tile ID
09612                           ;
09612                           sub_BANK0_924F:
09612 8A                        	TXA
09613 48                        	PHA
09614 A9 00                     	LDA #$00
09616 85 00                     	STA byte_RAM_0
09618 85 01                     	STA byte_RAM_1
0961A B9 64 F2                  	LDA byte_BANKF_F011, Y
0961D 10 02                     	BPL loc_BANK0_925E
0961F                           
0961F C6 00                     	DEC byte_RAM_0
09621                           
09621                           loc_BANK0_925E:
09621 18                        	CLC
09622 75 28                     	ADC PlayerXLo, X
09624 29 F0                     	AND #$F0
09626 85 05                     	STA byte_RAM_5
09628 08                        	PHP
09629 4A                        	LSR A
0962A 4A                        	LSR A
0962B 4A                        	LSR A
0962C 4A                        	LSR A
0962D 85 E5                     	STA byte_RAM_E5
0962F 28                        	PLP
09630 B5 14                     	LDA PlayerXHi, X
09632 65 00                     	ADC byte_RAM_0
09634 85 02                     	STA byte_RAM_2
09636 85 03                     	STA byte_RAM_3
09638 A5 EC                     	LDA IsHorizontalLevel
0963A                           
0963A                           loc_BANK0_9277:
0963A D0 04                     	BNE loc_BANK0_927D
0963C                           
0963C 85 02                     	STA byte_RAM_2
0963E 85 03                     	STA byte_RAM_3
09640                           
09640                           loc_BANK0_927D:
09640 B9 A8 F2                  	LDA byte_BANKF_F055, Y
09643 10 02                     	BPL loc_BANK0_9284
09645                           
09645 C6 01                     	DEC byte_RAM_1
09647                           
09647                           loc_BANK0_9284:
09647 18                        	CLC
09648                           
09648                           loc_BANK0_9285:
09648 75 32                     	ADC PlayerYLo, X
0964A 29 F0                     	AND #$F0
0964C 85 06                     	STA byte_RAM_6
0964E 85 E6                     	STA byte_RAM_E6
09650 B5 1E                     	LDA PlayerYHi, X
09652 65 01                     	ADC byte_RAM_1
09654 85 01                     	STA byte_RAM_1
09656 85 04                     	STA byte_RAM_4
09658 20 84 96                  	JSR sub_BANK0_92C1
0965B                           
0965B 90 04                     	BCC loc_BANK0_929E
0965D                           
0965D A9 00                     	LDA #$00
0965F F0 07                     	BEQ loc_BANK0_92A5
09661                           
09661                           loc_BANK0_929E:
09661 20 DC B0                  	JSR SetTileOffsetAndAreaPageAddr_Bank1
09664                           
09664 A4 E7                     	LDY byte_RAM_E7
09666 B1 01                     	LDA (byte_RAM_1), Y
09668                           
09668                           loc_BANK0_92A5:
09668 85 00                     	STA byte_RAM_0
0966A 68                        	PLA
0966B AA                        	TAX
0966C 60                        	RTS
0966D                           
0966D                           
0966D                           ; =============== S U B R O U T I N E =======================================
0966D                           
0966D                           sub_BANK0_92AA:
0966D 85 0F                     	STA byte_RAM_F
0966F 98                        	TYA
09670 30 11                     	BMI locret_BANK0_92C0
09672                           
09672 0A                        	ASL A
09673 0A                        	ASL A
09674 0A                        	ASL A
09675 0A                        	ASL A
09676 18                        	CLC
09677 65 0F                     	ADC byte_RAM_F
09679 B0 04                     	BCS loc_BANK0_92BC
0967B                           
0967B C9 F0                     	CMP #$F0
0967D 90 04                     	BCC locret_BANK0_92C0
0967F                           
0967F                           loc_BANK0_92BC:
0967F 18                        	CLC
09680 69 10                     	ADC #$10
09682 C8                        	INY
09683                           
09683                           locret_BANK0_92C0:
09683 60                        	RTS
09684                           
09684                           ; End of function sub_BANK0_92AA
09684                           
09684                           
09684                           ;
09684                           ; NOTE: This is a copy of the "sub_BANK3_BC2E" routine in Bank 3
09684                           ;
09684                           ;
09684                           sub_BANK0_92C1:
09684 A4 01                     	LDY byte_RAM_1
09686 A5 E6                     	LDA byte_RAM_E6
09688 20 6D 96                  	JSR sub_BANK0_92AA
0968B                           
0968B 84 01                     	STY byte_RAM_1
0968D 85 E6                     	STA byte_RAM_E6
0968F A4 EC                     	LDY IsHorizontalLevel
09691 B9 01 00                  	LDA byte_RAM_1, Y
09694 85 E8                     	STA byte_RAM_E8
09696 A5 02                     	LDA byte_RAM_2
09698 D9 A4 96                  	CMP byte_BANK0_92E0 + 1, Y
0969B B0 05                     	BCS locret_BANK0_92DF
0969D                           
0969D A5 01                     	LDA byte_RAM_1
0969F D9 A3 96                  	CMP byte_BANK0_92E0, Y
096A2                           
096A2                           locret_BANK0_92DF:
096A2 60                        	RTS
096A3                           
096A3                           
096A3                           byte_BANK0_92E0:
096A3 0A                        	.db $0A
096A4 01                        	.db $01
096A5 0B                        	.db $0B
096A6                           
096A6                           
096A6                           ; Unused?
096A6                           ; Copy of sub_BANKF_F494
096A6                           _code_12E3:
096A6 A6 D8                     	LDX NeedVerticalScroll
096A8 D0 2A                     	BNE locret_BANK0_9311
096AA                           
096AA A5 50                     	LDA PlayerState
096AC C9 02                     	CMP #PlayerState_Lifting
096AE B0 24                     	BCS locret_BANK0_9311
096B0                           
096B0 AD 2B 04                  	LDA PlayerScreenYLo
096B3 AC 2A 04                  	LDY PlayerScreenYHi
096B6 30 0A                     	BMI loc_BANK0_92FF
096B8                           
096B8 D0 0E                     	BNE loc_BANK0_9305
096BA                           
096BA C9 B4                     	CMP #$B4
096BC B0 0A                     	BCS loc_BANK0_9305
096BE                           
096BE C9 21                     	CMP #$21
096C0 B0 08                     	BCS loc_BANK0_9307
096C2                           
096C2                           loc_BANK0_92FF:
096C2 A4 99                     	LDY PlayerInAir
096C4 D0 04                     	BNE loc_BANK0_9307
096C6                           
096C6 F0 01                     	BEQ loc_BANK0_9306
096C8                           
096C8                           loc_BANK0_9305:
096C8 E8                        	INX
096C9                           
096C9                           loc_BANK0_9306:
096C9 E8                        	INX
096CA                           
096CA                           loc_BANK0_9307:
096CA AD 25 04                  	LDA VerticalScrollDirection
096CD 8E 25 04                  	STX VerticalScrollDirection
096D0 D0 02                     	BNE locret_BANK0_9311
096D2                           
096D2                           loc_BANK0_930F:
096D2 86 D8                     	STX NeedVerticalScroll
096D4                           
096D4                           locret_BANK0_9311:
096D4 60                        	RTS
096D5                           
096D5                           
096D5                           PlayerCollisionDirectionTable:
096D5 01                        	.db CollisionFlags_Right
096D6 02                        	.db CollisionFlags_Left
096D7                           
096D7                           PlayerCollisionResultTable_Bank0:
096D7 80                        	.db CollisionFlags_80
096D8 00                        	.db CollisionFlags_00
096D9                           
096D9                           
096D9                           ;
096D9                           ; Enforces the left/right boundaries of horizontal areas
096D9                           ;
096D9                           PlayerAreaBoundaryCollision:
096D9 A5 EC                     	LDA IsHorizontalLevel
096DB F0 0D                     	BEQ PlayerAreaBoundaryCollision_Exit
096DD                           
096DD AD 28 04                  	LDA PlayerScreenX
096E0 A4 6E                     	LDY PlayerMovementDirection
096E2 C0 01                     	CPY #$01
096E4 F0 05                     	BEQ PlayerAreaBoundaryCollision_CheckRight
096E6                           
096E6                           PlayerAreaBoundaryCollision_CheckLeft:
096E6 C9 08                     	CMP #$08
096E8 90 05                     	BCC PlayerAreaBoundaryCollision_BoundaryHit
096EA                           
096EA                           PlayerAreaBoundaryCollision_Exit:
096EA 60                        	RTS
096EB                           
096EB                           PlayerAreaBoundaryCollision_CheckRight:
096EB C9 E8                     	CMP #$E8
096ED 90 FB                     	BCC PlayerAreaBoundaryCollision_Exit
096EF                           
096EF                           PlayerAreaBoundaryCollision_BoundaryHit:
096EF A5 5A                     	LDA PlayerCollision
096F1 19 D4 96                  	ORA PlayerCollisionDirectionTable - 1, Y
096F4 85 5A                     	STA PlayerCollision
096F6                           
096F6                           ;
096F6                           ; NOTE: This is a copy of the "PlayerHorizontalCollision" routine in Bank 3
096F6                           ;
096F6                           PlayerHorizontalCollision_Bank0:
096F6 A2 00                     	LDX #$00
096F8 A4 6E                     	LDY PlayerMovementDirection
096FA A5 3C                     	LDA PlayerXVelocity
096FC 59 D6 96                  	EOR PlayerCollisionResultTable_Bank0 - 1, Y
096FF 10 02                     	BPL loc_BANK0_9340
09701                           
09701 86 3C                     	STX PlayerXVelocity
09703                           
09703                           loc_BANK0_9340:
09703 AD CB 04                  	LDA PlayerXAcceleration
09706 59 D6 96                  	EOR PlayerCollisionResultTable_Bank0 - 1, Y
09709 10 03                     	BPL loc_BANK0_934B
0970B                           
0970B 8E CB 04                  	STX PlayerXAcceleration
0970E                           
0970E                           loc_BANK0_934B:
0970E 8E 07 04                  	STX PlayerXSubpixel
09711                           IFDEF PLAYER_STUFF
09711 A5 F7                     	LDA Player1JoypadHeld
09713 29 03                     	AND #ControllerInput_Right | ControllerInput_Left
09715 F0 14                         BEQ +
09717 A2 C0                         LDX #CustomBitFlag_WallCling | #CustomBitFlag_WallJump
09719 20 39 F1                      JSR ChkFlagPlayer3
0971C D0 0D                         BNE +
0971E A9 0B                         LDA #SpriteAnimation_CustomFrame1
09720 85 C7                         STA PlayerAnimationFrame
09722 A9 40                         LDA #CustomBitFlag_WallCling
09724 31 C5                         AND (byte_RAM_C5), Y
09726 F0 03                         BEQ +
09728 20 B6 B3                      JSR Player_WallCling
0972B                           +
0972B A5 99                         LDA PlayerInAir
0972D F0 22                         BEQ +
0972F A2 80                         LDX #CustomBitFlag_WallJump
09731 20 39 F1                      JSR ChkFlagPlayer3
09734 D0 1B                         BNE +
09736 A5 F5                     	LDA Player1JoypadPress
09738 29 80                     	AND #ControllerInput_A
0973A F0 15                         BEQ +
0973C E6 99                         INC PlayerInAir
0973E A9 06                     	LDA #SpriteAnimation_Jumping
09740 85 C7                     	STA PlayerAnimationFrame
09742 A5 9D                         LDA PlayerDirection
09744 F0 04                         BEQ ++
09746 A9 E0                         LDA #$E0
09748 D0 02                         BNE +++
0974A                           ++
0974A A9 20                         LDA #$20
0974C                           +++
0974C 85 3C                         STA PlayerXVelocity
0974E 20 BB 8D                  	JSR PlayerStartJump
09751                           +
09751                           ENDIF
09751                           
09751                           locret_BANK0_934E:
09751 60                        	RTS
09752                           
09752                           
09752                           ; =============== S U B R O U T I N E =======================================
09752                           
09752                           ;
09752                           ; NOTE: This is a copy of the "sub_BANK3_BC50" routine in Bank 3
09752                           ;
09752                           ; Replaces tile when something is picked up
09752                           ;
09752                           ; Input
09752                           ;   A = Target tile
09752                           ;   X = Enemy index of object being picked up
09752                           ;
09752                           ReplaceTile_Bank0:
09752 48                        	PHA ; Something to update the PPU for some tile change
09753 B5 29                     	LDA ObjectXLo, X
09755 18                        	CLC
09756 69 08                     	ADC #$08
09758 08                        	PHP
09759 4A                        	LSR A
0975A 4A                        	LSR A
0975B 4A                        	LSR A
0975C 4A                        	LSR A
0975D 85 E5                     	STA byte_RAM_E5
0975F 28                        	PLP
09760 B5 15                     	LDA ObjectXHi, X
09762 A4 EC                     	LDY IsHorizontalLevel
09764 F0 02                     	BEQ ReplaceTile_StoreXHi_Bank0
09766                           
09766 69 00                     	ADC #$00
09768                           
09768                           ReplaceTile_StoreXHi_Bank0:
09768 85 02                     	STA byte_RAM_2
0976A B5 33                     	LDA ObjectYLo, X
0976C 18                        	CLC
0976D 69 08                     	ADC #$08
0976F 29 F0                     	AND #$F0
09771 85 E6                     	STA byte_RAM_E6
09773 B5 1F                     	LDA ObjectYHi, X
09775 69 00                     	ADC #$00
09777 85 01                     	STA byte_RAM_1
09779 20 84 96                  	JSR sub_BANK0_92C1
0977C                           
0977C 68                        	PLA
0977D B0 D2                     	BCS locret_BANK0_934E
0977F                           
0977F                           ;
0977F                           ; Input
0977F                           ;   A = Target tile
0977F                           ;
0977F                           loc_BANK0_937C:
0977F 86 03                     	STX byte_RAM_3
09781 48                        	PHA
09782 20 DC B0                  	JSR SetTileOffsetAndAreaPageAddr_Bank1
09785                           
09785 68                        	PLA
09786 A4 E7                     	LDY byte_RAM_E7
09788 91 01                     	STA (byte_RAM_1), Y
0978A 48                        	PHA
0978B AE 00 03                  	LDX byte_RAM_300
0978E A9 00                     	LDA #$00
09790 9D 01 03                  	STA PPUBuffer_301, X
09793 98                        	TYA
09794 29 F0                     	AND #$F0
09796 0A                        	ASL A
09797 3E 01 03                  	ROL PPUBuffer_301, X
0979A 0A                        	ASL A
0979B 3E 01 03                  	ROL PPUBuffer_301, X
0979E 9D 02 03                  	STA PPUBuffer_301 + 1, X
097A1 98                        	TYA
097A2 29 0F                     	AND #$0F
097A4 0A                        	ASL A
097A5                           
097A5 7D 02 03                  	ADC PPUBuffer_301 + 1, X
097A8 9D 02 03                  	STA PPUBuffer_301 + 1, X
097AB 18                        	CLC
097AC 69 20                     	ADC #$20
097AE 9D 07 03                  	STA PPUBuffer_301 + 6, X
097B1 A5 EC                     	LDA IsHorizontalLevel
097B3 0A                        	ASL A
097B4 A8                        	TAY
097B5 A5 01                     	LDA byte_RAM_1
097B7 29 10                     	AND #$10
097B9 D0 01                     	BNE loc_BANK0_93B9
097BB                           
097BB C8                        	INY
097BC                           
097BC                           loc_BANK0_93B9:
097BC B9 0D 98                  	LDA byte_BANK0_940A, Y
097BF 18                        	CLC
097C0 7D 01 03                  	ADC PPUBuffer_301, X
097C3 9D 01 03                  	STA PPUBuffer_301, X
097C6 9D 06 03                  	STA PPUBuffer_301 + 5, X
097C9 A9 02                     	LDA #$02
097CB 9D 03 03                  	STA PPUBuffer_301 + 2, X
097CE 9D 08 03                  	STA PPUBuffer_301 + 7, X
097D1 68                        	PLA
097D2 48                        	PHA
097D3 29 C0                     	AND #$C0
097D5 0A                        	ASL A
097D6 2A                        	ROL A
097D7 2A                        	ROL A
097D8 A8                        	TAY
097D9 B9 81 BA                  	LDA TileQuadPointersLo, Y
097DC 85 00                     	STA byte_RAM_0
097DE B9 85 BA                  	LDA TileQuadPointersHi, Y
097E1 85 01                     	STA byte_RAM_1
097E3 68                        	PLA
097E4 0A                        	ASL A
097E5 0A                        	ASL A
097E6 A8                        	TAY
097E7 B1 00                     	LDA (byte_RAM_0), Y
097E9 9D 04 03                  	STA PPUBuffer_301 + 3, X
097EC C8                        	INY
097ED B1 00                     	LDA (byte_RAM_0), Y
097EF 9D 05 03                  	STA PPUBuffer_301 + 4, X
097F2 C8                        	INY
097F3 B1 00                     	LDA (byte_RAM_0), Y
097F5 9D 09 03                  	STA PPUBuffer_301 + 8, X
097F8 C8                        	INY
097F9 B1 00                     	LDA (byte_RAM_0), Y
097FB 9D 0A 03                  	STA PPUBuffer_301 + 9, X
097FE A9 00                     	LDA #$00
09800 9D 0B 03                  	STA PPUBuffer_301 + 10, X
09803 8A                        	TXA
09804 18                        	CLC
09805 69 0A                     	ADC #$0A
09807 8D 00 03                  	STA byte_RAM_300
0980A A6 03                     	LDX byte_RAM_3
0980C 60                        	RTS
0980D                           
0980D                           
0980D                           ; Another byte of PPU high addresses for horiz/vert levels
0980D                           byte_BANK0_940A:
0980D 20                        	.db $20
0980E 28                        	.db $28
0980F 20                        	.db $20
09810 24                        	.db $24
09811                           
09811                           
09811                           ;
09811                           ; NOTE: This is a copy of the "StashPlayerPosition" routine in Bank 3
09811                           ;
09811                           StashPlayerPosition_Bank0:
09811 AD 28 06                  	LDA InSubspaceOrJar
09814 D0 14                     	BNE StashPlayerPosition_Exit_Bank0
09816                           
09816 A5 14                     	LDA PlayerXHi
09818 8D 0F 05                  	STA PlayerXHi_Backup
0981B A5 28                     	LDA PlayerXLo
0981D 8D 11 05                  	STA PlayerXLo_Backup
09820 A5 1E                     	LDA PlayerYHi
09822 8D 10 05                  	STA PlayerYHi_Backup
09825 A5 32                     	LDA PlayerYLo
09827 8D 12 05                  	STA PlayerYLo_Backup
0982A                           
0982A                           StashPlayerPosition_Exit_Bank0:
0982A 60                        	RTS
0982B                           
0982B                           
0982B                           ; player placement after exiting subspace (maybe other times?)
0982B                           sub_BANK0_9428:
0982B AD 0F 05                  	LDA PlayerXHi_Backup
0982E 85 14                     	STA PlayerXHi
09830 AD 11 05                  	LDA PlayerXLo_Backup
09833 85 28                     	STA PlayerXLo
09835 AD 10 05                  	LDA PlayerYHi_Backup
09838 85 1E                     	STA PlayerYHi
0983A AD 12 05                  	LDA PlayerYLo_Backup
0983D 85 32                     	STA PlayerYLo
0983F A5 28                     	LDA PlayerXLo
09841 38                        	SEC
09842 ED C0 04                  	SBC ScreenBoundaryLeftLo
09845 8D 28 04                  	STA PlayerScreenX
09848 A5 32                     	LDA PlayerYLo
0984A 38                        	SEC
0984B E5 CB                     	SBC ScreenYLo
0984D 8D 2B 04                  	STA PlayerScreenYLo
09850 A5 1E                     	LDA PlayerYHi
09852 E5 CA                     	SBC ScreenYHi
09854 8D 2A 04                  	STA PlayerScreenYHi
09857 AD 34 05                  	LDA TransitionType
0985A 38                        	SEC
0985B E9 04                     	SBC #TransitionType_SubSpace
0985D D0 CB                     	BNE StashPlayerPosition_Exit_Bank0
0985F                           
0985F                           	; resetting these to zero (A=$00, otherwise we would have branched)
0985F 85 50                     	STA PlayerState
09861 8D 1B 04                  	STA PlayerLock
09864 8D B7 04                  	STA SubspaceTimer
09867 20 F2 AF                  	JSR DoorAnimation_Unlocked
0986A                           
0986A A9 0A                     	LDA #$0A
0986C 8D B3 04                  	STA SubspaceDoorTimer
0986F 60                        	RTS
09870                           
09870                           ; End of function sub_BANK0_9428
09870                           
09870                           ; =============== S U B R O U T I N E =======================================
09870                           
09870                           ; area transition
09870                           sub_BANK0_946D:
09870 AD 34 05                  	LDA TransitionType
09873 C9 02                     	CMP #TransitionType_Jar
09875 D0 0B                     	BNE loc_BANK0_947F
09877                           
09877 AD EE 04                  	LDA InJarType
0987A D0 06                     	BNE loc_BANK0_947F
0987C                           
0987C 20 2B 98                  	JSR sub_BANK0_9428
0987F                           
0987F 4C C5 98                  	JMP loc_BANK0_94C2
09882                           
09882                           ; ---------------------------------------------------------------------------
09882                           
09882                           loc_BANK0_947F:
09882 AD 33 05                  	LDA CurrentLevelEntryPage
09885 A0 00                     	LDY #$00
09887 A6 EC                     	LDX IsHorizontalLevel
09889 D0 06                     	BNE loc_BANK0_948E
0988B                           
0988B 84 14                     	STY PlayerXHi
0988D 85 1E                     	STA PlayerYHi
0988F F0 04                     	BEQ loc_BANK0_9492
09891                           
09891                           loc_BANK0_948E:
09891 85 14                     	STA PlayerXHi
09893 84 1E                     	STY PlayerYHi
09895                           
09895                           loc_BANK0_9492:
09895 20 CD 98                  	JSR AreaTransitionPlacement
09898                           
09898 A4 1E                     	LDY PlayerYHi
0989A A5 32                     	LDA PlayerYLo
0989C 20 2E 9A                  	JSR sub_BANK0_95AF
0989F                           
0989F 84 1E                     	STY PlayerYHi
098A1 85 32                     	STA PlayerYLo
098A3 A5 28                     	LDA PlayerXLo
098A5 38                        	SEC
098A6 ED C0 04                  	SBC ScreenBoundaryLeftLo
098A9 8D 28 04                  	STA PlayerScreenX
098AC A5 32                     	LDA PlayerYLo
098AE 38                        	SEC
098AF                           
098AF                           loc_BANK0_94AC:
098AF E5 CB                     	SBC ScreenYLo
098B1 8D 2B 04                  	STA PlayerScreenYLo
098B4 A5 1E                     	LDA PlayerYHi
098B6 E5 CA                     	SBC ScreenYHi
098B8 8D 2A 04                  	STA PlayerScreenYHi
098BB AD 34 05                  	LDA TransitionType
098BE C9 04                     	CMP #TransitionType_SubSpace
098C0 D0 03                     	BNE loc_BANK0_94C2
098C2                           
098C2 20 F2 AF                  	JSR DoorAnimation_Unlocked
098C5                           
098C5                           loc_BANK0_94C2:
098C5 A5 28                     	LDA PlayerXLo
098C7 38                        	SEC
098C8 E9 78                     	SBC #$78
098CA 85 BA                     	STA byte_RAM_BA
098CC 60                        	RTS
098CD                           
098CD                           ; End of function sub_BANK0_946D
098CD                           
098CD                           
098CD                           ;
098CD                           ; Do the player placement after an area transition
098CD                           ;
098CD                           AreaTransitionPlacement:
098CD                           IFDEF FLAGSET
098CD A2 01                         LDX #CustomBitFlag_Visited
098CF 20 83 F1                      JSR ApplyFlagLevel
098D2 F0 08                         BEQ +
098D4 A6 8F                     	LDX CurrentCharacter
098D6 FE 2D 06                  	INC CharacterLevelsCompleted, X
098D9 EE E0 73                      INC Level_Count_Discovery
098DC                           +
098DC                           ENDIF
098DC                           IFDEF EXTENDED_PTR_CONTINUE 
098DC A9 00                     	LDA #$00
098DE 8D C7 04                  	STA PlayerInRocket
098E1 AD EE 04                      LDA InJarType
098E4 F0 05                         BEQ +
098E6 A9 02                         LDA #TransitionType_Jar
098E8 8D 34 05                      STA TransitionType
098EB                           +
098EB AD 34 05                  	LDA TransitionType
098EE C9 04                         CMP #TransitionType_SubSpace
098F0 F0 07                         BEQ +
098F2 C9 02                         CMP #TransitionType_Jar
098F4 F0 03                         BEQ +
098F6 4C FE 98                      JMP ++
098F9                           +
098F9 A9 00                         LDA #$0
098FB 8D CA 05                      STA StoreContinue
098FE                           ++
098FE AD CA 05                      LDA StoreContinue
09901 29 40                         AND #$40
09903 C9 40                         CMP #$40
09905 D0 0D                         BNE +
09907 A9 00                         LDA #0
09909 8D 34 05                      STA TransitionType
0990C 8D EA 04                      STA TransitionType_Init
0990F 8D 1B 04                      STA PlayerLock
09912 85 50                         STA PlayerState
09914                           +
09914 AD CA 05                      LDA StoreContinue
09917 10 0B                         BPL +
09919 A0 03                         LDY #$3
0991B B9 31 05                  -	LDA CurrentLevel, Y
0991E 99 C6 05                  	STA ContinueLevel, Y
09921 88                            DEY
09922 10 F7                         BPL -
09924                           +
09924 A9 00                         LDA #$0
09926 8D CA 05                      STA StoreContinue
09929                           ENDIF
09929                           IFDEF PLAYER_STUFF
09929                           IFDEF HOT_SPOTS
09929 AD D0 76                      LDA RecoverPlayerPos 
0992C F0 1B                         BEQ +
0992E 20 5B 99                      JSR AreaTransitionPlacement_Reset
09931 AD D0 76                      LDA RecoverPlayerPos 
09934 29 F0                         AND #$F0
09936 85 32                         STA PlayerYLo
09938 AD D0 76                      LDA RecoverPlayerPos 
0993B 29 0F                         AND #$0F
0993D 0A                            ASL
0993E 0A                            ASL
0993F 0A                            ASL
09940 0A                            ASL
09941 85 28                         STA PlayerXLo
09943 A9 00                         LDA #$0
09945 8D D0 76                      STA RecoverPlayerPos
09948 60                            RTS
09949                           +
09949                           ENDIF
09949                           ENDIF
09949 AD 34 05                  	LDA TransitionType
0994C 20 A6 D9                  	JSR JumpToTableAfterJump
0994F                           
0994F                           IFNDEF RANDOMIZER_T
0994F                           	.dw AreaTransitionPlacement_Reset
0994F                           	.dw AreaTransitionPlacement_Door
0994F                           	.dw AreaTransitionPlacement_Jar
0994F                           	.dw AreaTransitionPlacement_Climbing
0994F                           	.dw AreaTransitionPlacement_Subspace
0994F                           	.dw AreaTransitionPlacement_Rocket
0994F                           ENDIF
0994F                           IFDEF RANDOMIZER_T
0994F 5B 99                     	.dw AreaTransitionPlacement_Reset
09951 41 B2                     	.dw EnterDoor_Custom
09953 DC 99                         .dw AreaTransitionPlacement_Jar
09955 41 B2                     	.dw EnterDoor_Custom 
09957 0B 9A                     	.dw AreaTransitionPlacement_Subspace
09959 41 B2                     	.dw EnterDoor_Custom
0995B                           ENDIF
0995B                           
0995B                           AreaTransitionPlacement_Reset:
0995B A9 01                     	LDA #$01
0995D 85 9D                     	STA PlayerDirection
0995F 20 E0 99                  	JSR AreaTransitionPlacement_Middle
09962                           
09962 4A                        	LSR A
09963 4A                        	LSR A
09964 4A                        	LSR A
09965 4A                        	LSR A
09966 85 E5                     	STA byte_RAM_E5
09968 A9 D0                     	LDA #$D0
0996A 85 32                     	STA PlayerYLo
0996C 85 E6                     	STA byte_RAM_E6
0996E AD 33 05                  	LDA CurrentLevelEntryPage
09971 85 E8                     	STA byte_RAM_E8
09973 A9 0C                     	LDA #$0C
09975 85 03                     	STA byte_RAM_3
09977                           
09977                           loc_BANK0_94F8:
09977 20 DC B0                  	JSR SetTileOffsetAndAreaPageAddr_Bank1
0997A                           
0997A A4 E7                     	LDY byte_RAM_E7
0997C B1 01                     	LDA (byte_RAM_1), Y
0997E C9 40                     	CMP #$40
09980 F0 09                     	BEQ AreaTransitionPlacement_MovePlayerUp1Tile
09982                           
09982 20 8B 99                  	JSR AreaTransitionPlacement_MovePlayerUp1Tile
09985                           
09985 85 E6                     	STA byte_RAM_E6
09987 C6 03                     	DEC byte_RAM_3
09989 D0 EC                     	BNE loc_BANK0_94F8
0998B                           
0998B                           
0998B                           ;
0998B                           ; Moves the player up by one tile
0998B                           ;
0998B                           AreaTransitionPlacement_MovePlayerUp1Tile:
0998B A5 32                     	LDA PlayerYLo
0998D 38                        	SEC
0998E E9 10                     	SBC #$10
09990 85 32                     	STA PlayerYLo
09992 60                        	RTS
09993                           
09993                           
09993                           ;
09993                           ; Looks for a door and positions the player at it
09993                           ;
09993                           ; The implementation of this requires the destination door to be at the
09993                           ; OPPOSITE side of the screen from the origin door horizontally, but it can be
09993                           ; at any position vertically.
09993                           ;
09993                           ; If no suitable door is found, the player is positioned to fall from the
09993                           ; top-middle of the screen instead
09993                           ;
09993                           AreaTransitionPlacement_Door:
09993 A5 28                     	LDA PlayerXLo
09995                           	; Switch the x-position to the opposite side of the screen
09995 18                        	CLC
09996 69 08                     	ADC #$08
09998 29 F0                     	AND #$F0
0999A 49 F0                     	EOR #$F0
0999C 85 28                     	STA PlayerXLo
0999E                           
0999E                           	; Convert to a tile offset
0999E 4A                        	LSR A
0999F 4A                        	LSR A
099A0 4A                        	LSR A
099A1 4A                        	LSR A
099A2 85 E5                     	STA byte_RAM_E5
099A4                           
099A4                           	; Start at the bottom of the page
099A4 A9 E0                     	LDA #$E0
099A6 85 32                     	STA PlayerYLo
099A8 85 E6                     	STA byte_RAM_E6
099AA AD 33 05                  	LDA CurrentLevelEntryPage
099AD 85 E8                     	STA byte_RAM_E8
099AF A9 0D                     	LDA #$0D
099B1 85 03                     	STA byte_RAM_3
099B3                           
099B3                           AreaTransitionPlacement_Door_Loop:
099B3 20 DC B0                  	JSR SetTileOffsetAndAreaPageAddr_Bank1
099B6                           
099B6                           	; Read the target tile
099B6 A4 E7                     	LDY byte_RAM_E7
099B8 B1 01                     	LDA (byte_RAM_1), Y
099BA A0 05                     	LDY #$05
099BC                           
099BC                           AreaTransitionPlacement_Door_InnerLoop:
099BC                           	; See if it matches any door tile
099BC D9 0C 96                  	CMP DoorTiles - 1, Y
099BF F0 12                     	BEQ AreaTransitionPlacement_Door_Exit
099C1 88                        	DEY
099C2 D0 F8                     	BNE AreaTransitionPlacement_Door_InnerLoop
099C4                           	; CMP #$06 Pipe entrance 
099C4                           	; BEQ AreaTransitionPlacement_Door_Exit
099C4                           
099C4                           	; Nothing matched on this row, so check the next row or give up
099C4 C6 03                     	DEC byte_RAM_3
099C6                           IFNDEF ROBUST_TRANSITION_SEARCH
099C6 F0 08                     	BEQ AreaTransitionPlacement_Door_Fallback
099C8                           ENDIF
099C8                           IFDEF ROBUST_TRANSITION_SEARCH
099C8                           	BEQ AreaTransitionPlacement_DoorCustom
099C8                           ENDIF
099C8                           
099C8 20 8B 99                  	JSR AreaTransitionPlacement_MovePlayerUp1Tile
099CB                           
099CB 85 E6                     	STA byte_RAM_E6
099CD 4C B3 99                  	JMP AreaTransitionPlacement_Door_Loop
099D0                           
099D0                           AreaTransitionPlacement_Door_Fallback:
099D0                           	; Place in the middle of the screen if no door is found
099D0 20 E0 99                  	JSR AreaTransitionPlacement_Middle
099D3                           
099D3                           AreaTransitionPlacement_Door_Exit:
099D3 20 8B 99                  	JSR AreaTransitionPlacement_MovePlayerUp1Tile
099D6                           
099D6 A9 00                     	LDA #$00
099D8 8D 1B 04                  	STA PlayerLock
099DB 60                        	RTS
099DC                           
099DC                           
099DC                           IFDEF ROBUST_TRANSITION_SEARCH
099DC                           ;
099DC                           ; Looks for a door and positions the player at it
099DC                           ;
099DC                           ; In contrast to the normal door placement routine, this will search all
099DC                           ; x-positions rather than just one opposite the door
099DC                           ;
099DC                           AreaTransitionPlacement_DoorCustom:
099DC                           	; Start on the correct page
099DC                           	LDX CurrentLevelEntryPage
099DC                           	JSR SetAreaPageAddr_Bank1
099DC                           
099DC                           	; Start at the bottom right and work backwards
099DC                           	LDA #$0EF
099DC                           	STA byte_RAM_E7
099DC                           
099DC                           AreaTransitionPlacement_DoorCustom_Loop:
099DC                           	; Read the target tile
099DC                           	LDY byte_RAM_E7
099DC                           	LDA (byte_RAM_1), Y
099DC                           	LDY #$05
099DC                           
099DC                           AreaTransitionPlacement_DoorCustom_InnerLoop:
099DC                           	; See if it matches any door tile
099DC                           	CMP DoorTiles - 1, Y
099DC                           	BEQ AreaTransitionPlacement_DoorCustom_Exit
099DC                           	DEY
099DC                           	BNE AreaTransitionPlacement_DoorCustom_InnerLoop
099DC                           	; CMP #$06 ; Pipe entrance 
099DC                           	; BEQ AreaTransitionPlacement_Door_Exit
099DC                           
099DC                           
099DC                           	; No matches on this tile, check the next one or give up
099DC                           	DEC byte_RAM_E7
099DC                           	BEQ AreaTransitionPlacement_DoorCustom_Fallback
099DC                           
099DC                           	JMP AreaTransitionPlacement_DoorCustom_Loop
099DC                           
099DC                           AreaTransitionPlacement_DoorCustom_Fallback:
099DC                           	LDA #$20
099DC                           	STA PlayerYLo
099DC                           	JSR AreaTransitionPlacement_Middle
099DC                           	JMP AreaTransitionPlacement_Door_Exit
099DC                           
099DC                           AreaTransitionPlacement_DoorCustom_Exit:
099DC                           	LDA byte_RAM_E7
099DC                           	ASL A
099DC                           	ASL A
099DC                           	ASL A
099DC                           	ASL A
099DC                           	STA PlayerXLo
099DC                           	LDA byte_RAM_E7
099DC                           	AND #$F0
099DC                           	STA PlayerYLo
099DC                           	JMP AreaTransitionPlacement_Door_Exit
099DC                           ENDIF
099DC                           
099DC                           
099DC                           ;
099DC                           ; Place the player at the top of the screen in the middle horizontally
099DC                           ;
099DC                           AreaTransitionPlacement_Jar:
099DC A9 00                     	LDA #$00
099DE 85 32                     	STA PlayerYLo
099E0                           
099E0                           ;
099E0                           ; Place the player in the air in the middle of the screen horizontally
099E0                           ;
099E0                           AreaTransitionPlacement_Middle:
099E0 A9 01                     	LDA #$01
099E2 85 99                     	STA PlayerInAir
099E4 A9 78                     	LDA #$78
099E6 85 28                     	STA PlayerXLo
099E8 60                        	RTS
099E9                           
099E9                           ;
099E9                           ; Looks for a climbable tile (vine/chain/ladder) and positions the player at it
099E9                           ;
099E9                           ; The implementation of this requires the destination to be at the OPPOSITE
099E9                           ; side of the screen from the origin horizontally, otherwise the player will
099E9                           ; be climbing on nothing.
099E9                           ;
099E9                           AreaTransitionPlacement_Climbing:
099E9 A5 28                     	LDA PlayerXLo
099EB                           	; Switch the x-position to the opposite side of the screen
099EB 18                        	CLC
099EC 69 08                     	ADC #$08
099EE 29 F0                     	AND #$F0
099F0 49 F0                     	EOR #$F0
099F2 85 28                     	STA PlayerXLo
099F4                           
099F4                           	; Switch the y-position to the opposite side of the screen
099F4 AD 2B 04                  	LDA PlayerScreenYLo
099F7 18                        	CLC
099F8 69 08                     	ADC #$08
099FA 29 F0                     	AND #$F0
099FC 49 10                     	EOR #$10
099FE 85 32                     	STA PlayerYLo
09A00 C9 F0                     	CMP #$F0
09A02 F0 02                     	BEQ AreaTransitionPlacement_Climbing_Exit
09A04                           
09A04 C6 1E                     	DEC PlayerYHi
09A06                           
09A06                           AreaTransitionPlacement_Climbing_Exit:
09A06                           IFDEF ROBUST_TRANSITION_SEARCH
09A06                           	JSR AreaTransitionPlacement_ClimbingCustom
09A06                           
09A06                           	BCS AreaTransitionPlacement_Climbing_SetPlayerAnimationFrame
09A06                           
09A06                           	; Try the opposite side of the screen
09A06                           	LDA PlayerYLo
09A06                           	EOR #$10
09A06                           	STA PlayerYLo
09A06                           
09A06                           	LDA PlayerYHi
09A06                           	EOR #$FF
09A06                           	STA PlayerYHi
09A06                           
09A06                           	JSR AreaTransitionPlacement_ClimbingCustom
09A06                           	BCC AreaTransitionPlacement_Climbing_UnreversePositionY
09A06                           
09A06                           	; Found something on the opposite side, so flip Y velocity
09A06                           	LDY #$01
09A06                           	LDA PlayerYVelocity
09A06                           	BMI AreaTransitionPlacement_Climbing_SetYVelocity
09A06                           
09A06                           	INY
09A06                           AreaTransitionPlacement_Climbing_SetYVelocity:
09A06                           	LDA ClimbSpeed, Y
09A06                           	STA PlayerYVelocity
09A06                           
09A06                           	BNE AreaTransitionPlacement_Climbing_SetPlayerAnimationFrame
09A06                           
09A06                           AreaTransitionPlacement_Climbing_UnreversePositionY:
09A06                           	; Unflip Y position
09A06                           	LDA PlayerYLo
09A06                           	EOR #$10
09A06                           	STA PlayerYLo
09A06                           
09A06                           	LDA PlayerYHi
09A06                           	EOR #$FF
09A06                           	STA PlayerYHi
09A06                           
09A06                           AreaTransitionPlacement_Climbing_SetPlayerAnimationFrame:
09A06                           ENDIF
09A06                           
09A06 A9 0A                     	LDA #SpriteAnimation_Climbing
09A08 85 C7                     	STA PlayerAnimationFrame
09A0A 60                        	RTS
09A0B                           
09A0B                           
09A0B                           IFDEF ROBUST_TRANSITION_SEARCH
09A0B                           ;
09A0B                           ; Ouput
09A0B                           ;   C = set if a climbable tile was found
09A0B                           ;
09A0B                           AreaTransitionPlacement_ClimbingCustom:
09A0B                           	; Target x-position
09A0B                           	LDA PlayerXLo
09A0B                           	LSR A
09A0B                           	LSR A
09A0B                           	LSR A
09A0B                           	LSR A
09A0B                           	STA byte_RAM_E5
09A0B                           
09A0B                           	; Target y-position
09A0B                           	LDA PlayerYLo
09A0B                           	EOR #$10
09A0B                           	CLC
09A0B                           	ADC #$10
09A0B                           	CMP #$F0
09A0B                           	BNE AreaTransitionPlacement_ClimbingCustom_AfterNudge
09A0B                           	SEC
09A0B                           	SBC #$10
09A0B                           AreaTransitionPlacement_ClimbingCustom_AfterNudge:
09A0B                           	STA byte_RAM_E6
09A0B                           
09A0B                           	; Read the target tile
09A0B                           	LDA CurrentLevelEntryPage
09A0B                           	STA byte_RAM_E8
09A0B                           	JSR SetTileOffsetAndAreaPageAddr_Bank1
09A0B                           	LDY byte_RAM_E7
09A0B                           	LDA (byte_RAM_1), Y
09A0B                           
09A0B                           	; Check if the target tile is climbable
09A0B                           	LDY #$09
09A0B                           AreaTransitionPlacement_ClimbingCustom_CheckLoop:
09A0B                           	CMP ClimbableTiles, Y
09A0B                           	BNE AreaTransitionPlacement_ClimbingCustom_LoopNext
09A0B                           
09A0B                           	RTS
09A0B                           
09A0B                           AreaTransitionPlacement_ClimbingCustom_LoopNext:
09A0B                           	DEY
09A0B                           	BPL AreaTransitionPlacement_ClimbingCustom_CheckLoop
09A0B                           
09A0B                           	; Target tile is not climbable; start at the right and work backwards
09A0B                           	LDA byte_RAM_E7
09A0B                           	AND #$F0
09A0B                           	STA byte_RAM_E6
09A0B                           
09A0B                           	LDA #$0F
09A0B                           	STA byte_RAM_3
09A0B                           	CLC
09A0B                           	ADC byte_RAM_E6
09A0B                           	STA byte_RAM_E7
09A0B                           
09A0B                           AreaTransitionPlacement_ClimbingCustom_Loop:
09A0B                           	; Read the target tile
09A0B                           	LDY byte_RAM_E7
09A0B                           	LDA (byte_RAM_1), Y
09A0B                           	LDY #$09
09A0B                           
09A0B                           AreaTransitionPlacement_ClimbingCustom_InnerLoop:
09A0B                           	CMP ClimbableTiles, Y
09A0B                           	BEQ AreaTransitionPlacement_ClimbingCustom_SetXPosition
09A0B                           	DEY
09A0B                           	BPL AreaTransitionPlacement_ClimbingCustom_InnerLoop
09A0B                           
09A0B                           	; No matches on this tile, check the next one or give up
09A0B                           	DEC byte_RAM_E7
09A0B                           	DEC byte_RAM_3
09A0B                           	BMI AreaTransitionPlacement_ClimbingCustom_NotFound
09A0B                           
09A0B                           	JMP AreaTransitionPlacement_ClimbingCustom_Loop
09A0B                           
09A0B                           AreaTransitionPlacement_ClimbingCustom_SetXPosition:
09A0B                           	LDA byte_RAM_3
09A0B                           	ASL A
09A0B                           	ASL A
09A0B                           	ASL A
09A0B                           	ASL A
09A0B                           	STA PlayerXLo
09A0B                           
09A0B                           	SEC
09A0B                           	RTS
09A0B                           
09A0B                           AreaTransitionPlacement_ClimbingCustom_NotFound:
09A0B                           	CLC
09A0B                           	RTS
09A0B                           AreaTransitionPlacement_ClimbingCustom_Fallback:
09A0B                           	JMP AreaTransitionPlacement_ClimbingCustom_Exit
09A0B                           ENDIF
09A0B                           
09A0B                           
09A0B                           AreaTransitionPlacement_Subspace:
09A0B AD 28 04                  	LDA PlayerScreenX
09A0E 38                        	SEC
09A0F E5 BA                     	SBC byte_RAM_BA
09A11 49 FF                     	EOR #$0FF
09A13 18                        	CLC
09A14 69 F1                     	ADC #$F1
09A16 85 28                     	STA PlayerXLo
09A18 AD 2B 04                  	LDA PlayerScreenYLo
09A1B 85 32                     	STA PlayerYLo
09A1D CE 1B 04                  	DEC PlayerLock
09A20 A9 60                     	LDA #$60
09A22 8D B7 04                  	STA SubspaceTimer
09A25 60                        	RTS
09A26                           
09A26                           
09A26                           AreaTransitionPlacement_Rocket:
09A26 20 E0 99                  	JSR AreaTransitionPlacement_Middle
09A29 A9 60                     	LDA #$60
09A2B 85 32                     	STA PlayerYLo
09A2D 60                        	RTS
09A2E                           
09A2E                           
09A2E                           ;
09A2E                           ; @TODO
09A2E                           ;
09A2E                           ; Input
09A2E                           ;   Y = PlayerYHi
09A2E                           ;   A = PlayerYLo
09A2E                           ; Output
09A2E                           ;   Y = PlayerYHi
09A2E                           ;   A = PlayerYLo
09A2E                           ;
09A2E                           sub_BANK0_95AF:
09A2E C0 00                     	CPY #$00
09A30 30 0F                     	BMI locret_BANK0_95C2
09A32                           
09A32 48                        	PHA
09A33 98                        	TYA
09A34 0A                        	ASL A
09A35 0A                        	ASL A
09A36 0A                        	ASL A
09A37 0A                        	ASL A
09A38 85 0F                     	STA byte_RAM_F
09A3A 68                        	PLA
09A3B 38                        	SEC
09A3C E5 0F                     	SBC byte_RAM_F
09A3E B0 01                     	BCS locret_BANK0_95C2
09A40                           
09A40 88                        	DEY
09A41                           
09A41                           locret_BANK0_95C2:
09A41 60                        	RTS
09A42                           
09A42                           
09A42                           IFNDEF RANDOMIZER_T
09A42                           IFNDEF ROBUST_TRANSITION_SEARCH 
09A42                           
09A42                           ; Unused space in the original ($95C3 - $95FF)
09A42                           unusedSpace $9600, $FF
09A42                           ENDIF
09A42                           ENDIF
09A42                           
09A42                           
09A42                           TitleScreenPPUDataPointers:
09A42 01 03                     	.dw PPUBuffer_301
09A44 61 9A                     	.dw TitleLayout
09A46                           
09A46                           
09A46                           ; =============== S U B R O U T I N E =======================================
09A46                           
09A46                           WaitForNMI_TitleScreen_TurnOnPPU:
09A46 A9 1E                     	LDA #PPUMask_ShowLeft8Pixels_BG | PPUMask_ShowLeft8Pixels_SPR | PPUMask_ShowBackground | PPUMask_ShowSprites
09A48 85 FE                     	STA PPUMaskMirror
09A4A                           
09A4A                           ; End of function WaitForNMI_TitleScreen_TurnOnPPU
09A4A                           
09A4A                           ; =============== S U B R O U T I N E =======================================
09A4A                           
09A4A                           WaitForNMI_TitleScreen:
09A4A A5 11                     	LDA ScreenUpdateIndex
09A4C 0A                        	ASL A
09A4D AA                        	TAX
09A4E BD 42 9A                  	LDA TitleScreenPPUDataPointers, X
09A51 85 F0                     	STA RAM_PPUDataBufferPointer
09A53 BD 43 9A                  	LDA TitleScreenPPUDataPointers + 1, X
09A56 85 F1                     	STA RAM_PPUDataBufferPointer + 1
09A58 A9 00                     	LDA #$00
09A5A 85 EB                     	STA NMIWaitFlag
09A5C                           
09A5C                           WaitForNMI_TitleScreenLoop:
09A5C A5 EB                     	LDA NMIWaitFlag
09A5E 10 FC                     	BPL WaitForNMI_TitleScreenLoop
09A60                           
09A60 60                        	RTS
09A61                           
09A61                           ; End of function WaitForNMI_TitleScreen
09A61                           
09A61                           
09A61                           TitleLayout:
09A61                           	; red lines, vertical, left
09A61 20 00 DE FD               	.db $20, $00, $DE, $FD
09A65 20 01 DE FD               	.db $20, $01, $DE, $FD
09A69 20 02 DE FD               	.db $20, $02, $DE, $FD
09A6D 20 03 DE FD               	.db $20, $03, $DE, $FD
09A71                           	; red lines, vertical, right
09A71 20 1C DE FD               	.db $20, $1C, $DE, $FD
09A75 20 1D DE FD               	.db $20, $1D, $DE, $FD
09A79 20 1E DE FD               	.db $20, $1E, $DE, $FD
09A7D 20 1F DE FD               	.db $20, $1F, $DE, $FD
09A81                           	; red lines, horizontal, top
09A81 20 03 5D FD               	.db $20, $03, $5D, $FD
09A85 20 23 5D FD               	.db $20, $23, $5D, $FD
09A89 20 43 5D FD               	.db $20, $43, $5D, $FD
09A8D 20 63 5D FD               	.db $20, $63, $5D, $FD
09A91                           	; red lines, vertical, bottom
09A91 23 63 5D FD               	.db $23, $63, $5D, $FD
09A95 23 83 5D FD               	.db $23, $83, $5D, $FD
09A99 23 A3 5D FD               	.db $23, $A3, $5D, $FD
09A9D                           
09A9D                           	; ornate frame, top
09A9D 20 68 10 48 4A 4C 4E 50.. 	.db $20, $68, $10, $48, $4A, $4C, $4E, $50, $51, $52, $53, $54, $55, $56, $57, $58, $5A, $5C, $5E
09AB0 20 84 08 FD 22 23 24 49.. 	.db $20, $84, $08, $FD, $22, $23, $24, $49, $4B, $4D, $4F
09ABB 20 94 08 59 5B 5D 5F 2E.. 	.db $20, $94, $08, $59, $5B, $5D, $5F, $2E, $2F, $30, $FD
09AC6 20 A4 03 25 26 27         	.db $20, $A4, $03, $25, $26, $27
09ACC 20 B9 03 31 32 33         	.db $20, $B9, $03, $31, $32, $33
09AD2 20 C4 03 28 29 2A         	.db $20, $C4, $03, $28, $29, $2A
09AD8 20 D9 03 34 35 36         	.db $20, $D9, $03, $34, $35, $36
09ADE 20 E3 03 2B 2C 2D         	.db $20, $E3, $03, $2B, $2C, $2D
09AE4 20 FA 03 37 38 39         	.db $20, $FA, $03, $37, $38, $39
09AEA 21 03 02 3A 3B            	.db $21, $03, $02, $3A, $3B
09AEF 21 1B 02 40 41            	.db $21, $1B, $02, $40, $41
09AF4                           	; ornate frame, lines down, top
09AF4 21 23 C6 3C               	.db $21, $23, $C6, $3C
09AF8 21 3C C6 42               	.db $21, $3C, $C6, $42
09AFC                           	; ornate frame, middle
09AFC 21 E3 01 3D               	.db $21, $E3, $01, $3D
09B00 21 FC 01 60               	.db $21, $FC, $01, $60
09B04 22 02 02 3E 3F            	.db $22, $02, $02, $3E, $3F
09B09 22 1C 02 61 62            	.db $22, $1C, $02, $61, $62
09B0E 22 22 02 43 44            	.db $22, $22, $02, $43, $44
09B13 22 3C 02 63 64            	.db $22, $3C, $02, $63, $64
09B18 22 43 01 45               	.db $22, $43, $01, $45
09B1C 22 5C 01 65               	.db $22, $5C, $01, $65
09B20                           	; ornate frame, lines down, bottom
09B20 22 63 C6 3C               	.db $22, $63, $C6, $3C
09B24 22 7C C4 42               	.db $22, $7C, $C4, $42
09B28                           	; ornate frame, bottom, characters
09B28 22 C4 02 A6 A8            	.db $22, $C4, $02, $A6, $A8
09B2D 22 E4 02 A7 A9            	.db $22, $E4, $02, $A7, $A9
09B32 22 FA 04 80 82 88 8A      	.db $22, $FA, $04, $80, $82, $88, $8A
09B39 23 04 02 90 92            	.db $23, $04, $02, $90, $92
09B3E 23 14 02 9E A0            	.db $23, $14, $02, $9E, $A0
09B43 23 1A 04 81 83 89 8B      	.db $23, $1A, $04, $81, $83, $89, $8B
09B4A 23 23 03 46 91 93         	.db $23, $23, $03, $46, $91, $93
09B50 23 2A 02 A2 A4            	.db $23, $2A, $02, $A2, $A4
09B55 23 2E 0B 67 6C 6E 70 72.. 	.db $23, $2E, $0B, $67, $6C, $6E, $70, $72, $69, $9F, $A1, $75, $98, $9A
09B63 23 3A 04 84 86 8C 8E      	.db $23, $3A, $04, $84, $86, $8C, $8E
09B6A 23 43 1B 47 94 96 74 74.. 	.db $23, $43, $1B, $47, $94, $96, $74, $74, $74, $74, $A3, $A5, $74, $66, $68
09B79 6D 6F 71 73 6A 6B 74 74.. 	.db $6D, $6F, $71, $73, $6A, $6B, $74, $74, $99, $9B, $74, $85, $87, $8D, $8F
09B88 23 64 05 95 97 FD AA AB   	.db $23, $64, $05, $95, $97, $FD, $AA ,$AB
09B90 23 77 04 9C 9D AA AB      	.db $23, $77, $04, $9C, $9D, $AA, $AB
09B97 23 89 02 AA AB            	.db $23, $89, $02, $AA, $AB
09B9C                           
09B9C                           	; SUPER
09B9C                           	;                  SSSSSSSS  UUUUUUUU  PPPPPPPP  EEEEEEEE  RRRRRRRR
09B9C 20 CB 0A 00 01 08 08 FC.. 	.db $20, $CB, $0A, $00, $01, $08, $08, $FC, $01, $FC, $08, $FC, $01
09BA9 20 EB 0A 02 03 08 08 0A.. 	.db $20, $EB, $0A, $02, $03, $08, $08, $0A, $05, $0B, $0C, $0A, $0D
09BB6 21 0B 0A 04 05 04 05 0E.. 	.db $21, $0B, $0A, $04, $05, $04, $05, $0E, $07, $FC, $08, $0E, $08
09BC3 21 2B 05 06 07 06 07 09   	.db $21, $2B, $05, $06, $07, $06, $07, $09
09BCB 21 31 04 76 09 09 09      	.db $21, $31, $04, $76, $09, $09, $09
09BD2                           
09BD2                           	; TM
09BD2                           	;                  TTT  MMM
09BD2 21 38 02 F9 FA            	.db $21, $38, $02, $F9, $FA
09BD7                           
09BD7                           	; MARIO
09BD7                           	;                  MMMMMMMMMMMMM  AAAAAAAA  RRRRRRRR  III  OOOOOOOO
09BD7 21 46 0A 00 0F 01 00 01.. 	.db $21, $46, $0A, $00, $0F, $01, $00, $01, $FC, $01, $08, $00, $01
09BE4 21 66 0A 10 10 08 10 08.. 	.db $21, $66, $0A, $10, $10, $08, $10, $08, $10, $08, $08, $10, $08
09BF1 21 86 0A 08 08 08 08 08.. 	.db $21, $86, $0A, $08, $08, $08, $08, $08, $13, $0D, $08, $08, $08
09BFE 21 A6 0A 08 08 08 FC 08.. 	.db $21, $A6, $0A, $08, $08, $08, $FC, $08, $0E, $08, $08, $08, $08
09C0B 21 C6 0A 08 08 08 10 08.. 	.db $21, $C6, $0A, $08, $08, $08, $10, $08, $08, $08, $08, $04, $05
09C18 21 E6 0A 09 09 09 09 09.. 	.db $21, $E6, $0A, $09, $09, $09, $09, $09, $09, $09, $09, $06, $07
09C25                           
09C25                           	; BROS
09C25                           	;                  BBBBBBBB  RRRRRRRR  OOOOOOOO  SSSSSSSS
09C25 21 51 08 FC 01 FC 01 00.. 	.db $21, $51, $08, $FC, $01, $FC, $01, $00, $01, $00, $01 ; BROS
09C30 21 71 08 10 08 10 08 10.. 	.db $21, $71, $08, $10, $08, $10, $08, $10, $08, $10, $08
09C3B 21 91 08 13 0D 13 0D 08.. 	.db $21, $91, $08, $13, $0D, $13, $0D, $08, $08, $77, $03
09C46 21 B1 08 0E 08 0E 08 08.. 	.db $21, $B1, $08, $0E, $08, $0E, $08, $08, $08, $12, $08
09C51 21 D1 09 13 05 08 08 04.. 	.db $21, $D1, $09, $13, $05, $08, $08, $04, $05, $04, $05, $08
09C5D 21 F1 09 11 07 09 09 06.. 	.db $21, $F1, $09, $11, $07, $09, $09, $06, $07, $06, $07, $09
09C69                           
09C69                           IFDEF RANDOMIZER_T
09C69 22 06 04 14 15 16 17            .BYTE $22,$6,4,$14,$15,$16,$17		  
09C70 22 26 04 18 19 1A 1B            .BYTE $22,$26,4,$18,$19,$1A,$1B		  
09C77 22 46 04 1C 1D 1E 1F            .BYTE $22,$46,4,$1C,$1D,$1E,$1F		  
09C7E 22 66 04 FC FC FC 20            .BYTE $22,$66,4,$FC,$FC,$FC,$20		  
09C85 22 86 04 76 76 76 21            .BYTE $22,$86,4,$76,$76,$76,$21		  
09C8C                           FunkyLittleSeedBlock:
09C8C 22 0B 0F DD E8 E8 EB FB..       .BYTE $22, $B, $0F, $DD, $E8, $E8, $EB, $FB, $EB, $DA, $E7, $DD, $E8, $E6, $E2, $F3, $DE, $EB;
09C9E                           FunkyLittleSeedBlock2:
09C9E 22 2B 0F E7 E8 FB E8 DB..       .BYTE $22, $2B, $0F, $e7, $e8, $fb, $e8, $db, $e3, $de, $dc, $ed, $e2, $ef, $de, $fb, $fb, $fb;  
09CB0                           FunkyLittleSeedBlock3:
09CB0 22 4B 0F CF CF CF CF CF..       .BYTE $22, $4B, $0F, $CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF
09CC2                           FunkyLittleSeedBlock4:
09CC2 22 6B 0F CF CF CF CF CF..       .BYTE $22, $6B, $0F, $CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF
09CD4                           FunkyLittleSeedBlock5:
09CD4 22 8B 0F CF CF CF CF CF..       .BYTE $22, $8B, $0F, $CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF
09CE6                           FunkyLittleSeedBlock6:
09CE6 22 A7 13 CF CF CF CF CF..       .BYTE $22, $a7, $13, $CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF
09CFC                           FunkyLittleSeedBlock7:
09CFC 22 C7 13 CF CF CF CF CF..       .BYTE $22, $c7, $13, $CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF
09D12                           ENDIF
09D12                           
09D12                           IFNDEF RANDOMIZER_T
09D12                           	; 2
09D12                           	;             22222222222222222222222
09D12                           	.db $22, $0E, $04, $14, $15, $16, $17
09D12                           	.db $22, $2E, $04, $18, $19, $1A, $1B
09D12                           	.db $22, $4E, $04, $1C, $1D, $1E, $1F
09D12                           	.db $22, $6E, $04, $FC, $FC, $FC, $20
09D12                           	.db $22, $8E, $04, $76, $76, $76, $21
09D12                           ENDIF
09D12                           
09D12                           
09D12                           IFNDEF RANDOMIZER_T
09D12                           	; (C) 1988
09D12                           	;                  (C)  111  999  888  888
09D12                           	.db $22, $E9, $05, $F8, $D1, $D9, $D8, $D8  ; (C) 1988
09D12                           
09D12                           	; NINTENDO
09D12                           	;                  NNN  III  NNN  TTT  EEE  NNN  DDD  OOO
09D12                           	.db $22, $EF, $08, $E7, $E2, $E7, $ED, $DE, $E7, $DD, $E8
09D12                           ENDIF
09D12                           IFDEF RANDOMIZER_T
09D12                           	; (C) 1988
09D12                           	;                  (C)  111  999  888  888
09D12 22 E7 05 F8 D1 D9 D8 D8   	.db $22, $E7, $05, $F8, $D1, $D9, $D8, $D8  ; (C) 1988
09D1A                           
09D1A 22 EC 05 F4 D2 D0 D1 D9   	.db $22, $EC, $05, $F4, $D2, $D0, $D1, $D9  ; (C) 1988
09D22                           
09D22                           	; NINTENDO
09D22                           	;                  NNN  III  NNN  TTT  EEE  NNN  DDD  OOO
09D22 22 F2 08 E7 E2 E7 ED DE.. 	.db $22, $F2, $08, $E7, $E2, $E7, $ED, $DE, $E7, $DD, $E8
09D2D                           ENDIF
09D2D                           
09D2D                           IFNDEF PLAYER_STUFF
09D2D                           	.db $23, $CA, $04, $80, $A0, $A0, $20
09D2D                           	.db $23, $D1, $0E, $80, $A8, $AA, $AA, $A2, $22, $00, $00, $88, $AA, $AA, $AA, $AA, $22
09D2D                           	.db $23, $E3, $02, $88, $22
09D2D                           	.db $23, $EA, $04, $F0, $F8, $F2, $F0
09D2D                           ENDIF
09D2D 00                        	.db $00
09D2E                           
09D2E                           IFDEF PAD_TITLE_SCREEN_PPU_DATA
09D2E                           	.pad TitleLayout + $300, $00
09D2E                           ENDIF
09D2E                           
09D2E                           TitleBackgroundPalettes:
09D2E                           IFDEF RANDOMIZER_T 
09D2E 22 37 99 05                   .db $22,$37,$99,$5
09D32                           ENDIF
09D32                           IFNDEF RANDOMIZER_T
09D32                           	.db $22, $37, $16, $07 ; Most of screen, outline, etc.
09D32                           ENDIF
09D32 22 30 31 0F               	.db $22, $30, $31, $0F ; Unused
09D36 22 30 0F 0F               	.db $22, $30, $0F, $0F ; Logo
09D3A 22 30 0F 0F               	.db $22, $30, $0F, $0F ; Copyright, Story
09D3E                           
09D3E                           IFNDEF RANDOMIZER_T
09D3E                           TitleSpritePalettes:
09D3E                           	.db $22, $30, $28, $0F ; Unused DDP character palettes
09D3E                           	.db $22, $30, $25, $0F ; There are no sprites on the title screen,
09D3E                           	.db $22, $30, $12, $0F ; so these are totally unused
09D3E                           	.db $22, $30, $23, $0F
09D3E                           ENDIF
09D3E                           IFDEF RANDOMIZER_T
09D3E                           TitleSpritePalettes:
09D3E 0F 01 16 27               	.db $0F,$01,$16,$27
09D42 0F 06 25 36               	.db $0F,$06,$25,$36
09D46 0F 01 30 27               	.db $0F,$01,$30,$27
09D4A 0F 01 2A 36               	.db $0F,$01,$2A,$36
09D4E                           ENDIF
09D4E                           
09D4E                           TitleStoryText_STORY:
09D4E EC ED E8 EB F2            	.db $EC, $ED, $E8, $EB, $F2 ; STORY
09D53                           
09D53                           IFNDEF RANDOMIZER_T
09D53                           TitleStoryTextPointersHi:
09D53                           	.db >TitleStoryText_Line01
09D53                           	.db >TitleStoryText_Line02
09D53                           	.db >TitleStoryText_Line03
09D53                           	.db >TitleStoryText_Line04
09D53                           	.db >TitleStoryText_Line05
09D53                           	.db >TitleStoryText_Line06
09D53                           	.db >TitleStoryText_Line07
09D53                           	.db >TitleStoryText_Line08
09D53                           	.db >TitleStoryText_Line08 ; For some reason line 8 is referenced twice here, but not used
09D53                           	.db >TitleStoryText_Line09
09D53                           	.db >TitleStoryText_Line10
09D53                           	.db >TitleStoryText_Line11
09D53                           	.db >TitleStoryText_Line12
09D53                           	.db >TitleStoryText_Line13
09D53                           	.db >TitleStoryText_Line14
09D53                           	.db >TitleStoryText_Line15
09D53                           	.db >TitleStoryText_Line16
09D53                           
09D53                           TitleStoryTextPointersLo:
09D53                           	.db <TitleStoryText_Line01
09D53                           	.db <TitleStoryText_Line02
09D53                           	.db <TitleStoryText_Line03
09D53                           	.db <TitleStoryText_Line04
09D53                           	.db <TitleStoryText_Line05
09D53                           	.db <TitleStoryText_Line06
09D53                           	.db <TitleStoryText_Line07
09D53                           	.db <TitleStoryText_Line08
09D53                           	.db <TitleStoryText_Line08 ; For some reason line 8 is referenced twice here, but not used
09D53                           	.db <TitleStoryText_Line09
09D53                           	.db <TitleStoryText_Line10
09D53                           	.db <TitleStoryText_Line11
09D53                           	.db <TitleStoryText_Line12
09D53                           	.db <TitleStoryText_Line13
09D53                           	.db <TitleStoryText_Line14
09D53                           	.db <TitleStoryText_Line15
09D53                           	.db <TitleStoryText_Line16
09D53                           ENDIF
09D53                           
09D53                           IFDEF RANDOMIZER_T
09D53                           TitleStoryTextPointersHi:
09D53 9D                        	.db >TitleStoryText_Line01
09D54 9D                        	.db >TitleStoryText_Line02
09D55 9D                        	.db >TitleStoryText_Line03
09D56 9D                        	.db >TitleStoryText_Line04
09D57 9D                        	.db >TitleStoryText_Line05
09D58 9D                        	.db >TitleStoryText_Line06
09D59 9E                        	.db >TitleStoryText_Line07
09D5A 9E                        	.db >TitleStoryText_Line08
09D5B 9E                        	.db >TitleStoryText_Line09
09D5C 9E                        	.db >TitleStoryText_Line10
09D5D 9E                        	.db >TitleStoryText_Line11
09D5E 9E                        	.db >TitleStoryText_Line12
09D5F 9E                        	.db >TitleStoryText_Line13
09D60 9E                        	.db >TitleStoryText_Line14
09D61 9E                        	.db >TitleStoryText_Line15
09D62 9E                        	.db >TitleStoryText_Line16
09D63 9E                        	.db >TitleStoryText_LineBlank
09D64 9E                        	.db >TitleStoryText_LineCredit1
09D65 9F                        	.db >TitleStoryText_LineCredit2
09D66 9F                        	.db >TitleStoryText_LineCredit3
09D67 9F                        	.db >TitleStoryText_LineCredit4
09D68 9F                        	.db >TitleStoryText_LineCredit5
09D69 9F                        	.db >TitleStoryText_LineCredit6
09D6A 9F                        	.db >TitleStoryText_LineCredit7
09D6B 9F                        	.db >TitleStoryText_LineCredit8
09D6C 9F                        	.db >TitleStoryText_LineCredit9
09D6D 9F                        	.db >TitleStoryText_LineCreditA
09D6E 9F                        	.db >TitleStoryText_LineCreditB
09D6F 9F                        	.db >TitleStoryText_LineCreditC
09D70 A0                        	.db >TitleStoryText_LineCreditD
09D71 A0                        	.db >TitleStoryText_LineCreditE
09D72 A0                        	.db >TitleStoryText_LineCreditF
09D73 9E                        	.db >TitleStoryText_LineStart
09D74 9E                        	.db >TitleStoryText_LineBlank
09D75                           
09D75                           TitleStoryTextPointersLo:
09D75 97                        	.db <TitleStoryText_Line01
09D76 AB                        	.db <TitleStoryText_Line02
09D77 BF                        	.db <TitleStoryText_Line03
09D78 D3                        	.db <TitleStoryText_Line04
09D79 E7                        	.db <TitleStoryText_Line05
09D7A FB                        	.db <TitleStoryText_Line06
09D7B 0F                        	.db <TitleStoryText_Line07
09D7C 23                        	.db <TitleStoryText_Line08
09D7D 37                        	.db <TitleStoryText_Line09
09D7E 4B                        	.db <TitleStoryText_Line10
09D7F 5F                        	.db <TitleStoryText_Line11
09D80 73                        	.db <TitleStoryText_Line12
09D81 87                        	.db <TitleStoryText_Line13
09D82 9B                        	.db <TitleStoryText_Line14
09D83 AF                        	.db <TitleStoryText_Line15
09D84 C3                        	.db <TitleStoryText_Line16
09D85 EB                        	.db <TitleStoryText_LineBlank
09D86 FF                        	.db <TitleStoryText_LineCredit1
09D87 13                        	.db <TitleStoryText_LineCredit2
09D88 27                        	.db <TitleStoryText_LineCredit3
09D89 3B                        	.db <TitleStoryText_LineCredit4
09D8A 4F                        	.db <TitleStoryText_LineCredit5
09D8B 65                        	.db <TitleStoryText_LineCredit6
09D8C 79                        	.db <TitleStoryText_LineCredit7
09D8D 8D                        	.db <TitleStoryText_LineCredit8
09D8E A1                        	.db <TitleStoryText_LineCredit9
09D8F B5                        	.db <TitleStoryText_LineCreditA
09D90 D5                        	.db <TitleStoryText_LineCreditB
09D91 F3                        	.db <TitleStoryText_LineCreditC
09D92 0B                        	.db <TitleStoryText_LineCreditD
09D93 1F                        	.db <TitleStoryText_LineCreditE
09D94 3B                        	.db <TitleStoryText_LineCreditF
09D95 9E                        	.db >TitleStoryText_LineStart
09D96 EB                        	.db <TitleStoryText_LineBlank
09D97                           ENDIF
09D97                           
09D97                           TitleStoryText_Line01:
09D97 F0 E1 DE E7 FB FB E6 DA.. 	.db $F0, $E1, $DE, $E7, $FB, $FB, $E6, $DA, $EB, $E2, $E8, $FB, $E8, $E9, $DE, $E7
09DA7 DE DD FB DA               	.db $DE, $DD, $FB, $DA ; WHEN MARIO OPENED A
09DAB                           
09DAB                           TitleStoryText_Line02:
09DAB DD E8 E8 EB FB DA DF ED.. 	.db $DD, $E8, $E8, $EB, $FB, $DA, $DF, $ED, $DE, $EB, $FB, $FB, $DC, $E5, $E2, $E6
09DBB DB E2 E7 E0               	.db $DB, $E2, $E7, $E0 ; DOOR AFTER CLIMBING
09DBF                           
09DBF                           TitleStoryText_Line03:
09DBF DA FB E5 E8 E7 E0 FB EC.. 	.db $DA, $FB, $E5, $E8, $E7, $E0, $FB, $EC, $ED, $DA, $E2, $EB, $FB, $E2, $E7, $FB
09DCF FB E1 E2 EC               	.db $FB, $E1, $E2, $EC ; A LONG STAIR IN HIS
09DD3                           
09DD3                           TitleStoryText_Line04:
09DD3 DD EB DE DA E6 F7 FB DA.. 	.db $DD, $EB, $DE, $DA, $E6, $F7, $FB, $DA, $E7, $E8, $ED, $E1, $DE, $EB, $FB, $F0
09DE3 E8 EB E5 DD               	.db $E8, $EB, $E5, $DD ; DREAM, ANOTHER WORLD
09DE7                           
09DE7                           TitleStoryText_Line05:
09DE7 EC E9 EB DE DA DD FB FB.. 	.db $EC, $E9, $EB, $DE, $DA, $DD, $FB, $FB, $FB, $DB, $DE, $DF, $E8, $EB, $DE, $FB
09DF7 FB E1 E2 E6               	.db $FB, $E1, $E2, $E6 ; SPREAD BEFORE HIM
09DFB                           
09DFB                           TitleStoryText_Line06:
09DFB DA E7 DD FB E1 DE FB E1.. 	.db $DA, $E7, $DD, $FB, $E1, $DE, $FB, $E1, $DE, $DA, $EB, $DD, $FB, $DA, $FB, $EF
09E0B E8 E2 DC DE               	.db $E8, $E2, $DC, $DE ; AND HE HEARD A VOICE
09E0F                           
09E0F                           TitleStoryText_Line07:
09E0F DC DA E5 E5 FB DF E8 EB.. 	.db $DC, $DA, $E5, $E5, $FB, $DF, $E8, $EB, $FB, $E1, $DE, $E5, $E9, $FB, $ED, $E8
09E1F FB FB DB DE               	.db $FB, $FB, $DB, $DE ; CALL FOR HELP TO BE
09E23                           
09E23                           TitleStoryText_Line08:
09E23 FB DF EB DE DE DD FB FB.. 	.db $FB, $DF, $EB, $DE, $DE, $DD, $FB, $FB, $DF, $EB, $E8, $E6, $FB, $DA, $FB, $EC
09E33 E9 DE E5 E5               	.db $E9, $DE, $E5, $E5 ; FREED FROM A SPELL
09E37                           
09E37                           TitleStoryText_Line09:
09E37 DA DF ED DE EB FB FB DA.. 	.db $DA, $DF, $ED, $DE, $EB, $FB, $FB, $DA, $F0, $DA, $E4, $DE, $E7, $E2, $E7, $E0
09E47 F7 FB FB FB               	.db $F7, $FB, $FB, $FB ; AFTER AWAKENING,
09E4B                           
09E4B                           TitleStoryText_Line10:
09E4B E6 DA EB E2 E8 FB FB F0.. 	.db $E6, $DA, $EB, $E2, $E8, $FB, $FB, $F0, $DE, $E7, $ED, $FB, $ED, $E8, $FB, $FB
09E5B DA FB FB FB               	.db $DA, $FB, $FB, $FB ; MARIO WENT TO A
09E5F                           
09E5F                           TitleStoryText_Line11:
09E5F DC DA EF DE FB FB E7 DE.. 	.db $DC, $DA, $EF, $DE, $FB, $FB, $E7, $DE, $DA, $EB, $DB, $F2, $FB, $DA, $E7, $DD
09E6F FB FB ED E8               	.db $FB, $FB, $ED, $E8 ; CAVE NEARBY AND TO
09E73                           
09E73                           TitleStoryText_Line12:
09E73 E1 E2 EC FB FB EC EE EB.. 	.db $E1, $E2, $EC, $FB, $FB, $EC, $EE, $EB, $E9, $EB, $E2, $EC, $DE, $FB, $E1, $DE
09E83 FB EC DA F0               	.db $FB, $EC, $DA, $F0 ; HIS SURPRISE HE SAW
09E87                           
09E87                           TitleStoryText_Line13:
09E87 DE F1 DA DC ED E5 F2 FB.. 	.db $DE, $F1, $DA, $DC, $ED, $E5, $F2, $FB, $FB, $F0, $E1, $DA, $ED, $FB, $E1, $DE
09E97 FB EC DA F0               	.db $FB, $EC, $DA, $F0 ; EXACTLY WHAT HE SAW
09E9B                           
09E9B                           TitleStoryText_Line14:
09E9B E2 E7 FB E1 E2 EC FB DD.. 	.db $E2, $E7, $FB, $E1, $E2, $EC, $FB, $DD, $EB, $DE, $DA, $E6, $CF, $CF, $CF, $CF
09EAB FB FB FB FB               	.db $FB, $FB, $FB, $FB ; IN HIS DREAM....
09EAF                           
09EAF                           TitleStoryText_Line15:
09EAF FB FB FB FB FB FB FB FB.. 	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB
09EBF FB FB FB FB               	.db $FB, $FB, $FB, $FB ; (blank)
09EC3                           
09EC3                           TitleStoryText_LineStart:
09EC3                           TitleStoryText_Line16:
09EC3 FB FB E9 EE EC E1 FB EC.. 	.db $FB, $FB, $E9, $EE, $EC, $E1, $FB, $EC, $ED, $DA, $EB, $ED, $FB, $DB, $EE, $ED
09ED3 ED E8 E7 FB               	.db $ED, $E8, $E7, $FB ; PUSH START BUTTON
09ED7                           
09ED7                           IFDEF RANDOMIZER_T
09ED7                           TitleStoryText_LineExtra:
09ED7 FB FB FB FB FB FB FB FB.. 	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB
09EE7 FB FB FB FB               	.db $FB, $FB, $FB, $FB ; (blank)
09EEB                           
09EEB                           TitleStoryText_LineBlank:
09EEB FB FB FB FB FB FB FB FB.. 	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB
09EFB FB FB FB FB               	.db $FB, $FB, $FB, $FB ; (blank)
09EFF                           
09EFF                           TitleStoryText_LineCredit1:
09EFF E9 EB E8 E0 EB DA E6 E6..     .db $E9, $EB, $E8, $E0, $EB, $DA, $E6, $E6, $DE, $DD, $FB, $DB, $F2, $FB, $FB;
09F0E FB FB FB                  	.db $FB, $FB, $FB ; 
09F11 AC AE                     	.db $ac, $ae; sheepright
09F13                           
09F13                           TitleStoryText_LineCredit2:
09F13 E9 DE E9 E9 DE EB E9 E8..     .db $E9, $DE, $E9, $E9, $DE, $EB, $E9, $E8, $F0, $DE, $EB;
09F1E FB FB FB FB FB FB FB      	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB ; pepperpower
09F25 AD AF                     	.db $ad, $af; (blank)
09F27                           
09F27                           TitleStoryText_LineCredit3:
09F27 FB FB FB FB FB FB FB FB.. 	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB
09F37 FB FB FB FB               	.db $FB, $FB, $FB, $FB ; (blank)
09F3B                           
09F3B                           TitleStoryText_LineCredit4:
09F3B B4 B6                     	.db $b4, $b6; devilright
09F3D FB                        	.db $FB ; (blank)
09F3E DA EC E6 FB DD E8 DC EE..     .db $DA, $EC, $E6, $FB, $DD, $E8, $DC, $EE, $E6, $DE, $E7, $ED, $DA, $ED, $E2, $E8, $E7
09F4F                           
09F4F                           TitleStoryText_LineCredit5:
09F4F B5 B7 C9                  	.db $b5, $b7, $c9 ; (blank)
09F52 FB FB FB                  	.db $FB, $FB, $FB ; (blank)
09F55 FB                        	.db $FB;
09F56 F1 E4 DE DE E9 DE EB F7..     .db $F1, $E4, $DE, $DE, $E9, $DE, $EB, $F7, $FB, $E4, $E6, $DC, $E4, $FB, $FB
09F65                           
09F65                           TitleStoryText_LineCredit6:
09F65 FB FB FB FB FB FB FB FB.. 	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB
09F75 FB FB FB FB               	.db $FB, $FB, $FB, $FB ; (blank)
09F79                           
09F79                           TitleStoryText_LineCredit7:
09F79 DC EE EC ED E8 E6 FB E0..     .db $DC, $EE, $EC, $ED, $E8, $E6, $FB, $E0, $EB, $DA, $E9, $E1, $E2, $DC, $EC
09F88 FB FB FB                  	.db $FB, $FB, $FB ; (blank)
09F8B B0 B2                     	.db $b0, $b2; (blank)
09F8D                           
09F8D                           TitleStoryText_LineCredit8:
09F8D E9 DA E4 E8 F7 FB E9 DE..     .db $E9, $DA, $E4, $E8, $F7, $FB, $E9, $DE, $E9, $E9, $DE, $EB, $E9, $E8, $F0, $DE, $EB
09F9E FB B1 B3                  	.db $FB, $b1, $b3; (blank)
09FA1                           
09FA1                           TitleStoryText_LineCredit9:
09FA1 FB FB FB FB FB FB FB FB.. 	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB
09FB1 FB FB FB FB               	.db $FB, $FB, $FB, $FB ; (blank)
09FB5                           
09FB5                           TitleStoryText_LineCreditA:
09FB5 BC BE FB FB FB FB FB FB.. 	.db $BC, $BE, $FB, $FB, $FB, $FB, $FB, $FB, $FB
09FBE E9 EB E8 E0 FB DA EC EC..     .db $E9, $EB, $E8, $E0, $FB, $DA, $EC, $EC, $E2, $EC, $ED, $FB, $FB, $FB, $FB
09FCD FB FB FB FB               	.db $FB, $FB, $FB, $FB ; (blank)
09FD1 CF CF CF CF               	.db $CF, $CF, $CF, $CF ; (blank)
09FD5                           
09FD5                           TitleStoryText_LineCreditB:
09FD5 BD BF FB FB FB FB FB      	.db $BD, $BF, $FB, $FB, $FB, $FB, $FB
09FDC E4 E6 DC E4 F7 FB F1 E4..     .db $E4, $E6, $DC, $E4, $F7, $FB, $F1, $E4, $DE, $DE, $E9, $DE, $EB, $FB, $FB
09FEB FB FB FB FB               	.db $FB, $FB, $FB, $FB ; (blank)
09FEF CF CF CF CF               	.db $CF, $CF, $CF, $CF ; (blank)
09FF3                           
09FF3                           TitleStoryText_LineCreditC:
09FF3 FB FB FB FB FB FB FB FB.. 	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB
0A003 FB FB FB FB               	.db $FB, $FB, $FB, $FB ; (blank)
0A007 CF CF CF CF               	.db $CF, $CF, $CF, $CF ; (blank)
0A00B                           
0A00B                           TitleStoryText_LineCreditD:
0A00B EC E9 DE DC E2 DA E5 FB..     .db $EC, $E9, $DE, $DC, $E2, $DA, $E5, $FB, $ED, $E1, $DA, $E7, $E4, $EC, $FB
0A01A FB FB FB FB               	.db $FB, $FB, $FB, $FB ; (blank)
0A01E FB                        	.db $FB; (blank)
0A01F                           
0A01F                           TitleStoryText_LineCreditE:
0A01F FB ED DE ED EB DA E5 F2..     .db $FB, $ED, $DE, $ED, $EB, $DA, $E5, $F2, $F7, $FB, $E5, $E8, $E0, $E2, $E7, $EC, $E2, $E7, $DE, $F1
0A033 FB FB FB FB               	.db $FB, $FB, $FB, $FB ; (blank)
0A037 CF CF CF CF               	.db $CF, $CF, $CF, $CF ; (blank)
0A03B                           
0A03B                           TitleStoryText_LineCreditF:
0A03B FB FB FB FB DA E7 DD FB..     .db $FB, $FB, $FB, $FB, $DA, $E7, $DD, $FB, $F2, $E8, $EE, $CE, $FB, $cb, $cd, $FB
0A04B FB FB FB                  	.db $FB, $FB, $FB ; (blank)
0A04E FB                        	.db $FB; (blank)
0A04F                           
0A04F                           
0A04F                               
0A04F                           
0A04F                           ENDIF
0A04F                           
0A04F                           TitleAttributeData1:
0A04F 23 CB 42 FF               	.db $23, $CB, $42, $FF
0A053 23 D1 01 CC               	.db $23, $D1, $01, $CC
0A057 23 D2 44 FF               	.db $23, $D2, $44, $FF
0A05B 23 D6 01 33               	.db $23, $D6, $01, $33
0A05F 23 D9 01 CC               	.db $23, $D9, $01, $CC
0A063 23 DA 44 FF               	.db $23, $DA, $44, $FF
0A067                           
0A067                           TitleAttributeData2:
0A067 23 DE 01 33               	.db $23, $DE, $01, $33
0A06B 23 E1 01 CC               	.db $23, $E1, $01, $CC
0A06F 23 E2 44 FF               	.db $23, $E2, $44, $FF
0A073 23 E6 01 33               	.db $23, $E6, $01, $33
0A077 23 EA 44 FF               	.db $23, $EA, $44, $FF
0A07B 23 E9 01 CC               	.db $23, $E9, $01, $CC
0A07F 23 EE 01 33               	.db $23, $EE, $01, $33
0A083                           
0A083                           
0A083                           ; =============== S U B R O U T I N E =======================================
0A083                           
0A083                           TitleScreen:
0A083 A0 07                     	LDY #$07 ; Does initialization of RAM.
0A085 84 01                     	STY byte_RAM_1 ; This clears $200 to $7FF.
0A087 A0 00                     	LDY #$00
0A089 84 00                     	STY byte_RAM_0
0A08B 98                        	TYA
0A08C                           
0A08C                           InitMemoryLoop:
0A08C 91 00                     	STA (byte_RAM_0), Y ; I'm not sure if a different method of initializing memory
0A08E                           ; would work better in this case.
0A08E 88                        	DEY
0A08F D0 FB                     	BNE InitMemoryLoop
0A091                           
0A091 C6 01                     	DEC byte_RAM_1
0A093 A6 01                     	LDX byte_RAM_1
0A095 E0 02                     	CPX #$02
0A097 B0 F3                     	BCS InitMemoryLoop ; Stop initialization after we hit $200.
0A099                           
0A099                           IFDEF PLAYER_STUFF
0A099 A0 78                     	LDY #$78 ; Does initialization of RAM.
0A09B 84 01                     	STY byte_RAM_1 ; This clears $200 to $7FF.
0A09D A0 00                     	LDY #$00
0A09F 84 00                     	STY byte_RAM_0
0A0A1 98                        	TYA
0A0A2                           
0A0A2                           InitMemoryLoop_Custom:
0A0A2 91 00                     	STA (byte_RAM_0), Y ; I'm not sure if a different method of initializing memory
0A0A4                           ; would work better in this case.
0A0A4 88                        	DEY
0A0A5 D0 FB                     	BNE InitMemoryLoop_Custom
0A0A7                           
0A0A7 C6 01                     	DEC byte_RAM_1
0A0A9 A6 01                     	LDX byte_RAM_1
0A0AB E0 72                     	CPX #$72
0A0AD B0 F3                     	BCS InitMemoryLoop_Custom; Stop initialization after we hit $200.
0A0AF                           ENDIF
0A0AF                           
0A0AF                           loc_BANK0_9A53:
0A0AF A9 00                     	LDA #$00
0A0B1 A8                        	TAY
0A0B2                           
0A0B2                           InitMemoryLoop2:
0A0B2                           	; Clear $0000-$00FF.
0A0B2                           	; Notably, this leaves the stack area $0100-$01FF uninitialized.
0A0B2                           	; This is not super important, but you might want to do it yourself to
0A0B2                           	; track stack corruption or whatever.
0A0B2 99 00 00                  	STA byte_RAM_0, Y
0A0B5 C8                        	INY
0A0B6 D0 FA                     	BNE InitMemoryLoop2
0A0B8                           
0A0B8 20 56 FD                  	JSR LoadTitleScreenCHRBanks
0A0BB                           
0A0BB 20 6F E6                  	JSR ClearNametablesAndSprites
0A0BE                           
0A0BE AD 02 20                  	LDA PPUSTATUS
0A0C1 A9 3F                     	LDA #$3F
0A0C3 A0 00                     	LDY #$00
0A0C5 8D 06 20                  	STA PPUADDR
0A0C8 8C 06 20                  	STY PPUADDR
0A0CB                           
0A0CB                           loc_BANK0_9A6F:
0A0CB B9 2E 9D                  	LDA TitleBackgroundPalettes, Y
0A0CE 8D 07 20                  	STA PPUDATA
0A0D1 C8                        	INY
0A0D2 C0 20                     	CPY #$20
0A0D4 90 F5                     	BCC loc_BANK0_9A6F
0A0D6                           
0A0D6 A9 01                     	LDA #$01
0A0D8 85 F0                     	STA RAM_PPUDataBufferPointer
0A0DA A9 03                     	LDA #$03
0A0DC 85 F1                     	STA RAM_PPUDataBufferPointer + 1
0A0DE A9 40                     	LDA #Stack100_Menu
0A0E0 8D 00 01                  	STA StackArea
0A0E3 A9 B0                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0A0E5 85 FF                     	STA PPUCtrlMirror
0A0E7 8D 00 20                  	STA PPUCTRL
0A0EA 20 4A 9A                  	JSR WaitForNMI_TitleScreen
0A0ED                           
0A0ED A9 01                     	LDA #$01 ; @TODO
0A0EF 85 11                     	STA ScreenUpdateIndex
0A0F1 20 4A 9A                  	JSR WaitForNMI_TitleScreen
0A0F4                           
0A0F4 A9 80                     	LDA #Music1_Title
0A0F6 8D 00 06                  	STA MusicQueue1
0A0F9 20 46 9A                  	JSR WaitForNMI_TitleScreen_TurnOnPPU
0A0FC                           
0A0FC A9 03                     	LDA #$03
0A0FE 85 10                     	STA byte_RAM_10
0A100 A9 25                     	LDA #$25
0A102                           IFDEF PLAYER_STUFF
0A102 A9 16                         LDA #$16
0A104                           ENDIF
0A104 85 02                     	STA byte_RAM_2
0A106 A9 20                     	LDA #$20
0A108 85 14                     	STA PlayerXHi
0A10A A9 C7                     	LDA #$C7
0A10C 85 15                     	STA ObjectXHi
0A10E A9 52                     	LDA #$52
0A110 85 16                     	STA ObjectXHi + 1
0A112                           
0A112                           loc_BANK0_9AB4:
0A112 20 4A 9A                  	JSR WaitForNMI_TitleScreen
0A115                           
0A115 A5 17                     	LDA ObjectXHi + 2
0A117 D0 38                     	BNE loc_BANK0_9AF3
0A119                           
0A119                           loc_BANK0_9ABB:
0A119 E6 10                     	INC byte_RAM_10
0A11B A5 10                     	LDA byte_RAM_10
0A11D 29 0F                     	AND #$0F  ;; ticking before starting intro story
0A11F                           
0A11F F0 03                     	BEQ loc_BANK0_9AC6
0A121                           
0A121 4C AB A1                  	JMP loc_BANK0_9B4D
0A124                           
0A124                           ; ---------------------------------------------------------------------------
0A124                           
0A124                           loc_BANK0_9AC6:
0A124 C6 02                     	DEC byte_RAM_2
0A126 A5 02                     	LDA byte_RAM_2
0A128 C9 06                     	CMP #$06 ;; then start after this
0A12A D0 7F                     	BNE loc_BANK0_9B4D
0A12C                           
0A12C E6 17                     	INC ObjectXHi + 2
0A12E A5 14                     	LDA PlayerXHi
0A130 8D 01 03                  	STA PPUBuffer_301
0A133 A5 15                     	LDA ObjectXHi
0A135 8D 02 03                  	STA PPUBuffer_301 + 1
0A138 A5 16                     	LDA ObjectXHi + 1
0A13A 8D 03 03                  	STA PPUBuffer_301 + 2
0A13D A9 E6                     	LDA #$E6
0A13F 85 15                     	STA ObjectXHi
0A141 A9 54                     	LDA #$54
0A143 85 16                     	STA ObjectXHi + 1
0A145 A9 FB                     	LDA #$0FB
0A147 8D 04 03                  	STA PPUBuffer_301 + 3
0A14A A9 00                     	LDA #$00
0A14C 8D 05 03                  	STA PPUBuffer_301 + 4
0A14F F0 5A                     	BEQ loc_BANK0_9B4D
0A151                           
0A151                           loc_BANK0_9AF3:
0A151 A5 14                     	LDA PlayerXHi
0A153 8D 01 03                  	STA PPUBuffer_301
0A156 A5 15                     	LDA ObjectXHi
0A158 8D 02 03                  	STA PPUBuffer_301 + 1
0A15B A5 16                     	LDA ObjectXHi + 1
0A15D 8D 03 03                  	STA PPUBuffer_301 + 2
0A160 A9 FB                     	LDA #$0FB
0A162 8D 04 03                  	STA PPUBuffer_301 + 3
0A165 A9 00                     	LDA #$00
0A167 8D 05 03                  	STA PPUBuffer_301 + 4
0A16A A5 15                     	LDA ObjectXHi
0A16C 18                        	CLC
0A16D 69 20                     	ADC #$20
0A16F 85 15                     	STA ObjectXHi
0A171 A5 14                     	LDA PlayerXHi
0A173 69 00                     	ADC #$00
0A175 85 14                     	STA PlayerXHi
0A177 C9 23                     	CMP #$23
0A179                           
0A179                           loc_BANK0_9B1B:
0A179 90 30                     	BCC loc_BANK0_9B4D
0A17B                           
0A17B A9 20                     	LDA #$20
0A17D 85 10                     	STA byte_RAM_10
0A17F A2 17                     	LDX #$17
0A181 A0 00                     	LDY #$00
0A183                           
0A183                           loc_BANK0_9B25:
0A183 B9 4F A0                  	LDA TitleAttributeData1, Y
0A186 99 05 03                  	STA PPUBuffer_301 + 4, Y
0A189 C8                        	INY
0A18A CA                        	DEX
0A18B 10 F6                     	BPL loc_BANK0_9B25
0A18D                           
0A18D A9 00                     	LDA #$00
0A18F 99 05 03                  	STA PPUBuffer_301 + 4, Y
0A192 20 4A 9A                  	JSR WaitForNMI_TitleScreen
0A195                           
0A195 A2 1B                     	LDX #$1B
0A197 A0 00                     	LDY #$00
0A199                           
0A199                           loc_BANK0_9B3B:
0A199 B9 67 A0                  	LDA TitleAttributeData2, Y
0A19C 99 01 03                  	STA PPUBuffer_301, Y
0A19F C8                        	INY
0A1A0 CA                        	DEX
0A1A1 10 F6                     	BPL loc_BANK0_9B3B
0A1A3                           
0A1A3 A9 00                     	LDA #$00
0A1A5 99 01 03                  	STA PPUBuffer_301, Y
0A1A8 4C BA A1                  	JMP loc_BANK0_9B59
0A1AB                           
0A1AB                           ; ---------------------------------------------------------------------------
0A1AB                           
0A1AB                           loc_BANK0_9B4D:
0A1AB                           IFDEF PLAYER_STUFF
0A1AB 20 F5 A2                      JSR RenderPlayerTitle
0A1AE                           ENDIF
0A1AE A5 F5                     	LDA Player1JoypadPress
0A1B0 29 10                     	AND #ControllerInput_Start
0A1B2 F0 03                     	BEQ loc_BANK0_9B56
0A1B4                           
0A1B4 4C B8 A2                  	JMP loc_BANK0_9C1F
0A1B7                           
0A1B7                           ; ---------------------------------------------------------------------------
0A1B7                           
0A1B7                           loc_BANK0_9B56:
0A1B7 4C 12 A1                  	JMP loc_BANK0_9AB4
0A1BA                           
0A1BA                           ; ---------------------------------------------------------------------------
0A1BA                           
0A1BA                           loc_BANK0_9B59:
0A1BA 20 4A 9A                  	JSR WaitForNMI_TitleScreen
0A1BD                           
0A1BD A5 19                     	LDA ObjectXHi + 4
0A1BF F0 03                     	BEQ loc_BANK0_9B63
0A1C1                           
0A1C1 4C AF A2                  	JMP loc_BANK0_9C19
0A1C4                           
0A1C4                           ; ---------------------------------------------------------------------------
0A1C4                           
0A1C4                           loc_BANK0_9B63:
0A1C4 A5 18                     	LDA ObjectXHi + 3
0A1C6 C9 09                     	CMP #$09
0A1C8                           IFDEF RANDOMIZER_T
0A1C8 C9 11                     	CMP #$11
0A1CA F0 14                         BEQ TitleScreen_WriteCreditsText
0A1CC                           ENDIF
0A1CC                           
0A1CC F0 53                     	BEQ loc_BANK0_9B93
0A1CE                           
0A1CE A5 18                     	LDA ObjectXHi + 3
0A1D0 D0 5F                     	BNE loc_BANK0_9BA3
0A1D2                           
0A1D2 C6 10                     	DEC byte_RAM_10
0A1D4 30 2C                     	BMI TitleScreen_WriteSTORYText
0A1D6                           
0A1D6 4C AF A2                  	JMP loc_BANK0_9C19
0A1D9                           
0A1D9                           ; ---------------------------------------------------------------------------
0A1D9                           
0A1D9                           IFDEF PLAYER_STUFF
0A1D9                           TitleStoryText_CREDITS:
0A1D9 DC EB DE DD E2 ED EC      	.db $DC, $EB, $DE, $DD, $E2, $ED, $EC ; CREDITS
0A1E0                           
0A1E0                           TitleScreen_WriteCreditsText:
0A1E0                               ; PPUBuffer_301
0A1E0                               ; ObjectXHi    ;; vis row
0A1E0                               ; PlayerXHi    ;; vis col
0A1E0                               ; ObjectXHi + 3 ;; cnt lines
0A1E0                               ; ObjectXHi + 5 ;; vis row timer
0A1E0 A9 20                     	LDA #$20
0A1E2 8D 01 03                  	STA PPUBuffer_301
0A1E5 A9 AD                     	LDA #$0AD
0A1E7 8D 02 03                  	STA PPUBuffer_301 + 1
0A1EA A9 07                     	LDA #$07 ; Length of STORY text (5 bytes)
0A1EC 8D 03 03                  	STA PPUBuffer_301 + 2
0A1EF A0 06                     	LDY #$06 ; Bytes to copy minus one (5-1=4)
0A1F1                           
0A1F1                           TitleScreen_WriteCreditsTextLoop:
0A1F1 B9 D9 A1                  	LDA TitleStoryText_CREDITS, Y ; Copy STORY text to PPU write buffer
0A1F4 99 04 03                  	STA PPUBuffer_301 + 3, Y
0A1F7 88                        	DEY
0A1F8 10 F7                     	BPL TitleScreen_WriteCreditsTextLoop
0A1FA                           
0A1FA A9 00                     	LDA #$00 ; Terminate STORY text in buffer
0A1FC 8D 0B 03                  	STA PPUBuffer_301 + 10
0A1FF 4C 21 A2                      JMP loc_BANK0_9B93
0A202                           ENDIF
0A202                           
0A202                           TitleScreen_WriteSTORYText:
0A202                               ; PPUBuffer_301
0A202                               ; ObjectXHi    ;; vis row
0A202                               ; PlayerXHi    ;; vis col
0A202                               ; ObjectXHi + 3 ;; cnt lines
0A202                               ; ObjectXHi + 5 ;; vis row timer
0A202 A9 20                     	LDA #$20
0A204 8D 01 03                  	STA PPUBuffer_301
0A207 A9 AE                     	LDA #$0AE
0A209 8D 02 03                  	STA PPUBuffer_301 + 1
0A20C A9 05                     	LDA #$05 ; Length of STORY text (5 bytes)
0A20E 8D 03 03                  	STA PPUBuffer_301 + 2
0A211 A0 04                     	LDY #$04 ; Bytes to copy minus one (5-1=4)
0A213                           
0A213                           TitleScreen_WriteSTORYTextLoop:
0A213 B9 4E 9D                  	LDA TitleStoryText_STORY, Y ; Copy STORY text to PPU write buffer
0A216 99 04 03                  	STA PPUBuffer_301 + 3, Y
0A219 88                        	DEY
0A21A 10 F7                     	BPL TitleScreen_WriteSTORYTextLoop
0A21C                           
0A21C A9 00                     	LDA #$00 ; Terminate STORY text in buffer
0A21E 8D 09 03                  	STA PPUBuffer_301 + 8
0A221                           
0A221                           loc_BANK0_9B93: ;; reset to top?
0A221 E6 18                     	INC ObjectXHi + 3
0A223 A9 21                     	LDA #$21
0A225 85 14                     	STA PlayerXHi
0A227 A9 06                     	LDA #$06
0A229 85 15                     	STA ObjectXHi
0A22B A9 40                     	LDA #$40
0A22D 85 1A                     	STA ObjectXHi + 5
0A22F D0 7E                     	BNE loc_BANK0_9C19
0A231                           
0A231                           loc_BANK0_9BA3:
0A231 C6 1A                     	DEC ObjectXHi + 5
0A233 10 7A                     	BPL loc_BANK0_9C19
0A235                           
0A235                           loc_BANK0_9BA7:
0A235                           IFNDEF RANDOMIZER_T
0A235                           	LDA #$40
0A235                           ENDIF
0A235                           IFDEF RANDOMIZER_T
0A235 A9 28                         LDA #$28 ;; line speed
0A237                           ENDIF
0A237 85 1A                     	STA ObjectXHi + 5
0A239 A5 14                     	LDA PlayerXHi
0A23B 8D 01 03                  	STA PPUBuffer_301
0A23E                           
0A23E                           loc_BANK0_9BB0:
0A23E A5 15                     	LDA ObjectXHi ;; row
0A240                           
0A240                           loc_BANK0_9BB2:
0A240 8D 02 03                  	STA PPUBuffer_301 + 1
0A243 A9 14                     	LDA #$14                ; column
0A245 8D 03 03                  	STA PPUBuffer_301 + 2
0A248 A6 18                     	LDX ObjectXHi + 3
0A24A CA                        	DEX
0A24B BD 53 9D                  	LDA TitleStoryTextPointersHi, X
0A24E 85 04                     	STA byte_RAM_4
0A250 BD 75 9D                  	LDA TitleStoryTextPointersLo, X
0A253 85 03                     	STA byte_RAM_3
0A255 A0 00                     	LDY #$00 ; array pos
0A257 A2 13                     	LDX #$13 ; length string
0A259                           
0A259                           loc_BANK0_9BCB:
0A259 B1 03                     	LDA (byte_RAM_3), Y
0A25B 99 04 03                  	STA PPUBuffer_301 + 3, Y
0A25E C8                        	INY
0A25F CA                        	DEX
0A260 10 F7                     	BPL loc_BANK0_9BCB ;; loop end
0A262                           
0A262 A9 00                     	LDA #$00
0A264 99 04 03                  	STA PPUBuffer_301 + 3, Y
0A267 E6 18                     	INC ObjectXHi + 3
0A269 A5 15                     	LDA ObjectXHi
0A26B 18                        	CLC
0A26C                           IFDEF RANDOMIZER_T
0A26C 69 20                     	ADC #$20 ;; row shift
0A26E                           ENDIF
0A26E                           IFNDEF RANDOMIZER_T
0A26E                           	ADC #$40 ;; row shift
0A26E                           ENDIF
0A26E 85 15                     	STA ObjectXHi
0A270 A5 14                     	LDA PlayerXHi ;; carry adds after objectxhi
0A272 69 00                     	ADC #$00
0A274 85 14                     	STA PlayerXHi
0A276 A5 18                     	LDA ObjectXHi + 3 ;; how many lines?  after 9, clear
0A278 C9 09                     	CMP #$09
0A27A                           IFDEF RANDOMIZER_T
0A27A C9 11                     	CMP #$11
0A27C                           ENDIF
0A27C 90 31                     	BCC loc_BANK0_9C19 ;; if under 9, skip
0A27E                           
0A27E D0 1D                     	BNE loc_BANK0_9C0B ;; if exactly 9, proceed down
0A280                           
0A280 A9 09                     	LDA #$09 ;; starting delay
0A282 85 02                     	STA byte_RAM_2
0A284 A9 03                     	LDA #$03
0A286                           IFDEF PLAYER_STUFF
0A286 A9 06                     	LDA #$06
0A288                           ENDIF
0A288 85 10                     	STA byte_RAM_10
0A28A A9 20                     	LDA #$20
0A28C 85 14                     	STA PlayerXHi
0A28E A9 C7                     	LDA #$C7
0A290 85 15                     	STA ObjectXHi
0A292 A9 52                     	LDA #$52
0A294 85 16                     	STA ObjectXHi + 1
0A296 A9 00                     	LDA #$00
0A298 85 17                     	STA ObjectXHi + 2
0A29A                           
0A29A 4C 19 A1                  	JMP loc_BANK0_9ABB
0A29D                           
0A29D                           ; ---------------------------------------------------------------------------
0A29D                           loc_BANK0_9C0B:
0A29D C9 12                     	CMP #$12
0A29F                           IFDEF RANDOMIZER_T
0A29F C9 22                     	CMP #$22
0A2A1                           ENDIF
0A2A1 90 0C                     	BCC loc_BANK0_9C19
0A2A3                           
0A2A3 E6 19                     	INC ObjectXHi + 4
0A2A5 A9 25                     	LDA #$25
0A2A7 85 02                     	STA byte_RAM_2
0A2A9 A9 03                     	LDA #$03
0A2AB                           IFDEF PLAYER_STUFF
0A2AB A9 06                     	LDA #$06
0A2AD                           ENDIF
0A2AD 85 10                     	STA byte_RAM_10
0A2AF                           
0A2AF                           loc_BANK0_9C19:
0A2AF                           IFDEF PLAYER_STUFF
0A2AF 20 F5 A2                      JSR RenderPlayerTitle
0A2B2                           ENDIF
0A2B2 A5 F7                     	LDA Player1JoypadHeld
0A2B4 29 10                     	AND #ControllerInput_Start
0A2B6 F0 16                     	BEQ loc_BANK0_9C35
0A2B8                           
0A2B8                           loc_BANK0_9C1F:
0A2B8 A9 80                     	LDA #Music2_StopMusic
0A2BA 8D 03 06                  	STA MusicQueue2
0A2BD 20 4A 9A                  	JSR WaitForNMI_TitleScreen
0A2C0                           
0A2C0 A9 00                     	LDA #$00
0A2C2 A8                        	TAY
0A2C3                           
0A2C3                           loc_BANK0_9C2A:
0A2C3 99 00 00                  	STA byte_RAM_0, Y
0A2C6 C8                        	INY
0A2C7 C0 F0                     	CPY #$F0
0A2C9 90 F8                     	BCC loc_BANK0_9C2A
0A2CB                           
0A2CB 4C 85 E6                  	JMP HideAllSprites
0A2CE                           
0A2CE                           ; ---------------------------------------------------------------------------
0A2CE                           
0A2CE                           loc_BANK0_9C35:
0A2CE A5 19                     	LDA ObjectXHi + 4
0A2D0 F0 12                     	BEQ loc_BANK0_9C4B
0A2D2                           
0A2D2 E6 10                     	INC byte_RAM_10
0A2D4 A5 10                     	LDA byte_RAM_10
0A2D6 29 0F                     	AND #$0F
0A2D8 D0 0A                     	BNE loc_BANK0_9C4B
0A2DA                           
0A2DA C6 02                     	DEC byte_RAM_2
0A2DC A5 02                     	LDA byte_RAM_2
0A2DE C9 06                     	CMP #$06
0A2E0 D0 02                     	BNE loc_BANK0_9C4B
0A2E2                           
0A2E2 F0 03                     	BEQ loc_BANK0_9C4E
0A2E4                           
0A2E4                           loc_BANK0_9C4B:
0A2E4 4C BA A1                  	JMP loc_BANK0_9B59
0A2E7                           
0A2E7                           ; ---------------------------------------------------------------------------
0A2E7                           
0A2E7                           loc_BANK0_9C4E:
0A2E7 A9 10                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x8 | PPUCtrl_NMIDisabled
0A2E9 85 FF                     	STA PPUCtrlMirror
0A2EB                           
0A2EB                           loc_BANK0_9C52:
0A2EB 8D 00 20                  	STA PPUCTRL
0A2EE 4C AF A0                  	JMP loc_BANK0_9A53
0A2F1                           
0A2F1                           ; End of function TitleScreen
0A2F1                           IFDEF PLAYER_STUFF
0A2F1                           POffset_Title:
0A2F1 60                            .db $60
0A2F2 70                            .db $70
0A2F3 80                            .db $80
0A2F4 90                            .db $90
0A2F5                           RenderPlayerTitle:
0A2F5 60                            RTS
0A2F6 20 7F 89                      JSR loc_BANK0_8A26
0A2F9 A6 8F                         LDX CurrentCharacter
0A2FB BD F1 A2                      LDA POffset_Title, X
0A2FE 8D 28 04                      STA PlayerScreenX
0A301 A9 90                         LDA #$90
0A303 8D 2B 04                      STA PlayerScreenYLo
0A306 A0 10                         LDY #$10
0A308 20 E1 F5                      JSR RenderPlayer
0A30B 60                            RTS
0A30C                           ENDIF
0A30C                           
0A30C                           
0A30C                           
0A30C                           
0A30C                           ; Unused space in the original ($9C58 - $A1FF)
0A30C                           unusedSpace $A200, $FF
0A30C                           	IFDEF PRESERVE_UNUSED_SPACE
0A30C                           		.pad $A200, $FF
0A30C                           	ENDIF
0A30C                           
0A30C                           
0A30C                           EndingPPUDataPointers:
0A30C 01 03                     	.dw PPUBuffer_301
0A30E 45 A3                     	.dw EndingCorkJarRoom
0A310 62 A7                     	.dw EndingCelebrationCeilingTextAndPodium
0A312 A3 A8                     	.dw EndingCelebrationFloorAndSubconParade
0A314 DC AA                     	.dw EndingCelebrationPaletteFade1
0A316 00 AB                     	.dw EndingCelebrationPaletteFade2
0A318 24 AB                     	.dw EndingCelebrationPaletteFade3
0A31A 8A AA                     	.dw EndingCelebrationSubconStandStill
0A31C D1 AA                     	.dw EndingCelebrationUnusedText_THE_END
0A31E 47 AF                     	.dw EndingCelebrationText_MARIO
0A320 53 AF                     	.dw EndingCelebrationText_PRINCESS
0A322 5F AF                     	.dw EndingCelebrationText_TOAD
0A324 6B AF                     	.dw EndingCelebrationText_LUIGI
0A326                           
0A326                           
0A326                           WaitForNMI_Ending_TurnOffPPU:
0A326 A9 00                     	LDA #$00
0A328 F0 02                     	BEQ WaitForNMI_Ending_SetPPUMaskMirror
0A32A                           
0A32A                           WaitForNMI_Ending_TurnOnPPU:
0A32A A9 1E                     	LDA #PPUMask_ShowLeft8Pixels_BG | PPUMask_ShowLeft8Pixels_SPR | PPUMask_ShowBackground | PPUMask_ShowSprites
0A32C                           
0A32C                           WaitForNMI_Ending_SetPPUMaskMirror:
0A32C 85 FE                     	STA PPUMaskMirror
0A32E                           
0A32E                           WaitForNMI_Ending:
0A32E A5 11                     	LDA ScreenUpdateIndex
0A330 0A                        	ASL A
0A331 AA                        	TAX
0A332 BD 0C A3                  	LDA EndingPPUDataPointers, X
0A335 85 F0                     	STA RAM_PPUDataBufferPointer
0A337 BD 0D A3                  	LDA EndingPPUDataPointers + 1, X
0A33A 85 F1                     	STA RAM_PPUDataBufferPointer + 1
0A33C                           
0A33C A9 00                     	LDA #$00
0A33E 85 EB                     	STA NMIWaitFlag
0A340                           WaitForNMI_EndingLoop:
0A340 A5 EB                     	LDA NMIWaitFlag
0A342 10 FC                     	BPL WaitForNMI_EndingLoop
0A344                           
0A344 60                        	RTS
0A345                           
0A345                           
0A345                           EndingCorkJarRoom:
0A345 20 00 9E 72 73 72 73 72.. 	.db $20, $00, $9E, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A354 72 73 72 73 72 73 72 73.. 	.db $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A363 73 72 73                  	.db $73, $72, $73
0A366 20 01 9E 73 72 73 72 73.. 	.db $20, $01, $9E, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A375 73 72 73 72 73 72 73 72.. 	.db $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A384 72 73 72                  	.db $72, $73, $72
0A387 22 02 8E 72 73 72 73 72.. 	.db $22, $02, $8E, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A396 72 73                     	.db $72, $73
0A398 22 03 8E 73 72 73 72 73.. 	.db $22, $03, $8E, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A3A7 73 72                     	.db $73, $72
0A3A9 23 44 18 72 73 72 73 72.. 	.db $23, $44, $18, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A3B8 72 73 72 73 72 73 72 73.. 	.db $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A3C4 23 64 18 73 72 73 72 73.. 	.db $23, $64, $18, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A3D3 73 72 73 72 73 72 73 72.. 	.db $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A3DF 23 84 18 72 73 72 73 72.. 	.db $23, $84, $18, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A3EE 72 73 72 73 72 73 72 73.. 	.db $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A3FA 23 A4 18 73 72 73 72 73.. 	.db $23, $A4, $18, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A409 73 72 73 72 73 72 73 72.. 	.db $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A415 22 1C 8E 72 73 72 73 72.. 	.db $22, $1C, $8E, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A424 72 73                     	.db $72, $73
0A426 22 1D 8E 73 72 73 72 73.. 	.db $22, $1D, $8E, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A435 73 72                     	.db $73, $72
0A437 20 1E 9E 72 73 72 73 72.. 	.db $20, $1E, $9E, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A446 72 73 72 73 72 73 72 73.. 	.db $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A455 73 72 73                  	.db $73, $72, $73
0A458 20 1F 9E 73 72 73 72 73.. 	.db $20, $1F, $9E, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72
0A467 73 72 73 72 73 72 73 72.. 	.db $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73, $72, $73
0A476 72 73 72                  	.db $72, $73, $72
0A479 22 C6 C4 FC               	.db $22, $C6, $C4, $FC
0A47D 22 C7 C4 FC               	.db $22, $C7, $C4, $FC
0A481 22 C8 84 AD AC AC AC      	.db $22, $C8, $84, $AD, $AC, $AC, $AC
0A488 22 E9 83 AD AC AC         	.db $22, $E9, $83, $AD, $AC, $AC
0A48E 23 0A 82 AD AC            	.db $23, $0A, $82, $AD, $AC
0A493 23 2B 01 AD               	.db $23, $2B, $01, $AD
0A497 22 90 84 88 89 89 8C      	.db $22, $90, $84, $88, $89, $89, $8C
0A49E 22 91 84 8A 8B 8B 8D      	.db $22, $91, $84, $8A, $8B, $8B, $8D
0A4A5 23 0E 06 74 76 74 76 74.. 	.db $23, $0E, $06, $74, $76, $74, $76, $74, $76
0A4AE 23 2E 06 75 77 75 77 75.. 	.db $23, $2E, $06, $75, $77, $75, $77, $75, $77
0A4B7 23 C0 20 22 00 00 00 00.. 	.db $23, $C0, $20, $22, $00, $00, $00, $00, $00, $00, $88, $22, $00, $00, $00, $00, $00, $00, $88, $22, $00
0A4CC 00 00 00 00 00 88 22 00.. 	.db $00, $00, $00, $00, $00, $88, $22, $00, $00, $00, $00, $00, $00, $88
0A4DA 23 E0 20 AA 00 00 00 00.. 	.db $23, $E0, $20, $AA, $00, $00, $00, $00, $00, $00, $AA, $AA, $00, $00, $00, $11, $00, $00, $AA, $AA
0A4EE A0 A0 A4 A5 A0 A0 AA 0A.. 	.db $A0, $A0, $A4, $A5, $A0, $A0, $AA, $0A, $0A, $0A, $0A, $0A, $0A, $0A, $0A
0A4FD 00                        	.db $00
0A4FE                           
0A4FE                           EndingCelebrationUnusedText_THANK_YOU:
0A4FE 21 0C 09 ED E1 DA E7 E4.. 	.db $21, $0C, $09, $ED, $E1, $DA, $E7, $E4, $FB, $F2, $E8, $EE
0A50A 00                        	.db $00
0A50B                           
0A50B                           CorkRoomSpriteStartX:
0A50B 30                        	.db $30 ; player
0A50C 80                        	.db $80 ; subcon 8
0A50D 80                        	.db $80 ; subcon 7
0A50E 80                        	.db $80 ; subcon 6
0A50F 80                        	.db $80 ; subcon 5
0A510 80                        	.db $80 ; subcon 4
0A511 80                        	.db $80 ; subcon 3
0A512 80                        	.db $80 ; subcon 2
0A513 80                        	.db $80 ; subcon 1
0A514 80                        	.db $80 ; cork
0A515                           
0A515                           CorkRoomSpriteStartY:
0A515 B0                        	.db $B0 ; player
0A516 A0                        	.db $A0 ; subcon 8
0A517 A0                        	.db $A0 ; subcon 7
0A518 A0                        	.db $A0 ; subcon 6
0A519 A0                        	.db $A0 ; subcon 5
0A51A A0                        	.db $A0 ; subcon 4
0A51B A0                        	.db $A0 ; subcon 3
0A51C A0                        	.db $A0 ; subcon 2
0A51D A0                        	.db $A0 ; subcon 1
0A51E 95                        	.db $95 ; cork
0A51F                           
0A51F                           CorkRoomSpriteTargetX:
0A51F 10                        	.db $10 ; player
0A520 F4                        	.db $F4 ; subcon 8
0A521 0C                        	.db $0C ; subcon 7
0A522 E8                        	.db $E8 ; subcon 6
0A523 18                        	.db $18 ; subcon 5
0A524 EC                        	.db $EC ; subcon 4
0A525 14                        	.db $14 ; subcon 3
0A526 F8                        	.db $F8 ; subcon 2
0A527 08                        	.db $08 ; subcon 1
0A528 00                        	.db $00 ; cork
0A529                           
0A529                           CorkRoomSpriteTargetY:
0A529 00                        	.db $00 ; player
0A52A C4                        	.db $C4 ; subcon 8
0A52B C4                        	.db $C4 ; subcon 7
0A52C B8                        	.db $B8 ; subcon 6
0A52D B8                        	.db $B8 ; subcon 5
0A52E A8                        	.db $A8 ; subcon 4
0A52F A8                        	.db $A8 ; subcon 3
0A530 A0                        	.db $A0 ; subcon 2
0A531 A0                        	.db $A0 ; subcon 1
0A532 00                        	.db $00 ; cork
0A533                           
0A533                           CorkRoomSpriteDelay:
0A533 00                        	.db $00 ; player
0A534 F0                        	.db $F0 ; subcon 8
0A535 E0                        	.db $E0 ; subcon 7
0A536 C0                        	.db $C0 ; subcon 6
0A537 A0                        	.db $A0 ; subcon 5
0A538 80                        	.db $80 ; subcon 4
0A539 60                        	.db $60 ; subcon 3
0A53A 40                        	.db $40 ; subcon 2
0A53B 20                        	.db $20 ; subcon 1
0A53C 00                        	.db $00 ; cork
0A53D                           
0A53D                           CorkRoomSpriteAttributes:
0A53D 00                        	.db $00 ; player
0A53E 21                        	.db $21 ; subcon 8
0A53F 61                        	.db $61 ; subcon 7
0A540 21                        	.db $21 ; subcon 6
0A541 61                        	.db $61 ; subcon 5
0A542 21                        	.db $21 ; subcon 4
0A543 61                        	.db $61 ; subcon 3
0A544 21                        	.db $21 ; subcon 2
0A545 61                        	.db $61 ; subcon 1
0A546 22                        	.db $22 ; cork
0A547                           
0A547                           
0A547                           FreeSubconsScene:
0A547 20 26 A3                  	JSR WaitForNMI_Ending_TurnOffPPU
0A54A 20 6F E6                  	JSR ClearNametablesAndSprites
0A54D                           
0A54D A9 40                     	LDA #Stack100_Menu
0A54F 8D 00 01                  	STA StackArea
0A552 A9 B0                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0A554 85 FF                     	STA PPUCtrlMirror
0A556 8D 00 20                  	STA PPUCTRL
0A559 20 2E A3                  	JSR WaitForNMI_Ending
0A55C                           
0A55C A9 01                     	LDA #EndingUpdateBuffer_JarRoom
0A55E 85 11                     	STA ScreenUpdateIndex
0A560 20 2E A3                  	JSR WaitForNMI_Ending
0A563                           
0A563                           IFDEF PLAYER_STUFF
0A563 A9 00                         LDA #$0
0A565 A0 07                         LDY #$7
0A567 99 E0 76                  -   STA Player_Bit_Flags, Y
0A56A 88                            DEY
0A56B 10 FA                         BPL -
0A56D                           ENDIF
0A56D                           
0A56D A9 60                     	LDA #$60
0A56F 85 83                     	STA FreeSubconsTimer
0A571 A9 01                     	LDA #$01
0A573 85 9D                     	STA PlayerDirection
0A575 4A                        	LSR A
0A576 85 50                     	STA PlayerState ; A=$00
0A578 85 8E                     	STA FreeSubconsCorkCounter
0A57A 8D CA 04                  	STA CrouchJumpTimer
0A57D 85 E6                     	STA byte_RAM_E6
0A57F 85 E5                     	STA byte_RAM_E5
0A581 8D 00 04                  	STA SpriteFlickerSlot
0A584                           
0A584 A2 09                     	LDX #$09
0A586                           FreeSubconsScene_SpriteLoop:
0A586 BD 0B A5                  	LDA CorkRoomSpriteStartX, X
0A589 95 28                     	STA ObjectXLo - 1, X
0A58B BD 15 A5                  	LDA CorkRoomSpriteStartY, X
0A58E 95 32                     	STA ObjectYLo - 1, X
0A590 BD 1F A5                  	LDA CorkRoomSpriteTargetX, X
0A593 95 3C                     	STA ObjectXVelocity - 1, X
0A595 BD 29 A5                  	LDA CorkRoomSpriteTargetY, X
0A598 95 46                     	STA ObjectYVelocity - 1, X
0A59A BD 33 A5                  	LDA CorkRoomSpriteDelay, X
0A59D 95 85                     	STA EnemyTimer - 1, X
0A59F BD 3D A5                  	LDA CorkRoomSpriteAttributes, X
0A5A2 95 64                     	STA ObjectAttributes - 1, X
0A5A4 CA                        	DEX
0A5A5 10 DF                     	BPL FreeSubconsScene_SpriteLoop
0A5A7                           
0A5A7                           FreeSubconsScene_JumpingLoop:
0A5A7 20 2A A3                  	JSR WaitForNMI_Ending_TurnOnPPU
0A5AA                           
0A5AA E6 10                     	INC byte_RAM_10
0A5AC 20 85 E6                  	JSR HideAllSprites
0A5AF                           
0A5AF 20 D6 A5                  	JSR FreeSubconsScene_Player
0A5B2                           
0A5B2 20 F4 A6                  	JSR FreeSubconsScene_Cork
0A5B5                           
0A5B5 A5 83                     	LDA FreeSubconsTimer
0A5B7 F0 15                     	BEQ FreeSubconsScene_Exit
0A5B9                           
0A5B9 A5 10                     	LDA byte_RAM_10
0A5BB 29 07                     	AND #$07
0A5BD D0 E8                     	BNE FreeSubconsScene_JumpingLoop
0A5BF                           
0A5BF C6 83                     	DEC FreeSubconsTimer
0A5C1 A5 83                     	LDA FreeSubconsTimer
0A5C3 C9 25                     	CMP #$25
0A5C5 D0 E0                     	BNE FreeSubconsScene_JumpingLoop
0A5C7                           
0A5C7 A0 04                     	LDY #Music2_EndingAndCast
0A5C9 8C 03 06                  	STY MusicQueue2
0A5CC D0 D9                     	BNE FreeSubconsScene_JumpingLoop
0A5CE                           
0A5CE                           FreeSubconsScene_Exit:
0A5CE 20 C4 AC                  	JSR EndingSceneTransition
0A5D1                           
0A5D1 A5 E6                     	LDA byte_RAM_E6
0A5D3 F0 D2                     	BEQ FreeSubconsScene_JumpingLoop
0A5D5                           
0A5D5 60                        	RTS
0A5D6                           
0A5D6                           
0A5D6                           ;
0A5D6                           ; Moves the player, driving the main action in the scene
0A5D6                           ;
0A5D6                           FreeSubconsScene_Player:
0A5D6 A5 84                     	LDA PlayerWalkFrameCounter
0A5D8 F0 02                     	BEQ FreeSubconsScene_Player_AfterWalkFrameCounter
0A5DA                           
0A5DA C6 84                     	DEC PlayerWalkFrameCounter
0A5DC                           
0A5DC                           FreeSubconsScene_Player_AfterWalkFrameCounter:
0A5DC A5 82                     	LDA PlayerStateTimer
0A5DE F0 02                     	BEQ FreeSubconsScene_Player_AfterStateTimer
0A5E0                           
0A5E0 C6 82                     	DEC PlayerStateTimer
0A5E2                           
0A5E2                           FreeSubconsScene_Player_AfterStateTimer:
0A5E2 A5 28                     	LDA PlayerXLo
0A5E4 8D 28 04                  	STA PlayerScreenX
0A5E7 A5 32                     	LDA PlayerYLo
0A5E9 8D 2B 04                  	STA PlayerScreenYLo
0A5EC 20 E1 F5                  	JSR RenderPlayer
0A5EF                           
0A5EF A5 50                     	LDA PlayerState
0A5F1 20 A6 D9                  	JSR JumpToTableAfterJump
0A5F4                           
0A5F4                           
0A5F4 FE A5                     	.dw FreeSubconsScene_Phase1
0A5F6 1A A6                     	.dw FreeSubconsScene_Phase2
0A5F8 46 A6                     	.dw FreeSubconsScene_Phase3
0A5FA 6C A6                     	.dw FreeSubconsScene_Phase4
0A5FC 8E A6                     	.dw FreeSubconsScene_Phase5
0A5FE                           
0A5FE                           
0A5FE                           ; Walking in and first jump
0A5FE                           FreeSubconsScene_Phase1:
0A5FE 20 DD 8E                  	JSR PlayerWalkJumpAnim
0A601                           
0A601 20 3E 8A                  	JSR ApplyPlayerPhysicsX
0A604                           
0A604                           	; check x-position to trigger first jump
0A604 A5 28                     	LDA PlayerXLo
0A606 C9 3E                     	CMP #$3E
0A608 90 3B                     	BCC FreeSubconsScene_PhaseExit
0A60A                           
0A60A E6 50                     	INC PlayerState
0A60C E6 99                     	INC PlayerInAir
0A60E A9 06                     	LDA #SpriteAnimation_Jumping
0A610 85 C7                     	STA PlayerAnimationFrame
0A612                           
0A612                           FreeSubconsScene_Jump:
0A612 A9 01                     	LDA #SoundEffect2_Jump
0A614 8D 04 06                  	STA SoundEffectQueue2
0A617 4C BB 8D                  	JMP PlayerStartJump
0A61A                           
0A61A                           
0A61A                           ; Physics and second jump
0A61A                           FreeSubconsScene_Phase2:
0A61A 20 DD 8E                  	JSR PlayerWalkJumpAnim
0A61D                           
0A61D 20 3E 8A                  	JSR ApplyPlayerPhysicsX
0A620                           
0A620 20 AC A6                  	JSR ApplyCorkRoomGravity
0A623                           
0A623 20 88 90                  	JSR ApplyPlayerPhysicsY
0A626                           
0A626 A5 46                     	LDA PlayerYVelocity
0A628 30 1B                     	BMI FreeSubconsScene_PhaseExit
0A62A                           
0A62A                           	; check y-position to trigger second jump
0A62A A5 32                     	LDA PlayerYLo
0A62C C9 A0                     	CMP #$A0
0A62E 90 07                     	BCC FreeSubconsScene_Phase2_NoJump
0A630                           
0A630                           	; set x-velocity to land second jump on the jar
0A630 A9 0C                     	LDA #$0C
0A632 85 3C                     	STA PlayerXVelocity
0A634 4C 12 A6                  	JMP FreeSubconsScene_Jump
0A637                           
0A637                           FreeSubconsScene_Phase2_NoJump:
0A637                           	; check the top of the jar
0A637 C9 75                     	CMP #$75
0A639 90 0A                     	BCC FreeSubconsScene_PhaseExit
0A63B                           
0A63B                           	; check x-position for jar
0A63B A5 28                     	LDA PlayerXLo
0A63D C9 70                     	CMP #$70
0A63F 90 04                     	BCC FreeSubconsScene_PhaseExit
0A641                           
0A641 E6 50                     	INC PlayerState
0A643 C6 99                     	DEC PlayerInAir
0A645                           
0A645                           FreeSubconsScene_PhaseExit:
0A645 60                        	RTS
0A646                           
0A646                           
0A646                           ; Start pulling the cork
0A646                           FreeSubconsScene_Phase3:
0A646 20 DD 8E                  	JSR PlayerWalkJumpAnim
0A649                           
0A649 20 3E 8A                  	JSR ApplyPlayerPhysicsX
0A64C                           
0A64C                           	; check x-position for jar
0A64C A5 28                     	LDA PlayerXLo
0A64E C9 80                     	CMP #$80
0A650 90 F3                     	BCC FreeSubconsScene_PhaseExit
0A652                           
0A652                           	; pull the cork
0A652 E6 50                     	INC PlayerState
0A654 E6 9C                     	INC HoldingItem
0A656 A9 08                     	LDA #SpriteAnimation_Pulling
0A658 85 C7                     	STA PlayerAnimationFrame
0A65A A9 05                     	LDA #$05
0A65C 85 8E                     	STA FreeSubconsCorkCounter
0A65E A9 28                     	LDA #$28
0A660 85 82                     	STA PlayerStateTimer
0A662 60                        	RTS
0A663                           
0A663                           
0A663                           PullCorkFrameDurations:
0A663 14                        	.db $14
0A664 0A                        	.db $0A
0A665 14                        	.db $14
0A666 0A                        	.db $0A
0A667                           
0A667                           PullCorkOffsets:
0A667 1C                        	.db $1C
0A668 1B                        	.db $1B
0A669 1E                        	.db $1E
0A66A 1D                        	.db $1D
0A66B 1F                        	.db $1F
0A66C                           
0A66C                           
0A66C                           ; Pull the cork out
0A66C                           FreeSubconsScene_Phase4:
0A66C                           	; use PlayerStateTimer to hold this frame
0A66C A5 82                     	LDA PlayerStateTimer
0A66E D0 1D                     	BNE FreeSubconsScene_Phase4_Exit
0A670                           
0A670                           	; next FreeSubconsCorkCounter to move cork
0A670 C6 8E                     	DEC FreeSubconsCorkCounter
0A672 D0 12                     	BNE FreeSubconsScene_Phase4_NextCorkFrame
0A674                           
0A674                           	; uncorked! start jumping
0A674 E6 50                     	INC PlayerState
0A676 E6 99                     	INC PlayerInAir
0A678                           
0A678 A9 06                     	LDA #SpriteAnimation_Jumping
0A67A 85 C7                     	STA PlayerAnimationFrame
0A67C                           
0A67C A9 08                     	LDA #DPCM_ItemPull
0A67E 8D 01 06                  	STA DPCMQueue
0A681                           
0A681 A9 A0                     	LDA #$A0
0A683 85 4F                     	STA ObjectYVelocity + 8
0A685 60                        	RTS
0A686                           
0A686                           FreeSubconsScene_Phase4_NextCorkFrame:
0A686 A4 8E                     	LDY FreeSubconsCorkCounter
0A688 B9 62 A6                  	LDA PullCorkFrameDurations - 1, Y
0A68B 85 82                     	STA PlayerStateTimer
0A68D                           
0A68D                           FreeSubconsScene_Phase4_Exit:
0A68D 60                        	RTS
0A68E                           
0A68E                           
0A68E                           ; Free Subcons and jump repeatedly
0A68E                           FreeSubconsScene_Phase5:
0A68E 20 B7 A6                  	JSR FreeSubconsScene_Subcons
0A691                           
0A691 20 AC A6                  	JSR ApplyCorkRoomGravity
0A694                           
0A694 20 DD 8E                  	JSR PlayerWalkJumpAnim
0A697                           
0A697 20 88 90                  	JSR ApplyPlayerPhysicsY
0A69A                           
0A69A A5 46                     	LDA PlayerYVelocity
0A69C 30 09                     	BMI FreeSubconsScene_Phase5_Exit
0A69E                           
0A69E                           	; jump when we're on the jar
0A69E A5 32                     	LDA PlayerYLo
0A6A0 C9 80                     	CMP #$80
0A6A2 90 03                     	BCC FreeSubconsScene_Phase5_Exit
0A6A4                           
0A6A4 4C BB 8D                  	JMP PlayerStartJump
0A6A7                           
0A6A7                           FreeSubconsScene_Phase5_Exit:
0A6A7 60                        	RTS
0A6A8                           
0A6A8                           
0A6A8                           CorkRoomCharacterGravity:
0A6A8 04                        	.db $04 ; Mario
0A6A9 04                        	.db $04 ; Princess
0A6AA 04                        	.db $04 ; Toad
0A6AB 01                        	.db $01 ; Luigi
0A6AC                           
0A6AC                           
0A6AC                           ApplyCorkRoomGravity:
0A6AC A4 8F                     	LDY CurrentCharacter
0A6AE B9 A8 A6                  	LDA CorkRoomCharacterGravity, Y
0A6B1 18                        	CLC
0A6B2 65 46                     	ADC PlayerYVelocity
0A6B4 85 46                     	STA PlayerYVelocity
0A6B6 60                        	RTS
0A6B7                           
0A6B7                           
0A6B7                           ;
0A6B7                           ; Spits out Subcons and makes them flap their little wings
0A6B7                           ;
0A6B7                           FreeSubconsScene_Subcons:
0A6B7 A2 07                     	LDX #$07
0A6B9                           
0A6B9                           FreeSubconsScene_Subcons_Loop:
0A6B9 86 12                     	STX byte_RAM_12
0A6BB B5 86                     	LDA EnemyTimer, X
0A6BD F0 0B                     	BEQ FreeSubconsScene_Subcons_Movement
0A6BF                           
0A6BF C9 01                     	CMP #$01
0A6C1 D0 2B                     	BNE FreeSubconsScene_Subcons_Next
0A6C3                           
0A6C3 A9 08                     	LDA #SoundEffect1_ThrowItem
0A6C5 8D 02 06                  	STA SoundEffectQueue1
0A6C8 D0 24                     	BNE FreeSubconsScene_Subcons_Next
0A6CA                           
0A6CA                           FreeSubconsScene_Subcons_Movement:
0A6CA 20 D6 AF                  	JSR ApplyObjectMovement_Bank1
0A6CD                           
0A6CD B5 47                     	LDA ObjectYVelocity, X
0A6CF C9 08                     	CMP #$08
0A6D1 30 0F                     	BMI FreeSubconsScene_Subcons_Render
0A6D3                           
0A6D3 A9 00                     	LDA #$00
0A6D5 95 3D                     	STA ObjectXVelocity, X
0A6D7 A9 F9                     	LDA #$F9
0A6D9 95 47                     	STA ObjectYVelocity, X
0A6DB BD 3E A5                  	LDA CorkRoomSpriteAttributes + 1, X
0A6DE 49 40                     	EOR #ObjAttrib_Palette0 | ObjAttrib_16x32
0A6E0 95 65                     	STA ObjectAttributes, X
0A6E2                           
0A6E2                           FreeSubconsScene_Subcons_Render:
0A6E2 A5 10                     	LDA byte_RAM_10
0A6E4 0A                        	ASL A
0A6E5 29 02                     	AND #$02
0A6E7 85 0F                     	STA byte_RAM_F
0A6E9 20 24 A7                  	JSR FreeSubconsScene_Render
0A6EC                           
0A6EC F6 86                     	INC EnemyTimer, X
0A6EE                           
0A6EE                           FreeSubconsScene_Subcons_Next:
0A6EE D6 86                     	DEC EnemyTimer, X
0A6F0 CA                        	DEX
0A6F1 10 C6                     	BPL FreeSubconsScene_Subcons_Loop
0A6F3                           
0A6F3 60                        	RTS
0A6F4                           
0A6F4                           
0A6F4                           
0A6F4                           FreeSubconsScene_Cork:
0A6F4 A9 04                     	LDA #$04
0A6F6 85 0F                     	STA byte_RAM_F
0A6F8 A2 08                     	LDX #$08
0A6FA 86 12                     	STX byte_RAM_12
0A6FC 20 24 A7                  	JSR FreeSubconsScene_Render
0A6FF                           
0A6FF A4 8E                     	LDY FreeSubconsCorkCounter
0A701 D0 09                     	BNE FreeSubconsScene_Cork_Pull
0A703                           
0A703 A5 3B                     	LDA ObjectYLo + 8
0A705 C9 F0                     	CMP #$F0
0A707 B0 0B                     	BCS FreeSubconsScene_Cork_Exit
0A709                           
0A709 4C 95 AF                  	JMP ApplyObjectPhysicsY_Bank1
0A70C                           
0A70C                           FreeSubconsScene_Cork_Pull:
0A70C B9 66 A6                  	LDA PullCorkOffsets - 1, Y
0A70F 18                        	CLC
0A710 65 32                     	ADC PlayerYLo
0A712 85 3B                     	STA ObjectYLo + 8
0A714                           
0A714                           FreeSubconsScene_Cork_Exit:
0A714 60                        	RTS
0A715                           
0A715                           
0A715                           CorkRoomSpriteTiles:
0A715 E8                        	.db $E8 ; subcon left, wings up
0A716 EA                        	.db $EA ; subcon right, wings up
0A717 EC                        	.db $EC ; subcon left, wings down
0A718 EE                        	.db $EE ; subcon right, wings down
0A719                           IFNDEF PLAYER_STUFF
0A719                           	.db $61 ; cork left
0A719                           	.db $63 ; cork right
0A719                           ENDIF
0A719                           IFDEF PLAYER_STUFF
0A719 69                        	.db $69 ; cork left
0A71A 6B                        	.db $6b ; cork right
0A71B                           ENDIF
0A71B                           
0A71B                           CorkRoomSpriteOAMAddress:
0A71B 30                        	.db $30 ; subcon 8
0A71C 38                        	.db $38 ; subcon 7
0A71D 40                        	.db $40 ; subcon 6
0A71E 48                        	.db $48 ; subcon 5
0A71F 50                        	.db $50 ; subcon 4
0A720 58                        	.db $58 ; subcon 3
0A721 60                        	.db $60 ; subcon 2
0A722 68                        	.db $68 ; subcon 1
0A723 00                        	.db $00 ; cork
0A724                           
0A724                           
0A724                           FreeSubconsScene_Render:
0A724 BC 1B A7                  	LDY CorkRoomSpriteOAMAddress, X
0A727 B5 33                     	LDA ObjectYLo, X
0A729 99 00 02                  	STA SpriteDMAArea, Y
0A72C 99 04 02                  	STA SpriteDMAArea + 4, Y
0A72F B5 29                     	LDA ObjectXLo, X
0A731 99 03 02                  	STA SpriteDMAArea + 3, Y
0A734 18                        	CLC
0A735 69 08                     	ADC #$08
0A737 99 07 02                  	STA SpriteDMAArea + 7, Y
0A73A B5 65                     	LDA ObjectAttributes, X
0A73C 99 02 02                  	STA SpriteDMAArea + 2, Y
0A73F 99 06 02                  	STA SpriteDMAArea + 6, Y
0A742 A6 0F                     	LDX byte_RAM_F
0A744 29 40                     	AND #ObjAttrib_16x32
0A746 D0 0B                     	BNE FreeSubconsScene_Render_Flipped
0A748                           
0A748 BD 15 A7                  	LDA CorkRoomSpriteTiles, X
0A74B 99 01 02                  	STA SpriteDMAArea + 1, Y
0A74E BD 16 A7                  	LDA CorkRoomSpriteTiles + 1, X
0A751 D0 09                     	BNE FreeSubconsScene_Render_Exit
0A753                           
0A753                           FreeSubconsScene_Render_Flipped:
0A753 BD 16 A7                  	LDA CorkRoomSpriteTiles + 1, X
0A756 99 01 02                  	STA SpriteDMAArea + 1, Y
0A759 BD 15 A7                  	LDA CorkRoomSpriteTiles, X
0A75C                           
0A75C                           FreeSubconsScene_Render_Exit:
0A75C 99 05 02                  	STA SpriteDMAArea + 5, Y
0A75F A6 12                     	LDX byte_RAM_12
0A761 60                        	RTS
0A762                           
0A762                           
0A762                           EndingCelebrationCeilingTextAndPodium:
0A762 20 00 20                  	.db $20, $00, $20
0A765 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A775 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A785                           
0A785 20 20 20                  	.db $20, $20, $20
0A788 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A798 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A7A8                           
0A7A8 20 40 20                  	.db $20, $40, $20
0A7AB 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A7BB 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A7CB                           
0A7CB 20 60 20                  	.db $20, $60, $20
0A7CE 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A7DE 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A7EE                           
0A7EE 20 88 01 5A               	.db $20, $88, $01, $5A
0A7F2 20 89 4E 9A               	.db $20, $89, $4E, $9A
0A7F6 20 97 01 5C               	.db $20, $97, $01, $5C
0A7FA 20 A8 C3 9B               	.db $20, $A8, $C3, $9B
0A7FE 20 B7 C3 9B               	.db $20, $B7, $C3, $9B
0A802 21 08 01 5B               	.db $21, $08, $01, $5B
0A806 21 09 4E 9A               	.db $21, $09, $4E, $9A
0A80A 21 17 01 5D               	.db $21, $17, $01, $5D
0A80E 20 AB 0B DC E8 E7 ED EB.. 	.db $20, $AB, $0B, $DC, $E8, $E7, $ED, $EB, $E2, $DB, $EE, $ED, $E8, $EB
0A81C 20 E3 04 40 42 44 46      	.db $20, $E3, $04, $40, $42, $44, $46
0A823 20 F9 04 40 42 44 46      	.db $20, $F9, $04, $40, $42, $44, $46
0A82A 21 23 C9 48               	.db $21, $23, $C9, $48
0A82E 21 24 C9 49               	.db $21, $24, $C9, $49
0A832 21 25 C9 4A               	.db $21, $25, $C9, $4A
0A836 21 26 C9 4B               	.db $21, $26, $C9, $4B
0A83A 22 43 04 4C 4D 4E 4F      	.db $22, $43, $04, $4C, $4D, $4E, $4F
0A841 21 03 04 41 43 45 47      	.db $21, $03, $04, $41, $43, $45, $47
0A848 21 19 04 41 43 45 47      	.db $21, $19, $04, $41, $43, $45, $47
0A84F 21 39 C9 48               	.db $21, $39, $C9, $48
0A853 21 3A C9 49               	.db $21, $3A, $C9, $49
0A857 21 3B C9 4A               	.db $21, $3B, $C9, $4A
0A85B 21 3C C9 4B               	.db $21, $3C, $C9, $4B
0A85F 22 59 04 4C 4D 4E 4F      	.db $22, $59, $04, $4C, $4D, $4E, $4F
0A866 21 CA 4C 54               	.db $21, $CA, $4C, $54
0A86A 21 EA 4C 55               	.db $21, $EA, $4C, $55
0A86E 22 0B 0A 50 52 50 52 50.. 	.db $22, $0B, $0A, $50, $52, $50, $52, $50, $52, $50, $52, $50, $52
0A87B 22 2B 0A 51 53 51 53 51.. 	.db $22, $2B, $0A, $51, $53, $51, $53, $51, $53, $51, $53, $51, $53
0A888 22 4C 02 3A 3B            	.db $22, $4C, $02, $3A, $3B
0A88D 22 6C C5 3C               	.db $22, $6C, $C5, $3C
0A891 22 6D C5 3D               	.db $22, $6D, $C5, $3D
0A895 22 52 02 3A 3B            	.db $22, $52, $02, $3A, $3B
0A89A 22 72 C5 3C               	.db $22, $72, $C5, $3C
0A89E 22 73 C5 3D               	.db $22, $73, $C5, $3D
0A8A2 00                        	.db $00
0A8A3                           
0A8A3                           EndingCelebrationFloorAndSubconParade:
0A8A3 23 00 20                  	.db $23, $00, $20
0A8A6 00 02 08 0A 0C 0E 04 06.. 	.db $00, $02, $08, $0A, $0C, $0E, $04, $06, $08, $0A, $04, $06, $0C, $0E, $04, $06
0A8B6 08 0A 00 02 0C 0E 0C 0E.. 	.db $08, $0A, $00, $02, $0C, $0E, $0C, $0E, $00, $02, $04, $06, $04, $06, $08, $0A
0A8C6                           
0A8C6 23 20 20                  	.db $23, $20, $20
0A8C9 01 03 09 0B 0D 0F 05 07.. 	.db $01, $03, $09, $0B, $0D, $0F, $05, $07, $09, $0B, $05, $07, $0D, $0F, $05, $07
0A8D9 09 0B 01 03 0D 0F 0D 0F.. 	.db $09, $0B, $01, $03, $0D, $0F, $0D, $0F, $01, $03, $05, $07, $05, $07, $09, $0B
0A8E9                           
0A8E9 27 00 20                  	.db $27, $00, $20
0A8EC 74 76 74 76 74 76 74 76.. 	.db $74, $76, $74, $76, $74, $76, $74, $76, $74, $76, $74, $76, $74, $76, $74, $76
0A8FC 74 76 74 76 74 76 74 76.. 	.db $74, $76, $74, $76, $74, $76, $74, $76, $74, $76, $74, $76, $74, $76, $74, $76
0A90C                           
0A90C 27 20 20                  	.db $27, $20, $20
0A90F 75 77 75 77 75 77 75 77.. 	.db $75, $77, $75, $77, $75, $77, $75, $77, $75, $77, $75, $77, $75, $77, $75, $77
0A91F 75 77 75 77 75 77 75 77.. 	.db $75, $77, $75, $77, $75, $77, $75, $77, $75, $77, $75, $77, $75, $77, $75, $77
0A92F                           
0A92F 23 40 20                  	.db $23, $40, $20
0A932 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A942 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A952                           
0A952 23 60 20                  	.db $23, $60, $20
0A955 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A965 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A975                           
0A975 23 80 20                  	.db $23, $80, $20
0A978 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A988 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A998                           
0A998 23 A0 20                  	.db $23, $A0, $20
0A99B 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A9AB 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A9BB                           
0A9BB 27 40 20                  	.db $27, $40, $20
0A9BE 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A9CE 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0A9DE                           
0A9DE 27 60 20                  	.db $27, $60, $20
0A9E1 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0A9F1 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0AA01                           
0AA01 27 80 20                  	.db $27, $80, $20
0AA04 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0AA14 80 81 80 81 80 81 80 81.. 	.db $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81
0AA24                           
0AA24 27 A0 20                  	.db $27, $A0, $20
0AA27 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0AA37 81 80 81 80 81 80 81 80.. 	.db $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80, $81, $80
0AA47                           
0AA47 23 C0 48 AA               	.db $23, $C0, $48, $AA
0AA4B 23 C8 08 15 05 FF FF FF.. 	.db $23, $C8, $08, $15, $05, $FF, $FF, $FF, $FF, $15, $45
0AA56                           
0AA56 23 D0 20                  	.db $23, $D0, $20
0AA59 31 00 FF FF FF FF 00 44.. 	.db $31, $00, $FF, $FF, $FF, $FF, $00, $44, $33, $00, $A6, $A5, $A5, $A6, $00, $44
0AA69 F3 F0 59 AA AA 96 F0 74.. 	.db $F3, $F0, $59, $AA, $AA, $96, $F0, $74, $DD, $FF, $55, $AA, $AA, $95, $55, $55
0AA79                           
0AA79 23 F0 48 A5               	.db $23, $F0, $48, $A5
0AA7D 23 F8 48 0A               	.db $23, $F8, $48, $0A
0AA81 27 F0 48 A5               	.db $27, $F0, $48, $A5
0AA85 27 F8 48 0A               	.db $27, $F8, $48, $0A
0AA89 00                        	.db $00
0AA8A                           
0AA8A                           EndingCelebrationSubconStandStill:
0AA8A 23 00 20                  	.db $23, $00, $20
0AA8D 70 72 70 72 70 72 70 72.. 	.db $70, $72, $70, $72, $70, $72, $70, $72, $70, $72, $70, $72, $70, $72, $70, $72
0AA9D 70 72 70 72 70 72 70 72.. 	.db $70, $72, $70, $72, $70, $72, $70, $72, $70, $72, $70, $72, $70, $72, $70, $72
0AAAD 23 20 20                  	.db $23, $20, $20
0AAB0 71 73 71 73 71 73 71 73.. 	.db $71, $73, $71, $73, $71, $73, $71, $73, $71, $73, $71, $73, $71, $73, $71, $73
0AAC0 71 73 71 73 71 73 71 73.. 	.db $71, $73, $71, $73, $71, $73, $71, $73, $71, $73, $71, $73, $71, $73, $71, $73
0AAD0 00                        	.db $00
0AAD1                           
0AAD1                           EndingCelebrationUnusedText_THE_END:
0AAD1 21 AC 07                  	.db $21, $AC, $07
0AAD4 ED E1 DE FB DE E7 DD      	.db $ED, $E1, $DE, $FB, $DE, $E7, $DD
0AADB 00                        	.db $00
0AADC                           
0AADC                           EndingCelebrationPaletteFade1:
0AADC 3F 00 20                  	.db $3F, $00, $20
0AADF 01 30 21 0F               	.db $01, $30, $21, $0F
0AAE3 01 30 16 0F               	.db $01, $30, $16, $0F
0AAE7 01 28 18 0F               	.db $01, $28, $18, $0F
0AAEB 01 30 30 01               	.db $01, $30, $30, $01
0AAEF 01 27 16 0F               	.db $01, $27, $16, $0F
0AAF3 01 37 2A 0F               	.db $01, $37, $2A, $0F
0AAF7 01 27 30 0F               	.db $01, $27, $30, $0F
0AAFB 01 36 25 0F               	.db $01, $36, $25, $0F
0AAFF 00                        	.db $00
0AB00                           
0AB00                           EndingCelebrationPaletteFade2:
0AB00 3F 00 20                  	.db $3F, $00, $20
0AB03 0F 10 00 0F               	.db $0F, $10, $00, $0F
0AB07 0F 10 00 0F               	.db $0F, $10, $00, $0F
0AB0B 0F 10 00 0F               	.db $0F, $10, $00, $0F
0AB0F 0F 10 00 0F               	.db $0F, $10, $00, $0F
0AB13 0F 10 00 0F               	.db $0F, $10, $00, $0F
0AB17 0F 10 00 0F               	.db $0F, $10, $00, $0F
0AB1B 0F 10 00 0F               	.db $0F, $10, $00, $0F
0AB1F 0F 10 00 0F               	.db $0F, $10, $00, $0F
0AB23 00                        	.db $00
0AB24                           
0AB24                           EndingCelebrationPaletteFade3:
0AB24 3F 00 20                  	.db $3F, $00, $20
0AB27 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AB2B 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AB2F 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AB33 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AB37 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AB3B 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AB3F 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AB43 0F 00 0F 0F               	.db $0F, $00, $0F, $0F
0AB47 00                        	.db $00
0AB48                           
0AB48                           EndingScreenUpdateIndex:
0AB48 04                        	.db EndingUpdateBuffer_PaletteFade1
0AB49 05                        	.db EndingUpdateBuffer_PaletteFade2 ; 1 ; @TODO This seems wrong, somehow
0AB4A 06                        	.db EndingUpdateBuffer_PaletteFade3 ; 2
0AB4B                           
0AB4B                           ContributorSpriteZeroOAMData:
0AB4B 8C FC 20 94               	.db $8C, $FC, $20, $94
0AB4F                               
0AB4F                           
0AB4F                           IFDEF PLAYER_STUFF
0AB4F                           ContributorCharacterOAMData:
0AB4F                           	; Mario
0AB4F 4F 00 20 50               	.db $4F, $00, $20, $50
0AB53 4F 02 20 58               	.db $4F, $02, $20, $58
0AB57 5F 04 20 50               	.db $5F, $04, $20, $50
0AB5B 5F 06 20 58               	.db $5F, $06, $20, $58
0AB5F                           	; Luigi
0AB5F 4F 08 21 68               	.db $4F, $08, $21, $68
0AB63 4F 0A 21 70               	.db $4F, $0a, $21, $70
0AB67 5F 0C 21 68               	.db $5F, $0c, $21, $68
0AB6B 5F 0E 21 70               	.db $5F, $0e, $21, $70
0AB6F                           	; Toad
0AB6F 4F 10 22 88               	.db $4F, $10, $22, $88
0AB73 4F 12 22 90               	.db $4F, $12, $22, $90
0AB77 5F 14 22 88               	.db $5F, $14, $22, $88
0AB7B 5F 16 22 90               	.db $5F, $16, $22, $90
0AB7F                           	; Princess1
0AB7F 4F 18 23 A0               	.db $4F, $18, $23, $A0
0AB83 4F 1A 23 A8               	.db $4F, $1a, $23, $A8
0AB87 5F 1C 23 A0               	.db $5F, $1c, $23, $A0
0AB8B 5F 1E 23 A8               	.db $5F, $1e, $23, $A8
0AB8F                           ENDIF
0AB8F                           
0AB8F                           IFNDEF PLAYER_STUFF
0AB8F                           ContributorCharacterOAMData:
0AB8F                           	; Mario
0AB8F                           	.db $4F, $61, $20, $50
0AB8F                           	.db $4F, $63, $20, $58
0AB8F                           	.db $5F, $65, $20, $50
0AB8F                           	.db $5F, $67, $20, $58
0AB8F                           	; Luigi
0AB8F                           	.db $4F, $69, $21, $68
0AB8F                           	.db $4F, $6B, $21, $70
0AB8F                           	.db $5F, $6D, $21, $68
0AB8F                           	.db $5F, $6F, $21, $70
0AB8F                           	; Toad
0AB8F                           	.db $4F, $83, $22, $88
0AB8F                           	.db $4F, $83, $62, $90
0AB8F                           	.db $5F, $87, $22, $88
0AB8F                           	.db $5F, $87, $62, $90
0AB8F                           	; Princess
0AB8F                           	.db $4F, $8B, $23, $A0
0AB8F                           	.db $4F, $8D, $23, $A8
0AB8F                           	.db $5F, $8F, $23, $A0
0AB8F                           	.db $5F, $91, $23, $A8
0AB8F                           ENDIF
0AB8F                           
0AB8F                           
0AB8F                           ;
0AB8F                           ; Shows the part of the ending where the Subcons carry Wart to an uncertain
0AB8F                           ; fate while the characters stand and wave
0AB8F                           ;
0AB8F                           ContributorScene:
0AB8F 20 26 A3                  	JSR WaitForNMI_Ending_TurnOffPPU
0AB92                           
0AB92 A9 00                     	LDA #VMirror
0AB94 20 15 FE                  	JSR ChangeNametableMirroring
0AB97                           
0AB97 20 6F E6                  	JSR ClearNametablesAndSprites
0AB9A                           
0AB9A A9 40                     	LDA #Stack100_Menu
0AB9C 8D 00 01                  	STA StackArea
0AB9F 20 F0 AC                  	JSR EnableNMI_Bank1
0ABA2                           
0ABA2 20 2E A3                  	JSR WaitForNMI_Ending
0ABA5                           
0ABA5 A9 02                     	LDA #EndingUpdateBuffer_CeilingTextAndPodium
0ABA7 85 11                     	STA ScreenUpdateIndex
0ABA9 20 2E A3                  	JSR WaitForNMI_Ending
0ABAC                           
0ABAC A9 03                     	LDA #EndingUpdateBuffer_FloorAndSubconParade
0ABAE 85 11                     	STA ScreenUpdateIndex
0ABB0 20 2E A3                  	JSR WaitForNMI_Ending
0ABB3                           
0ABB3 20 74 AE                  	JSR Ending_GetContributor
0ABB6                           
0ABB6 20 2E A3                  	JSR WaitForNMI_Ending
0ABB9                           
0ABB9 A9 01                     	LDA #HMirror
0ABBB 20 15 FE                  	JSR ChangeNametableMirroring
0ABBE                           IFDEF PLAYER_STUFF
0ABBE A9 31                         LDA #$31
0ABC0 8D F9 06                      STA SpriteCHR1
0ABC3                           ENDIF
0ABC3                           
0ABC3 A0 03                     	LDY #$03
0ABC5                           ContributorScene_SpriteZeroLoop:
0ABC5 B9 4B AB                  	LDA ContributorSpriteZeroOAMData, Y
0ABC8 99 00 02                  	STA SpriteDMAArea, Y
0ABCB 88                        	DEY
0ABCC 10 F7                     	BPL ContributorScene_SpriteZeroLoop
0ABCE                           
0ABCE A9 00                     	LDA #$00
0ABD0 85 F3                     	STA byte_RAM_F3
0ABD2 85 E6                     	STA byte_RAM_E6
0ABD4                           
0ABD4 A0 3F                     	LDY #$3F
0ABD6                           ContributorScene_CharacterLoop:
0ABD6                           IFNDEF PLAYER_STUFF
0ABD6                           	LDA ContributorCharacterOAMData, Y
0ABD6                           	STA SpriteDMAArea + $10, Y
0ABD6                           	DEY
0ABD6                           	BPL ContributorScene_CharacterLoop
0ABD6                           ENDIF
0ABD6                           IFDEF PLAYER_STUFF
0ABD6 98                        -   TYA
0ABD7 4A                            LSR
0ABD8 4A                            LSR
0ABD9 4A                            LSR
0ABDA 4A                            LSR
0ABDB AA                            TAX
0ABDC BD 62 E3                      LDA CharLookupTable_Ordered, X  
0ABDF 2D E0 7D                      AND CharacterLock_Variable
0ABE2 F0 0B                         BEQ +
0ABE4 A9 FF                         LDA #$FF 
0ABE6 99 10 02                  	STA SpriteDMAArea + $10, Y
0ABE9 88                            DEY
0ABEA 10 EA                         BPL -
0ABEC 4C F8 AB                      JMP ++
0ABEF B9 4F AB                  +	LDA ContributorCharacterOAMData, Y
0ABF2 99 10 02                  	STA SpriteDMAArea + $10, Y
0ABF5 88                        	DEY
0ABF6 10 DE                     	BPL -
0ABF8                           ++
0ABF8                           ENDIF
0ABF8                           
0ABF8 A9 FF                     	LDA #$0FF
0ABFA 85 14                     	STA PlayerXHi
0ABFC A9 A0                     	LDA #$A0
0ABFE 85 28                     	STA PlayerXLo
0AC00 A9 08                     	LDA #$08
0AC02 85 3C                     	STA PlayerXVelocity
0AC04 A9 01                     	LDA #$01
0AC06 85 EC                     	STA IsHorizontalLevel
0AC08                           
0AC08                           loc_BANK1_AAD4:
0AC08 20 2A A3                  	JSR WaitForNMI_Ending_TurnOnPPU
0AC0B                           
0AC0B E6 F3                     	INC byte_RAM_F3
0AC0D E6 10                     	INC byte_RAM_10
0AC0F 20 25 AF                  	JSR ContributorTicker
0AC12                           
0AC12 20 00 AD                  	JSR loc_BANK1_ABCC
0AC15                           
0AC15 A5 E6                     	LDA byte_RAM_E6
0AC17 C9 03                     	CMP #$03
0AC19 B0 39                     	BCS loc_BANK1_AB20
0AC1B                           
0AC1B                           loc_BANK1_AAE7:
0AC1B 2C 02 20                  	BIT PPUSTATUS
0AC1E 70 FB                     	BVS loc_BANK1_AAE7
0AC20                           
0AC20                           loc_BANK1_AAEC:
0AC20 2C 02 20                  	BIT PPUSTATUS
0AC23 50 FB                     	BVC loc_BANK1_AAEC
0AC25                           
0AC25 A2 02                     	LDX #$02
0AC27                           
0AC27                           loc_BANK1_AAF3:
0AC27 A0 00                     	LDY #$00
0AC29                           
0AC29                           loc_BANK1_AAF5:
0AC29 A5 00                     	LDA byte_RAM_0
0AC2B A5 00                     	LDA byte_RAM_0
0AC2D 88                        	DEY
0AC2E D0 F9                     	BNE loc_BANK1_AAF5
0AC30                           
0AC30 CA                        	DEX
0AC31 D0 F4                     	BNE loc_BANK1_AAF3
0AC33                           
0AC33 AD 02 20                  	LDA PPUSTATUS
0AC36 A5 F2                     	LDA byte_RAM_F2
0AC38 8D 05 20                  	STA PPUSCROLL
0AC3B A9 00                     	LDA #$00
0AC3D 8D 05 20                  	STA PPUSCROLL
0AC40 A5 F3                     	LDA byte_RAM_F3
0AC42 C9 0A                     	CMP #$0A
0AC44 90 0B                     	BCC loc_BANK1_AB1D
0AC46                           
0AC46 A9 00                     	LDA #$00
0AC48 85 F3                     	STA byte_RAM_F3
0AC4A A5 F2                     	LDA byte_RAM_F2
0AC4C 38                        	SEC
0AC4D E9 30                     	SBC #$30
0AC4F 85 F2                     	STA byte_RAM_F2
0AC51                           
0AC51                           loc_BANK1_AB1D:
0AC51 4C 08 AC                  	JMP loc_BANK1_AAD4
0AC54                           
0AC54                           ; ---------------------------------------------------------------------------
0AC54                           
0AC54                           loc_BANK1_AB20:
0AC54 A9 00                     	LDA #VMirror
0AC56 20 15 FE                  	JSR ChangeNametableMirroring
0AC59                           
0AC59 A9 01                     	LDA #$01
0AC5B 85 F2                     	STA byte_RAM_F2
0AC5D 4A                        	LSR A
0AC5E 85 F3                     	STA byte_RAM_F3
0AC60 85 07                     	STA byte_RAM_7
0AC62 A9 07                     	LDA #EndingUpdateBuffer_SubconStandStill
0AC64 85 11                     	STA ScreenUpdateIndex
0AC66                           
0AC66                           loc_BANK1_AB32:
0AC66 20 2E A3                  	JSR WaitForNMI_Ending
0AC69                           
0AC69 20 F0 AC                  	JSR EnableNMI_Bank1
0AC6C                           
0AC6C E6 F3                     	INC byte_RAM_F3
0AC6E 20 25 AF                  	JSR ContributorTicker
0AC71                           
0AC71 20 40 AE                  	JSR ContributorCharacterAnimation
0AC74                           
0AC74                           loc_BANK1_AB40:
0AC74 2C 02 20                  	BIT PPUSTATUS
0AC77 70 FB                     	BVS loc_BANK1_AB40
0AC79                           
0AC79                           loc_BANK1_AB45:
0AC79 2C 02 20                  	BIT PPUSTATUS
0AC7C 50 FB                     	BVC loc_BANK1_AB45
0AC7E                           
0AC7E A2 02                     	LDX #$02
0AC80                           
0AC80                           loc_BANK1_AB4C:
0AC80 A0 00                     	LDY #$00
0AC82                           
0AC82                           loc_BANK1_AB4E:
0AC82 A5 00                     	LDA byte_RAM_0
0AC84 A5 00                     	LDA byte_RAM_0
0AC86 88                        	DEY
0AC87 D0 F9                     	BNE loc_BANK1_AB4E
0AC89                           
0AC89 CA                        	DEX
0AC8A D0 F4                     	BNE loc_BANK1_AB4C
0AC8C                           
0AC8C A9 B0                     	LDA #$B0
0AC8E 05 F2                     	ORA byte_RAM_F2
0AC90 85 FF                     	STA PPUCtrlMirror
0AC92 8D 00 20                  	STA PPUCTRL
0AC95 AD 02 20                  	LDA PPUSTATUS
0AC98 A9 00                     	LDA #$00
0AC9A 8D 05 20                  	STA PPUSCROLL
0AC9D A9 00                     	LDA #$00
0AC9F 8D 05 20                  	STA PPUSCROLL
0ACA2 A5 F3                     	LDA byte_RAM_F3
0ACA4 C9 14                     	CMP #$14
0ACA6 90 0C                     	BCC loc_BANK1_AB80
0ACA8                           
0ACA8 A9 00                     	LDA #$00
0ACAA 85 F3                     	STA byte_RAM_F3
0ACAC A5 F2                     	LDA byte_RAM_F2
0ACAE 49 01                     	EOR #$01
0ACB0 85 F2                     	STA byte_RAM_F2
0ACB2 E6 07                     	INC byte_RAM_7
0ACB4                           
0ACB4                           loc_BANK1_AB80:
0ACB4 A5 07                     	LDA byte_RAM_7
0ACB6 C9 29                     	CMP #$29
0ACB8 90 AC                     	BCC loc_BANK1_AB32
0ACBA                           
0ACBA 20 C4 AC                  	JSR EndingSceneTransition
0ACBD                           
0ACBD A5 E6                     	LDA byte_RAM_E6
0ACBF C9 04                     	CMP #$04
0ACC1 90 A3                     	BCC loc_BANK1_AB32
0ACC3                           
0ACC3 60                        	RTS
0ACC4                           
0ACC4                           
0ACC4                           ;
0ACC4                           ; Advances to the next scene and does the palette transition
0ACC4                           ;
0ACC4                           EndingSceneTransition:
0ACC4 A5 10                     	LDA byte_RAM_10
0ACC6 29 03                     	AND #$03
0ACC8 D0 10                     	BNE EndingSceneTransition_Exit
0ACCA                           
0ACCA E6 E5                     	INC byte_RAM_E5
0ACCC A4 E5                     	LDY byte_RAM_E5
0ACCE C0 03                     	CPY #$03
0ACD0 B0 06                     	BCS EndingSceneTransition_Next
0ACD2                           
0ACD2 B9 48 AB                  	LDA EndingScreenUpdateIndex, Y
0ACD5 85 11                     	STA ScreenUpdateIndex
0ACD7 60                        	RTS
0ACD8                           
0ACD8                           EndingSceneTransition_Next:
0ACD8 E6 E6                     	INC byte_RAM_E6
0ACDA                           
0ACDA                           EndingSceneTransition_Exit:
0ACDA 60                        	RTS
0ACDB                           
0ACDB                           
0ACDB                           ; ---------------------------------------------------------------------------
0ACDB                           
0ACDB                           loc_BANK1_ABA7:
0ACDB A5 10                     	LDA byte_RAM_10
0ACDD 29 03                     	AND #$03
0ACDF D0 F9                     	BNE EndingSceneTransition_Exit
0ACE1                           
0ACE1 C6 E5                     	DEC byte_RAM_E5
0ACE3 A4 E5                     	LDY byte_RAM_E5
0ACE5 B9 48 AB                  	LDA EndingScreenUpdateIndex, Y
0ACE8 85 11                     	STA ScreenUpdateIndex
0ACEA 98                        	TYA
0ACEB D0 ED                     	BNE EndingSceneTransition_Exit
0ACED                           
0ACED E6 E6                     	INC byte_RAM_E6
0ACEF 60                        	RTS
0ACF0                           
0ACF0                           
0ACF0                           EnableNMI_Bank1:
0ACF0 A9 B0                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0ACF2 85 FF                     	STA PPUCtrlMirror
0ACF4 8D 00 20                  	STA PPUCTRL
0ACF7 60                        	RTS
0ACF8                           
0ACF8                           
0ACF8                           DisableNMI_Bank1:
0ACF8 A9 30                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIDisabled
0ACFA 8D 00 20                  	STA PPUCTRL
0ACFD 85 FF                     	STA PPUCtrlMirror
0ACFF 60                        	RTS
0AD00                           
0AD00                           
0AD00                           
0AD00                           loc_BANK1_ABCC:
0AD00 20 40 AE                  	JSR ContributorCharacterAnimation
0AD03                           
0AD03 A5 E6                     	LDA byte_RAM_E6
0AD05 20 A6 D9                  	JSR JumpToTableAfterJump
0AD08                           
0AD08 DB AC                     	.dw loc_BANK1_ABA7
0AD0A 3E AD                     	.dw loc_BANK1_AC0A
0AD0C BB AD                     	.dw loc_BANK1_AC87
0AD0E                           
0AD0E                           
0AD0E                           byte_BANK1_ABDA:
0AD0E C0                        	.db $C0
0AD0F C8                        	.db $C8
0AD10 B8                        	.db $B8
0AD11 B8                        	.db $B8
0AD12 C8                        	.db $C8
0AD13 C0                        	.db $C0
0AD14                           
0AD14                           byte_BANK1_ABE0:
0AD14 C0                        	.db $C0
0AD15 08                        	.db $08
0AD16 E0                        	.db $E0
0AD17 F0                        	.db $F0
0AD18 D0                        	.db $D0
0AD19 E8                        	.db $E8
0AD1A                           
0AD1A                           EndingWartTiles:
0AD1A 11                        	.db $11
0AD1B 13                        	.db $13
0AD1C 19                        	.db $19
0AD1D 1B                        	.db $1B
0AD1E 21                        	.db $21
0AD1F 23                        	.db $23
0AD20 15                        	.db $15
0AD21 17                        	.db $17
0AD22 1D                        	.db $1D
0AD23 1F                        	.db $1F
0AD24 25                        	.db $25
0AD25 27                        	.db $27
0AD26                           
0AD26                           byte_BANK1_ABF2:
0AD26 00                        	.db $00
0AD27 08                        	.db $08
0AD28 10                        	.db $10
0AD29 18                        	.db $18
0AD2A 20                        	.db $20
0AD2B 28                        	.db $28
0AD2C 00                        	.db $00
0AD2D 08                        	.db $08
0AD2E 10                        	.db $10
0AD2F 18                        	.db $18
0AD30 20                        	.db $20
0AD31 28                        	.db $28
0AD32                           
0AD32                           byte_BANK1_ABFE:
0AD32 00                        	.db $00
0AD33 00                        	.db $00
0AD34 00                        	.db $00
0AD35 00                        	.db $00
0AD36 00                        	.db $00
0AD37 00                        	.db $00
0AD38 10                        	.db $10
0AD39 10                        	.db $10
0AD3A 10                        	.db $10
0AD3B 10                        	.db $10
0AD3C 10                        	.db $10
0AD3D 10                        	.db $10
0AD3E                           
0AD3E                           
0AD3E                           ; ---------------------------------------------------------------------------
0AD3E                           
0AD3E                           loc_BANK1_AC0A:
0AD3E 20 3E 8A                  	JSR ApplyPlayerPhysicsX
0AD41                           
0AD41 A5 14                     	LDA PlayerXHi
0AD43 C9 01                     	CMP #$01
0AD45 D0 24                     	BNE loc_BANK1_AC37
0AD47                           
0AD47 A5 28                     	LDA PlayerXLo
0AD49 C9 20                     	CMP #$20
0AD4B 90 1E                     	BCC loc_BANK1_AC37
0AD4D                           
0AD4D                           	INC_abs byte_RAM_E6
0AD4D                           	IFDEF COMPATIBILITY
0AD4D EE                        		.db $ee
0AD4E E6 00                     		.dw byte_RAM_E6
0AD50                           	ELSE
0AD50                           		INC byte_RAM_E6
0AD50                           		NOP_compat
0AD50                           	ENDIF
0AD50                           
0AD50 A9 A0                     	LDA #$A0
0AD52 85 10                     	STA byte_RAM_10
0AD54 A2 05                     	LDX #$05
0AD56                           
0AD56                           loc_BANK1_AC22:
0AD56 A9 20                     	LDA #$20
0AD58 95 29                     	STA ObjectXLo, X
0AD5A A9 A8                     	LDA #$A8
0AD5C                           
0AD5C                           loc_BANK1_AC28:
0AD5C 95 33                     	STA ObjectYLo, X
0AD5E BD 0E AD                  	LDA byte_BANK1_ABDA, X
0AD61 95 3D                     	STA ObjectXVelocity, X
0AD63 BD 14 AD                  	LDA byte_BANK1_ABE0, X
0AD66 95 47                     	STA ObjectYVelocity, X
0AD68 CA                        	DEX
0AD69 10 EB                     	BPL loc_BANK1_AC22
0AD6B                           
0AD6B                           loc_BANK1_AC37:
0AD6B A0 A0                     	LDY #$A0
0AD6D A5 10                     	LDA byte_RAM_10
0AD6F 29 38                     	AND #$38
0AD71 D0 01                     	BNE loc_BANK1_AC40
0AD73                           
0AD73 88                        	DEY
0AD74                           
0AD74                           loc_BANK1_AC40:
0AD74 29 08                     	AND #$08
0AD76 D0 01                     	BNE loc_BANK1_AC45
0AD78                           
0AD78 88                        	DEY
0AD79                           
0AD79                           loc_BANK1_AC45:
0AD79 84 32                     	STY PlayerYLo
0AD7B A2 0B                     	LDX #$0B
0AD7D A0 70                     	LDY #$70
0AD7F                           
0AD7F                           loc_BANK1_AC4B:
0AD7F A5 32                     	LDA PlayerYLo
0AD81 18                        	CLC
0AD82 7D 32 AD                  	ADC byte_BANK1_ABFE, X
0AD85 99 00 02                  	STA SpriteDMAArea, Y
0AD88 BD 1A AD                  	LDA EndingWartTiles, X
0AD8B 99 01 02                  	STA SpriteDMAArea + 1, Y
0AD8E A9 01                     	LDA #$01
0AD90 99 02 02                  	STA SpriteDMAArea + 2, Y
0AD93 A5 28                     	LDA PlayerXLo
0AD95 18                        	CLC
0AD96 7D 26 AD                  	ADC byte_BANK1_ABF2, X
0AD99 99 03 02                  	STA SpriteDMAArea + 3, Y
0AD9C A5 14                     	LDA PlayerXHi
0AD9E                           
0AD9E                           loc_BANK1_AC6A:
0AD9E 69 00                     	ADC #$00
0ADA0 F0 05                     	BEQ loc_BANK1_AC73
0ADA2                           
0ADA2 A9 F0                     	LDA #$F0
0ADA4 99 00 02                  	STA SpriteDMAArea, Y
0ADA7                           
0ADA7                           loc_BANK1_AC73:
0ADA7 C8                        	INY
0ADA8 C8                        	INY
0ADA9 C8                        	INY
0ADAA C8                        	INY
0ADAB CA                        	DEX
0ADAC 10 D1                     	BPL loc_BANK1_AC4B
0ADAE                           
0ADAE 60                        	RTS
0ADAF                           
0ADAF                           
0ADAF                           ZonkTiles:
0ADAF 39                        	.db $39
0ADB0 35                        	.db $35
0ADB1 37                        	.db $37
0ADB2 35                        	.db $35
0ADB3 37                        	.db $37
0ADB4 39                        	.db $39
0ADB5                           
0ADB5                           byte_BANK1_AC81:
0ADB5 00                        	.db $00
0ADB6 06                        	.db $06
0ADB7 03                        	.db $03
0ADB8 09                        	.db $09
0ADB9 0F                        	.db $0F
0ADBA 0C                        	.db $0C
0ADBB                           
0ADBB                           
0ADBB                           loc_BANK1_AC87:
0ADBB A5 10                     	LDA byte_RAM_10
0ADBD D0 19                     	BNE loc_BANK1_ACA4
0ADBF                           
0ADBF                           loc_BANK1_AC8B:
0ADBF 8D 0E 04                  	STA ObjectXSubpixel + 6
0ADC2 8D 18 04                  	STA ObjectYSubpixel + 6
0ADC5 85 2F                     	STA ObjectXLo + 6
0ADC7 85 10                     	STA byte_RAM_10
0ADC9 A9 6F                     	LDA #$6F
0ADCB 85 39                     	STA ObjectYLo + 6
0ADCD A9 E6                     	LDA #$E6
0ADCF 85 43                     	STA ObjectXVelocity + 6
0ADD1 A9 DA                     	LDA #$0DA
0ADD3 85 4D                     	STA ObjectYVelocity + 6
0ADD5                           
0ADD5                           	INC_abs byte_RAM_E6
0ADD5                           	IFDEF COMPATIBILITY
0ADD5 EE                        		.db $ee
0ADD6 E6 00                     		.dw byte_RAM_E6
0ADD8                           	ELSE
0ADD8                           		INC byte_RAM_E6
0ADD8                           		NOP_compat
0ADD8                           	ENDIF
0ADD8                           
0ADD8                           
0ADD8                           loc_BANK1_ACA4:
0ADD8 A2 05                     	LDX #$05
0ADDA                           
0ADDA                           loc_BANK1_ACA6:
0ADDA 86 12                     	STX byte_RAM_12
0ADDC 20 9A AF                  	JSR ApplyObjectPhysicsX_Bank1
0ADDF                           
0ADDF 20 95 AF                  	JSR ApplyObjectPhysicsY_Bank1
0ADE2                           
0ADE2 A0 F0                     	LDY #$F0
0ADE4 A5 10                     	LDA byte_RAM_10
0ADE6 F0 0D                     	BEQ loc_BANK1_ACC1
0ADE8                           
0ADE8 29 0F                     	AND #$0F
0ADEA DD B5 AD                  	CMP byte_BANK1_AC81, X
0ADED D0 08                     	BNE loc_BANK1_ACC3
0ADEF                           
0ADEF A9 20                     	LDA #$20
0ADF1 95 29                     	STA ObjectXLo, X
0ADF3 A0 A8                     	LDY #$A8
0ADF5                           
0ADF5                           loc_BANK1_ACC1:
0ADF5 94 33                     	STY ObjectYLo, X
0ADF7                           
0ADF7                           loc_BANK1_ACC3:
0ADF7 8A                        	TXA
0ADF8 0A                        	ASL A
0ADF9 0A                        	ASL A
0ADFA A8                        	TAY
0ADFB B5 29                     	LDA ObjectXLo, X
0ADFD C9 80                     	CMP #$80
0ADFF B0 04                     	BCS loc_BANK1_ACD1
0AE01                           
0AE01 A9 F0                     	LDA #$F0
0AE03 D0 05                     	BNE loc_BANK1_ACD6
0AE05                           
0AE05                           loc_BANK1_ACD1:
0AE05 99 73 02                  	STA SpriteDMAArea + $73, Y
0AE08 B5 33                     	LDA ObjectYLo, X
0AE0A                           
0AE0A                           loc_BANK1_ACD6:
0AE0A 99 70 02                  	STA SpriteDMAArea + $70, Y
0AE0D BD AF AD                  	LDA ZonkTiles, X
0AE10 99 71 02                  	STA SpriteDMAArea + $71, Y
0AE13 A9 00                     	LDA #$00
0AE15 99 72 02                  	STA SpriteDMAArea + $72, Y
0AE18 CA                        	DEX
0AE19 10 BF                     	BPL loc_BANK1_ACA6
0AE1B                           
0AE1B 60                        	RTS
0AE1C                           
0AE1C                           IFDEF PLAYER_STUFF
0AE1C                           ContributorAnimationTiles:
0AE1C                           ContributorAnimationTiles_Mario:
0AE1C 00                        	.db $0
0AE1D 20                        	.db $20
0AE1E 02                        	.db $2
0AE1F 22                        	.db $22
0AE20 04                        	.db $4
0AE21 24                        	.db $24
0AE22 06                        	.db $6
0AE23 26                        	.db $26
0AE24                           ContributorAnimationTiles_Luigi:
0AE24 08                        	.db $8
0AE25 28                        	.db $28
0AE26 0A                        	.db $a
0AE27 2A                        	.db $2a
0AE28 0C                        	.db $c
0AE29 2C                        	.db $2c
0AE2A 0E                        	.db $e
0AE2B 2E                        	.db $2e
0AE2C                           ContributorAnimationTiles_Toad:
0AE2C 10                        	.db $10
0AE2D 30                        	.db $30
0AE2E 12                        	.db $12
0AE2F 32                        	.db $32
0AE30 14                        	.db $14
0AE31 34                        	.db $34
0AE32 16                        	.db $16
0AE33 36                        	.db $36
0AE34                           ContributorAnimationTiles_Princess:
0AE34 18                        	.db $18
0AE35 38                        	.db $38
0AE36 1A                        	.db $1a
0AE37 3A                        	.db $3a
0AE38 1C                        	.db $1c
0AE39 3C                        	.db $3c
0AE3A 1E                        	.db $1e
0AE3B 3E                        	.db $3e
0AE3C                           ENDIF
0AE3C                           
0AE3C                           IFNDEF PLAYER_STUFF
0AE3C                           ContributorAnimationTiles:
0AE3C                           ContributorAnimationTiles_Mario:
0AE3C                           	.db $61
0AE3C                           	.db $61
0AE3C                           	.db $63
0AE3C                           	.db $93
0AE3C                           	.db $65
0AE3C                           	.db $65
0AE3C                           	.db $67
0AE3C                           	.db $67
0AE3C                           ContributorAnimationTiles_Luigi:
0AE3C                           	.db $69
0AE3C                           	.db $69
0AE3C                           	.db $95
0AE3C                           	.db $6B
0AE3C                           	.db $6D
0AE3C                           	.db $6D
0AE3C                           	.db $97
0AE3C                           	.db $6F
0AE3C                           ContributorAnimationTiles_Toad:
0AE3C                           	.db $83
0AE3C                           	.db $85
0AE3C                           	.db $83
0AE3C                           	.db $85
0AE3C                           	.db $87
0AE3C                           	.db $89
0AE3C                           	.db $87
0AE3C                           	.db $89
0AE3C                           ContributorAnimationTiles_Princess:
0AE3C                           	.db $8B
0AE3C                           	.db $8B
0AE3C                           	.db $99
0AE3C                           	.db $8D
0AE3C                           	.db $8F
0AE3C                           	.db $8F
0AE3C                           	.db $91
0AE3C                           	.db $91
0AE3C                           ENDIF
0AE3C                           
0AE3C                           ContributorAnimationTilesOffset:
0AE3C 06                        	.db (ContributorAnimationTiles_Mario - ContributorAnimationTiles + 6)
0AE3D 0E                        	.db (ContributorAnimationTiles_Luigi - ContributorAnimationTiles + 6)
0AE3E 16                        	.db (ContributorAnimationTiles_Toad - ContributorAnimationTiles + 6)
0AE3F 1E                        	.db (ContributorAnimationTiles_Princess - ContributorAnimationTiles + 6)
0AE40                           
0AE40                           
0AE40                           ContributorCharacterAnimation:
0AE40 E6 9B                     	INC PlayerWalkFrame
0AE42 A9 03                     	LDA #$03
0AE44 85 00                     	STA byte_RAM_0
0AE46 A5 9B                     	LDA PlayerWalkFrame
0AE48 85 01                     	STA byte_RAM_1
0AE4A A0 3C                     	LDY #$3C
0AE4C                           
0AE4C                           ContributorCharacterAnimation_OuterLoop:
0AE4C A6 00                         LDX byte_RAM_0
0AE4E BD 3C AE                  	LDA ContributorAnimationTilesOffset, X
0AE51 AA                        	TAX
0AE52 E6 01                     	INC byte_RAM_1
0AE54 A5 01                     	LDA byte_RAM_1
0AE56 29 10                     	AND #$10
0AE58 F0 01                     	BEQ ContributorCharacterAnimation_Render
0AE5A                           
0AE5A E8                        	INX
0AE5B                           
0AE5B                           ContributorCharacterAnimation_Render:
0AE5B A9 03                     	LDA #$03
0AE5D 85 02                     	STA byte_RAM_2
0AE5F                           ContributorCharacterAnimation_InnerLoop:
0AE5F BD 1C AE                  	LDA ContributorAnimationTiles, X
0AE62 99 11 02                  	STA SpriteDMAArea + $11, Y
0AE65 CA                        	DEX
0AE66 CA                        	DEX
0AE67 88                        	DEY
0AE68 88                        	DEY
0AE69 88                        	DEY
0AE6A 88                        	DEY
0AE6B C6 02                     	DEC byte_RAM_2
0AE6D 10 F0                     	BPL ContributorCharacterAnimation_InnerLoop
0AE6F                           
0AE6F C6 00                     	DEC byte_RAM_0
0AE71 10 D9                     	BPL ContributorCharacterAnimation_OuterLoop
0AE73                           
0AE73 60                        	RTS
0AE74                           
0AE74                           
0AE74                           ;
0AE74                           ; Calculates the list of top contributors
0AE74                           ;
0AE74                           Ending_GetContributor:
0AE74 A9 00                     	LDA #$00
0AE76 8D 31 06                  	STA MaxLevelsCompleted
0AE79                           
0AE79 A0 03                     	LDY #$03
0AE7B                           Ending_GetContributor_Loop:
0AE7B B9 2D 06                  	LDA CharacterLevelsCompleted, Y
0AE7E CD 31 06                  	CMP MaxLevelsCompleted
0AE81 90 06                     	BCC Ending_GetContributor_Next
0AE83                           
0AE83 B9 2D 06                  	LDA CharacterLevelsCompleted, Y
0AE86 8D 31 06                  	STA MaxLevelsCompleted
0AE89                           
0AE89                           Ending_GetContributor_Next:
0AE89 88                        	DEY
0AE8A 10 EF                     	BPL Ending_GetContributor_Loop
0AE8C                           
0AE8C A2 00                     	LDX #$00
0AE8E A0 03                     	LDY #$03
0AE90                           Ending_GetContributor_Loop2:
0AE90 B9 2D 06                  	LDA CharacterLevelsCompleted, Y
0AE93 CD 31 06                  	CMP MaxLevelsCompleted
0AE96 D0 05                     	BNE Ending_GetContributor_Next2
0AE98                           
0AE98 98                        	TYA
0AE99 9D BE 05                  	STA Contributors, X
0AE9C E8                        	INX
0AE9D                           
0AE9D                           Ending_GetContributor_Next2:
0AE9D 88                        	DEY
0AE9E 10 F0                     	BPL Ending_GetContributor_Loop2
0AEA0                           
0AEA0 CA                        	DEX
0AEA1 8E C2 05                  	STX NumContributors
0AEA4 A2 00                     	LDX #$00
0AEA6 A9 21                     	LDA #$21
0AEA8 9D 01 03                  	STA PPUBuffer_301, X
0AEAB E8                        	INX
0AEAC A9 2A                     	LDA #$2A
0AEAE 9D 01 03                  	STA PPUBuffer_301, X
0AEB1 E8                        	INX
0AEB2 A9 0C                     	LDA #$0C
0AEB4 9D 01 03                  	STA PPUBuffer_301, X
0AEB7 E8                        	INX
0AEB8                           
0AEB8                           sub_MarioContribution:
0AEB8 A0 00                     	LDY #$00
0AEBA B9 2D 06                  	LDA CharacterLevelsCompleted, Y
0AEBD 20 77 AF                  	JSR sub_BANK1_AE43
0AEC0 98                        	TYA
0AEC1 9D 01 03                  	STA PPUBuffer_301, X
0AEC4 E8                        	INX
0AEC5 A5 01                     	LDA byte_RAM_1
0AEC7 9D 01 03                  	STA PPUBuffer_301, X
0AECA E8                        	INX
0AECB A9 FB                     	LDA #$0FB
0AECD 9D 01 03                  	STA PPUBuffer_301, X
0AED0 E8                        	INX
0AED1                           
0AED1                           sub_LuigiContribution:
0AED1 A0 03                     	LDY #$03
0AED3 B9 2D 06                  	LDA CharacterLevelsCompleted, Y
0AED6 20 77 AF                  	JSR sub_BANK1_AE43
0AED9 98                        	TYA
0AEDA 9D 01 03                  	STA PPUBuffer_301, X
0AEDD E8                        	INX
0AEDE A5 01                     	LDA byte_RAM_1
0AEE0 9D 01 03                  	STA PPUBuffer_301, X
0AEE3 E8                        	INX
0AEE4 A9 FB                     	LDA #$0FB
0AEE6 9D 01 03                  	STA PPUBuffer_301, X
0AEE9 E8                        	INX
0AEEA 9D 01 03                  	STA PPUBuffer_301, X
0AEED E8                        	INX
0AEEE                           
0AEEE                           sub_ToadContribution:
0AEEE A0 02                     	LDY #$02
0AEF0 B9 2D 06                  	LDA CharacterLevelsCompleted, Y
0AEF3 20 77 AF                  	JSR sub_BANK1_AE43
0AEF6 98                        	TYA
0AEF7 9D 01 03                  	STA PPUBuffer_301, X
0AEFA E8                        	INX
0AEFB A5 01                     	LDA byte_RAM_1
0AEFD 9D 01 03                  	STA PPUBuffer_301, X
0AF00 E8                        	INX
0AF01 A9 FB                     	LDA #$0FB
0AF03 9D 01 03                  	STA PPUBuffer_301, X
0AF06 E8                        	INX
0AF07                           
0AF07                           sub_PeachContribution:
0AF07 A0 01                     	LDY #$01
0AF09 B9 2D 06                  	LDA CharacterLevelsCompleted, Y
0AF0C 20 77 AF                  	JSR sub_BANK1_AE43
0AF0F 98                        	TYA
0AF10 9D 01 03                  	STA PPUBuffer_301, X
0AF13 E8                        	INX
0AF14 A5 01                     	LDA byte_RAM_1
0AF16 9D 01 03                  	STA PPUBuffer_301, X
0AF19 E8                        	INX
0AF1A A9 00                     	LDA #$00
0AF1C 9D 01 03                  	STA PPUBuffer_301, X
0AF1F                           
0AF1F A9 3C                     	LDA #$3C
0AF21 8D C4 05                  	STA ContributorTimer
0AF24                           sub_EndOfContribution:
0AF24 60                        	RTS
0AF25                           
0AF25                           
0AF25                           ; =============== S U B R O U T I N E =======================================
0AF25                           
0AF25                           ContributorTicker:
0AF25 CE C4 05                  	DEC ContributorTimer
0AF28 10 1C                     	BPL ContributorTicker_Exit
0AF2A                           
0AF2A A9 3C                     	LDA #$3C
0AF2C 8D C4 05                  	STA ContributorTimer
0AF2F AC C3 05                  	LDY ContributorIndex
0AF32 B9 BE 05                  	LDA Contributors, Y
0AF35 18                        	CLC
0AF36 69 09                     	ADC #$09
0AF38                           
0AF38                           	STA_abs ScreenUpdateIndex
0AF38                           	IFDEF COMPATIBILITY
0AF38 8D                        		.db $8d
0AF39 11 00                     		.dw ScreenUpdateIndex
0AF3B                           	ELSE
0AF3B                           		STA ScreenUpdateIndex
0AF3B                           		NOP_compat
0AF3B                           	ENDIF
0AF3B                           
0AF3B CE C3 05                  	DEC ContributorIndex
0AF3E 10 06                     	BPL ContributorTicker_Exit
0AF40                           
0AF40 AD C2 05                  	LDA NumContributors
0AF43 8D C3 05                  	STA ContributorIndex
0AF46                           
0AF46                           ContributorTicker_Exit:
0AF46 60                        	RTS
0AF47                           
0AF47                           
0AF47                           EndingCelebrationText_MARIO:
0AF47 20 ED 08 E6 DA EB E2 E8.. 	.db $20, $ED, $08, $E6, $DA, $EB, $E2, $E8, $FB, $FB, $FB
0AF52 00                        	.db $00
0AF53                           
0AF53                           EndingCelebrationText_PRINCESS:
0AF53 20 ED 08 E9 EB E2 E7 DC.. 	.db $20, $ED, $08, $E9, $EB, $E2, $E7, $DC, $DE, $EC, $EC
0AF5E 00                        	.db $00
0AF5F                           
0AF5F                           EndingCelebrationText_TOAD:
0AF5F 20 ED 08 ED E8 DA DD FB.. 	.db $20, $ED, $08, $ED, $E8, $DA, $DD, $FB, $FB, $FB, $FB
0AF6A 00                        	.db $00
0AF6B                           
0AF6B                           EndingCelebrationText_LUIGI:
0AF6B 20 ED 08 E5 EE E2 E0 E2.. 	.db $20, $ED, $08, $E5, $EE, $E2, $E0, $E2, $FB, $FB, $FB
0AF76 00                        	.db $00
0AF77                           
0AF77                           
0AF77                           ; =============== S U B R O U T I N E =======================================
0AF77                           
0AF77                           sub_BANK1_AE43:
0AF77 A0 D0                     	LDY #$D0
0AF79                           
0AF79                           loc_BANK1_AE45:
0AF79 C9 0A                     	CMP #$0A
0AF7B 90 06                     	BCC loc_BANK1_AE4F
0AF7D                           
0AF7D E9 0A                     	SBC #$0A
0AF7F                           
0AF7F                           loc_BANK1_AE4B:
0AF7F C8                        	INY
0AF80 4C 79 AF                  	JMP loc_BANK1_AE45
0AF83                           
0AF83                           ; ---------------------------------------------------------------------------
0AF83                           
0AF83                           loc_BANK1_AE4F:
0AF83 09 D0                     	ORA #$D0
0AF85 C0 D0                     	CPY #$D0
0AF87 D0 02                     	BNE loc_BANK1_AE57
0AF89                           
0AF89 A0 FB                     	LDY #$0FB
0AF8B                           
0AF8B                           loc_BANK1_AE57:
0AF8B 85 01                     	STA byte_RAM_1
0AF8D 60                        	RTS
0AF8E                           
0AF8E                           ; End of function sub_BANK1_AE43
0AF8E                           
0AF8E                           ; ---------------------------------------------------------------------------
0AF8E                           
0AF8E                           ; Unused space in the original ($AE5A - $B8FF)
0AF8E                           unusedSpace $B900, $FF
0AF8E                           	IFDEF PRESERVE_UNUSED_SPACE
0AF8E                           		.pad $B900, $FF
0AF8E                           	ENDIF
0AF8E                           
0AF8E                           MysteryCharacterData3900:
0AF8E FB                        	.db $FB ; @TODO ??? Not sure what this is
0AF8F FF                        	.db $FF
0AF90 00                        	.db $00
0AF91 08                        	.db $08
0AF92 0C                        	.db $0C
0AF93 18                        	.db $18
0AF94 1A                        	.db $1A
0AF95                           
0AF95                           
0AF95                           ;
0AF95                           ; NOTE: A copy of this subroutine also exists in Bank 2
0AF95                           ;
0AF95                           ; Applies object physics for the y-axis
0AF95                           ;
0AF95                           ; Input
0AF95                           ;   X = enemy index
0AF95                           ;
0AF95                           ApplyObjectPhysicsY_Bank1:
0AF95 8A                        	TXA
0AF96 18                        	CLC
0AF97 69 0A                     	ADC #$0A
0AF99 AA                        	TAX
0AF9A                           
0AF9A                           ;
0AF9A                           ; NOTE: A copy of this subroutine also exists in Bank 2
0AF9A                           ;
0AF9A                           ; Applies object physics for the x-axis
0AF9A                           ;
0AF9A                           ; Input
0AF9A                           ;   X = enemy index, physics direction
0AF9A                           ;       ($00-$09 for horizontal, $0A-$13 for vertical)
0AF9A                           ;
0AF9A                           ; Output
0AF9A                           ;   X = RAM_12
0AF9A                           ;
0AF9A                           ApplyObjectPhysicsX_Bank1:
0AF9A                           	; Add acceleration to velocity
0AF9A B5 3D                     	LDA ObjectXVelocity, X
0AF9C 18                        	CLC
0AF9D 7D CC 04                  	ADC ObjectXAcceleration, X
0AFA0                           
0AFA0 48                        	PHA
0AFA1                           	; Lower nybble of velocity is for subpixel position
0AFA1 0A                        	ASL A
0AFA2 0A                        	ASL A
0AFA3 0A                        	ASL A
0AFA4 0A                        	ASL A
0AFA5 85 01                     	STA byte_RAM_1
0AFA7                           
0AFA7                           	; Upper nybble of velocity is for lo position
0AFA7 68                        	PLA
0AFA8 4A                        	LSR A
0AFA9 4A                        	LSR A
0AFAA 4A                        	LSR A
0AFAB 4A                        	LSR A
0AFAC                           
0AFAC C9 08                     	CMP #$08
0AFAE 90 02                     	BCC ApplyObjectPhysics_StoreVelocityLo_Bank1
0AFB0                           
0AFB0                           	; Left/up: Carry negative bits through upper nybble
0AFB0 09 F0                     	ORA #$F0
0AFB2                           
0AFB2                           ApplyObjectPhysics_StoreVelocityLo_Bank1:
0AFB2 85 00                     	STA byte_RAM_0
0AFB4                           
0AFB4 A0 00                     	LDY #$00
0AFB6 0A                        	ASL A
0AFB7 90 01                     	BCC ApplyObjectPhysics_StoreDirection_Bank1
0AFB9                           
0AFB9                           	; Left/up
0AFB9 88                        	DEY
0AFBA                           
0AFBA                           ApplyObjectPhysics_StoreDirection_Bank1:
0AFBA 84 02                     	STY byte_RAM_2
0AFBC                           
0AFBC                           	; Add lower nybble of velocity for subpixel position
0AFBC BD 08 04                  	LDA ObjectXSubpixel, X
0AFBF 18                        	CLC
0AFC0 65 01                     	ADC byte_RAM_1
0AFC2 9D 08 04                  	STA ObjectXSubpixel, X
0AFC5                           
0AFC5                           	; Add upper nybble of velocity for lo position
0AFC5 B5 29                     	LDA ObjectXLo, X
0AFC7 65 00                     	ADC byte_RAM_0
0AFC9 95 29                     	STA ObjectXLo, X
0AFCB                           
0AFCB                           ApplyObjectPhysics_PositionHi_Bank1:
0AFCB 46 01                     	LSR byte_RAM_1
0AFCD B5 15                     	LDA ObjectXHi, X
0AFCF 65 02                     	ADC byte_RAM_2
0AFD1 95 15                     	STA ObjectXHi, X
0AFD3                           
0AFD3                           ApplyObjectPhysics_Exit_Bank1:
0AFD3 A6 12                     	LDX byte_RAM_12
0AFD5 60                        	RTS
0AFD6                           
0AFD6                           
0AFD6                           
0AFD6                           ;
0AFD6                           ; Applies object physics
0AFD6                           ;
0AFD6                           ; Input
0AFD6                           ;   X = enemy index
0AFD6                           ;
0AFD6                           ApplyObjectMovement_Bank1:
0AFD6 BD 4A 04                  	LDA ObjectShakeTimer, X
0AFD9 D0 03                     	BNE ApplyObjectMovement_Vertical_Bank1
0AFDB                           
0AFDB 20 9A AF                  	JSR ApplyObjectPhysicsX_Bank1
0AFDE                           
0AFDE                           ApplyObjectMovement_Vertical_Bank1:
0AFDE 20 95 AF                  	JSR ApplyObjectPhysicsY_Bank1
0AFE1                           
0AFE1 B5 47                     	LDA ObjectYVelocity, X
0AFE3 30 04                     	BMI ApplyObjectMovement_Gravity_Bank1
0AFE5                           
0AFE5                           	; Check terminal velocity
0AFE5 C9 3E                     	CMP #$3E
0AFE7 B0 04                     	BCS ApplyObjectMovement_Exit_Bank1
0AFE9                           
0AFE9                           ApplyObjectMovement_Gravity_Bank1:
0AFE9 F6 47                     	INC ObjectYVelocity, X
0AFEB F6 47                     	INC ObjectYVelocity, X
0AFED                           
0AFED                           ApplyObjectMovement_Exit_Bank1:
0AFED 60                        	RTS
0AFEE                           
0AFEE                           
0AFEE                           DoorAnimation_Locked:
0AFEE A9 01                     	LDA #$01
0AFF0 D0 02                     	BNE DoorAnimation
0AFF2                           
0AFF2                           DoorAnimation_Unlocked:
0AFF2 A9 00                     	LDA #$00
0AFF4                           
0AFF4                           DoorAnimation:
0AFF4 48                        	PHA
0AFF5 A0 08                     	LDY #$08
0AFF7                           
0AFF7                           DoorAnimation_Loop:
0AFF7                           	; skip if inactive
0AFF7 B9 51 00                  	LDA EnemyState, Y
0AFFA F0 11                     	BEQ DoorAnimation_LoopNext
0AFFC                           
0AFFC                           	; skip enemies that aren't the door
0AFFC B9 90 00                  	LDA ObjectType, Y
0AFFF C9 3C                     	CMP #Enemy_SubspaceDoor
0B001 D0 0A                     	BNE DoorAnimation_LoopNext
0B003                           
0B003 A9 05                     	LDA #EnemyState_PuffOfSmoke
0B005 99 51 00                  	STA EnemyState, Y
0B008 A9 20                     	LDA #$20
0B00A 99 86 00                  	STA EnemyTimer, Y
0B00D                           
0B00D                           DoorAnimation_LoopNext:
0B00D 88                        	DEY
0B00E 10 E7                     	BPL DoorAnimation_Loop
0B010                           
0B010 20 9E B1                  	JSR CreateEnemy_TryAllSlots_Bank1
0B013                           
0B013 30 2F                     	BMI DoorAnimation_Exit
0B015                           
0B015 A9 00                     	LDA #$00
0B017 8D BD 04                  	STA DoorAnimationTimer
0B01A 8D B3 04                  	STA SubspaceDoorTimer
0B01D A6 00                     	LDX byte_RAM_0
0B01F 68                        	PLA
0B020 9D 77 04                  	STA EnemyArray_477, X
0B023 A9 3C                     	LDA #Enemy_SubspaceDoor
0B025 95 90                     	STA ObjectType, X
0B027 A5 28                     	LDA PlayerXLo
0B029 69 08                     	ADC #$08
0B02B 29 F0                     	AND #$F0
0B02D 95 29                     	STA ObjectXLo, X
0B02F A5 14                     	LDA PlayerXHi
0B031 69 00                     	ADC #$00
0B033 95 15                     	STA ObjectXHi, X
0B035 A5 32                     	LDA PlayerYLo
0B037 95 33                     	STA ObjectYLo, X
0B039 A5 1E                     	LDA PlayerYHi
0B03B 95 1F                     	STA ObjectYHi, X
0B03D A9 41                     	LDA #ObjAttrib_Palette1 | ObjAttrib_16x32
0B03F 95 65                     	STA ObjectAttributes, X
0B041 A6 12                     	LDX byte_RAM_12
0B043 60                        	RTS
0B044                           
0B044                           DoorAnimation_Exit:
0B044 68                        	PLA
0B045 60                        	RTS
0B046                           
0B046                           
0B046                           CreateStarman:
0B046 20 A2 B1                  	JSR CreateEnemy_Bank1
0B049                           
0B049 30 25                     	BMI CreateStarman_Exit
0B04B                           
0B04B A6 00                     	LDX byte_RAM_0
0B04D A9 45                     	LDA #Enemy_Starman
0B04F 95 90                     	STA ObjectType, X
0B051 AD C0 04                  	LDA ScreenBoundaryLeftLo
0B054 69 D0                     	ADC #$D0
0B056 95 29                     	STA ObjectXLo, X
0B058 AD BE 04                  	LDA ScreenBoundaryLeftHi
0B05B 69 00                     	ADC #$00
0B05D 95 15                     	STA ObjectXHi, X
0B05F A5 CB                     	LDA ScreenYLo
0B061 69 E0                     	ADC #$E0
0B063 95 33                     	STA ObjectYLo, X
0B065 A5 CA                     	LDA ScreenYHi
0B067 69 00                     	ADC #$00
0B069 95 1F                     	STA ObjectYHi, X
0B06B 20 A5 B0                  	JSR loc_BANK1_BA17
0B06E                           
0B06E A6 12                     	LDX byte_RAM_12
0B070                           
0B070                           CreateStarman_Exit:
0B070 60                        	RTS
0B071                           
0B071                           
0B071                           ; =============== S U B R O U T I N E =======================================
0B071                           
0B071                           EnemyInit_Basic_Bank1:
0B071 A9 00                     	LDA #$00
0B073 95 86                     	STA EnemyTimer, X
0B075 A9 00                     	LDA #$00
0B077 95 79                     	STA EnemyVariable, X
0B079                           
0B079                           loc_BANK1_B9EB:
0B079 A9 00                     	LDA #$00
0B07B 95 B1                     	STA EnemyArray_B1, X
0B07D 9D 2F 04                  	STA EnemyArray_42F, X
0B080 95 A8                     	STA ObjectBeingCarriedTimer, X
0B082 95 9F                     	STA ObjectAnimationTimer, X
0B084 9D 4A 04                  	STA ObjectShakeTimer, X
0B087 95 5B                     	STA EnemyCollision, X
0B089 9D 38 04                  	STA EnemyArray_438, X
0B08C 9D 53 04                  	STA EnemyArray_453, X
0B08F 9D CC 04                  	STA ObjectXAcceleration, X
0B092 9D D6 04                  	STA ObjectYAcceleration, X
0B095 9D 5C 04                  	STA EnemyArray_45C, X
0B098 9D 77 04                  	STA EnemyArray_477, X
0B09B 9D 80 04                  	STA EnemyArray_480, X
0B09E 9D 65 04                  	STA EnemyHP, X
0B0A1 95 47                     	STA ObjectYVelocity, X
0B0A3 95 3D                     	STA ObjectXVelocity, X
0B0A5                           
0B0A5                           ; look up object attributes
0B0A5                           loc_BANK1_BA17:
0B0A5 B4 90                     	LDY ObjectType, X
0B0A7 B9 19 F8                  	LDA ObjectAttributeTable, Y
0B0AA 29 7F                     	AND #ObjAttrib_Palette | ObjAttrib_Horizontal | ObjAttrib_FrontFacing | ObjAttrib_Mirrored | ObjAttrib_BehindBackground | ObjAttrib_16x32
0B0AC 95 65                     	STA ObjectAttributes, X
0B0AE B9 60 F8                  	LDA EnemyArray_46E_Data, Y
0B0B1 9D 6E 04                  	STA EnemyArray_46E, X
0B0B4 B9 EE F8                  	LDA EnemyArray_489_Data, Y
0B0B7 9D 89 04                  	STA EnemyArray_489, X
0B0BA B9 A7 F8                  	LDA EnemyArray_492_Data, Y
0B0BD 9D 92 04                  	STA EnemyArray_492, X
0B0C0 60                        	RTS
0B0C1                           
0B0C1                           ; End of function EnemyInit_Basic_Bank1
0B0C1                           
0B0C1                           
0B0C1                           ;
0B0C1                           ; Turns the key into a puff of smoke
0B0C1                           ;
0B0C1                           ; Input
0B0C1                           ;   X = enemy slot
0B0C1                           ; Output
0B0C1                           ;   X = value of byte_RAM_12
0B0C1                           ;
0B0C1                           TurnKeyIntoPuffOfSmoke:
0B0C1 B5 65                     	LDA ObjectAttributes, X
0B0C3 29 FC                     	AND #%11111100
0B0C5 09 01                     	ORA #ObjAttrib_Palette1
0B0C7 95 65                     	STA ObjectAttributes, X
0B0C9 A9 05                     	LDA #EnemyState_PuffOfSmoke
0B0CB 95 51                     	STA EnemyState, X
0B0CD 95 9F                     	STA ObjectAnimationTimer, X
0B0CF A9 1F                     	LDA #$1F
0B0D1 95 86                     	STA EnemyTimer, X
0B0D3 A6 12                     	LDX byte_RAM_12
0B0D5 60                        	RTS
0B0D6                           
0B0D6                           
0B0D6                           ;
0B0D6                           ; NOTE: This is a copy of the "UnlinkEnemyFromRawData" routine in Bank 2, but
0B0D6                           ; it is used here for spawning the door animation and Starman objects.
0B0D6                           ;
0B0D6                           ; Spawned enemies are linked to an offset in the raw enemy data, which prevents
0B0D6                           ; from being respawned until they are killed or moved offscreen.
0B0D6                           ;
0B0D6                           ; This subroutine ensures that the enemy in a particular slot is not linked to
0B0D6                           ; the raw enemy data
0B0D6                           ;
0B0D6                           ; Input
0B0D6                           ;   X = enemy slot
0B0D6                           ;
0B0D6                           UnlinkEnemyFromRawData_Bank1:
0B0D6 A9 FF                     	LDA #$0FF
0B0D8 9D 41 04                  	STA unk_RAM_441, X
0B0DB 60                        	RTS
0B0DC                           
0B0DC                           
0B0DC                           ;
0B0DC                           ; Updates the area page and tile placement offset
0B0DC                           ;
0B0DC                           ; Input
0B0DC                           ;   byte_RAM_E8 = area page
0B0DC                           ;   byte_RAM_E5 = tile placement offset shift
0B0DC                           ;   byte_RAM_E6 = previous tile placement offset
0B0DC                           ; Output
0B0DC                           ;   RAM_1 = low byte of decoded level data RAM
0B0DC                           ;   RAM_2 = low byte of decoded level data RAM
0B0DC                           ;   byte_RAM_E7 = target tile placement offset
0B0DC                           ;
0B0DC                           SetTileOffsetAndAreaPageAddr_Bank1:
0B0DC A6 E8                     	LDX byte_RAM_E8
0B0DE 20 FF B0                  	JSR SetAreaPageAddr_Bank1
0B0E1                           
0B0E1 A5 E6                     	LDA byte_RAM_E6
0B0E3 18                        	CLC
0B0E4 65 E5                     	ADC byte_RAM_E5
0B0E6 85 E7                     	STA byte_RAM_E7
0B0E8 60                        	RTS
0B0E9                           
0B0E9                           
0B0E9                           DecodedLevelPageStartLo_Bank1:
0B0E9 00                        	.db <DecodedLevelData
0B0EA F0                        	.db <(DecodedLevelData+$00F0)
0B0EB E0                        	.db <(DecodedLevelData+$01E0)
0B0EC D0                        	.db <(DecodedLevelData+$02D0)
0B0ED C0                        	.db <(DecodedLevelData+$03C0)
0B0EE B0                        	.db <(DecodedLevelData+$04B0)
0B0EF A0                        	.db <(DecodedLevelData+$05A0)
0B0F0 90                        	.db <(DecodedLevelData+$0690)
0B0F1 80                        	.db <(DecodedLevelData+$0780)
0B0F2 70                        	.db <(DecodedLevelData+$0870)
0B0F3 00                        	.db <(SubAreaTileLayout)
0B0F4                           
0B0F4                           DecodedLevelPageStartHi_Bank1:
0B0F4 60                        	.db >DecodedLevelData
0B0F5 60                        	.db >(DecodedLevelData+$00F0)
0B0F6 61                        	.db >(DecodedLevelData+$01E0)
0B0F7 62                        	.db >(DecodedLevelData+$02D0)
0B0F8 63                        	.db >(DecodedLevelData+$03C0)
0B0F9 64                        	.db >(DecodedLevelData+$04B0)
0B0FA 65                        	.db >(DecodedLevelData+$05A0)
0B0FB 66                        	.db >(DecodedLevelData+$0690)
0B0FC 67                        	.db >(DecodedLevelData+$0780)
0B0FD 68                        	.db >(DecodedLevelData+$0870)
0B0FE 07                        	.db >(SubAreaTileLayout)
0B0FF                           
0B0FF                           
0B0FF                           ;
0B0FF                           ; Updates the area page that we're reading tiles from
0B0FF                           ;
0B0FF                           ; Input
0B0FF                           ;   X = area page
0B0FF                           ; Output
0B0FF                           ;   byte_RAM_1 = low byte of decoded level data RAM
0B0FF                           ;   byte_RAM_2 = low byte of decoded level data RAM
0B0FF                           ;
0B0FF                           SetAreaPageAddr_Bank1:
0B0FF BD E9 B0                  	LDA DecodedLevelPageStartLo_Bank1, X
0B102 85 01                     	STA byte_RAM_1
0B104 BD F4 B0                  	LDA DecodedLevelPageStartHi_Bank1, X
0B107 85 02                     	STA byte_RAM_2
0B109 60                        	RTS
0B10A                           
0B10A                           
0B10A                           ;
0B10A                           ; Checks whether the player is on a quicksand tile
0B10A                           ;
0B10A                           ; Input
0B10A                           ;   byte_RAM_0 = tile ID
0B10A                           ; Output
0B10A                           ;   A = Whether the player is sinking in quicksand
0B10A                           ;   X = PlayerInAir flag
0B10A                           ;
0B10A                           PlayerTileCollision_CheckQuicksand:
0B10A                           IFDEF PLAYER_STUFF_QUICK_CHECK
0B10A                               LDX #CustomBitFlag_AllTerrain
0B10A                               LDA #$0
0B10A                               JSR ChkFlagPlayer2
0B10A                               BNE +
0B10A                               RTS
0B10A                           +
0B10A                           ENDIF
0B10A A9 01                     	LDA #$01
0B10C A4 00                     	LDY byte_RAM_0
0B10E C0 8A                     	CPY #BackgroundTile_QuicksandSlow
0B110 F0 09                     	BEQ PlayerTileCollision_QuicksandSlow
0B112                           
0B112 C0 8B                     	CPY #BackgroundTile_QuicksandFast
0B114 F0 03                     	BEQ PlayerTileCollision_QuicksandFast
0B116                           IFDEF PLAYER_STUFF_SWIM
0B116                           	CPY #BackgroundTile_WaterTop
0B116                           	BEQ PlayerTileCollision_QuicksandSlow
0B116                           
0B116                           	CPY #BackgroundTile_Water
0B116                           	BEQ PlayerTileCollision_QuicksandSlow
0B116                           ENDIF
0B116                           
0B116 A9 00                     	LDA #$00
0B118 60                        	RTS
0B119                           
0B119                           PlayerTileCollision_QuicksandFast:
0B119 A9 08                     	LDA #$08
0B11B                           
0B11B                           PlayerTileCollision_QuicksandSlow:
0B11B 85 46                     	STA PlayerYVelocity
0B11D AD DF 04                  	LDA QuicksandDepth
0B120 D0 07                     	BNE loc_BANK1_BA9B
0B122                           
0B122 A5 32                     	LDA PlayerYLo
0B124 29 10                     	AND #$10
0B126 8D EB 04                  	STA byte_RAM_4EB
0B129                           
0B129                           loc_BANK1_BA9B:
0B129                           	; check if player is too far under
0B129 A5 32                     	LDA PlayerYLo
0B12B 29 0F                     	AND #$0F
0B12D A8                        	TAY
0B12E AD EB 04                  	LDA byte_RAM_4EB
0B131 45 32                     	EOR PlayerYLo
0B133 29 10                     	AND #$10
0B135 F0 0D                     	BEQ loc_BANK1_BAB6
0B137                           
0B137                           	; kill if >= this check
0B137 C0 0C                     	CPY #$0C
0B139 90 07                     	BCC loc_BANK1_BAB4
0B13B                           
0B13B A9 00                     	LDA #$00
0B13D 85 82                     	STA PlayerStateTimer
0B13F 20 C3 FA                  	JSR KillPlayer
0B142                           
0B142                           loc_BANK1_BAB4:
0B142 A0 04                     	LDY #$04
0B144                           
0B144                           loc_BANK1_BAB6:
0B144 C0 04                     	CPY #$04
0B146 B0 02                     	BCS loc_BANK1_BABC
0B148                           
0B148 A0 01                     	LDY #$01
0B14A                           
0B14A                           loc_BANK1_BABC:
0B14A 98                        	TYA
0B14B CA                        	DEX
0B14C 60                        	RTS
0B14D                           
0B14D                           
0B14D                           PlayerTileCollision_HurtPlayer:
0B14D A5 85                     	LDA DamageInvulnTime
0B14F D0 29                     	BNE locret_BANK1_BAEC
0B151                           
0B151 AD C2 04                  	LDA PlayerHealth
0B154 38                        	SEC
0B155 E9 10                     	SBC #$10
0B157 90 22                     	BCC loc_BANK1_BAED
0B159                           
0B159 8D C2 04                  	STA PlayerHealth
0B15C A9 7F                     	LDA #$7F
0B15E 85 85                     	STA DamageInvulnTime
0B160 AD 28 04                  	LDA PlayerScreenX
0B163 38                        	SEC
0B164 ED 29 04                  	SBC SpriteTempScreenX
0B167 0A                        	ASL A
0B168 0A                        	ASL A
0B169 85 3C                     	STA PlayerXVelocity
0B16B A9 C0                     	LDA #$C0
0B16D A4 46                     	LDY PlayerYVelocity
0B16F 10 02                     	BPL loc_BANK1_BAE5
0B171                           
0B171 A9 00                     	LDA #$00
0B173                           
0B173                           loc_BANK1_BAE5:
0B173 85 46                     	STA PlayerYVelocity
0B175 A9 04                     	LDA #DPCM_PlayerHurt
0B177 8D 01 06                  	STA DPCMQueue
0B17A                           
0B17A                           locret_BANK1_BAEC:
0B17A 60                        	RTS
0B17B                           
0B17B                           ; ---------------------------------------------------------------------------
0B17B                           
0B17B                           loc_BANK1_BAED:
0B17B A9 C0                     	LDA #$C0
0B17D 85 46                     	STA PlayerYVelocity
0B17F A9 20                     	LDA #$20
0B181 85 82                     	STA PlayerStateTimer
0B183 A4 12                     	LDY byte_RAM_12
0B185 30 04                     	BMI loc_BANK1_BAFD
0B187                           
0B187 4A                        	LSR A
0B188 99 38 04                  	STA EnemyArray_438, Y
0B18B                           
0B18B                           loc_BANK1_BAFD:
0B18B 4C C3 FA                  	JMP KillPlayer
0B18E                           
0B18E                           
0B18E                           ; ---------------------------------------------------------------------------
0B18E                           
0B18E                           _code_3B00:
0B18E BC 41 04                  	LDY unk_RAM_441, X
0B191 30 06                     	BMI loc_BANK1_BB0B
0B193                           
0B193 B1 CC                     	LDA (RawEnemyData), Y
0B195 29 7F                     	AND #$7F
0B197 91 CC                     	STA (RawEnemyData), Y
0B199                           
0B199                           loc_BANK1_BB0B:
0B199 A9 00                     	LDA #$00
0B19B 95 51                     	STA EnemyState, X
0B19D 60                        	RTS
0B19E                           
0B19E                           
0B19E                           ;
0B19E                           ; NOTE: This is a copy of the "CreateEnemy" routine in Bank 2, but it is used
0B19E                           ; here for spawning the door animation and Starman objects.
0B19E                           ;
0B19E                           ; Creates a generic red Shyguy enemy and
0B19E                           ; does some basic initialization for it.
0B19E                           ;
0B19E                           ; CreateEnemy_TryAllSlots checks all 9 object slots
0B19E                           ; CreateEnemy only checks the first 6 object slots
0B19E                           ;
0B19E                           ; Output
0B19E                           ;   N = enabled if no empty slot was found
0B19E                           ;   Y = $FF if there no empty slot was found
0B19E                           ;   byte_RAM_0 = slot used
0B19E                           ;
0B19E                           CreateEnemy_TryAllSlots_Bank1:
0B19E A0 08                     	LDY #$08
0B1A0 D0 02                     	BNE CreateEnemy_Bank1_FindSlot
0B1A2                           
0B1A2                           CreateEnemy_Bank1:
0B1A2 A0 05                     	LDY #$05
0B1A4                           
0B1A4                           CreateEnemy_Bank1_FindSlot:
0B1A4 B9 51 00                  	LDA EnemyState, Y
0B1A7 F0 04                     	BEQ CreateEnemy_Bank1_FoundSlot
0B1A9                           
0B1A9 88                        	DEY
0B1AA 10 F8                     	BPL CreateEnemy_Bank1_FindSlot
0B1AC                           
0B1AC 60                        	RTS
0B1AD                           
0B1AD                           CreateEnemy_Bank1_FoundSlot:
0B1AD A9 01                     	LDA #EnemyState_Alive
0B1AF 99 51 00                  	STA EnemyState, Y
0B1B2 4A                        	LSR A
0B1B3 99 9B 04                  	STA unk_RAM_49B, Y
0B1B6 A9 01                     	LDA #Enemy_ShyguyRed
0B1B8 99 90 00                  	STA ObjectType, Y
0B1BB B5 29                     	LDA ObjectXLo, X
0B1BD 69 05                     	ADC #$05
0B1BF 99 29 00                  	STA ObjectXLo, Y
0B1C2 B5 15                     	LDA ObjectXHi, X
0B1C4 69 00                     	ADC #$00
0B1C6 99 15 00                  	STA ObjectXHi, Y
0B1C9 B5 33                     	LDA ObjectYLo, X
0B1CB 99 33 00                  	STA ObjectYLo, Y
0B1CE B5 1F                     	LDA ObjectYHi, X
0B1D0 99 1F 00                  	STA ObjectYHi, Y
0B1D3 84 00                     	STY byte_RAM_0
0B1D5 98                        	TYA
0B1D6 AA                        	TAX
0B1D7                           
0B1D7 20 71 B0                  	JSR EnemyInit_Basic_Bank1
0B1DA 20 D6 B0                  	JSR UnlinkEnemyFromRawData_Bank1
0B1DD                           
0B1DD A6 12                     	LDX byte_RAM_12
0B1DF 60                        	RTS
0B1E0                           
0B1E0                           
0B1E0                           IFDEF CONTROLLER_2_DEBUG
0B1E0                           ChangeCharacterOffsets:
0B1E0                           	.db $00 ; unused
0B1E0                           	.db $03 ; Mario to right
0B1E0                           	.db $01 ; Mario to left
0B1E0                           	.db $00 ; Princess to right
0B1E0                           	.db $02 ; Princess to left
0B1E0                           	.db $01 ; Toad to right
0B1E0                           	.db $03 ; Toad to left
0B1E0                           	.db $02 ; Luigi to right
0B1E0                           	.db $00 ; Luigi to left
0B1E0                           
0B1E0                           CheckPlayer2Joypad:
0B1E0                           	LDA ChangeCharacterTimer
0B1E0                           	BEQ CheckPlayer2Joypad_Go
0B1E0                           
0B1E0                           	DEC ChangeCharacterTimer
0B1E0                           
0B1E0                           CheckPlayer2Joypad_No:
0B1E0                           	RTS
0B1E0                           
0B1E0                           CheckPlayer2Joypad_Go:
0B1E0                           	LDA PlayerState
0B1E0                           	CMP #PlayerState_Dying
0B1E0                           	BEQ CheckPlayer2Joypad_No
0B1E0                           
0B1E0                           CheckPlayer2Joypad_CheckSelect:
0B1E0                           	LDA Player2JoypadPress
0B1E0                           	AND #ControllerInput_Select
0B1E0                           	BEQ CheckPlayer2Joypad_CheckUp
0B1E0                           
0B1E0                           	LDA CurrentLevel_Init
0B1E0                           	STA CurrentLevel
0B1E0                           	LDA CurrentLevelArea_Init
0B1E0                           	STA CurrentLevelArea
0B1E0                           	LDA CurrentLevelEntryPage_Init
0B1E0                           	STA CurrentLevelEntryPage
0B1E0                           	LDA TransitionType_Init
0B1E0                           	STA TransitionType
0B1E0                           
0B1E0                           	LDA PlayerXLo_Init
0B1E0                           	STA PlayerXLo
0B1E0                           	LDA PlayerYLo_Init
0B1E0                           	STA PlayerYLo
0B1E0                           	LDA PlayerScreenX_Init
0B1E0                           	STA PlayerScreenX
0B1E0                           	LDA PlayerScreenYLo_Init
0B1E0                           	STA PlayerScreenYLo
0B1E0                           	LDA PlayerYVelocity_Init
0B1E0                           	STA PlayerYVelocity
0B1E0                           	LDA PlayerState_Init
0B1E0                           	STA PlayerState
0B1E0                           
0B1E0                           	LDA #$00
0B1E0                           	STA PlayerXVelocity
0B1E0                           
0B1E0                           	JSR DoAreaReset
0B1E0                           
0B1E0                           	JMP StartLevel
0B1E0                           
0B1E0                           CheckPlayer2Joypad_CheckUp:
0B1E0                           	LDA Player2JoypadPress
0B1E0                           	AND #ControllerInput_Up
0B1E0                           	BEQ CheckPlayer2Joypad_CheckDown
0B1E0                           
0B1E0                           	LDY PlayerMaxHealth
0B1E0                           	LDA PlayerHealth
0B1E0                           	CMP PlayerHealthValueByHeartCount, Y
0B1E0                           	BPL CheckPlayer2Joypad_CheckDown
0B1E0                           
0B1E0                           	LDA #SoundEffect1_CherryGet
0B1E0                           	STA SoundEffectQueue1
0B1E0                           
0B1E0                           	LDY PlayerMaxHealth
0B1E0                           	LDA PlayerHealth
0B1E0                           	CLC
0B1E0                           	ADC #$10
0B1E0                           	STA PlayerHealth
0B1E0                           
0B1E0                           CheckPlayer2Joypad_CheckDown:
0B1E0                           	LDA Player2JoypadPress
0B1E0                           	AND #ControllerInput_Down
0B1E0                           	BEQ CheckPlayer2Joypad_CheckStart
0B1E0                           
0B1E0                           	LDA PlayerHealth
0B1E0                           	AND #$F0
0B1E0                           	BEQ CheckPlayer2Joypad_CheckStart
0B1E0                           
0B1E0                           	LDA #DPCM_PlayerHurt
0B1E0                           	STA DPCMQueue
0B1E0                           
0B1E0                           	LDA PlayerHealth
0B1E0                           	SEC
0B1E0                           	SBC #$10
0B1E0                           	STA PlayerHealth
0B1E0                           
0B1E0                           CheckPlayer2Joypad_CheckStart:
0B1E0                           	LDA Player2JoypadPress
0B1E0                           	AND #ControllerInput_Start
0B1E0                           	BEQ CheckPlayer2Joypad_CheckButtonA
0B1E0                           
0B1E0                           	LDX #$FF
0B1E0                           	LDA StopwatchTimer
0B1E0                           	BEQ CheckPlayer2Joypad_SetStopwatchTimer
0B1E0                           
0B1E0                           	INX
0B1E0                           
0B1E0                           CheckPlayer2Joypad_SetStopwatchTimer:
0B1E0                           	STX StopwatchTimer
0B1E0                           
0B1E0                           CheckPlayer2Joypad_CheckButtonA:
0B1E0                           	LDA Player2JoypadPress
0B1E0                           	AND #ControllerInput_A
0B1E0                           	BEQ CheckPlayer2Joypad_CheckLeftRight
0B1E0                           
0B1E0                           	LDA Player2JoypadHeld
0B1E0                           	AND #ControllerInput_B
0B1E0                           	BEQ CheckPlayer2Joypad_NoButtonB
0B1E0                           
0B1E0                           	JSR DebugRandomObject
0B1E0                           	BNE CheckPlayer2Joypad_CheckLeftRight
0B1E0                           
0B1E0                           CheckPlayer2Joypad_NoButtonB:
0B1E0                           	JSR RandomCarryObject
0B1E0                           
0B1E0                           CheckPlayer2Joypad_CheckLeftRight:
0B1E0                           	LDA Player2JoypadPress
0B1E0                           	AND #ControllerInput_Right | ControllerInput_Left
0B1E0                           	BEQ CheckPlayer2Joypad_Exit
0B1E0                           	CMP #ControllerInput_Right | ControllerInput_Left
0B1E0                           	BEQ CheckPlayer2Joypad_Exit
0B1E0                           
0B1E0                           	CLC
0B1E0                           	ADC CurrentCharacter
0B1E0                           	ADC CurrentCharacter
0B1E0                           
0B1E0                           	TAY
0B1E0                           	LDA ChangeCharacterOffsets, Y
0B1E0                           
0B1E0                           	LDX #$18
0B1E0                           	STX ChangeCharacterTimer
0B1E0                           	LDX #$08
0B1E0                           	STX ChangeCharacterPoofTimer
0B1E0                           
0B1E0                           	BNE CheckSetCurrentCharacter
0B1E0                           
0B1E0                           CheckPlayer2Joypad_Exit:
0B1E0                           	RTS
0B1E0                           
0B1E0                           ;
0B1E0                           ; Changes the current character
0B1E0                           ;
0B1E0                           ; Input
0B1E0                           ;   A = target character
0B1E0                           ;
0B1E0                           CheckSetCurrentCharacter:
0B1E0                           	CMP CurrentCharacter
0B1E0                           	BNE SetCurrentCharacter
0B1E0                           
0B1E0                           	RTS
0B1E0                           
0B1E0                           SetCurrentCharacter:
0B1E0                           	STA CurrentCharacter
0B1E0                           
0B1E0                           	LDA GravityWithJumpButton
0B1E0                           	PHA
0B1E0                           
0B1E0                           	LDX CurrentCharacter
0B1E0                           	LDY StatOffsetsRAM, X
0B1E0                           	LDX #$00
0B1E0                           SetCurrentCharacter_StatsLoop:
0B1E0                           	LDA StatOffsetsRAM + CharacterStats-StatOffsets, Y
0B1E0                           	STA CharacterStatsRAM, X
0B1E0                           	INY
0B1E0                           	INX
0B1E0                           	CPX #$17
0B1E0                           	BCC SetCurrentCharacter_StatsLoop
0B1E0                           
0B1E0                           	LDA CurrentCharacter
0B1E0                           	ASL A
0B1E0                           	ASL A
0B1E0                           	TAY
0B1E0                           	LDX #$00
0B1E0                           SetCurrentCharacter_PaletteLoop:
0B1E0                           	LDA StatOffsetsRAM + CharacterPalette-StatOffsets, Y
0B1E0                           	STA RestorePlayerPalette0, X
0B1E0                           	INY
0B1E0                           	INX
0B1E0                           	CPX #$04
0B1E0                           	BCC SetCurrentCharacter_PaletteLoop
0B1E0                           
0B1E0                           	; load carry offsets
0B1E0                           	LDY CurrentCharacter
0B1E0                           	LDA CarryYOffsetsRAM + CarryYOffsetBigLo-CarryYOffsets, Y
0B1E0                           	STA ItemCarryYOffsetsRAM
0B1E0                           	LDA CarryYOffsetsRAM + CarryYOffsetSmallLo-CarryYOffsets, Y
0B1E0                           	STA ItemCarryYOffsetsRAM + $07
0B1E0                           	LDA CarryYOffsetsRAM + CarryYOffsetBigHi-CarryYOffsets, Y
0B1E0                           	STA ItemCarryYOffsetsRAM + $0E
0B1E0                           	LDA CarryYOffsetsRAM + CarryYOffsetSmallHi-CarryYOffsets, Y
0B1E0                           	STA ItemCarryYOffsetsRAM + $15
0B1E0                           
0B1E0                           	; interrupt floating if this character can't do it
0B1E0                           	LDA JumpFloatLength
0B1E0                           	BEQ SetCurrentCharacter_SetJumpFloatTimer
0B1E0                           
0B1E0                           	; if already floating, keep going
0B1E0                           	CMP JumpFloatTimer
0B1E0                           	BCC SetCurrentCharacter_CheckGravityChange
0B1E0                           
0B1E0                           SetCurrentCharacter_SetJumpFloatTimer:
0B1E0                           	STA JumpFloatTimer
0B1E0                           
0B1E0                           SetCurrentCharacter_CheckGravityChange:
0B1E0                           	; check whether gravity is increasing
0B1E0                           	PLA
0B1E0                           	SEC
0B1E0                           	SBC GravityWithJumpButton
0B1E0                           	BEQ SetCurrentCharacter_Update
0B1E0                           
0B1E0                           	; stash velocity delta in X
0B1E0                           	TAX
0B1E0                           
0B1E0                           	; check whether y-velocity is negative
0B1E0                           	LDA PlayerYVelocity
0B1E0                           	BPL SetCurrentCharacter_Update
0B1E0                           
0B1E0                           	CPX #$00
0B1E0                           	BPL SetCurrentCharacter_ClampYVelocity
0B1E0                           
0B1E0                           	; scale y-velocity based on difference in gravity
0B1E0                           	EOR #$FF
0B1E0                           	CLC
0B1E0                           	ADC #$01
0B1E0                           
0B1E0                           	DEX
0B1E0                           SetCurrentCharacter_ScaleVelocityYUp_Loop:
0B1E0                           	ASL
0B1E0                           	INX
0B1E0                           	BEQ SetCurrentCharacter_ScaleVelocityYUp_Loop
0B1E0                           
0B1E0                           	EOR #$FF
0B1E0                           	STA PlayerYVelocity
0B1E0                           
0B1E0                           	JMP SetCurrentCharacter_Update
0B1E0                           
0B1E0                           SetCurrentCharacter_ClampYVelocity:
0B1E0                           	LDA PlayerYVelocity
0B1E0                           	CMP JumpHeightRunning
0B1E0                           
0B1E0                           	BPL SetCurrentCharacter_Update
0B1E0                           
0B1E0                           	LDA JumpHeightStandingCarrying
0B1E0                           	STA PlayerYVelocity
0B1E0                           
0B1E0                           SetCurrentCharacter_Update:
0B1E0                           	INC SkyFlashTimer
0B1E0                           
0B1E0                           	; update chr for character
0B1E0                           	JSR LoadCharacterCHRBanks
0B1E0                           
0B1E0                           	LDA #DPCM_PlayerDeath
0B1E0                           	STA DPCMQueue
0B1E0                           
0B1E0                           SetCurrentCharacter_Exit:
0B1E0                           	RTS
0B1E0                           
0B1E0                           
0B1E0                           RandomCarryObjectTypes:
0B1E0                           	.db #Enemy_VegetableSmall
0B1E0                           	.db #Enemy_VegetableLarge
0B1E0                           	.db #Enemy_Shell
0B1E0                           	.db #Enemy_Bomb
0B1E0                           	.db #Enemy_ShyguyRed
0B1E0                           	.db #Enemy_Tweeter
0B1E0                           	.db #Enemy_SnifitRed
0B1E0                           	.db #Enemy_Egg
0B1E0                           
0B1E0                           ; bit 7: put in player's hands
0B1E0                           ; bit 6: set enemy timer
0B1E0                           ; bit 5: start at bottom of screen
0B1E0                           ; bit 4:
0B1E0                           ; bit 3:
0B1E0                           ; bit 2:
0B1E0                           ; bit 1: set thrown flag
0B1E0                           ; bit 0: disable velocity reset
0B1E0                           RandomCarryObjectAttributes:
0B1E0                           	.db %10000000
0B1E0                           	.db %10000000
0B1E0                           	.db %10000000
0B1E0                           	.db %11000000
0B1E0                           	.db %10000001
0B1E0                           	.db %10000001
0B1E0                           	.db %10000001
0B1E0                           	.db %10000001
0B1E0                           
0B1E0                           
0B1E0                           RandomCarryObject:
0B1E0                           	LDA PlayerState
0B1E0                           	BNE RandomCarryObject_Exit
0B1E0                           	LDA HoldingItem
0B1E0                           	BNE RandomCarryObject_Exit
0B1E0                           
0B1E0                           	LDA byte_RAM_10
0B1E0                           	LSR A
0B1E0                           	LSR A
0B1E0                           	LSR A
0B1E0                           	AND #$07
0B1E0                           	TAX
0B1E0                           	LDA RandomCarryObjectAttributes, X
0B1E0                           	STA CreateObjectAttributes
0B1E0                           	LDA RandomCarryObjectTypes, X
0B1E0                           	STA CreateObjectType
0B1E0                           
0B1E0                           RandomCarryObject_Exit:
0B1E0                           	RTS
0B1E0                           
0B1E0                           
0B1E0                           DebugRandomObjectTypes:
0B1E0                           	.db #Enemy_Bomb
0B1E0                           	.db #Enemy_Bomb
0B1E0                           	.db #Enemy_POWBlock
0B1E0                           	.db #Enemy_POWBlock
0B1E0                           	.db #Enemy_POWBlock
0B1E0                           	.db #Enemy_Starman
0B1E0                           	.db #Enemy_Starman
0B1E0                           	.db #Enemy_Starman
0B1E0                           
0B1E0                           DebugRandomObjectAttributes:
0B1E0                           	.db %01000010
0B1E0                           	.db %01000010
0B1E0                           	.db %00000010
0B1E0                           	.db %00000010
0B1E0                           	.db %00000010
0B1E0                           	.db %00100010
0B1E0                           	.db %00100010
0B1E0                           	.db %00100010
0B1E0                           
0B1E0                           
0B1E0                           DebugRandomObject:
0B1E0                           	LDA byte_RAM_10
0B1E0                           	LSR A
0B1E0                           	LSR A
0B1E0                           	LSR A
0B1E0                           	AND #$07
0B1E0                           	TAX
0B1E0                           	LDA DebugRandomObjectAttributes, X
0B1E0                           	STA CreateObjectAttributes
0B1E0                           	LDA DebugRandomObjectTypes, X
0B1E0                           	STA CreateObjectType
0B1E0                           	RTS
0B1E0                           ENDIF
0B1E0                           
0B1E0                           IFDEF RANDOMIZER_T
0B1E0                               .include "src/extras/dc.asm"
0B1E0                           MoveByXLo:
0B1E0 A5 28                         LDA PlayerXLo
0B1E2 38                            SEC
0B1E3 E9 10                         SBC #$10
0B1E5 85 28                         STA PlayerXLo
0B1E7 60                            RTS
0B1E8                           
0B1E8                           MoveByYLo:
0B1E8 A5 32                         LDA PlayerYLo
0B1EA 38                            SEC
0B1EB E9 10                         SBC #$10
0B1ED 85 32                         STA PlayerYLo
0B1EF 60                            RTS
0B1F0                           
0B1F0                           EnterDefault_Custom:
0B1F0 A9 00                         LDA #0
0B1F2 85 50                         STA PlayerState ;instead of setting sprite to default, set player state to default
0B1F4 8D 1B 04                      STA PlayerLock ; restore state?
0B1F7 A9 E0                         LDA #$E0
0B1F9 85 32                         STA PlayerYLo
0B1FB 20 E0 99                      JSR AreaTransitionPlacement_Middle ; put player in air
0B1FE 4A                            LSR A
0B1FF 4A                            LSR A
0B200 4A                            LSR A
0B201 4A                            LSR A
0B202 85 E5                         STA byte_RAM_E5 ; get proper y tile for "check tile"
0B204 A9 D0                         LDA #$D0 
0B206 85 32                         STA PlayerYLo ; wait why do we set it up a bit, we just stored the y tile,
0B208 85 E6                         STA byte_RAM_E6 ; this might be for X, but seems to still work
0B20A AD 33 05                      LDA CurrentLevelEntryPage
0B20D 85 E8                         STA byte_RAM_E8 ; level page for "check tile"
0B20F A9 DF                         LDA #$DF
0B211 85 03                         STA byte_RAM_3 ; counter
0B213 20 DC B0                      JSR SetTileOffsetAndAreaPageAddr_Bank1 ;; maybe above has to do with check first tile before anything else
0B216 4C 23 B2                      JMP ++
0B219                           EnterDefault_Reap: ; loop stuff
0B219 C6 03                         DEC byte_RAM_3
0B21B F0 20                         BEQ +
0B21D 20 A7 B2                      JSR MoveByYThenX
0B220 20 DC B0                  -   JSR SetTileOffsetAndAreaPageAddr_Bank1 ;; check tile
0B223 A4 E7                     ++  LDY byte_RAM_E7
0B225 B1 01                         LDA (byte_RAM_1),Y
0B227 C9 40                         CMP #$40
0B229 F0 EE                         BEQ EnterDefault_Reap
0B22B C6 03                         DEC byte_RAM_3
0B22D F0 0E                         BEQ +
0B22F 20 A7 B2                      JSR MoveByYThenX
0B232 20 DC B0                      JSR SetTileOffsetAndAreaPageAddr_Bank1
0B235 A4 E7                         LDY byte_RAM_E7
0B237 B1 01                         LDA (byte_RAM_1),Y
0B239 C9 40                         CMP #$40
0B23B D0 E3                         BNE -
0B23D 20 E8 B1                  +   JSR MoveByYLo
0B240 60                            RTS 
0B241                           
0B241                           EnterDoor_Custom: ; This is called first for every transition
0B241 A9 00                         LDA #PlayerState_Normal 
0B243 85 50                         STA PlayerState
0B245 85 28                         STA PlayerXLo
0B247 85 E5                         STA byte_RAM_E5  
0B249 A9 E0                         LDA #$E0
0B24B 85 32                         STA PlayerYLo
0B24D 85 E6                         STA byte_RAM_E6
0B24F AD 33 05                      LDA CurrentLevelEntryPage
0B252 85 E8                         STA byte_RAM_E8
0B254 A9 DF                         LDA #$DF
0B256 85 03                         STA byte_RAM_3
0B258                           EnterDoor_J1:
0B258 20 DC B0                      JSR SetTileOffsetAndAreaPageAddr_Bank1 ;; get tiles something
0B25B A4 E7                         LDY byte_RAM_E7
0B25D B1 01                         LDA (byte_RAM_1),Y
0B25F A0 05                         LDY #5
0B261                           EnterDoor_J2:
0B261 D9 0C 96                      CMP DoorTiles-1,Y ;; compare to doors
0B264 F0 1B                         BEQ EnterDoor_J4 ;; if tru end
0B266 88                            DEY
0B267 D0 F8                         BNE EnterDoor_J2 ;; else loop if y > 0
0B269 C9 6F                         CMP #$6F
0B26B D0 07                         BNE +
0B26D A9 05                         LDA #PlayerState_ExitingJar
0B26F 85 50                         STA PlayerState
0B271 4C 81 B2                      JMP EnterDoor_J4
0B274                           +
0B274 C6 03                         DEC byte_RAM_3 
0B276 F0 06                         BEQ EnterDoor_J3 ;; skip if tilepos aint done else
0B278 20 8B B2                      JSR MoveByXThenY
0B27B 4C 58 B2                      JMP EnterDoor_J1
0B27E                           EnterDoor_J3:
0B27E 4C DB B2                      JMP FindVine_Custom
0B281                           EnterDoor_J4:
0B281 20 8B 99                      JSR AreaTransitionPlacement_MovePlayerUp1Tile
0B284 A9 00                         LDA #00
0B286 8D 1B 04                      STA PlayerLock
0B289 60                            RTS
0B28A                           
0B28A                           SetPipeLocation:
0B28A 60                            RTS
0B28B                           
0B28B                           MoveByXThenY:
0B28B A5 E5                         LDA byte_RAM_E5
0B28D 18                            CLC
0B28E 69 01                         ADC #1
0B290 29 0F                         AND #$0F
0B292 85 E5                         STA byte_RAM_E5
0B294 0A                            ASL
0B295 0A                            ASL
0B296 0A                            ASL
0B297 0A                            ASL
0B298 85 28                         STA PlayerXLo
0B29A D0 06                         BNE +
0B29C 20 E8 B1                      JSR MoveByYLo
0B29F 85 E6                         STA byte_RAM_E6
0B2A1 60                            RTS
0B2A2 A5 32                     +   LDA PlayerYLo
0B2A4 85 E6                         STA byte_RAM_E6
0B2A6 60                            RTS
0B2A7                           
0B2A7                           MoveByYThenX:
0B2A7 A5 E6                         LDA byte_RAM_E6
0B2A9 38                            SEC
0B2AA E9 10                         SBC #$10
0B2AC 29 F0                         AND #$F0
0B2AE 85 32                         STA PlayerYLo
0B2B0 85 E6                         STA byte_RAM_E6
0B2B2 A5 32                         LDA PlayerYLo
0B2B4 C9 00                         CMP #$00
0B2B6 D0 1A                         BNE +
0B2B8 38                            SEC
0B2B9 E9 20                         SBC #$20
0B2BB 29 F0                         AND #$F0
0B2BD 85 32                         STA PlayerYLo
0B2BF 85 E6                         STA byte_RAM_E6
0B2C1 20 E0 B1                      JSR MoveByXLo
0B2C4 C9 F0                         CMP #$F0
0B2C6 D0 03                         BNE ++
0B2C8 20 E0 B1                      JSR MoveByXLo
0B2CB 4A                        ++  LSR
0B2CC 4A                            LSR
0B2CD 4A                            LSR
0B2CE 4A                            LSR
0B2CF 85 E5                         STA byte_RAM_E5
0B2D1 60                            RTS
0B2D2 A5 28                     +   LDA PlayerXLo
0B2D4 4A                            LSR
0B2D5 4A                            LSR
0B2D6 4A                            LSR
0B2D7 4A                            LSR
0B2D8 85 E5                         STA byte_RAM_E5
0B2DA 60                            RTS
0B2DB                               
0B2DB                           
0B2DB                           FindVine_Custom:
0B2DB A9 00                         LDA #0
0B2DD 85 28                         STA PlayerXLo
0B2DF 85 32                         STA PlayerYLo
0B2E1 85 E5                         STA byte_RAM_E5
0B2E3 85 E6                         STA byte_RAM_E6
0B2E5 20 34 B3                      JSR VineGetStartPos
0B2E8                           FindVine_J0
0B2E8 A9 F0                         LDA #$F0
0B2EA C5 32                         CMP PlayerYLo
0B2EC D0 03                         BNE FindVine_J1
0B2EE 20 46 B3                      JSR VineGetStartPos_Bottom
0B2F1                           FindVine_J1:
0B2F1 20 DC B0                      JSR SetTileOffsetAndAreaPageAddr_Bank1
0B2F4 A4 E7                         LDY byte_RAM_E7
0B2F6 B1 01                         LDA (byte_RAM_1),Y
0B2F8 A0 09                         LDY #9
0B2FA D9 57 8B                  -   CMP ClimbableTiles-1,Y ;; compare to vines
0B2FD F0 0D                         BEQ + ;; if tru end
0B2FF 88                            DEY
0B300 D0 F8                         BNE - ;; else loop if y > 0
0B302 C6 03                         DEC byte_RAM_3 
0B304 F0 0C                         BEQ FindVine_J4 ;; skip if tilepos aint done else
0B306 20 8B B2                      JSR MoveByXThenY
0B309 4C E8 B2                      JMP FindVine_J0
0B30C 20 1B B3                  +   JSR VineSetVelocity
0B30F 4C 15 B3                      JMP FindVine_J5
0B312                           FindVine_J4:
0B312 4C F0 B1                      JMP EnterDefault_Custom ;; go to default behavior
0B315                           FindVine_J5:
0B315 A9 00                         LDA #0
0B317 8D 1B 04                      STA PlayerLock
0B31A 60                            RTS
0B31B                           
0B31B                           VineSetVelocity:
0B31B A9 03                         LDA #PlayerState_ClimbingAreaTransition
0B31D 85 50                         STA PlayerState
0B31F 8D EA 04                      STA TransitionType_Init
0B322 A9 0A                         LDA #SpriteAnimation_Climbing
0B324 85 C7                         STA PlayerAnimationFrame
0B326 A5 32                         LDA PlayerYLo
0B328 10 05                         BPL VineSetVelocity_Down
0B32A                           VineSetVelocity_Up:
0B32A A9 F0                         LDA #$F0
0B32C 85 46                         STA PlayerYVelocity
0B32E 60                            RTS
0B32F                           VineSetVelocity_Down:
0B32F A9 10                         LDA #$10
0B331 85 46                         STA PlayerYVelocity
0B333 60                            RTS
0B334                           
0B334                           VineGetStartPos:
0B334 AD 00 78                      LDA RawLevelData
0B337 2A                            ROL
0B338 2A                            ROL
0B339 29 01                         AND #1
0B33B C9 01                         CMP #1
0B33D F0 10                         BEQ VineGetStartPos_Top
0B33F AD 33 05                      LDA CurrentLevelEntryPage
0B342 C9 00                         CMP #0
0B344 F0 09                         BEQ VineGetStartPos_Top
0B346                           VineGetStartPos_Bottom:
0B346 A9 E0                         LDA #$E0
0B348 85 32                         STA PlayerYLo
0B34A A9 10                         LDA #$10
0B34C 85 03                         STA byte_RAM_3
0B34E 60                            RTS
0B34F                           VineGetStartPos_Top:
0B34F A9 20                         LDA #$20
0B351 85 03                         STA byte_RAM_3
0B353 A9 00                         LDA #$00
0B355 85 32                         STA PlayerYLo
0B357 60                            RTS
0B358                           
0B358                           ENDIF
0B358                           
0B358                           IFDEF PLAYER_STUFF
0B358                               .include "src/extras/player-mods.asm"
0B358                           ;; future proof this file by adding extended tables and space for external abilities
0B358                           ;; place "ability checks" in places where applicable, as easy injection sites
0B358                           
0B358                           CheckMaxHealth:
0B358 AD C3 04                      LDA PlayerMaxHealth
0B35B 38                            SEC
0B35C 30 0A                         BMI +
0B35E 0A                            ASL
0B35F 0A                            ASL
0B360 0A                            ASL
0B361 0A                            ASL
0B362 18                            CLC
0B363 69 0F                         ADC #$0F
0B365 CD C2 04                      CMP PlayerHealth
0B368 60                        +   RTS
0B369                           
0B369                           Player_PowerCharge:
0B369 A2 02                         LDX #CustomBitFlag_PowerCharge
0B36B A9 00                         LDA #$0
0B36D 20 45 F1                      JSR ChkFlagPlayer
0B370 D0 06                         BNE +
0B372 EE CA 04                      INC CrouchJumpTimer
0B375 EE CA 04                      INC CrouchJumpTimer
0B378 60                        +   RTS
0B379                           
0B379                           Player_PowerWalkInvincibility:
0B379 AC CA 04                  	LDY CrouchJumpTimer
0B37C C0 3C                     	CPY #$3C
0B37E D0 1A                         BNE +
0B380 A2 04                         LDX #CustomBitFlag_PowerWalk
0B382 A9 00                         LDA #$0
0B384 20 45 F1                      JSR ChkFlagPlayer
0B387 D0 11                         BNE +
0B389 AD C2 04                      LDA PlayerHealth
0B38C C9 7F                         CMP #$7F
0B38E 90 0A                         BCC +
0B390 AD E0 04                      LDA StarInvincibilityTimer
0B393 D0 05                         BNE +
0B395 A9 04                         LDA #$4
0B397 8D E0 04                      STA StarInvincibilityTimer
0B39A 60                        +   RTS
0B39B                           
0B39B                           Player_HiJump:
0B39B A2 02                         LDX #CustomBitFlag_HiJumpBoot
0B39D 20 3F F1                      JSR ChkFlagPlayer2
0B3A0 D0 06                         BNE +
0B3A2 A5 46                         LDA PlayerYVelocity
0B3A4 E9 10                         SBC #$10
0B3A6 85 46                     	STA PlayerYVelocity
0B3A8 60                        +   RTS
0B3A9                           
0B3A9                           Player_FloatJump:
0B3A9 A5 F7                     	LDA Player1JoypadHeld ; holding jump button to fight physics
0B3AB 29 80                         AND #ControllerInput_A
0B3AD F0 13                         BEQ +
0B3AF A2 04                         LDX #CustomBitFlag_FloatBoots
0B3B1 20 3F F1                      JSR ChkFlagPlayer2
0B3B4 D0 0C                         BNE +
0B3B6                           Player_WallCling:
0B3B6 A4 46                     	LDY PlayerYVelocity 
0B3B8 30 08                         BMI +
0B3BA C0 10                         CPY #$10
0B3BC 90 04                         BCC +
0B3BE A9 10                         LDA #$10
0B3C0 85 46                         STA PlayerYVelocity
0B3C2 60                        +   RTS
0B3C3                           
0B3C3                           Player_GroundPound:
0B3C3 A5 F7                         LDA Player1JoypadHeld
0B3C5 29 04                         AND #ControllerInput_Down
0B3C7 F0 39                         BEQ +o
0B3C9 A2 20                         LDX #CustomBitFlag_GroundPound
0B3CB 20 39 F1                      JSR ChkFlagPlayer3
0B3CE D0 31                         BNE +
0B3D0 A5 46                         LDA PlayerYVelocity
0B3D2 30 2D                         BMI +
0B3D4 C9 3F                         CMP #$3F
0B3D6 B0 07                         BCS ++
0B3D8 E6 46                         INC PlayerYVelocity
0B3DA E6 46                         INC PlayerYVelocity
0B3DC 4C 01 B4                      JMP +
0B3DF                           ++
0B3DF AD F7 76                      LDA CrushTimer
0B3E2 C9 24                         CMP #$24
0B3E4 B0 11                         BCS ++
0B3E6 EE F7 76                      INC CrushTimer
0B3E9 A9 08                         LDA #$8
0B3EB CD F7 76                      CMP CrushTimer
0B3EE B0 11                         BCS +
0B3F0 A9 0B                         LDA #SpriteAnimation_CustomFrame1
0B3F2 85 C7                         STA PlayerAnimationFrame
0B3F4 4C 01 B4                      JMP +
0B3F7                           ++
0B3F7 AD E0 04                      LDA StarInvincibilityTimer
0B3FA D0 05                         BNE +
0B3FC A9 04                         LDA #$4
0B3FE 8D E0 04                      STA StarInvincibilityTimer
0B401 60                        +   RTS
0B402 A9 00                     +o  LDA #$0
0B404 8D F7 76                      STA CrushTimer
0B407 60                            RTS
0B408                           
0B408                           Player_GroundPoundHit:
0B408 A5 46                         LDA PlayerYVelocity
0B40A 30 1C                         BMI +
0B40C C9 3F                         CMP #$3F
0B40E 90 18                         BCC +
0B410 AD F7 76                      LDA CrushTimer
0B413 C9 24                         CMP #$24
0B415 90 11                         BCC +
0B417 A2 20                         LDX #CustomBitFlag_GroundPound
0B419 20 39 F1                      JSR ChkFlagPlayer3
0B41C D0 0A                         BNE +
0B41E A9 20                         LDA #$20
0B420 8D C4 04                      STA POWQuakeTimer
0B423 A9 04                     	LDA #SoundEffect3_Rumble_B
0B425 8D 05 06                  	STA SoundEffectQueue3
0B428                           +
0B428 A9 00                         LDA #$0
0B42A 8D F7 76                      STA CrushTimer
0B42D 60                            RTS
0B42E                           
0B42E                           ProjectileData:
0B42E 20                           .db Enemy_Fireball ;1
0B42F 1E                           .db Enemy_Egg ;2
0B430 37                           .db Enemy_Bomb ;3
0B431 17                           .db Enemy_Phanto ;4 
0B432 2B                           .db Enemy_FryguySplit ;5
0B433 20                           .db Enemy_Fireball ;6
0B434 1B                           .db Enemy_Bullet ;7
0B435 37                           .db Enemy_Bomb ;8 
0B436 20                           .db Enemy_Fireball ;9
0B437 39                           .db Enemy_MushroomBlock ;a
0B438 20                           .db Enemy_Fireball ;b
0B439 1B                           .db Enemy_Bullet ;b
0B43A 20                           .db Enemy_Fireball ;1
0B43B                              ;;
0B43B                           ProjectileCountData:
0B43B 02                           .db $2
0B43C 01                           .db $1
0B43D 01                           .db $1
0B43E 01                           .db $1
0B43F 02                           .db $2
0B440 02                           .db $2
0B441 04                           .db $4
0B442 02                           .db $2
0B443 02                           .db $2
0B444 01                           .db $1
0B445 01                           .db $1
0B446 01                           .db $1
0B447 02                           .db $2
0B448                              ;;
0B448                           ProjectileTimerData:
0B448 10                           .db $10
0B449 20                           .db $20
0B44A 70                           .db $70
0B44B 80                           .db $80
0B44C 80                           .db $80
0B44D 60                           .db $60
0B44E 08                           .db $08
0B44F 40                           .db $40
0B450 10                           .db $10
0B451 80                           .db $80
0B452 40                           .db $40
0B453 40                           .db $40
0B454 10                           .db $10
0B455                           
0B455                           ProjectileMeta:
0B455 41                           .db $41
0B456 00                           .db $0
0B457 00                           .db $0
0B458 00                           .db $0
0B459 00                           .db $0
0B45A 40                           .db $40
0B45B 60                           .db $60
0B45C 60                           .db $60
0B45D 44                           .db $44
0B45E 60                           .db $60
0B45F 60                           .db $60
0B460 08                           .db $08
0B461 40                           .db $40
0B462                              
0B462                           ProjectileProcess:
0B462 AA                            TAX
0B463 CA                            DEX
0B464 20 A6 D9                  	JSR JumpToTableAfterJump
0B467                           ProjectileProcessTable:
0B467 DF B4                         .dw Projectile_Fling_Speed
0B469 DF B4                         .dw Projectile_Fling_Speed
0B46B 64 B5                         .dw Projectile_Bomb
0B46D 1E B5                         .dw Projectile_Phanto
0B46F D7 B4                         .dw Projectile_Fling_Speed_Hammer
0B471 DF B4                         .dw Projectile_Fling_Speed
0B473 B3 B4                         .dw Projectile_Gun
0B475 46 B5                         .dw Projectile_PlaceBomb
0B477 D7 B4                         .dw Projectile_Fling_Speed_Hammer
0B479 3E B5                         .dw Projectile_Ladder
0B47B 8E B4                         .dw Projectile_SwordBeam
0B47D DF B4                         .dw Projectile_Fling_Speed
0B47F CA B4                         .dw Projectile_Freeze
0B481                           
0B481                           ProjChar_IsPlayers = %10000000
0B481                           ProjChar_PuffEnemy = %1000000
0B481                           ProjChar_Disappear = %100000
0B481                           ProjChar_Invincible = %10000
0B481                           ProjChar_Explosion = %1000
0B481                           
0B481                           
0B481                           Projectile_ThrowAnim:
0B481 A9 09                     	LDA #SpriteAnimation_Throwing
0B483 85 C7                     	STA PlayerAnimationFrame
0B485 A9 02                     	LDA #$02
0B487 85 9B                     	STA PlayerWalkFrame
0B489 A9 0A                     	LDA #$0A
0B48B 85 84                     	STA PlayerWalkFrameCounter
0B48D 60                            RTS
0B48E                           Projectile_SwordBeam:
0B48E A6 00                         LDX byte_RAM_0
0B490 20 58 B3                      JSR CheckMaxHealth
0B493 B0 16                         BCS +n
0B495 20 DF B4                      JSR Projectile_Fling_Speed
0B498 A5 9D                         LDA PlayerDirection
0B49A F0 05                         BEQ +
0B49C A9 20                         LDA #$20
0B49E 4C A3 B4                      JMP ++
0B4A1 A9 E0                     +   LDA #$E0
0B4A3 95 3D                     ++  STA ObjectXVelocity, X
0B4A5 A9 20                     	LDA #SoundEffect1_EnemyHit
0B4A7 8D 02 06                  	STA SoundEffectQueue1
0B4AA 60                            RTS
0B4AB A9 00                     +n  LDA #$0
0B4AD 95 51                         STA EnemyState, X
0B4AF CE F2 76                      DEC ProjectileNumber
0B4B2 60                            RTS
0B4B3                           Projectile_Gun:
0B4B3 A6 00                         LDX byte_RAM_0
0B4B5 A5 9D                         LDA PlayerDirection
0B4B7 F0 05                         BEQ +
0B4B9 A9 70                         LDA #$70
0B4BB 4C C0 B4                      JMP ++
0B4BE A9 90                     +   LDA #$90
0B4C0 95 3D                     ++  STA ObjectXVelocity, X
0B4C2 A9 20                     	LDA #SoundEffect1_EnemyHit
0B4C4 8D 02 06                  	STA SoundEffectQueue1
0B4C7 4C 01 B5                      JMP Projectile_Fling
0B4CA                           
0B4CA                           Projectile_Freeze:
0B4CA 20 DF B4                      JSR Projectile_Fling_Speed
0B4CD A9 03                         LDA #$3
0B4CF 9D 20 7D                      STA MoreEnemyInfo, X
0B4D2 55 65                     	EOR ObjectAttributes, X 
0B4D4 95 65                         STA ObjectAttributes, X
0B4D6 60                            RTS
0B4D7                           
0B4D7                           Projectile_Fling_Speed_Hammer:
0B4D7 A6 00                         LDX byte_RAM_0
0B4D9 A9 E0                         LDA #$E0
0B4DB 95 47                         STA ObjectYVelocity, X
0B4DD D6 79                         DEC EnemyVariable, X
0B4DF                           Projectile_Fling_Speed:
0B4DF 20 81 B4                      JSR Projectile_ThrowAnim
0B4E2 A6 00                         LDX byte_RAM_0
0B4E4 A5 9D                         LDA PlayerDirection
0B4E6 F0 0E                         BEQ +
0B4E8 A9 1E                         LDA #$1E
0B4EA A4 3C                         LDY PlayerXVelocity
0B4EC F0 11                         BEQ ++
0B4EE 30 0F                         BMI ++
0B4F0 18                            CLC
0B4F1 69 18                         ADC #$18
0B4F3 4C FF B4                      JMP ++
0B4F6 A9 E2                     +   LDA #$E2
0B4F8 A4 3C                         LDY PlayerXVelocity
0B4FA 10 03                         BPL ++
0B4FC 38                            SEC
0B4FD E9 18                         SBC #$18
0B4FF 95 3D                     ++  STA ObjectXVelocity, X
0B501                           Projectile_Fling:
0B501 A6 00                         LDX byte_RAM_0
0B503 A5 28                     	LDA PlayerXLo
0B505 18                            CLC
0B506 69 02                         ADC #2
0B508 95 29                     	STA ObjectXLo, X
0B50A A5 14                     	LDA PlayerXHi
0B50C 69 00                         ADC #0
0B50E 95 15                     	STA ObjectXHi, X
0B510 A5 32                     	LDA PlayerYLo
0B512 18                            CLC
0B513 69 08                         ADC #8
0B515 95 33                     	STA ObjectYLo, X
0B517 A5 1E                     	LDA PlayerYHi
0B519 69 00                         ADC #0
0B51B                               ;; carry page
0B51B 95 1F                     	STA ObjectYHi, X
0B51D 60                            RTS
0B51E                           Projectile_Phanto:
0B51E A6 00                         LDX byte_RAM_0
0B520 A9 00                         LDA #$0
0B522 A5 CB                     	LDA ScreenYLo
0B524 95 33                     	STA ObjectYLo, X
0B526 A5 CA                     	LDA ScreenYHi
0B528 95 1F                     	STA ObjectYHi, X
0B52A AD C0 04                  	LDA ScreenBoundaryLeftLo
0B52D 95 29                     	STA ObjectXLo, X
0B52F AD BE 04                  	LDA ScreenBoundaryLeftHi
0B532 95 15                     	STA ObjectXHi, X
0B534 A9 03                         LDA #$3
0B536 55 65                     	EOR ObjectAttributes, X 
0B538 95 65                         STA ObjectAttributes, X
0B53A 20 81 B4                      JSR Projectile_ThrowAnim
0B53D 60                            RTS
0B53E                           
0B53E                           Projectile_Ladder:
0B53E 20 64 B5                      JSR Projectile_Bomb
0B541 A9 94                         LDA #BackgroundTile_LadderStandable
0B543 95 79                         STA EnemyVariable, X
0B545 60                            RTS
0B546                           Projectile_PlaceBomb:
0B546 20 01 B5                      JSR Projectile_Fling
0B549 A9 04                         LDA #$4
0B54B 9D 6E 04                  	STA EnemyArray_46E, X 
0B54E A5 28                     	LDA PlayerXLo
0B550 95 29                     	STA ObjectXLo, X
0B552 A5 14                     	LDA PlayerXHi
0B554 69 00                         ADC #0
0B556 95 15                     	STA ObjectXHi, X
0B558 B5 3D                     	LDA ObjectXVelocity, X
0B55A D0 21                     	BNE +
0B55C 95 47                     	STA ObjectYVelocity, X
0B55E 20 3E DF                  	JSR SnapEnemy
0B561 4C 7D B5                      JMP PlaceBomb
0B564                           Projectile_Bomb:
0B564 20 01 B5                      JSR Projectile_Fling
0B567 A9 04                         LDA #$4
0B569 9D 6E 04                  	STA EnemyArray_46E, X 
0B56C A5 F7                     	LDA Player1JoypadHeld
0B56E 29 04                         AND #ControllerInput_Down
0B570 D0 0B                         BNE +
0B572 8E 2D 04                      STX ObjectBeingCarriedIndex
0B575 A9 01                         LDA #$1
0B577 85 9C                         STA HoldingItem
0B579 95 79                         STA EnemyVariable, X
0B57B 95 A8                     	STA ObjectBeingCarriedTimer, X
0B57D                           +
0B57D                           PlaceBomb:
0B57D A9 03                         LDA #$3
0B57F 55 65                     	EOR ObjectAttributes, X 
0B581 95 65                         STA ObjectAttributes, X
0B583 A9 80                         LDA #$80
0B585 95 86                         STA EnemyTimer, X
0B587 60                            RTS
0B588                           
0B588                           CreateFireballStartForceDefault: 
0B588 AD F1 76                      LDA ProjectileType
0B58B 48                            PHA
0B58C A4 8F                         LDY CurrentCharacter
0B58E B9 03 EF                      LDA StartingHold, Y
0B591 29 7F                         AND #$7F
0B593 F0 03                         BEQ +
0B595 8D F1 76                      STA ProjectileType
0B598                           +
0B598 20 AA B5                      JSR CreateFireballStartSkipInput
0B59B 68                            PLA
0B59C 8D F1 76                      STA ProjectileType
0B59F 60                            RTS
0B5A0                           
0B5A0                           CreateFireballStart: 
0B5A0 A5 F5                     	LDA Player1JoypadPress
0B5A2 29 40                         AND #ControllerInput_B
0B5A4 F0 4C                     	BEQ ++ ;; #ControllerInput_B
0B5A6 A5 9C                         LDA HoldingItem ;; no firing with holding
0B5A8 D0 48                         BNE ++
0B5AA                           CreateFireballStartSkipInput: 
0B5AA AD F3 76                      LDA ProjectileTimer ;; no firing if timer is on
0B5AD D0 43                         BNE ++
0B5AF AD F2 76                      LDA ProjectileNumber ;; reset if num is negative
0B5B2 10 05                         BPL +
0B5B4 A9 00                         LDA #0
0B5B6 8D F2 76                      STA ProjectileNumber
0B5B9                           +
0B5B9 AC F1 76                      LDY ProjectileType ;; if no projectile...
0B5BC C0 00                         CPY #$0
0B5BE D0 0C                         BNE +x
0B5C0 A6 8F                         LDX CurrentCharacter
0B5C2 BC FF EE                      LDY StartingProjectile, X ;; if no projectile...
0B5C5 C0 00                         CPY #$0
0B5C7 D0 03                         BNE +y
0B5C9 4C 3B B6                      JMP +++
0B5CC                           +y  
0B5CC                           +c
0B5CC 88                        +x  DEY
0B5CD 84 C5                         STY byte_RAM_C5
0B5CF AD F2 76                      LDA ProjectileNumber
0B5D2 D9 3B B4                      CMP ProjectileCountData, Y ;; no firing if above/equal limit
0B5D5 B0 1B                         BCS ++
0B5D7 AC F1 76                      LDY ProjectileType
0B5DA D0 0F                         BNE +k
0B5DC BD C9 EE                      LDA DokiMode, X
0B5DF 29 10                         AND #CustomCharFlag_WeaponCherry
0B5E1 F0 08                         BEQ +k
0B5E3 AD E9 73                      LDA Level_Count_Cherries
0B5E6 F0 53                         BEQ +++
0B5E8 CE E9 73                      DEC Level_Count_Cherries
0B5EB                           +k
0B5EB 20 9E B1                  	JSR CreateEnemy_TryAllSlots_Bank1
0B5EE C0 FF                         CPY #$FF
0B5F0 D0 03                         BNE +
0B5F2 4C 3B B6                  ++  JMP +++
0B5F5 EE F2 76                  +   INC ProjectileNumber
0B5F8 A6 00                         LDX byte_RAM_0
0B5FA A4 C5                         LDY byte_RAM_C5 ;; if no projectile...
0B5FC B9 2E B4                      LDA ProjectileData, Y
0B5FF 95 90                     	STA ObjectType, X
0B601 20 71 B0                      JSR EnemyInit_Basic_Bank1 ; Get current object sprite attributes...
0B604                           
0B604 A4 C5                     +p  LDY byte_RAM_C5 ;; if no projectile...
0B606 B9 55 B4                      LDA ProjectileMeta, Y
0B609 09 80                         ORA #$80
0B60B 9D 10 76                      STA Enemy_Fireball_Hits, X
0B60E 95 79                         STA EnemyVariable, X
0B610 BD 6E 04                  	LDA EnemyArray_46E, X 
0B613 29 F3                         AND #%11110011
0B615 9D 6E 04                      STA EnemyArray_46E, X
0B618 A9 02                         LDA #$2
0B61A 9D 89 04                  	STA EnemyArray_489, X
0B61D A9 05                         LDA #$5
0B61F 9D 92 04                      STA EnemyArray_492, X
0B622 A9 01                     	LDA #$01
0B624 9D 2F 04                  	STA EnemyArray_42F, X
0B627 A9 FF                         LDA #$FF
0B629 9D 20 76                      STA Enemy_Champion, X
0B62C 9D 20 7D                      STA MoreEnemyInfo, X
0B62F A4 C5                     ++  LDY byte_RAM_C5 ;; if no projectile...
0B631 B9 48 B4                      LDA ProjectileTimerData, Y
0B634 8D F3 76                      STA ProjectileTimer
0B637 98                            TYA
0B638 20 62 B4                      JSR ProjectileProcess
0B63B 60                        +++ RTS
0B63C                           
0B63C                           StoreItem:
0B63C AD F4 76                  	LDA StoredItem
0B63F D0 11                         BNE +
0B641 A2 08                         LDX #CustomBitFlag_StoreItem
0B643 20 45 F1                      JSR ChkFlagPlayer
0B646 F0 0A                         BEQ +
0B648 A4 8F                         LDY CurrentCharacter
0B64A B9 03 EF                      LDA StartingHold, Y
0B64D D0 03                         BNE +
0B64F 4C 38 B7                      JMP +++
0B652                           +
0B652 A5 F7                         LDA Player1JoypadHeld
0B654 29 08                         AND #ControllerInput_Up
0B656 D0 03                         BNE +
0B658 4C 38 B7                      JMP +++
0B65B                           +
0B65B AD F3 76                      LDA ProjectileTimer
0B65E F0 03                         BEQ +
0B660 4C 39 B7                      JMP SkipOutThrow
0B663                           +
0B663 AD F4 76                  	LDA StoredItem
0B666 D0 39                         BNE ++
0B668 A5 9C                         LDA HoldingItem
0B66A D0 0A                         BNE +
0B66C A4 8F                         LDY CurrentCharacter
0B66E B9 03 EF                      LDA StartingHold, Y
0B671 D0 2E                         BNE ++
0B673 4C 38 B7                      JMP +++
0B676                           +
0B676 AE 2D 04                  	LDX ObjectBeingCarriedIndex
0B679 B5 51                     	LDA EnemyState, X
0B67B C9 06                     	CMP #EnemyState_Sand
0B67D D0 03                         BNE +
0B67F 4C 39 B7                  +s  JMP SkipOutThrow
0B682                           +
0B682 A2 08                         LDX #CustomBitFlag_StoreItem
0B684 20 45 F1                      JSR ChkFlagPlayer
0B687 D0 18                         BNE ++
0B689 C6 9C                         DEC HoldingItem
0B68B AE 2D 04                  	LDX ObjectBeingCarriedIndex
0B68E A9 03                         LDA #EnemyState_BlockFizzle
0B690 95 51                     	STA EnemyState, X
0B692 A9 14                         LDA #$14
0B694 95 86                         STA EnemyTimer, X
0B696 8D F3 76                      STA ProjectileTimer
0B699 B5 90                         LDA ObjectType, X
0B69B 8D F4 76                      STA StoredItem
0B69E 4C 39 B7                      JMP SkipOutThrow
0B6A1 AE 2D 04                  ++  LDX ObjectBeingCarriedIndex
0B6A4 A5 9C                         LDA HoldingItem
0B6A6 F0 03                         BEQ +
0B6A8 4C 38 B7                      JMP +++
0B6AB                           +
0B6AB E6 9C                         INC HoldingItem
0B6AD 20 9E B1                      JSR CreateEnemy_TryAllSlots_Bank1
0B6B0 A6 00                         LDX byte_RAM_0
0B6B2 C0 FF                         CPY #$FF
0B6B4 D0 05                         BNE ++
0B6B6 C6 9C                         DEC HoldingItem
0B6B8 4C 39 B7                      JMP SkipOutThrow
0B6BB 8E 2D 04                  ++  STX ObjectBeingCarriedIndex
0B6BE AD F4 76                      LDA StoredItem
0B6C1 D0 2D                         BNE +
0B6C3 A4 8F                         LDY CurrentCharacter
0B6C5 B9 C9 EE                      LDA DokiMode, Y
0B6C8 29 20                         AND #CustomCharFlag_StoreCherry
0B6CA F0 11                         BEQ ++
0B6CC AD E9 73                      LDA Level_Count_Cherries
0B6CF D0 09                         BNE +c 
0B6D1 A9 00                         LDA #$0
0B6D3 95 51                         STA EnemyState, X
0B6D5 C6 9C                         DEC HoldingItem
0B6D7 4C 39 B7                      JMP SkipOutThrow
0B6DA                           +c
0B6DA CE E9 73                      DEC Level_Count_Cherries
0B6DD                           ++
0B6DD A4 8F                         LDY CurrentCharacter
0B6DF B9 03 EF                      LDA StartingHold, Y
0B6E2 10 0C                         BPL +
0B6E4 A9 00                         LDA #$0
0B6E6 95 51                         STA EnemyState, X
0B6E8 C6 9C                         DEC HoldingItem
0B6EA 20 88 B5                      JSR CreateFireballStartForceDefault
0B6ED 4C 39 B7                      JMP SkipOutThrow
0B6F0                           +
0B6F0 95 90                         STA ObjectType, X
0B6F2 A9 20                         LDA #$20
0B6F4 8D F3 76                      STA ProjectileTimer
0B6F7 20 71 B0                      JSR EnemyInit_Basic_Bank1 ; Get current object sprite attributes...
0B6FA AD C0 04                  	LDA ScreenBoundaryLeftLo
0B6FD 69 80                     	ADC #$80
0B6FF 95 29                     	STA ObjectXLo, X
0B701 AD BE 04                  	LDA ScreenBoundaryLeftHi
0B704 69 00                     	ADC #$00
0B706 95 15                     	STA ObjectXHi, X
0B708 A5 CB                     	LDA ScreenYLo
0B70A 95 33                     	STA ObjectYLo, X
0B70C                           
0B70C A5 CA                     	LDA ScreenYHi
0B70E 69 00                     	ADC #$00
0B710 95 1F                     	STA ObjectYHi, X
0B712 A9 01                         LDA #$1
0B714 85 9C                         STA HoldingItem
0B716 95 79                         STA EnemyVariable, X
0B718 95 A8                     	STA ObjectBeingCarriedTimer, X
0B71A B5 90                         LDA ObjectType, X
0B71C C9 09                         CMP #Enemy_BobOmb
0B71E F0 04                         BEQ +o
0B720 C9 37                         CMP #Enemy_Bomb
0B722 D0 04                         BNE +b
0B724 A9 50                     +o  LDA #$50
0B726 95 86                     	STA EnemyTimer, X
0B728                           +b
0B728 C9 39                         CMP #Enemy_MushroomBlock
0B72A D0 04                         BNE +
0B72C A9 69                         LDA #BackgroundTile_MushroomBlock
0B72E 95 79                         STA EnemyVariable, X
0B730                           +
0B730 A9 00                         LDA #$0
0B732 8D F4 76                      STA StoredItem
0B735 4C 39 B7                      JMP SkipOutThrow
0B738                           +++ 
0B738 60                            RTS
0B739                           SkipOutThrow:
0B739 68                            PLA
0B73A 68                            PLA
0B73B 60                            RTS
0B73C                           
0B73C                           CharacterOne_Frames:
0B73C 00                        	.db $00 ; $2a
0B73D 02                        	.db $02 ; $2b
0B73E 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B73F 06                        	.db $06 ; $01
0B740 0C                        	.db $0C ; $02
0B741 0E                        	.db $0E ; $03
0B742 10                        	.db $10 ; $04
0B743 12                        	.db $12 ; $05
0B744 00                        	.db $00 ; $06
0B745 02                        	.db $02 ; $07
0B746 08                        	.db $08 ; $08
0B747 0A                        	.db $0A ; $09
0B748 0C                        	.db $0C ; $0a
0B749 0E                        	.db $0E ; $0b
0B74A 14                        	.db $14 ; $0c
0B74B 16                        	.db $16 ; $0d
0B74C FB                        	.db $FB ; $0e
0B74D FB                        	.db $FB ; $0f
0B74E 2C                        	.db $2C ; $10
0B74F 2C                        	.db $2C ; $11
0B750 FB                        	.db $FB ; $12
0B751 FB                        	.db $FB ; $13
0B752 2E                        	.db $2E ; $14
0B753 2E                        	.db $2E ; $15
0B754 0C                        	.db $0C ; $16
0B755 0E                        	.db $0E ; $17
0B756 10                        	.db $10 ; $18
0B757 12                        	.db $12 ; $19
0B758 30                        	.db $30 ; $1a
0B759 30                        	.db $30 ; $1b
0B75A 32                        	.db $32 ; $1c
0B75B 32                        	.db $32 ; $1d
0B75C 20                        	.db $20 ; $1e
0B75D 22                        	.db $22 ; $1f
0B75E 24                        	.db $24 ; $20
0B75F 26                        	.db $26 ; $21
0B760 00                        	.db $00 ; $22
0B761 02                        	.db $02 ; $23
0B762 28                        	.db $28 ; $24
0B763 2A                        	.db $2A ; $25
0B764 18                        	.db $18 ; $26
0B765 1A                        	.db $1A ; $27
0B766 1C                        	.db $1C ; $28
0B767 1E                        	.db $1E ; $29
0B768 00                        	.db $00 ; $2a
0B769 02                        	.db $02 ; $2b
0B76A 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B76B 06                        	.db $06 ; $01
0B76C                           CharacterTwo_Frames:
0B76C 00                        	.db $00
0B76D 02                        	.db $02
0B76E 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B76F 06                        	.db $06 ; $01
0B770 0C                        	.db $0C ; $02
0B771 0E                        	.db $0E ; $03
0B772 10                        	.db $10 ; $04
0B773 12                        	.db $12 ; $05
0B774 00                        	.db $00 ; $06
0B775 02                        	.db $02 ; $07
0B776 08                        	.db $08 ; $08
0B777 0A                        	.db $0A ; $09
0B778 0C                        	.db $0C ; $02
0B779 0E                        	.db $0E ; $03
0B77A 14                        	.db $14 ; $0c
0B77B 16                        	.db $16 ; $0d
0B77C FB                        	.db $FB ; $0e
0B77D FB                        	.db $FB ; $0f
0B77E 2C                        	.db $2C ; $10
0B77F 2C                        	.db $2C ; $11
0B780 FB                        	.db $FB ; $12
0B781 FB                        	.db $FB ; $13
0B782 2E                        	.db $2E ; $14
0B783 2E                        	.db $2E ; $15
0B784 0C                        	.db $0C ; $02
0B785 0E                        	.db $0E ; $03
0B786 3C                        	.db $3C ; $02
0B787 3E                        	.db $3E ; $03
0B788 30                        	.db $30 ; $1a
0B789 30                        	.db $30 ; $1b
0B78A 32                        	.db $32 ; $1c
0B78B 32                        	.db $32 ; $1d
0B78C 20                        	.db $20 ; $1e
0B78D 22                        	.db $22 ; $1f
0B78E 24                        	.db $24 ; $20
0B78F 26                        	.db $26 ; $21
0B790 00                        	.db $00 ; $22
0B791 02                        	.db $02 ; $23
0B792 28                        	.db $28 ; $24
0B793 2A                        	.db $2A ; $25
0B794 18                        	.db $18 ; $26
0B795 1A                        	.db $1A ; $27
0B796 1C                        	.db $1C ; $28
0B797 1E                        	.db $1E ; $29
0B798 00                        	.db $00 ; $2a
0B799 02                        	.db $02 ; $2b
0B79A 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B79B 06                        	.db $06 ; $01
0B79C                           CharacterTre_Frames:
0B79C 00                        	.db $00
0B79D 02                        	.db $02
0B79E 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B79F 06                        	.db $06 ; $01
0B7A0 0C                        	.db $0C ; $02
0B7A1 0E                        	.db $0E ; $03
0B7A2 10                        	.db $10 ; $04
0B7A3 12                        	.db $12 ; $05
0B7A4 00                        	.db $00 ; $06
0B7A5 02                        	.db $02 ; $07
0B7A6 08                        	.db $08 ; $08
0B7A7 0A                        	.db $0A ; $09
0B7A8 0C                        	.db $0C ; $0a
0B7A9 0E                        	.db $0E ; $0b
0B7AA 14                        	.db $14 ; $0c
0B7AB 16                        	.db $16 ; $0d
0B7AC FB                        	.db $FB ; $0e
0B7AD FB                        	.db $FB ; $0f
0B7AE 2C                        	.db $2C ; $10
0B7AF 2C                        	.db $2C ; $11
0B7B0 FB                        	.db $FB ; $12
0B7B1 FB                        	.db $FB ; $13
0B7B2 2E                        	.db $2E ; $14
0B7B3 2E                        	.db $2E ; $15
0B7B4 0C                        	.db $0C ; $16
0B7B5 0E                        	.db $0E ; $17
0B7B6 10                        	.db $10 ; $18
0B7B7 12                        	.db $12 ; $19
0B7B8 30                        	.db $30 ; $1a
0B7B9 30                        	.db $30 ; $1b
0B7BA 32                        	.db $32 ; $1c
0B7BB 32                        	.db $32 ; $1d
0B7BC 20                        	.db $20 ; $1e
0B7BD 22                        	.db $22 ; $1f
0B7BE 24                        	.db $24 ; $20
0B7BF 26                        	.db $26 ; $21
0B7C0 00                        	.db $00 ; $22
0B7C1 02                        	.db $02 ; $23
0B7C2 28                        	.db $28 ; $24
0B7C3 2A                        	.db $2A ; $25
0B7C4 18                        	.db $18 ; $26
0B7C5 1A                        	.db $1A ; $27
0B7C6 1C                        	.db $1C ; $28
0B7C7 1E                        	.db $1E ; $29
0B7C8 00                        	.db $00 ; $2a
0B7C9 02                        	.db $02 ; $2b
0B7CA 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B7CB 06                        	.db $06 ; $01
0B7CC                           CharacterFour_Frames:
0B7CC 00                        	.db $00
0B7CD 02                        	.db $02
0B7CE 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B7CF 06                        	.db $06 ; $01
0B7D0 0C                        	.db $0C ; $02
0B7D1 0E                        	.db $0E ; $03
0B7D2 10                        	.db $10 ; $04
0B7D3 12                        	.db $12 ; $05
0B7D4 00                        	.db $00 ; $06
0B7D5 02                        	.db $02 ; $07
0B7D6 08                        	.db $08 ; $08
0B7D7 0A                        	.db $0A ; $09
0B7D8 0C                        	.db $0C ; $0a
0B7D9 0E                        	.db $0E ; $0b
0B7DA 14                        	.db $14 ; $0c
0B7DB 16                        	.db $16 ; $0d
0B7DC FB                        	.db $FB ; $0e
0B7DD FB                        	.db $FB ; $0f
0B7DE 2C                        	.db $2C ; $10
0B7DF 2C                        	.db $2C ; $11
0B7E0 FB                        	.db $FB ; $12
0B7E1 FB                        	.db $FB ; $13
0B7E2 2E                        	.db $2E ; $14
0B7E3 2E                        	.db $2E ; $15
0B7E4 0C                        	.db $0C ; $16
0B7E5 0E                        	.db $0E ; $17
0B7E6 10                        	.db $10 ; $18
0B7E7 12                        	.db $12 ; $19
0B7E8 30                        	.db $30 ; $1a
0B7E9 30                        	.db $30 ; $1b
0B7EA 32                        	.db $32 ; $1c
0B7EB 32                        	.db $32 ; $1d
0B7EC 20                        	.db $20 ; $1e
0B7ED 22                        	.db $22 ; $1f
0B7EE 24                        	.db $24 ; $20
0B7EF 26                        	.db $26 ; $21
0B7F0 00                        	.db $00 ; $22
0B7F1 02                        	.db $02 ; $23
0B7F2 28                        	.db $28 ; $24
0B7F3 2A                        	.db $2A ; $25
0B7F4 18                        	.db $18 ; $26
0B7F5 1A                        	.db $1A ; $27
0B7F6 1C                        	.db $1C ; $28
0B7F7 1E                        	.db $1E ; $29
0B7F8 00                        	.db $00 ; $2a
0B7F9 02                        	.db $02 ; $2b
0B7FA 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B7FB 06                        	.db $06 ; $01
0B7FC                           
0B7FC                           CharacterOne_FramesSmall:
0B7FC 00                        	.db $00 ; $2a
0B7FD 02                        	.db $02 ; $2b
0B7FE 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B7FF 06                        	.db $06 ; $01
0B800 0C                        	.db $0C ; $02
0B801 0E                        	.db $0E ; $03
0B802 10                        	.db $10 ; $04
0B803 12                        	.db $12 ; $05
0B804 00                        	.db $00 ; $06
0B805 02                        	.db $02 ; $07
0B806 08                        	.db $08 ; $08
0B807 0A                        	.db $0A ; $09
0B808 0C                        	.db $0C ; $0a
0B809 0E                        	.db $0E ; $0b
0B80A 14                        	.db $14 ; $0c
0B80B 16                        	.db $16 ; $0d
0B80C FB                        	.db $FB ; $0e
0B80D FB                        	.db $FB ; $0f
0B80E 2C                        	.db $2C ; $10
0B80F 2C                        	.db $2C ; $11
0B810 FB                        	.db $FB ; $12
0B811 FB                        	.db $FB ; $13
0B812 2E                        	.db $2E ; $14
0B813 2E                        	.db $2E ; $15
0B814 0C                        	.db $0C ; $16
0B815 0E                        	.db $0E ; $17
0B816 10                        	.db $10 ; $18
0B817 12                        	.db $12 ; $19
0B818 30                        	.db $30 ; $1a
0B819 30                        	.db $30 ; $1b
0B81A 32                        	.db $32 ; $1c
0B81B 32                        	.db $32 ; $1d
0B81C 20                        	.db $20 ; $1e
0B81D 22                        	.db $22 ; $1f
0B81E 24                        	.db $24 ; $20
0B81F 26                        	.db $26 ; $21
0B820 00                        	.db $00 ; $22
0B821 02                        	.db $02 ; $23
0B822 28                        	.db $28 ; $24
0B823 2A                        	.db $2A ; $25
0B824 18                        	.db $18 ; $26
0B825 1A                        	.db $1A ; $27
0B826 1C                        	.db $1C ; $28
0B827 1E                        	.db $1E ; $29
0B828 00                        	.db $00 ; $2a
0B829 02                        	.db $02 ; $2b
0B82A 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B82B 06                        	.db $06 ; $01
0B82C                           CharacterTwo_FramesSmall:
0B82C 00                        	.db $00
0B82D 02                        	.db $02
0B82E 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B82F 06                        	.db $06 ; $01
0B830 0C                        	.db $0C ; $02
0B831 0E                        	.db $0E ; $03
0B832 10                        	.db $10 ; $04
0B833 12                        	.db $12 ; $05
0B834 00                        	.db $00 ; $06
0B835 02                        	.db $02 ; $07
0B836 08                        	.db $08 ; $08
0B837 0A                        	.db $0A ; $09
0B838 0C                        	.db $0C ; $02
0B839 0E                        	.db $0E ; $03
0B83A 14                        	.db $14 ; $0c
0B83B 16                        	.db $16 ; $0d
0B83C FB                        	.db $FB ; $0e
0B83D FB                        	.db $FB ; $0f
0B83E 2C                        	.db $2C ; $10
0B83F 2C                        	.db $2C ; $11
0B840 FB                        	.db $FB ; $12
0B841 FB                        	.db $FB ; $13
0B842 2E                        	.db $2E ; $14
0B843 2E                        	.db $2E ; $15
0B844 0C                        	.db $0C ; $02
0B845 0E                        	.db $0E ; $03
0B846 3C                        	.db $3C ; $02
0B847 3E                        	.db $3E ; $03
0B848 30                        	.db $30 ; $1a
0B849 30                        	.db $30 ; $1b
0B84A 32                        	.db $32 ; $1c
0B84B 32                        	.db $32 ; $1d
0B84C 20                        	.db $20 ; $1e
0B84D 22                        	.db $22 ; $1f
0B84E 24                        	.db $24 ; $20
0B84F 26                        	.db $26 ; $21
0B850 00                        	.db $00 ; $22
0B851 02                        	.db $02 ; $23
0B852 28                        	.db $28 ; $24
0B853 2A                        	.db $2A ; $25
0B854 18                        	.db $18 ; $26
0B855 1A                        	.db $1A ; $27
0B856 1C                        	.db $1C ; $28
0B857 1E                        	.db $1E ; $29
0B858 00                        	.db $00 ; $2a
0B859 02                        	.db $02 ; $2b
0B85A 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B85B 06                        	.db $06 ; $01
0B85C                           CharacterTre_FramesSmall:
0B85C 00                        	.db $00
0B85D 02                        	.db $02
0B85E 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B85F 06                        	.db $06 ; $01
0B860 0C                        	.db $0C ; $02
0B861 0E                        	.db $0E ; $03
0B862 10                        	.db $10 ; $04
0B863 12                        	.db $12 ; $05
0B864 00                        	.db $00 ; $06
0B865 02                        	.db $02 ; $07
0B866 08                        	.db $08 ; $08
0B867 0A                        	.db $0A ; $09
0B868 0C                        	.db $0C ; $0a
0B869 0E                        	.db $0E ; $0b
0B86A 14                        	.db $14 ; $0c
0B86B 16                        	.db $16 ; $0d
0B86C FB                        	.db $FB ; $0e
0B86D FB                        	.db $FB ; $0f
0B86E 2C                        	.db $2C ; $10
0B86F 2C                        	.db $2C ; $11
0B870 FB                        	.db $FB ; $12
0B871 FB                        	.db $FB ; $13
0B872 2E                        	.db $2E ; $14
0B873 2E                        	.db $2E ; $15
0B874 0C                        	.db $0C ; $16
0B875 0E                        	.db $0E ; $17
0B876 10                        	.db $10 ; $18
0B877 12                        	.db $12 ; $19
0B878 30                        	.db $30 ; $1a
0B879 30                        	.db $30 ; $1b
0B87A 32                        	.db $32 ; $1c
0B87B 32                        	.db $32 ; $1d
0B87C 20                        	.db $20 ; $1e
0B87D 22                        	.db $22 ; $1f
0B87E 24                        	.db $24 ; $20
0B87F 26                        	.db $26 ; $21
0B880 00                        	.db $00 ; $22
0B881 02                        	.db $02 ; $23
0B882 28                        	.db $28 ; $24
0B883 2A                        	.db $2A ; $25
0B884 18                        	.db $18 ; $26
0B885 1A                        	.db $1A ; $27
0B886 1C                        	.db $1C ; $28
0B887 1E                        	.db $1E ; $29
0B888 00                        	.db $00 ; $2a
0B889 02                        	.db $02 ; $2b
0B88A 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B88B 06                        	.db $06 ; $01
0B88C                           CharacterFour_FramesSmall:
0B88C 00                        	.db $00
0B88D 02                        	.db $02
0B88E 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B88F 06                        	.db $06 ; $01
0B890 0C                        	.db $0C ; $02
0B891 0E                        	.db $0E ; $03
0B892 10                        	.db $10 ; $04
0B893 12                        	.db $12 ; $05
0B894 00                        	.db $00 ; $06
0B895 02                        	.db $02 ; $07
0B896 08                        	.db $08 ; $08
0B897 0A                        	.db $0A ; $09
0B898 0C                        	.db $0C ; $0a
0B899 0E                        	.db $0E ; $0b
0B89A 14                        	.db $14 ; $0c
0B89B 16                        	.db $16 ; $0d
0B89C FB                        	.db $FB ; $0e
0B89D FB                        	.db $FB ; $0f
0B89E 2C                        	.db $2C ; $10
0B89F 2C                        	.db $2C ; $11
0B8A0 FB                        	.db $FB ; $12
0B8A1 FB                        	.db $FB ; $13
0B8A2 2E                        	.db $2E ; $14
0B8A3 2E                        	.db $2E ; $15
0B8A4 0C                        	.db $0C ; $16
0B8A5 0E                        	.db $0E ; $17
0B8A6 10                        	.db $10 ; $18
0B8A7 12                        	.db $12 ; $19
0B8A8 30                        	.db $30 ; $1a
0B8A9 30                        	.db $30 ; $1b
0B8AA 32                        	.db $32 ; $1c
0B8AB 32                        	.db $32 ; $1d
0B8AC 20                        	.db $20 ; $1e
0B8AD 22                        	.db $22 ; $1f
0B8AE 24                        	.db $24 ; $20
0B8AF 26                        	.db $26 ; $21
0B8B0 00                        	.db $00 ; $22
0B8B1 02                        	.db $02 ; $23
0B8B2 28                        	.db $28 ; $24
0B8B3 2A                        	.db $2A ; $25
0B8B4 18                        	.db $18 ; $26
0B8B5 1A                        	.db $1A ; $27
0B8B6 1C                        	.db $1C ; $28
0B8B7 1E                        	.db $1E ; $29
0B8B8 00                        	.db $00 ; $2a
0B8B9 02                        	.db $02 ; $2b
0B8BA 04                        	.db $04 ; $00 - start of relative character tile offets, for some reason
0B8BB 06                        	.db $06 ; $01
0B8BC                           
0B8BC                           CharacterOneMetaFrames:
0B8BC 00                            .db %00000000 ;; W
0B8BD 00                            .db %00000000 ;; Walk Carry
0B8BE 00                            .db %00000000 ;; S
0B8BF 00                            .db %00000000 ;; Stand Carry
0B8C0 0C                            .db %00001100 ;; Duck
0B8C1 0C                            .db %00001100 ;; 
0B8C2 00                            .db %00000000 ;; jump
0B8C3 0C                            .db %00001100 ;; dead
0B8C4 00                            .db %00000000
0B8C5 00                            .db %00000000
0B8C6 00                            .db %00000000
0B8C7 00                            .db %00000000
0B8C8                           CharacterTwoMetaFrames:
0B8C8 00                            .db %00000000 ;; W
0B8C9 00                            .db %00000000 ;; Walk Carry
0B8CA 00                            .db %00000000 ;; S
0B8CB 00                            .db %00000000 ;; Stand Carry
0B8CC 0C                            .db %00001100 ;; Duck
0B8CD 0C                            .db %00001100 ;; Duck
0B8CE 00                            .db %00000000 ;; jump
0B8CF 0C                            .db %00001100 ;; dead
0B8D0 00                            .db %00000000
0B8D1 00                            .db %00000000
0B8D2 00                            .db %00000000
0B8D3 00                            .db %00000000
0B8D4                           CharacterThreeMetaFrames:
0B8D4 00                            .db %00000000 ;; W
0B8D5 00                            .db %00000000 ;; Walk Carry
0B8D6 00                            .db %00000000 ;; S
0B8D7 00                            .db %00000000 ;; Stand Carry
0B8D8 0C                            .db %00001100 ;; Duck
0B8D9 0C                            .db %00001100 ;; Duck
0B8DA 00                            .db %00000000 ;; jump
0B8DB 0C                            .db %00001100 ;; dead
0B8DC 00                            .db %00000000
0B8DD 00                            .db %00000000
0B8DE 00                            .db %00000000 
0B8DF 00                            .db %00000000
0B8E0                           CharacterFourMetaFrames:
0B8E0 00                            .db %00000000 ;; W
0B8E1 00                            .db %00000000 ;; Walk Carry
0B8E2 00                            .db %00000000 ;; S
0B8E3 00                            .db %00000000 ;; Stand Carry
0B8E4 0C                            .db %00001100 ;; Duck
0B8E5 0C                            .db %00001100 ;; Duck
0B8E6 00                            .db %00000000 ;; jump
0B8E7 0C                            .db %00001100 ;; dead
0B8E8 00                            .db %00000000
0B8E9 00                            .db %00000000
0B8EA 00                            .db %00000000
0B8EB 00                            .db %00000000
0B8EC                           CharacterOneMetaFramesSmall:
0B8EC 00                            .db %00000000 ;; W
0B8ED 00                            .db %00000000 ;; Walk Carry
0B8EE 00                            .db %00000000 ;; S
0B8EF 00                            .db %00000000 ;; Stand Carry
0B8F0 0C                            .db %00001100 ;; Duck
0B8F1 0C                            .db %00001100 ;; Duck
0B8F2 00                            .db %00000000 ;; jump
0B8F3 0C                            .db %00001100 ;; dead
0B8F4 00                            .db %00000000
0B8F5 00                            .db %00000000
0B8F6 00                            .db %00000000
0B8F7 00                            .db %00000000
0B8F8                           CharacterTwoMetaFramesSmall:
0B8F8 00                            .db %00000000 ;; W
0B8F9 00                            .db %00000000 ;; Walk Carry
0B8FA 00                            .db %00000000 ;; S
0B8FB 00                            .db %00000000 ;; Stand Carry
0B8FC 0C                            .db %00001100 ;; Duck
0B8FD 0C                            .db %00001100 ;; Duck
0B8FE 00                            .db %00000000 ;; jump
0B8FF 0C                            .db %00001100 ;; dead
0B900 00                            .db %00000000
0B901 00                            .db %00000000
0B902 00                            .db %00000000
0B903 00                            .db %00000000
0B904                           CharacterThreeMetaFramesSmall:
0B904 00                            .db %00000000 ;; W
0B905 00                            .db %00000000 ;; Walk Carry
0B906 00                            .db %00000000 ;; S
0B907 00                            .db %00000000 ;; Stand Carry
0B908 0C                            .db %00001100 ;; Duck
0B909 0C                            .db %00001100 ;; Duck
0B90A 00                            .db %00000000 ;; jump
0B90B 0C                            .db %00001100 ;; dead
0B90C 00                            .db %00000000
0B90D 00                            .db %00000000
0B90E 00                            .db %00000000 
0B90F 00                            .db %00000000
0B910                           CharacterFourMetaFramesSmall:
0B910 00                            .db %00000000 ;; W
0B911 00                            .db %00000000 ;; Walk Carry
0B912 00                            .db %00000000 ;; S
0B913 00                            .db %00000000 ;; Stand Carry
0B914 0C                            .db %00001100 ;; Duck
0B915 0C                            .db %00001100 ;; 
0B916 00                            .db %00000000 ;; jump
0B917 0C                            .db %00001100 ;; dead
0B918 00                            .db %00000000
0B919 00                            .db %00000000
0B91A 00                            .db %00000000
0B91B 00                            .db %00000000
0B91C                           
0B91C                           CharacterStartTiles:
0B91C 00                            .db $00
0B91D 30                            .db $30
0B91E 60                            .db $60
0B91F 90                            .db $90
0B920                           CharacterMetaStartTiles:
0B920 00                            .db $00
0B921 0C                            .db $0c
0B922 18                            .db $18
0B923 24                            .db $24
0B924                           CharacterFlipLookup:
0B924 01                            .db %0001
0B925 04                            .db %0100
0B926 02                            .db %0010
0B927 08                            .db %1000
0B928 04                            .db %0100
0B929 01                            .db %0001
0B92A 08                            .db %1000
0B92B 02                            .db %0010
0B92C                           CharacterExtraSheets:
0B92C 3C                            .db $3C
0B92D 3D                            .db $3D
0B92E 3E                            .db $3E
0B92F 3F                            .db $3F
0B930                           ExtraFramesOne:
0B930 FB FB                     	.db $FB, $FB
0B932 FB FB                     	.db $FB, $FB
0B934 FB FB                     	.db $FB, $FB
0B936 FB FB                     	.db $FB, $FB
0B938 FB FB                     	.db $FB, $FB
0B93A FB FB                     	.db $FB, $FB
0B93C FB FB                     	.db $FB, $FB
0B93E FB FB                     	.db $FB, $FB
0B940 FB FB                     	.db $FB, $FB
0B942 FB FB                     	.db $FB, $FB
0B944 FB FB                     	.db $FB, $FB
0B946 FB FB                     	.db $FB, $FB
0B948                           ExtraFramesTwo:
0B948 FB FB                     	.db $FB, $FB
0B94A FB FB                     	.db $FB, $FB
0B94C FB FB                     	.db $FB, $FB
0B94E FB FB                     	.db $FB, $FB
0B950 FB FB                     	.db $FB, $FB
0B952 FB FB                     	.db $FB, $FB
0B954 FB FB                     	.db $FB, $FB
0B956 FB FB                     	.db $FB, $FB
0B958 FB FB                     	.db $FB, $FB
0B95A FB FB                     	.db $FB, $FB
0B95C FB FB                     	.db $FB, $FB
0B95E FB FB                     	.db $FB, $FB
0B960                           ExtraFramesTre:
0B960 FB FB                     	.db $FB, $FB
0B962 FB FB                     	.db $FB, $FB
0B964 FB FB                     	.db $FB, $FB
0B966 FB FB                     	.db $FB, $FB
0B968 FB FB                     	.db $FB, $FB
0B96A FB FB                     	.db $FB, $FB
0B96C FB FB                     	.db $FB, $FB
0B96E FB FB                     	.db $FB, $FB
0B970 FB FB                     	.db $FB, $FB
0B972 FB FB                     	.db $FB, $FB
0B974 FB FB                     	.db $FB, $FB
0B976 FB FB                     	.db $FB, $FB
0B978                           ExtraFramesFor:
0B978 FB FB                     	.db $FB, $FB
0B97A FB FB                     	.db $FB, $FB
0B97C FB FB                     	.db $FB, $FB
0B97E FB FB                     	.db $FB, $FB
0B980 FB FB                     	.db $FB, $FB
0B982 FB FB                     	.db $FB, $FB
0B984 FB FB                     	.db $FB, $FB
0B986 FB FB                     	.db $FB, $FB
0B988 FB FB                     	.db $FB, $FB
0B98A FB FB                     	.db $FB, $FB
0B98C FB FB                     	.db $FB, $FB
0B98E FB FB                     	.db $FB, $FB
0B990                           
0B990                           ApplyMetaInformation:
0B990 A6 8F                         LDX CurrentCharacter
0B992 98                            TYA
0B993 48                            PHA
0B994 A4 9D                         LDY PlayerDirection
0B996 A5 C7                         LDA PlayerAnimationFrame
0B998 C9 06                     	CMP #SpriteAnimation_Jumping
0B99A B0 02                     	BCS +
0B99C 05 9C                     	ORA HoldingItem
0B99E 18                        +   CLC
0B99F 7D 20 B9                      ADC CharacterMetaStartTiles, X
0B9A2 AC F6 06                      LDY PlayerCurrentSize
0B9A5 C0 00                         CPY #$0
0B9A7 F0 03                         BEQ +
0B9A9 18                            CLC
0B9AA 69 30                         ADC #$30 ;; end of meta tiles 
0B9AC                           +
0B9AC AA                            TAX
0B9AD A4 9D                         LDY PlayerDirection
0B9AF BD BC B8                      LDA CharacterOneMetaFrames, X
0B9B2 39 24 B9                      AND CharacterFlipLookup, Y
0B9B5 F0 08                         BEQ +
0B9B7 AD 22 02                  	LDA SpriteDMAArea + $22
0B9BA 49 40                         EOR #$40
0B9BC 8D 22 02                  	STA SpriteDMAArea + $22
0B9BF                           +
0B9BF BD BC B8                      LDA CharacterOneMetaFrames, X
0B9C2 39 26 B9                      AND CharacterFlipLookup + 2, Y
0B9C5 F0 08                         BEQ +
0B9C7 AD 2A 02                  	LDA SpriteDMAArea + $2A
0B9CA 49 40                         EOR #$40
0B9CC 8D 2A 02                  	STA SpriteDMAArea + $2A
0B9CF                           +
0B9CF BD BC B8                      LDA CharacterOneMetaFrames, X
0B9D2 39 28 B9                      AND CharacterFlipLookup + 4, Y
0B9D5 F0 08                         BEQ +
0B9D7 AD 26 02                  	LDA SpriteDMAArea + $26
0B9DA 49 40                         EOR #$40
0B9DC 8D 26 02                  	STA SpriteDMAArea + $26
0B9DF                           +
0B9DF BD BC B8                      LDA CharacterOneMetaFrames, X
0B9E2 39 2A B9                      AND CharacterFlipLookup + 6, Y
0B9E5 F0 08                         BEQ +
0B9E7 AD 2E 02                  	LDA SpriteDMAArea + $2E
0B9EA 49 40                         EOR #$40
0B9EC 8D 2E 02                  	STA SpriteDMAArea + $2E
0B9EF                           +
0B9EF BD BC B8                      LDA CharacterOneMetaFrames, X
0B9F2 29 10                         AND #%10000
0B9F4 F0 08                         BEQ +
0B9F6 AD 1A 02                  	LDA SpriteDMAArea + $1A
0B9F9 49 40                         EOR #$40
0B9FB 8D 1A 02                  	STA SpriteDMAArea + $1A
0B9FE                           +
0B9FE BD BC B8                      LDA CharacterOneMetaFrames, X
0BA01 29 20                         AND #%100000
0BA03 F0 08                         BEQ +
0BA05 AD 1E 02                  	LDA SpriteDMAArea + $1E
0BA08 49 40                         EOR #$40
0BA0A 8D 1E 02                  	STA SpriteDMAArea + $1E
0BA0D                           +
0BA0D BD BC B8                      LDA CharacterOneMetaFrames, X
0BA10 10 0B                         BPL +
0BA12 A6 8F                         LDX CurrentCharacter
0BA14 BD 2C B9                  	LDA CharacterExtraSheets, X
0BA17 8D F9 06                  	STA SpriteCHR1
0BA1A 4C 20 BA                      JMP ++
0BA1D 20 48 FD                  +   JSR LoadCharacterCHRBanks
0BA20                           ++
0BA20 68                            PLA
0BA21 A8                            TAY
0BA22 60                            RTS
0BA23                           
0BA23                           RenderSmallPlayer:
0BA23 A5 9D                     	LDA PlayerDirection
0BA25 D0 25                     	BNE loc_BANKF_F44A_SMALL
0BA27                           
0BA27 AD 23 02                  	LDA SpriteDMAArea + $23
0BA2A 99 03 02                  	STA SpriteDMAArea + 3, Y
0BA2D                           
0BA2D 8A                            TXA
0BA2E 18                            CLC
0BA2F A6 8F                     	LDX CurrentCharacter
0BA31 7D 1C B9                      ADC CharacterStartTiles, X
0BA34 AA                            TAX
0BA35 BD FC B7                  	LDA CharacterOne_FramesSmall, X
0BA38 8D 21 02                  	STA SpriteDMAArea + $21
0BA3B BD FD B7                  	LDA CharacterOne_FramesSmall + 1, X
0BA3E 8D 25 02                  	STA SpriteDMAArea + $25
0BA41                           
0BA41                           loc_BANKF_F43F_SMALL:
0BA41 BD FE B7                  	LDA CharacterOne_FramesSmall + 2, X
0BA44 8D 29 02                  	STA SpriteDMAArea + $29
0BA47 BD FF B7                  	LDA CharacterOne_FramesSmall + 3, X
0BA4A D0 23                     	BNE loc_BANKF_F478_SMALL
0BA4C                           
0BA4C                           loc_BANKF_F44A_SMALL:
0BA4C 8A                            TXA
0BA4D 18                            CLC
0BA4E A6 8F                     	LDX CurrentCharacter
0BA50 7D 1C B9                      ADC CharacterStartTiles, X
0BA53 AA                            TAX
0BA54 AD 27 02                  	LDA SpriteDMAArea + $27
0BA57 99 03 02                  	STA SpriteDMAArea + 3, Y
0BA5A BD FD B7                  	LDA CharacterOne_FramesSmall + 1, X
0BA5D 8D 21 02                  	STA SpriteDMAArea + $21
0BA60 BD FC B7                  	LDA CharacterOne_FramesSmall, X
0BA63 8D 25 02                  	STA SpriteDMAArea + $25
0BA66                           
0BA66                           loc_BANKF_F46F_SMALL:
0BA66 BD FF B7                  	LDA CharacterOne_FramesSmall + 3, X
0BA69 8D 29 02                  	STA SpriteDMAArea + $29
0BA6C BD FE B7                  	LDA CharacterOne_FramesSmall + 2, X
0BA6F                           
0BA6F                           loc_BANKF_F478_SMALL:
0BA6F 8D 2D 02                  	STA SpriteDMAArea + $2D
0BA72 A9 FB                     	LDA #$FB
0BA74 8D 19 02                  	STA SpriteDMAArea + $19
0BA77 8D 1D 02                  	STA SpriteDMAArea + $1d
0BA7A 8D 18 02                  	STA SpriteDMAArea + $18
0BA7D 8D 1C 02                  	STA SpriteDMAArea + $1C
0BA80 60                            RTS
0BA81                           ENDIF
0BA81                           
0BA81                           IFDEF PLAYER_STUFF
0BA81                           TileQuadPointersLo:
0BA81 89                        	.db <TileQuads1
0BA82 25                        	.db <TileQuads2
0BA83 29                        	.db <TileQuads3
0BA84 E9                        	.db <TileQuads4
0BA85                           
0BA85                           TileQuadPointersHi:
0BA85 BA                        	.db >TileQuads1
0BA86 BB                        	.db >TileQuads2
0BA87 BC                        	.db >TileQuads3
0BA88 BC                        	.db >TileQuads4
0BA89                           
0BA89                           TileQuads1:
0BA89 FE FE FE FE               	.db $FE,$FE,$FE,$FE ; $00
0BA8D B4 B6 B5 B7               	.db $B4,$B6,$B5,$B7 ; $04
0BA91 B8 FA B9 FA               	.db $B8,$FA,$B9,$FA ; $08
0BA95 FA FA B2 B3               	.db $FA,$FA,$B2,$B3 ; $0C
0BA99 BE BE BF BF               	.db $BE,$BE,$BF,$BF ; $10
0BA9D BF BF BF BF               	.db $BF,$BF,$BF,$BF ; $14
0BAA1 4A 4A 4B 4B               	.db $4A,$4A,$4B,$4B ; $18
0BAA5 5E 5F 5E 5F               	.db $5E,$5F,$5E,$5F ; $1C
0BAA9 E8 E8 A9 A9               	.db $E8,$E8,$A9,$A9 ; $20
0BAAD 46 FC 46 FC               	.db $46,$FC,$46,$FC ; $24
0BAB1 A9 A9 A9 A9               	.db $A9,$A9,$A9,$A9 ; $28
0BAB5 FC FC FC FC               	.db $FC,$FC,$FC,$FC ; $2C
0BAB9 E9 E9 A9 A9               	.db $E9,$E9,$A9,$A9 ; $30
0BABD FC 48 FC 48               	.db $FC,$48,$FC,$48 ; $34
0BAC1 11 11 11 11               	.db $11,$11,$11,$11 ; $38
0BAC5 22 22 22 22               	.db $22,$22,$22,$22 ; $3C
0BAC9 33 33 33 33               	.db $33,$33,$33,$33 ; $40
0BACD E8 EB A9 A9               	.db $E8,$EB,$A9,$A9 ; $44
0BAD1 74 76 75 77               	.db $74,$76,$75,$77 ; $48
0BAD5 98 9A 99 9B               	.db $98,$9A,$99,$9B ; $4C
0BAD9 9C 9A 9D 9B               	.db $9C,$9A,$9D,$9B ; $50
0BADD 9C 9E 9B 9F               	.db $9C,$9E,$9B,$9F ; $54
0BAE1                           IFDEF PLAYER_STUFF
0BAE1 3C 3E 3D 3F               	.db $3C,$3E,$3D,$3F ; $58
0BAE5                           ENDIF
0BAE5                           IFNDEF PLAYER_STUFF
0BAE5                           	.db $58,$5A,$59,$5B ; $58 ;;ice
0BAE5                           ENDIF
0BAE5 5E 5F 5E 5F               	.db $5E,$5F,$5E,$5F ; $5C
0BAE9 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $60
0BAED 72 73 73 72               	.db $72,$73,$73,$72 ; $64
0BAF1 A6 A6 A7 A7               	.db $A6,$A6,$A7,$A7 ; $68
0BAF5 92 93 93 92               	.db $92,$93,$93,$92 ; $6C
0BAF9 74 76 75 77               	.db $74,$76,$75,$77 ; $70
0BAFD 70 72 71 73               	.db $70,$72,$71,$73 ; $74
0BB01 71 73 71 73               	.db $71,$73,$71,$73 ; $78
0BB05 24 26 25 27               	.db $24,$26,$25,$27 ; $7C
0BB09 32 34 33 35               	.db $32,$34,$33,$35 ; $80 ;; plat?
0BB0D 33 35 33 35               	.db $33,$35,$33,$35 ; $84
0BB11 24 26 25 27               	.db $24,$26,$25,$27 ; $88
0BB15                           IFDEF PLAYER_STUFF
0BB15 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $58 // normal block
0BB19 F0 F0 F1 F1               	.db $F0,$F0,$F1,$F1 ; $68 // power block
0BB1D 8E F4 8F F5               	.db $8E,$F4,$8F,$F5 ; $AC // lock trasure 23
0BB21 80 82 84 86               	.db $80,$82,$84,$86 ; $AC // trasure 24
0BB25                           ENDIF
0BB25                           IFDEF EXPAND_TABLES
0BB25                           	unusedSpace TileQuads1 + $100, $FC
0BB25                           ENDIF
0BB25                           
0BB25                           TileQuads2:
0BB25 FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $00
0BB29 FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $04
0BB2D FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $08
0BB31 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $0C
0BB35 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $10
0BB39 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $14
0BB3D FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $18
0BB41 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $1C
0BB45 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $20
0BB49 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $24
0BB4D FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $28
0BB51 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $2C
0BB55 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $30
0BB59 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $34
0BB5D A0 A2 A1 A3               	.db $A0,$A2,$A1,$A3 ; $38
0BB61 80 82 81 83               	.db $80,$82,$81,$83 ; $3C
0BB65 F4 86 F5 87               	.db $F4,$86,$F5,$87 ; $40
0BB69 84 86 85 87               	.db $84,$86,$85,$87 ; $44
0BB6D FC FC FC FC               	.db $FC,$FC,$FC,$FC ; $48
0BB71 AD FB AC AD               	.db $AD,$FB,$AC,$AD ; $4C
0BB75 AC AC AC AC               	.db $AC,$AC,$AC,$AC ; $50
0BB79 FB 3B 3B AC               	.db $FB,$3B,$3B,$AC ; $54
0BB7D FC FC FC FC               	.db $FC,$FC,$FC,$FC ; $58
0BB81 F4 86 F5 87               	.db $F4,$86,$F5,$87 ; $5C
0BB85 FB 49 49 FB               	.db $FB,$49,$49,$FB ; $60
0BB89 FE FE FE FE               	.db $FE,$FE,$FE,$FE ; $64
0BB8D                           IFDEF PLAYER_STUFF
0BB8D FE FE 59 FE               	.db $FE,$FE,$59,$FE ; $68
0BB91 EC EE ED EF               	.db $EC,$EE,$ED,$EF ; $6C;; mask
0BB95                           ENDIF
0BB95                           IFNDEF PLAYER_STUFF
0BB95                           	.db $FE,$FE,$6D,$FE ; $68
0BB95                           	.db $3C,$3E,$3D,$3F ; $6C
0BB95                           ENDIF
0BB95 58 FD 59 5A               	.db $58,$FD,$59,$5A ; $70
0BB99 5B 5A FD FD               	.db $5B,$5A,$FD,$FD ; $74
0BB9D 5B 5C FD 5D               	.db $5B,$5C,$FD,$5D ; $78
0BBA1 FD FD 5B 5A               	.db $FD,$FD,$5B,$5A ; $7C
0BBA5                           IFNDEF PLAYER_STUFF
0BBA5                           	.db $6C,$FE,$FE,$FE ; $80
0BBA5                           	.db $FE,$FE,$FE,$FE ; $84
0BBA5                           	.db $FE,$6E,$FE,$6F ; $88
0BBA5                           ENDIF
0BBA5                           IFDEF PLAYER_STUFF
0BBA5 58 FE FE FE               	.db $58,$FE,$FE,$FE ; $80
0BBA9 FE FE FE FE               	.db $FE,$FE,$FE,$FE ; $84
0BBAD FE 5A FE 5B               	.db $FE,$5A,$FE,$5B ; $88
0BBB1                           ENDIF
0BBB1 20 22 21 23               	.db $20,$22,$21,$23 ; $8C
0BBB5 6E 6F 70 71               	.db $6E,$6F,$70,$71 ; $90
0BBB9 57 57 FB FB               	.db $57,$57,$FB,$FB ; $94
0BBBD 57 57 FE FE               	.db $57,$57,$FE,$FE ; $98
0BBC1 D3 D3 FB FB               	.db $D3,$D3,$FB,$FB ; $9C
0BBC5 D2 D2 FB FB               	.db $D2,$D2,$FB,$FB ; $A0
0BBC9 7C 7E 7D 7F               	.db $7C,$7E,$7D,$7F ; $A4
0BBCD CA CC CB CD               	.db $CA,$CC,$CB,$CD ; $A8
0BBD1 CA CC CB CD               	.db $CA,$CC,$CB,$CD ; $AC
0BBD5 C0 C2 C1 C3               	.db $C0,$C2,$C1,$C3 ; $B0
0BBD9 2C 2E 2D 2F               	.db $2C,$2E,$2D,$2F ; $B4
0BBDD 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $B8
0BBE1 88 8A 89 8B               	.db $88,$8A,$89,$8B ; $BC
0BBE5 89 8B 89 8B               	.db $89,$8B,$89,$8B ; $C0
0BBE9 89 8B 8C 8D               	.db $89,$8B,$8C,$8D ; $C4
0BBED 88 8A 8C 8D               	.db $88,$8A,$8C,$8D ; $C8
0BBF1 88 8A 89 8B               	.db $88,$8A,$89,$8B ; $CC
0BBF5 88 8A 89 8B               	.db $88,$8A,$89,$8B ; $D0
0BBF9 6A 6C 6B 6D               	.db $6A,$6C,$6B,$6D ; $D4
0BBFD 6C 6C 6D 6D               	.db $6C,$6C,$6D,$6D ; $D8
0BC01 6C 6E 6D 6F               	.db $6C,$6E,$6D,$6F ; $DC ;whale eye
0BC05 6C 54 6D 55               	.db $6C,$54,$6D,$55 ; $E0
0BC09 32 34 33 35               	.db $32,$34,$33,$35 ; $E4 ;; plat?
0BC0D 33 35 33 35               	.db $33,$35,$33,$35 ; $E8
0BC11                           IFDEF HOT_SPOTS
0BC11 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $58 // normal block
0BC15 F0 F0 F1 F1               	.db $F0,$F0,$F1,$F1 ; $68 // power block
0BC19 8E F4 8F F5               	.db $8E,$F4,$8F,$F5 ; $AC
0BC1D 80 82 84 86               	.db $80,$82,$84,$86 ; $AC
0BC21 A9 A9 A9 A9               	.db $a9,$a9,$a9,$a9 ; $00
0BC25 94 95 94 95               	.db $94,$95,$94,$95 ; $00 // pickable ladder (not used right now)
0BC29                           ENDIF
0BC29                           IFDEF EXPAND_TABLES
0BC29                           	unusedSpace TileQuads2 + $100, $FC
0BC29                           ENDIF
0BC29                           
0BC29                           TileQuads3:
0BC29 94 95 94 95               	.db $94,$95,$94,$95 ; $00
0BC2D 96 97 96 97               	.db $96,$97,$96,$97 ; $04
0BC31 48 49 48 49               	.db $48,$49,$48,$49 ; $08
0BC35 FE FE FE FE               	.db $FE,$FE,$FE,$FE ; $0C
0BC39 FB 32 32 33               	.db $FB,$32,$32,$33 ; $10
0BC3D 33 33 33 33               	.db $33,$33,$33,$33 ; $14
0BC41 FD FD FD FD               	.db $FD,$FD,$FD,$FD ; $18
0BC45 34 FB FD 34               	.db $34,$FB,$FD,$34 ; $1C
0BC49 FB 30 FB FB               	.db $FB,$30,$FB,$FB ; $20
0BC4D FB FB 31 FB               	.db $FB,$FB,$31,$FB ; $24
0BC51 D0 D0 D0 D0               	.db $D0,$D0,$D0,$D0 ; $28
0BC55 D1 D1 D1 D1               	.db $D1,$D1,$D1,$D1 ; $2C
0BC59                           IFNDEF PLAYER_STUFF
0BC59                           	.db $64,$66,$65,$67 ; $30 ;; spout left
0BC59                           ENDIF
0BC59                           IFDEF PLAYER_STUFF
0BC59 32 34 33 35               	.db $32,$34,$33,$35 ; $30; spout left
0BC5D                           ENDIF
0BC5D                           
0BC5D                           IFNDEF PLAYER_STUFF
0BC5D                           	.db $68,$6A,$69,$6B ; $34
0BC5D                           ENDIF
0BC5D                           IFDEF PLAYER_STUFF
0BC5D 36 38 37 39               	.db $36,$38,$37,$39 ; $34 ; spout 2
0BC61                           ENDIF
0BC61 FA 6C FA 6C               	.db $FA,$6C,$FA,$6C ; $38
0BC65 6D FA 6D FA               	.db $6D,$FA,$6D,$FA ; $3C
0BC69 92 93 93 92               	.db $92,$93,$93,$92 ; $40
0BC6D AE AF AE AF               	.db $AE,$AF,$AE,$AF ; $44
0BC71 78 7A 79 7B               	.db $78,$7A,$79,$7B ; $48
0BC75 A8 A8 AF AE               	.db $A8,$A8,$AF,$AE ; $4C
0BC79 94 95 94 95               	.db $94,$95,$94,$95 ; $50
0BC7D 96 97 96 97               	.db $96,$97,$96,$97 ; $54
0BC81 22 24 23 25               	.db $22,$24,$23,$25 ; $58
0BC85 92 93 93 92               	.db $92,$93,$93,$92 ; $5C
0BC89 50 51 50 51               	.db $50,$51,$50,$51 ; $60
0BC8D AE AF AE AF               	.db $AE,$AF,$AE,$AF ; $64
0BC91 50 51 50 51               	.db $50,$51,$50,$51 ; $68
0BC95 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $6C
0BC99 72 73 73 72               	.db $72,$73,$73,$72 ; $70
0BC9D 50 52 51 53               	.db $50,$52,$51,$53 ; $74
0BCA1 FD FD FD FD               	.db $FD,$FD,$FD,$FD ; $78
0BCA5 FB 36 36 4F               	.db $FB,$36,$36,$4F ; $7C
0BCA9 4F 4E 4E 4F               	.db $4F,$4E,$4E,$4F ; $80
0BCAD 4E 4F 4F 4E               	.db $4E,$4F,$4F,$4E ; $84
0BCB1 92 93 93 92               	.db $92,$93,$93,$92 ; $88
0BCB5 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $8C
0BCB9 44 45 45 44               	.db $44,$45,$45,$44 ; $90
0BCBD 4F 37 4E FE               	.db $4F,$37,$4E,$FE ; $94
0BCC1 4F 3A 4E FE               	.db $4F,$3A,$4E,$FE ; $98
0BCC5 4F 4E 37 38               	.db $4F,$4E,$37,$38 ; $9C
0BCC9 4A 4B FE FE               	.db $4A,$4B,$FE,$FE ; $A0
0BCCD 72 73 4A 4B               	.db $72,$73,$4A,$4B ; $A4
0BCD1 40 42 41 43               	.db $40,$42,$41,$43 ; $A8
0BCD5 41 43 41 43               	.db $41,$43,$41,$43 ; $AC
0BCD9                           IFDEF HOT_SPOTS
0BCD9 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $58 // normal block
0BCDD F0 F0 F1 F1               	.db $F0,$F0,$F1,$F1 ; $68 // power block
0BCE1 8E F4 8F F5               	.db $8E,$F4,$8F,$F5 ; $AC // lock trasure AB
0BCE5 80 82 84 86               	.db $80,$82,$84,$86 ; $AC // trasure AC
0BCE9                           ENDIF
0BCE9                           IFDEF EXPAND_TABLES
0BCE9                           	unusedSpace TileQuads3 + $100, $FC
0BCE9                           ENDIF
0BCE9                           TileQuads4:
0BCE9 40 42 41 43               	.db $40,$42,$41,$43 ; $00
0BCED 40 42 41 43               	.db $40,$42,$41,$43 ; $04
0BCF1 BA BC BB BD               	.db $BA,$BC,$BB,$BD ; $08
0BCF5 BA BC 90 91               	.db $BA,$BC,$90,$91 ; $0C
0BCF9 FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $10
0BCFD FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $14
0BD01 FD FD FD FD               	.db $FD,$FD,$FD,$FD ; $18
0BD05 61 63 61 63               	.db $61,$63,$61,$63 ; $1C
0BD09 65 63 65 63               	.db $65,$63,$65,$63 ; $20
0BD0D 65 67 65 67               	.db $65,$67,$65,$67 ; $24
0BD11                           IFNDEF PLAYER_STUFF
0BD11                           	.db $60,$62,$61,$63 ; $28; cork
0BD11                           	.db $32,$34,$33,$35 ; $2C
0BD11                           ENDIF
0BD11                           IFDEF PLAYER_STUFF
0BD11 60 62 61 63               	.db $60,$62,$61,$63 ; $28; cork NOT
0BD15 60 62 61 63               	.db $60,$62,$61,$63 ; $2C
0BD19                           ENDIF
0BD19 64 62 65 63               	.db $64,$62,$65,$63 ; $30
0BD1D                           IFDEF PLAYER_STUFF
0BD1D 64 62 65 63               	.db $64,$62,$65,$63 ; $34 ;; center mush top
0BD21                           ENDIF
0BD21                           IFNDEF PLAYER_STUFF
0BD21                           	.db $36,$34,$37,$35 ; $34 ;; center mush top
0BD21                           ENDIF
0BD21 64 66 65 67               	.db $64,$66,$65,$67 ; $38
0BD25                           IFDEF PLAYER_STUFF
0BD25 64 66 65 67               	.db $64,$66,$65,$67 ; $3C
0BD29                           ENDIF
0BD29                           IFNDEF PLAYER_STUFF
0BD29                           	.db $36,$38,$37,$39 ; $3C
0BD29                           ENDIF
0BD29 68 62 61 63               	.db $68,$62,$61,$63 ; $40
0BD2D 64 69 65 67               	.db $64,$69,$65,$67 ; $44
0BD31 46 62 61 63               	.db $46,$62,$61,$63 ; $48
0BD35 64 47 65 67               	.db $64,$47,$65,$67 ; $4C
0BD39 BA BC BB BD               	.db $BA,$BC,$BB,$BD ; $50
0BD3D 70 72 71 73               	.db $70,$72,$71,$73 ; $54
0BD41 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $58
0BD45 72 73 73 72               	.db $72,$73,$73,$72 ; $5C
0BD49 44 45 45 44               	.db $44,$45,$45,$44 ; $60
0BD4D                           IFDEF PLAYER_STUFF
0BD4D 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $58 // normal block
0BD51 F0 F0 F1 F1               	.db $F0,$F0,$F1,$F1 ; $68 // power block
0BD55 8E F4 8F F5               	.db $8E,$F4,$8F,$F5 ; $AC // lock trasure d8
0BD59 80 82 84 86               	.db $80,$82,$84,$86 ; $AC // trasure d9
0BD5D                           ENDIF
0BD5D                           IFDEF EXPAND_TABLES
0BD5D                           	unusedSpace TileQuads4 + $100, $FC
0BD5D                           ENDIF
0BD5D                           ENDIF
0BD5D FF FF FF FF FF FF FF FF.. .pad $c000, $ff
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; Banks 2 and 3. Enemy/object code.
0C000                           .base $8000
08000                           .include "src/prg-2-3.asm"
08000                           ;
08000                           ; Bank 2 & Bank 3
08000                           ; ===============
08000                           ;
08000                           ; What's inside:
08000                           ;
08000                           ;   - Enemy initialization and logic
08000                           ;
08000                           
08000                           CarryYOffsets:
08000                           CarryYOffsetBigLo:
08000 FA                        	.db $FA ; Mario
08001 F6                        	.db $F6 ; Princess
08002 FC                        	.db $FC ; Toad
08003 F7                        	.db $F7 ; Luigi
08004                           
08004                           CarryYOffsetBigHi:
08004 FF                        	.db $FF ; Mario
08005 FF                        	.db $FF ; Princess
08006 FF                        	.db $FF ; Toad
08007 FF                        	.db $FF ; Luigi
08008                           
08008                           CarryYOffsetSmallLo:
08008 02                        	.db $02 ; Mario
08009 FE                        	.db $FE ; Princess
0800A 04                        	.db $04 ; Toad
0800B FF                        	.db $FF ; Luigi
0800C                           
0800C                           CarryYOffsetSmallHi:
0800C 00                        	.db $00 ; Mario
0800D FF                        	.db $FF ; Princess
0800E 00                        	.db $00 ; Toad
0800F FF                        	.db $FF ; Luigi
08010                           
08010                           
08010                           AreaMainRoutine:
08010 AD 27 06                  	LDA DoAreaTransition
08013 F0 01                     	BEQ AreaMainRoutine_NoTransition
08015 60                        	RTS
08016                           
08016                           AreaMainRoutine_NoTransition:
08016 AD AE 04                  	LDA AreaInitialized
08019 F0 03                     	BEQ AreaInitialization
0801B                           
0801B 4C B3 81                  	JMP loc_BANK2_816C
0801E                           
0801E                           ; ---------------------------------------------------------------------------
0801E                           
0801E                           AreaInitialization:
0801E EE AE 04                  	INC AreaInitialized
08021 8D BA 05                  	STA byte_RAM_5BA
08024 8D C4 04                  	STA POWQuakeTimer
08027 8D C6 04                  	STA SkyFlashTimer
0802A 8D B5 04                  	STA CrystalAndHawkmouthOpenSize
0802D 8D B4 04                  	STA HawkmouthClosing
08030 8D B9 04                  	STA SwarmType
08033 8D B6 04                  	STA HawkmouthOpenTimer
08036 8D FA 04                  	STA ScrollXLock
08039 8D 25 04                  	STA VerticalScrollDirection
0803C 85 3C                     	STA PlayerXVelocity
0803E 85 85                     	STA DamageInvulnTime
08040 85 9C                     	STA HoldingItem
08042 85 82                     	STA PlayerStateTimer
08044 8D C5 04                  	STA BackgroundYOffset
08047 8D FD 04                  	STA PokeyTempScreenX
0804A 8D CA 04                  	STA CrouchJumpTimer
0804D 8D C9 04                  	STA JumpFloatTimer
08050 8D DF 04                  	STA QuicksandDepth
08053 8D B8 04                  	STA BossBeaten
08056                           
08056                           IFDEF RANDOMIZER_T
08056 8D 21 06                      STA SubspaceVisits
08059 AD 34 05                      LDA TransitionType
0805C C9 04                         CMP #TransitionType_SubSpace
0805E F0 05                         BEQ +
08060 A9 10                         LDA #$10
08062 8D B1 04                      STA AreaTransitioned_Invuln
08065                           +
08065                           ENDIF 
08065                           IFDEF FLAGSET
08065 8A                            TXA
08066 48                            PHA
08067 A2 80                         LDX #CustomBitFlag_Crystal
08069 20 4E F1                      JSR ChkFlagLevel
0806C D0 03                         BNE +
0806E EE B5 04                      INC CrystalAndHawkmouthOpenSize
08071 A2 20                     +   LDX #CustomBitFlag_Sub2
08073 20 4E F1                      JSR ChkFlagLevel 
08076 D0 05                         BNE +
08078 A9 02                         LDA #2
0807A 8D 21 06                      STA SubspaceVisits
0807D 68                        +   PLA
0807E AA                            TAX
0807F                           ENDIF
0807F A0 1B                     	LDY #$1B
08081                           AreaInitialization_CarryYOffsetLoop:
08081                           	; Copy the global carrying Y offsets to memory
08081                           	; These are used for every character for different frames of the pickup animation
08081 B9 86 BC                  	LDA ItemCarryYOffsets, Y
08084 99 00 7F                  	STA ItemCarryYOffsetsRAM, Y
08087 88                        	DEY
08088 10 F7                     	BPL AreaInitialization_CarryYOffsetLoop
0808A                           
0808A                           IFDEF CONTROLLER_2_DEBUG
0808A                           	JSR CopyCarryYOffsets
0808A                           ENDIF
0808A                           
0808A                           	; Copy the character-specific FINAL carrying heights into memory
0808A A4 8F                     	LDY CurrentCharacter
0808C B9 00 80                  	LDA CarryYOffsetBigLo, Y
0808F 8D 00 7F                  	STA ItemCarryYOffsetsRAM
08092 B9 08 80                  	LDA CarryYOffsetSmallLo, Y
08095 8D 07 7F                  	STA ItemCarryYOffsetsRAM + $07
08098 B9 04 80                  	LDA CarryYOffsetBigHi, Y
0809B 8D 0E 7F                  	STA ItemCarryYOffsetsRAM + $0E
0809E B9 0C 80                  	LDA CarryYOffsetSmallHi, Y
080A1 8D 15 7F                  	STA ItemCarryYOffsetsRAM + $15
080A4                           
080A4 A9 B6                     	LDA #$B6
080A6 8D AC 05                  	STA PseudoRNGValues
080A9 AD 34 05                  	LDA TransitionType
080AC                           
080AC                           	; Play the slide-whistle when you start the game and drop into 1-1
080AC 0D 31 05                  	ORA CurrentLevel
080AF D0 05                     	BNE AreaInitialization_CheckObjectCarriedOver
080B1                           
080B1 A9 10                     	LDA #SoundEffect2_IntroFallSlide
080B3 8D 04 06                  	STA SoundEffectQueue2
080B6                           
080B6                           AreaInitialization_CheckObjectCarriedOver:
080B6 AD AF 04                  	LDA ObjectCarriedOver
080B9                           IFNDEF PLAYER_STUFF
080B9                           	BEQ AreaInitialization_SetEnemyData
080B9                           ENDIF
080B9                           IFDEF PLAYER_STUFF
080B9 F0 4A                     	BEQ Player_CurseCheck
080BB                           ENDIF
080BB                               
080BB                           
080BB A2 05                     	LDX #$05
080BD 86 12                     	STX byte_RAM_12
080BF C9 3F                     	CMP #Enemy_Mushroom
080C1                           IFDEF PLAYER_STUFF
080C1 F0 42                     	BEQ Player_CurseCheck
080C3                           ENDIF
080C3                           IFNDEF PLAYER_STUFF
080C3                           	BEQ AreaInitialization_SetEnemyData
080C3                           ENDIF
080C3                           
080C3 95 90                     	STA ObjectType, X
080C5 A0 01                     	LDY #EnemyState_Alive
080C7 84 56                     	STY EnemyState + 5
080C9 A0 FF                     	LDY #$FF
080CB 8C 46 04                  	STY unk_RAM_441 + 5
080CE C9 38                     	CMP #Enemy_Rocket
080D0 D0 1E                     	BNE AreaInitialization_NonRocketCarryOver
080D2                           
080D2                           AreaInitialization_Rocket:
080D2                           	; A = $38 (Enemy_Rocket)
080D2                           	; X = $05 (from above)
080D2 95 B1                     	STA EnemyArray_B1, X
080D4                           IFNDEF PLAYER_STUFF
080D4                           	STA PlayerInRocket, X ; Bug? This sets ObjectXAcceleration for enemy 0
080D4                           ENDIF
080D4                           IFDEF PLAYER_STUFF
080D4 8D C7 04                  	STA PlayerInRocket 
080D7                           ENDIF
080D7 9D 77 04                  	STA EnemyArray_477, X
080DA A9 00                     	LDA #$00
080DC 95 15                     	STA ObjectXHi, X
080DE 95 1F                     	STA ObjectYHi, X
080E0 20 B0 84                  	JSR SetEnemyAttributes
080E3                           
080E3 A9 F0                     	LDA #$F0
080E5 95 47                     	STA ObjectYVelocity, X
080E7 0A                        	ASL A
080E8 95 33                     	STA ObjectYLo, X
080EA A9 78                     	LDA #$78
080EC 95 29                     	STA ObjectXLo, X
080EE D0 5D                     	BNE AreaInitialization_SetEnemyData
080F0                           
080F0                           AreaInitialization_NonRocketCarryOver:
080F0 48                        	PHA
080F1 8E 2D 04                  	STX ObjectBeingCarriedIndex
080F4 20 CF 84                  	JSR EnemyInit_Basic
080F7                           
080F7 A9 01                     	LDA #$01
080F9 95 A8                     	STA ObjectBeingCarriedTimer, X
080FB 85 9C                     	STA HoldingItem
080FD 20 ED 97                  	JSR CarryObject
08100                           
08100 68                        	PLA
08101 C9 3D                     	CMP #Enemy_Key
08103                           IFNDEF PLAYER_STUFF
08103                           	BNE AreaInitialization_SetEnemyData
08103                           ENDIF
08103                           IFDEF PLAYER_STUFF
08103 F0 1E                     	BEQ AreaInitialization_KeyCarryOver_Normal
08105                           Player_CurseCheck:
08105 AD F4 76                      LDA StoredItem
08108 C9 3D                         CMP #Enemy_Key
0810A F0 12                     	BEQ AreaInitialization_KeyCarryOver
0810C AD EE 76                      LDA Player_CursedPersistence
0810F 8D ED 76                      STA Player_Cursed
08112 F0 05                         BEQ +
08114 30 03                         BMI +
08116 CE EE 76                      DEC Player_CursedPersistence
08119                           +
08119 AD ED 76                      LDA Player_Cursed
0811C F0 2F                         BEQ AreaInitialization_SetEnemyData ;; no curse, no go
0811E                           ENDIF
0811E                           AreaInitialization_KeyCarryOver:
0811E                           IFDEF PLAYER_STUFF
0811E A2 07                         LDX #7
08120 4C 28 81                      JMP +
08123                           AreaInitialization_KeyCarryOver_Normal:
08123 F6 79                     	INC EnemyVariable, X
08125 CA                        	DEX
08126 86 12                         STX byte_RAM_12
08128                           +
08128                           ENDIF
08128                           IFNDEF PLAYER_STUFF
08128                           	INC EnemyVariable, X
08128                           	DEX
08128                               STX byte_RAM_12
08128                           ENDIF
08128 A9 01                         LDA #EnemyState_Alive
0812A 95 51                     	STA EnemyState, X
0812C A9 17                     	LDA #Enemy_Phanto
0812E 95 90                     	STA ObjectType, X
08130 20 CF 84                  	JSR EnemyInit_Basic
08133                           
08133 A9 00                     	LDA #$00
08135 8D BC 05                  	STA PhantoActivateTimer
08138 A5 CB                     	LDA ScreenYLo
0813A 95 33                     	STA ObjectYLo, X
0813C A5 CA                     	LDA ScreenYHi
0813E 95 1F                     	STA ObjectYHi, X
08140 AD C0 04                  	LDA ScreenBoundaryLeftLo
08143 95 29                     	STA ObjectXLo, X
08145 AD BE 04                  	LDA ScreenBoundaryLeftHi
08148 95 15                     	STA ObjectXHi, X
0814A 20 EE 85                  	JSR UnlinkEnemyFromRawData
0814D                           
0814D                           AreaInitialization_SetEnemyData:
0814D A9 00                     	LDA #<RawEnemyDataAddr
0814F 85 CC                     	STA RawEnemyData
08151 A9 7B                     	LDA #>RawEnemyDataAddr
08153 85 CD                     	STA RawEnemyData + 1
08155 A5 EC                     	LDA IsHorizontalLevel
08157 D0 32                     	BNE AreaInitialization_HorizontalArea
08159                           
08159                           AreaInitialization_VerticalArea:
08159                           	; Loads area enemies based on the vertical screen scroll
08159 A9 14                     	LDA #$14
0815B 85 09                     	STA byte_RAM_9
0815D A5 CB                     	LDA ScreenYLo
0815F E9 30                     	SBC #$30
08161 29 F0                     	AND #$F0
08163 85 05                     	STA byte_RAM_5
08165 A5 CA                     	LDA ScreenYHi
08167 E9 00                     	SBC #$00
08169 85 06                     	STA byte_RAM_6
0816B                           
0816B                           loc_BANK2_8124:
0816B A5 06                     	LDA byte_RAM_6
0816D C9 0B                     	CMP #$0B
0816F B0 06                     	BCS loc_BANK2_8130
08171                           
08171 20 61 83                  	JSR loc_BANK2_8311
08174 20 61 83                  	JSR loc_BANK2_8311
08177                           
08177                           loc_BANK2_8130:
08177 20 7F 81                  	JSR sub_BANK2_8138
0817A                           
0817A C6 09                     	DEC byte_RAM_9
0817C 10 ED                     	BPL loc_BANK2_8124
0817E                           
0817E 60                        	RTS
0817F                           
0817F                           ; End of function AreaMainRoutine
0817F                           
0817F                           ; =============== S U B R O U T I N E =======================================
0817F                           
0817F                           sub_BANK2_8138:
0817F A5 05                     	LDA byte_RAM_5
08181 18                        	CLC
08182 69 10                     	ADC #$10
08184 85 05                     	STA byte_RAM_5
08186 90 02                     	BCC locret_BANK2_8143
08188                           
08188 E6 06                     	INC byte_RAM_6
0818A                           
0818A                           locret_BANK2_8143:
0818A 60                        	RTS
0818B                           
0818B                           ; End of function sub_BANK2_8138
0818B                           
0818B                           ; ---------------------------------------------------------------------------
0818B                           
0818B                           AreaInitialization_HorizontalArea:
0818B                           	; Loads area enemies based on the horizontal screen scroll
0818B AD C0 04                  	LDA ScreenBoundaryLeftLo
0818E E9 30                     	SBC #$30
08190 29 F0                     	AND #$F0
08192 85 05                     	STA byte_RAM_5
08194 AD BE 04                  	LDA ScreenBoundaryLeftHi
08197 E9 00                     	SBC #$00
08199 85 06                     	STA byte_RAM_6
0819B A9 17                     	LDA #$17
0819D 85 09                     	STA byte_RAM_9
0819F                           
0819F                           loc_BANK2_8158:
0819F A5 06                     	LDA byte_RAM_6
081A1 C9 0B                     	CMP #$B
081A3 B0 06                     	BCS loc_BANK2_8164
081A5                           
081A5 20 CD 82                  	JSR sub_BANK2_827D
081A8 20 CD 82                  	JSR sub_BANK2_827D
081AB                           
081AB                           loc_BANK2_8164:
081AB 20 7F 81                  	JSR sub_BANK2_8138
081AE                           
081AE C6 09                     	DEC byte_RAM_9
081B0 10 ED                     	BPL loc_BANK2_8158
081B2                           
081B2 60                        	RTS
081B3                           
081B3                           ; ---------------------------------------------------------------------------
081B3                           
081B3                           loc_BANK2_816C:
081B3 20 A6 82                  	JSR loc_BANK2_8256
081B6                           
081B6 AD FF 04                  	LDA StopwatchTimer
081B9 F0 11                     	BEQ loc_BANK2_8185
081BB                           
081BB A5 10                     	LDA byte_RAM_10
081BD 29 1F                     	AND #$1F
081BF D0 05                     	BNE loc_BANK2_817F
081C1                           
081C1 A0 40                     	LDY #SoundEffect1_StopwatchTick
081C3 8C 02 06                  	STY SoundEffectQueue1
081C6                           
081C6                           loc_BANK2_817F:
081C6 4A                        	LSR A
081C7 90 03                     	BCC loc_BANK2_8185
081C9                           
081C9 CE FF 04                  	DEC StopwatchTimer
081CC                           
081CC                           loc_BANK2_8185:
081CC AD C0 04                  	LDA ScreenBoundaryLeftLo
081CF 18                        	CLC
081D0 69 FF                     	ADC #$FF
081D2 8D C1 04                  	STA ScreenBoundaryRightLo
081D5 AD BE 04                  	LDA ScreenBoundaryLeftHi
081D8 69 00                     	ADC #$00
081DA 8D BF 04                  	STA ScreenBoundaryRightHi
081DD A2 08                     	LDX #$08
081DF                           
081DF                           loc_BANK2_8198:
081DF 86 12                     	STX byte_RAM_12
081E1 8A                        	TXA
081E2 18                        	CLC
081E3 6D 00 04                  	ADC SpriteFlickerSlot
081E6 A8                        	TAY
081E7                           
081E7                           loc_BANK2_81A0:
081E7 B9 08 F8                  	LDA byte_BANKF_F4DA, Y
081EA B4 A8                     	LDY ObjectBeingCarriedTimer, X
081EC F0 0A                     	BEQ loc_BANK2_81B1
081EE                           
081EE A9 10                     	LDA #Enemy_BeezoStraight
081F0 B4 90                     	LDY ObjectType, X
081F2 C9 38                     	CMP #Enemy_Rocket
081F4 D0 02                     	BNE loc_BANK2_81B1
081F6                           
081F6 A9 00                     	LDA #$00
081F8                           
081F8                           loc_BANK2_81B1:
081F8 85 F4                     	STA byte_RAM_F4
081FA B5 51                     	LDA EnemyState, X
081FC C9 02                     	CMP #EnemyState_Dead
081FE B0 0B                     	BCS loc_BANK2_81C4
08200                           
08200 B5 90                     	LDA ObjectType, X
08202 C9 32                     	CMP #Enemy_VegetableSmall
08204 B0 05                     	BCS loc_BANK2_81C4
08206                           
08206 AD FF 04                  	LDA StopwatchTimer
08209 D0 0E                     	BNE loc_BANK2_81D2
0820B                           
0820B                           loc_BANK2_81C4:
0820B B5 86                     	LDA EnemyTimer, X
0820D F0 02                     	BEQ loc_BANK2_81CA
0820F                           
0820F D6 86                     	DEC EnemyTimer, X
08211                           
08211                           loc_BANK2_81CA:
08211 BD 53 04                  	LDA EnemyArray_453, X
08214 F0 03                     	BEQ loc_BANK2_81D2
08216                           
08216 DE 53 04                  	DEC EnemyArray_453, X
08219                           
08219                           loc_BANK2_81D2:
08219 BD 5C 04                  	LDA EnemyArray_45C, X
0821C                           
0821C                           loc_BANK2_81D5:
0821C F0 03                     	BEQ loc_BANK2_81DA
0821E                           
0821E DE 5C 04                  	DEC EnemyArray_45C, X
08221                           
08221                           loc_BANK2_81DA:
08221 BD 38 04                  	LDA EnemyArray_438, X
08224 F0 08                     	BEQ loc_BANK2_81E7
08226                           
08226 A5 10                     	LDA byte_RAM_10
08228 4A                        	LSR A
08229 90 03                     	BCC loc_BANK2_81E7
0822B                           
0822B DE 38 04                  	DEC EnemyArray_438, X
0822E                           
0822E                           loc_BANK2_81E7:
0822E 20 5C 82                  	JSR DoPRNGBullshitProbably
08231                           
08231 20 20 9D                  	JSR PutCarriedObjectInHands
08234                           
08234 20 8B 82                  	JSR HandleEnemyState
08237                           
08237 A6 12                     	LDX byte_RAM_12
08239 CA                        	DEX
0823A 10 A3                     	BPL loc_BANK2_8198
0823C                           
0823C AD B9 04                  	LDA SwarmType
0823F                           IFDEF PLAYER_STUFF
0823F F0 13                     	BEQ Swarm_RTS
08241                           ENDIF
08241                           IFNDEF PLAYER_STUFF
08241                           	BEQ HandleEnemyState_Inactive
08241                           ENDIF
08241                           
08241 38                        	SEC
08242 E9 47                     	SBC #Enemy_AttackAlbatossCarryingBobOmb
08244                           
08244 20 A6 D9                  	JSR JumpToTableAfterJump
08247                           
08247                           ; ---------------------------------------------------------------------------
08247 EC 8B                     	.dw Swarm_AlbatossCarryingBobOmb
08249 18 8C                     	.dw Swarm_BeezoDiving
0824B 4F 82                     	.dw Swarm_Stop
0824D FB B2                     	.dw Generator_VegetableThrower
0824F                           
0824F                           ; =============== S U B R O U T I N E =======================================
0824F                           
0824F                           Swarm_Stop:
0824F A9 00                     	LDA #$00
08251 8D B9 04                  	STA SwarmType
08254                           
08254                           IFDEF PLAYER_STUFF
08254                           Swarm_RTS:
08254 60                            RTS
08255                           ENDIF
08255                           
08255                           IFNDEF PLAYER_STUFF
08255                           HandleEnemyState_Inactive:
08255                           	RTS
08255                           ENDIF
08255                           
08255                           IFDEF PLAYER_STUFF
08255                           HandleEnemyState_Inactive: ;; should only do this once somewhere else...
08255 A9 0A                         LDA #$0a
08257 95 15                         STA ObjectXHi, X
08259 95 1F                         STA ObjectYHi, X
0825B 60                        	RTS
0825C                           ENDIF
0825C                           
0825C                           ; End of function Swarm_Stop
0825C                           
0825C                           ; =============== S U B R O U T I N E =======================================
0825C                           
0825C                           ; I am very good at figuring out what things do. Yes.
0825C                           
0825C                           DoPRNGBullshitProbably:
0825C A0 00                     	LDY #$00
0825E 20 62 82                  	JSR sub_BANK2_8214
08261                           
08261 C8                        	INY
08262                           
08262                           ; End of function DoPRNGBullshitProbably
08262                           
08262                           ; =============== S U B R O U T I N E =======================================
08262                           
08262                           sub_BANK2_8214:
08262 AD AC 05                  	LDA PseudoRNGValues
08265 0A                        	ASL A
08266 0A                        	ASL A
08267 38                        	SEC
08268 6D AC 05                  	ADC PseudoRNGValues
0826B 8D AC 05                  	STA PseudoRNGValues
0826E 0E AD 05                  	ASL PseudoRNGValues + 1
08271 A9 20                     	LDA #$20
08273 2C AD 05                  	BIT PseudoRNGValues + 1
08276 90 04                     	BCC loc_BANK2_822E
08278                           
08278 F0 07                     	BEQ loc_BANK2_8233
0827A                           
0827A D0 02                     	BNE loc_BANK2_8230
0827C                           
0827C                           loc_BANK2_822E:
0827C D0 03                     	BNE loc_BANK2_8233
0827E                           
0827E                           loc_BANK2_8230:
0827E EE AD 05                  	INC PseudoRNGValues + 1
08281                           
08281                           loc_BANK2_8233:
08281 AD AD 05                  	LDA PseudoRNGValues + 1
08284 4D AC 05                  	EOR PseudoRNGValues
08287 99 AE 05                  	STA PseudoRNGValues + 2, Y
0828A 60                        	RTS
0828B                           
0828B                           ; End of function sub_BANK2_8214
0828B                           
0828B                           ; ---------------------------------------------------------------------------
0828B                           
0828B                           HandleEnemyState:
0828B B5 51                     	LDA EnemyState, X
0828D 20 A6 D9                  	JSR JumpToTableAfterJump
08290                           
08290 55 82                     	.dw HandleEnemyState_Inactive ; 0 (not active)
08292 3D 8A                     	.dw HandleEnemyState_Alive ; Alive
08294 74 85                     	.dw HandleEnemyState_Dead ; Dead
08296 14 86                     	.dw HandleEnemyState_BlockFizzle ; Block fizzle
08298 7C 86                     	.dw HandleEnemyState_BombExploding ; Bomb exploding
0829A 29 88                     	.dw HandleEnemyState_PuffOfSmoke ; Puff of smoke
0829C E8 88                     	.dw HandleEnemyState_Sand ; Sand after digging
0829E 37 86                     	.dw loc_BANK2_85B2 ; Object carried/thrown?
082A0                           IFDEF PLAYER_STUFF
082A0 BB E7                     	.dw HandleEnemyState_Frozen ; Alive
082A2                           EnemyState_Frozen = $8
082A2                           ENDIF
082A2                           
082A2                           
082A2                           
082A2                           
082A2                           byte_BANK2_8252:
082A2 18                        	.db $18
082A3 E0                        	.db $E0
082A4 01                        	.db $01
082A5 FF                        	.db $FF
082A6                           
082A6                           
082A6                           loc_BANK2_8256:
082A6 AD B8 04                  	LDA BossBeaten
082A9 D0 50                     	BNE locret_BANK2_82AB
082AB                           
082AB A5 EC                     	LDA IsHorizontalLevel
082AD 20 A6 D9                  	JSR JumpToTableAfterJump
082B0                           
082B0 3D 83                     	.dw loc_BANK2_82ED ; vertical
082B2 B4 82                     	.dw loc_BANK2_8264 ; horizontal
082B4                           
082B4                           
082B4                           loc_BANK2_8264: ;; enemy spawn on column/row
082B4 A4 6E                     	LDY PlayerMovementDirection
082B6 AD C0 04                  	LDA ScreenBoundaryLeftLo
082B9 18                        	CLC
082BA 79 A1 82                  	ADC byte_BANK2_8252 - 1, Y ;; table 
082BD 29 F0                     	AND #$F0
082BF 85 05                     	STA byte_RAM_5
082C1 AD BE 04                  	LDA ScreenBoundaryLeftHi
082C4 79 A3 82                  	ADC byte_BANK2_8252 + 1, Y
082C7 85 06                     	STA byte_RAM_6
082C9 C9 0A                     	CMP #$0A
082CB B0 2E                     	BCS locret_BANK2_82AB
082CD                           
082CD                           ; =============== S U B R O U T I N E =======================================
082CD                           
082CD                           sub_BANK2_827D:
082CD AD 28 06                  	LDA InSubspaceOrJar
082D0 C9 02                     	CMP #$02
082D2 F0 27                     	BEQ locret_BANK2_82AB
082D4                           
082D4 A2 00                     	LDX #$00
082D6 86 00                     	STX byte_RAM_0
082D8                           
082D8                           loc_BANK2_8288:
082D8 E4 06                     	CPX byte_RAM_6
082DA F0 0C                     	BEQ loc_BANK2_8298
082DC                           
082DC A5 00                     	LDA byte_RAM_0
082DE A8                        	TAY
082DF 18                        	CLC
082E0 71 CC                     	ADC (RawEnemyData), Y
082E2 85 00                     	STA byte_RAM_0
082E4 E8                        	INX
082E5 4C D8 82                  	JMP loc_BANK2_8288
082E8                           
082E8                           ; ---------------------------------------------------------------------------
082E8                           
082E8                           loc_BANK2_8298:
082E8 A4 00                     	LDY byte_RAM_0
082EA B1 CC                     	LDA (RawEnemyData), Y
082EC 85 01                     	STA byte_RAM_1
082EE A2 FF                     	LDX #$FF
082F0 88                        	DEY
082F1                           
082F1                           loc_BANK2_82A1:
082F1 C8                        	INY
082F2 C8                        	INY
082F3 E8                        	INX
082F4 E8                        	INX
082F5 E4 01                     	CPX byte_RAM_1
082F7 90 03                     	BCC loc_BANK2_82AC
082F9                           
082F9 A6 12                     	LDX byte_RAM_12
082FB                           
082FB                           locret_BANK2_82AB:
082FB 60                        	RTS
082FC                           
082FC                           ; ---------------------------------------------------------------------------
082FC                           
082FC                           loc_BANK2_82AC:
082FC B1 CC                     	LDA (RawEnemyData), Y
082FE 30 F1                     	BMI loc_BANK2_82A1
08300                           
08300 C8                        	INY
08301 B1 CC                     	LDA (RawEnemyData), Y
08303 88                        	DEY
08304                           
08304 29 F0                     	AND #$F0
08306 C5 05                     	CMP byte_RAM_5
08308 D0 E7                     	BNE loc_BANK2_82A1
0830A                           
0830A B1 CC                     	LDA (RawEnemyData), Y
0830C C9 5C                     	CMP #Enemy_BossBirdo
0830E B0 08                     	BCS loc_BANK2_82C8
08310                           
08310 C9 47                     	CMP #Enemy_AttackAlbatossCarryingBobOmb
08312 90 04                     	BCC loc_BANK2_82C8
08314                           
08314 8D B9 04                  	STA SwarmType
08317 60                        	RTS
08318                           
08318                           ; ---------------------------------------------------------------------------
08318                           
08318                           loc_BANK2_82C8:
08318 A2 04                     	LDX #$04
0831A                           loc_BANK2_82CA:
0831A B5 51                     	LDA EnemyState, X
0831C F0 04                     	BEQ loc_BANK2_82D2
0831E                           
0831E CA                        	DEX
0831F 10 F9                     	BPL loc_BANK2_82CA
08321                           
08321 60                        	RTS
08322                           
08322                           ; ---------------------------------------------------------------------------
08322                           
08322                           loc_BANK2_82D2:
08322 86 12                     	STX byte_RAM_12
08324 A5 05                     	LDA byte_RAM_5
08326 95 29                     	STA ObjectXLo, X
08328 A5 06                     	LDA byte_RAM_6
0832A 95 15                     	STA ObjectXHi, X
0832C C8                        	INY
0832D B1 CC                     	LDA (RawEnemyData), Y
0832F 88                        	DEY
08330 0A                        	ASL A
08331 0A                        	ASL A
08332 0A                        	ASL A
08333 0A                        	ASL A
08334 95 33                     	STA ObjectYLo, X
08336 A9 00                     	LDA #$00
08338 95 1F                     	STA ObjectYHi, X
0833A 4C C7 83                  	JMP loc_BANK2_8377
0833D                           
0833D                           ; End of function sub_BANK2_827D
0833D                           
0833D                           ; ---------------------------------------------------------------------------
0833D                           
0833D                           loc_BANK2_82ED:
0833D A5 10                     	LDA byte_RAM_10
0833F 29 01                     	AND #$01
08341 A8                        	TAY
08342 C8                        	INY
08343 A5 D8                     	LDA NeedVerticalScroll
08345 F0 05                     	BEQ loc_BANK2_82FC
08347                           
08347 29 03                     	AND #$03
08349 49 03                     	EOR #$03
0834B A8                        	TAY
0834C                           
0834C                           loc_BANK2_82FC:
0834C A5 CB                     	LDA ScreenYLo
0834E 18                        	CLC
0834F 79 A1 82                  	ADC byte_BANK2_8252 - 1, Y
08352 29 F0                     	AND #$F0
08354 85 05                     	STA byte_RAM_5
08356 A5 CA                     	LDA ScreenYHi
08358 79 A3 82                  	ADC byte_BANK2_8252 + 1, Y
0835B 85 06                     	STA byte_RAM_6
0835D C9 0A                     	CMP #$A
0835F                           
0835F                           loc_BANK2_830F:
0835F B0 9A                     	BCS locret_BANK2_82AB
08361                           
08361                           loc_BANK2_8311:
08361 A2 00                     	LDX #$00
08363 86 00                     	STX byte_RAM_0
08365                           
08365                           loc_BANK2_8315:
08365 E4 06                     	CPX byte_RAM_6
08367 F0 0C                     	BEQ loc_BANK2_8325
08369                           
08369 A5 00                     	LDA byte_RAM_0
0836B A8                        	TAY
0836C 18                        	CLC
0836D 71 CC                     	ADC (RawEnemyData), Y
0836F 85 00                     	STA byte_RAM_0
08371 E8                        	INX
08372 4C 65 83                  	JMP loc_BANK2_8315
08375                           
08375                           ; ---------------------------------------------------------------------------
08375                           
08375                           loc_BANK2_8325:
08375 A4 00                     	LDY byte_RAM_0
08377                           
08377                           loc_BANK2_8327:
08377 B1 CC                     	LDA (RawEnemyData), Y
08379 85 01                     	STA byte_RAM_1
0837B A2 FF                     	LDX #$FF
0837D 88                        	DEY
0837E                           
0837E                           loc_BANK2_832E:
0837E C8                        	INY
0837F C8                        	INY
08380 E8                        	INX
08381 E8                        	INX
08382 E4 01                     	CPX byte_RAM_1
08384 90 03                     	BCC loc_BANK2_8339
08386                           
08386 A6 12                     	LDX byte_RAM_12
08388                           
08388                           locret_BANK2_8338:
08388 60                        	RTS
08389                           
08389                           ; ---------------------------------------------------------------------------
08389                           
08389                           loc_BANK2_8339:
08389 B1 CC                     	LDA (RawEnemyData), Y
0838B 30 F1                     	BMI loc_BANK2_832E
0838D                           
0838D C8                        	INY
0838E B1 CC                     	LDA (RawEnemyData), Y
08390 88                        	DEY
08391 0A                        	ASL A
08392 0A                        	ASL A
08393 0A                        	ASL A
08394 0A                        	ASL A
08395 C5 05                     	CMP byte_RAM_5
08397 D0 E5                     	BNE loc_BANK2_832E
08399                           
08399 B1 CC                     	LDA (RawEnemyData), Y
0839B C9 5C                     	CMP #Enemy_BossBirdo
0839D B0 08                     	BCS loc_BANK2_8357
0839F                           
0839F C9 47                     	CMP #Enemy_AttackAlbatossCarryingBobOmb
083A1 90 04                     	BCC loc_BANK2_8357
083A3                           
083A3 8D B9 04                  	STA SwarmType
083A6 60                        	RTS
083A7                           
083A7                           ; ---------------------------------------------------------------------------
083A7                           
083A7                           loc_BANK2_8357:
083A7 A2 04                     	LDX #$04
083A9                           loc_BANK2_8359:
083A9 B5 51                     	LDA EnemyState, X
083AB F0 04                     	BEQ loc_BANK2_8361
083AD                           
083AD CA                        	DEX
083AE 10 F9                     	BPL loc_BANK2_8359
083B0                           
083B0 60                        	RTS
083B1                           
083B1                           ; ---------------------------------------------------------------------------
083B1                           
083B1                           loc_BANK2_8361:
083B1 86 12                     	STX byte_RAM_12
083B3 A5 05                     	LDA byte_RAM_5
083B5 95 33                     	STA ObjectYLo, X
083B7 A5 06                     	LDA byte_RAM_6
083B9 95 1F                     	STA ObjectYHi, X
083BB C8                        	INY
083BC B1 CC                     	LDA (RawEnemyData), Y
083BE 88                        	DEY
083BF 29 F0                     	AND #$F0
083C1 95 29                     	STA ObjectXLo, X
083C3 A9 00                     	LDA #$00
083C5 95 15                     	STA ObjectXHi, X
083C7                           
083C7                           loc_BANK2_8377:
083C7 9D 9B 04                  	STA unk_RAM_49B, X
083CA 84 0C                     	STY byte_RAM_C
083CC B1 CC                     	LDA (RawEnemyData), Y
083CE 29 3F                     	AND #$3F
083D0 C9 32                     	CMP #$32
083D2 B0 0F                     	BCS loc_BANK2_8393
083D4                           
083D4 A5 EC                     	LDA IsHorizontalLevel
083D6 F0 0B                     	BEQ loc_BANK2_8393
083D8                           
083D8 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
083DB                           
083DB A5 0F                     	LDA byte_RAM_F
083DD 69 18                     	ADC #$18
083DF C9 30                     	CMP #$30
083E1 90 A5                     	BCC locret_BANK2_8338
083E3                           
083E3                           loc_BANK2_8393:
083E3                           	; enable bit 7 of the raw enemy data to indicate that the enemy has spawned
083E3 A4 0C                     	LDY byte_RAM_C
083E5 B1 CC                     	LDA (RawEnemyData), Y
083E7 09 80                     	ORA #$80
083E9 91 CC                     	STA (RawEnemyData), Y
083EB                           
083EB C9 DC                     	CMP #$DC
083ED 29 7F                     	AND #$7F
083EF 90 05                     	BCC loc_BANK2_83A6
083F1                           
083F1 29 3F                     	AND #$3F
083F3 9D 9B 04                  	STA unk_RAM_49B, X
083F6                           
083F6                           loc_BANK2_83A6:
083F6 95 90                     	STA ObjectType, X
083F8 98                        	TYA
083F9 9D 41 04                  	STA unk_RAM_441, X
083FC F6 51                     	INC EnemyState, X
083FE                           IFDEF FLAGSET
083FE BD 9B 04                  	LDA unk_RAM_49B, X
08401 F0 1A                         BEQ ++
08403 20 BE AD                      JSR Set_CustomBossHp
08406 B5 15                     	LDA ObjectXHi, X
08408 9D EF 04                  	STA unk_RAM_4EF, X
0840B 8A                            TXA
0840C 48                            PHA
0840D A2 02                         LDX #CustomBitFlag_Boss_Defeated 
0840F 20 57 F1                      JSR ChkFlagWorld
08412 D0 07                         BNE +
08414 68                            PLA
08415 AA                            TAX
08416 F6 51                         INC EnemyState, X
08418 4C 1D 84                      JMP ++
0841B 68                        +   PLA
0841C AA                            TAX
0841D                           ++
0841D                               ;;hotspot location here (but what would it do)
0841D                           ENDIF
0841D B5 90                     	LDA ObjectType, X
0841F                           IFDEF HOT_SPOTS_UNUSED
0841F                               TYA
0841F                               PHA
0841F                               JSR HotSpotLookup
0841F                               STA EnemyHP, X
0841F                               PLA
0841F                               TAY
0841F                           	LDA ObjectType, X
0841F                           ENDIF
0841F                           IFDEF PLAYER_STUFF_EXTRA
0841F                               CMP #LastEnemySlot
0841F                               BCC +
0841F                               JMP EnemyTableInit2toA
0841F                           +
0841F                           ENDIF
0841F                           
0841F                           InitializeEnemy:
0841F 20 A6 D9                  	JSR JumpToTableAfterJump
08422                           
08422                           ; ---------------------------------------------------------------------------
08422                           EnemyInitializationTable:
08422 CF 84                     	.dw EnemyInit_Basic ; Heart
08424 CF 84                     	.dw EnemyInit_Basic ; ShyguyRed
08426 CF 84                     	.dw EnemyInit_Basic ; Tweeter
08428 CF 84                     	.dw EnemyInit_Basic ; ShyguyPink
0842A CF 84                     	.dw EnemyInit_Basic ; Porcupo
0842C CF 84                     	.dw EnemyInit_Basic ; SnifitRed
0842E 76 8E                     	.dw EnemyInit_Stationary ; SnifitGray
08430 CF 84                     	.dw EnemyInit_Basic ; SnifitPink
08432 CF 84                     	.dw EnemyInit_Basic ; Ostro
08434 6C 85                     	.dw EnemyInit_Bobomb ; BobOmb
08436 CF 84                     	.dw EnemyInit_Basic ; AlbatossCarryingBobOmb
08438 93 93                     	.dw EnemyInit_AlbatossStartRight ; AlbatossStartRight
0843A 8C 93                     	.dw EnemyInit_AlbatossStartLeft ; AlbatossStartLeft
0843C CF 84                     	.dw EnemyInit_Basic ; NinjiRunning
0843E 76 8E                     	.dw EnemyInit_Stationary ; NinjiJumping
08440 33 85                     	.dw EnemyInit_BeezoDiving ; BeezoDiving
08442 CF 84                     	.dw EnemyInit_Basic ; BeezoStraight
08444 CF 84                     	.dw EnemyInit_Basic ; WartBubble
08446 CF 84                     	.dw EnemyInit_Basic ; Pidgit
08448 A5 8F                     	.dw EnemyInit_Trouter ; Trouter
0844A CF 84                     	.dw EnemyInit_Basic ; Hoopstar
0844C 6E 8B                     	.dw EnemyInit_JarGenerators ; JarGeneratorShyguy
0844E 6E 8B                     	.dw EnemyInit_JarGenerators ; JarGeneratorBobOmb
08450 5F 85                     	.dw EnemyInit_Phanto ; Phanto
08452 35 AA                     	.dw EnemyInit_Cobrats ; CobratJar
08454 35 AA                     	.dw EnemyInit_Cobrats ; CobratSand
08456 57 AB                     	.dw EnemyInit_Pokey ; Pokey
08458 CF 84                     	.dw EnemyInit_Basic ; Bullet
0845A 94 90                     	.dw EnemyInit_Birdo ; Birdo
0845C A8 A6                     	.dw EnemyInit_Mouser ; Mouser
0845E CF 84                     	.dw EnemyInit_Basic ; Egg
08460 64 A8                     	.dw EnemyInit_Tryclyde ; Tryclyde
08462 CF 84                     	.dw EnemyInit_Basic ; Fireball
08464 44 A2                     	.dw EnemyInit_Clawgrip ; Clawgrip
08466 CF 84                     	.dw EnemyInit_Basic ; ClawgripRock
08468 76 8E                     	.dw EnemyInit_Stationary ; PanserStationaryFiresAngled
0846A CF 84                     	.dw EnemyInit_Basic ; PanserWalking
0846C 76 8E                     	.dw EnemyInit_Stationary ; PanserStationaryFiresUp
0846E CF 84                     	.dw EnemyInit_Basic ; Autobomb
08470 CF 84                     	.dw EnemyInit_Basic ; AutobombFire
08472 10 B0                     	.dw EnemyInit_WhaleSpout ; WhaleSpout
08474 CF 84                     	.dw EnemyInit_Basic ; Flurry
08476 A7 AD                     	.dw EnemyInit_Fryguy ; Fryguy
08478 A7 AD                     	.dw EnemyInit_Fryguy ; FryguySplit
0847A 48 B3                     	.dw EnemyInit_Wart ; Wart
0847C 49 B1                     	.dw EnemyInit_HawkmouthBoss ; HawkmouthBoss
0847E 7C 8B                     	.dw EnemyInit_Sparks ; Spark1
08480 7C 8B                     	.dw EnemyInit_Sparks ; Spark2
08482 7C 8B                     	.dw EnemyInit_Sparks ; Spark3
08484 7C 8B                     	.dw EnemyInit_Sparks ; Spark4
08486 CF 84                     	.dw EnemyInit_Basic ; VegetableSmall
08488 CF 84                     	.dw EnemyInit_Basic ; VegetableLarge
0848A CF 84                     	.dw EnemyInit_Basic ; VegetableWart
0848C CF 84                     	.dw EnemyInit_Basic ; Shell
0848E CF 84                     	.dw EnemyInit_Basic ; Coin
08490 CF 84                     	.dw EnemyInit_Basic ; Bomb
08492 CF 84                     	.dw EnemyInit_Basic ; Rocket
08494 CF 84                     	.dw EnemyInit_Basic ; MushroomBlock
08496 CF 84                     	.dw EnemyInit_Basic ; POWBlock
08498 01 9B                     	.dw EnemyInit_FallingLogs ; FallingLogs
0849A CF 84                     	.dw EnemyInit_Basic ; SubspaceDoor
0849C 59 8D                     	.dw EnemyInit_Key ; Key
0849E CF 84                     	.dw EnemyInit_Basic ; SubspacePotion
084A0 76 8E                     	.dw EnemyInit_Stationary ; Mushroom
084A2 76 8E                     	.dw EnemyInit_Stationary ; Mushroom1up
084A4 CF 84                     	.dw EnemyInit_Basic ; FlyingCarpet
084A6 69 8E                     	.dw EnemyInit_Hawkmouth ; HawkmouthRight
084A8 69 8E                     	.dw EnemyInit_Hawkmouth ; HawkmouthLeft
084AA 79 8D                     	.dw EnemyInit_CrystalBallStarmanStopwatch ; CrystalBall
084AC 79 8D                     	.dw EnemyInit_CrystalBallStarmanStopwatch ; Starman
084AE 79 8D                     	.dw EnemyInit_CrystalBallStarmanStopwatch ; Stopwatch
084B0                           
084B0                           
084B0                           ;
084B0                           ; Sets enemy attributes to the default for the object type
084B0                           ;
084B0                           ; Input
084B0                           ;   X = enemy index
084B0                           ;
084B0                           SetEnemyAttributes:
084B0 B4 90                     	LDY ObjectType, X
084B2 B9 19 F8                  	LDA ObjectAttributeTable, Y
084B5 29 7F                     	AND #$7F
084B7 95 65                     	STA ObjectAttributes, X
084B9 B9 60 F8                  	LDA EnemyArray_46E_Data, Y
084BC 9D 6E 04                  	STA EnemyArray_46E, X
084BF B9 EE F8                  	LDA EnemyArray_489_Data, Y
084C2 9D 89 04                  	STA EnemyArray_489, X
084C5 B9 A7 F8                  	LDA EnemyArray_492_Data, Y
084C8 9D 92 04                  	STA EnemyArray_492, X
084CB                           IFDEF PLAYER_STUFF
084CB 20 4E E7                      JSR ChampSet
084CE                           ENDIF
084CE 60                        	RTS
084CF                           
084CF                           
084CF                           ;
084CF                           ; Enemy initialization with a timer reset
084CF                           ;
084CF                           EnemyInit_Basic:
084CF A9 00                     	LDA #$00
084D1 95 86                     	STA EnemyTimer, X
084D3                           
084D3                           ;
084D3                           ; Enemy initialization without an explicit timer reset
084D3                           ;
084D3                           ; Most things are set to $00
084D3                           ;
084D3                           EnemyInit_BasicWithoutTimer:
084D3 A9 00                     	LDA #$00
084D5 95 79                     	STA EnemyVariable, X
084D7 A9 00                     	LDA #$00 ; You do realize you already LDA #$00, right???
084D9 95 B1                     	STA EnemyArray_B1, X
084DB 9D 2F 04                  	STA EnemyArray_42F, X
084DE 95 A8                     	STA ObjectBeingCarriedTimer, X
084E0 95 9F                     	STA ObjectAnimationTimer, X
084E2 9D 4A 04                  	STA ObjectShakeTimer, X
084E5 95 5B                     	STA EnemyCollision, X
084E7 9D 38 04                  	STA EnemyArray_438, X
084EA 9D 53 04                  	STA EnemyArray_453, X
084ED 9D CC 04                  	STA ObjectXAcceleration, X
084F0 9D D6 04                  	STA ObjectYAcceleration, X
084F3 9D 5C 04                  	STA EnemyArray_45C, X
084F6 9D 77 04                  	STA EnemyArray_477, X
084F9 9D 80 04                  	STA EnemyArray_480, X
084FC                           IFNDEF PLAYER_STUFF
084FC                           	STA EnemyHP, X
084FC                           ENDIF
084FC 95 47                     	STA ObjectYVelocity, X
084FE                           IFDEF PLAYER_STUFF
084FE 9D 10 76                      STA Enemy_Fireball_Hits, X
08501 BD 9B 04                  	LDA unk_RAM_49B, X
08504 D0 03                         BNE ++
08506 9D 65 04                      STA EnemyHP, X
08509                           ++  
08509                           ENDIF
08509                           
08509                           EnemyInit_BasicAttributes:
08509 20 B0 84                  	JSR SetEnemyAttributes
0850C                           
0850C                           ; Initialize enemy movement in direction of player
0850C                           EnemyInit_BasicMovementTowardPlayer:
0850C 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
0850F                           
0850F                           ; Initialize enemy movement
0850F                           ; Y = 1 (move to the left)
0850F                           ; Y = 0 (move to the right)
0850F                           EnemyInit_BasicMovement:
0850F C8                        	INY ; uses using index 1 or 2 of EnemyInitialAccelerationTable
08510 94 6F                     	STY EnemyMovementDirection, X
08512 B9 76 86                  	LDA EnemyInitialAccelerationTable, Y
08515 95 3D                     	STA ObjectXVelocity, X
08517                           
08517                           	; Double the speed of objects when bit 6 of 46E is set
08517 BD 6E 04                  	LDA EnemyArray_46E, X
0851A 29 40                     	AND #%01000000
0851C F0 02                     	BEQ EnemyInit_BasicMovementExit
0851E 16 3D                     	ASL ObjectXVelocity, X ; Change the speed of certain objects?
08520                           
08520                           EnemyInit_BasicMovementExit:
08520 60                        	RTS
08521                           
08521                           ; End of function EnemyInit_BasicWithoutTimer
08521                           
08521                           ; ---------------------------------------------------------------------------
08521                           BeezoXOffsetTable:
08521 FE                        	.db $FE ; If player moving right
08522 00                        	.db $00 ; If moving left
08523                           BeezoDiveSpeedTable:
08523 12 16 1A 1E 22 26 2A 2D   	.db $12,$16,$1A,$1E,$22,$26,$2A,$2D
0852B 30 32 34 37 39 3B 3D 3E   	.db $30,$32,$34,$37,$39,$3B,$3D,$3E
08533                           ; ---------------------------------------------------------------------------
08533                           
08533                           EnemyInit_BeezoDiving:
08533 20 CF 84                  	JSR EnemyInit_Basic
08536                           
08536 A4 6E                     	LDY PlayerMovementDirection ; $02 = left, $01 = right
08538 AD C0 04                  	LDA ScreenBoundaryLeftLo
0853B 79 20 85                  	ADC BeezoXOffsetTable - 1, Y
0853E 95 29                     	STA ObjectXLo, X ; Spawn in front of the player to dive at them
08540 AD BE 04                  	LDA ScreenBoundaryLeftHi
08543 69 00                     	ADC #$00
08545 95 15                     	STA ObjectXHi, X
08547                           
08547                           ; =============== S U B R O U T I N E =======================================
08547                           
08547                           EnemyBeezoDiveSetup:
08547 A5 1E                     	LDA PlayerYHi
08549 10 04                     	BPL loc_BANK2_84D5
0854B                           
0854B                           	; If above the screen, just abort and use the least descend-y one
0854B A0 00                     	LDY #$00
0854D F0 0A                     	BEQ loc_BANK2_84DF
0854F                           
0854F                           loc_BANK2_84D5:
0854F A5 32                     	LDA PlayerYLo ; Check how far down on the screen the player is
08551 38                        	SEC
08552 E5 CB                     	SBC ScreenYLo
08554 4A                        	LSR A ; And then take only the highest 4 bits
08555 4A                        	LSR A ; (divide by 16)
08556 4A                        	LSR A
08557 4A                        	LSR A
08558 A8                        	TAY
08559                           
08559                           loc_BANK2_84DF:
08559 B9 23 85                  	LDA BeezoDiveSpeedTable, Y
0855C 95 47                     	STA ObjectYVelocity, X
0855E 60                        	RTS
0855F                           
0855F                           ; End of function EnemyBeezoDiveSetup
0855F                           
0855F                           ; ---------------------------------------------------------------------------
0855F                           
0855F                           EnemyInit_Phanto:
0855F 20 CF 84                  	JSR EnemyInit_Basic
08562                           
08562 A9 0C                     	LDA #$0C
08564 95 3D                     	STA ObjectXVelocity, X
08566 A9 A0                     	LDA #$A0
08568 8D BC 05                  	STA PhantoActivateTimer
0856B 60                        	RTS
0856C                           
0856C                           ; =============== S U B R O U T I N E =======================================
0856C                           
0856C                           EnemyInit_Bobomb:
0856C 20 CF 84                  	JSR EnemyInit_Basic
0856F                           
0856F A9 FF                     	LDA #$FF
08571 95 86                     	STA EnemyTimer, X
08573 60                        	RTS
08574                           
08574                           ; End of function EnemyInit_Bobomb
08574                           
08574                           ; ---------------------------------------------------------------------------
08574                           
08574                           
08574                           HandleEnemyState_Dead:
08574 20 05 B6                  	JSR sub_BANK3_B5CC
08577                           
08577 20 78 89                  	JSR sub_BANK2_88E8
0857A                           
0857A                           loc_BANK2_8500:
0857A B5 51                     	LDA EnemyState, X
0857C D0 76                     	BNE MakeEnemyFlipUpsideDown
0857E BD 9B 04                  	LDA unk_RAM_49B, X
08581 F0 30                     	BEQ EnemyDeathMaybe
08583                           
08583                           loc_BANK2_8509:
08583 8D B8 04                  	STA BossBeaten
08586 20 58 9B                  	JSR DestroyOnscreenEnemies
08589 20 4F 82                  	JSR Swarm_Stop
0858C                           
0858C                           
0858C A9 02                     	LDA #Music2_BossClearFanfare
0858E 8D 03 06                  	STA MusicQueue2
08591 BD EF 04                  	LDA unk_RAM_4EF, X
08594 95 15                     	STA ObjectXHi, X
08596 A9 80                     	LDA #$80
08598 95 29                     	STA ObjectXLo, X
0859A 0A                        	ASL A
0859B 95 1F                     	STA ObjectYHi, X
0859D A9 B0                     	LDA #$B0
0859F B4 90                     	LDY ObjectType, X
085A1 C0 21                     	CPY #Enemy_Clawgrip
085A3 D0 02                     	BNE loc_BANK2_852D
085A5                           
085A5 A9 70                     	LDA #$70
085A7                           
085A7                           loc_BANK2_852D:
085A7 95 33                     	STA ObjectYLo, X
085A9 A9 41                     	LDA #%01000001
085AB 95 65                     	STA ObjectAttributes, X
085AD 9D 6E 04                  	STA EnemyArray_46E, X
085B0                           IFDEF PLAYER_STUFF
085B0 4C 2E E8                  	JMP BossDefeatMush
085B3                           ENDIF
085B3                           IFNDEF PLAYER_STUFF
085B3                           	JMP TurnIntoPuffOfSmoke
085B3                           ENDIF
085B3                           
085B3                           ; ---------------------------------------------------------------------------
085B3                           
085B3                           EnemyDeathMaybe:
085B3 B5 90                     	LDA ObjectType, X
085B5 C9 1B                     	CMP #Enemy_Bullet ; "Stray bullet" enemy type
085B7 F0 3B                     	BEQ MakeEnemyFlipUpsideDown
085B9                           
085B9                           IFDEF PLAYER_STUFF
085B9 BD 10 76                      LDA Enemy_Fireball_Hits, X
085BC 10 03                         BPL +
085BE 4C F4 85                      JMP MakeEnemyFlipUpsideDown
085C1                           +
085C1                           ENDIF
085C1                           
085C1 EE AD 04                  	INC EnemiesKilledForHeart
085C4                           IFDEF FLAGSET
085C4 EE E6 73                      INC Level_Count_KillCnt 
085C7                           ENDIF
085C7 AC AD 04                  	LDY EnemiesKilledForHeart
085CA C0 08                     	CPY #$08 ; number of enemies to kill before a heart appears
085CC 90 26                     	BCC MakeEnemyFlipUpsideDown
085CE                           
085CE A9 00                     	LDA #$00 ; reset enemy kill counter for heart counter
085D0 8D AD 04                  	STA EnemiesKilledForHeart
085D3                           
085D3 A9 01                     	LDA #EnemyState_Alive ; convert dead enemy to living heart
085D5 95 51                     	STA EnemyState, X
085D7 95 65                     	STA ObjectAttributes, X
085D9 A9 07                     	LDA #%00000111 ; what's this magic number for?
085DB 9D 6E 04                  	STA EnemyArray_46E, X
085DE A9 00                     	LDA #Enemy_Heart
085E0 95 90                     	STA ObjectType, X
085E2 B5 33                     	LDA ObjectYLo, X
085E4 E9 60                     	SBC #$60 ; subtract this amount from the y position where the enemy despawned
085E6 95 33                     	STA ObjectYLo, X
085E8 B5 1F                     	LDA ObjectYHi, X
085EA E9 00                     	SBC #$00
085EC 95 1F                     	STA ObjectYHi, X
085EE                           
085EE                           
085EE                           ;
085EE                           ; Spawned enemies are linked to an offset in the raw enemy data, which prevents
085EE                           ; from being respawned until they are killed or moved offscreen.
085EE                           ;
085EE                           ; This subroutine ensures that the enemy in a particular slot is not linked to
085EE                           ; the raw enemy data
085EE                           ;s
085EE                           ; Input
085EE                           ;   X = enemy slot
085EE                           ;
085EE                           UnlinkEnemyFromRawData:
085EE A9 FF                     	LDA #$FF
085F0 9D 41 04                  	STA unk_RAM_441, X
085F3 60                        	RTS
085F4                           
085F4                           
085F4                           MakeEnemyFlipUpsideDown:
085F4 16 65                     	ASL ObjectAttributes, X ; Shift left...
085F6 38                        	SEC ; Set carry...
085F7 76 65                     	ROR ObjectAttributes, X ; Shift right. Effectively sets $80 bit
085F9                           
085F9                           RenderSpriteAndApplyObjectMovement:
085F9 20 90 9D                  	JSR RenderSprite
085FC                           
085FC                           
085FC                           ;
085FC                           ; Applies object physics
085FC                           ;
085FC                           ; Input
085FC                           ;   X = enemy index
085FC                           ;
085FC                           ApplyObjectMovement:
085FC                           	; disable horiziontal physics while shaking
085FC BD 4A 04                  	LDA ObjectShakeTimer, X
085FF D0 03                     	BNE ApplyObjectMovement_Vertical
08601                           
08601 20 F5 A0                  	JSR ApplyObjectPhysicsX
08604                           
08604                           ApplyObjectMovement_Vertical:
08604 20 F0 A0                  	JSR ApplyObjectPhysicsY
08607                           
08607 B5 47                     	LDA ObjectYVelocity, X
08609 30 04                     	BMI ApplyObjectMovement_Gravity
0860B                           
0860B                           	; Check terminal velocity
0860B C9 3E                     	CMP #$3E
0860D B0 04                     	BCS ApplyObjectMovement_Exit
0860F                           
0860F                           ApplyObjectMovement_Gravity:
0860F F6 47                     	INC ObjectYVelocity, X
08611 F6 47                     	INC ObjectYVelocity, X
08613                           
08613                           ApplyObjectMovement_Exit:
08613 60                        	RTS
08614                           
08614                           
08614                           HandleEnemyState_BlockFizzle:
08614 20 78 89                  	JSR sub_BANK2_88E8
08617                           
08617 B5 86                     	LDA EnemyTimer, X
08619 F0 19                     	BEQ loc_BANK2_85AF
0861B                           
0861B                           IFDEF PLAYER_STUFF
0861B                           HandleEnemyState_BlockFizzleMid:
0861B                           ENDIF
0861B                           
0861B A8                        	TAY
0861C 4A                        	LSR A
0861D 4A                        	LSR A
0861E 29 01                     	AND #$01
08620 95 6F                     	STA EnemyMovementDirection, X
08622 A9 01                     	LDA #%00000001
08624 95 65                     	STA ObjectAttributes, X
08626 9D 6E 04                  	STA EnemyArray_46E, X
08629 A9 3C                     	LDA #$3C
0862B C0 0C                     	CPY #$C
0862D 90 02                     	BCC loc_BANK2_85AC
0862F                           
0862F A9 3E                     	LDA #$3E
08631                           
08631                           loc_BANK2_85AC:
08631 4C 28 9E                  	JMP RenderSprite_DrawObject
08634                           
08634                           ; ---------------------------------------------------------------------------
08634                           
08634                           loc_BANK2_85AF:
08634 4C 39 8A                  	JMP EnemyDestroy
08637                           
08637                           ; ---------------------------------------------------------------------------
08637                           
08637                           loc_BANK2_85B2:
08637 20 78 89                  	JSR sub_BANK2_88E8
0863A                           
0863A 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
0863D                           
0863D B5 A8                     	LDA ObjectBeingCarriedTimer, X
0863F F0 05                     	BEQ loc_BANK2_85C1
08641                           
08641 A9 01                     	LDA #EnemyState_Alive
08643 95 51                     	STA EnemyState, X
08645 60                        	RTS
08646                           
08646                           ; ---------------------------------------------------------------------------
08646                           
08646                           loc_BANK2_85C1:
08646 B5 86                     	LDA EnemyTimer, X
08648 F0 EA                     	BEQ loc_BANK2_85AF
0864A                           
0864A B5 90                     	LDA ObjectType, X
0864C C9 32                     	CMP #Enemy_VegetableSmall
0864E B0 16                     	BCS loc_BANK2_85E1
08650                           
08650 20 E3 8B                  	JSR IncrementAnimationTimerBy2
08653                           
08653 A5 10                     	LDA byte_RAM_10
08655 29 03                     	AND #$03
08657 9D 4A 04                  	STA ObjectShakeTimer, X
0865A A5 10                     	LDA byte_RAM_10
0865C 29 10                     	AND #$10
0865E 4A                        	LSR A
0865F 4A                        	LSR A
08660 4A                        	LSR A
08661 4A                        	LSR A
08662 69 01                     	ADC #$01
08664 95 6F                     	STA EnemyMovementDirection, X
08666                           
08666                           loc_BANK2_85E1:
08666 20 56 96                  	JSR sub_BANK2_9486
08669                           
08669 4C 05 B6                  	JMP sub_BANK3_B5CC
0866C                           
0866C                           
0866C                           ExplosionTileXOffsets:
0866C F8                        	.db $F8
0866D 00                        	.db $00
0866E F8                        	.db $F8
0866F 00                        	.db $00
08670 08                        	.db $08
08671 10                        	.db $10
08672 08                        	.db $08
08673 10                        	.db $10
08674                           
08674                           ExplosionTileYOffsets:
08674 F8                        	.db $F8
08675 F8                        	.db $F8
08676                           
08676                           EnemyInitialAccelerationTable:
08676                           	; these values are shared with ExplosionTileYOffsets!
08676 08                        	.db $08
08677 08                        	.db $08
08678 F8                        	.db $F8
08679 F8                        	.db $F8
0867A 08                        	.db $08
0867B 08                        	.db $08
0867C                           
0867C                           
0867C                           HandleEnemyState_BombExploding:
0867C 20 78 89                  	JSR sub_BANK2_88E8
0867F                           
0867F A5 EE                     	LDA byte_RAM_EE
08681 05 EF                     	ORA byte_RAM_EF
08683 D0 AF                     	BNE loc_BANK2_85AF
08685                           
08685 B5 86                     	LDA EnemyTimer, X
08687 F0 AB                     	BEQ loc_BANK2_85AF
08689                           
08689 C9 1A                     	CMP #$1A
0868B B0 08                     	BCS loc_BANK2_8610
0868D                           
0868D E9 11                     	SBC #$11
0868F 30 04                     	BMI loc_BANK2_8610
08691                           
08691 A8                        	TAY
08692 20 F5 86                  	JSR sub_BANK2_8670
08695                           
08695                           loc_BANK2_8610:
08695 A9 60                     	LDA #$60
08697 85 00                     	STA byte_RAM_0
08699 A2 00                     	LDX #$00
0869B A0 40                     	LDY #$40
0869D                           
0869D                           loc_BANK2_8618:
0869D AD 2C 04                  	LDA SpriteTempScreenY
086A0 18                        	CLC
086A1 7D 74 86                  	ADC ExplosionTileYOffsets, X
086A4 99 00 02                  	STA SpriteDMAArea, Y
086A7 AD 29 04                  	LDA SpriteTempScreenX
086AA 18                        	CLC
086AB 7D 6C 86                  	ADC ExplosionTileXOffsets, X
086AE 99 03 02                  	STA SpriteDMAArea + 3, Y
086B1 A9 01                     	LDA #$01
086B3 99 02 02                  	STA SpriteDMAArea + 2, Y
086B6 A5 00                     	LDA byte_RAM_0
086B8 99 01 02                  	STA SpriteDMAArea + 1, Y
086BB 18                        	CLC
086BC 69 02                     	ADC #$02
086BE 85 00                     	STA byte_RAM_0
086C0 C8                        	INY
086C1 C8                        	INY
086C2 C8                        	INY
086C3 C8                        	INY
086C4 E8                        	INX
086C5 E0 08                     	CPX #$08
086C7 D0 D4                     	BNE loc_BANK2_8618
086C9                           
086C9 A6 12                     	LDX byte_RAM_12
086CB 4C 05 B6                  	JMP sub_BANK3_B5CC
086CE                           
086CE                           ; ---------------------------------------------------------------------------
086CE                           
086CE                           locret_BANK2_8649:
086CE 60                        	RTS
086CF                           
086CF                           ; ---------------------------------------------------------------------------
086CF                           byte_BANK2_864A:
086CF FB                        	.db $FB
086D0 08                        	.db $08
086D1 15                        	.db $15
086D2 FB                        	.db $FB
086D3 08                        	.db $08
086D4 15                        	.db $15
086D5 FB                        	.db $FB
086D6 08                        	.db $08
086D7 15                        	.db $15
086D8                           
086D8                           byte_BANK2_8653:
086D8 FF                        	.db $FF
086D9 00                        	.db $00
086DA 00                        	.db $00
086DB FF                        	.db $FF
086DC 00                        	.db $00
086DD 00                        	.db $00
086DE FF                        	.db $FF
086DF 00                        	.db $00
086E0 00                        	.db $00
086E1                           
086E1                           byte_BANK2_865C:
086E1 FC                        	.db $FC
086E2 FC                        	.db $FC
086E3 FC                        	.db $FC
086E4 08                        	.db $08
086E5 08                        	.db $08
086E6 08                        	.db $08
086E7 14                        	.db $14
086E8 14                        	.db $14
086E9 14                        	.db $14
086EA                           
086EA                           byte_BANK2_8665:
086EA FF                        	.db $FF
086EB FF                        	.db $FF
086EC FF                        	.db $FF
086ED 00                        	.db $00
086EE 00                        	.db $00
086EF 00                        	.db $00
086F0 00                        	.db $00
086F1 00                        	.db $00
086F2 00                        	.db $00
086F3                           
086F3                           byte_BANK2_866E:
086F3 5F                        	.db $5F
086F4 06                        	.db $06
086F5                           
086F5                           ; =============== S U B R O U T I N E =======================================
086F5                           
086F5                           sub_BANK2_8670: ;; destroying stuff?
086F5 B5 29                     	LDA ObjectXLo, X
086F7 18                        	CLC
086F8 79 CF 86                  	ADC byte_BANK2_864A, Y
086FB 85 0C                     	STA byte_RAM_C
086FD B5 15                     	LDA ObjectXHi, X
086FF 79 D8 86                  	ADC byte_BANK2_8653, Y
08702 85 0D                     	STA byte_RAM_D
08704 C9 0B                     	CMP #$B
08706 B0 C6                     	BCS locret_BANK2_8649
08708                           
08708 B5 33                     	LDA ObjectYLo, X
0870A 79 E1 86                  	ADC byte_BANK2_865C, Y
0870D 29 F0                     	AND #$F0
0870F 85 0E                     	STA byte_RAM_E
08711 85 0B                     	STA byte_RAM_B
08713 B5 1F                     	LDA ObjectYHi, X
08715 79 EA 86                  	ADC byte_BANK2_8665, Y
08718 85 0F                     	STA byte_RAM_F
0871A C9 0A                     	CMP #$A
0871C B0 B0                     	BCS locret_BANK2_8649
0871E                           
0871E A4 EC                     	LDY IsHorizontalLevel
08720 D0 20                     	BNE loc_BANK2_86BD
08722                           
08722 4A                        	LSR A
08723 66 0E                     	ROR byte_RAM_E
08725 4A                        	LSR A
08726 66 0E                     	ROR byte_RAM_E
08728 4A                        	LSR A
08729 66 0E                     	ROR byte_RAM_E
0872B 4A                        	LSR A
0872C 66 0E                     	ROR byte_RAM_E
0872E A5 0E                     	LDA byte_RAM_E
08730                           
08730 A0 FF                     	LDY #$FF
08732                           loc_BANK2_86AD:
08732 38                        	SEC
08733 E9 0F                     	SBC #$0F
08735 C8                        	INY
08736 B0 FA                     	BCS loc_BANK2_86AD
08738                           
08738 84 0D                     	STY byte_RAM_D
0873A 69 0F                     	ADC #$0F
0873C 0A                        	ASL A
0873D 0A                        	ASL A
0873E 0A                        	ASL A
0873F 0A                        	ASL A
08740 85 0E                     	STA byte_RAM_E
08742                           
08742                           loc_BANK2_86BD:
08742 A5 0C                     	LDA byte_RAM_C
08744 4A                        	LSR A
08745 4A                        	LSR A
08746 4A                        	LSR A
08747 4A                        	LSR A
08748 85 04                     	STA byte_RAM_4
0874A 05 0E                     	ORA byte_RAM_E
0874C 85 05                     	STA byte_RAM_5
0874E A0 00                     	LDY #$00
08750 AD BE 04                  	LDA ScreenBoundaryLeftHi
08753 C9 0A                     	CMP #$A
08755 D0 03                     	BNE loc_BANK2_86D5
08757                           
08757 84 0D                     	STY byte_RAM_D
08759 C8                        	INY
0875A                           
0875A                           loc_BANK2_86D5:
0875A A9 10                     	LDA #$10
0875C 85 07                     	STA byte_RAM_7
0875E B9 F3 86                  	LDA byte_BANK2_866E, Y
08761 85 08                     	STA byte_RAM_8
08763 A4 0D                     	LDY byte_RAM_D
08765                           
08765                           loc_BANK2_86E0:
08765 A5 07                     	LDA byte_RAM_7
08767 18                        	CLC
08768 69 F0                     	ADC #$F0
0876A 85 07                     	STA byte_RAM_7
0876C A5 08                     	LDA byte_RAM_8
0876E 69 00                     	ADC #$00
08770 85 08                     	STA byte_RAM_8
08772 88                        	DEY
08773 10 F0                     	BPL loc_BANK2_86E0
08775                           
08775 A4 05                     	LDY byte_RAM_5
08777 B1 07                     	LDA (byte_RAM_7), Y ;; load and check if we can explode this tile
08779 C9 9D                     	CMP #$9D
0877B F0 11                     	BEQ loc_BANK2_8701
0877D                           
0877D C9 93                     	CMP #$93
0877F F0 0D                     	BEQ loc_BANK2_8701
08781                           
08781 C9 72                     	CMP #$72
08783 F0 09                     	BEQ loc_BANK2_8701
08785                           
08785                           IFDEF HOT_SPOTS
08785 C9 98                     	CMP #BackgroundTile_98
08787 F0 05                     	BEQ loc_BANK2_8701
08789 C9 9A                     	CMP #BackgroundTile_9A
0878B F0 01                     	BEQ loc_BANK2_8701
0878D                           ENDIF
0878D                           
0878D 60                        	RTS
0878E                           
0878E                           ; ---------------------------------------------------------------------------
0878E                           
0878E                           loc_BANK2_8701:
0878E                           IFNDEF HOT_SPOTS_UNUSED
0878E A9 40                     	LDA #$40
08790 91 07                     	STA (byte_RAM_7), Y
08792                           ENDIF
08792                           IFDEF HOT_SPOTS_UNUSED
08792                               LDA #$40
08792                               STA HotSpotMidvar2
08792                               TYA
08792                               PHA
08792                               JSR HotSpotLookup
08792                               CMP #$FF
08792                               BEQ +
08792                               LDA Hot_Spots + 1, Y
08792                               STA HotSpotMidvar2
08792                           +   PLA
08792                               TAY
08792                           	LDA HotSpotMidvar2
08792                           	STA (byte_RAM_7), Y
08792                           ENDIF
08792 A5 0D                     	LDA byte_RAM_D
08794 29 01                     	AND #$01
08796 49 01                     	EOR #$01
08798 0A                        	ASL A
08799                           
08799                           loc_BANK2_870C:
08799 0A                        	ASL A
0879A A4 EC                     	LDY IsHorizontalLevel
0879C D0 01                     	BNE loc_BANK2_8712
0879E                           
0879E 0A                        	ASL A
0879F                           
0879F                           loc_BANK2_8712:
0879F 48                        	PHA
087A0 A5 0E                     	LDA byte_RAM_E
087A2 85 02                     	STA byte_RAM_2
087A4 A5 0C                     	LDA byte_RAM_C
087A6 29 F0                     	AND #$F0
087A8 85 03                     	STA byte_RAM_3
087AA A9 08                     	LDA #$08
087AC 85 00                     	STA byte_RAM_0
087AE A5 02                     	LDA byte_RAM_2
087B0 0A                        	ASL A
087B1 26 00                     	ROL byte_RAM_0
087B3 0A                        	ASL A
087B4 26 00                     	ROL byte_RAM_0
087B6 29 E0                     	AND #$E0
087B8 85 01                     	STA byte_RAM_1
087BA A5 03                     	LDA byte_RAM_3
087BC 4A                        	LSR A
087BD 4A                        	LSR A
087BE 4A                        	LSR A
087BF 05 01                     	ORA byte_RAM_1
087C1 AE 00 03                  	LDX byte_RAM_300
087C4 9D 02 03                  	STA PPUBuffer_301 + 1, X
087C7 18                        	CLC
087C8 69 20                     	ADC #$20
087CA 9D 07 03                  	STA PPUBuffer_301 + 6, X
087CD 68                        	PLA
087CE 05 00                     	ORA byte_RAM_0
087D0 9D 01 03                  	STA PPUBuffer_301, X
087D3 69 00                     	ADC #$00
087D5 9D 06 03                  	STA PPUBuffer_301 + 5, X
087D8                           
087D8                           loc_BANK2_874B:
087D8 A9 02                     	LDA #$02
087DA 9D 03 03                  	STA PPUBuffer_301 + 2, X
087DD 9D 08 03                  	STA PPUBuffer_301 + 7, X
087E0 A9 FA                     	LDA #$FA
087E2 9D 04 03                  	STA PPUBuffer_301 + 3, X
087E5 9D 05 03                  	STA PPUBuffer_301 + 4, X
087E8 9D 09 03                  	STA PPUBuffer_301 + 8, X
087EB 9D 0A 03                  	STA PPUBuffer_301 + 9, X
087EE A9 00                     	LDA #$00
087F0 9D 0B 03                  	STA PPUBuffer_301 + 10, X
087F3 8A                        	TXA
087F4 18                        	CLC
087F5 69 0A                     	ADC #$A
087F7 8D 00 03                  	STA byte_RAM_300
087FA A2 08                     	LDX #$08
087FC                           
087FC                           loc_BANK2_876F:
087FC B5 51                     	LDA EnemyState, X
087FE F0 05                     	BEQ loc_BANK2_8778
08800                           
08800 CA                        	DEX
08801 10 F9                     	BPL loc_BANK2_876F
08803                           
08803 30 1D                     	BMI loc_BANK2_8795
08805                           
08805                           loc_BANK2_8778:
08805 A5 0C                     	LDA byte_RAM_C
08807 29 F0                     	AND #$F0
08809 95 29                     	STA ObjectXLo, X
0880B A5 0D                     	LDA byte_RAM_D
0880D A4 EC                     	LDY IsHorizontalLevel
0880F D0 01                     	BNE loc_BANK2_8785
08811                           
08811 98                        	TYA
08812                           
08812                           loc_BANK2_8785:
08812 95 15                     	STA ObjectXHi, X
08814 A5 0B                     	LDA byte_RAM_B
08816 95 33                     	STA ObjectYLo, X
08818 A5 0F                     	LDA byte_RAM_F
0881A 95 1F                     	STA ObjectYHi, X
0881C 20 D3 84                  	JSR EnemyInit_BasicWithoutTimer
0881F                           
0881F 20 CA 9A                  	JSR sub_BANK2_98C4
08822                           
08822                           loc_BANK2_8795:
08822 A6 12                     	LDX byte_RAM_12
08824                           
08824                           locret_BANK2_8797:
08824 60                        	RTS
08825                           
08825                           ; End of function sub_BANK2_8670
08825                           
08825                           ; ---------------------------------------------------------------------------
08825                           byte_BANK2_8798:
08825 46                        	.db $46
08826 4A                        	.db $4A
08827 4E                        	.db $4E
08828 52                        	.db $52
08829                           ; ---------------------------------------------------------------------------
08829                           
08829                           HandleEnemyState_PuffOfSmoke:
08829 20 78 89                  	JSR sub_BANK2_88E8
0882C                           
0882C B5 65                     	LDA ObjectAttributes, X
0882E 09 10                     	ORA #ObjAttrib_Mirrored
08830 95 65                     	STA ObjectAttributes, X
08832 B5 86                     	LDA EnemyTimer, X
08834 D0 03                     	BNE loc_BANK2_87AC
08836                           
08836                           loc_BANK2_87A9:
08836 4C C8 88                  	JMP loc_BANK2_8842
08839                           
08839                           ; ---------------------------------------------------------------------------
08839                           
08839                           loc_BANK2_87AC:
08839                           IFNDEF PLAYER_STUFF
08839                           	LSR A
08839                           	LSR A
08839                           	LSR A
08839                           	TAY
08839                           	LDA byte_BANK2_8798, Y
08839                           	JSR RenderSprite_DrawObject
08839                           ENDIF
08839                           IFDEF PLAYER_STUFF
08839 20 1B 86                      JSR HandleEnemyState_BlockFizzleMid
0883C                           ENDIF
0883C                           
0883C BD 9B 04                  	LDA unk_RAM_49B, X
0883F F0 E3                     	BEQ locret_BANK2_8797
08841                           
08841 B5 86                     	LDA EnemyTimer, X
08843 C9 03                     	CMP #$03
08845 D0 DD                     	BNE locret_BANK2_8797
08847                           
08847 A0 22                     	LDY #$22
08849 B5 90                     	LDA ObjectType, X
0884B C9 21                     	CMP #Enemy_Clawgrip
0884D D0 01                     	BNE loc_BANK2_87CA
0884F                           
0884F                           	; Clawgrip special hack:
0884F                           	; Move the "Draw the door" PPU command
0884F                           	; up 8 tile rows ($100) to be on the platform
0884F 88                        	DEY
08850                           
08850                           loc_BANK2_87CA:
08850 8C 1B 72                  	STY PPUBuffer_721B
08853 8C 22 72                  	STY byte_RAM_7222
08856 C8                        	INY
08857 8C 29 72                  	STY byte_RAM_7229
0885A 8C 32 72                  	STY byte_RAM_7232
0885D A0 03                     	LDY #$03
0885F                           
0885F                           loc_BANK2_87D9:
0885F BD EF 04                  	LDA unk_RAM_4EF, X
08862 29 01                     	AND #$01
08864 0A                        	ASL A
08865 0A                        	ASL A
08866 49 04                     	EOR #$04
08868 A6 EC                     	LDX IsHorizontalLevel
0886A D0 01                     	BNE loc_BANK2_87E7
0886C                           
0886C 0A                        	ASL A
0886D                           
0886D                           loc_BANK2_87E7:
0886D BE CF FB                  	LDX EndOfLevelDoorRowOffsets, Y
08870 1D 1B 72                  	ORA PPUBuffer_721B, X
08873 9D 1B 72                  	STA PPUBuffer_721B, X
08876 A6 12                     	LDX byte_RAM_12
08878 88                        	DEY
08879 10 E4                     	BPL loc_BANK2_87D9
0887B                           
0887B A9 14                     	LDA #$14
0887D 85 11                     	STA ScreenUpdateIndex
0887F BC EF 04                  	LDY unk_RAM_4EF, X
08882 A9 5F                     	LDA #$5F
08884 85 01                     	STA byte_RAM_1
08886 A9 10                     	LDA #$10
08888 85 00                     	STA byte_RAM_0
0888A                           
0888A                           loc_BANK2_8804:
0888A A5 00                     	LDA byte_RAM_0
0888C 18                        	CLC
0888D 69 F0                     	ADC #$F0
0888F 85 00                     	STA byte_RAM_0
08891 A5 01                     	LDA byte_RAM_1
08893 69 00                     	ADC #$00
08895 85 01                     	STA byte_RAM_1
08897 88                        	DEY
08898 10 F0                     	BPL loc_BANK2_8804
0889A                           
0889A B5 90                     	LDA ObjectType, X
0889C C9 21                     	CMP #Enemy_Clawgrip
0889E D0 0D                     	BNE loc_BANK2_8827
088A0                           
088A0 A5 00                     	LDA byte_RAM_0
088A2 38                        	SEC
088A3 E9 40                     	SBC #$40
088A5 85 00                     	STA byte_RAM_0
088A7 A5 01                     	LDA byte_RAM_1
088A9 E9 00                     	SBC #$00
088AB 85 01                     	STA byte_RAM_1
088AD                           
088AD                           loc_BANK2_8827:
088AD A0 B8                     	LDY #$B8
088AF A9 56                     	LDA #$56
088B1 91 00                     	STA (byte_RAM_0), Y
088B3 A0 C8                     	LDY #$C8
088B5 91 00                     	STA (byte_RAM_0), Y
088B7 A9 53                     	LDA #$53
088B9 A0 B9                     	LDY #$B9
088BB 91 00                     	STA (byte_RAM_0), Y
088BD A0 CA                     	LDY #$CA
088BF 91 00                     	STA (byte_RAM_0), Y
088C1 A9 54                     	LDA #$54
088C3 A0 C9                     	LDY #$C9
088C5 91 00                     	STA (byte_RAM_0), Y
088C7 60                        	RTS
088C8                           
088C8                           ; ---------------------------------------------------------------------------
088C8                           
088C8                           loc_BANK2_8842:
088C8 B5 90                     	LDA ObjectType, X
088CA C9 2B                     	CMP #Enemy_FryguySplit
088CC D0 17                     	BNE loc_BANK2_8855
088CE                           
088CE                           IFDEF PLAYER_STUFF
088CE AD F8 04                      LDA FryguySplitFlames
088D1 F0 12                         BEQ loc_BANK2_8855
088D3 BD 10 76                      LDA Enemy_Fireball_Hits, X
088D6 30 0D                         BMI loc_BANK2_8855
088D8                           ENDIF
088D8 CE F8 04                  	DEC FryguySplitFlames
088DB                           IFNDEF PLAYER_STUFF
088DB                           	BPL loc_BANK2_8855
088DB                           ENDIF
088DB                           IFDEF PLAYER_STUFF
088DB D0 08                     	BNE loc_BANK2_8855
088DD                           ENDIF
088DD                           
088DD FE 9B 04                  	INC unk_RAM_49B, X
088E0 F6 90                     	INC ObjectType, X
088E2 4C 83 85                  	JMP loc_BANK2_8509
088E5                           
088E5                           ; ---------------------------------------------------------------------------
088E5                           
088E5                           loc_BANK2_8855:
088E5 4C 39 8A                  	JMP EnemyDestroy
088E8                           
088E8                           ; ---------------------------------------------------------------------------
088E8                           
088E8                           HandleEnemyState_Sand:
088E8 20 78 89                  	JSR sub_BANK2_88E8
088EB                           
088EB A9 12                     	LDA #$12
088ED 95 65                     	STA ObjectAttributes, X
088EF B5 86                     	LDA EnemyTimer, X
088F1 F0 25                     	BEQ loc_BANK2_8888
088F3                           
088F3 A9 F8                     	LDA #$F8
088F5 95 47                     	STA ObjectYVelocity, X
088F7 20 F0 A0                  	JSR ApplyObjectPhysicsY
088FA                           
088FA A9 B2                     	LDA #$B2
088FC B4 86                     	LDY EnemyTimer, X
088FE C0 10                     	CPY #$10
08900 B0 13                     	BCS loc_BANK2_8885
08902                           
08902 A9 80                     	LDA #%10000000
08904 9D 6E 04                  	STA EnemyArray_46E, X
08907 A9 01                     	LDA #$01
08909 95 65                     	STA ObjectAttributes, X
0890B 0A                        	ASL A
0890C 95 6F                     	STA EnemyMovementDirection, X
0890E F6 9F                     	INC ObjectAnimationTimer, X
08910 20 E3 8B                  	JSR IncrementAnimationTimerBy2
08913                           
08913 A9 B4                     	LDA #$B4
08915                           
08915                           loc_BANK2_8885:
08915 4C 28 9E                  	JMP RenderSprite_DrawObject
08918                           
08918                           ; ---------------------------------------------------------------------------
08918                           
08918                           loc_BANK2_8888:
08918 EC 2D 04                  	CPX ObjectBeingCarriedIndex
0891B D0 04                     	BNE loc_BANK2_8891
0891D                           
0891D A9 00                     	LDA #$00
0891F 85 9C                     	STA HoldingItem
08921                           
08921                           loc_BANK2_8891:
08921 4C 39 8A                  	JMP EnemyDestroy
08924                           
08924                           ; =============== S U B R O U T I N E =======================================
08924                           
08924                           sub_BANK2_8894:
08924 A9 00                     	LDA #$00
08926 85 EE                     	STA byte_RAM_EE
08928 B5 65                     	LDA ObjectAttributes, X
0892A A0 01                     	LDY #$01
0892C 29 04                     	AND #ObjAttrib_Horizontal
0892E D0 19                     	BNE loc_BANK2_88B9
08930                           
08930 B5 90                     	LDA ObjectType, X
08932 C9 1A                     	CMP #Enemy_Pokey
08934 F0 13                     	BEQ loc_BANK2_88B9
08936                           
08936 C9 08                     	CMP #Enemy_Ostro
08938 F0 0F                     	BEQ loc_BANK2_88B9
0893A                           
0893A C9 2D                     	CMP #Enemy_HawkmouthBoss
0893C F0 0B                     	BEQ loc_BANK2_88B9
0893E                           
0893E C9 21                     	CMP #Enemy_Clawgrip
08940 F0 07                     	BEQ loc_BANK2_88B9
08942                           
08942 BD 6E 04                  	LDA EnemyArray_46E, X
08945 29 20                     	AND #%00100000
08947 F0 02                     	BEQ loc_BANK2_88BB
08949                           
08949                           loc_BANK2_88B9:
08949                           	; something for double-wide sprites?
08949 A0 03                     	LDY #$03
0894B                           
0894B                           ; seems to be logic for positioning sprites onscreen
0894B                           loc_BANK2_88BB:
0894B B5 29                     	LDA ObjectXLo, X
0894D 18                        	CLC
0894E 79 74 89                  	ADC byte_BANK2_88E4, Y
08951 85 0E                     	STA byte_RAM_E
08953 B5 15                     	LDA ObjectXHi, X
08955 69 00                     	ADC #$00
08957 85 0F                     	STA byte_RAM_F
08959 A5 0E                     	LDA byte_RAM_E
0895B CD C0 04                  	CMP ScreenBoundaryLeftLo
0895E A5 0F                     	LDA byte_RAM_F
08960 ED BE 04                  	SBC ScreenBoundaryLeftHi
08963 F0 07                     	BEQ loc_BANK2_88DC
08965                           
08965 A5 EE                     	LDA byte_RAM_EE
08967 19 70 89                  	ORA byte_BANK2_88E0, Y
0896A 85 EE                     	STA byte_RAM_EE
0896C                           
0896C                           loc_BANK2_88DC:
0896C 88                        	DEY
0896D 10 DC                     	BPL loc_BANK2_88BB
0896F                           
0896F                           locret_BANK2_88DF:
0896F 60                        	RTS
08970                           
08970                           ; End of function sub_BANK2_8894
08970                           
08970                           ; ---------------------------------------------------------------------------
08970                           ; threshold for x-wrapping sprites near the edge of the screen
08970                           byte_BANK2_88E0: ; hi
08970 08                        	.db $08
08971 04                        	.db $04
08972 02                        	.db $02
08973 01                        	.db $01
08974                           byte_BANK2_88E4: ; lo
08974 00                        	.db $00
08975 08                        	.db $08
08976 10                        	.db $10
08977 18                        	.db $18
08978                           
08978                           ; =============== S U B R O U T I N E =======================================
08978                           
08978                           sub_BANK2_88E8:
08978 20 24 89                  	JSR sub_BANK2_8894
0897B                           
0897B A9 22                     	LDA #$22
0897D B4 90                     	LDY ObjectType, X
0897F C0 2C                     	CPY #Enemy_Wart
08981 F0 06                     	BEQ loc_BANK2_88F9
08983                           
08983 C0 1F                     	CPY #Enemy_Tryclyde
08985 F0 02                     	BEQ loc_BANK2_88F9
08987                           
08987 A9 10                     	LDA #$10
08989                           
08989                           loc_BANK2_88F9:
08989 75 33                     	ADC ObjectYLo, X
0898B 85 00                     	STA byte_RAM_0
0898D B5 1F                     	LDA ObjectYHi, X
0898F 69 00                     	ADC #$00
08991 85 01                     	STA byte_RAM_1
08993 A5 00                     	LDA byte_RAM_0
08995 C5 CB                     	CMP ScreenYLo
08997 A5 01                     	LDA byte_RAM_1
08999 E5 CA                     	SBC ScreenYHi
0899B 85 EF                     	STA byte_RAM_EF
0899D                           
0899D C0 17                     	CPY #Enemy_Phanto
0899F F0 CE                     	BEQ locret_BANK2_88DF
089A1                           
089A1 C0 41                     	CPY #Enemy_FlyingCarpet
089A3 F0 CA                     	BEQ locret_BANK2_88DF
089A5                           
089A5 C0 43                     	CPY #Enemy_HawkmouthLeft
089A7 F0 C6                     	BEQ locret_BANK2_88DF
089A9                           
089A9 C0 2D                     	CPY #Enemy_HawkmouthBoss
089AB F0 C2                     	BEQ locret_BANK2_88DF
089AD                           
089AD 8A                        	TXA
089AE 29 01                     	AND #$01
089B0 85 00                     	STA byte_RAM_0
089B2 A5 10                     	LDA byte_RAM_10
089B4 29 01                     	AND #$01
089B6 45 00                     	EOR byte_RAM_0
089B8 D0 B5                     	BNE locret_BANK2_88DF
089BA                           
089BA A5 CB                     	LDA ScreenYLo
089BC E9 30                     	SBC #$30
089BE 85 01                     	STA byte_RAM_1
089C0 A5 CA                     	LDA ScreenYHi
089C2 E9 00                     	SBC #$00
089C4 85 00                     	STA byte_RAM_0
089C6 E6 00                     	INC byte_RAM_0
089C8 A5 CB                     	LDA ScreenYLo
089CA 69 FF                     	ADC #$FF
089CC 08                        	PHP
089CD 69 30                     	ADC #$30
089CF 85 03                     	STA byte_RAM_3
089D1 A5 CA                     	LDA ScreenYHi
089D3 69 00                     	ADC #$00
089D5 28                        	PLP
089D6 69 00                     	ADC #$00
089D8 85 02                     	STA byte_RAM_2
089DA E6 02                     	INC byte_RAM_2
089DC B5 33                     	LDA ObjectYLo, X
089DE C5 01                     	CMP byte_RAM_1
089E0 B4 1F                     	LDY ObjectYHi, X
089E2 C8                        	INY
089E3 98                        	TYA
089E4 E5 00                     	SBC byte_RAM_0
089E6 30 4D                     	BMI loc_BANK2_89A5
089E8                           
089E8 B5 33                     	LDA ObjectYLo, X
089EA C5 03                     	CMP byte_RAM_3
089EC B4 1F                     	LDY ObjectYHi, X
089EE C8                        	INY
089EF 98                        	TYA
089F0 E5 02                     	SBC byte_RAM_2
089F2 10 41                     	BPL loc_BANK2_89A5
089F4                           
089F4 AD C0 04                  	LDA ScreenBoundaryLeftLo
089F7 E9 30                     	SBC #$30
089F9 85 01                     	STA byte_RAM_1
089FB AD BE 04                  	LDA ScreenBoundaryLeftHi
089FE E9 00                     	SBC #$00
08A00 85 00                     	STA byte_RAM_0
08A02 E6 00                     	INC byte_RAM_0
08A04 AD C1 04                  	LDA ScreenBoundaryRightLo
08A07 69 30                     	ADC #$30
08A09 85 03                     	STA byte_RAM_3
08A0B AD BF 04                  	LDA ScreenBoundaryRightHi
08A0E 69 00                     	ADC #$00
08A10 85 02                     	STA byte_RAM_2
08A12 E6 02                     	INC byte_RAM_2
08A14 B5 29                     	LDA ObjectXLo, X
08A16 C5 01                     	CMP byte_RAM_1
08A18 B4 15                     	LDY ObjectXHi, X
08A1A C8                        	INY
08A1B 98                        	TYA
08A1C E5 00                     	SBC byte_RAM_0
08A1E 30 0C                     	BMI loc_BANK2_899C
08A20                           
08A20 B5 29                     	LDA ObjectXLo, X
08A22 C5 03                     	CMP byte_RAM_3
08A24 B4 15                     	LDY ObjectXHi, X
08A26 C8                        	INY
08A27 98                        	TYA
08A28 E5 02                     	SBC byte_RAM_2
08A2A 30 10                     	BMI EnemyDestroy_Exit
08A2C                           
08A2C                           loc_BANK2_899C:
08A2C B4 90                     	LDY ObjectType, X
08A2E B9 60 F8                  	LDA EnemyArray_46E_Data, Y
08A31 29 08                     	AND #$08
08A33 D0 07                     	BNE EnemyDestroy_Exit
08A35                           
08A35                           loc_BANK2_89A5:
08A35 B5 A8                     	LDA ObjectBeingCarriedTimer, X
08A37 D0 03                     	BNE EnemyDestroy_Exit
08A39                           
08A39                           ; End of function sub_BANK2_88E8
08A39                           
08A39                           ; =============== S U B R O U T I N E =======================================
08A39                           
08A39                           EnemyDestroy:
08A39                           IFDEF PLAYER_STUFF
08A39 4C 93 FA                      JMP AreaResetEnemyDestroy
08A3C                           ENDIF
08A3C                           IFNDEF PLAYER_STUFF
08A3C                           	; load raw enemy data offset so we can allow the level object to respawn
08A3C                           	LDY unk_RAM_441, X
08A3C                           	; nothing to reset if offset is invalid
08A3C                           	BMI EnemyDestroy_AfterAllowRespawn
08A3C                           
08A3C                           	; disabling bit 7 allows the object to respawn
08A3C                           	LDA (RawEnemyData), Y
08A3C                           	AND #$7F
08A3C                           	STA (RawEnemyData), Y
08A3C                           
08A3C                           EnemyDestroy_AfterAllowRespawn:
08A3C                           	LDA #EnemyState_Inactive
08A3C                           	STA EnemyState, X
08A3C                           IFDEF PLAYER_STUFF
08A3C                               LDA #0
08A3C                               STA Enemy_Champion, X
08A3C                               LDA Enemy_Fireball_Hits, X
08A3C                               BPL +
08A3C                               DEC ProjectileNumber
08A3C                           +
08A3C                           ENDIF
08A3C                           ENDIF
08A3C                           
08A3C                           EnemyDestroy_Exit:
08A3C 60                        	RTS
08A3D                           
08A3D                           ; End of function EnemyDestroy
08A3D                           
08A3D                           ; ---------------------------------------------------------------------------
08A3D                           
08A3D                           HandleEnemyState_Alive:
08A3D A9 01                     	LDA #$01
08A3F 9D A4 04                  	STA unk_RAM_4A4, X
08A42 BC 2F 04                  	LDY EnemyArray_42F, X
08A45 88                        	DEY
08A46 C0 1F                     	CPY #$1F
08A48 B0 03                     	BCS loc_BANK2_89C9
08A4A                           
08A4A FE 2F 04                  	INC EnemyArray_42F, X
08A4D                           
08A4D                           loc_BANK2_89C9:
08A4D 20 78 89                  	JSR sub_BANK2_88E8
08A50                           
08A50 A5 50                     	LDA PlayerState
08A52 C9 08                     	CMP #PlayerState_ChangingSize
08A54 F0 10                     	BEQ loc_BANK2_89E2
08A56                           
08A56 A5 D8                     	LDA NeedVerticalScroll
08A58 29 04                     	AND #$04
08A5A D0 33                     	BNE loc_BANK2_8A07
08A5C                           
08A5C AD FF 04                  	LDA StopwatchTimer
08A5F D0 05                     	BNE loc_BANK2_89E2
08A61                           
08A61 BD 38 04                  	LDA EnemyArray_438, X
08A64 F0 2C                     	BEQ loc_BANK2_8A0A
08A66                           
08A66                           loc_BANK2_89E2:
08A66 B5 90                     	LDA ObjectType, X
08A68                           
08A68                           IFDEF REV_A
08A68 C9 2B                     	CMP #Enemy_FryguySplit
08A6A F0 26                     	BEQ loc_BANK2_8A0A
08A6C                           ENDIF
08A6C                           
08A6C C9 00                     	CMP #Enemy_Heart
08A6E F0 22                     	BEQ loc_BANK2_8A0A
08A70                           
08A70 C9 41                     	CMP #Enemy_FlyingCarpet
08A72 F0 04                     	BEQ loc_BANK2_89F0
08A74                           
08A74 C9 32                     	CMP #Enemy_VegetableSmall
08A76 B0 1A                     	BCS loc_BANK2_8A0A
08A78                           
08A78                           loc_BANK2_89F0:
08A78 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
08A7B                           
08A7B BD 2F 04                  	LDA EnemyArray_42F, X
08A7E F0 03                     	BEQ loc_BANK2_89FB
08A80                           
08A80 20 FC 85                  	JSR ApplyObjectMovement
08A83                           
08A83                           loc_BANK2_89FB:
08A83 B5 A8                     	LDA ObjectBeingCarriedTimer, X
08A85 F0 05                     	BEQ loc_BANK2_8A04
08A87                           
08A87 D6 9F                     	DEC ObjectAnimationTimer, X
08A89                           
08A89                           loc_BANK2_8A01:
08A89 4C ED 97                  	JMP CarryObject
08A8C                           
08A8C                           ; ---------------------------------------------------------------------------
08A8C                           
08A8C                           loc_BANK2_8A04:
08A8C 20 05 B6                  	JSR sub_BANK3_B5CC
08A8F                           
08A8F                           loc_BANK2_8A07:
08A8F 4C 90 9D                  	JMP RenderSprite
08A92                           
08A92                           ; ---------------------------------------------------------------------------
08A92                           
08A92                           loc_BANK2_8A0A:
08A92 A0 01                     	LDY #$01
08A94 B5 3D                     	LDA ObjectXVelocity, X
08A96 F0 05                     	BEQ loc_BANK2_8A15
08A98                           
08A98 10 01                     	BPL loc_BANK2_8A13
08A9A                           
08A9A C8                        	INY
08A9B                           
08A9B                           loc_BANK2_8A13:
08A9B 94 6F                     	STY EnemyMovementDirection, X
08A9D                           
08A9D                           loc_BANK2_8A15:
08A9D B4 90                     	LDY ObjectType, X
08A9F B9 19 F8                  	LDA ObjectAttributeTable, Y
08AA2 29 20                     	AND #ObjAttrib_Palette0 | ObjAttrib_BehindBackground
08AA4 D0 23                     	BNE loc_BANK2_8A41
08AA6                           
08AA6 B5 65                     	LDA ObjectAttributes, X
08AA8 29 DF                     	AND #ObjAttrib_Palette | ObjAttrib_Horizontal | ObjAttrib_FrontFacing | ObjAttrib_Mirrored | ObjAttrib_16x32 | ObjAttrib_UpsideDown
08AAA 95 65                     	STA ObjectAttributes, X
08AAC B5 A8                     	LDA ObjectBeingCarriedTimer, X
08AAE C9 02                     	CMP #$02
08AB0 90 17                     	BCC loc_BANK2_8A41
08AB2                           
08AB2 B5 90                     	LDA ObjectType, X
08AB4 C9 09                     	CMP #Enemy_BobOmb
08AB6 D0 06                     	BNE loc_BANK2_8A36
08AB8                           
08AB8 B5 5B                     	LDA EnemyCollision, X
08ABA 29 04                     	AND #CollisionFlags_Down
08ABC D0 05                     	BNE loc_BANK2_8A3B
08ABE                           
08ABE                           loc_BANK2_8A36:
08ABE B9 19 F8                  	LDA ObjectAttributeTable, Y
08AC1 10 06                     	BPL loc_BANK2_8A41
08AC3                           
08AC3                           loc_BANK2_8A3B:
08AC3 B5 65                     	LDA ObjectAttributes, X
08AC5 09 20                     	ORA #$20
08AC7 95 65                     	STA ObjectAttributes, X
08AC9                           
08AC9                           loc_BANK2_8A41:
08AC9 20 DB 8A                  	JSR loc_BANK2_8A53
08ACC                           
08ACC B5 1F                     	LDA ObjectYHi, X
08ACE 30 08                     	BMI loc_BANK2_8A50
08AD0                           
08AD0 AD 2C 04                  	LDA SpriteTempScreenY
08AD3 C9 E8                     	CMP #$E8
08AD5 90 01                     	BCC loc_BANK2_8A50
08AD7                           
08AD7 60                        	RTS
08AD8                           
08AD8                           ; ---------------------------------------------------------------------------
08AD8                           
08AD8                           loc_BANK2_8A50:
08AD8 4C 05 B6                  	JMP sub_BANK3_B5CC
08ADB                           
08ADB                           ; ---------------------------------------------------------------------------
08ADB                           
08ADB                           loc_BANK2_8A53:
08ADB B5 90                     	LDA ObjectType, X
08ADD                           IFDEF PLAYER_STUFF_EXTRA
08ADD                               CMP #LastEnemySlot
08ADD                               BCC +
08ADD                               JMP EnemyTableBeh2toA
08ADD                           +
08ADD                           ENDIF
08ADD 20 A6 D9                  	JSR JumpToTableAfterJump
08AE0                           
08AE0                           
08AE0                           EnemyBehaviorPointerTable:
08AE0 4F 90                     	.dw EnemyBehavior_00
08AE2 3D 96                     	.dw EnemyBehavior_BasicWalker
08AE4 3D 96                     	.dw EnemyBehavior_BasicWalker
08AE6 3D 96                     	.dw EnemyBehavior_BasicWalker
08AE8 3D 96                     	.dw EnemyBehavior_BasicWalker
08AEA 3D 96                     	.dw EnemyBehavior_BasicWalker
08AEC 3D 96                     	.dw EnemyBehavior_BasicWalker
08AEE 3D 96                     	.dw EnemyBehavior_BasicWalker
08AF0 BD A7                     	.dw EnemyBehavior_Ostro
08AF2 0E 96                     	.dw EnemyBehavior_BobOmb
08AF4 B3 93                     	.dw EnemyBehavior_Albatoss ; 10
08AF6 B3 93                     	.dw EnemyBehavior_Albatoss
08AF8 B3 93                     	.dw EnemyBehavior_Albatoss
08AFA AF 95                     	.dw EnemyBehavior_NinjiRunning
08AFC 8B 95                     	.dw EnemyBehavior_NinjiJumping
08AFE DF 95                     	.dw EnemyBehavior_Beezo
08B00 DF 95                     	.dw EnemyBehavior_Beezo
08B02 20 B4                     	.dw EnemyBehavior_WartBubble
08B04 CA A5                     	.dw EnemyBehavior_Pidgit
08B06 C9 8F                     	.dw EnemyBehavior_Trouter
08B08 04 90                     	.dw EnemyBehavior_Hoopstar ; 20
08B0A D4 8D                     	.dw EnemyBehavior_JarGenerators
08B0C D4 8D                     	.dw EnemyBehavior_JarGenerators
08B0E CA 94                     	.dw EnemyBehavior_Phanto
08B10 BF AA                     	.dw EnemyBehavior_CobratJar
08B12 40 AA                     	.dw EnemyBehavior_CobratGround
08B14 63 AB                     	.dw EnemyBehavior_Pokey
08B16 FD 93                     	.dw EnemyBehavior_BulletAndEgg
08B18 BC 90                     	.dw EnemyBehavior_Birdo
08B1A BB A6                     	.dw EnemyBehavior_Mouser
08B1C FD 93                     	.dw EnemyBehavior_BulletAndEgg ; 30
08B1E A0 A8                     	.dw EnemyBehavior_Tryclyde
08B20 6C 8C                     	.dw EnemyBehavior_Fireball
08B22 6D A2                     	.dw EnemyBehavior_Clawgrip
08B24 27 A4                     	.dw EnemyBehavior_ClawgripRock
08B26 D5 8C                     	.dw EnemyBehavior_PanserRedAndGray
08B28 CD 8C                     	.dw EnemyBehavior_PanserPink
08B2A D5 8C                     	.dw EnemyBehavior_PanserRedAndGray
08B2C 17 AF                     	.dw EnemyBehavior_Autobomb
08B2E EE 93                     	.dw EnemyBehavior_AutobombFire
08B30 18 B0                     	.dw EnemyBehavior_WhaleSpout ; 40
08B32 DF B0                     	.dw EnemyBehavior_Flurry
08B34 DB AD                     	.dw EnemyBehavior_Fryguy
08B36 A5 AE                     	.dw EnemyBehavior_FryguySplit
08B38 5D B3                     	.dw EnemyBehavior_Wart
08B3A 6C B1                     	.dw EnemyBehavior_HawkmouthBoss
08B3C 90 8B                     	.dw EnemyBehavior_Spark
08B3E 90 8B                     	.dw EnemyBehavior_Spark
08B40 90 8B                     	.dw EnemyBehavior_Spark
08B42 90 8B                     	.dw EnemyBehavior_Spark
08B44 A8 92                     	.dw EnemyBehavior_Vegetable ; 50
08B46 A8 92                     	.dw EnemyBehavior_Vegetable
08B48 A8 92                     	.dw EnemyBehavior_Vegetable
08B4A 90 9A                     	.dw EnemyBehavior_Shell
08B4C 78 91                     	.dw EnemyBehavior_Coin
08B4E 2A 92                     	.dw EnemyBehavior_Bomb
08B50 5C AC                     	.dw EnemyBehavior_Rocket
08B52 C3 98                     	.dw EnemyBehavior_MushroomBlockAndPOW
08B54 C3 98                     	.dw EnemyBehavior_MushroomBlockAndPOW
08B56 0C 9B                     	.dw EnemyBehavior_FallingLogs
08B58 62 99                     	.dw EnemyBehavior_SubspaceDoor ; 60
08B5A 27 92                     	.dw EnemyBehavior_Key
08B5C B8 92                     	.dw EnemyBehavior_SubspacePotion
08B5E B9 91                     	.dw EnemyBehavior_Mushroom
08B60 7E 91                     	.dw EnemyBehavior_Mushroom1up
08B62 A6 A4                     	.dw EnemyBehavior_FlyingCarpet
08B64 9D 8E                     	.dw EnemyBehavior_Hawkmouth
08B66 9D 8E                     	.dw EnemyBehavior_Hawkmouth
08B68 A8 91                     	.dw EnemyBehavior_CrystalBall
08B6A C0 8D                     	.dw EnemyBehavior_Starman
08B6C B9 91                     	.dw EnemyBehavior_Mushroom ; 70
08B6E                           
08B6E                           
08B6E                           EnemyInit_JarGenerators:
08B6E 20 CF 84                  	JSR EnemyInit_Basic
08B71                           
08B71 A9 50                     	LDA #$50
08B73 95 9F                     	STA ObjectAnimationTimer, X
08B75 60                        	RTS
08B76                           
08B76                           
08B76                           SparkAccelerationTable:
08B76 F0                        	.db $F0
08B77 E0                        	.db $E0
08B78 F0                        	.db $F0
08B79 E0                        	.db $E0
08B7A 10                        	.db $10
08B7B 20                        	.db $20
08B7C                           
08B7C                           
08B7C                           EnemyInit_Sparks:
08B7C 20 CF 84                  	JSR EnemyInit_Basic
08B7F                           
08B7F B4 90                     	LDY ObjectType, X
08B81 B9 48 8B                  	LDA SparkAccelerationTable - Enemy_Spark1, Y
08B84 95 3D                     	STA ObjectXVelocity, X
08B86 B9 4A 8B                  	LDA SparkAccelerationTable - Enemy_Spark1 + 2, Y
08B89 95 47                     	STA ObjectYVelocity, X
08B8B 60                        	RTS
08B8C                           
08B8C                           
08B8C                           SparkCollision: ; spark movement based on collision
08B8C 0C                        	.db CollisionFlags_Up | CollisionFlags_Down ; horizontal
08B8D 03                        	.db CollisionFlags_Left | CollisionFlags_Right ; vertical
08B8E                           
08B8E                           SparkTurnOffset:
08B8E 00                        	.db $00 ; clockwise
08B8F 0A                        	.db $0A ; counter-clockwise
08B90                           
08B90                           
08B90                           ;
08B90                           ; Spark movement works by traveling along one axis at a time and turning when
08B90                           ; either colliding along the movement axis or running out of wall along the
08B90                           ; axis perpendicular to movement.
08B90                           ;
08B90                           
08B90                           EnemyBehavior_Spark:
08B90 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
08B93                           
08B93 20 E3 8B                  	JSR IncrementAnimationTimerBy2
08B96                           
08B96 20 90 9D                  	JSR RenderSprite
08B99                           
08B99 B5 29                     	LDA ObjectXLo, X
08B9B 15 33                     	ORA ObjectYLo, X
08B9D 29 0F                     	AND #$0F
08B9F D0 37                     	BNE EnemyBehavior_Spark_Move
08BA1                           
08BA1 20 32 B5                  	JSR ObjectTileCollision_SolidBackground
08BA4                           
08BA4                           
08BA4 BC 77 04                  	LDY EnemyArray_477, X
08BA7 B5 5B                     	LDA EnemyCollision, X
08BA9 39 8C 8B                  	AND SparkCollision, Y
08BAC F0 21                     	BEQ EnemyBehavior_Spark_Turn
08BAE                           
08BAE B9 8C 8B                  	LDA SparkCollision, Y
08BB1 49 0F                     	EOR #$0F
08BB3 35 5B                     	AND EnemyCollision, X
08BB5 F0 21                     	BEQ EnemyBehavior_Spark_Move
08BB7                           
08BB7 98                        	TYA
08BB8 49 01                     	EOR #$01
08BBA 9D 77 04                  	STA EnemyArray_477, X
08BBD A8                        	TAY
08BBE                           
08BBE                           ;
08BBE                           ; Reverses the direction of movement for the specified axis
08BBE                           ;
08BBE                           ; Input
08BBE                           ;   X = enemy slot
08BBE                           ;   Y = movement axis
08BBE                           ;
08BBE                           EnemyBehavior_Spark_FlipAxisVelocity:
08BBE 8A                        	TXA
08BBF 18                        	CLC
08BC0 79 8E 8B                  	ADC SparkTurnOffset, Y
08BC3 A8                        	TAY
08BC4 B9 3D 00                  	LDA ObjectXVelocity, Y
08BC7 49 FF                     	EOR #$FF
08BC9 69 01                     	ADC #$01
08BCB 99 3D 00                  	STA ObjectXVelocity, Y
08BCE 60                        	RTS
08BCF                           
08BCF                           
08BCF                           EnemyBehavior_Spark_Turn:
08BCF 98                        	TYA
08BD0 49 01                     	EOR #$01
08BD2 9D 77 04                  	STA EnemyArray_477, X
08BD5 20 BE 8B                  	JSR EnemyBehavior_Spark_FlipAxisVelocity
08BD8                           
08BD8                           EnemyBehavior_Spark_Move:
08BD8 BD 77 04                  	LDA EnemyArray_477, X
08BDB D0 03                     	BNE EnemyBehavior_Spark_MoveVertical
08BDD                           
08BDD                           EnemyBehavior_Spark_MoveHorizontal:
08BDD 4C F5 A0                  	JMP ApplyObjectPhysicsX
08BE0                           
08BE0                           EnemyBehavior_Spark_MoveVertical:
08BE0 4C F0 A0                  	JMP ApplyObjectPhysicsY
08BE3                           
08BE3                           
08BE3                           IncrementAnimationTimerBy2:
08BE3 F6 9F                     	INC ObjectAnimationTimer, X
08BE5 F6 9F                     	INC ObjectAnimationTimer, X
08BE7 60                        	RTS
08BE8                           
08BE8                           
08BE8                           AlbatossSwarmStartXLo:
08BE8 F0                        	.db $F0
08BE9 00                        	.db $00
08BEA                           
08BEA                           AlbatossSwarmStartXHi:
08BEA FF                        	.db $FF
08BEB 01                        	.db $01
08BEC                           
08BEC                           
08BEC                           Swarm_AlbatossCarryingBobOmb:
08BEC 20 45 8C                  	JSR Swarm_CreateEnemy
08BEF                           
08BEF 79 E8 8B                  	ADC AlbatossSwarmStartXLo, Y
08BF2 95 29                     	STA ObjectXLo, X
08BF4 AD BE 04                  	LDA ScreenBoundaryLeftHi
08BF7 79 EA 8B                  	ADC AlbatossSwarmStartXHi, Y
08BFA 95 15                     	STA ObjectXHi, X
08BFC 84 01                     	STY byte_RAM_1
08BFE A9 0A                     	LDA #Enemy_AlbatossCarryingBobOmb
08C00 95 90                     	STA ObjectType, X
08C02 20 B0 84                  	JSR SetEnemyAttributes
08C05                           
08C05 AD AE 05                  	LDA PseudoRNGValues + 2
08C08 29 1F                     	AND #$1F
08C0A 69 20                     	ADC #$20
08C0C 95 33                     	STA ObjectYLo, X
08C0E A4 01                     	LDY byte_RAM_1
08C10 20 0F 85                  	JSR EnemyInit_BasicMovement
08C13                           
08C13 16 3D                     	ASL ObjectXVelocity, X
08C15 60                        	RTS
08C16                           
08C16                           
08C16                           BeezoSwarmStartXLo:
08C16 00                        	.db $00
08C17 FF                        	.db $FF
08C18                           
08C18                           
08C18                           Swarm_BeezoDiving:
08C18 20 45 8C                  	JSR Swarm_CreateEnemy
08C1B                           
08C1B 79 16 8C                  	ADC BeezoSwarmStartXLo, Y
08C1E 95 29                     	STA ObjectXLo, X
08C20 A5 EC                     	LDA IsHorizontalLevel
08C22 F0 05                     	BEQ Swarm_BeezoDiving_Vertical
08C24                           
08C24                           Swarm_BeezoDiving_Horizontal:
08C24 AD BE 04                  	LDA ScreenBoundaryLeftHi
08C27 69 00                     	ADC #$00
08C29                           
08C29                           Swarm_BeezoDiving_Vertical:
08C29 95 15                     	STA ObjectXHi, X
08C2B A5 CB                     	LDA ScreenYLo
08C2D 95 33                     	STA ObjectYLo, X
08C2F A5 CA                     	LDA ScreenYHi
08C31 95 1F                     	STA ObjectYHi, X
08C33 84 01                     	STY byte_RAM_1
08C35 A9 0F                     	LDA #Enemy_BeezoDiving
08C37 95 90                     	STA ObjectType, X
08C39 20 B0 84                  	JSR SetEnemyAttributes
08C3C                           
08C3C A4 01                     	LDY byte_RAM_1
08C3E 20 0F 85                  	JSR EnemyInit_BasicMovement
08C41                           
08C41 20 47 85                  	JSR EnemyBeezoDiveSetup
08C44                           
08C44 60                        	RTS
08C45                           
08C45                           
08C45                           ;
08C45                           ; Generates a swarm enemy
08C45                           ;
08C45                           ; Output
08C45                           ;   A = ScreenBoundaryLeftLo
08C45                           ;   X = enemy slot (byte_RAM_0)
08C45                           ;   Y = enemy direction
08C45                           ;
08C45                           Swarm_CreateEnemy:
08C45                           	; Pause for the Stopwatch
08C45 AD FF 04                  	LDA StopwatchTimer
08C48 D0 1F                     	BNE Swarm_CreateEnemy_Fail
08C4A                           
08C4A                           	; Generate an enemy when the counter overflows
08C4A AD 23 06                  	LDA SwarmCounter
08C4D 18                        	CLC
08C4E 69 03                     	ADC #$03
08C50 8D 23 06                  	STA SwarmCounter
08C53 90 14                     	BCC Swarm_CreateEnemy_Fail
08C55                           
08C55                           	; Create the enemy, but bail if it's not possible
08C55 20 82 94                  	JSR CreateEnemy
08C58                           
08C58 30 0F                     	BMI Swarm_CreateEnemy_Fail
08C5A                           
08C5A                           	; Pick a direction
08C5A A0 00                     	LDY #$00
08C5C A5 10                     	LDA byte_RAM_10
08C5E 29 40                     	AND #$40
08C60 D0 01                     	BNE Swarm_CreateEnemy_Exit
08C62                           
08C62 C8                        	INY
08C63                           
08C63                           Swarm_CreateEnemy_Exit:
08C63 A6 00                     	LDX byte_RAM_0
08C65 AD C0 04                  	LDA ScreenBoundaryLeftLo
08C68 60                        	RTS
08C69                           
08C69                           Swarm_CreateEnemy_Fail:
08C69                           	; Break out of the parent swarm subroutine
08C69 68                        	PLA
08C6A 68                        	PLA
08C6B 60                        	RTS
08C6C                           
08C6C                           
08C6C                           EnemyBehavior_Fireball:
08C6C 20 36 B5                  	JSR ObjectTileCollision
08C6F                           
08C6F 20 F1 93                  	JSR sub_BANK2_927A
08C72                           
08C72                           IFNDEF PLAYER_STUFF
08C72                           	JSR EnemyBehavior_CheckDamagedInterrupt
08C72                           ENDIF
08C72                           
08C72 20 90 9D                  	JSR RenderSprite
08C75                           
08C75                           IFDEF PLAYER_STUFF
08C75 B5 86                         LDA EnemyTimer, X
08C77 C9 01                         CMP #$1
08C79 D0 03                         BNE +
08C7B 4C 39 8A                  	JMP EnemyDestroy
08C7E                           +
08C7E                           ENDIF
08C7E                           
08C7E B5 79                     	LDA EnemyVariable, X
08C80 D0 03                     	BNE EnemyBehavior_Fireball_CheckCollision
08C82                           
08C82 4C FC 85                  	JMP ApplyObjectMovement
08C85                           
08C85                           
08C85                           EnemyBehavior_Fireball_CheckCollision:
08C85                           IFDEF PLAYER_STUFF
08C85 BD 10 76                  	LDA Enemy_Fireball_Hits, X
08C88 10 2D                         BPL +
08C8A 29 04                         AND #$4
08C8C D0 23                         BNE +p
08C8E BD 10 76                  	LDA Enemy_Fireball_Hits, X
08C91 29 01                         AND #$1
08C93 F0 2A                         BEQ +++
08C95 20 04 86                  -o	JSR ApplyObjectMovement_Vertical
08C98 B5 5B                     	LDA EnemyCollision, X
08C9A 29 04                     	AND #CollisionFlags_Down
08C9C F0 21                     	BEQ +++
08C9E A9 F0                         LDA #$F0
08CA0 95 47                         STA ObjectYVelocity, X
08CA2 B5 33                         LDA ObjectYLo, X
08CA4 29 F0                         AND #$F0
08CA6 95 33                         STA ObjectYLo, X
08CA8 B5 5B                     	LDA EnemyCollision, X
08CAA 49 04                     	EOR #CollisionFlags_Down
08CAC 95 5B                         STA EnemyCollision, X
08CAE 4C BF 8C                      JMP +++
08CB1 20 04 86                  +p  JSR ApplyObjectMovement_Vertical
08CB4 4C 00 96                  	JMP sub_BANK2_9430
08CB7 BD 20 76                  +   LDA Enemy_Champion, X
08CBA CD 0B EF                      CMP ChampionChance
08CBD 90 D6                         BCC -o
08CBF                           +++
08CBF                           
08CBF B5 5B                     	LDA EnemyCollision, X
08CC1 29 13                     	AND #CollisionFlags_Right | CollisionFlags_Left | CollisionFlags_Damage
08CC3 F0 03                     	BEQ +
08CC5                           
08CC5 20 27 93                  	JSR TurnIntoPuffOfSmoke
08CC8                           +
08CC8                           ENDIF
08CC8                           IFNDEF PLAYER_STUFF
08CC8                           	LDA EnemyCollision, X
08CC8                           	AND #CollisionFlags_Right | CollisionFlags_Left
08CC8                           	BEQ EnemyBehavior_Fireball_Exit
08CC8                           
08CC8                           	JSR TurnIntoPuffOfSmoke
08CC8                           ENDIF
08CC8                           
08CC8                           EnemyBehavior_Fireball_Exit:
08CC8 4C 00 96                  	JMP sub_BANK2_9430
08CCB                           
08CCB                           
08CCB                           PanserFireXVelocity:
08CCB 10                        	.db $10
08CCC F0                        	.db $F0
08CCD                           
08CCD                           
08CCD                           EnemyBehavior_PanserPink:
08CCD B5 9F                     	LDA ObjectAnimationTimer, X
08CCF 0A                        	ASL A
08CD0 D0 03                     	BNE EnemyBehavior_PanserRedAndGray
08CD2                           
08CD2 20 0C 85                  	JSR EnemyInit_BasicMovementTowardPlayer
08CD5                           
08CD5                           EnemyBehavior_PanserRedAndGray:
08CD5 20 36 B5                  	JSR ObjectTileCollision
08CD8                           
08CD8 B5 5B                     	LDA EnemyCollision, X
08CDA 48                        	PHA
08CDB 29 04                     	AND #CollisionFlags_Down
08CDD F0 03                     	BEQ loc_BANK2_8C1A
08CDF                           
08CDF 20 AC 97                  	JSR ResetObjectYVelocity
08CE2                           
08CE2                           loc_BANK2_8C1A:
08CE2 68                        	PLA
08CE3 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
08CE5 F0 03                     	BEQ loc_BANK2_8C22
08CE7                           
08CE7 20 56 A1                  	JSR EnemyBehavior_TurnAround
08CEA                           
08CEA                           loc_BANK2_8C22:
08CEA 20 FC 85                  	JSR ApplyObjectMovement
08CED                           
08CED A9 83                     	LDA #%10000011
08CEF 9D 6E 04                  	STA EnemyArray_46E, X
08CF2 A9 02                     	LDA #$02
08CF4 95 6F                     	STA EnemyMovementDirection, X
08CF6 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
08CF9                           
08CF9 F6 9F                     	INC ObjectAnimationTimer, X
08CFB B5 9F                     	LDA ObjectAnimationTimer, X
08CFD 29 2F                     	AND #$2F
08CFF D0 04                     	BNE loc_BANK2_8C3D
08D01                           
08D01 A9 10                     	LDA #$10
08D03 95 86                     	STA EnemyTimer, X
08D05                           
08D05                           loc_BANK2_8C3D:
08D05 B4 86                     	LDY EnemyTimer, X
08D07 F0 4D                     	BEQ loc_BANK2_8C8E
08D09                           
08D09 C0 06                     	CPY #$06
08D0B D0 37                     	BNE loc_BANK2_8C7C
08D0D                           
08D0D 20 82 94                  	JSR CreateEnemy
08D10                           
08D10 30 32                     	BMI loc_BANK2_8C7C
08D12                           
08D12 B5 90                     	LDA ObjectType, X
08D14 48                        	PHA
08D15 A6 00                     	LDX byte_RAM_0
08D17 AD AE 05                  	LDA PseudoRNGValues + 2
08D1A 29 0F                     	AND #$0F
08D1C 09 BC                     	ORA #$BC
08D1E 95 47                     	STA ObjectYVelocity, X
08D20 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
08D23                           
08D23 68                        	PLA
08D24 C9 25                     	CMP #Enemy_PanserStationaryFiresUp
08D26 B9 CB 8C                  	LDA PanserFireXVelocity, Y
08D29 90 02                     	BCC loc_BANK2_8C65
08D2B                           
08D2B A9 00                     	LDA #$00
08D2D                           
08D2D                           loc_BANK2_8C65:
08D2D 95 3D                     	STA ObjectXVelocity, X
08D2F B5 29                     	LDA ObjectXLo, X
08D31 E9 05                     	SBC #$05
08D33 95 29                     	STA ObjectXLo, X
08D35 B5 15                     	LDA ObjectXHi, X
08D37 E9 00                     	SBC #$00
08D39 95 15                     	STA ObjectXHi, X
08D3B A9 20                     	LDA #Enemy_Fireball
08D3D 95 90                     	STA ObjectType, X
08D3F 20 B0 84                  	JSR SetEnemyAttributes
08D42                           
08D42 A6 12                     	LDX byte_RAM_12
08D44                           
08D44                           loc_BANK2_8C7C:
08D44 B5 65                     	LDA ObjectAttributes, X
08D46 09 10                     	ORA #$10
08D48 95 65                     	STA ObjectAttributes, X
08D4A A9 AE                     	LDA #$AE
08D4C 20 28 9E                  	JSR RenderSprite_DrawObject
08D4F                           
08D4F B5 65                     	LDA ObjectAttributes, X
08D51 29 EF                     	AND #$EF
08D53 95 65                     	STA ObjectAttributes, X
08D55 60                        	RTS
08D56                           
08D56                           ; ---------------------------------------------------------------------------
08D56                           
08D56                           loc_BANK2_8C8E:
08D56 4C 90 9D                  	JMP RenderSprite
08D59                           
08D59                           ; ---------------------------------------------------------------------------
08D59                           
08D59                           EnemyInit_Key:
08D59 A0 05                     	LDY #$05
08D5B                           
08D5B                           loc_BANK2_8C93:
08D5B B9 51 00                  	LDA EnemyState, Y
08D5E F0 0B                     	BEQ loc_BANK2_8CA3
08D60                           
08D60                           loc_BANK2_8C98:
08D60 C4 12                     	CPY byte_RAM_12
08D62 F0 07                     	BEQ loc_BANK2_8CA3
08D64                           
08D64 B9 90 00                  	LDA ObjectType, Y
08D67 C9 3D                     	CMP #Enemy_Key
08D69 F0 0B                     	BEQ loc_BANK2_8CAE
08D6B                           
08D6B                           loc_BANK2_8CA3:
08D6B 88                        	DEY
08D6C 10 ED                     	BPL loc_BANK2_8C93
08D6E                           
08D6E AD B0 04                  	LDA KeyUsed
08D71 D0 03                     	BNE loc_BANK2_8CAE
08D73                           
08D73                           loc_BANK2_8CAB:
08D73 4C 76 8E                  	JMP EnemyInit_Stationary
08D76                           
08D76                           ; ---------------------------------------------------------------------------
08D76                           
08D76                           loc_BANK2_8CAE:
08D76 4C 39 8A                  	JMP EnemyDestroy
08D79                           
08D79                           ; ---------------------------------------------------------------------------
08D79                           
08D79                           EnemyInit_CrystalBallStarmanStopwatch:
08D79 A0 05                     	LDY #$05
08D7B                           
08D7B                           loc_BANK2_8CB3:
08D7B B9 51 00                  	LDA EnemyState, Y
08D7E F0 0B                     	BEQ loc_BANK2_8CC3
08D80                           
08D80 C4 12                     	CPY byte_RAM_12
08D82 F0 07                     	BEQ loc_BANK2_8CC3
08D84                           
08D84 B9 90 00                  	LDA ObjectType, Y
08D87 C9 44                     	CMP #Enemy_CrystalBall
08D89 F0 EB                     	BEQ loc_BANK2_8CAE
08D8B                           
08D8B                           loc_BANK2_8CC3:
08D8B 88                        	DEY
08D8C 10 ED                     	BPL loc_BANK2_8CB3
08D8E                           
08D8E AD B5 04                  	LDA CrystalAndHawkmouthOpenSize
08D91 D0 E3                     	BNE loc_BANK2_8CAE
08D93                           
08D93 F0 DE                     	BEQ loc_BANK2_8CAB
08D95                           
08D95 20 82 94                  	JSR CreateEnemy
08D98                           
08D98 30 25                     	BMI locret_BANK2_8CF7
08D9A                           
08D9A A6 00                     	LDX byte_RAM_0
08D9C A9 45                     	LDA #Enemy_Starman
08D9E 95 90                     	STA ObjectType, X
08DA0 AD C0 04                  	LDA ScreenBoundaryLeftLo
08DA3 69 D0                     	ADC #$D0
08DA5 95 29                     	STA ObjectXLo, X
08DA7 AD BE 04                  	LDA ScreenBoundaryLeftHi
08DAA 69 00                     	ADC #$00
08DAC 95 15                     	STA ObjectXHi, X
08DAE A5 CB                     	LDA ScreenYLo
08DB0 69 E0                     	ADC #$E0
08DB2 95 33                     	STA ObjectYLo, X
08DB4 A5 CA                     	LDA ScreenYHi
08DB6 69 00                     	ADC #$00
08DB8 95 1F                     	STA ObjectYHi, X
08DBA 20 B0 84                  	JSR SetEnemyAttributes
08DBD                           
08DBD A6 12                     	LDX byte_RAM_12
08DBF                           
08DBF                           locret_BANK2_8CF7:
08DBF 60                        	RTS
08DC0                           
08DC0                           ; ---------------------------------------------------------------------------
08DC0                           
08DC0                           EnemyBehavior_Starman:
08DC0 A9 FC                     	LDA #$FC
08DC2 95 47                     	STA ObjectYVelocity, X
08DC4 A0 F8                     	LDY #$F8
08DC6 A5 10                     	LDA byte_RAM_10
08DC8 9D 5C 04                  	STA EnemyArray_45C, X
08DCB 10 02                     	BPL loc_BANK2_8D07
08DCD                           
08DCD A0 08                     	LDY #$08
08DCF                           
08DCF                           loc_BANK2_8D07:
08DCF 94 3D                     	STY ObjectXVelocity, X
08DD1 4C F9 85                  	JMP RenderSpriteAndApplyObjectMovement
08DD4                           
08DD4                           ; ---------------------------------------------------------------------------
08DD4                           
08DD4                           EnemyBehavior_JarGenerators:
08DD4                           IFDEF HOT_SPOTS_UNUSED
08DD4                               ;; use enemy variable to spew items on kill
08DD4                               ;; disabled for now
08DD4                               LDA EnemyVariable, X
08DD4                               BNE +
08DD4                           ENDIF
08DD4                           
08DD4 20 36 B5                  	JSR ObjectTileCollision
08DD7                           
08DD7 29 03                     	AND #$03
08DD9 D0 03                     	BNE loc_BANK2_8D16
08DDB                           
08DDB                           IFDEF HOT_SPOTS_UNUSED
08DDB                               LDA #$1
08DDB                               STA EnemyVariable, X
08DDB                               +
08DDB                               DEC EnemyVariable, X
08DDB                               BNE +
08DDB                           	JMP EnemyDestroy
08DDB                           +
08DDB                               JMP SkipAnimationCheck
08DDB                           ENDIF
08DDB                           
08DDB 4C 39 8A                  	JMP EnemyDestroy
08DDE                           
08DDE                           ; ---------------------------------------------------------------------------
08DDE                           
08DDE                           loc_BANK2_8D16:
08DDE F6 9F                     	INC ObjectAnimationTimer, X
08DE0 B5 9F                     	LDA ObjectAnimationTimer, X
08DE2 0A                        	ASL A
08DE3                           IFNDEF PLAYER_STUFF
08DE3                           	BNE locret_BANK2_8D5E
08DE3                           ENDIF
08DE3                           IFDEF PLAYER_STUFF
08DE3 F0 01                         BEQ +
08DE5 60                            RTS
08DE6                           +
08DE6                           ENDIF
08DE6                           
08DE6                           IFDEF HOT_SPOTS_UNUSED
08DE6                           SkipAnimationCheck:
08DE6                           ENDIF
08DE6 20 82 94                  	JSR CreateEnemy
08DE9                           
08DE9                           IFNDEF PLAYER_STUFF
08DE9                           	BMI locret_BANK2_8D5E
08DE9                           ENDIF
08DE9                           IFDEF PLAYER_STUFF
08DE9 10 01                         BPL +
08DEB 60                            RTS
08DEC                           +
08DEC                           ENDIF
08DEC                           
08DEC A4 00                     	LDY byte_RAM_0
08DEE                           IFDEF HOT_SPOTS
08DEE                               ;; we can make this work in the init but need another enemy variable used
08DEE A9 00                         LDA #0
08DF0 8D F9 76                      STA HotSpotMidvar
08DF3 20 7B EE                      JSR HotSpotLookup
08DF6 C9 FF                         CMP #$FF
08DF8 F0 1D                         BEQ ++
08DFA B9 A1 76                      LDA Hot_Spots + 1, Y
08DFD F0 02                         BEQ +
08DFF 95 9F                         STA ObjectAnimationTimer, X
08E01                           +
08E01                           IFDEF HOT_SPOTS_UNUSED
08E01                               LDA Hot_Spots + 1, Y
08E01                               BEQ +
08E01                               CMP EnemyVariable, X 
08E01                               BCS +
08E01                           	LDY byte_RAM_0
08E01                               LDA #$0
08E01                               STA EnemyState, Y
08E01                               RTS
08E01                           ENDIF
08E01 B9 A0 76                  +   LDA Hot_Spots, Y
08E04 A4 00                     	LDY byte_RAM_0
08E06 99 90 00                      STA ObjectType, Y
08E09 8A                            TXA
08E0A 48                            PHA
08E0B A6 00                         LDX byte_RAM_0
08E0D 20 1F 84                      JSR InitializeEnemy
08E10 68                            PLA
08E11 AA                            TAX
08E12 EE F9 76                      INC HotSpotMidvar
08E15 F6 79                         INC EnemyVariable, X 
08E17 A4 00                     ++  LDY byte_RAM_0
08E19                           ENDIF
08E19 B9 29 00                  	LDA ObjectXLo, Y
08E1C 38                        	SEC
08E1D E9 06                     	SBC #$06
08E1F 99 29 00                  	STA ObjectXLo, Y
08E22 B9 33 00                  	LDA ObjectYLo, Y
08E25 E9 04                     	SBC #$04
08E27 99 33 00                  	STA ObjectYLo, Y
08E2A B9 1F 00                  	LDA ObjectYHi, Y
08E2D E9 00                     	SBC #$00
08E2F 99 1F 00                  	STA ObjectYHi, Y
08E32 A9 1A                     	LDA #$1A
08E34 99 80 04                  	STA EnemyArray_480, Y
08E37 A9 F8                     	LDA #$F8
08E39 99 47 00                  	STA ObjectYVelocity, Y
08E3C                           
08E3C                           IFDEF HOT_SPOTS
08E3C AD F9 76                      LDA HotSpotMidvar
08E3F F0 10                         BEQ +
08E41 A9 E0                         LDA #$E0
08E43 99 47 00                      STA ObjectYVelocity, Y
08E46 A9 04                     	LDA #$04
08E48 99 80 04                  	STA EnemyArray_480, Y
08E4B A9 FF                     	LDA #$FF
08E4D 99 86 00                  	STA EnemyTimer, Y
08E50 60                            RTS
08E51                           +
08E51                           ENDIF
08E51                           
08E51 B5 90                     	LDA ObjectType, X
08E53                           
08E53 C9 16                     	CMP #Enemy_JarGeneratorBobOmb
08E55 D0 11                     	BNE locret_BANK2_8D5E
08E57                           
08E57 A9 09                     	LDA #Enemy_BobOmb
08E59 99 90 00                  	STA ObjectType, Y
08E5C B9 3D 00                  	LDA ObjectXVelocity, Y
08E5F 0A                        	ASL A
08E60 99 3D 00                  	STA ObjectXVelocity, Y
08E63 A9 FF                     	LDA #$FF
08E65 99 86 00                  	STA EnemyTimer, Y
08E68                           
08E68                           locret_BANK2_8D5E:
08E68 60                        	RTS
08E69                           
08E69                           
08E69                           EnemyInit_Hawkmouth:
08E69 D6 33                     	DEC ObjectYLo, X
08E6B D6 33                     	DEC ObjectYLo, X
08E6D A0 01                     	LDY #$01
08E6F 8C 1F 71                  	STY byte_RAM_711F
08E72 C8                        	INY
08E73 8C 0B 71                  	STY byte_RAM_710B
08E76                           
08E76                           
08E76                           EnemyInit_Stationary:
08E76 20 CF 84                  	JSR EnemyInit_Basic
08E79 A9 00                     	LDA #$00
08E7B 95 3D                     	STA ObjectXVelocity, X
08E7D                           IFDEF PLAYER_STUFF
08E7D B5 90                         LDA ObjectType, X
08E7F C9 3F                         CMP #Enemy_Mushroom
08E81 D0 19                         BNE +
08E83 20 7B EE                      JSR HotSpotLookup
08E86 C9 3F                         CMP #Enemy_Mushroom
08E88 D0 06                         BNE ++
08E8A B9 A1 76                      LDA Hot_Spots + 1, Y
08E8D 9D 20 76                  	STA MushroomEffect, X
08E90                           ++
08E90 B9 A2 76                      LDA Hot_Spots + 2, Y
08E93 95 79                         STA EnemyVariable, X
08E95 8A                            TXA
08E96 48                            PHA
08E97 20 DB EC                      JSR ProcessCustomPowerup_WithRemove
08E9A 68                            PLA
08E9B AA                            TAX
08E9C                           +
08E9C                           ENDIF
08E9C                           
08E9C 60                        	RTS
08E9D                           
08E9D                           
08E9D                           EnemyBehavior_Hawkmouth:
08E9D A5 EE                     	LDA byte_RAM_EE
08E9F F0 03                     	BEQ loc_BANK2_8D7B
08EA1                           
08EA1                           loc_BANK2_8D78:
08EA1 4C 47 8F                  	JMP RenderSprite_HawkmouthLeft
08EA4                           
08EA4                           ; ---------------------------------------------------------------------------
08EA4                           
08EA4                           loc_BANK2_8D7B:
08EA4 AD B6 04                  	LDA HawkmouthOpenTimer
08EA7 F0 0A                     	BEQ loc_BANK2_8D8A
08EA9                           
08EA9 CE B6 04                  	DEC HawkmouthOpenTimer
08EAC D0 F3                     	BNE loc_BANK2_8D78
08EAE                           
08EAE A9 80                     	LDA #SoundEffect1_HawkOpen_WartBarf
08EB0 8D 02 06                  	STA SoundEffectQueue1
08EB3                           
08EB3                           loc_BANK2_8D8A:
08EB3 AD B4 04                  	LDA HawkmouthClosing
08EB6 F0 37                     	BEQ loc_BANK2_8DBA
08EB8                           
08EB8 CE B5 04                  	DEC CrystalAndHawkmouthOpenSize
08EBB D0 E4                     	BNE loc_BANK2_8D78
08EBD                           
08EBD A9 00                     	LDA #$00
08EBF 8D B4 04                  	STA HawkmouthClosing
08EC2 A9 01                     	LDA #TransitionType_Door
08EC4 8D 34 05                  	STA TransitionType
08EC7 20 66 FA                  	JSR DoAreaReset
08ECA                           IFDEF PLAYER_STUFF
08ECA 20 7C E8                      JSR SetGameModeBonusChanceCustom
08ECD AD EC 04                      LDA GameMode
08ED0 D0 03                         BNE +
08ED2 EE 27 06                  	INC DoAreaTransition
08ED5 60                        +   RTS
08ED6                           ENDIF
08ED6                           
08ED6 AC 29 06                  	LDY CurrentLevelRelative
08ED9 AD 34 06                  	LDA CurrentWorldTileset
08EDC C9 06                     	CMP #$06
08EDE D0 01                     	BNE loc_BANK2_8DAC
08EE0                           
08EE0 C8                        	INY
08EE1                           
08EE1                           loc_BANK2_8DAC:
08EE1 C0 02                     	CPY #$02
08EE3 90 04                     	BCC SetGameModeBonusChance
08EE5                           
08EE5 EE 27 06                  	INC DoAreaTransition
08EE8 60                        	RTS
08EE9                           
08EE9                           ; ---------------------------------------------------------------------------
08EE9                           
08EE9                           SetGameModeBonusChance:
08EE9 A9 03                     	LDA #GameMode_BonusChance
08EEB 8D EC 04                  	STA GameMode
08EEE 60                        	RTS
08EEF                           
08EEF                           ; ---------------------------------------------------------------------------
08EEF                           
08EEF                           loc_BANK2_8DBA:
08EEF AD B5 04                  	LDA CrystalAndHawkmouthOpenSize
08EF2 F0 53                     	BEQ RenderSprite_HawkmouthLeft
08EF4                           
08EF4 C9 30                     	CMP #$30
08EF6 F0 18                     	BEQ loc_BANK2_8DDB
08EF8                           
08EF8 A5 EE                     	LDA byte_RAM_EE
08EFA 29 04                     	AND #$04
08EFC D0 49                     	BNE RenderSprite_HawkmouthLeft
08EFE                           
08EFE EE B5 04                  	INC CrystalAndHawkmouthOpenSize
08F01 A5 10                     	LDA byte_RAM_10
08F03 29 03                     	AND #$03
08F05 D0 06                     	BNE loc_BANK2_8DD8
08F07                           
08F07 CE 1F 71                  	DEC byte_RAM_711F
08F0A EE 0B 71                  	INC byte_RAM_710B
08F0D                           
08F0D                           loc_BANK2_8DD8:
08F0D 4C 47 8F                  	JMP RenderSprite_HawkmouthLeft
08F10                           
08F10                           ; ---------------------------------------------------------------------------
08F10                           
08F10                           loc_BANK2_8DDB:
08F10 B5 5B                     	LDA EnemyCollision, X
08F12 29 40                     	AND #CollisionFlags_PlayerInsideMaybe
08F14 F0 31                     	BEQ RenderSprite_HawkmouthLeft
08F16                           
08F16 B5 33                     	LDA ObjectYLo, X
08F18 C5 32                     	CMP PlayerYLo
08F1A B0 2B                     	BCS RenderSprite_HawkmouthLeft
08F1C                           
08F1C A5 5A                     	LDA PlayerCollision
08F1E 29 04                     	AND #CollisionFlags_Down
08F20 F0 25                     	BEQ RenderSprite_HawkmouthLeft
08F22                           
08F22                           IFNDEF PLAYER_STUFF
08F22                           	LDA HoldingItem
08F22                           	BNE RenderSprite_HawkmouthLeft
08F22                           ENDIF
08F22                           
08F22 A9 06                     	LDA #PlayerState_HawkmouthEating
08F24 85 50                     	STA PlayerState
08F26 A9 30                     	LDA #$30
08F28 85 82                     	STA PlayerStateTimer
08F2A A9 FC                     	LDA #$FC
08F2C 85 46                     	STA PlayerYVelocity
08F2E                           IFDEF RANDOMIZER_T
08F2E B5 90                     	LDA ObjectType, X
08F30 C9 43                         CMP #Enemy_HawkmouthLeft
08F32 F0 07                         BEQ +
08F34 A9 FC                         LDA #$FC
08F36 85 3C                         STA PlayerXVelocity
08F38 4C 3F 8F                      JMP ++
08F3B A9 04                     +   LDA #$04
08F3D 85 3C                         STA PlayerXVelocity
08F3F                           ++
08F3F                           ENDIF
08F3F A9 80                     	LDA #SoundEffect1_HawkOpen_WartBarf
08F41 8D 02 06                  	STA SoundEffectQueue1
08F44 EE B4 04                  	INC HawkmouthClosing
08F47                           
08F47                           RenderSprite_HawkmouthLeft:
08F47 A5 EF                     	LDA byte_RAM_EF
08F49 D0 57                     	BNE loc_BANK2_8E60
08F4B                           
08F4B B5 90                     	LDA ObjectType, X
08F4D 38                        	SEC
08F4E E9 41                     	SBC #$41
08F50 95 6F                     	STA EnemyMovementDirection, X
08F52 AD B5 04                  	LDA CrystalAndHawkmouthOpenSize
08F55                           
08F55                           ; =============== S U B R O U T I N E =======================================
08F55                           
08F55                           sub_BANK2_8E13:
08F55 85 07                     	STA byte_RAM_7
08F57 4A                        	LSR A
08F58 4A                        	LSR A
08F59 49 FF                     	EOR #$FF
08F5B 38                        	SEC
08F5C 6D 2C 04                  	ADC SpriteTempScreenY
08F5F 8D 2C 04                  	STA SpriteTempScreenY
08F62 AC BD 04                  	LDY DoorAnimationTimer
08F65 F0 02                     	BEQ loc_BANK2_8E27
08F67                           
08F67 A0 10                     	LDY #$10
08F69                           
08F69                           loc_BANK2_8E27:
08F69 84 F4                     	STY byte_RAM_F4
08F6B A9 8E                     	LDA #$8E
08F6D A4 07                     	LDY byte_RAM_7
08F6F F0 02                     	BEQ loc_BANK2_8E31
08F71                           
08F71 A9 92                     	LDA #$92
08F73                           
08F73                           loc_BANK2_8E31:
08F73 20 28 9E                  	JSR RenderSprite_DrawObject
08F76                           
08F76 A5 07                     	LDA byte_RAM_7
08F78 A8                        	TAY
08F79 4A                        	LSR A
08F7A 18                        	CLC
08F7B 6D 2C 04                  	ADC SpriteTempScreenY
08F7E 69 08                     	ADC #$08
08F80 C0 00                     	CPY #$00
08F82 D0 02                     	BNE loc_BANK2_8E44
08F84                           
08F84 69 07                     	ADC #$07
08F86                           
08F86                           loc_BANK2_8E44:
08F86 85 00                     	STA byte_RAM_0
08F88 20 2F FC                  	JSR loc_BANKF_FAFE
08F8B                           
08F8B A2 9A                     	LDX #$9A
08F8D A5 07                     	LDA byte_RAM_7
08F8F F0 09                     	BEQ loc_BANK2_8E58
08F91                           
08F91 AD B4 04                  	LDA HawkmouthClosing
08F94 F0 02                     	BEQ loc_BANK2_8E56
08F96                           
08F96 A0 10                     	LDY #$10
08F98                           
08F98                           loc_BANK2_8E56:
08F98 A2 96                     	LDX #$96
08F9A                           
08F9A                           loc_BANK2_8E58:
08F9A 84 F4                     	STY byte_RAM_F4
08F9C 20 61 9F                  	JSR SetSpriteTiles
08F9F                           
08F9F 20 61 9F                  	JSR SetSpriteTiles
08FA2                           
08FA2                           loc_BANK2_8E60:
08FA2 A6 12                     	LDX byte_RAM_12
08FA4 60                        	RTS
08FA5                           
08FA5                           ; End of function sub_BANK2_8E13
08FA5                           
08FA5                           ; ---------------------------------------------------------------------------
08FA5                           
08FA5                           EnemyInit_Trouter:
08FA5 20 76 8E                  	JSR EnemyInit_Stationary
08FA8                           
08FA8 B5 29                     	LDA ObjectXLo, X
08FAA 69 08                     	ADC #$08
08FAC 95 29                     	STA ObjectXLo, X
08FAE B5 33                     	LDA ObjectYLo, X
08FB0 4A                        	LSR A
08FB1 4A                        	LSR A
08FB2 4A                        	LSR A
08FB3 4A                        	LSR A
08FB4 95 B1                     	STA EnemyArray_B1, X
08FB6 A9 80                     	LDA #$80
08FB8 95 86                     	STA EnemyTimer, X
08FBA                           
08FBA                           locret_BANK2_8E78:
08FBA 60                        	RTS
08FBB                           
08FBB                           
08FBB                           byte_BANK2_8E79:
08FBB AC                        	.db $AC
08FBC AE                        	.db $AE
08FBD B1                        	.db $B1
08FBE B5                        	.db $B5
08FBF B8                        	.db $B8
08FC0 BC                        	.db $BC
08FC1 C0                        	.db $C0
08FC2 C4                        	.db $C4
08FC3 C8                        	.db $C8
08FC4 CC                        	.db $CC
08FC5 D2                        	.db $D2
08FC6 D8                        	.db $D8
08FC7                           
08FC7                           byte_BANK2_8E85:
08FC7 92                        	.db $92
08FC8 EA                        	.db $EA
08FC9                           
08FC9                           
08FC9                           EnemyBehavior_Trouter:
08FC9 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
08FCC                           
08FCC F6 9F                     	INC ObjectAnimationTimer, X
08FCE 20 F7 9A                  	JSR EnemyBehavior_Check42FPhysicsInterrupt
08FD1                           
08FD1 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
08FD4                           
08FD4 A9 09                     	LDA #$09
08FD6 B4 47                     	LDY ObjectYVelocity, X
08FD8 30 02                     	BMI loc_BANK2_8E9A
08FDA                           
08FDA A9 89                     	LDA #$89
08FDC                           
08FDC                           loc_BANK2_8E9A:
08FDC 95 65                     	STA ObjectAttributes, X
08FDE A4 EC                     	LDY IsHorizontalLevel
08FE0 B5 33                     	LDA ObjectYLo, X
08FE2 D9 C7 8F                  	CMP byte_BANK2_8E85, Y
08FE5 90 11                     	BCC loc_BANK2_8EB6
08FE7                           
08FE7 B4 86                     	LDY EnemyTimer, X
08FE9 D0 CF                     	BNE locret_BANK2_8E78
08FEB                           
08FEB 95 33                     	STA ObjectYLo, X
08FED B4 B1                     	LDY EnemyArray_B1, X
08FEF B9 BB 8F                  	LDA byte_BANK2_8E79, Y
08FF2 95 47                     	STA ObjectYVelocity, X
08FF4 A9 C0                     	LDA #$C0
08FF6 95 86                     	STA EnemyTimer, X
08FF8                           
08FF8                           loc_BANK2_8EB6:
08FF8 20 00 96                  	JSR sub_BANK2_9430
08FFB                           
08FFB F6 47                     	INC ObjectYVelocity, X
08FFD 4C 90 9D                  	JMP RenderSprite
09000                           
09000                           
09000                           Enemy_Hoopstar_YVelocity:
09000 FA                        	.db $FA ; up
09001 0C                        	.db $0C ; down
09002                           
09002                           Enemy_Hoopstar_Attributes:
09002 91                        	.db $91 ; up
09003 11                        	.db $11 ; down
09004                           
09004                           
09004                           EnemyBehavior_Hoopstar:
09004 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
09007                           
09007 F6 9F                     	INC ObjectAnimationTimer, X
09009 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0900C                           
0900C 20 90 9D                  	JSR RenderSprite
0900F                           
0900F 20 F7 9A                  	JSR EnemyBehavior_Check42FPhysicsInterrupt
09012                           
09012 A9 00                     	LDA #$00
09014 95 3D                     	STA ObjectXVelocity, X
09016 20 1B B5                  	JSR sub_BANK3_B4E2
09019                           
09019 BC 77 04                  	LDY EnemyArray_477, X
0901C 90 10                     	BCC loc_BANK2_8EEC
0901E                           
0901E B5 33                     	LDA ObjectYLo, X
09020 C5 CB                     	CMP ScreenYLo
09022 B5 1F                     	LDA ObjectYHi, X
09024 E5 CA                     	SBC ScreenYHi
09026 F0 0D                     	BEQ loc_BANK2_8EF3
09028                           
09028 0A                        	ASL A
09029 2A                        	ROL A
0902A 29 01                     	AND #$01
0902C 10 03                     	BPL loc_BANK2_8EEF
0902E                           
0902E                           loc_BANK2_8EEC:
0902E 98                        	TYA
0902F 49 01                     	EOR #$01
09031                           
09031                           loc_BANK2_8EEF:
09031 9D 77 04                  	STA EnemyArray_477, X
09034 A8                        	TAY
09035                           
09035                           loc_BANK2_8EF3:
09035 B9 00 90                  	LDA Enemy_Hoopstar_YVelocity, Y
09038 95 47                     	STA ObjectYVelocity, X
0903A B9 02 90                  	LDA Enemy_Hoopstar_Attributes, Y
0903D 95 65                     	STA ObjectAttributes, X
0903F 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
09042                           
09042 A5 0F                     	LDA byte_RAM_F
09044 69 10                     	ADC #$10
09046 C9 20                     	CMP #$20
09048 B0 02                     	BCS loc_BANK2_8F0A
0904A                           
0904A 16 47                     	ASL ObjectYVelocity, X
0904C                           
0904C                           loc_BANK2_8F0A:
0904C 4C F0 A0                  	JMP ApplyObjectPhysicsY
0904F                           
0904F                           ; ---------------------------------------------------------------------------
0904F                           
0904F                           EnemyBehavior_00:
0904F A5 EF                     	LDA byte_RAM_EF
09051 F0 03                     	BEQ loc_BANK2_8F14
09053                           
09053 4C 39 8A                  	JMP EnemyDestroy
09056                           
09056                           ; ---------------------------------------------------------------------------
09056                           
09056                           loc_BANK2_8F14:
09056 A0 FC                     	LDY #$FC
09058 A5 10                     	LDA byte_RAM_10
0905A 29 20                     	AND #$20
0905C F0 02                     	BEQ loc_BANK2_8F1E
0905E                           
0905E A0 04                     	LDY #$04
09060                           
09060                           loc_BANK2_8F1E:
09060 94 3D                     	STY ObjectXVelocity, X
09062 A9 F8                     	LDA #$F8
09064 95 47                     	STA ObjectYVelocity, X
09066 20 00 96                  	JSR sub_BANK2_9430
09069                           
09069                           RenderSprite_Heart:
09069 A5 EE                     	LDA byte_RAM_EE
0906B 29 08                     	AND #$08
0906D 05 EF                     	ORA byte_RAM_EF
0906F D0 1F                     	BNE RenderSprite_Heart_Exit
09071                           
09071                           	; This part of the code seems to only run
09071                           	; if the graph we're trying to draw is
09071                           	; a heart sprite ...
09071 A4 F4                     	LDY byte_RAM_F4
09073 AD 2C 04                  	LDA SpriteTempScreenY
09076 99 00 02                  	STA SpriteDMAArea, Y
09079 AD 29 04                  	LDA SpriteTempScreenX
0907C 99 03 02                  	STA SpriteDMAArea + 3, Y
0907F                           SetHeartSprite:
0907F A9 D8                     	LDA #$D8
09081 99 01 02                  	STA SpriteDMAArea + 1, Y
09084 A5 10                     	LDA byte_RAM_10
09086 29 20                     	AND #$20
09088 49 20                     	EOR #$20
0908A 0A                        	ASL A
0908B 09 01                     	ORA #$01
0908D 99 02 02                  	STA SpriteDMAArea + 2, Y
09090                           
09090                           RenderSprite_Heart_Exit:
09090 60                        	RTS
09091                           
09091                           
09091                           Enemy_Birdo_Attributes:
09091 43                        	.db ObjAttrib_Palette3 | ObjAttrib_16x32
09092 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32
09093 42                        	.db ObjAttrib_Palette2 | ObjAttrib_16x32
09094                           
09094                           
09094                           ;
09094                           ; Initializes a Birdo (and a few other boss enemies)
09094                           ;
09094                           EnemyInit_Birdo:
09094 20 CF 84                  	JSR EnemyInit_Basic
09097                           
09097 A0 00                     	LDY #$00 ; Default to the Gray Birdo (fires only fireballs)
09099 B5 29                     	LDA ObjectXLo, X ; Check if this is a special Birdo.
0909B C9 A0                     	CMP #$A0 ; means this is a Pink Birdo (fires only eggs, slowly)
0909D F0 06                     	BEQ EnemyInit_Birdo_SetType
0909F                           
0909F C8                        	INY
090A0 C9 B0                     	CMP #$B0 ; tile x-position on page = $B
090A2 F0 01                     	BEQ EnemyInit_Birdo_SetType ; If yes, this is a Red Birdo (fires eggs and fireballs)
090A4                           
090A4 C8                        	INY
090A5                           
090A5                           EnemyInit_Birdo_SetType:
090A5 94 79                     	STY EnemyVariable, X ; Set the Birdo type
090A7 B9 91 90                  	LDA Enemy_Birdo_Attributes, Y
090AA 95 65                     	STA ObjectAttributes, X
090AC A9 02                     	LDA #$02
090AE 9D 65 04                  	STA EnemyHP, X
090B1                           IFDEF PLAYER_STUFF
090B1 20 BE AD                      JSR Set_CustomBossHp
090B4                           ENDIF
090B4                           
090B4                           EnemyInit_Birdo_Exit:
090B4 B5 15                     	LDA ObjectXHi, X
090B6 9D EF 04                  	STA unk_RAM_4EF, X
090B9 60                        	RTS
090BA                           
090BA                           
090BA                           ProjectileLaunchXOffsets:
090BA FE                        	.db $FE
090BB F8                        	.db $F8
090BC                           
090BC                           
090BC                           EnemyBehavior_Birdo:
090BC 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
090BF                           IFDEF PLAYER_STUFF
090BF BD 20 76                      LDA Enemy_Champion, X
090C2 CD 0B EF                      CMP ChampionChance
090C5 B0 03                         BCS +
090C7 20 AF 95                      JSR EnemyBehavior_NinjiRunning
090CA                           +
090CA                           ENDIF
090CA                           
090CA 20 36 B5                  	JSR ObjectTileCollision
090CD                           
090CD A9 00                     	LDA #$00
090CF 95 3D                     	STA ObjectXVelocity, X
090D1 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
090D4                           
090D4 C8                        	INY
090D5 94 6F                     	STY EnemyMovementDirection, X
090D7 20 90 9D                  	JSR RenderSprite
090DA                           
090DA B5 5B                     	LDA EnemyCollision, X
090DC 29 04                     	AND #CollisionFlags_Down
090DE F0 43                     	BEQ loc_BANK2_8FD2
090E0                           
090E0 20 AC 97                  	JSR ResetObjectYVelocity
090E3                           
090E3 A5 10                     	LDA byte_RAM_10
090E5 D0 0D                     	BNE loc_BANK2_8FA3
090E7                           
090E7 A9 E0                     	LDA #$E0
090E9 95 47                     	STA ObjectYVelocity, X
090EB D0 36                     	BNE loc_BANK2_8FD2
090ED                           
090ED                           
090ED                           ;; expand on this later
090ED                           BirdoSpitDelay:
090ED 7F                        	.db $7F
090EE 3F                        	.db $3F
090EF 3F                        	.db $3F
090F0                           
090F0                           
090F0                           ; Health-based Birdo egg/fire chances.
090F0                           ; If PRNG & $1F >= this, shoot an egg
090F0                           ; Otherwise, shoot a fireball
090F0                           BirdoHealthEggProbabilities:
090F0 08                        	.db $08
090F1 06                        	.db $06
090F2 04                        	.db $04
090F3                           IFDEF PLAYER_STUFF
090F3 08                        	.db $08
090F4                           ENDIF
090F4                           
090F4                           
090F4                           loc_BANK2_8FA3:
090F4 B4 79                     	LDY EnemyVariable, X
090F6 B9 ED 90                  	LDA BirdoSpitDelay, Y
090F9 25 10                     	AND byte_RAM_10
090FB D0 0A                     	BNE loc_BANK2_8FB6
090FD                           
090FD A5 EE                     	LDA byte_RAM_EE
090FF 29 0C                     	AND #$C
09101 D0 04                     	BNE loc_BANK2_8FB6
09103                           
09103 A9 1C                     	LDA #$1C
09105 95 86                     	STA EnemyTimer, X
09107                           
09107                           loc_BANK2_8FB6:
09107 B4 86                     	LDY EnemyTimer, X
09109 D0 1B                     	BNE BirdoBehavior_SpitProjectile
0910B                           
0910B F6 B1                     	INC EnemyArray_B1, X
0910D B5 B1                     	LDA EnemyArray_B1, X
0910F 29 40                     	AND #$40
09111 F0 5C                     	BEQ loc_BANK2_901B
09113                           
09113 20 E3 8B                  	JSR IncrementAnimationTimerBy2
09116                           
09116 A9 0A                     	LDA #$0A
09118 B4 B1                     	LDY EnemyArray_B1, X
0911A 30 02                     	BMI loc_BANK2_8FCD
0911C                           
0911C A9 F6                     	LDA #$F6
0911E                           
0911E                           loc_BANK2_8FCD:
0911E 95 3D                     	STA ObjectXVelocity, X
09120 4C F5 A0                  	JMP ApplyObjectPhysicsX
09123                           
09123                           ; ---------------------------------------------------------------------------
09123                           
09123                           loc_BANK2_8FD2:
09123 4C 04 86                  	JMP ApplyObjectMovement_Vertical
09126                           
09126                           ; ---------------------------------------------------------------------------
09126                           
09126                           BirdoBehavior_SpitProjectile:
09126 C0 08                     	CPY #$08
09128 D0 45                     	BNE loc_BANK2_901B
0912A                           
0912A A9 01                     	LDA #SoundEffect1_BirdoShot
0912C 8D 02 06                  	STA SoundEffectQueue1
0912F 20 C3 97                  	JSR sub_BANK2_95E5
09132                           
09132 30 3B                     	BMI loc_BANK2_901B
09134                           
09134                           IFNDEF PLAYER_STUFF
09134                           	LDY EnemyHP, X
09134                           ENDIF
09134                           IFDEF PLAYER_STUFF
09134 BD 65 04                  	LDA EnemyHP, X
09137 29 03                         AND #$3
09139 A8                            TAY
0913A                           ENDIF
0913A B5 79                     	LDA EnemyVariable, X
0913C A6 00                     	LDX byte_RAM_0
0913E C9 02                     	CMP #$02 ; If we're a Gray Birdo, always shoot fire
09140 F0 0E                     	BEQ _Birdo_SpitFire
09142                           
09142 C9 01                     	CMP #$01 ; If we're a Pink Birdo, always shoot eggs
09144 D0 10                     	BNE _Birdo_SpitEgg
09146                           
09146 AD AE 05                  	LDA PseudoRNGValues + 2 ; Otherwise, randomly determine what to fire
09149 29 1F                     	AND #$1F ; If PRNG & $1F >= our health-probability number,
0914B D9 F0 90                  	CMP BirdoHealthEggProbabilities, Y ; fire an egg out
0914E B0 06                     	BCS _Birdo_SpitEgg ; Otherwise just fall through to barfing fire
09150                           
09150                           _Birdo_SpitFire:
09150 F6 79                     	INC EnemyVariable, X ; Shoot a fireball
09152 A9 20                     	LDA #Enemy_Fireball
09154 D0 02                     	BNE EnemyBehavior_SpitProjectile
09156                           
09156                           _Birdo_SpitEgg:
09156 A9 1E                     	LDA #Enemy_Egg ; Shoot an egg
09158                           
09158                           
09158                           ;
09158                           ; Spits an object (used by Birdo and Autobomb)
09158                           ;
09158                           ; Input
09158                           ;   A = Object type
09158                           ;   X = Enemy index
09158                           ;
09158                           EnemyBehavior_SpitProjectile:
09158 95 90                     	STA ObjectType, X
0915A B5 33                     	LDA ObjectYLo, X
0915C 18                        	CLC
0915D 69 03                     	ADC #$03
0915F 95 33                     	STA ObjectYLo, X
09161 B4 6F                     	LDY EnemyMovementDirection, X
09163 B5 29                     	LDA ObjectXLo, X
09165 79 B9 90                  	ADC ProjectileLaunchXOffsets - 1, Y
09168 95 29                     	STA ObjectXLo, X
0916A 20 B0 84                  	JSR SetEnemyAttributes
0916D                           
0916D A6 12                     	LDX byte_RAM_12
0916F                           
0916F                           loc_BANK2_901B:
0916F 4C 90 9D                  	JMP RenderSprite
09172                           
09172                           
09172                           ; ---------------------------------------------------------------------------
09172 18                        	.db $18
09173 E8                        	.db $E8
09174                           
09174                           byte_BANK2_9020:
09174 FE                        	.db $FE
09175 F8                        	.db $F8
09176 F0                        	.db $F0
09177 E8                        	.db $E8
09178                           ; ---------------------------------------------------------------------------
09178                           
09178                           EnemyBehavior_Coin:
09178 20 E3 8B                  	JSR IncrementAnimationTimerBy2
0917B                           IFDEF PLAYER_STUFF
0917B 4C B9 91                      JMP EnemyBehavior_Mushroom
0917E                           ENDIF
0917E                           
0917E                           IFNDEF PLAYER_STUFF
0917E                           	LDA ObjectYVelocity, X
0917E                           	CMP #$EA
0917E                           	BNE EnemyBehavior_Mushroom1up
0917E                           
0917E                           	LDA #SoundEffect2_CoinGet
0917E                           	STA SoundEffectQueue2
0917E                           ENDIF
0917E                           
0917E                           EnemyBehavior_Mushroom1up:
0917E B5 47                     	LDA ObjectYVelocity, X
09180 C9 10                     	CMP #$10
09182 30 35                     	BMI EnemyBehavior_Mushroom
09184                           
09184 20 27 93                  	JSR TurnIntoPuffOfSmoke
09187                           
09187 B5 90                     	LDA ObjectType, X
09189 C9 40                     	CMP #Enemy_Mushroom1up
0918B F0 04                     	BEQ Award1upMushroom
0918D                           
0918D EE 2B 06                  	INC SlotMachineCoins
09190 60                        	RTS
09191                           
09191                           ; ---------------------------------------------------------------------------
09191                           
09191                           Award1upMushroom:
09191                           IFNDEF PLAYER_STUFF
09191                           	INC Mushroom1upPulled
09191                           ENDIF
09191                           IFDEF PLAYER_STUFF
09191 8A                            TXA
09192 48                            PHA
09193 A6 8F                         LDX CurrentCharacter
09195 FE F8 73                      INC PlayerIndependentLives, X
09198 68                            PLA
09199 AA                            TAX
0919A                           ENDIF
0919A EE ED 04                  	INC ExtraLives
0919D D0 03                     	BNE loc_BANK2_9050 ; Check if lives overflow. If so, reduce by one again
0919F                           
0919F CE ED 04                  	DEC ExtraLives
091A2                           
091A2                           loc_BANK2_9050:
091A2 A9 10                     	LDA #SoundEffect1_1UP
091A4 8D 02 06                  	STA SoundEffectQueue1
091A7 60                        	RTS
091A8                           
091A8                           ; ---------------------------------------------------------------------------
091A8                           
091A8                           EnemyBehavior_CrystalBall:
091A8 EE 2C 04                  	INC SpriteTempScreenY
091AB 20 3E 93                  	JSR AttachObjectToBirdo
091AE                           IFDEF PLAYER_STUFF
091AE AD B5 04                      LDA CrystalAndHawkmouthOpenSize
091B1 F0 06                         BEQ +
091B3 A9 05                         LDA #EnemyState_PuffOfSmoke
091B5 95 86                         STA EnemyTimer, X
091B7 95 51                         STA EnemyState, X
091B9                           +
091B9                           ENDIF
091B9                           
091B9                           ;
091B9                           ; Behavior for objects that turn into smoke after you pick them up
091B9                           ; (eg. mushrooms, crystal ball, stopwatch)
091B9                           ;
091B9                           EnemyBehavior_Mushroom:
091B9 B5 A8                     	LDA ObjectBeingCarriedTimer, X
091BB C9 01                     	CMP #$01
091BD D0 04                     	BNE EnemyBehavior_Mushroom_StayMaterial
091BF                           
091BF A5 9A                     	LDA PlayerDucking
091C1 F0 03                     	BEQ EnemyBehavior_Mushroom_PickUp
091C3                           
091C3                           EnemyBehavior_Mushroom_StayMaterial:
091C3 4C 2A 92                  	JMP EnemyBehavior_Bomb
091C6                           
091C6                           EnemyBehavior_Mushroom_PickUp:
091C6 20 ED 97                  	JSR CarryObject
091C9                           
091C9 A9 00                     	LDA #$00
091CB 85 9C                     	STA HoldingItem
091CD 95 A8                     	STA ObjectBeingCarriedTimer, X
091CF 20 27 93                  	JSR TurnIntoPuffOfSmoke
091D2                           
091D2 B5 90                     	LDA ObjectType, X
091D4 C9 44                     	CMP #Enemy_CrystalBall
091D6 D0 21                     	BNE EnemyBehavior_PickUpNotCrystalBall
091D8                           
091D8 AD B5 04                  	LDA CrystalAndHawkmouthOpenSize
091DB D0 1B                     	BNE EnemyBehavior_CrystalBall_Exit
091DD                           
091DD                           IFDEF FLAGSET
091DD 8A                            TXA
091DE 48                            PHA
091DF A2 80                         LDX #CustomBitFlag_Crystal
091E1 20 83 F1                      JSR ApplyFlagLevel
091E4 F0 03                         BEQ +
091E6 EE E8 73                      INC Level_Count_Crystals
091E9                           +
091E9 68                            PLA
091EA AA                            TAX
091EB                           ENDIF
091EB A9 20                     	LDA #Music2_CrystalGetFanfare
091ED 8D 03 06                  	STA MusicQueue2
091F0 A9 60                     	LDA #$60
091F2 8D B6 04                  	STA HawkmouthOpenTimer
091F5 EE B5 04                  	INC CrystalAndHawkmouthOpenSize
091F8                           
091F8                           EnemyBehavior_CrystalBall_Exit:
091F8 60                        	RTS
091F9                           
091F9                           EnemyBehavior_PickUpNotCrystalBall:
091F9 C9 40                     	CMP #Enemy_Mushroom1up
091FB F0 17                     	BEQ EnemyBehavior_PickUpMushroom1up
091FD                           
091FD C9 46                     	CMP #Enemy_Stopwatch
091FF F0 20                     	BEQ EnemyBehavior_PickUpStopwatch
09201                           
09201 C9 3F                     	CMP #Enemy_Mushroom
09203 D0 13                     	BNE EnemyBehavior_PickUpNotMushroom
09205                           
09205                           EnemyBehavior_PickUpMushroom:
09205                           IFDEF PLAYER_STUFF 
09205 20 3B EA                      JSR ProcessCustomPowerupAward
09208 A6 12                         LDX byte_RAM_12
0920A A9 39                         LDA #Enemy_MushroomBlock
0920C 95 90                         STA ObjectType, X
0920E                           ENDIF
0920E                           IFNDEF FLAGSET
0920E                           	LDX EnemyVariable
0920E                           	INC Mushroom1Pulled, X
0920E                           	LDX byte_RAM_12
0920E                           	INC PlayerMaxHealth
0920E                           	JSR RestorePlayerToFullHealth
0920E                           ENDIF
0920E                           
0920E A9 01                     	LDA #Music2_MushroomGetJingle
09210 8D 03 06                  	STA MusicQueue2
09213 60                        	RTS
09214                           
09214                           EnemyBehavior_PickUpMushroom1up:
09214 A9 09                     	LDA #$09
09216 95 65                     	STA ObjectAttributes, X
09218                           
09218                           EnemyBehavior_PickUpNotMushroom:
09218 A9 E0                     	LDA #$E0
0921A 95 47                     	STA ObjectYVelocity, X
0921C A9 01                     	LDA #$01
0921E 95 51                     	STA EnemyState, X
09220 60                        	RTS
09221                           
09221                           EnemyBehavior_PickUpStopwatch:
09221 A9 FF                     	LDA #$FF
09223 8D FF 04                  	STA StopwatchTimer
09226 60                        	RTS
09227                           
09227                           
09227                           
09227                           EnemyBehavior_Key:
09227 20 3E 93                  	JSR AttachObjectToBirdo
0922A                           
0922A                           ;
0922A                           ; Behavior for objects that have background collision detection
0922A                           ;
0922A                           EnemyBehavior_Bomb:
0922A                           IFDEF PLAYER_STUFF
0922A BD 10 76                      LDA Enemy_Fireball_Hits, X
0922D 29 40                         AND #ProjChar_PuffEnemy
0922F F0 09                         BEQ +
09231                               
09231 B5 3D                     	LDA ObjectXVelocity, X
09233 D0 05                     	BNE +
09235 95 47                     	STA ObjectYVelocity, X
09237 20 3E DF                  	JSR SnapEnemy
0923A                           +
0923A                           ENDIF
0923A 20 36 B5                  	JSR ObjectTileCollision
0923D                           
0923D B5 5B                     	LDA EnemyCollision, X
0923F 48                        	PHA
09240 35 6F                     	AND EnemyMovementDirection, X
09242 F0 0C                     	BEQ loc_BANK2_90D9
09244                           
09244 20 56 A1                  	JSR EnemyBehavior_TurnAround
09247                           
09247 20 80 97                  	JSR HalfObjectVelocityX
0924A 20 80 97                  	JSR HalfObjectVelocityX
0924D 20 80 97                  	JSR HalfObjectVelocityX
09250                           
09250                           loc_BANK2_90D9:
09250 68                        	PLA
09251 29 04                     	AND #$04
09253 F0 1D                     	BEQ loc_BANK2_90FB
09255                           
09255 B5 47                     	LDA ObjectYVelocity, X
09257                           
09257 C9 09                     	CMP #$09
09259 90 0E                     	BCC loc_BANK2_90F2
0925B                           
0925B 4A                        	LSR A
0925C 4A                        	LSR A
0925D 4A                        	LSR A
0925E 4A                        	LSR A
0925F A8                        	TAY
09260 B9 74 91                  	LDA byte_BANK2_9020, Y
09263 20 7A 97                  	JSR sub_BANK2_95AA
09266                           
09266 4C 72 92                  	JMP loc_BANK2_90FB
09269                           
09269                           ; ---------------------------------------------------------------------------
09269                           
09269                           loc_BANK2_90F2:
09269 20 AC 97                  	JSR ResetObjectYVelocity
0926C                           
0926C A5 0B                     	LDA byte_RAM_B
0926E D0 02                     	BNE loc_BANK2_90FB
09270                           
09270 95 3D                     	STA ObjectXVelocity, X
09272                           
09272                           loc_BANK2_90FB:
09272 B5 90                     	LDA ObjectType, X
09274 C9 37                     	CMP #Enemy_Bomb
09276 D0 30                     	BNE EnemyBehavior_Vegetable
09278                           
09278 B5 86                     	LDA EnemyTimer, X
0927A D0 1D                     	BNE loc_BANK2_9122
0927C                           
0927C B4 A8                     	LDY ObjectBeingCarriedTimer, X
0927E F0 04                     	BEQ EnemyBehavior_Bomb_Explode
09280                           
09280 85 9C                     	STA HoldingItem
09282 95 A8                     	STA ObjectBeingCarriedTimer, X
09284                           
09284                           EnemyBehavior_Bomb_Explode:
09284 A9 04                     	LDA #EnemyState_BombExploding
09286 95 51                     	STA EnemyState, X
09288 A9 20                     	LDA #$20
0928A 95 86                     	STA EnemyTimer, X
0928C 8D C6 04                  	STA SkyFlashTimer
0928F A9 01                     	LDA #DPCM_DoorOpenBombBom
09291 8D 01 06                  	STA DPCMQueue
09294 4A                        	LSR A
09295                           	; A = $00
09295 9D 2F 04                  	STA EnemyArray_42F, X
09298 60                        	RTS
09299                           
09299                           ; ---------------------------------------------------------------------------
09299                           
09299                           loc_BANK2_9122:
09299 C9 40                     	CMP #Enemy_Mushroom1up
0929B B0 0B                     	BCS EnemyBehavior_Vegetable
0929D                           
0929D 4A                        	LSR A
0929E 90 08                     	BCC EnemyBehavior_Vegetable
092A0                           
092A0 F6 65                     	INC ObjectAttributes, X
092A2 B5 65                     	LDA ObjectAttributes, X
092A4 29 FB                     	AND #$FB
092A6 95 65                     	STA ObjectAttributes, X
092A8                           
092A8                           EnemyBehavior_Vegetable:
092A8 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
092AB                           
092AB 20 FC 85                  	JSR ApplyObjectMovement
092AE                           
092AE                           RenderSprite_VegetableLarge:
092AE B5 B1                     	LDA EnemyArray_B1, X
092B0 D0 03                     	BNE loc_BANK2_913E
092B2                           
092B2 4C 1C 9E                  	JMP RenderSprite_NotAlbatoss
092B5                           
092B5                           ; ---------------------------------------------------------------------------
092B5                           
092B5                           loc_BANK2_913E:
092B5 4C 28 9E                  	JMP RenderSprite_DrawObject
092B8                           
092B8                           ; ---------------------------------------------------------------------------
092B8                           
092B8                           EnemyBehavior_SubspacePotion:
092B8 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
092BB                           
092BB 20 36 B5                  	JSR ObjectTileCollision
092BE                           
092BE B5 5B                     	LDA EnemyCollision, X
092C0 48                        	PHA
092C1 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
092C3 F0 09                     	BEQ EnemyBehavior_SubspacePotion_CheckGroundCollision
092C5                           
092C5 20 56 A1                  	JSR EnemyBehavior_TurnAround
092C8                           
092C8 20 80 97                  	JSR HalfObjectVelocityX
092CB 20 80 97                  	JSR HalfObjectVelocityX
092CE                           
092CE                           EnemyBehavior_SubspacePotion_CheckGroundCollision:
092CE 68                        	PLA
092CF 29 04                     	AND #CollisionFlags_Down
092D1 F0 D5                     	BEQ EnemyBehavior_Vegetable
092D3                           
092D3 20 AC 97                  	JSR ResetObjectYVelocity
092D6                           
092D6 B5 33                     	LDA ObjectYLo, X
092D8 38                        	SEC
092D9 E9 10                     	SBC #$10
092DB 95 33                     	STA ObjectYLo, X
092DD B5 29                     	LDA ObjectXLo, X
092DF 69 07                     	ADC #$07
092E1 29 F0                     	AND #$F0
092E3 95 29                     	STA ObjectXLo, X
092E5 B5 15                     	LDA ObjectXHi, X
092E7 69 00                     	ADC #$00
092E9 95 15                     	STA ObjectXHi, X
092EB A9 10                     	LDA #$10
092ED 9D 53 04                  	STA EnemyArray_453, X
092F0 A9 02                     	LDA #SoundEffect1_PotionDoorBong
092F2 8D 02 06                  	STA SoundEffectQueue1
092F5 F6 B1                     	INC EnemyArray_B1, X
092F7 A9 3C                     	LDA #Enemy_SubspaceDoor
092F9 95 90                     	STA ObjectType, X
092FB 20 B0 84                  	JSR SetEnemyAttributes
092FE                           
092FE A9 10                     	LDA #$10
09300 8D BB 05                  	STA byte_RAM_5BB
09303                           
09303                           	; No Subspace Doors allowed in vertical levels
09303                           IFNDEF PLAYER_STUFF_JAR
09303 A5 EC                     	LDA IsHorizontalLevel
09305 D0 08                     	BNE loc_BANK2_9198
09307                           
09307 A9 40                     	LDA #DPCM_BossHurt
09309 8D 01 06                  	STA DPCMQueue
0930C 20 39 8A                  	JSR EnemyDestroy
0930F                           ENDIF
0930F                           
0930F                           loc_BANK2_9198:
0930F 20 82 94                  	JSR CreateEnemy
09312                           
09312 30 27                     	BMI TurnIntoPuffOfSmoke_Exit
09314                           
09314 A4 00                     	LDY byte_RAM_0
09316 B5 29                     	LDA ObjectXLo, X
09318 99 29 00                  	STA ObjectXLo, Y
0931B B5 15                     	LDA ObjectXHi, X
0931D 99 15 00                  	STA ObjectXHi, Y
09320 A9 41                     	LDA #$41
09322 99 65 00                  	STA ObjectAttributes, Y
09325 98                        	TYA
09326 AA                        	TAX
09327                           
09327                           
09327                           ;
09327                           ; Turns an object into a puff of smoke
09327                           ;
09327                           ; Input
09327                           ;   X = enemy index of object to poof
09327                           ;
09327                           TurnIntoPuffOfSmoke:
09327                           IFDEF PLAYER_STUFF_FAKE
09327                           	LDA ObjectAttributes, X ; Get current object sprite attributes...
09327                           	AND #ObjAttrib_Horizontal | ObjAttrib_FrontFacing | ObjAttrib_Mirrored | ObjAttrib_BehindBackground | ObjAttrib_16x32 | ObjAttrib_UpsideDown
09327                           	ORA #ObjAttrib_Palette1
09327                           	STA ObjectAttributes, X
09327                           	LDA #EnemyState_BlockFizzle
09327                           	STA EnemyState, X
09327                           	STA ObjectAnimationTimer, X ; No idea what this address is for
09327                           	LDA #$14
09327                           	STA EnemyTimer, X
09327                               RTS
09327                           ENDIF
09327                           TurnIntoPuffOfSmoke_Proper:
09327 B5 65                     	LDA ObjectAttributes, X ; Get current object sprite attributes...
09329 29 FC                     	AND #ObjAttrib_Horizontal | ObjAttrib_FrontFacing | ObjAttrib_Mirrored | ObjAttrib_BehindBackground | ObjAttrib_16x32 | ObjAttrib_UpsideDown
0932B 09 01                     	ORA #ObjAttrib_Palette1
0932D 95 65                     	STA ObjectAttributes, X
0932F A9 05                     	LDA #EnemyState_PuffOfSmoke
09331 95 51                     	STA EnemyState, X ; WINNERS DON'T SMOKE SHROOMS
09333 95 9F                     	STA ObjectAnimationTimer, X ; No idea what this address is for
09335 A9 1F                     	LDA #$1F
09337 95 86                     	STA EnemyTimer, X ; Puff-of-smoke animation timer?
09339 A6 12                     	LDX byte_RAM_12
0933B                           
0933B                           TurnIntoPuffOfSmoke_Exit:
0933B 60                        	RTS
0933C                           
0933C                           
0933C                           byte_BANK2_91C5:
0933C F8                        	.db $F8
0933D 08                        	.db $08
0933E                           
0933E                           
0933E                           ;
0933E                           ; Look for a Birdo to attach to
0933E                           ;
0933E                           AttachObjectToBirdo:
0933E B5 79                     	LDA EnemyVariable, X
09340 D0 13                     	BNE AttachObjectToBirdo_Skip
09342                           
09342 A0 05                     	LDY #$05
09344                           AttachObjectToBirdo_Loop:
09344 B9 51 00                  	LDA EnemyState, Y
09347 C9 01                     	CMP #EnemyState_Alive
09349 D0 07                     	BNE AttachObjectToBirdo_NotLiveBirdo
0934B                           
0934B B9 90 00                  	LDA ObjectType, Y
0934E C9 1C                     	CMP #Enemy_Birdo
09350 F0 0A                     	BEQ AttachObjectToBirdo_DoAttach
09352                           
09352                           AttachObjectToBirdo_NotLiveBirdo:
09352 88                        	DEY
09353 10 EF                     	BPL AttachObjectToBirdo_Loop
09355                           
09355                           AttachObjectToBirdo_Skip:
09355 A9 01                     	LDA #$01
09357 95 79                     	STA EnemyVariable, X
09359 4C B0 84                  	JMP SetEnemyAttributes
0935C                           
0935C                           AttachObjectToBirdo_DoAttach:
0935C B9 15 00                  	LDA ObjectXHi, Y
0935F D5 15                     	CMP ObjectXHi, X
09361 D0 F2                     	BNE AttachObjectToBirdo_Skip
09363                           
09363 B9 29 00                  	LDA ObjectXLo, Y
09366 95 29                     	STA ObjectXLo, X
09368 B9 33 00                  	LDA ObjectYLo, Y
0936B 69 0E                     	ADC #$0E
0936D 95 33                     	STA ObjectYLo, X
0936F 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
09372                           
09372 B9 3C 93                  	LDA byte_BANK2_91C5, Y
09375 95 3D                     	STA ObjectXVelocity, X
09377 A9 E0                     	LDA #$E0
09379 95 47                     	STA ObjectYVelocity, X
0937B 68                        	PLA
0937C 68                        	PLA
0937D A9 07                     	LDA #%00000111
0937F 9D 6E 04                  	STA EnemyArray_46E, X
09382 A9 30                     	LDA #$30
09384 85 F4                     	STA byte_RAM_F4
09386 4C 90 9D                  	JMP RenderSprite
09389                           
09389                           
09389                           
09389                           byte_BANK2_9212:
09389 F0                        	.db $F0
0938A                           
0938A                           byte_BANK2_9213:
0938A FF                        	.db $FF
0938B 00                        	.db $00
0938C                           ; ---------------------------------------------------------------------------
0938C                           
0938C                           EnemyInit_AlbatossStartLeft:
0938C 20 CF 84                  	JSR EnemyInit_Basic
0938F                           
0938F A9 F0                     	LDA #$F0
09391 D0 05                     	BNE loc_BANK2_9221
09393                           
09393                           EnemyInit_AlbatossStartRight:
09393 20 CF 84                  	JSR EnemyInit_Basic
09396                           
09396 A9 10                     	LDA #$10
09398                           
09398                           loc_BANK2_9221:
09398 95 3D                     	STA ObjectXVelocity, X
0939A F6 B1                     	INC EnemyArray_B1, X
0939C B5 90                     	LDA ObjectType, X
0939E 38                        	SEC
0939F                           
0939F                           loc_BANK2_9228:
0939F E9 0B                     	SBC #$0B
093A1 A8                        	TAY
093A2 AD C0 04                  	LDA ScreenBoundaryLeftLo
093A5 79 89 93                  	ADC byte_BANK2_9212, Y
093A8 95 29                     	STA ObjectXLo, X
093AA AD BE 04                  	LDA ScreenBoundaryLeftHi
093AD 79 8A 93                  	ADC byte_BANK2_9213, Y
093B0 95 15                     	STA ObjectXHi, X
093B2 60                        	RTS
093B3                           
093B3                           ; ---------------------------------------------------------------------------
093B3                           
093B3                           EnemyBehavior_Albatoss:
093B3 20 67 9D                  	JSR RenderSprite_Albatoss
093B6                           
093B6 F6 9F                     	INC ObjectAnimationTimer, X
093B8 B5 B1                     	LDA EnemyArray_B1, X
093BA D0 2C                     	BNE loc_BANK2_9271
093BC                           
093BC B5 5B                     	LDA EnemyCollision, X
093BE 29 10                     	AND #CollisionFlags_Damage
093C0 D0 0B                     	BNE loc_BANK2_9256
093C2                           
093C2 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
093C5                           
093C5 A5 0F                     	LDA byte_RAM_F
093C7 69 30                     	ADC #$30
093C9 C9 60                     	CMP #$60
093CB B0 18                     	BCS loc_BANK2_926E
093CD                           
093CD                           loc_BANK2_9256:
093CD 20 82 94                  	JSR CreateEnemy
093D0                           
093D0 30 13                     	BMI loc_BANK2_926E
093D2                           
093D2 A6 00                     	LDX byte_RAM_0
093D4 A9 09                     	LDA #Enemy_BobOmb
093D6 95 90                     	STA ObjectType, X
093D8 B5 33                     	LDA ObjectYLo, X
093DA 69 10                     	ADC #$10
093DC 95 33                     	STA ObjectYLo, X
093DE 20 6C 85                  	JSR EnemyInit_Bobomb
093E1                           
093E1 A6 12                     	LDX byte_RAM_12
093E3 F6 B1                     	INC EnemyArray_B1, X
093E5                           
093E5                           loc_BANK2_926E:
093E5 4C EB 93                  	JMP loc_BANK2_9274
093E8                           
093E8                           ; ---------------------------------------------------------------------------
093E8                           
093E8                           loc_BANK2_9271:
093E8 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
093EB                           
093EB                           loc_BANK2_9274:
093EB 4C F5 A0                  	JMP ApplyObjectPhysicsX
093EE                           
093EE                           ; ---------------------------------------------------------------------------
093EE                           
093EE                           EnemyBehavior_AutobombFire:
093EE 20 00 94                  	JSR sub_BANK2_9289
093F1                           
093F1                           sub_BANK2_927A:
093F1 16 65                     	ASL ObjectAttributes, X
093F3 A5 10                     	LDA byte_RAM_10
093F5 4A                        	LSR A
093F6 4A                        	LSR A
093F7 4A                        	LSR A
093F8 76 65                     	ROR ObjectAttributes, X
093FA 60                        	RTS
093FB                           
093FB                           
093FB                           ; Unused?
093FB D0                        	.db $D0
093FC 03                        	.db $03
093FD                           
093FD                           
093FD                           EnemyBehavior_BulletAndEgg:
093FD 20 36 B5                  	JSR ObjectTileCollision
09400                           
09400                           sub_BANK2_9289:
09400 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
09403                           
09403                           IFDEF PLAYER_STUFF
09403 B5 86                         LDA EnemyTimer, X
09405 C9 01                         CMP #$1
09407 F0 42                         BEQ KoBullet
09409 A5 9C                         LDA HoldingItem ;; if holding this, apply to b1.  42f is used by player projectiles for easy collision (fix?)
0940B F0 07                         BEQ ++
0940D EC 2D 04                      CPX ObjectBeingCarriedIndex
09410 D0 02                         BNE ++
09412 95 B1                         STA EnemyArray_B1, X
09414                           ++
09414                           ENDIF
09414                           
09414 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
09417                           
09417                           IFNDEF PLAYER_STUFF
09417                           	LDA EnemyArray_B1, X
09417                           	ORA EnemyArray_42F, X
09417                           ENDIF
09417                           IFDEF PLAYER_STUFF
09417 B5 B1                     	LDA EnemyArray_B1, X
09419 D0 08                     	BNE +
0941B BD 10 76                      LDA Enemy_Fireball_Hits, X
0941E 30 08                         BMI loc_BANK2_9299
09420 BD 2F 04                  	LDA EnemyArray_42F, X
09423                           +
09423                           ENDIF
09423 F0 03                     	BEQ loc_BANK2_9299
09425                           
09425 4C F9 85                  	JMP RenderSpriteAndApplyObjectMovement
09428                           
09428                           ; ---------------------------------------------------------------------------
09428                           
09428                           loc_BANK2_9299:
09428                           IFDEF PLAYER_STUFF
09428 BD 10 76                      LDA Enemy_Fireball_Hits, X
0942B 30 0E                         BMI +
0942D                           ENDIF
0942D B5 47                     	LDA ObjectYVelocity, X
0942F 10 02                     	BPL loc_BANK2_929F
09431                           
09431 95 B1                     	STA EnemyArray_B1, X
09433                           
09433                           loc_BANK2_929F:
09433 B5 5B                     	LDA EnemyCollision, X
09435 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
09437 F0 3F                     	BEQ loc_BANK2_92BE
09439                           
09439 95 B1                     	STA EnemyArray_B1, X
0943B                           
0943B                           IFDEF PLAYER_STUFF ;; do this less verbosely
0943B                           +
0943B B5 5B                     	LDA EnemyCollision, X
0943D 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
0943F F0 37                     	BEQ loc_BANK2_92BE
09441                           
09441 BD 10 76                      LDA Enemy_Fireball_Hits, X
09444 29 40                         AND #ProjChar_PuffEnemy
09446 F0 03                     	BEQ +
09448 4C 78 94                      JMP loc_BANK2_92BE
0944B                           +
0944B                           KoBullet:
0944B BD 10 76                      LDA Enemy_Fireball_Hits, X
0944E 29 20                         AND #ProjChar_Disappear
09450 F0 03                     	BEQ +
09452 4C 39 8A                  	JMP EnemyDestroy
09455                           +
09455 BD 10 76                      LDA Enemy_Fireball_Hits, X
09458 29 08                         AND #ProjChar_Explosion
0945A F0 03                     	BEQ +
0945C 4C 84 92                  	JMP EnemyBehavior_Bomb_Explode
0945F                           +
0945F                           ENDIF
0945F                           
0945F B5 90                     	LDA ObjectType, X
09461 C9 1B                     	CMP #Enemy_Bullet
09463 D0 08                     	BNE loc_BANK2_92B5
09465                           
09465 A9 02                     	LDA #EnemyState_Dead
09467 95 51                     	STA EnemyState, X
09469 F6 33                     	INC ObjectYLo, X
0946B F6 33                     	INC ObjectYLo, X
0946D                           
0946D                           loc_BANK2_92B5:
0946D                           IFDEF PLAYER_STUFF
0946D F6 B1                         INC EnemyArray_B1, X
0946F                           ENDIF
0946F                               
0946F 20 56 A1                  	JSR EnemyBehavior_TurnAround
09472                           
09472 20 80 97                  	JSR HalfObjectVelocityX
09475                           
09475 20 80 97                  	JSR HalfObjectVelocityX
09478                           
09478                           loc_BANK2_92BE:
09478 20 F5 A0                  	JSR ApplyObjectPhysicsX
0947B                           
0947B 4C 90 9D                  	JMP RenderSprite
0947E                           
0947E                           ; End of function sub_BANK2_9289
0947E                           
0947E                           
0947E                           ;
0947E                           ; Creates a generic red Shyguy enemy and
0947E                           ; does some basic initialization for it.
0947E                           ;
0947E                           ; CreateEnemy_TryAllSlots checks all 9 object slots
0947E                           ; CreateEnemy only checks the first 6 object slots
0947E                           ;
0947E                           ; Output
0947E                           ;   N = enabled if no empty slot was found
0947E                           ;   Y = $FF if there no empty slot was found
0947E                           ;   byte_RAM_0 = slot used
0947E                           ;
0947E                           CreateEnemy_TryAllSlots:
0947E A0 08                     	LDY #$08
09480 D0 02                     	BNE CreateEnemy_FindSlot
09482                           
09482                           CreateEnemy:
09482 A0 05                     	LDY #$05
09484                           
09484                           CreateEnemy_FindSlot:
09484 B9 51 00                  	LDA EnemyState, Y
09487 F0 04                     	BEQ CreateEnemy_FoundSlot
09489                           
09489 88                        	DEY
0948A 10 F8                     	BPL CreateEnemy_FindSlot
0948C                           
0948C 60                        	RTS
0948D                           
0948D                           CreateEnemy_FoundSlot:
0948D A9 01                     	LDA #EnemyState_Alive
0948F 99 51 00                  	STA EnemyState, Y
09492 4A                        	LSR A
09493 99 9B 04                  	STA unk_RAM_49B, Y
09496 A9 01                     	LDA #Enemy_ShyguyRed
09498 99 90 00                  	STA ObjectType, Y
0949B B5 29                     	LDA ObjectXLo, X
0949D 69 05                     	ADC #$05
0949F 99 29 00                  	STA ObjectXLo, Y
094A2 B5 15                     	LDA ObjectXHi, X
094A4 69 00                     	ADC #$00
094A6 99 15 00                  	STA ObjectXHi, Y
094A9 B5 33                     	LDA ObjectYLo, X
094AB 99 33 00                  	STA ObjectYLo, Y
094AE B5 1F                     	LDA ObjectYHi, X
094B0 99 1F 00                  	STA ObjectYHi, Y
094B3 84 00                     	STY byte_RAM_0
094B5 98                        	TYA
094B6 AA                        	TAX
094B7                           
094B7 20 CF 84                  	JSR EnemyInit_Basic
094BA 20 EE 85                  	JSR UnlinkEnemyFromRawData
094BD                           
094BD A6 12                     	LDX byte_RAM_12
094BF 60                        	RTS
094C0                           
094C0                           
094C0                           Phanto_AccelX:
094C0 01                        	.db $01
094C1 FF                        	.db $FF
094C2                           Phanto_MaxVelX:
094C2 30                        	.db $30
094C3 D0                        	.db $D0
094C4                           Phanto_AccelY:
094C4 01                        	.db $01
094C5 FF                        	.db $FF ; Exit up
094C6 01                        	.db $01 ; Exit down
094C7                           Phanto_MaxVelY:
094C7 18                        	.db $18
094C8 E8                        	.db $E8
094C9 18                        	.db $18
094CA                           
094CA                           EnemyBehavior_Phanto:
094CA BD 4A 04                  	LDA ObjectShakeTimer, X
094CD F0 03                     	BEQ Phanto_AfterDecrementShakeTimer
094CF                           
094CF DE 4A 04                  	DEC ObjectShakeTimer, X
094D2                           
094D2                           Phanto_AfterDecrementShakeTimer:
094D2 20 90 9D                  	JSR RenderSprite
094D5                           
094D5 A0 01                     	LDY #$01 ; Move away from player
094D7                           IFDEF PLAYER_STUFF
094D7 BD 10 76                      LDA Enemy_Fireball_Hits, X
094DA 30 1F                         BMI Phanto_TimerCheck
094DC AD ED 76                      LDA Player_Cursed
094DF D0 1A                     	BNE Phanto_TimerCheck
094E1 AD F4 76                      LDA StoredItem
094E4 C9 3D                         CMP #Enemy_Key
094E6 F0 13                     	BEQ Phanto_TimerCheck
094E8                           ENDIF
094E8 A5 9C                     	LDA HoldingItem
094EA F0 1A                     	BEQ Phanto_Movement
094EC                           
094EC AE 2D 04                  	LDX ObjectBeingCarriedIndex
094EF B5 90                     	LDA ObjectType, X
094F1 A6 12                     	LDX byte_RAM_12
094F3                           
094F3                           	; Strange code. Phanto only chases you if you have the key.
094F3                           	; So you should just be able to use BEQ/BNE.
094F3                           	; This way seems to imply that Phanto would
094F3                           	; chase you if you were carrying a range of items,
094F3                           	; but...  what could those items have been?
094F3                           	; But instead we do it like this for... reasons.
094F3                           	; Nintendo.
094F3 C9 3D                     	CMP #Enemy_Key
094F5 90 0F                     	BCC Phanto_Movement
094F7                           
094F7                           	; Subspace Potion is >= Enemy_Key, so ignore it
094F7 C9 3E                     	CMP #Enemy_SubspacePotion
094F9 B0 0B                     	BCS Phanto_Movement
094FB                           
094FB                           Phanto_TimerCheck:
094FB AD BC 05                  	LDA PhantoActivateTimer
094FE C9 A0                     	CMP #$A0
09500 D0 03                     	BNE Phanto_AfterStartTimer
09502                           
09502                           	; Kick off Phanto activation timer
09502 CE BC 05                  	DEC PhantoActivateTimer
09505                           
09505                           Phanto_AfterStartTimer:
09505 88                        	DEY ; Move toward player
09506                           
09506                           Phanto_Movement:
09506 B5 1F                     	LDA ObjectYHi, X
09508 18                        	CLC
09509 69 01                     	ADC #$01
0950B 85 05                     	STA byte_RAM_5
0950D A5 32                     	LDA PlayerYLo
0950F D5 33                     	CMP ObjectYLo, X
09511 A6 1E                     	LDX PlayerYHi
09513 E8                        	INX
09514 8A                        	TXA
09515 A6 12                     	LDX byte_RAM_12
09517 E5 05                     	SBC byte_RAM_5
09519 10 01                     	BPL loc_BANK2_9351
0951B                           
0951B C8                        	INY ; Other side of player vertically
0951C                           
0951C                           loc_BANK2_9351:
0951C B5 47                     	LDA ObjectYVelocity, X
0951E D9 C7 94                  	CMP Phanto_MaxVelY, Y
09521 F0 06                     	BEQ loc_BANK2_935E
09523                           
09523 18                        	CLC
09524 79 C4 94                  	ADC Phanto_AccelY, Y
09527 95 47                     	STA ObjectYVelocity, X
09529                           
09529                           loc_BANK2_935E:
09529 BD 80 04                  	LDA EnemyArray_480, X
0952C 18                        	CLC
0952D 69 A0                     	ADC #$A0
0952F 9D 80 04                  	STA EnemyArray_480, X
09532 90 16                     	BCC loc_BANK2_937F
09534                           
09534 BD 77 04                  	LDA EnemyArray_477, X
09537 29 01                     	AND #$01
09539 A8                        	TAY
0953A B5 3D                     	LDA ObjectXVelocity, X
0953C 18                        	CLC
0953D 79 C0 94                  	ADC Phanto_AccelX, Y
09540 95 3D                     	STA ObjectXVelocity, X
09542 D9 C2 94                  	CMP Phanto_MaxVelX, Y
09545 D0 03                     	BNE loc_BANK2_937F
09547                           
09547 FE 77 04                  	INC EnemyArray_477, X
0954A                           
0954A                           loc_BANK2_937F:
0954A A5 EC                     	LDA IsHorizontalLevel
0954C F0 05                     	BEQ loc_BANK2_9388
0954E                           
0954E A5 3C                     	LDA PlayerXVelocity
09550 9D CC 04                  	STA ObjectXAcceleration, X
09553                           
09553                           loc_BANK2_9388:
09553 AC BC 05                  	LDY PhantoActivateTimer
09556 F0 2C                     	BEQ Phanto_Activated
09558                           IFDEF PLAYER_STUFF
09558 BD 10 76                      LDA Enemy_Fireball_Hits, X
0955B 30 27                         BMI Phanto_Activated
0955D                           ENDIF
0955D                           
0955D                           	; Hold the timer at $A0
0955D C0 A0                     	CPY #$A0
0955F F0 1A                     	BEQ Phanto_AfterDecrementActivateTimer
09561                           
09561 C0 80                     	CPY #$80
09563 D0 05                     	BNE Phanto_AfterFlashing
09565                           
09565                           	; Start flashing
09565 A9 40                     	LDA #$40
09567 9D 5C 04                  	STA EnemyArray_45C, X
0956A                           
0956A                           Phanto_AfterFlashing:
0956A C0 40                     	CPY #$40
0956C D0 0A                     	BNE Phanto_AfterSound
0956E                           
0956E                           	; Start vibrating
0956E A9 40                     	LDA #$40
09570 9D 4A 04                  	STA ObjectShakeTimer, X
09573                           
09573                           	; Play Phanto activation sound effect
09573 A9 04                     	LDA #SoundEffect3_Rumble_B
09575 8D 05 06                  	STA SoundEffectQueue3
09578                           
09578                           Phanto_AfterSound:
09578 CE BC 05                  	DEC PhantoActivateTimer
0957B                           
0957B                           Phanto_AfterDecrementActivateTimer:
0957B A9 00                     	LDA #$00
0957D 9D CC 04                  	STA ObjectXAcceleration, X
09580 95 3D                     	STA ObjectXVelocity, X
09582 95 47                     	STA ObjectYVelocity, X
09584                           
09584                           Phanto_Activated:
09584                           IFDEF PLAYER_STUFF_UNUSED
09584                               LDA Enemy_Fireball_Hits, X
09584                               BPL +
09584                               LDA ProjectileTimer
09584                               BNE +
09584                               JSR TurnIntoPuffOfSmoke
09584                           +
09584                           ENDIF
09584 4C 00 96                  	JMP sub_BANK2_9430
09587                           
09587                           
09587                           Enemy_Ninji_JumpVelocity:
09587 E8                        	.db $E8
09588 D0                        	.db $D0
09589 D8                        	.db $D8
0958A D0                        	.db $D0
0958B                           
0958B                           
0958B                           EnemyBehavior_NinjiJumping:
0958B B5 5B                     	LDA EnemyCollision, X
0958D 29 04                     	AND #CollisionFlags_Down
0958F F0 4B                     	BEQ EnemyBehavior_Ninji_MidAir
09591                           
09591 BD 2F 04                  	LDA EnemyArray_42F, X
09594 D0 02                     	BNE EnemyBehavior_NinjiJumping_DetermineJump
09596                           
09596                           	; stop x-velocity
09596 95 3D                     	STA ObjectXVelocity, X
09598                           
09598                           EnemyBehavior_NinjiJumping_DetermineJump:
09598 8A                        	TXA
09599 0A                        	ASL A
0959A 0A                        	ASL A
0959B 0A                        	ASL A
0959C 65 10                     	ADC byte_RAM_10
0959E 29 3F                     	AND #$3F
095A0 D0 3A                     	BNE EnemyBehavior_Ninji_MidAir
095A2                           
095A2 B5 9F                     	LDA ObjectAnimationTimer, X
095A4 29 C0                     	AND #$C0
095A6 0A                        	ASL A
095A7 2A                        	ROL A
095A8 2A                        	ROL A
095A9 A8                        	TAY
095AA B9 87 95                  	LDA Enemy_Ninji_JumpVelocity, Y
095AD D0 22                     	BNE EnemyBehavior_Ninji_Jump
095AF                           
095AF                           EnemyBehavior_NinjiRunning:
095AF B5 5B                     	LDA EnemyCollision, X
095B1 29 04                     	AND #CollisionFlags_Down
095B3 F0 27                     	BEQ EnemyBehavior_Ninji_MidAir
095B5                           
095B5 A5 32                     	LDA PlayerYLo
095B7 18                        	CLC
095B8 69 10                     	ADC #$10
095BA D5 33                     	CMP ObjectYLo, X
095BC D0 1E                     	BNE EnemyBehavior_Ninji_MidAir
095BE                           
095BE 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
095C1                           
095C1 C8                        	INY
095C2 98                        	TYA
095C3 D5 6F                     	CMP EnemyMovementDirection, X
095C5 D0 15                     	BNE EnemyBehavior_Ninji_MidAir
095C7                           
095C7 A5 0F                     	LDA byte_RAM_F
095C9 69 28                     	ADC #$28
095CB C9 50                     	CMP #$50
095CD B0 0D                     	BCS EnemyBehavior_Ninji_MidAir
095CF                           
095CF A9 D8                     	LDA #$D8
095D1                           
095D1                           EnemyBehavior_Ninji_Jump:
095D1 95 47                     	STA ObjectYVelocity, X
095D3 B5 9F                     	LDA ObjectAnimationTimer, X
095D5 29 F0                     	AND #$F0
095D7 95 9F                     	STA ObjectAnimationTimer, X
095D9 20 F0 A0                  	JSR ApplyObjectPhysicsY
095DC                           
095DC                           EnemyBehavior_Ninji_MidAir:
095DC 4C 3D 96                  	JMP EnemyBehavior_BasicWalker
095DF                           
095DF                           ; ---------------------------------------------------------------------------
095DF                           
095DF                           EnemyBehavior_Beezo:
095DF 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
095E2                           
095E2 20 90 9D                  	JSR RenderSprite
095E5                           
095E5 F6 9F                     	INC ObjectAnimationTimer, X
095E7 20 F7 9A                  	JSR EnemyBehavior_Check42FPhysicsInterrupt
095EA                           
095EA 20 E3 8B                  	JSR IncrementAnimationTimerBy2
095ED                           
095ED                           loc_BANK2_941D:
095ED 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
095F0                           
095F0 B5 47                     	LDA ObjectYVelocity, X
095F2 F0 12                     	BEQ loc_BANK2_9436
095F4                           
095F4 10 03                     	BPL loc_BANK2_9429
095F6                           
095F6 9D 2F 04                  	STA EnemyArray_42F, X
095F9                           
095F9                           loc_BANK2_9429:
095F9 A5 10                     	LDA byte_RAM_10
095FB 4A                        	LSR A
095FC 90 02                     	BCC sub_BANK2_9430
095FE                           
095FE D6 47                     	DEC ObjectYVelocity, X
09600                           
09600                           ; =============== S U B R O U T I N E =======================================
09600                           
09600                           sub_BANK2_9430:
09600 20 F5 A0                  	JSR ApplyObjectPhysicsX
09603                           
09603 4C F0 A0                  	JMP ApplyObjectPhysicsY
09606                           
09606                           ; End of function sub_BANK2_9430
09606                           
09606                           ; ---------------------------------------------------------------------------
09606                           
09606                           loc_BANK2_9436:
09606 20 F5 A0                  	JSR ApplyObjectPhysicsX
09609                           
09609                           loc_BANK2_9439:
09609 4C 00 96                  	JMP sub_BANK2_9430
0960C                           
0960C                           
0960C                           BulletProjectileXSpeeds:
0960C 20                        	.db $20
0960D E0                        	.db $E0
0960E                           
0960E                           
0960E                           EnemyBehavior_BobOmb:
0960E B4 86                     	LDY EnemyTimer, X
09610 C0 3A                     	CPY #$3A ; When to stop walking
09612 B0 29                     	BCS EnemyBehavior_BasicWalker
09614                           
09614                           	; Stop walking if the BobOmb is touching the ground
09614 B5 5B                     	LDA EnemyCollision, X
09616 29 04                     	AND #CollisionFlags_Down
09618 F0 04                     	BEQ EnemyBehavior_BobOmb_CheckFuse
0961A                           
0961A A9 00                     	LDA #$00
0961C 95 3D                     	STA ObjectXVelocity, X
0961E                           
0961E                           EnemyBehavior_BobOmb_CheckFuse:
0961E D6 9F                     	DEC ObjectAnimationTimer, X
09620 98                        	TYA
09621 D0 0B                     	BNE EnemyBehavior_BobOmb_Flash
09623                           
09623                           	; Unset HoldingItem if this BobOmb is being carried
09623 B5 A8                     	LDA ObjectBeingCarriedTimer, X
09625 F0 04                     	BEQ EnemyBehavior_BobOmb_Explode
09627                           
09627 84 9C                     	STY HoldingItem
09629 94 A8                     	STY ObjectBeingCarriedTimer, X
0962B                           
0962B                           EnemyBehavior_BobOmb_Explode:
0962B 4C 84 92                  	JMP EnemyBehavior_Bomb_Explode
0962E                           
0962E                           
0962E                           EnemyBehavior_BobOmb_Flash:
0962E C9 30                     	CMP #$30 ; When to start flashing
09630 B0 0B                     	BCS EnemyBehavior_BasicWalker
09632                           
09632                           	; Palette cycle every other frame
09632 4A                        	LSR A
09633 90 08                     	BCC EnemyBehavior_BasicWalker
09635                           
09635 F6 65                     	INC ObjectAttributes, X
09637 B5 65                     	LDA ObjectAttributes, X
09639 29 FB                     	AND #%11111011
0963B 95 65                     	STA ObjectAttributes, X
0963D                           
0963D                           
0963D                           EnemyBehavior_BasicWalker:
0963D 20 36 B5                  	JSR ObjectTileCollision
09640                           
09640                           loc_BANK2_9470:
09640 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
09643                           
09643 BD 80 04                  	LDA EnemyArray_480, X
09646 F0 1A                     	BEQ loc_BANK2_9492
09648                           
09648 B5 5B                     	LDA EnemyCollision, X
0964A 29 08                     	AND #CollisionFlags_Up
0964C F0 03                     	BEQ loc_BANK2_9481
0964E                           
0964E 4C 39 8A                  	JMP EnemyDestroy
09651                           
09651                           ; ---------------------------------------------------------------------------
09651                           
09651                           loc_BANK2_9481:
09651 DE 80 04                  	DEC EnemyArray_480, X
09654 F6 86                     	INC EnemyTimer, X
09656                           
09656                           ; =============== S U B R O U T I N E =======================================
09656                           
09656                           sub_BANK2_9486:
09656 B5 65                     	LDA ObjectAttributes, X
09658 09 20                     	ORA #ObjAttrib_BehindBackground
0965A 95 65                     	STA ObjectAttributes, X
0965C 20 F0 A0                  	JSR ApplyObjectPhysicsY
0965F                           
0965F 4C 90 9D                  	JMP RenderSprite
09662                           
09662                           ; End of function sub_BANK2_9486
09662                           
09662                           ; ---------------------------------------------------------------------------
09662                           
09662                           loc_BANK2_9492:
09662 B5 5B                     	LDA EnemyCollision, X
09664 35 6F                     	AND EnemyMovementDirection, X
09666 F0 0E                     	BEQ loc_BANK2_94A6
09668                           
09668 20 56 A1                  	JSR EnemyBehavior_TurnAround
0966B                           
0966B BD 2F 04                  	LDA EnemyArray_42F, X
0966E F0 06                     	BEQ loc_BANK2_94A6
09670                           
09670 20 80 97                  	JSR HalfObjectVelocityX
09673                           
09673 20 80 97                  	JSR HalfObjectVelocityX
09676                           
09676                           loc_BANK2_94A6:
09676 F6 9F                     	INC ObjectAnimationTimer, X
09678 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0967B                           
0967B                           loc_BANK2_94AB:
0967B 20 90 9D                  	JSR RenderSprite
0967E                           
0967E B5 90                     	LDA ObjectType, X
09680 C9 06                     	CMP #Enemy_SnifitGray
09682 D0 07                     	BNE loc_BANK2_94BB
09684                           
09684 BD 2F 04                  	LDA EnemyArray_42F, X
09687 D0 02                     	BNE loc_BANK2_94BB
09689                           
09689 95 3D                     	STA ObjectXVelocity, X
0968B                           
0968B                           loc_BANK2_94BB:
0968B 20 FC 85                  	JSR ApplyObjectMovement
0968E                           
0968E B5 5B                     	LDA EnemyCollision, X
09690 B4 47                     	LDY ObjectYVelocity, X
09692 10 3F                     	BPL loc_BANK2_9503
09694                           
09694 29 08                     	AND #$08
09696 F0 05                     	BEQ loc_BANK2_94CD
09698                           
09698 A9 00                     	LDA #$00
0969A 95 47                     	STA ObjectYVelocity, X
0969C 60                        	RTS
0969D                           
0969D                           ; ---------------------------------------------------------------------------
0969D                           
0969D                           loc_BANK2_94CD:
0969D BD 2F 04                  	LDA EnemyArray_42F, X
096A0 D0 14                     	BNE EnemyBehavior_Walk
096A2                           
096A2                           	; check if this enemy fires bullets when jumping
096A2 B5 90                     	LDA ObjectType, X
096A4 C9 06                     	CMP #Enemy_SnifitGray
096A6 D0 0E                     	BNE EnemyBehavior_Walk
096A8                           
096A8                           	; bullet generator
096A8 B5 47                     	LDA ObjectYVelocity, X ; check if enemy is starting to fall
096AA C9 FE                     	CMP #$FE
096AC D0 08                     	BNE EnemyBehavior_Walk
096AE                           
096AE AD AE 05                  	LDA PseudoRNGValues + 2 ; check random number generator
096B1 10 03                     	BPL EnemyBehavior_Walk
096B3                           
096B3                           	; jumper high bullet
096B3 20 C9 97                  	JSR CreateBullet
096B6                           
096B6                           EnemyBehavior_Walk:
096B6 D6 9F                     	DEC ObjectAnimationTimer, X
096B8 B5 90                     	LDA ObjectType, X
096BA C9 07                     	CMP #Enemy_SnifitPink
096BC F0 04                     	BEQ EnemyBehavior_TurnAtCliff
096BE                           
096BE C9 03                     	CMP #Enemy_ShyguyPink
096C0 D0 10                     	BNE EnemyBehavior_BasicWalkerExit
096C2                           
096C2                           EnemyBehavior_TurnAtCliff:
096C2                           	; skip if being thrown
096C2 BD 2F 04                  	LDA EnemyArray_42F, X
096C5 D0 0B                     	BNE EnemyBehavior_BasicWalkerExit
096C7                           
096C7                           	; skip if already turning around
096C7 BD 77 04                  	LDA EnemyArray_477, X
096CA D0 06                     	BNE EnemyBehavior_BasicWalkerExit
096CC                           
096CC FE 77 04                  	INC EnemyArray_477, X
096CF 4C 56 A1                  	JMP EnemyBehavior_TurnAround
096D2                           
096D2                           EnemyBehavior_BasicWalkerExit:
096D2 60                        	RTS
096D3                           
096D3                           ; ---------------------------------------------------------------------------
096D3                           
096D3                           loc_BANK2_9503:
096D3 29 04                     	AND #$04
096D5 F0 C6                     	BEQ loc_BANK2_94CD
096D7                           
096D7 A9 00                     	LDA #$00
096D9 9D 77 04                  	STA EnemyArray_477, X
096DC B4 90                     	LDY ObjectType, X ; Get the current object ID
096DE C0 02                     	CPY #Enemy_Tweeter ; Check if this enemy is a Tweeter
096E0 D0 16                     	BNE loc_BANK2_9528 ; If not, go handle some other enemies
096E2                           
096E2                           	; ...but very, very, very rarely, only
096E2                           	; when their timer (that incremenets once per bounce)
096E2                           	; hits #$3F -- almost unnoticable
096E2 A9 3F                     	LDA #$3F
096E4 20 69 97                  	JSR sub_BANK2_9599
096E7                           
096E7 F6 79                     	INC EnemyVariable, X ; Make small jump 3 times, then make big jump
096E9 A0 F0                     	LDY #$F0
096EB B5 79                     	LDA EnemyVariable, X
096ED 29 03                     	AND #$03 ; Check if the timer is a multiple of 4
096EF D0 02                     	BNE loc_BANK2_9523 ; If not, skip over the next bit
096F1                           
096F1 A0 E0                     	LDY #$E0
096F3                           
096F3                           loc_BANK2_9523:
096F3 94 47                     	STY ObjectYVelocity, X ; Set Y acceleration for bouncing
096F5 4C F0 A0                  	JMP ApplyObjectPhysicsY
096F8                           
096F8                           ; ---------------------------------------------------------------------------
096F8                           
096F8                           loc_BANK2_9528:
096F8 A9 1F                     	LDA #$1F
096FA C0 09                     	CPY #Enemy_BobOmb
096FC F0 6B                     	BEQ sub_BANK2_9599
096FE                           
096FE C0 29                     	CPY #Enemy_Flurry
09700 F0 67                     	BEQ sub_BANK2_9599
09702                           
09702 A9 3F                     	LDA #$3F
09704 C0 0D                     	CPY #Enemy_NinjiRunning
09706 F0 61                     	BEQ sub_BANK2_9599
09708                           
09708                           	; this redundant red snifit check smells funny, almost like there was
09708                           	; some other follow-the-player enemy
09708 A9 7F                     	LDA #$7F ; unused
0970A C0 05                     	CPY #Enemy_SnifitRed
0970C F0 24                     	BEQ EnemyBehavior_Snifit
0970E                           
0970E C0 05                     	CPY #Enemy_SnifitRed
09710 F0 20                     	BEQ EnemyBehavior_Snifit
09712                           
09712 C0 07                     	CPY #Enemy_SnifitPink
09714 F0 1C                     	BEQ EnemyBehavior_Snifit
09716                           
09716 C0 06                     	CPY #Enemy_SnifitGray
09718 D0 53                     	BNE loc_BANK2_959D
0971A                           
0971A BD 2F 04                  	LDA EnemyArray_42F, X
0971D D0 4E                     	BNE loc_BANK2_959D
0971F                           
0971F 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
09722                           
09722 C8                        	INY
09723 94 6F                     	STY EnemyMovementDirection, X
09725 B5 9F                     	LDA ObjectAnimationTimer, X
09727 29 3F                     	AND #$3F
09729 D0 07                     	BNE EnemyBehavior_Snifit
0972B                           
0972B A9 E8                     	LDA #$E8
0972D 95 47                     	STA ObjectYVelocity, X
0972F 4C F0 A0                  	JMP ApplyObjectPhysicsY
09732                           
09732                           
09732                           EnemyBehavior_Snifit:
09732 BD 4A 04                  	LDA ObjectShakeTimer, X
09735 F0 0D                     	BEQ EnemyBehavior_Snifit_NoBullet
09737                           
09737 D6 9F                     	DEC ObjectAnimationTimer, X
09739 DE 4A 04                  	DEC ObjectShakeTimer, X
0973C D0 06                     	BNE EnemyBehavior_Snifit_NoBullet
0973E                           
0973E                           	; telegraphed bullet (walking snifits)
0973E 20 C9 97                  	JSR CreateBullet
09741                           
09741 4C 99 97                  	JMP loc_BANK2_95BB
09744                           
09744                           EnemyBehavior_Snifit_NoBullet:
09744                           loc_BANK2_9574:
09744 8A                        	TXA
09745 0A                        	ASL A
09746 0A                        	ASL A
09747 0A                        	ASL A
09748 65 10                     	ADC byte_RAM_10
0974A 0A                        	ASL A
0974B D0 1A                     	BNE EnemyBehavior_Snifit_AnimationTimer
0974D                           
0974D B5 90                     	LDA ObjectType, X
0974F C9 06                     	CMP #Enemy_SnifitGray
09751 D0 06                     	BNE EnemyBehavior_Snifit_CheckPlayerY
09753                           
09753                           	; jumper low bullet
09753 20 C9 97                  	JSR CreateBullet
09756                           
09756 4C A8 97                  	JMP EnemyInit_DisableObjectAttributeBit8
09759                           
09759                           
09759                           EnemyBehavior_Snifit_CheckPlayerY:
09759 B5 33                     	LDA ObjectYLo, X
0975B 38                        	SEC
0975C E9 10                     	SBC #$10
0975E C5 32                     	CMP PlayerYLo
09760 D0 05                     	BNE EnemyBehavior_Snifit_AnimationTimer
09762                           
09762 A9 30                     	LDA #$30 ; shake duration
09764 9D 4A 04                  	STA ObjectShakeTimer, X
09767                           
09767                           EnemyBehavior_Snifit_AnimationTimer:
09767 A9 7F                     	LDA #$7F
09769                           
09769                           ;
09769                           ; Gives em the ol' razzle-dazzle
09769                           ;
09769                           ; Input
09769                           ;   A = timer mask
09769                           ;
09769                           sub_BANK2_9599:
09769 35 9F                     	AND ObjectAnimationTimer, X
0976B F0 29                     	BEQ loc_BANK2_95B8
0976D                           
0976D                           loc_BANK2_959D:
0976D BD 2F 04                  	LDA EnemyArray_42F, X
09770 F0 27                     	BEQ loc_BANK2_95BB
09772                           
09772 B5 47                     	LDA ObjectYVelocity, X
09774 C9 1A                     	CMP #$1A
09776 90 1E                     	BCC loc_BANK2_95B8
09778                           
09778 A9 F0                     	LDA #$F0
0977A                           
0977A                           ;
0977A                           ; Sets the y-velocity, applies vertical physics, and cuts x-velocity in half
0977A                           ;
0977A                           ; Input
0977A                           ;   A = y-velocity
0977A                           ;   X = enemy index
0977A                           ;
0977A                           sub_BANK2_95AA:
0977A 20 AE 97                  	JSR SetObjectYVelocity
0977D 20 F0 A0                  	JSR ApplyObjectPhysicsY
09780                           
09780                           ;
09780                           ; Cuts the x-velocity of the current object in half
09780                           ;
09780                           ; Input
09780                           ;   X = enemy index
09780                           ; Output
09780                           ;   RAM_0 = previous x-velocity
09780                           ;
09780                           HalfObjectVelocityX:
09780                           	; Store the current X-velocity in RAM_0
09780 B5 3D                     	LDA ObjectXVelocity, X
09782 85 00                     	STA byte_RAM_0
09784                           IFDEF PLAYER_STUFF
09784 30 05                         BMI ++
09786 C9 60                         CMP #$60
09788 90 06                         BCC +
0978A 60                            RTS
0978B C9 A0                     ++  CMP #$A0
0978D B0 01                         BCS +
0978F 60                            RTS
09790                           +   
09790                           HalfObjectVelocityXAlways:
09790 B5 3D                     	LDA ObjectXVelocity, X
09792                           ENDIF
09792                           	; Shift left to save the sign in the carry bit
09792 0A                        	ASL A
09793                           	; Cut in half and preserve the sign
09793 76 3D                     	ROR ObjectXVelocity, X
09795 60                        	RTS
09796                           
09796                           
09796                           ; ---------------------------------------------------------------------------
09796                           
09796                           loc_BANK2_95B8:
09796 20 D3 84                  	JSR EnemyInit_BasicWithoutTimer
09799                           
09799                           loc_BANK2_95BB:
09799 B5 90                     	LDA ObjectType, X
0979B C9 01                     	CMP #Enemy_ShyguyRed
0979D D0 09                     	BNE EnemyInit_DisableObjectAttributeBit8
0979F                           
0979F B5 47                     	LDA ObjectYVelocity, X
097A1 C9 04                     	CMP #$04
097A3 90 03                     	BCC EnemyInit_DisableObjectAttributeBit8
097A5                           
097A5 20 D3 84                  	JSR EnemyInit_BasicWithoutTimer
097A8                           
097A8                           ;
097A8                           ; Disables bit 8 on the object attribute, which causes the object to appear
097A8                           ; behind the background while being pulled
097A8                           ;
097A8                           EnemyInit_DisableObjectAttributeBit8:
097A8 16 65                     	ASL ObjectAttributes, X
097AA 56 65                     	LSR ObjectAttributes, X
097AC                           
097AC                           ;
097AC                           ; Does SetObjectYVelocity with y-velocity of 0
097AC                           ;
097AC                           ResetObjectYVelocity:
097AC A9 00                     	LDA #$00
097AE                           
097AE                           ;
097AE                           ; Sets the y-velocity of an object and shifts it half a tile down if it's not a
097AE                           ; a vegetable
097AE                           ;
097AE                           ; Input
097AE                           ;   A = y-velocity
097AE                           ;   X = enemy index
097AE                           ;
097AE                           SetObjectYVelocity:
097AE 95 47                     	STA ObjectYVelocity, X
097B0 B5 90                     	LDA ObjectType, X
097B2 C9 32                     	CMP #Enemy_VegetableSmall
097B4 B5 33                     	LDA ObjectYLo, X
097B6 B0 06                     	BCS SetObjectYVelocity_Exit
097B8                           
097B8 69 08                     	ADC #$08
097BA 90 02                     	BCC SetObjectYVelocity_Exit
097BC                           
097BC F6 1F                     	INC ObjectYHi, X
097BE                           
097BE                           SetObjectYVelocity_Exit:
097BE 29 F0                     	AND #$F0
097C0 95 33                     	STA ObjectYLo, X
097C2 60                        	RTS
097C3                           
097C3                           
097C3                           ; =============== S U B R O U T I N E =======================================
097C3                           
097C3                           sub_BANK2_95E5:
097C3 20 7E 94                  	JSR CreateEnemy_TryAllSlots
097C6                           
097C6 4C CC 97                  	JMP CreateBullet_WithSlotInY
097C9                           
097C9                           ; End of function sub_BANK2_95E5
097C9                           
097C9                           ; =============== S U B R O U T I N E =======================================
097C9                           
097C9                           CreateBullet:
097C9 20 82 94                  	JSR CreateEnemy
097CC                           
097CC                           CreateBullet_WithSlotInY:
097CC 30 16                     	BMI CreateBullet_Exit
097CE                           
097CE B4 6F                     	LDY EnemyMovementDirection, X
097D0 A6 00                     	LDX byte_RAM_0
097D2 B9 0B 96                  	LDA BulletProjectileXSpeeds - 1, Y
097D5 95 3D                     	STA ObjectXVelocity, X
097D7 A9 00                     	LDA #$00
097D9 95 47                     	STA ObjectYVelocity, X
097DB A9 1B                     	LDA #Enemy_Bullet
097DD 95 90                     	STA ObjectType, X
097DF 20 B0 84                  	JSR SetEnemyAttributes
097E2                           
097E2 A6 12                     	LDX byte_RAM_12
097E4                           
097E4                           CreateBullet_Exit:
097E4 60                        	RTS
097E5                           
097E5                           
097E5                           CharacterYOffsetCrouch:
097E5 0A                        	.db $0A ; Mario
097E6 0E                        	.db $0E ; Princess
097E7 0A                        	.db $0A ; Toad
097E8 0D                        	.db $0D ; Luigi
097E9 04                        	.db $04 ; Small Mario
097EA 07                        	.db $07 ; Small Princess
097EB 04                        	.db $04 ; Small Toad
097EC 06                        	.db $06 ; Small Luigi
097ED                           
097ED                           
097ED                           ; This is run when the player is carrying
097ED                           ; something, to update its position to
097ED                           ; wherever the player is above their head
097ED                           CarryObject:
097ED A5 9D                     	LDA PlayerDirection
097EF 49 01                     	EOR #$01
097F1 A8                        	TAY
097F2 C8                        	INY
097F3 94 6F                     	STY EnemyMovementDirection, X
097F5 A5 28                         LDA PlayerXLo
097F7 95 29                         STA ObjectXLo, X
097F9 A5 14                         LDA PlayerXHi
097FB 95 15                         STA ObjectXHi, X
097FD                           IFDEF PLAYER_STUFF
097FD A5 14                         LDA PlayerXHi
097FF 95 15                         STA ObjectXHi, X
09801                           
09801 AD F6 06                      LDA PlayerCurrentSize
09804 6A                            ROR
09805 A5 8F                         LDA CurrentCharacter
09807 2A                            ROL
09808 A8                            TAY
09809 B9 D9 EE                      LDA HeldOffset, Y
0980C F0 2D                         BEQ ++
0980E                           
0980E A5 9D                         LDA PlayerDirection
09810 D0 16                         BNE +
09812 B5 29                         LDA ObjectXLo, X
09814 38                            SEC
09815 F9 D9 EE                      SBC HeldOffset, Y
09818 95 29                         STA ObjectXLo, X
0981A F0 09                         BEQ +O
0981C B9 D9 EE                      LDA HeldOffset, Y
0981F 30 16                         BMI +++
09821                           ---
09821 B0 18                         BCS ++
09823 D6 15                         DEC ObjectXHi, X
09825                           +O
09825 4C 3B 98                      JMP ++
09828                           +
09828 A5 28                         LDA PlayerXLo
0982A 18                            CLC
0982B 79 D9 EE                      ADC HeldOffset, Y
0982E 95 29                         STA ObjectXLo, X
09830 F0 07                         BEQ +O
09832 B9 D9 EE                      LDA HeldOffset, Y
09835 30 EA                         BMI ---
09837                           +++
09837 90 02                         BCC ++
09839                           +O
09839 F6 15                         INC ObjectXHi, X
0983B                           ++
0983B                               
0983B                           ENDIF
0983B                           
0983B A5 1E                     	LDA PlayerYHi
0983D 85 07                     	STA byte_RAM_7
0983F A5 32                     	LDA PlayerYLo
09841 BC 89 04                  	LDY EnemyArray_489, X
09844 C0 03                     	CPY #$03
09846 F0 0A                     	BEQ loc_BANK2_9636
09848                           
09848 C0 02                     	CPY #$02
0984A F0 06                     	BEQ loc_BANK2_9636
0984C                           
0984C E9 0E                     	SBC #$0E
0984E B0 02                     	BCS loc_BANK2_9636
09850                           
09850 C6 07                     	DEC byte_RAM_7
09852                           
09852                           loc_BANK2_9636:
09852 A4 C7                     	LDY PlayerAnimationFrame
09854 C0 04                     	CPY #SpriteAnimation_Ducking
09856 18                        	CLC
09857 D0 15                     	BNE loc_BANK2_964D
09859                           
09859 AC F6 06                  	LDY PlayerCurrentSize
0985C C0 01                     	CPY #$01
0985E A4 8F                     	LDY CurrentCharacter
09860 90 04                     	BCC loc_BANK2_964A
09862                           
09862 C8                        	INY
09863 C8                        	INY
09864 C8                        	INY
09865 C8                        	INY
09866                           
09866                           loc_BANK2_964A:
09866                           IFNDEF PLAYER_STUFF
09866                           	ADC CharacterYOffsetCrouch, Y
09866                           ENDIF
09866                           IFDEF PLAYER_STUFF
09866 85 C6                         STA byte_RAM_C6
09868 B9 E5 97                  	LDA CharacterYOffsetCrouch, Y
0986B 4C 72 98                      JMP +
0986E                           loc_BANK2_964D:
0986E 85 C6                         STA byte_RAM_C6
09870 A9 00                         LDA #$0
09872                           +
09872 B4 A8                     	LDY ObjectBeingCarriedTimer, X
09874 18                        	CLC
09875 AE F6 06                  	LDX PlayerCurrentSize
09878 F0 07                     	BEQ loc_BANK2_965D
0987A                           
0987A C8                        	INY
0987B C8                        	INY
0987C C8                        	INY
0987D C8                        	INY
0987E C8                        	INY
0987F C8                        	INY
09880 C8                        	INY
09881                           
09881                           loc_BANK2_965D:
09881 18                            CLC
09882 79 FF 7E                  	ADC ItemCarryYOffsetsRAM - 1, Y
09885 85 C5                         STA byte_RAM_C5
09887 A6 12                     	LDX byte_RAM_12
09889                           
09889 A5 07                         LDA byte_RAM_7
0988B 95 1F                         STA ObjectYHi, X
0988D                           
0988D A5 C6                         LDA byte_RAM_C6
0988F 18                            CLC
09890 65 C5                         ADC byte_RAM_C5
09892                           
09892 95 33                         STA ObjectYLo, X
09894 A5 C5                         LDA byte_RAM_C5
09896 10 07                         BPL +++
09898                           ---
09898 B0 09                         BCS ++
0989A D6 1F                         DEC ObjectYHi, X
0989C 4C A3 98                      JMP ++
0989F                           +++
0989F 90 02                         BCC ++
098A1 F6 1F                         INC ObjectYHi, X
098A3                           ++
098A3                           
098A3                           ENDIF
098A3                           
098A3                           IFNDEF PLAYER_STUFF
098A3                           loc_BANK2_964D:
098A3                           	PHP
098A3                           	LDY ObjectBeingCarriedTimer, X
098A3                           	CLC
098A3                           	LDX PlayerCurrentSize
098A3                           	BEQ loc_BANK2_965D
098A3                           
098A3                           	INY
098A3                           	INY
098A3                           	INY
098A3                           	INY
098A3                           	INY
098A3                           	INY
098A3                           	INY
098A3                           
098A3                           loc_BANK2_965D:
098A3                           	ADC ItemCarryYOffsetsRAM - 1, Y
098A3                           	LDX byte_RAM_12
098A3                           	STA ObjectYLo, X
098A3                           	LDA byte_RAM_7
098A3                           	ADC ItemCarryYOffsetsRAM + $D, Y
098A3                           	PLP
098A3                           	ADC #$00
098A3                           	STA ObjectYHi, X
098A3                           ENDIF
098A3 B4 A8                     	LDY ObjectBeingCarriedTimer, X
098A5 C0 05                     	CPY #$05
098A7 B0 12                     	BCS loc_BANK2_9686
098A9                           
098A9 B5 90                     	LDA ObjectType, X
098AB C9 32                     	CMP #Enemy_VegetableSmall
098AD B0 0C                     	BCS loc_BANK2_9686
098AF                           
098AF BD 38 04                  	LDA EnemyArray_438, X
098B2                           
098B2                           loc_BANK2_967D:
098B2 D0 02                     	BNE loc_BANK2_9681
098B4                           
098B4 F6 9F                     	INC ObjectAnimationTimer, X
098B6                           
098B6                           loc_BANK2_9681:
098B6 16 65                     	ASL ObjectAttributes, X
098B8 38                        	SEC
098B9 76 65                     	ROR ObjectAttributes, X
098BB                           
098BB                           loc_BANK2_9686:
098BB 20 20 9D                  	JSR PutCarriedObjectInHands
098BE                           
098BE 4C 90 9D                  	JMP RenderSprite
098C1                           
098C1                           
098C1                           ; Unused?
098C1 10                        	.db $10
098C2 F0                        	.db $F0
098C3                           
098C3                           
098C3                           EnemyBehavior_MushroomBlockAndPOW:
098C3 20 C7 98                  	JSR sub_BANK2_9692
098C6                           
098C6                           EnemyBehavior_MushroomBlockAndPOW_Exit:
098C6 60                        	RTS
098C7                           
098C7                           ; =============== S U B R O U T I N E =======================================
098C7                           
098C7                           sub_BANK2_9692:
098C7 B5 A8                     	LDA ObjectBeingCarriedTimer, X
098C9 F0 05                     	BEQ loc_BANK2_969B
098CB                           
098CB 68                        	PLA
098CC 68                        	PLA
098CD 4C ED 97                  	JMP CarryObject
098D0                           
098D0                           ; ---------------------------------------------------------------------------
098D0                           
098D0                           loc_BANK2_969B:
098D0 20 90 9D                  	JSR RenderSprite
098D3                           
098D3 B5 90                     	LDA ObjectType, X
098D5 C9 3A                     	CMP #Enemy_POWBlock
098D7 B0 06                     	BCS loc_BANK2_96AA
098D9                           
098D9 20 32 B5                  	JSR ObjectTileCollision_SolidBackground
098DC                           
098DC 4C E2 98                  	JMP loc_BANK2_96AD
098DF                           
098DF                           ; ---------------------------------------------------------------------------
098DF                           
098DF                           loc_BANK2_96AA:
098DF 20 36 B5                  	JSR ObjectTileCollision
098E2                           
098E2                           loc_BANK2_96AD:
098E2 BD 2F 04                  	LDA EnemyArray_42F, X
098E5 F0 DF                     	BEQ EnemyBehavior_MushroomBlockAndPOW_Exit
098E7                           
098E7 20 FC 85                  	JSR ApplyObjectMovement
098EA                           
098EA                           IFDEF PLAYER_STUFF_UNUSED ;streak
098EA                           	LDA ObjectType, X
098EA                           	CMP #Enemy_CoinBlock
098EA                               BNE +
098EA                               LDA EnemyTimer, X
098EA                               BNE +
098EA                               DEC EnemyTimer, X
098EA                           	LDA EnemyVariable, X
098EA                           	JSR ReplaceTile
098EA                           	LDX byte_RAM_12
098EA                           +
098EA                           ENDIF
098EA                           
098EA 68                        	PLA
098EB 68                        	PLA
098EC B5 5B                     	LDA EnemyCollision, X
098EE 48                        	PHA
098EF 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
098F1 F0 16                     	BEQ loc_BANK2_96D4
098F3                           
098F3 A9 00                     	LDA #$00
098F5 95 3D                     	STA ObjectXVelocity, X
098F7 B5 29                     	LDA ObjectXLo, X
098F9 69 08                     	ADC #$08
098FB 29 F0                     	AND #$F0
098FD 95 29                     	STA ObjectXLo, X
098FF A5 EC                     	LDA IsHorizontalLevel
09901 F0 06                     	BEQ loc_BANK2_96D4
09903                           
09903 B5 15                     	LDA ObjectXHi, X
09905 69 00                     	ADC #$00
09907 95 15                     	STA ObjectXHi, X
09909                           
09909                           loc_BANK2_96D4:
09909                           IFDEF PLAYER_STUFF_UNUSED ;streak
09909                           	LDA ObjectType, X
09909                           	CMP #Enemy_CoinBlock
09909                               BNE +
09909                           	LDA EnemyVariable, X
09909                           	JSR ReplaceTile
09909                           	LDX byte_RAM_12
09909                           +
09909                           ENDIF
09909                           IFDEF PLAYER_STUFF
09909 BD 10 76                      LDA Enemy_Fireball_Hits, X
0990C 29 40                         AND #ProjChar_PuffEnemy
0990E F0 0D                         BEQ +
09910                               
09910 B5 3D                     	LDA ObjectXVelocity, X
09912 D0 09                     	BNE +
09914 95 47                     	STA ObjectYVelocity, X
09916 20 3E DF                  	JSR SnapEnemy
09919 68                        	PLA
0991A 4C 56 99                      JMP loc_BANK2_970D
0991D                           +
0991D                           ENDIF
0991D 68                        	PLA
0991E B4 47                     	LDY ObjectYVelocity, X
09920 30 3F                     	BMI locret_BANK2_9718
09922                           
09922                           
09922 29 04                     	AND #CollisionFlags_Down
09924 F0 3B                     	BEQ locret_BANK2_9718
09926                           
09926 A5 0E                     	LDA byte_RAM_E
09928 C9 16                     	CMP #$16
0992A D0 09                     	BNE loc_BANK2_96EC
0992C                           
0992C B5 3D                     	LDA ObjectXVelocity, X
0992E F0 05                     	BEQ loc_BANK2_96EC
09930                           
09930 A9 14                     	LDA #$14
09932 4C AE 97                  	JMP SetObjectYVelocity
09935                           
09935                           ; ---------------------------------------------------------------------------
09935                           
09935                           loc_BANK2_96EC:
09935 B5 90                     	LDA ObjectType, X
09937 C9 3A                     	CMP #Enemy_POWBlock
09939 D0 0D                     	BNE loc_BANK2_96FF
0993B                           
0993B A9 20                     	LDA #$20
0993D 8D C4 04                  	STA POWQuakeTimer
09940 A9 04                     	LDA #SoundEffect3_Rumble_B
09942 8D 05 06                  	STA SoundEffectQueue3
09945 4C CA 9A                  	JMP sub_BANK2_98C4
09948                           
09948                           ; ---------------------------------------------------------------------------
09948                           
09948                           loc_BANK2_96FF:
09948 B5 47                     	LDA ObjectYVelocity, X
0994A C9 16                     	CMP #$16
0994C 90 08                     	BCC loc_BANK2_970D
0994E                           
0994E 20 AC 97                  	JSR ResetObjectYVelocity
09951                           
09951 A9 F5                     	LDA #$F5
09953 4C 7A 97                  	JMP sub_BANK2_95AA
09956                           
09956                           ; ---------------------------------------------------------------------------
09956                           
09956                           loc_BANK2_970D:
09956 20 AC 97                  	JSR ResetObjectYVelocity
09959                           
09959 B5 79                     	LDA EnemyVariable, X
0995B 20 73 BD                  	JSR ReplaceTile
0995E                           
0995E 4C 39 8A                  	JMP EnemyDestroy
09961                           
09961                           ; ---------------------------------------------------------------------------
09961                           
09961                           locret_BANK2_9718:
09961 60                        	RTS
09962                           
09962                           ; End of function sub_BANK2_9692
09962                           
09962                           ; ---------------------------------------------------------------------------
09962                           
09962                           EnemyBehavior_SubspaceDoor:
09962 A9 04                     	LDA #$04
09964 9D 89 04                  	STA EnemyArray_489, X
09967 A9 02                     	LDA #$02
09969 95 6F                     	STA EnemyMovementDirection, X
0996B AC B7 04                  	LDY SubspaceTimer
0996E F0 1A                     	BEQ loc_BANK2_9741
09970                           
09970 A5 10                     	LDA byte_RAM_10
09972 29 03                     	AND #$03
09974 D0 14                     	BNE loc_BANK2_9741
09976                           
09976 A4 50                     	LDY PlayerState
09978 C0 07                     	CPY #PlayerState_Dying
0997A F0 0E                     	BEQ loc_BANK2_9741
0997C                           
0997C CE B7 04                  	DEC SubspaceTimer
0997F D0 09                     	BNE loc_BANK2_9741
09981                           
09981 8D 28 06                  	STA InSubspaceOrJar
09984 20 66 FA                  	JSR DoAreaReset
09987                           
09987 4C 50 9A                  	JMP loc_BANK2_97FF
0998A                           
0998A                           ; ---------------------------------------------------------------------------
0998A                           
0998A                           loc_BANK2_9741:
0998A BD 53 04                  	LDA EnemyArray_453, X
0998D D0 D2                     	BNE locret_BANK2_9718
0998F                           
0998F AD B3 04                  	LDA SubspaceDoorTimer
09992 F0 08                     	BEQ loc_BANK2_9753
09994                           
09994 CE B3 04                  	DEC SubspaceDoorTimer
09997 D0 03                     	BNE loc_BANK2_9753
09999                           
09999 4C 27 93                  	JMP TurnIntoPuffOfSmoke
0999C                           
0999C                           ; ---------------------------------------------------------------------------
0999C                           
0999C                           loc_BANK2_9753:
0999C B5 65                     	LDA ObjectAttributes, X
0999E 09 40                     	ORA #ObjAttrib_16x32
099A0 95 65                     	STA ObjectAttributes, X
099A2 AC BD 04                  	LDY DoorAnimationTimer
099A5 B9 59 9A                  	LDA DoorSpriteAnimation, Y
099A8 A0 00                     	LDY #$00
099AA 0A                        	ASL A
099AB 90 03                     	BCC loc_BANK2_9767
099AD                           
099AD C8                        	INY
099AE 94 6F                     	STY EnemyMovementDirection, X
099B0                           
099B0                           loc_BANK2_9767:
099B0 AD BD 04                  	LDA DoorAnimationTimer
099B3 F0 2E                     	BEQ loc_BANK2_979A
099B5                           
099B5 A5 F4                     	LDA byte_RAM_F4
099B7 48                        	PHA
099B8 20 2F FC                  	JSR loc_BANKF_FAFE
099BB                           
099BB C4 F4                     	CPY byte_RAM_F4
099BD 08                        	PHP
099BE B5 6F                     	LDA EnemyMovementDirection, X
099C0 C9 01                     	CMP #$01
099C2 D0 04                     	BNE loc_BANK2_977F
099C4                           
099C4 68                        	PLA
099C5 49 01                     	EOR #$01
099C7 48                        	PHA
099C8                           
099C8                           loc_BANK2_977F:
099C8 28                        	PLP
099C9 90 02                     	BCC loc_BANK2_9784
099CB                           
099CB 84 F4                     	STY byte_RAM_F4
099CD                           
099CD                           loc_BANK2_9784:
099CD A9 7A                     	LDA #$7A
099CF 20 28 9E                  	JSR RenderSprite_DrawObject
099D2                           
099D2 A4 F4                     	LDY byte_RAM_F4
099D4 B9 07 02                  	LDA SpriteDMAArea + 7, Y
099D7 38                        	SEC
099D8 E9 04                     	SBC #$04
099DA 99 07 02                  	STA SpriteDMAArea + 7, Y
099DD 99 0F 02                  	STA SpriteDMAArea + $F, Y
099E0 68                        	PLA
099E1 85 F4                     	STA byte_RAM_F4
099E3                           
099E3                           loc_BANK2_979A:
099E3 20 2F FC                  	JSR loc_BANKF_FAFE
099E6                           
099E6 C4 F4                     	CPY byte_RAM_F4
099E8 08                        	PHP
099E9 B5 6F                     	LDA EnemyMovementDirection, X
099EB C9 01                     	CMP #$01
099ED D0 04                     	BNE loc_BANK2_97AA
099EF                           
099EF 68                        	PLA
099F0 49 01                     	EOR #$01
099F2 48                        	PHA
099F3                           
099F3                           loc_BANK2_97AA:
099F3 28                        	PLP
099F4 B0 02                     	BCS loc_BANK2_97AF
099F6                           
099F6 84 F4                     	STY byte_RAM_F4
099F8                           
099F8                           loc_BANK2_97AF:
099F8 AD BD 04                  	LDA DoorAnimationTimer
099FB C9 19                     	CMP #$19
099FD 90 04                     	BCC loc_BANK2_97BA
099FF                           
099FF A0 00                     	LDY #$00
09A01 84 F4                     	STY byte_RAM_F4
09A03                           
09A03                           loc_BANK2_97BA:
09A03 A9 76                     	LDA #$76
09A05 BC 77 04                  	LDY EnemyArray_477, X
09A08 F0 02                     	BEQ loc_BANK2_97C3
09A0A                           
09A0A A9 7E                     	LDA #$7E
09A0C                           
09A0C                           loc_BANK2_97C3:
09A0C 20 28 9E                  	JSR RenderSprite_DrawObject
09A0F                           
09A0F AE BD 04                  	LDX DoorAnimationTimer
09A12 F0 42                     	BEQ loc_BANK2_9805
09A14                           
09A14 EE BD 04                  	INC DoorAnimationTimer
09A17 A4 F4                     	LDY byte_RAM_F4
09A19 BD 59 9A                  	LDA DoorSpriteAnimation, X
09A1C 30 38                     	BMI loc_BANK2_9805
09A1E                           
09A1E 18                        	CLC
09A1F 79 03 02                  	ADC SpriteDMAArea + 3, Y
09A22 99 03 02                  	STA SpriteDMAArea + 3, Y
09A25 99 0B 02                  	STA SpriteDMAArea + $B, Y
09A28 E0 30                     	CPX #(DoorSpriteAnimationEnd-DoorSpriteAnimation)
09A2A D0 2A                     	BNE loc_BANK2_9805
09A2C                           
09A2C A9 00                     	LDA #$00
09A2E 8D BD 04                  	STA DoorAnimationTimer
09A31 20 66 FA                  	JSR DoAreaReset
09A34                           
09A34 AD 34 05                  	LDA TransitionType
09A37 C9 01                     	CMP #TransitionType_Door
09A39 D0 0D                     	BNE loc_BANK2_97F7
09A3B                           
09A3B                           IFDEF PLAYER_STUFF
09A3B 20 7C E8                      JSR SetGameModeBonusChanceCustom
09A3E AD EC 04                      LDA GameMode
09A41 D0 0D                     	BNE loc_BANK2_97FF
09A43                           ENDIF
09A43 EE 27 06                  	INC DoAreaTransition
09A46 D0 08                     	BNE loc_BANK2_97FF
09A48                           
09A48                           loc_BANK2_97F7:
09A48 AD 28 06                  	LDA InSubspaceOrJar
09A4B 49 02                     	EOR #$02
09A4D 8D 28 06                  	STA InSubspaceOrJar
09A50                           
09A50                           loc_BANK2_97FF:
09A50 68                        	PLA
09A51 68                        	PLA
09A52 68                        	PLA
09A53 68                        	PLA
09A54 68                        	PLA
09A55 68                        	PLA
09A56                           
09A56                           loc_BANK2_9805:
09A56 A6 12                     	LDX byte_RAM_12
09A58 60                        	RTS
09A59                           
09A59                           
09A59                           DoorSpriteAnimation:
09A59 00                        	.db $00
09A5A 01                        	.db $01
09A5B 01                        	.db $01
09A5C 02                        	.db $02
09A5D 02                        	.db $02
09A5E 03                        	.db $03
09A5F 04                        	.db $04
09A60 06                        	.db $06
09A61 08                        	.db $08
09A62 FF                        	.db $FF
09A63 FF                        	.db $FF
09A64 FF                        	.db $FF
09A65 FF                        	.db $FF
09A66 FF                        	.db $FF
09A67 FF                        	.db $FF
09A68 FF                        	.db $FF
09A69 FF                        	.db $FF
09A6A FF                        	.db $FF
09A6B FF                        	.db $FF
09A6C FF                        	.db $FF
09A6D FF                        	.db $FF
09A6E FF                        	.db $FF
09A6F FF                        	.db $FF
09A70 FF                        	.db $FF
09A71 FF                        	.db $FF
09A72 08                        	.db $08
09A73 06                        	.db $06
09A74 04                        	.db $04
09A75 03                        	.db $03
09A76 02                        	.db $02
09A77 02                        	.db $02
09A78 02                        	.db $02
09A79 02                        	.db $02
09A7A 01                        	.db $01
09A7B 01                        	.db $01
09A7C 01                        	.db $01
09A7D 01                        	.db $01
09A7E 01                        	.db $01
09A7F 00                        	.db $00
09A80 00                        	.db $00
09A81 00                        	.db $00
09A82 00                        	.db $00
09A83 00                        	.db $00
09A84 00                        	.db $00
09A85 00                        	.db $00
09A86 00                        	.db $00
09A87 00                        	.db $00
09A88 00                        	.db $00
09A89                           DoorSpriteAnimationEnd:
09A89 00                        	.db $00
09A8A                           
09A8A                           ; Unused?
09A8A A9                        	.db $A9
09A8B 02                        	.db $02
09A8C D0                        	.db $D0
09A8D 06                        	.db $06
09A8E                           
09A8E                           
09A8E                           
09A8E                           IFNDEF PLAYER_STUFF
09A8E                           ;
09A8E                           ; Note: Door animation code copied from Bank 1
09A8E                           ;
09A8E                           ; It's here, but seems to be unused?
09A8E                           ;
09A8E                           DoorAnimation_Locked_Bank2:
09A8E                           	LDA #$01
09A8E                           	BNE DoorAnimation_Bank2
09A8E                           
09A8E                           DoorAnimation_Unlocked_Bank2:
09A8E                           	LDA #$00
09A8E                           
09A8E                           DoorAnimation_Bank2:
09A8E                           	PHA
09A8E                           	LDY #$08
09A8E                           
09A8E                           DoorAnimation_Loop_Bank2:
09A8E                           	; skip if inactive
09A8E                           	LDA EnemyState, Y
09A8E                           	BEQ DoorAnimation_LoopNext_Bank2
09A8E                           
09A8E                           	LDA ObjectType, Y
09A8E                           	CMP #Enemy_SubspaceDoor
09A8E                           	BNE DoorAnimation_LoopNext_Bank2
09A8E                           
09A8E                           	LDA #EnemyState_PuffOfSmoke
09A8E                           	STA EnemyState, Y
09A8E                           	LDA #$20
09A8E                           	STA EnemyTimer, Y
09A8E                           
09A8E                           DoorAnimation_LoopNext_Bank2:
09A8E                           	DEY
09A8E                           	BPL DoorAnimation_Loop_Bank2
09A8E                           
09A8E                           	JSR CreateEnemy_TryAllSlots
09A8E                           
09A8E                           	BMI DoorAnimation_Exit_Bank2
09A8E                           
09A8E                           	LDA #$00
09A8E                           	STA DoorAnimationTimer
09A8E                           	STA SubspaceDoorTimer
09A8E                           	LDX byte_RAM_0
09A8E                           	PLA
09A8E                           	STA EnemyArray_477, X
09A8E                           	LDA #Enemy_SubspaceDoor
09A8E                           	STA ObjectType, X
09A8E                           	JSR SetEnemyAttributes
09A8E                           
09A8E                           	LDA PlayerXLo
09A8E                           	ADC #$08
09A8E                           	AND #$F0
09A8E                           	STA ObjectXLo, X
09A8E                           	LDA PlayerXHi
09A8E                           	ADC #$00
09A8E                           	STA ObjectXHi, X
09A8E                           	LDA PlayerYLo
09A8E                           	STA ObjectYLo, X
09A8E                           	LDA PlayerYHi
09A8E                           	STA ObjectYHi, X
09A8E                           	LDA #ObjAttrib_Palette1 | ObjAttrib_16x32
09A8E                           	STA ObjectAttributes, X
09A8E                           	LDX byte_RAM_12
09A8E                           	RTS
09A8E                           
09A8E                           DoorAnimation_Exit_Bank2:
09A8E                           	PLA
09A8E                           	RTS
09A8E                           ENDIF
09A8E                           
09A8E                           
09A8E                           ShellSpeed:
09A8E 1C                        	.db $1C
09A8F E4                        	.db $E4
09A90                           
09A90                           
09A90                           EnemyBehavior_Shell:
09A90 20 36 B5                  	JSR ObjectTileCollision
09A93                           
09A93 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
09A96                           
09A96 B5 5B                     	LDA EnemyCollision, X
09A98 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
09A9A F0 08                     	BEQ EnemyBehavior_Shell_Slide
09A9C                           
09A9C                           EnemyBehavior_Shell_Destroy:
09A9C A9 20                     	LDA #SoundEffect1_EnemyHit
09A9E 8D 02 06                  	STA SoundEffectQueue1
09AA1                           IFNDEF PLAYER_STUFF
09AA1                           	JMP TurnIntoPuffOfSmoke
09AA1                           ENDIF
09AA1                           IFDEF PLAYER_STUFF
09AA1 20 56 A1                  	JSR EnemyBehavior_TurnAround
09AA4                           ENDIF
09AA4                           
09AA4                           
09AA4                           EnemyBehavior_Shell_Slide:
09AA4 B5 5B                     	LDA EnemyCollision, X
09AA6 29 04                     	AND #CollisionFlags_Down
09AA8 F0 03                     	BEQ EnemyBehavior_Shell_Render
09AAA                           
09AAA 20 AC 97                  	JSR ResetObjectYVelocity
09AAD                           
09AAD                           EnemyBehavior_Shell_Render:
09AAD 20 90 9D                  	JSR RenderSprite
09AB0                           
09AB0 B4 6F                     	LDY EnemyMovementDirection, X
09AB2                           IFDEF PLAYER_STUFF
09AB2 B5 3D                         LDA ObjectXVelocity, X
09AB4 F0 03                         BEQ +
09AB6 4C FC 85                      JMP ApplyObjectMovement
09AB9                           +
09AB9 B5 90                         LDA ObjectType, X
09ABB C9 35                         CMP #Enemy_Shell
09ABD D0 03                         BNE ++
09ABF 4C FC 85                      JMP ApplyObjectMovement
09AC2                           ++
09AC2                           ENDIF
09AC2 B9 8D 9A                  	LDA ShellSpeed - 1, Y
09AC5 95 3D                     	STA ObjectXVelocity, X
09AC7 4C FC 85                  	JMP ApplyObjectMovement
09ACA                           
09ACA                           
09ACA                           ; =============== S U B R O U T I N E =======================================
09ACA                           
09ACA                           sub_BANK2_98C4:
09ACA A9 03                     	LDA #EnemyState_BlockFizzle
09ACC 95 51                     	STA EnemyState, X
09ACE A9 18                     	LDA #$18
09AD0 95 86                     	STA EnemyTimer, X
09AD2                           IFDEF HOT_SPOTS
09AD2 B5 90                         LDA ObjectType, X
09AD4 C9 3A                         CMP #Enemy_POWBlock
09AD6 F0 15                         BEQ +
09AD8 20 7B EE                      JSR HotSpotLookup
09ADB C9 FF                         CMP #$FF
09ADD F0 0E                         BEQ +
09ADF 95 90                     	STA ObjectType, X
09AE1 20 1F 84                      JSR InitializeEnemy
09AE4 A9 01                     	LDA #EnemyState_Alive
09AE6 95 51                     	STA EnemyState, X
09AE8 A9 01                     	LDA #$1
09AEA 9D 65 04                  	STA EnemyHP, X
09AED                           +
09AED                           ENDIF
09AED                               ;; hidden item in block?
09AED                           
09AED                           locret_BANK2_98CC:
09AED 60                        	RTS
09AEE                           
09AEE                           ; End of function sub_BANK2_98C4
09AEE                           
09AEE                           
09AEE                           ;
09AEE                           ; Intercepts the normal enemy behavior when the object is being carried
09AEE                           ;
09AEE                           EnemyBehavior_CheckBeingCarriedTimerInterrupt:
09AEE B5 A8                     	LDA ObjectBeingCarriedTimer, X
09AF0 F0 FB                     	BEQ locret_BANK2_98CC
09AF2                           
09AF2                           	; Cancel previous subroutine and go into carry mode
09AF2 68                        	PLA
09AF3 68                        	PLA
09AF4 4C ED 97                  	JMP CarryObject
09AF7                           
09AF7                           
09AF7                           ;
09AF7                           ; If EnemyArray_42F is set, interrupt the EnemyBehavior subroutine and just
09AF7                           ; render the sprite and run physics
09AF7                           ;
09AF7                           ; Input
09AF7                           ;   X = enemy index
09AF7                           ;
09AF7                           EnemyBehavior_Check42FPhysicsInterrupt:
09AF7 BD 2F 04                  	LDA EnemyArray_42F, X
09AFA F0 0F                     	BEQ locret_BANK2_98EA
09AFC                           
09AFC 68                        	PLA
09AFD 68                        	PLA
09AFE 4C F9 85                  	JMP RenderSpriteAndApplyObjectMovement
09B01                           
09B01                           
09B01                           EnemyInit_FallingLogs:
09B01 20 76 8E                  	JSR EnemyInit_Stationary
09B04                           
09B04 9D 38 04                  	STA EnemyArray_438, X
09B07 B5 33                     	LDA ObjectYLo, X
09B09 95 79                     	STA EnemyVariable, X
09B0B                           
09B0B                           locret_BANK2_98EA:
09B0B 60                        	RTS
09B0C                           
09B0C                           
09B0C                           
09B0C                           ; ---------------------------------------------------------------------------
09B0C                           
09B0C                           EnemyBehavior_FallingLogs:
09B0C 16 65                     	ASL ObjectAttributes, X
09B0E A5 10                     	LDA byte_RAM_10
09B10 0A                        	ASL A
09B11 0A                        	ASL A
09B12 0A                        	ASL A
09B13 0A                        	ASL A
09B14 76 65                     	ROR ObjectAttributes, X
09B16 B4 B1                     	LDY EnemyArray_B1, X
09B18 D0 20                     	BNE loc_BANK2_9919
09B1A                           
09B1A                           	; behind background
09B1A B5 65                     	LDA ObjectAttributes, X
09B1C 09 20                     	ORA #ObjAttrib_BehindBackground
09B1E 95 65                     	STA ObjectAttributes, X
09B20 B5 79                     	LDA EnemyVariable, X
09B22 38                        	SEC
09B23 E9 0C                     	SBC #$0C
09B25 D5 33                     	CMP ObjectYLo, X
09B27 A9 FE                     	LDA #$FE
09B29 90 0A                     	BCC loc_BANK2_9914
09B2B                           
09B2B                           	; in front of background
09B2B B5 65                     	LDA ObjectAttributes, X
09B2D 29 DF                     	AND #$DF
09B2F 95 65                     	STA ObjectAttributes, X
09B31 F6 B1                     	INC EnemyArray_B1, X
09B33 A9 04                     	LDA #$04
09B35                           
09B35                           loc_BANK2_9914:
09B35 95 47                     	STA ObjectYVelocity, X
09B37 4C 42 9B                  	JMP loc_BANK2_9921
09B3A                           
09B3A                           ; ---------------------------------------------------------------------------
09B3A                           
09B3A                           loc_BANK2_9919:
09B3A A5 10                     	LDA byte_RAM_10
09B3C 29 07                     	AND #$07
09B3E D0 02                     	BNE loc_BANK2_9921
09B40                           
09B40 F6 47                     	INC ObjectYVelocity, X
09B42                           
09B42                           loc_BANK2_9921:
09B42 20 F0 A0                  	JSR ApplyObjectPhysicsY
09B45                           
09B45 B5 33                     	LDA ObjectYLo, X
09B47 C9 F0                     	CMP #$F0
09B49 90 08                     	BCC loc_BANK2_9932
09B4B                           
09B4B A9 00                     	LDA #$00
09B4D 95 B1                     	STA EnemyArray_B1, X
09B4F B5 79                     	LDA EnemyVariable, X
09B51 95 33                     	STA ObjectYLo, X
09B53                           
09B53                           loc_BANK2_9932:
09B53 4C 90 9D                  	JMP RenderSprite
09B56                           
09B56                           ; ---------------------------------------------------------------------------
09B56                           
09B56                           ;
09B56                           ; Kills all enemies on the screen (ie. POW block quake)
09B56                           ;
09B56                           KillOnscreenEnemies:
09B56 A9 00                     	LDA #$00
09B58                           
09B58                           ;
09B58                           ; Destroys all enemies on the screen
09B58                           ;
09B58                           ; Input
09B58                           ;   A = 0 for POW
09B58                           ;
09B58                           DestroyOnscreenEnemies:
09B58 85 00                     	STA byte_RAM_0
09B5A A2 08                     	LDX #$08
09B5C                           
09B5C                           DestroyOnscreenEnemies_Loop:
09B5C B5 51                     	LDA EnemyState, X
09B5E C9 01                     	CMP #EnemyState_Alive
09B60 D0 39                     	BNE DestroyOnscreenEnemies_Next
09B62                           
09B62                           IFDEF PLAYER_STUFF_POW_IMMUNE
09B62                           	LDA unk_RAM_49B, X
09B62                               BNE KillOnscreenEnemies_CheckCollision
09B62                           ENDIF
09B62                           
09B62 A5 00                     	LDA byte_RAM_0
09B64 F0 21                     	BEQ KillOnscreenEnemies_CheckCollision
09B66                           
09B66 B5 90                     	LDA ObjectType, X
09B68 C9 37                     	CMP #Enemy_Bomb
09B6A F0 04                     	BEQ DestroyOnscreenEnemies_DestroyItem
09B6C                           
09B6C C9 32                     	CMP #Enemy_VegetableSmall
09B6E B0 2B                     	BCS DestroyOnscreenEnemies_Next
09B70                           
09B70                           DestroyOnscreenEnemies_DestroyItem:
09B70 A5 9C                     	LDA HoldingItem
09B72 F0 09                     	BEQ DestroyOnscreenEnemies_Poof
09B74                           
09B74 EC 2D 04                  	CPX ObjectBeingCarriedIndex
09B77 D0 04                     	BNE DestroyOnscreenEnemies_Poof
09B79                           
09B79 A9 00                     	LDA #$00
09B7B 85 9C                     	STA HoldingItem
09B7D                           
09B7D                           DestroyOnscreenEnemies_Poof:
09B7D 86 0E                     	STX byte_RAM_E
09B7F 20 27 93                  	JSR TurnIntoPuffOfSmoke
09B82                           
09B82 A6 0E                     	LDX byte_RAM_E
09B84 4C 9B 9B                  	JMP DestroyOnscreenEnemies_Next
09B87                           
09B87                           KillOnscreenEnemies_CheckCollision:
09B87 B5 5B                     	LDA EnemyCollision, X
09B89 F0 10                     	BEQ DestroyOnscreenEnemies_Next
09B8B                           
09B8B                           IFDEF FIX_POW_LOG_GLITCH
09B8B B5 90                     	LDA ObjectType, X
09B8D C9 32                     	CMP #Enemy_VegetableSmall
09B8F B0 04                     	BCS KillOnscreenEnemies_SetCollision
09B91                           ENDIF
09B91                           
09B91                           	; BUG: For object that don't follow normal gravity rules, this will send
09B91                           	; them flying into the air, ie. throwing a POW block from a falling log
09B91 A9 D8                     	LDA #$D8
09B93 95 47                     	STA ObjectYVelocity, X
09B95                           
09B95                           KillOnscreenEnemies_SetCollision:
09B95 B5 5B                     	LDA EnemyCollision, X
09B97 09 10                     	ORA #CollisionFlags_Damage
09B99 95 5B                     	STA EnemyCollision, X
09B9B                           
09B9B                           DestroyOnscreenEnemies_Next:
09B9B CA                        	DEX
09B9C 10 BE                     	BPL DestroyOnscreenEnemies_Loop
09B9E                           
09B9E A6 12                     	LDX byte_RAM_12
09BA0 60                        	RTS
09BA1                           
09BA1                           
09BA1                           ;
09BA1                           ; Checks whether the enemy is taking mortal damage
09BA1                           ;
09BA1                           ; If so, play the sound effect, kill the enemy, and cancel the previous enemy
09BA1                           ; behavior subroutine.
09BA1                           ;
09BA1                           ; Input
09BA1                           ;   X = enemy index
09BA1                           ;
09BA1                           EnemyBehavior_CheckDamagedInterrupt:
09BA1 B5 5B                     	LDA EnemyCollision, X
09BA3 29 10                     	AND #CollisionFlags_Damage
09BA5 F0 4D                     	BEQ EnemyBehavior_CheckDamagedInterrupt_Exit
09BA7                           
09BA7 B5 A8                     	LDA ObjectBeingCarriedTimer, X
09BA9 F0 04                     	BEQ EnemyBehavior_CheckDamagedInterrupt_SoundEffect
09BAB                           
09BAB                           	; remove the item from the player's hands
09BAB A9 00                     	LDA #$00
09BAD 85 9C                     	STA HoldingItem
09BAF                           
09BAF                           EnemyBehavior_CheckDamagedInterrupt_SoundEffect:
09BAF B4 90                     	LDY ObjectType, X
09BB1                           	; is this enemy a squawker?
09BB1 B9 60 F8                  	LDA EnemyArray_46E_Data, Y
09BB4 29 08                     	AND #%00001000
09BB6 0A                        	ASL A ; then A = DPCM_BossDeath
09BB7 D0 0C                     	BNE EnemyBehavior_CheckDamagedInterrupt_BossDeathSound
09BB9                           
09BB9                           	; normal enemy hit sound
09BB9 AD 01 06                  	LDA DPCMQueue
09BBC D0 0A                     	BNE EnemyBehavior_CheckDamagedInterrupt_CheckPidgit
09BBE                           
09BBE A9 20                     	LDA #SoundEffect1_EnemyHit
09BC0 8D 02 06                  	STA SoundEffectQueue1
09BC3 D0 03                     	BNE EnemyBehavior_CheckDamagedInterrupt_CheckPidgit
09BC5                           
09BC5                           EnemyBehavior_CheckDamagedInterrupt_BossDeathSound:
09BC5                           IFDEF EXPAND_MUSIC
09BC5                           	LDA #DPCM_BossDeath
09BC5                           ENDIF
09BC5 8D 01 06                  	STA DPCMQueue
09BC8                           
09BC8                           EnemyBehavior_CheckDamagedInterrupt_CheckPidgit:
09BC8                           	; killing pidgit leaves a flying carpet behind
09BC8 C0 12                     	CPY #Enemy_Pidgit
09BCA D0 08                     	BNE EnemyBehavior_CheckDamagedInterrupt_SetDead
09BCC                           
09BCC BD 2F 04                  	LDA EnemyArray_42F, X
09BCF D0 03                     	BNE EnemyBehavior_CheckDamagedInterrupt_SetDead
09BD1                           
09BD1 20 7D A5                  	JSR CreateFlyingCarpet
09BD4                           
09BD4                           EnemyBehavior_CheckDamagedInterrupt_SetDead:
09BD4 A9 02                     	LDA #EnemyState_Dead
09BD6 95 51                     	STA EnemyState, X
09BD8                           	; interrupt the previous subroutine
09BD8 68                        	PLA
09BD9 68                        	PLA
09BDA                           IFDEF PLAYER_STUFF
09BDA A9 40                         LDA #Enemy_Mushroom1up
09BDC 8D F0 76                      STA RandomDropType
09BDF A0 01                         LDY #$1
09BE1 CC AC 05                      CPY PseudoRNGValues
09BE4 20 F5 9B                      JSR CreateEnemyDrop
09BE7 A9 36                         LDA #Enemy_Coin
09BE9 8D F0 76                      STA RandomDropType
09BEC A0 10                         LDY #$10
09BEE CC AD 05                      CPY PseudoRNGValues + 1
09BF1 20 F5 9B                      JSR CreateEnemyDrop
09BF4                           ENDIF
09BF4                           
09BF4                           EnemyBehavior_CheckDamagedInterrupt_Exit:
09BF4 60                        	RTS
09BF5                           
09BF5                           IFDEF PLAYER_STUFF
09BF5                           CreateEnemyDrop:
09BF5 90 27                           BCC     +
09BF7 8A                              TXA
09BF8 48                              PHA
09BF9                           
09BF9 20 7E 94                        JSR     CreateEnemy_TryAllSlots
09BFC A6 00                           LDX     byte_RAM_0
09BFE A9 FF                           LDA     #$FF
09C00 95 79                           STA     EnemyVariable, X
09C02 AD F0 76                        LDA     RandomDropType
09C05 95 90                           STA     ObjectType,X
09C07 B5 33                           LDA     ObjectYLo,X
09C09 18                              CLC
09C0A 69 F0                           ADC     #$F0
09C0C 95 33                           STA     ObjectYLo,X
09C0E A9 E0                           LDA     #$E0
09C10 95 47                           STA     ObjectYVelocity,X
09C12 A9 00                           LDA     #$00
09C14 95 3D                           STA     ObjectXVelocity,X
09C16 20 B0 84                        JSR     SetEnemyAttributes
09C19 20 EE 85                  	  JSR     UnlinkEnemyFromRawData
09C1C                           
09C1C 68                              PLA
09C1D AA                              TAX
09C1E                           +
09C1E 60                              RTS
09C1F                           ENDIF
09C1F                           
09C1F                           
09C1F                           EnemyTilemap1:
09C1F D0 D2                     	.db $D0,$D2 ; $00
09C21 D4 D6                     	.db $D4,$D6 ; $02
09C23 F8 F8                     	.db $F8,$F8 ; $04
09C25 FA FA                     	.db $FA,$FA ; $06
09C27 CC CE                     	.db $CC,$CE ; $08
09C29 CC CE                     	.db $CC,$CE ; $0A
09C2B C8 CA                     	.db $C8,$CA ; $0C
09C2D C8 CA                     	.db $C8,$CA ; $0E
09C2F 70 72                     	.db $70,$72 ; $10
09C31 74 76                     	.db $74,$76 ; $12
09C33 C0 C2                     	.db $C0,$C2 ; $14
09C35 C4 C6                     	.db $C4,$C6 ; $16
09C37 E1 E3                     	.db $E1,$E3 ; $18
09C39 E5 E7                     	.db $E5,$E7 ; $1A
09C3B E1 E3                     	.db $E1,$E3 ; $1C
09C3D E5 E7                     	.db $E5,$E7 ; $1E
09C3F 78 7A                     	.db $78,$7A ; $20
09C41 7C 7E                     	.db $7C,$7E ; $22
09C43 DC DA                     	.db $DC,$DA ; $24
09C45 DC DE                     	.db $DC,$DE ; $26
09C47 FE FE                     	.db $FE,$FE ; $28
09C49 FC FC                     	.db $FC,$FC ; $2A
09C4B 94 94                     	.db $94,$94 ; $2C
09C4D 96 96                     	.db $96,$96 ; $2E
09C4F 98 98                     	.db $98,$98 ; $30
09C51 9A 9A                     	.db $9A,$9A ; $32
09C53 DB DD                     	.db $DB,$DD ; $34
09C55 DB DD                     	.db $DB,$DD ; $36
09C57 7D 7F                     	.db $7D,$7F ; $38
09C59 C1 C3                     	.db $C1,$C3 ; $3A
09C5B 8C 8C                     	.db $8C,$8C ; $3C
09C5D 8E 8E                     	.db $8E,$8E ; $3E
09C5F                           IFDEF PLAYER_STUFF
09C5F 40 42                     	.db $40,$42 ; $40 ;rocket
09C61                           ENDIF
09C61                           IFNDEF PLAYER_STUFF
09C61                           	.db $E0,$E2 ; $40
09C61                           ENDIF
09C61 6B 6D                     	.db $6B,$6D ; $42
09C63 6D 6F                     	.db $6D,$6F ; $44
09C65                           IFNDEF PLAYER_STUFF
09C65                           	.db $3A,$3A ; $46
09C65                           	.db $3A,$3A ; $48
09C65                           	.db $38,$38 ; $4A
09C65                           	.db $38,$38 ; $4C
09C65                           	.db $36,$36 ; $4E
09C65                           	.db $36,$36 ; $50
09C65                           	.db $34,$34 ; $52
09C65                           	.db $34,$34 ; $54
09C65                           ENDIF
09C65                           IFDEF PLAYER_STUFF
09C65 DF DF                     	.db $Df,$Df ; $46
09C67 DF DF                     	.db $Df,$Df ; $48
09C69 DF DF                     	.db $Df,$Df ; $4A
09C6B DF DF                     	.db $Df,$Df ; $4C
09C6D DF DF                     	.db $Df,$Df ; $4E
09C6F DF DF                     	.db $Df,$Df ; $50
09C71 DF DF                     	.db $Df,$Df ; $52
09C73 DF DF                     	.db $Df,$Df ; $54
09C75                           ENDIF
09C75 AE FB                     	.db $AE,$FB ; $56
09C77 AE FB                     	.db $AE,$FB ; $58
09C79 80 82                     	.db $80,$82 ; $5A
09C7B 84 86                     	.db $84,$86 ; $5C
09C7D 80 82                     	.db $80,$82 ; $5E
09C7F AA AC                     	.db $AA,$AC ; $60
09C81 88 8A                     	.db $88,$8A ; $62
09C83 84 86                     	.db $84,$86 ; $64
09C85 88 8A                     	.db $88,$8A ; $66
09C87 AA AC                     	.db $AA,$AC ; $68
09C89 BC BE                     	.db $BC,$BE ; $6A
09C8B AA AC                     	.db $AA,$AC ; $6C
09C8D BC BE                     	.db $BC,$BE ; $6E
09C8F AA AC                     	.db $AA,$AC ; $70
09C91 B5 B9                     	.db $B5,$B9 ; $72
09C93 B5 B9                     	.db $B5,$B9 ; $74
09C95 81 83                     	.db $81,$83 ; $76
09C97 85 87                     	.db $85,$87 ; $78
09C99 FF FF                     	.db $FF,$FF ; $7A
09C9B FF FF                     	.db $FF,$FF ; $7C
09C9D 81 83                     	.db $81,$83 ; $7E
09C9F F5 87                     	.db $F5,$87 ; $80
09CA1 C5 C7                     	.db $C5,$C7 ; $82
09CA3 C9 CB                     	.db $C9,$CB ; $84
09CA5 92 94                     	.db $92,$94 ; $86
09CA7                           IFNDEF PLAYER_STUFF
09CA7                           	.db $29,$29 ; $88   
09CA7                           	.db $2B,$2B ; $8A   ; vine guy
09CA7                           	.db $3D,$3F ; $8C   ; mask
09CA7                           ENDIF
09CA7                           IFDEF PLAYER_STUFF
09CA7 48 48                     	.db $48,$48 ; $88   
09CA9 4A 4A                     	.db $4a,$4a ; $8A   
09CAB ED EF                     	.db $ed,$ef ; $8C   ; mask
09CAD                           ENDIF
09CAD 4C 4E                     	.db $4C,$4E ; $8E
09CAF 50 52                     	.db $50,$52 ; $90
09CB1 4C 4E                     	.db $4C,$4E ; $92
09CB3 56 58                     	.db $56,$58 ; $94
09CB5 FB 5C                     	.db $FB,$5C ; $96
09CB7 FB 5A                     	.db $FB,$5A ; $98
09CB9 FB FB                     	.db $FB,$FB ; $9A
09CBB FB 54                     	.db $FB,$54 ; $9C
09CBD CF CF                     	.db $CF,$CF ; $9E
09CBF A5 A5                     	.db $A5,$A5 ; $A0
09CC1 B0 B2                     	.db $B0,$B2 ; $A2
09CC3 90 90                     	.db $90,$90 ; $A4
09CC5 CD CD                     	.db $CD,$CD ; $A6
09CC7 A8 A8                     	.db $A8,$A8 ; $A8
09CC9 A8 A8                     	.db $A8,$A8 ; $AA
09CCB A0 A2                     	.db $A0,$A2 ; $AC
09CCD A4 A4                     	.db $A4,$A4 ; $AE
09CCF A4 A4                     	.db $A4,$A4 ; $B0
09CD1 4D 4D                     	.db $4D,$4D ; $B2
09CD3 8C 8C                     	.db $8C,$8C ; $B4
09CD5 A6 A6                     	.db $A6,$A6 ; $B6
09CD7 AB AB                     	.db $AB,$AB ; $B8
09CD9                           IFDEF EXPAND_TABLES
09CD9                           	unusedSpace EnemyTilemap1 + $100, $FB
09CD9                           ENDIF
09CD9                           
09CD9                           ;
09CD9                           ; Enemy Animation table
09CD9                           ; =====================
09CD9                           ;
09CD9                           ; These point to the tilemaps offset for an object's animation frames.
09CD9                           ;
09CD9                           ; $FF is used to make an enemy invisible
09CD9                           ;
09CD9                           EnemyAnimationTable:
09CD9 00                        	.db $00 ; $00 Enemy_Heart
09CDA 00                        	.db $00 ; $01 Enemy_ShyguyRed
09CDB 08                        	.db $08 ; $02 Enemy_Tweeter
09CDC 00                        	.db $00 ; $03 Enemy_ShyguyPink
09CDD 0C                        	.db $0C ; $04 Enemy_Porcupo
09CDE 10                        	.db $10 ; $05 Enemy_SnifitRed
09CDF 10                        	.db $10 ; $06 Enemy_SnifitGray
09CE0 10                        	.db $10 ; $07 Enemy_SnifitPink
09CE1 40                        	.db $40 ; $08 Enemy_Ostro
09CE2 14                        	.db $14 ; $09 Enemy_BobOmb
09CE3 18                        	.db $18 ; $0A Enemy_AlbatossCarryingBobOmb
09CE4 18                        	.db $18 ; $0B Enemy_AlbatossStartRight
09CE5 18                        	.db $18 ; $0C Enemy_AlbatossStartLeft
09CE6 20                        	.db $20 ; $0D Enemy_NinjiRunning
09CE7 20                        	.db $20 ; $0E Enemy_NinjiJumping
09CE8 24                        	.db $24 ; $0F Enemy_BeezoDiving
09CE9 24                        	.db $24 ; $10 Enemy_BeezoStraight
09CEA BE                        	.db $BE ; $11 Enemy_WartBubble
09CEB 00                        	.db $00 ; $12 Enemy_Pidgit
09CEC 86                        	.db $86 ; $13 Enemy_Trouter
09CED 88                        	.db $88 ; $14 Enemy_Hoopstar
09CEE FF                        	.db $FF ; $15 Enemy_JarGeneratorShyguy
09CEF FF                        	.db $FF ; $16 Enemy_JarGeneratorBobOmb
09CF0 8C                        	.db $8C ; $17 Enemy_Phanto
09CF1 5C                        	.db $5C ; $18 Enemy_CobratJar
09CF2 5C                        	.db $5C ; $19 Enemy_CobratSand
09CF3 6C                        	.db $6C ; $1A Enemy_Pokey
09CF4 56                        	.db $56 ; $1B Enemy_Bullet
09CF5 5A                        	.db $5A ; $1C Enemy_Birdo
09CF6 14                        	.db $14 ; $1D Enemy_Mouser
09CF7 72                        	.db $72 ; $1E Enemy_Egg
09CF8 00                        	.db $00 ; $1F Enemy_Tryclyde
09CF9 A8                        	.db $A8 ; $20 Enemy_Fireball
09CFA 00                        	.db $00 ; $21 Enemy_Clawgrip
09CFB D6                        	.db $D6 ; $22 Enemy_ClawgripRock
09CFC AC                        	.db $AC ; $23 Enemy_PanserStationaryFiresAngled
09CFD AC                        	.db $AC ; $24 Enemy_PanserWalking
09CFE AC                        	.db $AC ; $25 Enemy_PanserStationaryFiresUp
09CFF 74                        	.db $74 ; $26 Enemy_Autobomb
09D00 7A                        	.db $7A ; $27 Enemy_AutobombFire
09D01 92                        	.db $92 ; $28 Enemy_WhaleSpout
09D02 9A                        	.db $9A ; $29 Enemy_Flurry
09D03 80                        	.db $80 ; $2A Enemy_Fryguy
09D04 90                        	.db $90 ; $2B Enemy_FryguySplit
09D05 00                        	.db $00 ; $2C Enemy_Wart
09D06 00                        	.db $00 ; $2D Enemy_HawkmouthBoss
09D07 B6                        	.db $B6 ; $2E Enemy_Spark1
09D08 B6                        	.db $B6 ; $2F Enemy_Spark2
09D09 B6                        	.db $B6 ; $30 Enemy_Spark3
09D0A B6                        	.db $B6 ; $31 Enemy_Spark4
09D0B 28                        	.db $28 ; $32 Enemy_VegetableSmall
09D0C 2A                        	.db $2A ; $33 Enemy_VegetableLarge
09D0D 2C                        	.db $2C ; $34 Enemy_VegetableWart
09D0E 2E                        	.db $2E ; $35 Enemy_Shell
09D0F 30                        	.db $30 ; $36 Enemy_Coin
09D10 34                        	.db $34 ; $37 Enemy_Bomb
09D11 00                        	.db $00 ; $38 Enemy_Rocket
09D12 38                        	.db $38 ; $39 Enemy_MushroomBlock
09D13 3A                        	.db $3A ; $3A Enemy_POWBlock
09D14 42                        	.db $42 ; $3B Enemy_FallingLogs
09D15 82                        	.db $82 ; $3C Enemy_SubspaceDoor
09D16 82                        	.db $82 ; $3D Enemy_Key
09D17 84                        	.db $84 ; $3E Enemy_SubspacePotion
09D18 A0                        	.db $A0 ; $3F Enemy_Mushroom
09D19 A2                        	.db $A2 ; $40 Enemy_Mushroom1up
09D1A 04                        	.db $04 ; $41 Enemy_FlyingCarpet
09D1B 8E                        	.db $8E ; $42 Enemy_HawkmouthRight
09D1C 8E                        	.db $8E ; $43 Enemy_HawkmouthLeft
09D1D 9E                        	.db $9E ; $44 Enemy_CrystalBall
09D1E A6                        	.db $A6 ; $45 Enemy_Starman
09D1F A4                        	.db $A4 ; $46 Enemy_Stopwatch
09D20                           
09D20                           ; =============== S U B R O U T I N E =======================================
09D20                           
09D20                           ; The first part of this routine determines if we are the Princess,
09D20                           ; who does not bob her vegetables (or whatever other Subcon detritus
09D20                           ; she happens to be holding)
09D20                           ;
09D20                           ; After that it just moves the sprite into the player's hands.
09D20                           
09D20                           PutCarriedObjectInHands:
09D20 B5 33                     	LDA ObjectYLo, X
09D22 18                        	CLC
09D23 E5 CB                     	SBC ScreenYLo
09D25 B4 A8                     	LDY ObjectBeingCarriedTimer, X
09D27 F0 16                     	BEQ loc_BANK2_9ACA
09D29                           
09D29 A4 C7                     	LDY PlayerAnimationFrame
09D2B D0 12                     	BNE loc_BANK2_9ACA
09D2D                           
09D2D A4 8F                     	LDY CurrentCharacter ; Check if we are Princess
09D2F                           IFNDEF PLAYER_STUFF
09D2F                           	DEY
09D2F                           	BEQ loc_BANK2_9ACA ; If so, skip making it bob sometimes.
09D2F                           ENDIF
09D2F                           IFDEF PLAYER_STUFF
09D2F 8D 2C 04                  	STA SpriteTempScreenY ; Determine where it should show up on
09D32 B9 C9 EE                      LDA DokiMode, Y
09D35 29 08                         AND #CustomCharFlag_PeachWalk
09D37 D0 09                     	BNE loc_BANK2_9ACA + 3
09D39 AD 2C 04                      LDA SpriteTempScreenY
09D3C                           ENDIF
09D3C                           
09D3C 38                        	SEC
09D3D E9 01                     	SBC #$01
09D3F                           
09D3F                           loc_BANK2_9ACA:
09D3F 8D 2C 04                  	STA SpriteTempScreenY ; Determine where it should show up on
09D42 B5 29                     	LDA ObjectXLo, X ; the screen and put it in that place.
09D44 38                        	SEC
09D45 ED C0 04                  	SBC ScreenBoundaryLeftLo
09D48 8D 29 04                  	STA SpriteTempScreenX
09D4B 60                        	RTS
09D4C                           
09D4C                           ; End of function PutCarriedObjectInHands
09D4C                           
09D4C                           ; ---------------------------------------------------------------------------
09D4C                           
09D4C                           RenderSprite_Birdo:
09D4C B5 51                     	LDA EnemyState, X
09D4E C9 01                     	CMP #EnemyState_Alive
09D50 D0 05                     	BNE loc_BANK2_9AE2
09D52                           
09D52 BD 5C 04                  	LDA EnemyArray_45C, X
09D55 F0 04                     	BEQ loc_BANK2_9AE6
09D57                           
09D57                           loc_BANK2_9AE2:
09D57 A9 6A                     	LDA #$6A
09D59 D0 06                     	BNE loc_BANK2_9AEC
09D5B                           
09D5B                           loc_BANK2_9AE6:
09D5B B5 86                     	LDA EnemyTimer, X
09D5D F0 05                     	BEQ loc_BANK2_9AEF
09D5F                           
09D5F A9 62                     	LDA #$62
09D61                           
09D61                           loc_BANK2_9AEC:
09D61 4C 28 9E                  	JMP RenderSprite_DrawObject
09D64                           
09D64                           ; ---------------------------------------------------------------------------
09D64                           
09D64                           loc_BANK2_9AEF:
09D64 4C 1C 9E                  	JMP RenderSprite_NotAlbatoss
09D67                           
09D67                           
09D67                           RenderSprite_Albatoss:
09D67 A5 EE                     	LDA byte_RAM_EE
09D69 48                        	PHA
09D6A 20 1C 9E                  	JSR RenderSprite_NotAlbatoss
09D6D                           
09D6D 68                        	PLA
09D6E 0A                        	ASL A
09D6F 85 EE                     	STA byte_RAM_EE
09D71 B5 B1                     	LDA EnemyArray_B1, X
09D73 05 EF                     	ORA byte_RAM_EF
09D75 D0 3E                     	BNE RenderSprite_Invisible
09D77                           
09D77 AD 29 04                  	LDA SpriteTempScreenX
09D7A 69 08                     	ADC #$08
09D7C 85 01                     	STA byte_RAM_1
09D7E B5 6F                     	LDA EnemyMovementDirection, X
09D80 85 02                     	STA byte_RAM_2
09D82 A9 01                     	LDA #$01
09D84 85 03                     	STA byte_RAM_3
09D86 85 05                     	STA byte_RAM_5
09D88 20 2F FC                  	JSR loc_BANKF_FAFE
09D8B                           
09D8B A2 14                     	LDX #$14
09D8D 4C EF 9E                  	JMP loc_BANK2_9C7A
09D90                           
09D90                           
09D90                           ; =============== S U B R O U T I N E =======================================
09D90                           
09D90                           ;
09D90                           ; Renders a sprite for an object based on the enemy animation table lookup
09D90                           ;
09D90                           ; There are a lot of special cases basd on ObjectType
09D90                           ;
09D90                           ; Input
09D90                           ;   X = enemy index
09D90                           ;
09D90                           RenderSprite:
09D90 B4 90                     	LDY ObjectType, X
09D92 B9 D9 9C                  	LDA EnemyAnimationTable, Y
09D95 C9 FF                     	CMP #$FF
09D97 F0 1C                     	BEQ RenderSprite_Invisible
09D99                           
09D99 C0 1D                     	CPY #Enemy_Mouser
09D9B D0 03                     	BNE RenderSprite_NotMouser
09D9D                           
09D9D 4C 38 A7                  	JMP RenderSprite_Mouser
09DA0                           
09DA0                           RenderSprite_NotMouser:
09DA0 C0 21                     	CPY #Enemy_Clawgrip
09DA2 D0 03                     	BNE RenderSprite_NotClawgrip
09DA4                           
09DA4 4C 21 A3                  	JMP RenderSprite_Clawgrip
09DA7                           
09DA7                           RenderSprite_NotClawgrip:
09DA7 C0 22                     	CPY #Enemy_ClawgripRock
09DA9 D0 03                     	BNE RenderSprite_NotClawgripRock
09DAB                           
09DAB 4C 60 A4                  	JMP RenderSprite_ClawgripRock
09DAE                           
09DAE                           RenderSprite_NotClawgripRock:
09DAE C0 2D                     	CPY #Enemy_HawkmouthBoss
09DB0 D0 04                     	BNE RenderSprite_NotHawkmouthBoss
09DB2                           
09DB2 4C 63 B2                  	JMP RenderSprite_HawkmouthBoss
09DB5                           
09DB5                           RenderSprite_Invisible:
09DB5 60                        	RTS
09DB6                           
09DB6                           RenderSprite_NotHawkmouthBoss:
09DB6 C0 12                     	CPY #Enemy_Pidgit
09DB8 D0 03                     	BNE RenderSprite_NotPidgit
09DBA                           
09DBA 4C 45 A6                  	JMP RenderSprite_Pidgit
09DBD                           
09DBD                           RenderSprite_NotPidgit:
09DBD C0 04                     	CPY #Enemy_Porcupo
09DBF D0 03                     	BNE RenderSprite_NotPorcupo
09DC1                           
09DC1 4C AB A0                  	JMP RenderSprite_Porcupo
09DC4                           
09DC4                           RenderSprite_NotPorcupo:
09DC4 C0 33                     	CPY #Enemy_VegetableLarge
09DC6 D0 03                     	BNE RenderSprite_NotVegetableLarge
09DC8                           
09DC8 4C AE 92                  	JMP RenderSprite_VegetableLarge
09DCB                           
09DCB                           RenderSprite_NotVegetableLarge:
09DCB C0 26                     	CPY #Enemy_Autobomb
09DCD D0 03                     	BNE RenderSprite_NotAutobomb
09DCF                           
09DCF 4C B1 AF                  	JMP RenderSprite_Autobomb
09DD2                           
09DD2                           RenderSprite_NotAutobomb:
09DD2 C0 2A                     	CPY #Enemy_Fryguy
09DD4 D0 03                     	BNE RenderSprite_NotFryguy
09DD6                           
09DD6 4C 65 AD                  	JMP RenderSprite_Fryguy
09DD9                           
09DD9                           RenderSprite_NotFryguy:
09DD9 C0 43                     	CPY #Enemy_HawkmouthLeft
09DDB D0 03                     	BNE RenderSprite_NotHawkmouthLeft
09DDD                           
09DDD 4C 47 8F                  	JMP RenderSprite_HawkmouthLeft
09DE0                           
09DE0                           RenderSprite_NotHawkmouthLeft:
09DE0 C0 2C                     	CPY #Enemy_Wart
09DE2 D0 03                     	BNE RenderSprite_NotWart
09DE4                           
09DE4 4C 2E B4                  	JMP RenderSprite_Wart
09DE7                           
09DE7                           RenderSprite_NotWart:
09DE7 C0 28                     	CPY #Enemy_WhaleSpout
09DE9 D0 03                     	BNE RenderSprite_NotWhaleSpout
09DEB                           
09DEB 4C 51 B0                  	JMP RenderSprite_WhaleSpout
09DEE                           
09DEE                           RenderSprite_NotWhaleSpout:
09DEE C0 1A                     	CPY #Enemy_Pokey
09DF0 D0 03                     	BNE RenderSprite_NotPokey
09DF2                           
09DF2 4C F4 AB                  	JMP RenderSprite_Pokey
09DF5                           
09DF5                           RenderSprite_NotPokey:
09DF5                           IFDEF PLAYER_STUFF_SPIKE
09DF5                           	CPY #Enemy_Spike
09DF5                               BNE + 
09DF5                               JMP RenderSprite_Spike
09DF5                           +
09DF5                           ENDIF
09DF5                           
09DF5 C0 00                     	CPY #Enemy_Heart
09DF7 D0 03                     	BNE RenderSprite_NotHeart
09DF9                           
09DF9                           	; This jump appears to never be taken;
09DF9                           	; I don't think this code even runs with an enemy ID of 0 (heart)
09DF9 4C 69 90                  	JMP RenderSprite_Heart
09DFC                           
09DFC                           RenderSprite_NotHeart:
09DFC C0 08                     	CPY #Enemy_Ostro
09DFE D0 03                     	BNE RenderSprite_NotOstro
09E00                           
09E00 4C 94 A7                  	JMP RenderSprite_Ostro
09E03                           
09E03                           RenderSprite_NotOstro:
09E03 C0 1F                     	CPY #Enemy_Tryclyde
09E05 D0 03                     	BNE RenderSprite_NotTryclyde
09E07                           
09E07 4C C6 A8                  	JMP RenderSprite_Tryclyde
09E0A                           
09E0A                           RenderSprite_NotTryclyde:
09E0A C0 1C                     	CPY #Enemy_Birdo
09E0C D0 03                     	BNE RenderSprite_NotBirdo
09E0E                           
09E0E 4C 4C 9D                  	JMP RenderSprite_Birdo
09E11                           
09E11                           RenderSprite_NotBirdo:
09E11 C0 0A                     	CPY #Enemy_AlbatossCarryingBobOmb
09E13 90 07                     	BCC RenderSprite_NotAlbatoss
09E15                           
09E15 C0 0D                     	CPY #Enemy_NinjiRunning
09E17 B0 03                     	BCS RenderSprite_NotAlbatoss
09E19                           
09E19 4C 67 9D                  	JMP RenderSprite_Albatoss
09E1C                           
09E1C                           RenderSprite_NotAlbatoss:
09E1C B4 90                     	LDY ObjectType, X
09E1E C0 38                     	CPY #Enemy_Rocket
09E20 D0 03                     	BNE RenderSprite_NotRocket
09E22                           
09E22 4C 2B AD                  	JMP RenderSprite_Rocket
09E25                           
09E25                           RenderSprite_NotRocket:
09E25 B9 D9 9C                  	LDA EnemyAnimationTable, Y
09E28                           
09E28                           
09E28                           ;
09E28                           ; Draws an object to the screen
09E28                           ;
09E28                           ; Input
09E28                           ;   A = tile index
09E28                           ;   X = enemy index
09E28                           ;
09E28                           RenderSprite_DrawObject:
09E28 85 0F                     	STA byte_RAM_F
09E2A A5 EF                     	LDA byte_RAM_EF
09E2C D0 87                     	BNE RenderSprite_Invisible
09E2E                           
09E2E                           	; tilemap switcher
09E2E BD 6E 04                  	LDA EnemyArray_46E, X
09E31 29 10                     	AND #%00010000
09E33 85 0B                     	STA byte_RAM_B
09E35 B4 6F                     	LDY EnemyMovementDirection, X
09E37 B5 65                     	LDA ObjectAttributes, X
09E39 29 18                     	AND #ObjAttrib_FrontFacing | ObjAttrib_Mirrored
09E3B F0 0A                     	BEQ loc_BANK2_9BD2
09E3D                           
09E3D A0 02                     	LDY #$02
09E3F AD 28 06                  	LDA InSubspaceOrJar
09E42 C9 02                     	CMP #$02
09E44 D0 01                     	BNE loc_BANK2_9BD2
09E46                           
09E46 88                        	DEY
09E47                           
09E47                           loc_BANK2_9BD2:
09E47 84 02                     	STY byte_RAM_2
09E49 B5 65                     	LDA ObjectAttributes, X
09E4B 29 44                     	AND #ObjAttrib_16x32 | ObjAttrib_Horizontal
09E4D 85 05                     	STA byte_RAM_5
09E4F AD 2C 04                  	LDA SpriteTempScreenY
09E52 85 00                     	STA byte_RAM_0
09E54 A9 00                     	LDA #$00
09E56 85 0D                     	STA byte_RAM_D
09E58 BD 4A 04                  	LDA ObjectShakeTimer, X
09E5B 29 02                     	AND #$02
09E5D 4A                        	LSR A
09E5E A4 EE                     	LDY byte_RAM_EE
09E60 F0 02                     	BEQ loc_BANK2_9BEF
09E62                           
09E62 A9 00                     	LDA #$00
09E64                           
09E64                           loc_BANK2_9BEF:
09E64 6D 29 04                  	ADC SpriteTempScreenX
09E67 85 01                     	STA byte_RAM_1
09E69 B5 65                     	LDA ObjectAttributes, X
09E6B 29 A3                     	AND #ObjAttrib_UpsideDown | ObjAttrib_BehindBackground | ObjAttrib_Palette
09E6D BC 5C 04                  	LDY EnemyArray_45C, X
09E70 F0 0A                     	BEQ loc_BANK2_9C07
09E72                           
09E72 29 A0                     	AND #ObjAttrib_UpsideDown | ObjAttrib_BehindBackground
09E74 85 08                     	STA byte_RAM_8
09E76 98                        	TYA
09E77 4A                        	LSR A
09E78 29 03                     	AND #$03
09E7A 05 08                     	ORA byte_RAM_8
09E7C                           
09E7C                           loc_BANK2_9C07:
09E7C 85 03                     	STA byte_RAM_3
09E7E BD 6E 04                  	LDA EnemyArray_46E, X
09E81 85 0C                     	STA byte_RAM_C
09E83 0A                        	ASL A
09E84 B5 9F                     	LDA ObjectAnimationTimer, X
09E86 A6 0F                     	LDX byte_RAM_F
09E88 29 08                     	AND #$08
09E8A F0 1A                     	BEQ loc_BANK2_9C31
09E8C                           
09E8C 90 06                     	BCC loc_BANK2_9C1F
09E8E                           
09E8E A9 01                     	LDA #$01
09E90 85 02                     	STA byte_RAM_2
09E92 D0 12                     	BNE loc_BANK2_9C31
09E94                           
09E94                           loc_BANK2_9C1F:
09E94 E8                        	INX
09E95 E8                        	INX
09E96 A5 05                     	LDA byte_RAM_5
09E98 29 40                     	AND #$40
09E9A F0 0A                     	BEQ loc_BANK2_9C31
09E9C                           
09E9C E8                        	INX
09E9D E8                        	INX
09E9E A5 0C                     	LDA byte_RAM_C
09EA0 29 20                     	AND #$20
09EA2 F0 02                     	BEQ loc_BANK2_9C31
09EA4                           
09EA4 E8                        	INX
09EA5 E8                        	INX
09EA6                           
09EA6                           loc_BANK2_9C31:
09EA6 A4 F4                     	LDY byte_RAM_F4
09EA8 A5 05                     	LDA byte_RAM_5
09EAA 29 40                     	AND #$40
09EAC F0 41                     	BEQ loc_BANK2_9C7A
09EAE                           
09EAE A5 05                     	LDA byte_RAM_5
09EB0 29 04                     	AND #$04
09EB2 F0 14                     	BEQ loc_BANK2_9C53
09EB4                           
09EB4 A5 EE                     	LDA byte_RAM_EE
09EB6 85 08                     	STA byte_RAM_8
09EB8 A5 02                     	LDA byte_RAM_2
09EBA C9 01                     	CMP #$01
09EBC D0 0A                     	BNE loc_BANK2_9C53
09EBE                           
09EBE A5 01                     	LDA byte_RAM_1
09EC0 69 0F                     	ADC #$0F
09EC2 85 01                     	STA byte_RAM_1
09EC4 06 EE                     	ASL byte_RAM_EE
09EC6 06 EE                     	ASL byte_RAM_EE
09EC8                           
09EC8                           loc_BANK2_9C53:
09EC8 20 61 9F                  	JSR SetSpriteTiles
09ECB                           
09ECB A5 05                     	LDA byte_RAM_5
09ECD 29 04                     	AND #$04
09ECF F0 1E                     	BEQ loc_BANK2_9C7A
09ED1                           
09ED1 AD 2C 04                  	LDA SpriteTempScreenY
09ED4 85 00                     	STA byte_RAM_0
09ED6 AD 29 04                  	LDA SpriteTempScreenX
09ED9 85 01                     	STA byte_RAM_1
09EDB A5 08                     	LDA byte_RAM_8
09EDD 85 EE                     	STA byte_RAM_EE
09EDF A5 02                     	LDA byte_RAM_2
09EE1 C9 01                     	CMP #$01
09EE3 F0 0A                     	BEQ loc_BANK2_9C7A
09EE5                           
09EE5 A5 01                     	LDA byte_RAM_1
09EE7 69 0F                     	ADC #$0F
09EE9 85 01                     	STA byte_RAM_1
09EEB 06 EE                     	ASL byte_RAM_EE
09EED 06 EE                     	ASL byte_RAM_EE
09EEF                           
09EEF                           loc_BANK2_9C7A:
09EEF 20 61 9F                  	JSR SetSpriteTiles
09EF2                           
09EF2 A4 F4                     	LDY byte_RAM_F4
09EF4 A5 05                     	LDA byte_RAM_5
09EF6 C9 40                     	CMP #$40
09EF8 D0 54                     	BNE loc_BANK2_9CD9
09EFA                           
09EFA A5 03                     	LDA byte_RAM_3
09EFC 10 50                     	BPL loc_BANK2_9CD9
09EFE                           
09EFE A5 0C                     	LDA byte_RAM_C
09F00 29 20                     	AND #$20
09F02 F0 2E                     	BEQ loc_BANK2_9CBD
09F04                           
09F04 A6 0D                     	LDX byte_RAM_D
09F06 BD 00 02                  	LDA SpriteDMAArea + $00, X
09F09 48                        	PHA
09F0A B9 00 02                  	LDA SpriteDMAArea + $00, Y
09F0D 9D 00 02                  	STA SpriteDMAArea + $00, X
09F10 68                        	PLA
09F11                           
09F11                           loc_BANK2_9C9C:
09F11 99 00 02                  	STA SpriteDMAArea + $00, Y
09F14 BD 04 02                  	LDA SpriteDMAArea + $04, X
09F17 48                        	PHA
09F18 B9 04 02                  	LDA SpriteDMAArea + $04, Y
09F1B 9D 04 02                  	STA SpriteDMAArea + $04, X
09F1E 68                        	PLA
09F1F 99 04 02                  	STA SpriteDMAArea + $04, Y
09F22 BD 08 02                  	LDA SpriteDMAArea + $08, X
09F25 48                        	PHA
09F26 B9 08 02                  	LDA SpriteDMAArea + $08, Y
09F29 9D 08 02                  	STA SpriteDMAArea + $08, X
09F2C 68                        	PLA
09F2D 99 08 02                  	STA SpriteDMAArea + $08, Y
09F30 B0 1C                     	BCS loc_BANK2_9CD9
09F32                           
09F32                           loc_BANK2_9CBD:
09F32 B9 00 02                  	LDA SpriteDMAArea, Y
09F35 48                        	PHA
09F36 B9 08 02                  	LDA SpriteDMAArea + $08, Y
09F39 99 00 02                  	STA SpriteDMAArea + $00, Y
09F3C 68                        	PLA
09F3D 99 08 02                  	STA SpriteDMAArea + $08, Y
09F40 B9 04 02                  	LDA SpriteDMAArea + $04, Y
09F43 48                        	PHA
09F44 B9 0C 02                  	LDA SpriteDMAArea + $0C, Y
09F47 99 04 02                  	STA SpriteDMAArea + $04, Y
09F4A 68                        	PLA
09F4B 99 0C 02                  	STA SpriteDMAArea + $0C, Y
09F4E                           
09F4E                           loc_BANK2_9CD9:
09F4E A6 12                     	LDX byte_RAM_12
09F50 B5 65                     	LDA ObjectAttributes, X
09F52 29 10                     	AND #ObjAttrib_Mirrored
09F54 F0 0A                     	BEQ locret_BANK2_9CF1
09F56                           
09F56 A5 03                     	LDA byte_RAM_3
09F58 99 02 02                  	STA SpriteDMAArea + $02, Y
09F5B                           IFNDEF PLAYER_STUFF
09F5B                           	STA SpriteDMAArea + $0A, Y
09F5B                           ENDIF
09F5B 09 40                     	ORA #$40
09F5D 99 06 02                  	STA SpriteDMAArea + $06, Y
09F60                           IFNDEF PLAYER_STUFF
09F60                           	STA SpriteDMAArea + $0E, Y
09F60                           ENDIF
09F60                           
09F60                           locret_BANK2_9CF1:
09F60 60                        	RTS
09F61                           
09F61                           
09F61                           ;
09F61                           ; Sets tiles for an object
09F61                           ;
09F61                           ; Input
09F61                           ;   X = tilemap offset
09F61                           ;   Y = sprite slot offset
09F61                           ;   byte_RAM_0 = screen y-offset
09F61                           ;   byte_RAM_1 = screen x-offset
09F61                           ;   byte_RAM_2 = sprite direction: $00 for left, $02 for right
09F61                           ;   byte_RAM_B = use EnemyTilemap2
09F61                           ;   byte_RAM_C = use 24x16 mode when set to $20
09F61                           ;   byte_RAM_EE = used for horizontal clipping/wrapping
09F61                           ; Output
09F61                           ;   X = next tilemap offset
09F61                           ;   Y = next sprite slot offset
09F61                           ;
09F61                           SetSpriteTiles:
09F61 A5 0C                     	LDA byte_RAM_C
09F63 29 20                     	AND #$20
09F65                           IFNDEF PLAYER_STUFF
09F65                           	BNE SetSpriteTiles_24x16
09F65                           ENDIF
09F65                           IFDEF PLAYER_STUFF
09F65 F0 03                         BEQ +
09F67 4C 12 A0                  	JMP SetSpriteTiles_24x16
09F6A                           +
09F6A                           ENDIF
09F6A                           
09F6A A5 0B                     	LDA byte_RAM_B
09F6C D0 41                     	BNE SetSpriteTiles_Tilemap2
09F6E                           
09F6E                           IFDEF PLAYER_STUFF ;; only for mushrooms, but should be extended
09F6E 8A                            TXA
09F6F 48                            PHA
09F70 A6 12                         LDX byte_RAM_12
09F72 B5 90                         LDA ObjectType,X
09F74 C9 3F                         CMP #Enemy_Mushroom
09F76 F0 05                         BEQ +
09F78                           IFDEF PLAYER_STUFF_UNUSED
09F78                               CMP #Enemy_Fireball
09F78                               BEQ +
09F78                               CMP #Enemy_Bullet
09F78                               BEQ +
09F78                           ENDIF
09F78 68                            PLA
09F79 AA                            TAX
09F7A 4C A1 9F                      JMP ++
09F7D A5 12                     +   LDA byte_RAM_12
09F7F 0A                            ASL
09F80 0A                            ASL
09F81 AA                            TAX
09F82                           SetSpriteTiles_Tilemap3:
09F82 BD 00 77                  	LDA SpriteTableCustom1, X
09F85 99 01 02                  	STA SpriteDMAArea + 1, Y
09F88 BD 01 77                  	LDA SpriteTableCustom1 + 1, X
09F8B 99 05 02                  	STA SpriteDMAArea + 5, Y
09F8E D0 0C                     	BNE +++
09F90                           
09F90                           SetSpriteTiles_Tilemap4:
09F90 BD 80 77                  	LDA SpriteTableCustom2, X
09F93 99 01 02                  	STA SpriteDMAArea + 1, Y
09F96 BD 81 77                  	LDA SpriteTableCustom2 + 1, X
09F99 99 05 02                  	STA SpriteDMAArea + 5, Y
09F9C 68                        +++ PLA
09F9D AA                            TAX
09F9E 4C BB 9F                      JMP SetSpriteTiles_CheckDirection
09FA1                           ++
09FA1                           ENDIF
09FA1                           
09FA1                           SetSpriteTiles_Tilemap1:
09FA1 BD 1F 9C                  	LDA EnemyTilemap1, X
09FA4 99 01 02                  	STA SpriteDMAArea + 1, Y
09FA7 BD 20 9C                  	LDA EnemyTilemap1 + 1, X
09FAA 99 05 02                  	STA SpriteDMAArea + 5, Y
09FAD D0 0C                     	BNE SetSpriteTiles_CheckDirection
09FAF                           
09FAF                           SetSpriteTiles_Tilemap2:
09FAF BD 6A A1                  	LDA EnemyTilemap2, X
09FB2 99 01 02                  	STA SpriteDMAArea + 1, Y
09FB5 BD 6B A1                  	LDA EnemyTilemap2 + 1, X
09FB8 99 05 02                  	STA SpriteDMAArea + 5, Y
09FBB                           
09FBB                           SetSpriteTiles_CheckDirection:
09FBB A5 02                     	LDA byte_RAM_2
09FBD 4A                        	LSR A
09FBE A9 00                     	LDA #$00
09FC0 90 10                     	BCC SetSpriteTiles_Left
09FC2                           
09FC2                           SetSpriteTiles_Right:
09FC2 B9 01 02                  	LDA SpriteDMAArea + 1, Y
09FC5 48                        	PHA
09FC6 B9 05 02                  	LDA SpriteDMAArea + 5, Y
09FC9 99 01 02                  	STA SpriteDMAArea + 1, Y
09FCC 68                        	PLA
09FCD 99 05 02                  	STA SpriteDMAArea + 5, Y
09FD0 A9 40                     	LDA #$40
09FD2                           
09FD2                           SetSpriteTiles_Left:
09FD2 05 03                     	ORA byte_RAM_3
09FD4 99 02 02                  	STA SpriteDMAArea + 2, Y
09FD7 99 06 02                  	STA SpriteDMAArea + 6, Y
09FDA A9 F8                     	LDA #$F8
09FDC 99 00 02                  	STA SpriteDMAArea, Y
09FDF 99 04 02                  	STA SpriteDMAArea + 4, Y
09FE2                           
09FE2 A5 EE                     	LDA byte_RAM_EE
09FE4 29 08                     	AND #$08
09FE6 D0 05                     	BNE loc_BANK2_9D48
09FE8                           
09FE8 A5 00                     	LDA byte_RAM_0
09FEA 99 00 02                  	STA SpriteDMAArea, Y
09FED                           
09FED                           loc_BANK2_9D48:
09FED A5 EE                     	LDA byte_RAM_EE
09FEF 29 04                     	AND #$04
09FF1 D0 05                     	BNE loc_BANK2_9D53
09FF3                           
09FF3 A5 00                     	LDA byte_RAM_0
09FF5 99 04 02                  	STA SpriteDMAArea + 4, Y
09FF8                           
09FF8                           loc_BANK2_9D53:
09FF8 A5 00                     	LDA byte_RAM_0
09FFA 18                        	CLC
09FFB 69 10                     	ADC #$10
09FFD 85 00                     	STA byte_RAM_0
09FFF A5 01                     	LDA byte_RAM_1
0A001 99 03 02                  	STA SpriteDMAArea + 3, Y
0A004 18                        	CLC
0A005 69 08                     	ADC #$08
0A007 99 07 02                  	STA SpriteDMAArea + 7, Y
0A00A 98                        	TYA
0A00B 18                        	CLC
0A00C 69 08                     	ADC #$08
0A00E A8                        	TAY
0A00F E8                        	INX
0A010 E8                        	INX
0A011 60                        	RTS
0A012                           
0A012                           IFNDEF PLAYER_STUFF_SPRITES
0A012                           SetSpriteTiles_24x16:
0A012 BD 6A A1                  	LDA EnemyTilemap2, X
0A015 99 01 02                  	STA SpriteDMAArea + 1, Y
0A018 BD 6B A1                  	LDA EnemyTilemap2 + 1, X
0A01B 99 05 02                  	STA SpriteDMAArea + 5, Y
0A01E BD 6C A1                  	LDA EnemyTilemap2 + 2, X
0A021 99 09 02                  	STA SpriteDMAArea + 9, Y
0A024                           ENDIF
0A024                           
0A024                           IFDEF PLAYER_STUFF_SPRITES
0A024                           SetSpriteTiles_24x16:
0A024                           	LDA SpriteTableCustom2, X
0A024                           	STA SpriteDMAArea + 1, Y
0A024                           	LDA SpriteTableCustom2 + 1, X
0A024                           	STA SpriteDMAArea + 5, Y
0A024                           	LDA SpriteTableCustom2 + 2, X
0A024                           	STA SpriteDMAArea + 9, Y
0A024                           ENDIF
0A024                           
0A024 A5 02                     	LDA byte_RAM_2
0A026 4A                        	LSR A
0A027 A9 00                     	LDA #$00
0A029 90 10                     	BCC SetSpriteTiles_24x16_Left
0A02B                           
0A02B                           SetSpriteTiles_24x16_Right:
0A02B B9 01 02                  	LDA SpriteDMAArea + 1, Y
0A02E 48                        	PHA
0A02F B9 09 02                  	LDA SpriteDMAArea + 9, Y
0A032 99 01 02                  	STA SpriteDMAArea + 1, Y
0A035 68                        	PLA
0A036 99 09 02                  	STA SpriteDMAArea + 9, Y
0A039 A9 40                     	LDA #$40
0A03B                           
0A03B                           SetSpriteTiles_24x16_Left:
0A03B 05 03                     	ORA byte_RAM_3
0A03D 99 02 02                  	STA SpriteDMAArea + 2, Y
0A040 99 06 02                  	STA SpriteDMAArea + 6, Y
0A043 99 0A 02                  	STA SpriteDMAArea + $A, Y
0A046 A9 F8                     	LDA #$F8
0A048 99 00 02                  	STA SpriteDMAArea, Y
0A04B 99 04 02                  	STA SpriteDMAArea + 4, Y
0A04E 99 08 02                  	STA SpriteDMAArea + 8, Y
0A051                           
0A051 A5 EE                     	LDA byte_RAM_EE
0A053 29 08                     	AND #$08
0A055 D0 05                     	BNE loc_BANK2_9DB7
0A057                           
0A057 A5 00                     	LDA byte_RAM_0
0A059 99 00 02                  	STA SpriteDMAArea, Y
0A05C                           
0A05C                           loc_BANK2_9DB7:
0A05C A5 EE                     	LDA byte_RAM_EE
0A05E 29 04                     	AND #$04
0A060 D0 05                     	BNE loc_BANK2_9DC2
0A062                           
0A062 A5 00                     	LDA byte_RAM_0
0A064 99 04 02                  	STA SpriteDMAArea + 4, Y
0A067                           
0A067                           loc_BANK2_9DC2:
0A067 A5 EE                     	LDA byte_RAM_EE
0A069 29 02                     	AND #$02
0A06B D0 05                     	BNE loc_BANK2_9DCD
0A06D                           
0A06D A5 00                     	LDA byte_RAM_0
0A06F 99 08 02                  	STA SpriteDMAArea + 8, Y
0A072                           
0A072                           loc_BANK2_9DCD:
0A072 A5 00                     	LDA byte_RAM_0
0A074 18                        	CLC
0A075 69 10                     	ADC #$10
0A077 85 00                     	STA byte_RAM_0
0A079 A5 01                     	LDA byte_RAM_1
0A07B 99 03 02                  	STA SpriteDMAArea + 3, Y
0A07E 69 08                     	ADC #$08
0A080 99 07 02                  	STA SpriteDMAArea + 7, Y
0A083 69 08                     	ADC #$08
0A085 99 0B 02                  	STA SpriteDMAArea + $B, Y
0A088 8A                        	TXA
0A089 48                        	PHA
0A08A 20 2F FC                  	JSR loc_BANKF_FAFE
0A08D                           
0A08D 68                        	PLA
0A08E AA                        	TAX
0A08F A5 0D                     	LDA byte_RAM_D
0A091 D0 02                     	BNE loc_BANK2_9DF0
0A093                           
0A093 84 0D                     	STY byte_RAM_D
0A095                           
0A095                           loc_BANK2_9DF0:
0A095 E8                        	INX
0A096 E8                        	INX
0A097 E8                        	INX
0A098                           
0A098 60                        	RTS
0A099                           
0A099                           
0A099                           UNUSED_PorcupoOffset:
0A099 04                        	.db $04
0A09A 00                        	.db $00
0A09B                           PorcupoOffsetXRight:
0A09B FF                        	.db $FF
0A09C FF                        	.db $FF
0A09D 00                        	.db $00
0A09E 00                        	.db $00
0A09F                           PorcupoOffsetXLeft:
0A09F 01                        	.db $01
0A0A0 01                        	.db $01
0A0A1 00                        	.db $00
0A0A2 00                        	.db $00
0A0A3                           PorcupoOffsetYRight:
0A0A3 01                        	.db $01
0A0A4 00                        	.db $00
0A0A5 00                        	.db $00
0A0A6 01                        	.db $01
0A0A7                           PorcupoOffsetYLeft:
0A0A7 01                        	.db $01
0A0A8 00                        	.db $00
0A0A9 00                        	.db $00
0A0AA 01                        	.db $01
0A0AB                           
0A0AB                           
0A0AB                           RenderSprite_Porcupo:
0A0AB 20 1C 9E                  	JSR RenderSprite_NotAlbatoss
0A0AE                           
0A0AE A5 EE                     	LDA byte_RAM_EE
0A0B0 29 0C                     	AND #$0C
0A0B2 D0 2B                     	BNE locret_BANK2_9E3A
0A0B4                           
0A0B4 B5 9F                     	LDA ObjectAnimationTimer, X
0A0B6 29 0C                     	AND #$0C
0A0B8 4A                        	LSR A
0A0B9 4A                        	LSR A
0A0BA 85 00                     	STA byte_RAM_0
0A0BC B5 6F                     	LDA EnemyMovementDirection, X
0A0BE AA                        	TAX
0A0BF BD 98 A0                  	LDA PorcupoOffsetXRight - 3, X
0A0C2 65 F4                     	ADC byte_RAM_F4
0A0C4 A8                        	TAY
0A0C5 8A                        	TXA
0A0C6 0A                        	ASL A
0A0C7 0A                        	ASL A
0A0C8 65 00                     	ADC byte_RAM_0
0A0CA AA                        	TAX
0A0CB B9 00 02                  	LDA SpriteDMAArea, Y
0A0CE 7D 9F A0                  	ADC PorcupoOffsetYRight - 4, X
0A0D1 99 00 02                  	STA SpriteDMAArea, Y
0A0D4 B9 03 02                  	LDA SpriteDMAArea + 3, Y
0A0D7 7D 97 A0                  	ADC PorcupoOffsetXRight - 4, X
0A0DA 99 03 02                  	STA SpriteDMAArea + 3, Y
0A0DD A6 12                     	LDX byte_RAM_12
0A0DF                           
0A0DF                           locret_BANK2_9E3A:
0A0DF 60                        	RTS
0A0E0                           
0A0E0                           
0A0E0                           ;
0A0E0                           ; Compares our position to the player's and returns
0A0E0                           ;
0A0E0                           ; Ouput
0A0E0                           ;   Y = 1 when player is to the left, 0 when player is to the right
0A0E0                           ;
0A0E0                           EnemyFindWhichSidePlayerIsOn: ;; make this based on ObjectXLo
0A0E0 A5 28                     	LDA PlayerXLo
0A0E2 F5 29                     	SBC ObjectXLo, X
0A0E4 85 0F                     	STA byte_RAM_F
0A0E6 A5 14                     	LDA PlayerXHi
0A0E8 A0 00                     	LDY #$00
0A0EA F5 15                     	SBC ObjectXHi, X
0A0EC B0 01                     	BCS EnemyFindWhichSidePlayerIsOn_Exit
0A0EE                           
0A0EE C8                        	INY
0A0EF                           
0A0EF                           EnemyFindWhichSidePlayerIsOn_Exit:
0A0EF 60                        	RTS
0A0F0                           
0A0F0                           
0A0F0                           ;
0A0F0                           ; Applies object physics for the y-axis
0A0F0                           ;
0A0F0                           ; Input
0A0F0                           ;   X = enemy index
0A0F0                           ;
0A0F0                           ApplyObjectPhysicsY:
0A0F0 8A                        	TXA
0A0F1 18                        	CLC
0A0F2 69 0A                     	ADC #$0A
0A0F4 AA                        	TAX
0A0F5                           
0A0F5                           ;
0A0F5                           ; Applies object physics for the x-axis
0A0F5                           ;
0A0F5                           ; Input
0A0F5                           ;   X = enemy index, physics direction
0A0F5                           ;       ($00-$09 for horizontal, $0A-$13 for vertical)
0A0F5                           ;
0A0F5                           ; Output
0A0F5                           ;   X = RAM_12
0A0F5                           ;
0A0F5                           ApplyObjectPhysicsX:
0A0F5                           	; Add acceleration to velocity
0A0F5 B5 3D                     	LDA ObjectXVelocity, X
0A0F7 18                        	CLC
0A0F8 7D CC 04                  	ADC ObjectXAcceleration, X
0A0FB                           
0A0FB 48                        	PHA
0A0FC                           	; Lower nybble of velocity is for subpixel position
0A0FC 0A                        	ASL A
0A0FD 0A                        	ASL A
0A0FE 0A                        	ASL A
0A0FF 0A                        	ASL A
0A100 85 01                     	STA byte_RAM_1
0A102                           
0A102                           	; Upper nybble of velocity is for lo position
0A102 68                        	PLA
0A103 4A                        	LSR A
0A104 4A                        	LSR A
0A105 4A                        	LSR A
0A106 4A                        	LSR A
0A107                           
0A107 C9 08                     	CMP #$08
0A109 90 02                     	BCC ApplyObjectPhysics_StoreVelocityLo
0A10B                           
0A10B                           	; Left/up: Carry negative bits through upper nybble
0A10B 09 F0                     	ORA #$F0
0A10D                           
0A10D                           ApplyObjectPhysics_StoreVelocityLo:
0A10D 85 00                     	STA byte_RAM_0
0A10F                           
0A10F A0 00                     	LDY #$00
0A111 0A                        	ASL A
0A112 90 01                     	BCC ApplyObjectPhysics_StoreDirection
0A114                           
0A114                           	; Left/up
0A114 88                        	DEY
0A115                           
0A115                           ApplyObjectPhysics_StoreDirection:
0A115 84 02                     	STY byte_RAM_2
0A117                           
0A117                           	; Add lower nybble of velocity for subpixel position
0A117 BD 08 04                  	LDA ObjectXSubpixel, X
0A11A 18                        	CLC
0A11B 65 01                     	ADC byte_RAM_1
0A11D 9D 08 04                  	STA ObjectXSubpixel, X
0A120                           
0A120                           	; Add upper nybble of velocity for lo position
0A120 B5 29                     	LDA ObjectXLo, X
0A122 65 00                     	ADC byte_RAM_0
0A124 95 29                     	STA ObjectXLo, X
0A126                           
0A126 26 01                     	ROL byte_RAM_1
0A128                           
0A128                           	; X < 10 is horizontal physics, X >= 10 is vertical physics
0A128 E0 0A                     	CPX #$0A
0A12A B0 1F                     	BCS ApplyObjectPhysics_PositionHi
0A12C                           
0A12C                           ApplyObjectPhysics_HorizontalSpecialCases:
0A12C A9 00                     	LDA #$00
0A12E 9D A4 04                  	STA unk_RAM_4A4, X
0A131 B5 90                     	LDA ObjectType, X
0A133 C9 1B                     	CMP #Enemy_Bullet
0A135 F0 14                     	BEQ ApplyObjectPhysics_PositionHi
0A137                           
0A137                           IFDEF PLAYER_STUFF
0A137 C9 1E                     	CMP #Enemy_Egg
0A139 F0 10                     	BEQ ApplyObjectPhysics_PositionHi
0A13B C9 20                     	CMP #Enemy_Fireball
0A13D F0 0C                     	BEQ ApplyObjectPhysics_PositionHi
0A13F                           ENDIF
0A13F                           
0A13F C9 0F                     	CMP #Enemy_BeezoDiving
0A141 F0 08                     	BEQ ApplyObjectPhysics_PositionHi
0A143                           
0A143 C9 10                     	CMP #Enemy_BeezoStraight
0A145 F0 04                     	BEQ ApplyObjectPhysics_PositionHi
0A147                           
0A147 A4 EC                     	LDY IsHorizontalLevel
0A149 F0 08                     	BEQ ApplyObjectPhysics_Exit
0A14B                           
0A14B                           ApplyObjectPhysics_PositionHi:
0A14B 46 01                     	LSR byte_RAM_1
0A14D B5 15                     	LDA ObjectXHi, X
0A14F 65 02                     	ADC byte_RAM_2
0A151 95 15                     	STA ObjectXHi, X
0A153                           
0A153                           ApplyObjectPhysics_Exit:
0A153 A6 12                     	LDX byte_RAM_12
0A155 60                        	RTS
0A156                           
0A156                           
0A156                           EnemyBehavior_TurnAround:
0A156                           	; flip x-velocity
0A156 B5 3D                     	LDA ObjectXVelocity, X
0A158 49 FF                     	EOR #$FF
0A15A 18                        	CLC
0A15B 69 01                     	ADC #$01
0A15D 95 3D                     	STA ObjectXVelocity, X
0A15F                           	; if the enemy is not moving, flip direction next
0A15F F0 06                     	BEQ EnemyBehavior_TurnAroundExit
0A161                           
0A161                           	; flip enemy movement direction
0A161 B5 6F                     	LDA EnemyMovementDirection, X
0A163 49 03                     	EOR #$03 ; $01 XOR $03 = $02, $02 XOR $03 = $01
0A165 95 6F                     	STA EnemyMovementDirection, X
0A167                           
0A167                           EnemyBehavior_TurnAroundExit:
0A167 4C F5 A0                  	JMP ApplyObjectPhysicsX
0A16A                           
0A16A                           
0A16A                           ; Unused space in the original ($9EBD - $A02F)
0A16A                           unusedSpace $A030, $FF
0A16A                           	IFDEF PRESERVE_UNUSED_SPACE
0A16A                           		.pad $A030, $FF
0A16A                           	ENDIF
0A16A                           
0A16A                           
0A16A                           EnemyTilemap2:
0A16A 2D 2F                     	.db $2D,$2F ; $00
0A16C 2D 2F                     	.db $2D,$2F ; $02
0A16E E0 E2                     	.db $E0,$E2 ; $04
0A170 E4 E6                     	.db $E4,$E6 ; $06
0A172 E0 E2                     	.db $E0,$E2 ; $08
0A174 E4 E6                     	.db $E4,$E6 ; $0A
0A176 E8 EA                     	.db $E8,$EA ; $0C
0A178 EC EE                     	.db $EC,$EE ; $0E
0A17A E8 EA                     	.db $E8,$EA ; $10
0A17C EC EE                     	.db $EC,$EE ; $12
0A17E 01 03                     	.db $01,$03 ; $14
0A180 09 05                     	.db $09,$05 ; $16
0A182 07 0B                     	.db $07,$0B ; $18
0A184 0D 0F                     	.db $0D,$0F ; $1A
0A186 15 11                     	.db $15,$11 ; $1C
0A188 13 17                     	.db $13,$17 ; $1E
0A18A 01 03                     	.db $01,$03 ; $20
0A18C 09 05                     	.db $09,$05 ; $22
0A18E 19 1B                     	.db $19,$1B ; $24
0A190 01 03                     	.db $01,$03 ; $26
0A192 09 05                     	.db $09,$05 ; $28
0A194 19 1B                     	.db $19,$1B ; $2A
0A196 1D 1F                     	.db $1D,$1F ; $2C
0A198 25 21                     	.db $25,$21 ; $2E
0A19A 23 27                     	.db $23,$27 ; $30
0A19C 1D 1F                     	.db $1D,$1F ; $32
0A19E 25 21                     	.db $25,$21 ; $34
0A1A0 23 27                     	.db $23,$27 ; $36
0A1A2                           IFNDEF PLAYER_STUFF
0A1A2                           	.db $9C,$9E ; $38 ;; bom
0A1A2                           	.db $9C,$9E ; $3A ;; bom
0A1A2                           ENDIF
0A1A2                           IFDEF PLAYER_STUFF
0A1A2 DB DD                     	.db $db,$dd ; $38
0A1A4 DB DD                     	.db $db,$dd ; $3A
0A1A6                           ENDIF
0A1A6 D0 D2                     	.db $D0,$D2 ; $3C
0A1A8 D4 D6                     	.db $D4,$D6 ; $3E
0A1AA F0 F2                     	.db $F0,$F2 ; $40
0A1AC F4 F6                     	.db $F4,$F6 ; $42
0A1AE F0 F2                     	.db $F0,$F2 ; $44
0A1B0 F8 FA                     	.db $F8,$FA ; $46
0A1B2 0F 11                     	.db $0F,$11 ; $48
0A1B4 13 15                     	.db $13,$15 ; $4A
0A1B6 1F 11                     	.db $1F,$11 ; $4C
0A1B8 13 15                     	.db $13,$15 ; $4E
0A1BA 17 19                     	.db $17,$19 ; $50
0A1BC 1B 17                     	.db $1B,$17 ; $52
0A1BE 19 1D                     	.db $19,$1D ; $54
0A1C0 09 0B                     	.db $09,$0B ; $56
0A1C2 01 03                     	.db $01,$03 ; $58
0A1C4 05 07                     	.db $05,$07 ; $5A
0A1C6 55 59                     	.db $55,$59 ; $5C
0A1C8 5B 5D                     	.db $5B,$5D ; $5E
0A1CA F0 F2                     	.db $F0,$F2 ; $60
0A1CC F4 F6                     	.db $F4,$F6 ; $62
0A1CE 45 59                     	.db $45,$59 ; $64
0A1D0 5B 5D                     	.db $5B,$5D ; $66
0A1D2 45 59                     	.db $45,$59 ; $68
0A1D4 5B 5D                     	.db $5B,$5D ; $6A
0A1D6 E8 EA                     	.db $E8,$EA ; $6C
0A1D8 EC EE                     	.db $EC,$EE ; $6E
0A1DA EC EE                     	.db $EC,$EE ; $70
0A1DC EC EE                     	.db $EC,$EE ; $72
0A1DE F0 F2                     	.db $F0,$F2 ; $74
0A1E0 F0 F2                     	.db $F0,$F2 ; $76
0A1E2 F4 F6                     	.db $F4,$F6 ; $78
0A1E4 F8 FA                     	.db $F8,$FA ; $7A
0A1E6 D0 D2                     	.db $D0,$D2 ; $7C
0A1E8 D4 D6                     	.db $D4,$D6 ; $7E
0A1EA 01 03                     	.db $01,$03 ; $80
0A1EC 05 07                     	.db $05,$07 ; $82
0A1EE 09 0B                     	.db $09,$0B ; $84
0A1F0 0D 0F                     	.db $0D,$0F ; $86
0A1F2 01 11                     	.db $01,$11 ; $88
0A1F4 05 15                     	.db $05,$15 ; $8A
0A1F6 13 0B                     	.db $13,$0B ; $8C
0A1F8 17 0F                     	.db $17,$0F ; $8E
0A1FA                           IFDEF PLAYER_STUFF
0A1FA 9C 9E                     	.db $9c,$9e ; $90
0A1FC                           ENDIF
0A1FC                           IFNDEF PLAYER_STUFF
0A1FC                           	.db $19,$1B ; $90
0A1FC                           ENDIF
0A1FC 2D 2F                     	.db $2D,$2F ; $92
0A1FE 3A 3A                     	.db $3A,$3A ; $94
0A200                           IFDEF PLAYER_STUFF
0A200 40 42                     	.db $40,$42 ; $40 ;rocket
0A202 44 46                     	.db $44,$46 ; $40 ;rocket
0A204                           ENDIF
0A204                           IFNDEF PLAYER_STUFF
0A204                           	.db $E0,$E2 ; $40
0A204                           	.db $E4,$E6 ; $06
0A204                           ENDIF
0A204 E8 EA                     	.db $E8,$EA ; $9A
0A206 EC EE                     	.db $EC,$EE ; $9C
0A208 01 03                     	.db $01,$03 ; $9E
0A20A 05 07                     	.db $05,$07 ; $A0
0A20C 4F 5D                     	.db $4F,$5D ; $A2
0A20E 05 07                     	.db $05,$07 ; $A4
0A210 09 0B                     	.db $09,$0B ; $A6
0A212 0D 0F                     	.db $0D,$0F ; $A8
0A214                           IFDEF PLAYER_STUFF
0A214 27 29                     	.db $27,$29 ; $AA
0A216 2B 2D                     	.db $2B,$2D ; $AC
0A218                           ENDIF
0A218                           IFNDEF PLAYER_STUFF
0A218                           	.db $27,$79 ; $AA
0A218                           	.db $7B,$2D ; $AC
0A218                           ENDIF
0A218 4F 2F                     	.db $4F,$2F ; $AE
0A21A 45 55                     	.db $45,$55 ; $B0
0A21C 11 13                     	.db $11,$13 ; $B2
0A21E 15 17                     	.db $15,$17 ; $B4
0A220 1F 21                     	.db $1F,$21 ; $B6
0A222 23 25                     	.db $23,$25 ; $B8
0A224 11 13                     	.db $11,$13 ; $BA
0A226 23 25                     	.db $23,$25 ; $BC
0A228 59 59                     	.db $59,$59 ; $BE
0A22A 5B 5B                     	.db $5B,$5B ; $C0
0A22C 01 03                     	.db $01,$03 ; $C2
0A22E 05 07                     	.db $05,$07 ; $C4
0A230 09 0B                     	.db $09,$0B ; $C6
0A232 0D 0F                     	.db $0D,$0F ; $C8
0A234 FB 11                     	.db $FB,$11 ; $CA
0A236 15 17                     	.db $15,$17 ; $CC
0A238 13 FB                     	.db $13,$FB ; $CE
0A23A 19 1B                     	.db $19,$1B ; $D0
0A23C 1D 1F                     	.db $1D,$1F ; $D2
0A23E 21 23                     	.db $21,$23 ; $D4
0A240 25 27                     	.db $25,$27 ; $D6
0A242 25 27                     	.db $25,$27 ; $D8
0A244                           IFDEF EXPAND_TABLES
0A244                           	unusedSpace EnemyTilemap2 + $100, $FB
0A244                           ENDIF
0A244                           
0A244                           
0A244                           EnemyInit_Clawgrip:
0A244 20 94 90                  	JSR EnemyInit_Birdo
0A247                           
0A247 A9 04                     	LDA #$04
0A249 9D 65 04                  	STA EnemyHP, X
0A24C                           IFDEF PLAYER_STUFF
0A24C 20 BE AD                      JSR Set_CustomBossHp
0A24F                           ENDIF
0A24F A9 00                     	LDA #$00
0A251 95 3D                     	STA ObjectXVelocity, X
0A253 B5 29                     	LDA ObjectXLo, X
0A255 18                        	CLC
0A256 69 04                     	ADC #$04
0A258 95 29                     	STA ObjectXLo, X
0A25A 4C B0 84                  	JMP SetEnemyAttributes
0A25D                           
0A25D                           ; ---------------------------------------------------------------------------
0A25D                           unk_BANK3_A120:
0A25D C8                        	.db $C8
0A25E D0                        	.db $D0
0A25F E0                        	.db $E0
0A260 F0                        	.db $F0
0A261 00                        	.db $00
0A262 10                        	.db $10
0A263 20                        	.db $20
0A264 C8                        	.db $C8
0A265                           unk_BANK3_A128:
0A265 DC                        	.db $DC
0A266 E2                        	.db $E2
0A267 E8                        	.db $E8
0A268 F0                        	.db $F0
0A269 F8                        	.db $F8
0A26A E8                        	.db $E8
0A26B DC                        	.db $DC
0A26C DC                        	.db $DC
0A26D                           ; ---------------------------------------------------------------------------
0A26D                           
0A26D                           EnemyBehavior_Clawgrip:
0A26D BD 5C 04                  	LDA EnemyArray_45C, X
0A270 1D 38 04                  	ORA EnemyArray_438, X
0A273 F0 03                     	BEQ loc_BANK3_A13B
0A275                           
0A275 4C 90 9D                  	JMP RenderSprite
0A278                           
0A278                           ; ---------------------------------------------------------------------------
0A278                           
0A278                           loc_BANK3_A13B:
0A278 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
0A27B                           
0A27B B5 33                     	LDA ObjectYLo, X
0A27D C9 70                     	CMP #$70
0A27F 90 03                     	BCC loc_BANK3_A147
0A281                           
0A281 20 AC 97                  	JSR ResetObjectYVelocity
0A284                           
0A284                           loc_BANK3_A147:
0A284 B5 86                     	LDA EnemyTimer, X
0A286 D0 2E                     	BNE loc_BANK3_A179
0A288                           
0A288 B5 79                     	LDA EnemyVariable, X
0A28A 29 3F                     	AND #$3F
0A28C D0 17                     	BNE loc_BANK3_A168
0A28E                           
0A28E AD AE 05                  	LDA PseudoRNGValues + 2
0A291 29 03                     	AND #$03
0A293 F0 10                     	BEQ loc_BANK3_A168
0A295                           
0A295 AC C0 04                  	LDY ScreenBoundaryLeftLo
0A298 88                        	DEY
0A299 C0 80                     	CPY #$80
0A29B 90 08                     	BCC loc_BANK3_A168
0A29D                           
0A29D A9 7F                     	LDA #$7F
0A29F 95 86                     	STA EnemyTimer, X
0A2A1 A0 00                     	LDY #$00
0A2A3 F0 0C                     	BEQ loc_BANK3_A174
0A2A5                           
0A2A5                           loc_BANK3_A168:
0A2A5 F6 79                     	INC EnemyVariable, X
0A2A7 A0 F0                     	LDY #$F0
0A2A9 B5 79                     	LDA EnemyVariable, X
0A2AB 29 20                     	AND #$20
0A2AD F0 02                     	BEQ loc_BANK3_A174
0A2AF                           
0A2AF A0 10                     	LDY #$10
0A2B1                           
0A2B1                           loc_BANK3_A174:
0A2B1 94 3D                     	STY ObjectXVelocity, X
0A2B3 4C 0A A3                  	JMP loc_BANK3_A1CD
0A2B6                           
0A2B6                           ; ---------------------------------------------------------------------------
0A2B6                           
0A2B6                           loc_BANK3_A179:
0A2B6 C9 50                     	CMP #$50
0A2B8 D0 00                     	BNE loc_BANK3_A17D
0A2BA                           
0A2BA                           loc_BANK3_A17D:
0A2BA C9 20                     	CMP #$20
0A2BC D0 4C                     	BNE loc_BANK3_A1CD
0A2BE                           
0A2BE AD AE 05                  	LDA PseudoRNGValues + 2
0A2C1 29 07                     	AND #$07
0A2C3 A8                        	TAY
0A2C4 B9 65 A2                  	LDA unk_BANK3_A128, Y
0A2C7 95 47                     	STA ObjectYVelocity, X
0A2C9 D6 33                     	DEC ObjectYLo, X
0A2CB 20 82 94                  	JSR CreateEnemy
0A2CE                           
0A2CE 30 3A                     	BMI loc_BANK3_A1CD
0A2D0                           
0A2D0 A4 00                     	LDY byte_RAM_0
0A2D2 B5 33                     	LDA ObjectYLo, X
0A2D4 38                        	SEC
0A2D5 E9 00                     	SBC #$00
0A2D7 99 33 00                  	STA ObjectYLo, Y
0A2DA B5 1F                     	LDA ObjectYHi, X
0A2DC E9 00                     	SBC #$00
0A2DE 99 1F 00                  	STA ObjectYHi, Y
0A2E1 B5 29                     	LDA ObjectXLo, X
0A2E3 18                        	CLC
0A2E4 69 08                     	ADC #$08
0A2E6 99 29 00                  	STA ObjectXLo, Y
0A2E9 B5 15                     	LDA ObjectXHi, X
0A2EB 69 00                     	ADC #$00
0A2ED 99 15 00                  	STA ObjectXHi, Y
0A2F0 A6 00                     	LDX byte_RAM_0
0A2F2 A9 22                     	LDA #Enemy_ClawgripRock
0A2F4 95 90                     	STA ObjectType, X
0A2F6 AD AE 05                  	LDA PseudoRNGValues + 2
0A2F9 29 07                     	AND #$07
0A2FB A8                        	TAY
0A2FC B9 5D A2                  	LDA unk_BANK3_A120, Y
0A2FF 95 47                     	STA ObjectYVelocity, X
0A301 A9 D0                     	LDA #$D0
0A303 95 3D                     	STA ObjectXVelocity, X
0A305 20 B0 84                  	JSR SetEnemyAttributes
0A308                           
0A308 A6 12                     	LDX byte_RAM_12
0A30A                           
0A30A                           loc_BANK3_A1CD:
0A30A 20 F5 A0                  	JSR ApplyObjectPhysicsX
0A30D                           
0A30D 20 04 86                  	JSR ApplyObjectMovement_Vertical
0A310                           
0A310                           loc_BANK3_A1D3:
0A310 4C 90 9D                  	JMP RenderSprite
0A313                           
0A313                           
0A313 08                        	.db $08
0A314 08                        	.db $08
0A315                           
0A315                           byte_BANK3_A1D8:
0A315 1C                        	.db $1C
0A316 F4                        	.db $F4
0A317 11                        	.db $11
0A318 0F                        	.db $0F
0A319                           
0A319                           byte_BANK3_A1DC:
0A319 04                        	.db $04
0A31A 06                        	.db $06
0A31B 08                        	.db $08
0A31C 08                        	.db $08
0A31D 08                        	.db $08
0A31E 08                        	.db $08
0A31F 06                        	.db $06
0A320 04                        	.db $04
0A321                           
0A321                           
0A321                           RenderSprite_Clawgrip:
0A321                           	LDA_abs byte_RAM_F4
0A321                           	IFDEF COMPATIBILITY
0A321 AD                        		.db $ad
0A322 F4 00                     		.dw byte_RAM_F4
0A324                           	ELSE
0A324                           		LDA byte_RAM_F4
0A324                           		NOP_compat
0A324                           	ENDIF
0A324                           
0A324 95 B1                     	STA EnemyArray_B1, X
0A326 B4 51                     	LDY EnemyState, X
0A328 88                        	DEY
0A329 98                        	TYA
0A32A 1D 5C 04                  	ORA EnemyArray_45C, X
0A32D F0 08                     	BEQ loc_BANK3_A1FA
0A32F                           
0A32F A0 D2                     	LDY #$D2
0A331 A9 00                     	LDA #$00
0A333 95 86                     	STA EnemyTimer, X
0A335 F0 22                     	BEQ loc_BANK3_A21C
0A337                           
0A337                           loc_BANK3_A1FA:
0A337 A0 C2                     	LDY #$C2
0A339 A5 10                     	LDA byte_RAM_10
0A33B 29 10                     	AND #$10
0A33D D0 02                     	BNE loc_BANK3_A204
0A33F                           
0A33F A0 C6                     	LDY #$C6
0A341                           
0A341                           loc_BANK3_A204:
0A341 B5 86                     	LDA EnemyTimer, X
0A343 F0 14                     	BEQ loc_BANK3_A21C
0A345                           
0A345 A0 CA                     	LDY #$CA
0A347 C9 60                     	CMP #$60
0A349 B0 0E                     	BCS loc_BANK3_A21C
0A34B                           
0A34B A0 C2                     	LDY #$C2
0A34D C9 40                     	CMP #$40
0A34F B0 08                     	BCS loc_BANK3_A21C
0A351                           
0A351 A0 C6                     	LDY #$C6
0A353 C9 20                     	CMP #$20
0A355 B0 02                     	BCS loc_BANK3_A21C
0A357                           
0A357 A0 C2                     	LDY #$C2
0A359                           
0A359                           loc_BANK3_A21C:
0A359 A9 02                     	LDA #$02
0A35B 95 6F                     	STA EnemyMovementDirection, X
0A35D 98                        	TYA
0A35E 20 28 9E                  	JSR RenderSprite_DrawObject
0A361                           
0A361 A0 C6                     	LDY #$C6
0A363 A5 10                     	LDA byte_RAM_10
0A365 29 10                     	AND #$10
0A367 D0 02                     	BNE loc_BANK3_A22E
0A369                           
0A369 A0 C2                     	LDY #$C2
0A36B                           
0A36B                           loc_BANK3_A22E:
0A36B B5 86                     	LDA EnemyTimer, X
0A36D F0 14                     	BEQ loc_BANK3_A246
0A36F                           
0A36F A0 CE                     	LDY #$CE
0A371 C9 60                     	CMP #$60
0A373 B0 0E                     	BCS loc_BANK3_A246
0A375                           
0A375 A0 C2                     	LDY #$C2
0A377 C9 40                     	CMP #$40
0A379 B0 08                     	BCS loc_BANK3_A246
0A37B                           
0A37B A0 C6                     	LDY #$C6
0A37D C9 20                     	CMP #$20
0A37F B0 02                     	BCS loc_BANK3_A246
0A381                           
0A381 A0 C2                     	LDY #$C2
0A383                           
0A383                           loc_BANK3_A246:
0A383 BD 5C 04                  	LDA EnemyArray_45C, X
0A386 F0 02                     	BEQ loc_BANK3_A24D
0A388                           
0A388 A0 D2                     	LDY #$D2
0A38A                           
0A38A                           loc_BANK3_A24D:
0A38A AD 29 04                  	LDA SpriteTempScreenX
0A38D 18                        	CLC
0A38E 69 10                     	ADC #$10
0A390 8D 29 04                  	STA SpriteTempScreenX
0A393 06 EE                     	ASL byte_RAM_EE
0A395 06 EE                     	ASL byte_RAM_EE
0A397 B5 86                     	LDA EnemyTimer, X
0A399 C9 60                     	CMP #$60
0A39B B0 02                     	BCS loc_BANK3_A262
0A39D                           
0A39D 56 6F                     	LSR EnemyMovementDirection, X
0A39F                           
0A39F                           loc_BANK3_A262:
0A39F 98                        	TYA
0A3A0 48                        	PHA
0A3A1 20 2F FC                  	JSR loc_BANKF_FAFE
0A3A4                           
0A3A4 84 F4                     	STY byte_RAM_F4
0A3A6 68                        	PLA
0A3A7 20 28 9E                  	JSR RenderSprite_DrawObject
0A3AA                           
0A3AA B5 86                     	LDA EnemyTimer, X
0A3AC F0 61                     	BEQ loc_BANK3_A2D2
0A3AE                           
0A3AE 4A                        	LSR A
0A3AF 4A                        	LSR A
0A3B0 4A                        	LSR A
0A3B1 4A                        	LSR A
0A3B2 4A                        	LSR A
0A3B3 F0 59                     	BEQ locret_BANK3_A2D1
0A3B5                           
0A3B5 A8                        	TAY
0A3B6 B5 29                     	LDA ObjectXLo, X
0A3B8 48                        	PHA
0A3B9 18                        	CLC
0A3BA 79 12 A3                  	ADC loc_BANK3_A1D3 + 2, Y
0A3BD 95 29                     	STA ObjectXLo, X
0A3BF 38                        	SEC
0A3C0 ED C0 04                  	SBC ScreenBoundaryLeftLo
0A3C3 8D 29 04                  	STA SpriteTempScreenX
0A3C6 B5 33                     	LDA ObjectYLo, X
0A3C8 18                        	CLC
0A3C9 79 15 A3                  	ADC byte_BANK3_A1D8, Y
0A3CC 8D 2C 04                  	STA SpriteTempScreenY
0A3CF B5 86                     	LDA EnemyTimer, X
0A3D1 C9 30                     	CMP #$30
0A3D3 90 12                     	BCC loc_BANK3_A2AA
0A3D5                           
0A3D5 C9 40                     	CMP #$40
0A3D7 B0 0E                     	BCS loc_BANK3_A2AA
0A3D9                           
0A3D9 4A                        	LSR A
0A3DA 29 07                     	AND #$07
0A3DC A8                        	TAY
0A3DD AD 2C 04                  	LDA SpriteTempScreenY
0A3E0 38                        	SEC
0A3E1 F9 19 A3                  	SBC byte_BANK3_A1DC, Y
0A3E4 8D 2C 04                  	STA SpriteTempScreenY
0A3E7                           
0A3E7                           loc_BANK3_A2AA:
0A3E7 20 24 89                  	JSR sub_BANK2_8894
0A3EA                           
0A3EA A0 00                     	LDY #$00
0A3EC                           	STY_abs byte_RAM_F4
0A3EC                           	IFDEF COMPATIBILITY
0A3EC 8C                        		.db $8c
0A3ED F4 00                     		.dw byte_RAM_F4
0A3EF                           	ELSE
0A3EF                           		STY byte_RAM_F4
0A3EF                           		NOP_compat
0A3EF                           	ENDIF
0A3EF                           
0A3EF B5 65                     	LDA ObjectAttributes, X
0A3F1 48                        	PHA
0A3F2 A9 02                     	LDA #$02
0A3F4 95 65                     	STA ObjectAttributes, X
0A3F6 BD 6E 04                  	LDA EnemyArray_46E, X
0A3F9 48                        	PHA
0A3FA A9 10                     	LDA #%00010000
0A3FC 9D 6E 04                  	STA EnemyArray_46E, X
0A3FF A9 D6                     	LDA #$D6
0A401 20 28 9E                  	JSR RenderSprite_DrawObject
0A404                           
0A404 68                        	PLA
0A405 9D 6E 04                  	STA EnemyArray_46E, X
0A408 68                        	PLA
0A409 95 65                     	STA ObjectAttributes, X
0A40B 68                        	PLA
0A40C 95 29                     	STA ObjectXLo, X
0A40E                           
0A40E                           locret_BANK3_A2D1:
0A40E 60                        	RTS
0A40F                           
0A40F                           ; ---------------------------------------------------------------------------
0A40F                           
0A40F                           loc_BANK3_A2D2:
0A40F A5 10                     	LDA byte_RAM_10
0A411 29 04                     	AND #$04
0A413 F0 09                     	BEQ loc_BANK3_A2E1
0A415                           
0A415                           	LDX_abs byte_RAM_F4
0A415                           	IFDEF COMPATIBILITY
0A415 AE                        		.db $ae
0A416 F4 00                     		.dw byte_RAM_F4
0A418                           	ELSE
0A418                           		LDX byte_RAM_F4
0A418                           		NOP_compat
0A418                           	ENDIF
0A418                           
0A418 DE 0C 02                  	DEC SpriteDMAArea + $C, X
0A41B A6 12                     	LDX byte_RAM_12
0A41D 60                        	RTS
0A41E                           
0A41E                           ; ---------------------------------------------------------------------------
0A41E                           
0A41E                           loc_BANK3_A2E1:
0A41E B5 B1                     	LDA EnemyArray_B1, X
0A420 AA                        	TAX
0A421 DE 08 02                  	DEC SpriteDMAArea + 8, X
0A424 A6 12                     	LDX byte_RAM_12
0A426 60                        	RTS
0A427                           
0A427                           ; ---------------------------------------------------------------------------
0A427                           
0A427                           EnemyBehavior_ClawgripRock:
0A427 A9 00                     	LDA #$00
0A429 9D 5C 04                  	STA EnemyArray_45C, X
0A42C 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
0A42F                           
0A42F 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0A432                           
0A432 20 F5 A0                  	JSR ApplyObjectPhysicsX
0A435                           
0A435 20 04 86                  	JSR ApplyObjectMovement_Vertical
0A438                           
0A438 20 36 B5                  	JSR ObjectTileCollision
0A43B                           
0A43B B5 5B                     	LDA EnemyCollision, X
0A43D 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
0A43F F0 06                     	BEQ loc_BANK3_A30A
0A441                           
0A441 20 56 A1                  	JSR EnemyBehavior_TurnAround
0A444                           
0A444 20 80 97                  	JSR HalfObjectVelocityX
0A447                           
0A447                           loc_BANK3_A30A:
0A447 B5 5B                     	LDA EnemyCollision, X
0A449 29 04                     	AND #CollisionFlags_Down
0A44B F0 10                     	BEQ loc_BANK3_A320
0A44D                           
0A44D B5 33                     	LDA ObjectYLo, X
0A44F 29 F0                     	AND #$F0
0A451 95 33                     	STA ObjectYLo, X
0A453 B5 47                     	LDA ObjectYVelocity, X
0A455 4A                        	LSR A
0A456 49 FF                     	EOR #$FF
0A458 18                        	CLC
0A459 69 01                     	ADC #$01
0A45B 95 47                     	STA ObjectYVelocity, X
0A45D                           
0A45D                           loc_BANK3_A320:
0A45D 4C 90 9D                  	JMP RenderSprite
0A460                           
0A460                           ; ---------------------------------------------------------------------------
0A460                           
0A460                           RenderSprite_ClawgripRock:
0A460                           	LDA_abs_X ObjectBeingCarriedTimer ;, X
0A460                           	IFDEF COMPATIBILITY
0A460 BD                        		.db $bd
0A461 A8 00                     		.dw ObjectBeingCarriedTimer
0A463                           	ELSE
0A463                           		LDA ObjectBeingCarriedTimer, X
0A463                           		NOP_compat
0A463                           	ENDIF
0A463                           
0A463 1D 38 04                  	ORA EnemyArray_438, X
0A466 D0 37                     	BNE loc_BANK3_A362
0A468                           
0A468 A5 10                     	LDA byte_RAM_10
0A46A 85 00                     	STA byte_RAM_0
0A46C B5 3D                     	LDA ObjectXVelocity, X
0A46E 10 05                     	BPL loc_BANK3_A338
0A470                           
0A470 49 FF                     	EOR #$FF
0A472 18                        	CLC
0A473 69 01                     	ADC #$01
0A475                           
0A475                           loc_BANK3_A338:
0A475 C9 20                     	CMP #$20
0A477 B0 08                     	BCS loc_BANK3_A344
0A479                           
0A479 46 00                     	LSR byte_RAM_0
0A47B C9 08                     	CMP #$08
0A47D B0 02                     	BCS loc_BANK3_A344
0A47F                           
0A47F 46 00                     	LSR byte_RAM_0
0A481                           
0A481                           loc_BANK3_A344:
0A481 A5 00                     	LDA byte_RAM_0
0A483 18                        	CLC
0A484 69 04                     	ADC #$04
0A486 29 08                     	AND #$08
0A488 4A                        	LSR A
0A489 4A                        	LSR A
0A48A 4A                        	LSR A
0A48B B4 3D                     	LDY ObjectXVelocity, X
0A48D 10 02                     	BPL loc_BANK3_A354
0A48F                           
0A48F 49 01                     	EOR #$01
0A491                           
0A491                           loc_BANK3_A354:
0A491 95 6F                     	STA EnemyMovementDirection, X
0A493 A5 00                     	LDA byte_RAM_0
0A495 29 08                     	AND #$08
0A497 0A                        	ASL A
0A498 0A                        	ASL A
0A499 0A                        	ASL A
0A49A 0A                        	ASL A
0A49B 09 02                     	ORA #$02
0A49D 95 65                     	STA ObjectAttributes, X
0A49F                           
0A49F                           loc_BANK3_A362:
0A49F 4C 1C 9E                  	JMP RenderSprite_NotAlbatoss
0A4A2                           
0A4A2                           
0A4A2                           FlyingCarpetSpeed:
0A4A2 00                        	.db $00
0A4A3 15                        	.db $15
0A4A4 EB                        	.db $EB
0A4A5 00                        	.db $00
0A4A6                           
0A4A6                           
0A4A6                           EnemyBehavior_FlyingCarpet:
0A4A6 20 36 B5                  	JSR ObjectTileCollision
0A4A9                           
0A4A9 A5 10                     	LDA byte_RAM_10
0A4AB 29 03                     	AND #$03
0A4AD D0 0A                     	BNE loc_BANK3_A37C
0A4AF                           
0A4AF D6 B1                     	DEC EnemyArray_B1, X
0A4B1 D0 06                     	BNE loc_BANK3_A37C
0A4B3                           
0A4B3 8D B2 04                  	STA PlayerRidingCarpet
0A4B6 4C 39 8A                  	JMP EnemyDestroy
0A4B9                           
0A4B9                           ; ---------------------------------------------------------------------------
0A4B9                           
0A4B9                           loc_BANK3_A37C:
0A4B9 AD B2 04                  	LDA PlayerRidingCarpet
0A4BC F0 0E                     	BEQ loc_BANK3_A38F
0A4BE                           
0A4BE A5 46                     	LDA PlayerYVelocity
0A4C0 10 0A                     	BPL loc_BANK3_A38F
0A4C2                           
0A4C2 A9 00                     	LDA #$00
0A4C4 95 47                     	STA ObjectYVelocity, X
0A4C6 8D B2 04                  	STA PlayerRidingCarpet
0A4C9 4C 8F A6                  	JMP RenderSprite_FlyingCarpet
0A4CC                           
0A4CC                           ; ---------------------------------------------------------------------------
0A4CC                           
0A4CC                           loc_BANK3_A38F:
0A4CC B5 5B                     	LDA EnemyCollision, X
0A4CE 29 20                     	AND #$20
0A4D0 8D B2 04                  	STA PlayerRidingCarpet
0A4D3 D0 03                     	BNE loc_BANK3_A39B
0A4D5                           
0A4D5 4C 67 A5                  	JMP loc_BANK3_A42A
0A4D8                           
0A4D8                           ; ---------------------------------------------------------------------------
0A4D8                           
0A4D8                           loc_BANK3_A39B:
0A4D8 B5 3D                     	LDA ObjectXVelocity, X
0A4DA F0 06                     	BEQ loc_BANK3_A3A5
0A4DC                           
0A4DC B5 6F                     	LDA EnemyMovementDirection, X
0A4DE 29 01                     	AND #$01
0A4E0 85 9D                     	STA PlayerDirection
0A4E2                           
0A4E2                           loc_BANK3_A3A5:
0A4E2 B5 33                     	LDA ObjectYLo, X
0A4E4 38                        	SEC
0A4E5 E9 1A                     	SBC #$1A
0A4E7 85 32                     	STA PlayerYLo
0A4E9 B5 1F                     	LDA ObjectYHi, X
0A4EB E9 00                     	SBC #$00
0A4ED 85 1E                     	STA PlayerYHi
0A4EF A5 28                     	LDA PlayerXLo
0A4F1 38                        	SEC
0A4F2 E9 08                     	SBC #$08
0A4F4 95 29                     	STA ObjectXLo, X
0A4F6 A5 14                     	LDA PlayerXHi
0A4F8 E9 00                     	SBC #$00
0A4FA 95 15                     	STA ObjectXHi, X
0A4FC A0 01                     	LDY #$01
0A4FE B5 3D                     	LDA ObjectXVelocity, X
0A500 30 02                     	BMI loc_BANK3_A3C7
0A502                           
0A502 A0 FF                     	LDY #$FF
0A504                           
0A504                           loc_BANK3_A3C7:
0A504 8C CC 71                  	STY byte_RAM_71CC
0A507 A5 F7                     	LDA Player1JoypadHeld
0A509 29 03                     	AND #ControllerInput_Right | ControllerInput_Left
0A50B A8                        	TAY
0A50C                           	AND_abs PlayerCollision
0A50C                           	IFDEF COMPATIBILITY
0A50C 2D                        		.db $2d
0A50D 5A 00                     		.dw PlayerCollision
0A50F                           	ELSE
0A50F                           		INC PlayerCollision
0A50F                           		NOP_compat
0A50F                           	ENDIF
0A50F                           
0A50F D0 12                     	BNE loc_BANK3_A3E6
0A511                           
0A511 B9 A2 A4                  	LDA FlyingCarpetSpeed, Y
0A514 D5 3D                     	CMP ObjectXVelocity, X
0A516 F0 08                     	BEQ loc_BANK3_A3E3
0A518                           
0A518 B5 3D                     	LDA ObjectXVelocity, X
0A51A 18                        	CLC
0A51B 79 CC 71                  	ADC byte_RAM_71CC, Y
0A51E 95 3D                     	STA ObjectXVelocity, X
0A520                           
0A520                           loc_BANK3_A3E3:
0A520 4C 27 A5                  	JMP loc_BANK3_A3EA
0A523                           
0A523                           ; ---------------------------------------------------------------------------
0A523                           
0A523                           loc_BANK3_A3E6:
0A523 A9 00                     	LDA #$00
0A525 95 3D                     	STA ObjectXVelocity, X
0A527                           
0A527                           loc_BANK3_A3EA:
0A527 A0 01                     	LDY #$01
0A529 B5 47                     	LDA ObjectYVelocity, X
0A52B 30 02                     	BMI loc_BANK3_A3F2
0A52D                           
0A52D A0 FF                     	LDY #$FF
0A52F                           
0A52F                           loc_BANK3_A3F2:
0A52F 8C CC 71                  	STY byte_RAM_71CC
0A532 A9 20                     	LDA #$20
0A534 CD 2C 04                  	CMP SpriteTempScreenY
0A537 A9 00                     	LDA #$00
0A539 2A                        	ROL A
0A53A 0A                        	ASL A
0A53B 0A                        	ASL A
0A53C 0A                        	ASL A
0A53D 25 F7                     	AND Player1JoypadHeld
0A53F D0 13                     	BNE loc_BANK3_A417
0A541                           
0A541 B5 5B                     	LDA EnemyCollision, X
0A543 4A                        	LSR A
0A544 4A                        	LSR A
0A545 29 03                     	AND #$03
0A547 85 00                     	STA byte_RAM_0
0A549 A5 F7                     	LDA Player1JoypadHeld
0A54B 4A                        	LSR A
0A54C 4A                        	LSR A
0A54D 29 03                     	AND #$03
0A54F A8                        	TAY
0A550 25 00                     	AND byte_RAM_0
0A552 F0 04                     	BEQ loc_BANK3_A41B
0A554                           
0A554                           loc_BANK3_A417:
0A554 A9 00                     	LDA #$00
0A556 F0 0D                     	BEQ loc_BANK3_A428
0A558                           
0A558                           loc_BANK3_A41B:
0A558 B9 A2 A4                  	LDA FlyingCarpetSpeed, Y
0A55B D5 47                     	CMP ObjectYVelocity, X
0A55D F0 08                     	BEQ loc_BANK3_A42A
0A55F                           
0A55F B5 47                     	LDA ObjectYVelocity, X
0A561 18                        	CLC
0A562 79 CC 71                  	ADC byte_RAM_71CC, Y
0A565                           
0A565                           loc_BANK3_A428:
0A565 95 47                     	STA ObjectYVelocity, X
0A567                           
0A567                           loc_BANK3_A42A:
0A567 20 F5 A0                  	JSR ApplyObjectPhysicsX
0A56A                           
0A56A 20 F0 A0                  	JSR ApplyObjectPhysicsY
0A56D                           
0A56D B5 B1                     	LDA EnemyArray_B1, X
0A56F C9 20                     	CMP #$20
0A571 B0 07                     	BCS EnemyBehavior_FlyingCarpet_Render
0A573                           
0A573 A5 10                     	LDA byte_RAM_10
0A575 29 02                     	AND #$02
0A577                           
0A577                           loc_BANK3_A43A:
0A577 D0 01                     	BNE EnemyBehavior_FlyingCarpet_Render
0A579                           
0A579 60                        	RTS
0A57A                           
0A57A                           EnemyBehavior_FlyingCarpet_Render:
0A57A 4C 8F A6                  	JMP RenderSprite_FlyingCarpet
0A57D                           
0A57D                           
0A57D                           CreateFlyingCarpet:
0A57D 20 7E 94                  	JSR CreateEnemy_TryAllSlots
0A580                           
0A580 30 33                     	BMI CreateFlyingCarpet_Exit
0A582                           
0A582 A6 00                     	LDX byte_RAM_0
0A584 A4 12                     	LDY byte_RAM_12
0A586 A9 00                     	LDA #$00
0A588 95 3D                     	STA ObjectXVelocity, X
0A58A 95 47                     	STA ObjectYVelocity, X
0A58C A9 41                     	LDA #Enemy_FlyingCarpet
0A58E 95 90                     	STA ObjectType, X
0A590 B9 29 00                  	LDA ObjectXLo, Y
0A593 38                        	SEC
0A594 E9 08                     	SBC #$08
0A596 95 29                     	STA ObjectXLo, X
0A598 B9 15 00                  	LDA ObjectXHi, Y
0A59B E9 00                     	SBC #$00
0A59D 95 15                     	STA ObjectXHi, X
0A59F B9 33 00                  	LDA ObjectYLo, Y
0A5A2 18                        	CLC
0A5A3 69 0E                     	ADC #$0E
0A5A5 95 33                     	STA ObjectYLo, X
0A5A7 B9 1F 00                  	LDA ObjectYHi, Y
0A5AA 69 00                     	ADC #$00
0A5AC 95 1F                     	STA ObjectYHi, X
0A5AE 20 B0 84                  	JSR SetEnemyAttributes
0A5B1                           
0A5B1                           	; life of carpet
0A5B1 A9 A0                     	LDA #$A0
0A5B3 95 B1                     	STA EnemyArray_B1, X
0A5B5                           
0A5B5                           CreateFlyingCarpet_Exit:
0A5B5 A6 12                     	LDX byte_RAM_12
0A5B7 60                        	RTS
0A5B8                           
0A5B8                           
0A5B8                           FlyingCarpetMirroring:
0A5B8 02                        	.db $02
0A5B9 02                        	.db $02
0A5BA 01                        	.db $01
0A5BB 01                        	.db $01
0A5BC                           
0A5BC                           FlyingCarpetTilemapIndex:
0A5BC 04                        	.db $04
0A5BD 0C                        	.db $0C
0A5BE 0C                        	.db $0C
0A5BF 04                        	.db $04
0A5C0                           
0A5C0                           PidgitYAcceleration:
0A5C0 01                        	.db $01
0A5C1 FF                        	.db $FF
0A5C2                           
0A5C2                           PidgitTurnYVelocity:
0A5C2 08                        	.db $08
0A5C3 F8                        	.db $F8
0A5C4                           
0A5C4                           PidgitXAcceleration:
0A5C4 01                        	.db $01
0A5C5 FF                        	.db $FF
0A5C6                           
0A5C6                           PidgitTurnXVelocity:
0A5C6 20                        	.db $20
0A5C7 E0                        	.db $E0
0A5C8                           
0A5C8                           PidgitDiveXVelocity:
0A5C8 14                        	.db $14
0A5C9 EC                        	.db $EC
0A5CA                           
0A5CA                           
0A5CA                           EnemyBehavior_Pidgit:
0A5CA 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
0A5CD                           
0A5CD F6 9F                     	INC ObjectAnimationTimer, X
0A5CF BD 2F 04                  	LDA EnemyArray_42F, X
0A5D2 F0 0C                     	BEQ EnemyBehavior_Pidgit_Alive
0A5D4                           
0A5D4 B5 65                     	LDA ObjectAttributes, X
0A5D6 09 80                     	ORA #ObjAttrib_UpsideDown
0A5D8 95 65                     	STA ObjectAttributes, X
0A5DA 20 45 A6                  	JSR RenderSprite_Pidgit
0A5DD                           
0A5DD 4C FC 85                  	JMP ApplyObjectMovement
0A5E0                           
0A5E0                           ; ---------------------------------------------------------------------------
0A5E0                           
0A5E0                           EnemyBehavior_Pidgit_Alive:
0A5E0 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0A5E3                           
0A5E3 B5 B1                     	LDA EnemyArray_B1, X
0A5E5 F0 17                     	BEQ loc_BANK3_A4C1
0A5E7                           
0A5E7 D6 47                     	DEC ObjectYVelocity, X
0A5E9 10 10                     	BPL loc_BANK3_A4BE
0A5EB                           
0A5EB B5 33                     	LDA ObjectYLo, X
0A5ED C9 30                     	CMP #$30
0A5EF B0 0A                     	BCS loc_BANK3_A4BE
0A5F1                           
0A5F1 A9 00                     	LDA #$00
0A5F3 95 B1                     	STA EnemyArray_B1, X
0A5F5 95 3D                     	STA ObjectXVelocity, X
0A5F7 95 47                     	STA ObjectYVelocity, X
0A5F9 D6 86                     	DEC EnemyTimer, X
0A5FB                           
0A5FB                           loc_BANK3_A4BE:
0A5FB 4C 3F A6                  	JMP loc_BANK3_A502
0A5FE                           
0A5FE                           ; ---------------------------------------------------------------------------
0A5FE                           
0A5FE                           loc_BANK3_A4C1:
0A5FE B5 86                     	LDA EnemyTimer, X
0A600 D0 11                     	BNE loc_BANK3_A4D6
0A602                           
0A602 A9 30                     	LDA #$30
0A604 95 47                     	STA ObjectYVelocity, X
0A606 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
0A609                           
0A609 B9 C8 A5                  	LDA PidgitDiveXVelocity, Y
0A60C 95 3D                     	STA ObjectXVelocity, X
0A60E F6 B1                     	INC EnemyArray_B1, X
0A610 4C 45 A6                  	JMP RenderSprite_Pidgit
0A613                           
0A613                           ; ---------------------------------------------------------------------------
0A613                           
0A613                           loc_BANK3_A4D6:
0A613 BD 80 04                  	LDA EnemyArray_480, X
0A616 29 01                     	AND #$01
0A618 A8                        	TAY
0A619 B5 47                     	LDA ObjectYVelocity, X
0A61B 18                        	CLC
0A61C 79 C0 A5                  	ADC PidgitYAcceleration, Y
0A61F 95 47                     	STA ObjectYVelocity, X
0A621 D9 C2 A5                  	CMP PidgitTurnYVelocity, Y
0A624 D0 03                     	BNE loc_BANK3_A4EC
0A626                           
0A626 FE 80 04                  	INC EnemyArray_480, X
0A629                           
0A629                           loc_BANK3_A4EC:
0A629 BD 77 04                  	LDA EnemyArray_477, X
0A62C 29 01                     	AND #$01
0A62E A8                        	TAY
0A62F B5 3D                     	LDA ObjectXVelocity, X
0A631 18                        	CLC
0A632 79 C4 A5                  	ADC PidgitXAcceleration, Y
0A635 95 3D                     	STA ObjectXVelocity, X
0A637 D9 C6 A5                  	CMP PidgitTurnXVelocity, Y
0A63A D0 03                     	BNE loc_BANK3_A502
0A63C                           
0A63C FE 77 04                  	INC EnemyArray_477, X
0A63F                           
0A63F                           loc_BANK3_A502:
0A63F 20 F0 A0                  	JSR ApplyObjectPhysicsY
0A642                           
0A642 20 F5 A0                  	JSR ApplyObjectPhysicsX
0A645                           
0A645                           
0A645                           RenderSprite_Pidgit:
0A645 20 1C 9E                  	JSR RenderSprite_NotAlbatoss
0A648                           
0A648 B5 51                     	LDA EnemyState, X
0A64A 38                        	SEC
0A64B E9 01                     	SBC #$01
0A64D 1D 2F 04                  	ORA EnemyArray_42F, X
0A650 15 A8                     	ORA ObjectBeingCarriedTimer, X
0A652 D0 3A                     	BNE RenderSprite_Pidgit_Exit
0A654                           
0A654                           	; Render Pidgit's carpet
0A654 20 2F FC                  	JSR loc_BANKF_FAFE
0A657                           
0A657                           	STY_abs byte_RAM_F4
0A657                           	IFDEF COMPATIBILITY
0A657 8C                        		.db $8c
0A658 F4 00                     		.dw byte_RAM_F4
0A65A                           	ELSE
0A65A                           		STY byte_RAM_F4
0A65A                           		NOP_compat
0A65A                           	ENDIF
0A65A                           
0A65A A9 45                     	LDA #ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_16x32
0A65C 95 65                     	STA ObjectAttributes, X
0A65E B5 29                     	LDA ObjectXLo, X
0A660 48                        	PHA
0A661 38                        	SEC
0A662 E9 08                     	SBC #$08
0A664 95 29                     	STA ObjectXLo, X
0A666 B5 15                     	LDA ObjectXHi, X
0A668 48                        	PHA
0A669 E9 00                     	SBC #$00
0A66B 95 15                     	STA ObjectXHi, X
0A66D 20 24 89                  	JSR sub_BANK2_8894
0A670                           
0A670 68                        	PLA
0A671 95 15                     	STA ObjectXHi, X
0A673 68                        	PLA
0A674 95 29                     	STA ObjectXLo, X
0A676 AD 2C 04                  	LDA SpriteTempScreenY
0A679 18                        	CLC
0A67A 69 0C                     	ADC #$0C
0A67C 8D 2C 04                  	STA SpriteTempScreenY
0A67F AD 29 04                  	LDA SpriteTempScreenX
0A682 E9 07                     	SBC #$07
0A684 8D 29 04                  	STA SpriteTempScreenX
0A687 20 8F A6                  	JSR RenderSprite_FlyingCarpet
0A68A                           
0A68A A9 0D                     	LDA #ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_FrontFacing
0A68C 95 65                     	STA ObjectAttributes, X
0A68E                           
0A68E                           RenderSprite_Pidgit_Exit:
0A68E 60                        	RTS
0A68F                           
0A68F                           
0A68F                           RenderSprite_FlyingCarpet:
0A68F A5 10                     	LDA byte_RAM_10
0A691 4A                        	LSR A
0A692 4A                        	LSR A
0A693 4A                        	LSR A
0A694 29 03                     	AND #$03
0A696 B4 3D                     	LDY ObjectXVelocity, X
0A698 30 02                     	BMI loc_BANK3_A55F
0A69A                           
0A69A 49 03                     	EOR #$03
0A69C                           
0A69C                           loc_BANK3_A55F:
0A69C A8                        	TAY
0A69D B9 B8 A5                  	LDA FlyingCarpetMirroring, Y
0A6A0 95 6F                     	STA EnemyMovementDirection, X
0A6A2 B9 BC A5                  	LDA FlyingCarpetTilemapIndex, Y
0A6A5 4C 28 9E                  	JMP RenderSprite_DrawObject
0A6A8                           
0A6A8                           
0A6A8                           EnemyInit_Mouser:
0A6A8 20 94 90                  	JSR EnemyInit_Birdo
0A6AB                           
0A6AB A9 02                     	LDA #$02
0A6AD AC 34 06                  	LDY CurrentWorldTileset
0A6B0 F0 02                     	BEQ EnemyInit_Mouser_SetHP
0A6B2                           
0A6B2 A9 04                     	LDA #$04
0A6B4                           
0A6B4                           EnemyInit_Mouser_SetHP:
0A6B4 9D 65 04                  	STA EnemyHP, X
0A6B7                           IFDEF PLAYER_STUFF
0A6B7 20 BE AD                      JSR Set_CustomBossHp
0A6BA                           ENDIF
0A6BA 60                        	RTS
0A6BB                           
0A6BB                           ;
0A6BB                           ; Mouser
0A6BB                           ; ======
0A6BB                           ;
0A6BB                           ; Runs back and forth, throws bombs
0A6BB                           ;
0A6BB                           ; byte_RAM_10 = timer used for jumping and throwing
0A6BB                           ; EnemyArray_45C = pauses Mouser when not $00
0A6BB                           ; EnemyTimer = counter used to time throwing (wind up and pitch)
0A6BB                           ; EnemyArray_B1 = counter used for movement direction and non-throw pauses
0A6BB                           ;
0A6BB                           EnemyBehavior_Mouser:
0A6BB 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
0A6BE                           
0A6BE BD 5C 04                  	LDA EnemyArray_45C, X
0A6C1 F0 03                     	BEQ EnemyBehavior_Mouser_Active
0A6C3                           
0A6C3 4C 90 9D                  	JMP RenderSprite
0A6C6                           
0A6C6                           EnemyBehavior_Mouser_Active:
0A6C6 20 36 B5                  	JSR ObjectTileCollision
0A6C9                           
0A6C9 A9 02                     	LDA #$02
0A6CB 95 6F                     	STA EnemyMovementDirection, X
0A6CD 20 90 9D                  	JSR RenderSprite
0A6D0                           
0A6D0 B5 5B                     	LDA EnemyCollision, X
0A6D2 29 04                     	AND #CollisionFlags_Down
0A6D4 F0 5F                     	BEQ EnemyBehavior_Mouser_Falling
0A6D6                           
0A6D6 20 AC 97                  	JSR ResetObjectYVelocity
0A6D9                           
0A6D9 A5 10                     	LDA byte_RAM_10
0A6DB 29 FF                     	AND #$FF
0A6DD D0 06                     	BNE EnemyBehavior_Mouser_Move
0A6DF                           
0A6DF                           EnemyBehavior_Mouser_Jump:
0A6DF A9 D8                     	LDA #$D8
0A6E1 95 47                     	STA ObjectYVelocity, X
0A6E3 D0 50                     	BNE EnemyBehavior_Mouser_Falling
0A6E5                           
0A6E5                           EnemyBehavior_Mouser_Move:
0A6E5 A5 10                     	LDA byte_RAM_10
0A6E7 29 3F                     	AND #$3F
0A6E9 D0 04                     	BNE loc_BANK3_A5AF
0A6EB                           
0A6EB                           	; the wind-up
0A6EB A9 20                     	LDA #$20
0A6ED 95 86                     	STA EnemyTimer, X
0A6EF                           
0A6EF                           loc_BANK3_A5AF:
0A6EF B4 86                     	LDY EnemyTimer, X
0A6F1 D0 1B                     	BNE EnemyBehavior_Mouser_MaybeThrow
0A6F3                           
0A6F3 F6 B1                     	INC EnemyArray_B1, X
0A6F5 B5 B1                     	LDA EnemyArray_B1, X
0A6F7 29 20                     	AND #$20
0A6F9 F0 39                     	BEQ EnemyBehavior_Mouser_Exit
0A6FB                           
0A6FB F6 9F                     	INC ObjectAnimationTimer, X
0A6FD F6 9F                     	INC ObjectAnimationTimer, X
0A6FF A0 18                     	LDY #$18 ; right
0A701 B5 B1                     	LDA EnemyArray_B1, X
0A703 29 40                     	AND #$40
0A705 D0 02                     	BNE EnemyBehavior_Mouser_PhysicsX
0A707                           
0A707 A0 E8                     	LDY #$E8 ; left
0A709                           
0A709                           EnemyBehavior_Mouser_PhysicsX:
0A709 94 3D                     	STY ObjectXVelocity, X
0A70B 4C F5 A0                  	JMP ApplyObjectPhysicsX
0A70E                           
0A70E                           EnemyBehavior_Mouser_MaybeThrow:
0A70E                           	; the pitch
0A70E C0 10                     	CPY #$10
0A710 D0 22                     	BNE EnemyBehavior_Mouser_Exit
0A712                           
0A712                           EnemyBehavior_Mouser_Throw:
0A712 20 7E 94                  	JSR CreateEnemy_TryAllSlots
0A715                           
0A715 30 1D                     	BMI EnemyBehavior_Mouser_Exit
0A717                           
0A717 A6 00                     	LDX byte_RAM_0
0A719 A9 37                     	LDA #Enemy_Bomb
0A71B 95 90                     	STA ObjectType, X
0A71D B5 33                     	LDA ObjectYLo, X
0A71F 69 03                     	ADC #$03
0A721 95 33                     	STA ObjectYLo, X
0A723 A9 E0                     	LDA #$E0 ; throw y-velocity
0A725 95 47                     	STA ObjectYVelocity, X
0A727 20 B0 84                  	JSR SetEnemyAttributes
0A72A                           
0A72A A9 FF                     	LDA #$FF ; bomb fuse
0A72C 95 86                     	STA EnemyTimer, X
0A72E A9 E0                     	LDA #$E0 ; throw x-velocity
0A730 95 3D                     	STA ObjectXVelocity, X
0A732 A6 12                     	LDX byte_RAM_12
0A734                           
0A734                           EnemyBehavior_Mouser_Exit:
0A734 60                        	RTS
0A735                           
0A735                           EnemyBehavior_Mouser_Falling:
0A735 4C 04 86                  	JMP ApplyObjectMovement_Vertical
0A738                           
0A738                           
0A738                           RenderSprite_Mouser:
0A738 B5 51                     	LDA EnemyState, X
0A73A C9 01                     	CMP #EnemyState_Alive
0A73C D0 0B                     	BNE RenderSprite_Mouser_Hurt
0A73E                           
0A73E BD 5C 04                  	LDA EnemyArray_45C, X
0A741 F0 0F                     	BEQ RenderSprite_Mouser_Throw
0A743                           
0A743 F6 9F                     	INC ObjectAnimationTimer, X
0A745 A9 4A                     	LDA #ObjAttrib_16x32 | ObjAttrib_FrontFacing | ObjAttrib_Palette2
0A747 95 65                     	STA ObjectAttributes, X
0A749                           
0A749                           RenderSprite_Mouser_Hurt:
0A749 A9 B3                     	LDA #%10110011
0A74B 9D 6E 04                  	STA EnemyArray_46E, X
0A74E A9 2C                     	LDA #$2C ; hurt sprite
0A750 D0 09                     	BNE RenderSprite_Mouser_DrawObject
0A752                           
0A752                           RenderSprite_Mouser_Throw:
0A752 B4 86                     	LDY EnemyTimer, X
0A754 88                        	DEY
0A755 C0 10                     	CPY #$10
0A757 B0 08                     	BCS RenderSprite_Mouser_Walk
0A759                           
0A759 A9 20                     	LDA #$20 ; throwing sprite
0A75B                           
0A75B                           RenderSprite_Mouser_DrawObject:
0A75B 20 28 9E                  	JSR RenderSprite_DrawObject
0A75E                           
0A75E 4C 88 A7                  	JMP RenderSprite_Mouser_Exit
0A761                           
0A761                           RenderSprite_Mouser_Walk:
0A761 20 1C 9E                  	JSR RenderSprite_NotAlbatoss
0A764                           
0A764 B5 86                     	LDA EnemyTimer, X
0A766 C9 10                     	CMP #$10
0A768 90 1E                     	BCC RenderSprite_Mouser_Exit
0A76A                           
0A76A                           RenderSprite_Mouser_Bomb:
0A76A A9 01                     	LDA #ObjAttrib_Palette1
0A76C 95 65                     	STA ObjectAttributes, X
0A76E A9 10                     	LDA #%00010000 ; use tilemap 2
0A770 9D 6E 04                  	STA EnemyArray_46E, X
0A773 AD 29 04                  	LDA SpriteTempScreenX
0A776 18                        	CLC
0A777 69 0B                     	ADC #$0B
0A779 8D 29 04                  	STA SpriteTempScreenX
0A77C 06 EE                     	ASL byte_RAM_EE
0A77E A0 00                     	LDY #$00
0A780                           	STY_abs byte_RAM_F4
0A780                           	IFDEF COMPATIBILITY
0A780 8C                        		.db $8c
0A781 F4 00                     		.dw byte_RAM_F4
0A783                           	ELSE
0A783                           		STY byte_RAM_F4
0A783                           		NOP_compat
0A783                           	ENDIF
0A783 A9 38                     	LDA #$38 ; could have been $34 from tilemap 1 instead
0A785 20 28 9E                  	JSR RenderSprite_DrawObject
0A788                           
0A788                           RenderSprite_Mouser_Exit:
0A788                           	; restore Mouser attributes after drawing the bomb
0A788 A9 43                     	LDA #ObjAttrib_16x32 | ObjAttrib_Palette3
0A78A 95 65                     	STA ObjectAttributes, X
0A78C A9 33                     	LDA #%00110011
0A78E 9D 6E 04                  	STA EnemyArray_46E, X
0A791                           
0A791 60                        	RTS
0A792                           
0A792                           
0A792                           ; ---------------------------------------------------------------------------
0A792                           byte_BANK3_A652:
0A792 FB                        	.db $FB
0A793 05                        	.db $05
0A794                           ; ---------------------------------------------------------------------------
0A794                           
0A794                           RenderSprite_Ostro:
0A794 20 25 9E                  	JSR RenderSprite_NotRocket
0A797                           
0A797 A5 EE                     	LDA byte_RAM_EE
0A799 29 0E                     	AND #$0E
0A79B 05 EF                     	ORA byte_RAM_EF
0A79D 15 B1                     	ORA EnemyArray_B1, X
0A79F D0 1B                     	BNE locret_BANK3_A67C
0A7A1                           
0A7A1 B5 33                     	LDA ObjectYLo, X
0A7A3 38                        	SEC
0A7A4 E9 02                     	SBC #$02
0A7A6 85 00                     	STA byte_RAM_0
0A7A8 B4 6F                     	LDY EnemyMovementDirection, X
0A7AA A5 01                     	LDA byte_RAM_1
0A7AC 18                        	CLC
0A7AD 79 91 A7                  	ADC byte_BANK3_A652 - 1, Y
0A7B0 85 01                     	STA byte_RAM_1
0A7B2 20 2F FC                  	JSR loc_BANKF_FAFE
0A7B5                           
0A7B5 A2 3C                     	LDX #$3C
0A7B7 20 61 9F                  	JSR SetSpriteTiles
0A7BA                           
0A7BA A6 12                     	LDX byte_RAM_12
0A7BC                           
0A7BC                           locret_BANK3_A67C:
0A7BC 60                        	RTS
0A7BD                           
0A7BD                           ; ---------------------------------------------------------------------------
0A7BD                           
0A7BD                           EnemyBehavior_Ostro:
0A7BD B5 B1                     	LDA EnemyArray_B1, X
0A7BF D0 5A                     	BNE loc_BANK3_A6DB
0A7C1                           
0A7C1 B5 A8                     	LDA ObjectBeingCarriedTimer, X
0A7C3 F0 38                     	BEQ loc_BANK3_A6BD
0A7C5                           
0A7C5 A9 01                     	LDA #Enemy_ShyguyRed
0A7C7 95 90                     	STA ObjectType, X
0A7C9 20 B0 84                  	JSR SetEnemyAttributes
0A7CC                           
0A7CC 20 82 94                  	JSR CreateEnemy
0A7CF                           
0A7CF 30 2B                     	BMI locret_BANK3_A6BC
0A7D1                           
0A7D1 A4 00                     	LDY byte_RAM_0
0A7D3 A9 08                     	LDA #Enemy_Ostro
0A7D5 99 90 00                  	STA ObjectType, Y
0A7D8 99 B1 00                  	STA EnemyArray_B1, Y
0A7DB B5 29                     	LDA ObjectXLo, X
0A7DD 99 29 00                  	STA ObjectXLo, Y
0A7E0 B5 15                     	LDA ObjectXHi, X
0A7E2 99 15 00                  	STA ObjectXHi, Y
0A7E5 BD 41 04                  	LDA unk_RAM_441, X
0A7E8 99 41 04                  	STA unk_RAM_441, Y
0A7EB A9 FF                     	LDA #$FF
0A7ED 9D 41 04                  	STA unk_RAM_441, X
0A7F0 B5 3D                     	LDA ObjectXVelocity, X
0A7F2 99 3D 00                  	STA ObjectXVelocity, Y
0A7F5 98                        	TYA
0A7F6 AA                        	TAX
0A7F7 20 B0 84                  	JSR SetEnemyAttributes
0A7FA                           
0A7FA A6 12                     	LDX byte_RAM_12
0A7FC                           
0A7FC                           locret_BANK3_A6BC:
0A7FC 60                        	RTS
0A7FD                           
0A7FD                           ; ---------------------------------------------------------------------------
0A7FD                           
0A7FD                           loc_BANK3_A6BD:
0A7FD B5 5B                     	LDA EnemyCollision, X
0A7FF 29 10                     	AND #$10
0A801 F0 18                     	BEQ loc_BANK3_A6DB
0A803                           
0A803 F6 B1                     	INC EnemyArray_B1, X
0A805 95 9F                     	STA ObjectAnimationTimer, X
0A807 20 82 94                  	JSR CreateEnemy
0A80A                           
0A80A 30 0F                     	BMI loc_BANK3_A6DB
0A80C                           
0A80C A4 00                     	LDY byte_RAM_0
0A80E B5 3D                     	LDA ObjectXVelocity, X
0A810 99 3D 00                  	STA ObjectXVelocity, Y
0A813 A9 20                     	LDA #$20
0A815 99 53 04                  	STA EnemyArray_453, Y
0A818 4C 21 A8                  	JMP loc_BANK3_A6E1
0A81B                           
0A81B                           ; ---------------------------------------------------------------------------
0A81B                           
0A81B                           loc_BANK3_A6DB:
0A81B 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0A81E                           
0A81E 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
0A821                           
0A821                           loc_BANK3_A6E1:
0A821 20 36 B5                  	JSR ObjectTileCollision
0A824                           
0A824 B5 5B                     	LDA EnemyCollision, X
0A826 35 6F                     	AND EnemyMovementDirection, X
0A828 F0 03                     	BEQ loc_BANK3_A6ED
0A82A                           
0A82A 20 56 A1                  	JSR EnemyBehavior_TurnAround
0A82D                           
0A82D                           loc_BANK3_A6ED:
0A82D B5 5B                     	LDA EnemyCollision, X
0A82F 29 04                     	AND #$04
0A831 F0 1A                     	BEQ loc_BANK3_A70D
0A833                           
0A833 BD 2F 04                  	LDA EnemyArray_42F, X
0A836 F0 08                     	BEQ loc_BANK3_A700
0A838                           
0A838 A9 00                     	LDA #$00
0A83A 9D 2F 04                  	STA EnemyArray_42F, X
0A83D 20 09 85                  	JSR EnemyInit_BasicAttributes
0A840                           
0A840                           loc_BANK3_A700:
0A840 B5 9F                     	LDA ObjectAnimationTimer, X
0A842 49 08                     	EOR #$08
0A844 95 9F                     	STA ObjectAnimationTimer, X
0A846 20 AC 97                  	JSR ResetObjectYVelocity
0A849                           
0A849 A9 F0                     	LDA #$F0
0A84B 95 47                     	STA ObjectYVelocity, X
0A84D                           
0A84D                           loc_BANK3_A70D:
0A84D FE 77 04                  	INC EnemyArray_477, X
0A850 B5 B1                     	LDA EnemyArray_B1, X
0A852 D0 0A                     	BNE loc_BANK3_A71E
0A854                           
0A854 BD 77 04                  	LDA EnemyArray_477, X
0A857 29 3F                     	AND #$3F
0A859 D0 03                     	BNE loc_BANK3_A71E
0A85B                           
0A85B 20 0C 85                  	JSR EnemyInit_BasicMovementTowardPlayer
0A85E                           
0A85E                           loc_BANK3_A71E:
0A85E 20 FC 85                  	JSR ApplyObjectMovement
0A861                           
0A861 4C 90 9D                  	JMP RenderSprite
0A864                           
0A864                           ; ---------------------------------------------------------------------------
0A864                           
0A864                           EnemyInit_Tryclyde:
0A864 20 CF 84                  	JSR EnemyInit_Basic
0A867                           
0A867 A9 40                     	LDA #$40
0A869 9D 77 04                  	STA EnemyArray_477, X
0A86C A9 02                     	LDA #$02
0A86E 9D 65 04                  	STA EnemyHP, X
0A871                           IFDEF PLAYER_STUFF
0A871 20 BE AD                      JSR Set_CustomBossHp
0A874                           ENDIF
0A874 4C B4 90                  	JMP EnemyInit_Birdo_Exit
0A877                           
0A877                           
0A877                           TryclydeHeadPosition:
0A877 00                        	.db $00
0A878 FF                        	.db $FF
0A879 FE                        	.db $FE
0A87A FD                        	.db $FD
0A87B FC                        	.db $FC
0A87C FB                        	.db $FB
0A87D FA                        	.db $FA
0A87E F9                        	.db $F9
0A87F F8                        	.db $F8
0A880 F9                        	.db $F9
0A881 FA                        	.db $FA
0A882 FB                        	.db $FB
0A883 FC                        	.db $FC
0A884 FD                        	.db $FD
0A885 FE                        	.db $FE
0A886 FF                        	.db $FF
0A887                           
0A887                           TryclydeFireYVelocity:
0A887 0B                        	.db $0B
0A888 0C                        	.db $0C
0A889 0D                        	.db $0D
0A88A 0F                        	.db $0F
0A88B 10                        	.db $10
0A88C 12                        	.db $12
0A88D 14                        	.db $14
0A88E 17                        	.db $17
0A88F 1A                        	.db $1A
0A890 1D                        	.db $1D
0A891 1F                        	.db $1F
0A892 20                        	.db $20
0A893                           
0A893                           TryclydeFireXVelocity:
0A893 E2                        	.db $E2
0A894 E2                        	.db $E2
0A895 E2                        	.db $E2
0A896 E3                        	.db $E3
0A897 E4                        	.db $E4
0A898 E5                        	.db $E5
0A899 E7                        	.db $E7
0A89A E9                        	.db $E9
0A89B ED                        	.db $ED
0A89C F1                        	.db $F1
0A89D F8                        	.db $F8
0A89E 00                        	.db $00
0A89F                           
0A89F                           
0A89F                           locret_BANK3_A75C:
0A89F 60                        	RTS
0A8A0                           
0A8A0                           
0A8A0                           ;
0A8A0                           ; Tryclyde
0A8A0                           ; ========
0A8A0                           ;
0A8A0                           ; Drifts back and forth slightly, spits fire
0A8A0                           ;
0A8A0                           ; EnemyArray_477 = counter used to determine movement direction and top head position
0A8A0                           ; EnemyArray_B1 = counter used to determine whether or not the bottom head should move
0A8A0                           ; EnemyArray_45C = used to determine whether Tryclyde is taking damage
0A8A0                           ; EnemyArray_480 = counter used to determine bottom head position
0A8A0                           ;
0A8A0                           EnemyBehavior_Tryclyde:
0A8A0 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
0A8A3                           
0A8A3 A0 00                     	LDY #$00
0A8A5 BD 77 04                  	LDA EnemyArray_477, X
0A8A8 0A                        	ASL A
0A8A9 90 07                     	BCC EnemyBehavior_Tryclyde_PhysicsX
0A8AB                           
0A8AB A0 02                     	LDY #$02
0A8AD 0A                        	ASL A
0A8AE 90 02                     	BCC EnemyBehavior_Tryclyde_PhysicsX
0A8B0                           
0A8B0 A0 FE                     	LDY #$FE
0A8B2                           
0A8B2                           EnemyBehavior_Tryclyde_PhysicsX:
0A8B2 94 3D                     	STY ObjectXVelocity, X
0A8B4 20 F5 A0                  	JSR ApplyObjectPhysicsX
0A8B7                           
0A8B7 FE 77 04                  	INC EnemyArray_477, X
0A8BA B5 B1                     	LDA EnemyArray_B1, X
0A8BC 18                        	CLC
0A8BD 69 D0                     	ADC #$D0
0A8BF 95 B1                     	STA EnemyArray_B1, X
0A8C1 90 03                     	BCC RenderSprite_Tryclyde
0A8C3                           
0A8C3 FE 80 04                  	INC EnemyArray_480, X
0A8C6                           
0A8C6                           RenderSprite_Tryclyde:
0A8C6 A5 EF                     	LDA byte_RAM_EF
0A8C8 D0 D5                     	BNE locret_BANK3_A75C
0A8CA                           
0A8CA A9 49                     	LDA #ObjAttrib_16x32 | ObjAttrib_FrontFacing | ObjAttrib_Palette1
0A8CC 95 65                     	STA ObjectAttributes, X
0A8CE A0 48                     	LDY #$48 ; static head regular
0A8D0 B5 51                     	LDA EnemyState, X
0A8D2 38                        	SEC
0A8D3 E9 01                     	SBC #$01
0A8D5 1D 5C 04                  	ORA EnemyArray_45C, X
0A8D8 85 07                     	STA byte_RAM_7
0A8DA F0 02                     	BEQ RenderSprite_Tryclyde_DrawBody
0A8DC                           
0A8DC A0 4C                     	LDY #$4C ; static head hurt
0A8DE                           
0A8DE                           RenderSprite_Tryclyde_DrawBody:
0A8DE 98                        	TYA
0A8DF A0 30                     	LDY #$30
0A8E1                           	STY_abs byte_RAM_F4
0A8E1                           	IFDEF COMPATIBILITY
0A8E1 8C                        		.db $8c
0A8E2 F4 00                     		.dw byte_RAM_F4
0A8E4                           	ELSE
0A8E4                           		STY byte_RAM_F4
0A8E4                           		NOP_compat
0A8E4                           	ENDIF
0A8E4 20 28 9E                  	JSR RenderSprite_DrawObject
0A8E7                           
0A8E7 A9 09                     	LDA #ObjAttrib_Palette1 | ObjAttrib_FrontFacing
0A8E9 95 65                     	STA ObjectAttributes, X
0A8EB A9 33                     	LDA #%00110011
0A8ED 9D 6E 04                  	STA EnemyArray_46E, X
0A8F0 B5 29                     	LDA ObjectXLo, X
0A8F2 48                        	PHA
0A8F3 38                        	SEC
0A8F4 E9 08                     	SBC #$08
0A8F6 95 29                     	STA ObjectXLo, X
0A8F8 20 24 89                  	JSR sub_BANK2_8894
0A8FB                           
0A8FB A2 50                     	LDX #$50 ; tail up
0A8FD A5 10                     	LDA byte_RAM_10
0A8FF 29 20                     	AND #$20
0A901 D0 08                     	BNE RenderSprite_Tryclyde_DrawTail
0A903                           
0A903 A9 04                     	LDA #$04
0A905 25 10                     	AND byte_RAM_10
0A907 F0 02                     	BEQ RenderSprite_Tryclyde_DrawTail
0A909                           
0A909 A2 53                     	LDX #$53 ; tail down
0A90B                           
0A90B                           RenderSprite_Tryclyde_DrawTail:
0A90B                           	; tail
0A90B A5 01                     	LDA byte_RAM_1
0A90D 38                        	SEC
0A90E E9 08                     	SBC #$08
0A910 85 01                     	STA byte_RAM_1
0A912 A9 20                     	LDA #$20
0A914 85 0C                     	STA byte_RAM_C
0A916 A0 E0                     	LDY #$E0
0A918 20 61 9F                  	JSR SetSpriteTiles
0A91B                           
0A91B                           	; top head
0A91B A6 12                     	LDX byte_RAM_12
0A91D B5 29                     	LDA ObjectXLo, X
0A91F 38                        	SEC
0A920 E9 08                     	SBC #$08
0A922 95 29                     	STA ObjectXLo, X
0A924 20 24 89                  	JSR sub_BANK2_8894
0A927                           
0A927 68                        	PLA
0A928 95 29                     	STA ObjectXLo, X
0A92A A9 13                     	LDA #%00010011
0A92C 9D 6E 04                  	STA EnemyArray_46E, X
0A92F B5 33                     	LDA ObjectYLo, X
0A931 85 00                     	STA byte_RAM_0
0A933 BD 77 04                  	LDA EnemyArray_477, X
0A936 29 78                     	AND #$78
0A938 4A                        	LSR A
0A939 4A                        	LSR A
0A93A 4A                        	LSR A
0A93B A8                        	TAY
0A93C B9 77 A8                  	LDA TryclydeHeadPosition, Y
0A93F 6D 29 04                  	ADC SpriteTempScreenX
0A942 69 F0                     	ADC #$F0
0A944 85 01                     	STA byte_RAM_1
0A946 A2 56                     	LDX #$56
0A948 A5 07                     	LDA byte_RAM_7
0A94A D0 0C                     	BNE RenderSprite_Tryclyde_DrawTopHead
0A94C                           
0A94C A2 58                     	LDX #$58
0A94E 88                        	DEY
0A94F 88                        	DEY
0A950 88                        	DEY
0A951 88                        	DEY
0A952 C0 07                     	CPY #$07
0A954 B0 02                     	BCS RenderSprite_Tryclyde_DrawTopHead
0A956                           
0A956 A2 5A                     	LDX #$5A
0A958                           
0A958                           RenderSprite_Tryclyde_DrawTopHead:
0A958 A0 00                     	LDY #$00
0A95A 20 61 9F                  	JSR SetSpriteTiles
0A95D                           
0A95D                           	; bottom head
0A95D A6 12                     	LDX byte_RAM_12
0A95F B5 33                     	LDA ObjectYLo, X
0A961 18                        	CLC
0A962 69 10                     	ADC #$10
0A964 85 00                     	STA byte_RAM_0
0A966 BD 80 04                  	LDA EnemyArray_480, X
0A969 29 78                     	AND #$78
0A96B 4A                        	LSR A
0A96C 4A                        	LSR A
0A96D 4A                        	LSR A
0A96E A8                        	TAY
0A96F B9 77 A8                  	LDA TryclydeHeadPosition, Y
0A972 6D 29 04                  	ADC SpriteTempScreenX
0A975 69 F0                     	ADC #$F0
0A977 85 01                     	STA byte_RAM_1
0A979 A9 00                     	LDA #$00
0A97B 85 0C                     	STA byte_RAM_C
0A97D A2 56                     	LDX #$56
0A97F A5 07                     	LDA byte_RAM_7
0A981 D0 0C                     	BNE RenderSprite_Tryclyde_DrawBottomHead
0A983                           
0A983 A2 58                     	LDX #$58
0A985 88                        	DEY
0A986 88                        	DEY
0A987 88                        	DEY
0A988 88                        	DEY
0A989 C0 07                     	CPY #$07
0A98B B0 02                     	BCS RenderSprite_Tryclyde_DrawBottomHead
0A98D                           
0A98D A2 5A                     	LDX #$5A
0A98F                           
0A98F                           RenderSprite_Tryclyde_DrawBottomHead:
0A98F A0 08                     	LDY #$08
0A991 20 61 9F                  	JSR SetSpriteTiles
0A994                           
0A994 A6 12                     	LDX byte_RAM_12
0A996 A9 13                     	LDA #%00010011
0A998 9D 6E 04                  	STA EnemyArray_46E, X
0A99B A5 EE                     	LDA byte_RAM_EE
0A99D D0 2F                     	BNE EnemyBehavior_Tryclyde_SpitFireballs
0A99F                           
0A99F                           RenderSprite_Tryclyde_DrawBottomNeck:
0A99F B5 33                     	LDA ObjectYLo, X
0A9A1 18                        	CLC
0A9A2 69 10                     	ADC #$10
0A9A4 8D 58 02                  	STA SpriteDMAArea + $58
0A9A7 A9 0D                     	LDA #$0D ; neck sprite
0A9A9 8D 59 02                  	STA SpriteDMAArea + $59
0A9AC 8D 5D 02                  	STA SpriteDMAArea + $5D ; bottom neck
0A9AF AD 32 02                  	LDA SpriteDMAArea + $32
0A9B2 8D 5A 02                  	STA SpriteDMAArea + $5A
0A9B5 8D 5E 02                  	STA SpriteDMAArea + $5E ; bottom neck
0A9B8 A5 01                     	LDA byte_RAM_1
0A9BA 18                        	CLC
0A9BB 69 10                     	ADC #$10
0A9BD 8D 5B 02                  	STA SpriteDMAArea + $5B
0A9C0                           
0A9C0                           RenderSprite_Tryclyde_DrawTopNeck:
0A9C0 B5 33                     	LDA ObjectYLo, X
0A9C2 8D 5C 02                  	STA SpriteDMAArea + $5C
0A9C5 AD 29 04                  	LDA SpriteTempScreenX
0A9C8 38                        	SEC
0A9C9 E9 08                     	SBC #$08
0A9CB 8D 5F 02                  	STA SpriteDMAArea + $5F
0A9CE                           
0A9CE                           EnemyBehavior_Tryclyde_SpitFireballs:
0A9CE A9 00                     	LDA #$00
0A9D0 85 05                     	STA byte_RAM_5
0A9D2 BD 77 04                  	LDA EnemyArray_477, X
0A9D5 20 DD A9                  	JSR EnemyBehavior_Tryclyde_SpitFireball
0A9D8                           
0A9D8 E6 05                     	INC byte_RAM_5
0A9DA BD 80 04                  	LDA EnemyArray_480, X
0A9DD                           
0A9DD                           EnemyBehavior_Tryclyde_SpitFireball:
0A9DD 29 67                     	AND #$67
0A9DF C9 40                     	CMP #$40
0A9E1 D0 51                     	BNE RenderSprite_Tryclyde_Exit
0A9E3                           
0A9E3 BD 5C 04                  	LDA EnemyArray_45C, X
0A9E6 D0 4C                     	BNE RenderSprite_Tryclyde_Exit
0A9E8                           
0A9E8 20 82 94                  	JSR CreateEnemy
0A9EB                           
0A9EB 30 47                     	BMI RenderSprite_Tryclyde_Exit
0A9ED                           
0A9ED A9 01                     	LDA #SoundEffect1_BirdoShot
0A9EF 8D 02 06                  	STA SoundEffectQueue1
0A9F2 A4 00                     	LDY byte_RAM_0
0A9F4 A9 20                     	LDA #Enemy_Fireball
0A9F6 99 90 00                  	STA ObjectType, Y
0A9F9 99 79 00                  	STA EnemyVariable, Y
0A9FC 99 B1 00                  	STA EnemyArray_B1, Y
0A9FF B5 29                     	LDA ObjectXLo, X
0AA01 E9 18                     	SBC #$18
0AA03 99 29 00                  	STA ObjectXLo, Y
0AA06 A5 05                     	LDA byte_RAM_5
0AA08 F0 08                     	BEQ EnemyBehavior_Tryclyde_GetFireAngle
0AA0A                           
0AA0A B5 33                     	LDA ObjectYLo, X
0AA0C 18                        	CLC
0AA0D 69 10                     	ADC #$10
0AA0F 99 33 00                  	STA ObjectYLo, Y
0AA12                           
0AA12                           EnemyBehavior_Tryclyde_GetFireAngle:
0AA12                           	; angle the fireball based on the player's position
0AA12 A5 28                     	LDA PlayerXLo
0AA14 4A                        	LSR A
0AA15 4A                        	LSR A
0AA16 4A                        	LSR A
0AA17 4A                        	LSR A
0AA18 29 0F                     	AND #$0F
0AA1A C9 0B                     	CMP #$0B
0AA1C 90 02                     	BCC EnemyBehavior_Tryclyde_SetFireVelocity
0AA1E                           
0AA1E A9 0B                     	LDA #$0B
0AA20                           
0AA20                           EnemyBehavior_Tryclyde_SetFireVelocity:
0AA20 AA                        	TAX ; These may be fireball speed pointers
0AA21 BD 87 A8                  	LDA TryclydeFireYVelocity, X
0AA24 99 47 00                  	STA ObjectYVelocity, Y
0AA27 BD 93 A8                  	LDA TryclydeFireXVelocity, X
0AA2A 99 3D 00                  	STA ObjectXVelocity, Y
0AA2D                           
0AA2D                           ;
0AA2D                           ; Sets enemy attributes to defaults, restores X, and exits
0AA2D                           ;
0AA2D                           ; Input
0AA2D                           ;   Y = enemy index
0AA2D                           ; Output
0AA2D                           ;   X = enemy index
0AA2D                           ;
0AA2D                           RenderSprite_Tryclyde_ResetAttributes:
0AA2D 98                        	TYA
0AA2E AA                        	TAX
0AA2F 20 B0 84                  	JSR SetEnemyAttributes
0AA32                           
0AA32 A6 12                     	LDX byte_RAM_12
0AA34                           
0AA34                           RenderSprite_Tryclyde_Exit:
0AA34 60                        	RTS
0AA35                           
0AA35                           
0AA35                           EnemyInit_Cobrats:
0AA35 20 CF 84                  	JSR EnemyInit_Basic
0AA38                           
0AA38 B5 33                     	LDA ObjectYLo, X
0AA3A 38                        	SEC
0AA3B E9 08                     	SBC #$08
0AA3D 95 79                     	STA EnemyVariable, X
0AA3F 60                        	RTS
0AA40                           
0AA40                           
0AA40                           ;
0AA40                           ; Cobrat (Ground)
0AA40                           ; ===============
0AA40                           ;
0AA40                           ; Bobs up and down until the player gets close, then jumps up, chases, and shoots bullets
0AA40                           ;
0AA40                           ; EnemyVariable = target y-position
0AA40                           ; EnemyArray_480 = flag that gets enabled when the player gets close
0AA40                           ; EnemyArray_477 = counter used to determine bobbing direction
0AA40                           ; ObjectAnimationTimer = counter used to determine how quickly Cobrat turns
0AA40                           ; EnemyArray_453 = counter used to determine when to fire a bullet
0AA40                           ;
0AA40                           EnemyBehavior_CobratGround:
0AA40 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
0AA43                           
0AA43 20 F7 9A                  	JSR EnemyBehavior_Check42FPhysicsInterrupt
0AA46                           
0AA46 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0AA49                           
0AA49 20 36 B5                  	JSR ObjectTileCollision
0AA4C                           
0AA4C BD 80 04                  	LDA EnemyArray_480, X
0AA4F D0 30                     	BNE EnemyBehavior_CobratGround_Jump
0AA51                           
0AA51 95 3D                     	STA ObjectXVelocity, X
0AA53 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
0AA56                           
0AA56 A5 0F                     	LDA byte_RAM_F
0AA58 69 40                     	ADC #$40
0AA5A C9 80                     	CMP #$80
0AA5C B0 09                     	BCS EnemyBehavior_CobratGround_Bob
0AA5E                           
0AA5E FE 80 04                  	INC EnemyArray_480, X
0AA61 A9 C0                     	LDA #$C0
0AA63 95 47                     	STA ObjectYVelocity, X
0AA65 D0 1A                     	BNE EnemyBehavior_CobratGround_Jump
0AA67                           
0AA67                           EnemyBehavior_CobratGround_Bob:
0AA67 FE 77 04                  	INC EnemyArray_477, X
0AA6A A0 FC                     	LDY #$FC
0AA6C BD 77 04                  	LDA EnemyArray_477, X
0AA6F 29 20                     	AND #$20
0AA71 F0 02                     	BEQ EnemyBehavior_CobratGround_BobMovement
0AA73                           
0AA73 A0 04                     	LDY #$04
0AA75                           
0AA75                           EnemyBehavior_CobratGround_BobMovement:
0AA75 94 47                     	STY ObjectYVelocity, X
0AA77 20 F0 A0                  	JSR ApplyObjectPhysicsY
0AA7A                           
0AA7A A9 61                     	LDA #ObjAttrib_16x32 | ObjAttrib_BehindBackground | ObjAttrib_Palette1
0AA7C 95 65                     	STA ObjectAttributes, X
0AA7E 4C 90 9D                  	JMP RenderSprite
0AA81                           
0AA81                           EnemyBehavior_CobratGround_Jump:
0AA81 B5 47                     	LDA ObjectYVelocity, X
0AA83 30 0F                     	BMI EnemyBehavior_CobratGround_Movement
0AA85                           
0AA85 B5 79                     	LDA EnemyVariable, X
0AA87 38                        	SEC
0AA88 E9 18                     	SBC #$18
0AA8A D5 33                     	CMP ObjectYLo, X
0AA8C B0 06                     	BCS EnemyBehavior_CobratGround_Movement
0AA8E                           
0AA8E 95 33                     	STA ObjectYLo, X
0AA90 A9 00                     	LDA #$00
0AA92 95 47                     	STA ObjectYVelocity, X
0AA94                           
0AA94                           EnemyBehavior_CobratGround_Movement:
0AA94 20 FC 85                  	JSR ApplyObjectMovement
0AA97                           
0AA97 F6 9F                     	INC ObjectAnimationTimer, X
0AA99 B5 9F                     	LDA ObjectAnimationTimer, X
0AA9B 48                        	PHA
0AA9C 29 3F                     	AND #$3F
0AA9E D0 03                     	BNE EnemyBehavior_CobratGround_AfterBasicMovement
0AAA0                           
0AAA0 20 0C 85                  	JSR EnemyInit_BasicMovementTowardPlayer
0AAA3                           
0AAA3                           EnemyBehavior_CobratGround_AfterBasicMovement:
0AAA3 68                        	PLA
0AAA4 D0 05                     	BNE EnemyBehavior_CobratGround_CheckCollision
0AAA6                           
0AAA6 A9 18                     	LDA #$18
0AAA8 9D 53 04                  	STA EnemyArray_453, X
0AAAB                           
0AAAB                           EnemyBehavior_CobratGround_CheckCollision:
0AAAB B5 5B                     	LDA EnemyCollision, X
0AAAD 29 03                     	AND #$03
0AAAF F0 03                     	BEQ EnemyBehavior_CobratGround_SetAttributes
0AAB1                           
0AAB1 20 56 A1                  	JSR EnemyBehavior_TurnAround
0AAB4                           
0AAB4                           EnemyBehavior_CobratGround_SetAttributes:
0AAB4 A9 41                     	LDA #ObjAttrib_16x32 | ObjAttrib_Palette1
0AAB6 B4 47                     	LDY ObjectYVelocity, X
0AAB8 10 02                     	BPL EnemyBehavior_CobratGround_Shoot
0AABA                           
0AABA A9 61                     	LDA #ObjAttrib_16x32 | ObjAttrib_BehindBackground | ObjAttrib_Palette1
0AABC                           
0AABC                           EnemyBehavior_CobratGround_Shoot:
0AABC 4C 41 AB                  	JMP EnemyBehavior_CobratJar_Shoot
0AABF                           
0AABF                           
0AABF                           ;
0AABF                           ; Cobrat (Jar)
0AABF                           ; ============
0AABF                           ;
0AABF                           ; Bobs up and down, then occasionally jumps up to shoot a bullet at the player
0AABF                           ;
0AABF                           ; EnemyVariable = target y-position
0AABF                           ; EnemyArray_B1 = flag that gets set when the Cobrat jumps
0AABF                           ; byte_RAM_10 = counter used to determine when to jump and fire
0AABF                           ; EnemyArray_453 = counter used to determine when to fire a bullet
0AABF                           ;
0AABF                           EnemyBehavior_CobratJar:
0AABF 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
0AAC2                           
0AAC2 20 F7 9A                  	JSR EnemyBehavior_Check42FPhysicsInterrupt
0AAC5                           
0AAC5 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0AAC8                           
0AAC8 20 36 B5                  	JSR ObjectTileCollision
0AACB                           
0AACB B5 5B                     	LDA EnemyCollision, X
0AACD 29 08                     	AND #CollisionFlags_Up
0AACF F0 05                     	BEQ EnemyBehavior_CobratJar_Uncorked
0AAD1                           
0AAD1                           EnemyBehavior_CobratJar_Corked:
0AAD1 B5 79                     	LDA EnemyVariable, X
0AAD3 95 33                     	STA ObjectYLo, X
0AAD5 60                        	RTS
0AAD6                           
0AAD6                           EnemyBehavior_CobratJar_Uncorked:
0AAD6 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
0AAD9                           
0AAD9 C8                        	INY
0AADA 94 6F                     	STY EnemyMovementDirection, X
0AADC                           
0AADC B5 B1                     	LDA EnemyArray_B1, X
0AADE D0 1F                     	BNE EnemyBehavior_CobratJar_Jump
0AAE0                           
0AAE0 B5 86                     	LDA EnemyTimer, X
0AAE2 D0 09                     	BNE EnemyBehavior_CobratJar_Bob
0AAE4                           
0AAE4 A9 D0                     	LDA #$D0
0AAE6 95 47                     	STA ObjectYVelocity, X
0AAE8 F6 B1                     	INC EnemyArray_B1, X
0AAEA 4C 3C AB                  	JMP EnemyBehavior_CobratJar_Movement
0AAED                           
0AAED                           EnemyBehavior_CobratJar_Bob:
0AAED A0 FC                     	LDY #$FC
0AAEF A5 10                     	LDA byte_RAM_10
0AAF1 29 20                     	AND #$20
0AAF3 F0 02                     	BEQ EnemyBehavior_CobratJar_BobMovement
0AAF5                           
0AAF5 A0 04                     	LDY #$04
0AAF7                           
0AAF7                           EnemyBehavior_CobratJar_BobMovement:
0AAF7 94 47                     	STY ObjectYVelocity, X
0AAF9 20 F0 A0                  	JSR ApplyObjectPhysicsY
0AAFC                           
0AAFC 4C 3F AB                  	JMP EnemyBehavior_CobratJar_SetAttributes
0AAFF                           
0AAFF                           EnemyBehavior_CobratJar_Jump:
0AAFF F6 9F                     	INC ObjectAnimationTimer, X
0AB01 B5 47                     	LDA ObjectYVelocity, X
0AB03 30 37                     	BMI EnemyBehavior_CobratJar_Movement
0AB05                           
0AB05 D0 05                     	BNE EnemyBehavior_CobratJar_CheckLanding
0AB07                           
0AB07 A9 10                     	LDA #$10
0AB09 9D 53 04                  	STA EnemyArray_453, X
0AB0C                           
0AB0C                           EnemyBehavior_CobratJar_CheckLanding:
0AB0C B5 47                     	LDA ObjectYVelocity, X
0AB0E 30 1C                     	BMI EnemyBehavior_CobratJar_CheckReset
0AB10                           
0AB10 B5 5B                     	LDA EnemyCollision, X
0AB12 29 04                     	AND #CollisionFlags_Down
0AB14 F0 16                     	BEQ EnemyBehavior_CobratJar_CheckReset
0AB16                           
0AB16 A5 0E                     	LDA byte_RAM_E
0AB18 38                        	SEC
0AB19 E9 6F                     	SBC #$6F
0AB1B C9 06                     	CMP #$06
0AB1D 90 0D                     	BCC EnemyBehavior_CobratJar_CheckReset
0AB1F                           
0AB1F                           EnemyBehavior_CobratJar_Blocked:
0AB1F A9 02                     	LDA #EnemyState_Dead
0AB21 95 51                     	STA EnemyState, X
0AB23 A9 E0                     	LDA #$E0
0AB25 95 47                     	STA ObjectYVelocity, X
0AB27 A9 40                     	LDA #DPCM_BossHurt
0AB29 8D 01 06                  	STA DPCMQueue
0AB2C                           
0AB2C                           EnemyBehavior_CobratJar_CheckReset:
0AB2C B5 79                     	LDA EnemyVariable, X
0AB2E D5 33                     	CMP ObjectYLo, X
0AB30 B0 0A                     	BCS EnemyBehavior_CobratJar_Movement
0AB32                           
0AB32 95 33                     	STA ObjectYLo, X
0AB34 A9 00                     	LDA #$00
0AB36 95 B1                     	STA EnemyArray_B1, X
0AB38 A9 A0                     	LDA #$A0
0AB3A 95 86                     	STA EnemyTimer, X
0AB3C                           
0AB3C                           EnemyBehavior_CobratJar_Movement:
0AB3C 20 04 86                  	JSR ApplyObjectMovement_Vertical
0AB3F                           
0AB3F                           EnemyBehavior_CobratJar_SetAttributes:
0AB3F A9 61                     	LDA #ObjAttrib_16x32 | ObjAttrib_BehindBackground | ObjAttrib_Palette1
0AB41                           
0AB41                           EnemyBehavior_CobratJar_Shoot:
0AB41 95 65                     	STA ObjectAttributes, X
0AB43 BD 53 04                  	LDA EnemyArray_453, X
0AB46 F0 0C                     	BEQ EnemyBehavior_CobratJar_Render
0AB48                           
0AB48 C9 05                     	CMP #$05
0AB4A D0 03                     	BNE EnemyBehavior_CobratJar_RenderShot
0AB4C                           
0AB4C 20 C9 97                  	JSR CreateBullet
0AB4F                           
0AB4F                           EnemyBehavior_CobratJar_RenderShot:
0AB4F A9 64                     	LDA #$64 ; firing bullet
0AB51 4C 28 9E                  	JMP RenderSprite_DrawObject
0AB54                           
0AB54                           EnemyBehavior_CobratJar_Render:
0AB54 4C 90 9D                  	JMP RenderSprite
0AB57                           
0AB57                           
0AB57                           EnemyInit_Pokey:
0AB57 20 CF 84                  	JSR EnemyInit_Basic
0AB5A                           
0AB5A A9 03                     	LDA #$03
0AB5C 95 79                     	STA EnemyVariable, X
0AB5E 60                        	RTS
0AB5F                           
0AB5F                           ; ---------------------------------------------------------------------------
0AB5F                           unk_BANK3_AA1C:
0AB5F 02                        	.db $02
0AB60 04                        	.db $04
0AB61 0D                        	.db $0D
0AB62 0E                        	.db $0E
0AB63                           ; ---------------------------------------------------------------------------
0AB63                           
0AB63                           EnemyBehavior_Pokey:
0AB63 B5 79                     	LDA EnemyVariable, X
0AB65 D0 09                     	BNE loc_BANK3_AA2D
0AB67                           
0AB67 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
0AB6A                           
0AB6A 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0AB6D                           
0AB6D 20 F7 9A                  	JSR EnemyBehavior_Check42FPhysicsInterrupt
0AB70                           
0AB70                           loc_BANK3_AA2D:
0AB70 B5 5B                     	LDA EnemyCollision, X
0AB72 29 10                     	AND #$10
0AB74 F0 07                     	BEQ loc_BANK3_AA3A
0AB76                           
0AB76 20 81 AB                  	JSR sub_BANK3_AA3E
0AB79                           
0AB79 FE 2F 04                  	INC EnemyArray_42F, X
0AB7C 60                        	RTS
0AB7D                           
0AB7D                           ; ---------------------------------------------------------------------------
0AB7D                           
0AB7D                           loc_BANK3_AA3A:
0AB7D B5 A8                     	LDA ObjectBeingCarriedTimer, X
0AB7F F0 5B                     	BEQ loc_BANK3_AA99
0AB81                           
0AB81                           ; =============== S U B R O U T I N E =======================================
0AB81                           
0AB81                           sub_BANK3_AA3E:
0AB81 B5 79                     	LDA EnemyVariable, X
0AB83 F0 57                     	BEQ loc_BANK3_AA99
0AB85                           
0AB85 9D 77 04                  	STA EnemyArray_477, X
0AB88 A9 00                     	LDA #$00
0AB8A 95 79                     	STA EnemyVariable, X
0AB8C A9 02                     	LDA #$02
0AB8E 9D 89 04                  	STA EnemyArray_489, X
0AB91 BD 41 04                  	LDA unk_RAM_441, X
0AB94 85 06                     	STA byte_RAM_6
0AB96 A9 FF                     	LDA #$FF
0AB98 9D 41 04                  	STA unk_RAM_441, X
0AB9B 20 82 94                  	JSR CreateEnemy
0AB9E                           
0AB9E 30 3C                     	BMI loc_BANK3_AA99
0ABA0                           
0ABA0 A4 00                     	LDY byte_RAM_0
0ABA2 A9 1A                     	LDA #Enemy_Pokey
0ABA4 99 90 00                  	STA ObjectType, Y
0ABA7 20 2D AA                  	JSR RenderSprite_Tryclyde_ResetAttributes
0ABAA                           
0ABAA A4 00                     	LDY byte_RAM_0
0ABAC A5 06                     	LDA byte_RAM_6
0ABAE 99 41 04                  	STA unk_RAM_441, Y
0ABB1 BD 77 04                  	LDA EnemyArray_477, X
0ABB4 38                        	SEC
0ABB5 E9 01                     	SBC #$01
0ABB7 99 79 00                  	STA EnemyVariable, Y
0ABBA A8                        	TAY
0ABBB                           
0ABBB                           loc_BANK3_AA78:
0ABBB B9 5F AB                  	LDA unk_BANK3_AA1C, Y
0ABBE A4 00                     	LDY byte_RAM_0
0ABC0 99 89 04                  	STA EnemyArray_489, Y
0ABC3 B5 29                     	LDA ObjectXLo, X
0ABC5 99 29 00                  	STA ObjectXLo, Y
0ABC8 B5 15                     	LDA ObjectXHi, X
0ABCA 99 15 00                  	STA ObjectXHi, Y
0ABCD B5 33                     	LDA ObjectYLo, X
0ABCF 18                        	CLC
0ABD0 69 10                     	ADC #$10
0ABD2 99 33 00                  	STA ObjectYLo, Y
0ABD5 B5 1F                     	LDA ObjectYHi, X
0ABD7 69 00                     	ADC #$00
0ABD9 99 1F 00                  	STA ObjectYHi, Y
0ABDC                           
0ABDC                           loc_BANK3_AA99:
0ABDC F6 9F                     	INC ObjectAnimationTimer, X
0ABDE B5 9F                     	LDA ObjectAnimationTimer, X
0ABE0 29 3F                     	AND #$3F
0ABE2 D0 03                     	BNE loc_BANK3_AAA4
0ABE4                           
0ABE4 20 0C 85                  	JSR EnemyInit_BasicMovementTowardPlayer
0ABE7                           
0ABE7                           loc_BANK3_AAA4:
0ABE7 20 F5 A0                  	JSR ApplyObjectPhysicsX
0ABEA                           
0ABEA 4C 90 9D                  	JMP RenderSprite
0ABED                           
0ABED                           ; End of function sub_BANK3_AA3E
0ABED                           
0ABED                           
0ABED                           PokeyWiggleOffset:
0ABED 00                        	.db $00
0ABEE 01                        	.db $01
0ABEF 00                        	.db $00
0ABF0 FF                        	.db $FF
0ABF1 00                        	.db $00
0ABF2 01                        	.db $01
0ABF3 00                        	.db $00
0ABF4                           
0ABF4                           
0ABF4                           RenderSprite_Pokey:
0ABF4 A0 00                     	LDY #$00
0ABF6 A5 EE                     	LDA byte_RAM_EE
0ABF8 D0 08                     	BNE RenderSprite_Pokey_Segments
0ABFA                           
0ABFA A5 10                     	LDA byte_RAM_10
0ABFC 29 18                     	AND #$18
0ABFE 4A                        	LSR A
0ABFF 4A                        	LSR A
0AC00 4A                        	LSR A
0AC01 A8                        	TAY
0AC02                           
0AC02                           RenderSprite_Pokey_Segments:
0AC02 84 07                     	STY byte_RAM_7
0AC04 AD 29 04                  	LDA SpriteTempScreenX
0AC07 8D FD 04                  	STA PokeyTempScreenX
0AC0A 18                        	CLC
0AC0B 79 ED AB                  	ADC PokeyWiggleOffset, Y
0AC0E 8D 29 04                  	STA SpriteTempScreenX
0AC11 20 1C 9E                  	JSR RenderSprite_NotAlbatoss
0AC14                           
0AC14 B5 79                     	LDA EnemyVariable, X
0AC16 85 09                     	STA byte_RAM_9
0AC18 F0 3F                     	BEQ RenderSprite_Pokey_Exit
0AC1A                           
0AC1A 98                        	TYA
0AC1B 18                        	CLC
0AC1C 69 10                     	ADC #$10
0AC1E A8                        	TAY
0AC1F A6 07                     	LDX byte_RAM_7
0AC21 AD FD 04                  	LDA PokeyTempScreenX
0AC24 7D EE AB                  	ADC PokeyWiggleOffset + 1, X
0AC27 85 01                     	STA byte_RAM_1
0AC29 A2 70                     	LDX #$70
0AC2B 20 61 9F                  	JSR SetSpriteTiles
0AC2E                           
0AC2E C6 09                     	DEC byte_RAM_9
0AC30 F0 27                     	BEQ RenderSprite_Pokey_Exit
0AC32                           
0AC32 20 2F FC                  	JSR loc_BANKF_FAFE
0AC35                           
0AC35 A6 07                     	LDX byte_RAM_7
0AC37 AD FD 04                  	LDA PokeyTempScreenX
0AC3A 18                        	CLC
0AC3B 7D EF AB                  	ADC PokeyWiggleOffset + 2, X
0AC3E 85 01                     	STA byte_RAM_1
0AC40 A2 70                     	LDX #$70
0AC42 20 61 9F                  	JSR SetSpriteTiles
0AC45                           
0AC45 C6 09                     	DEC byte_RAM_9
0AC47 F0 10                     	BEQ RenderSprite_Pokey_Exit
0AC49                           
0AC49 A6 07                     	LDX byte_RAM_7
0AC4B AD FD 04                  	LDA PokeyTempScreenX
0AC4E 18                        	CLC
0AC4F 7D F0 AB                  	ADC PokeyWiggleOffset + 3, X
0AC52 85 01                     	STA byte_RAM_1
0AC54 A2 70                     	LDX #$70
0AC56 20 61 9F                  	JSR SetSpriteTiles
0AC59                           
0AC59                           RenderSprite_Pokey_Exit:
0AC59 A6 12                     	LDX byte_RAM_12
0AC5B 60                        	RTS
0AC5C                           
0AC5C                           
0AC5C                           EnemyBehavior_Rocket:
0AC5C B5 B1                     	LDA EnemyArray_B1, X
0AC5E D0 03                     	BNE EnemyBehavior_Rocket_Flying
0AC60 4C 14 AD                  	JMP EnemyBehavior_Rocket_Launching
0AC63                           
0AC63                           EnemyBehavior_Rocket_Flying:
0AC63 A0 03                     	LDY #$03
0AC65 B5 47                     	LDA ObjectYVelocity, X
0AC67 F0 04                     	BEQ EnemyBehavior_Rocket_Slow
0AC69                           
0AC69 C9 FD                     	CMP #$FD
0AC6B 90 11                     	BCC EnemyBehavior_Rocket_Fast
0AC6D                           
0AC6D                           EnemyBehavior_Rocket_Slow:
0AC6D A0 3F                     	LDY #$3F
0AC6F EE 29 04                  	INC SpriteTempScreenX
0AC72 A5 10                     	LDA byte_RAM_10
0AC74 29 02                     	AND #$02
0AC76 D0 06                     	BNE EnemyBehavior_Rocket_Fast
0AC78                           
0AC78 CE 29 04                  	DEC SpriteTempScreenX
0AC7B CE 29 04                  	DEC SpriteTempScreenX
0AC7E                           
0AC7E                           EnemyBehavior_Rocket_Fast:
0AC7E 98                        	TYA
0AC7F 25 10                     	AND byte_RAM_10
0AC81 D0 02                     	BNE EnemyBehavior_Rocket_ApplyPhysics
0AC83                           
0AC83 D6 47                     	DEC ObjectYVelocity, X
0AC85                           
0AC85                           EnemyBehavior_Rocket_ApplyPhysics:
0AC85 20 F0 A0                  	JSR ApplyObjectPhysicsY
0AC88                           
0AC88 BD 77 04                  	LDA EnemyArray_477, X
0AC8B D0 1D                     	BNE EnemyBehavior_Rocket_DroppingOff
0AC8D                           
0AC8D B4 1F                     	LDY ObjectYHi, X
0AC8F 10 34                     	BPL EnemyBehavior_Rocket_Render
0AC91                           
0AC91 20 66 FA                  	JSR DoAreaReset
0AC94                           
0AC94 A9 38                     	LDA #Enemy_Rocket
0AC96 8D AF 04                  	STA ObjectCarriedOver
0AC99 EE 27 06                  	INC DoAreaTransition
0AC9C A9 05                     	LDA #TransitionType_Rocket
0AC9E 8D 34 05                  	STA TransitionType
0ACA1 A9 00                     	LDA #$00
0ACA3                           	STA_abs PlayerState
0ACA3                           	IFDEF COMPATIBILITY
0ACA3 8D                        		.db $8d
0ACA4 50 00                     		.dw PlayerState
0ACA6                           	ELSE
0ACA6                           		STA PlayerState
0ACA6                           		NOP_compat
0ACA6                           	ENDIF
0ACA6                           IFDEF PLAYER_STUFF
0ACA6 4C 7C E8                      JMP SetGameModeBonusChanceCustom
0ACA9                           ENDIF
0ACA9                           
0ACA9 60                        	RTS
0ACAA                           
0ACAA                           EnemyBehavior_Rocket_DroppingOff:
0ACAA B5 33                     	LDA ObjectYLo, X
0ACAC C9 30                     	CMP #$30
0ACAE B0 15                     	BCS EnemyBehavior_Rocket_Render
0ACB0                           
0ACB0 AC C7 04                  	LDY PlayerInRocket
0ACB3 D0 07                     	BNE EnemyBehavior_Rocket_DropPlayer
0ACB5                           
0ACB5 C9 18                     	CMP #$18
0ACB7 B0 0C                     	BCS EnemyBehavior_Rocket_Render
0ACB9                           
0ACB9 4C 84 92                  	JMP EnemyBehavior_Bomb_Explode
0ACBC                           
0ACBC                           EnemyBehavior_Rocket_DropPlayer:
0ACBC A9 00                     	LDA #$00
0ACBE 8D C7 04                  	STA PlayerInRocket
0ACC1 85 9C                     	STA HoldingItem
0ACC3 85 3C                     	STA PlayerXVelocity
0ACC5                           IFNDEF PLAYER_STUFF
0ACC5                           	LDA ObjectYLo, X
0ACC5                           	ADC #$20
0ACC5                           	STA PlayerYLo
0ACC5                           	STA PlayerScreenYLo
0ACC5                           ENDIF
0ACC5                           
0ACC5                           EnemyBehavior_Rocket_Render:
0ACC5 20 2B AD                  	JSR RenderSprite_Rocket
0ACC8                           
0ACC8 AD 29 04                  	LDA SpriteTempScreenX
0ACCB 38                        	SEC
0ACCC E9 04                     	SBC #$04
0ACCE 8D 93 02                  	STA SpriteDMAArea + $93
0ACD1 69 07                     	ADC #$07
0ACD3 8D 97 02                  	STA SpriteDMAArea + $97
0ACD6 69 08                     	ADC #$08
0ACD8 8D 9B 02                  	STA SpriteDMAArea + $9B
0ACDB                           
0ACDB A9 20                     	LDA #$20 ; long trail
0ACDD B4 47                     	LDY ObjectYVelocity, X
0ACDF C0 FD                     	CPY #$FD
0ACE1 30 02                     	BMI EnemyBehavior_Rocket_RenderTrails
0ACE3                           
0ACE3 A9 15                     	LDA #$15 ; short trail
0ACE5                           
0ACE5                           EnemyBehavior_Rocket_RenderTrails:
0ACE5 6D 2C 04                  	ADC SpriteTempScreenY
0ACE8 8D 90 02                  	STA SpriteDMAArea + $90
0ACEB 8D 94 02                  	STA SpriteDMAArea + $94
0ACEE 8D 98 02                  	STA SpriteDMAArea + $98
0ACF1 A9 8C                     	LDA #$8C
0ACF3 8D 91 02                  	STA SpriteDMAArea + $91
0ACF6 8D 95 02                  	STA SpriteDMAArea + $95
0ACF9 8D 99 02                  	STA SpriteDMAArea + $99
0ACFC A5 10                     	LDA byte_RAM_10
0ACFE 4A                        	LSR A
0ACFF 29 03                     	AND #$03
0AD01 85 00                     	STA byte_RAM_0
0AD03 4A                        	LSR A
0AD04 6A                        	ROR A
0AD05 6A                        	ROR A
0AD06 29 C0                     	AND #$C0
0AD08 05 00                     	ORA byte_RAM_0
0AD0A 8D 92 02                  	STA SpriteDMAArea + $92
0AD0D 8D 96 02                  	STA SpriteDMAArea + $96
0AD10 8D 9A 02                  	STA SpriteDMAArea + $9A
0AD13 60                        	RTS
0AD14                           
0AD14                           EnemyBehavior_Rocket_Launching:
0AD14                           	; Wait until ObjectBeingCarriedTimer reaches 1 to start the boosters
0AD14 B5 A8                     	LDA ObjectBeingCarriedTimer, X
0AD16 C9 01                     	CMP #$01
0AD18 D0 0E                     	BNE EnemyBehavior_Rocket_Carry
0AD1A                           
0AD1A                           	; Setting EnemyArray_B1 puts the rocket in the area
0AD1A 95 B1                     	STA EnemyArray_B1, X
0AD1C 8D C7 04                  	STA PlayerInRocket
0AD1F A9 02                     	LDA #SoundEffect3_Rumble_A
0AD21 8D 05 06                  	STA SoundEffectQueue3
0AD24 A9 FE                     	LDA #$FE
0AD26 95 47                     	STA ObjectYVelocity, X
0AD28                           
0AD28                           EnemyBehavior_Rocket_Carry:
0AD28 20 ED 97                  	JSR CarryObject
0AD2B                           
0AD2B                           RenderSprite_Rocket:
0AD2B AD 2C 04                  	LDA SpriteTempScreenY
0AD2E 85 00                     	STA byte_RAM_0
0AD30 AD 29 04                  	LDA SpriteTempScreenX
0AD33 38                        	SEC
0AD34 E9 08                     	SBC #$08
0AD36 85 01                     	STA byte_RAM_1
0AD38 A9 02                     	LDA #$02
0AD3A 85 02                     	STA byte_RAM_2
0AD3C 85 05                     	STA byte_RAM_5
0AD3E 85 0C                     	STA byte_RAM_C
0AD40 B5 65                     	LDA ObjectAttributes, X
0AD42 29 23                     	AND #$23
0AD44 85 03                     	STA byte_RAM_3
0AD46 A0 00                     	LDY #$00
0AD48 A2 96                     	LDX #$96
0AD4A 20 C8 9E                  	JSR loc_BANK2_9C53
0AD4D                           
0AD4D A5 01                     	LDA byte_RAM_1
0AD4F 18                        	CLC
0AD50 69 10                     	ADC #$10
0AD52 85 01                     	STA byte_RAM_1
0AD54 C6 02                     	DEC byte_RAM_2
0AD56 AD 2C 04                  	LDA SpriteTempScreenY
0AD59 85 00                     	STA byte_RAM_0
0AD5B A0 10                     	LDY #$10
0AD5D A2 96                     	LDX #$96
0AD5F 4C C8 9E                  	JMP loc_BANK2_9C53
0AD62                           
0AD62                           
0AD62                           ; ---------------------------------------------------------------------------
0AD62                           byte_BANK3_AC25:
0AD62 F0                        	.db $F0
0AD63                           
0AD63                           byte_BANK3_AC26:
0AD63 00                        	.db $00
0AD64 F0                        	.db $F0
0AD65                           
0AD65                           
0AD65                           ; =============== S U B R O U T I N E =======================================
0AD65                           
0AD65                           RenderSprite_Fryguy:
0AD65 A9 00                     	LDA #$00
0AD67 85 EE                     	STA byte_RAM_EE
0AD69 B5 9F                     	LDA ObjectAnimationTimer, X
0AD6B 29 08                     	AND #$08
0AD6D 4A                        	LSR A
0AD6E 4A                        	LSR A
0AD6F 4A                        	LSR A
0AD70 85 07                     	STA byte_RAM_7
0AD72 A4 07                     	LDY byte_RAM_7
0AD74 AD 29 04                  	LDA SpriteTempScreenX
0AD77 48                        	PHA
0AD78 18                        	CLC
0AD79 79 62 AD                  	ADC byte_BANK3_AC25, Y
0AD7C 8D 29 04                  	STA SpriteTempScreenX
0AD7F A9 80                     	LDA #$80
0AD81 BC 5C 04                  	LDY EnemyArray_45C, X
0AD84 F0 02                     	BEQ loc_BANK3_AC4B
0AD86                           
0AD86 A9 88                     	LDA #$88
0AD88                           
0AD88                           loc_BANK3_AC4B:
0AD88 20 28 9E                  	JSR RenderSprite_DrawObject
0AD8B                           
0AD8B 20 2F FC                  	JSR loc_BANKF_FAFE
0AD8E                           
0AD8E                           	STY_abs byte_RAM_F4
0AD8E                           	IFDEF COMPATIBILITY
0AD8E 8C                        		.db $8c
0AD8F F4 00                     		.dw byte_RAM_F4
0AD91                           	ELSE
0AD91                           		STY byte_RAM_F4
0AD91                           		NOP_compat
0AD91                           	ENDIF
0AD91 68                        	PLA
0AD92 18                        	CLC
0AD93 A4 07                     	LDY byte_RAM_7
0AD95 79 63 AD                  	ADC byte_BANK3_AC26, Y
0AD98 8D 29 04                  	STA SpriteTempScreenX
0AD9B A9 84                     	LDA #$84
0AD9D BC 5C 04                  	LDY EnemyArray_45C, X
0ADA0 F0 02                     	BEQ loc_BANK3_AC67
0ADA2                           
0ADA2 A9 8C                     	LDA #$8C
0ADA4                           
0ADA4                           loc_BANK3_AC67:
0ADA4 4C 28 9E                  	JMP RenderSprite_DrawObject
0ADA7                           
0ADA7                           
0ADA7                           ; ---------------------------------------------------------------------------
0ADA7                           
0ADA7                           EnemyInit_Fryguy:
0ADA7 20 CF 84                  	JSR EnemyInit_Basic
0ADAA                           
0ADAA                           IFDEF PLAYER_STUFF
0ADAA B5 90                         LDA ObjectType, X
0ADAC C9 2B                         CMP #Enemy_FryguySplit
0ADAE D0 01                         BNE +
0ADB0 60                            RTS
0ADB1                           +
0ADB1                           ENDIF
0ADB1 A9 04                     	LDA #$04
0ADB3 9D 65 04                  	STA EnemyHP, X
0ADB6                           IFDEF PLAYER_STUFF
0ADB6 20 BE AD                      JSR Set_CustomBossHp
0ADB9                           ENDIF
0ADB9 A9 00                     	LDA #$00
0ADBB 95 79                     	STA EnemyVariable, X
0ADBD 60                        	RTS
0ADBE                           
0ADBE                           IFDEF PLAYER_STUFF
0ADBE                           Set_CustomBossHp:
0ADBE AD F6 76                      LDA Boss_HP
0ADC1 F0 03                         BEQ +
0ADC3 9D 65 04                      STA EnemyHP, X
0ADC6 60                        +   RTS
0ADC7                           ENDIF
0ADC7                           
0ADC7                           ; ---------------------------------------------------------------------------
0ADC7                           byte_BANK3_AC77:
0ADC7 E0                        	.db $E0
0ADC8 20                        	.db $20
0ADC9 F0                        	.db $F0
0ADCA 10                        	.db $10
0ADCB                           
0ADCB                           byte_BANK3_AC7B:
0ADCB 04                        	.db $04
0ADCC 0C                        	.db $0C
0ADCD 04                        	.db $04
0ADCE 0C                        	.db $0C
0ADCF                           
0ADCF                           byte_BANK3_AC7F:
0ADCF 04                        	.db $04
0ADD0 04                        	.db $04
0ADD1 0C                        	.db $0C
0ADD2 0C                        	.db $0C
0ADD3                           
0ADD3                           byte_BANK3_AC83:
0ADD3 01                        	.db $01
0ADD4 FF                        	.db $FF
0ADD5                           
0ADD5                           byte_BANK3_AC85:
0ADD5 2A                        	.db $2A
0ADD6 D6                        	.db $D6
0ADD7                           
0ADD7                           byte_BANK3_AC87:
0ADD7 01                        	.db $01
0ADD8 FF                        	.db $FF
0ADD9                           
0ADD9                           byte_BANK3_AC89:
0ADD9 18                        	.db $18
0ADDA E8                        	.db $E8
0ADDB                           ; ---------------------------------------------------------------------------
0ADDB                           
0ADDB                           EnemyBehavior_Fryguy:
0ADDB A9 02                     	LDA #$02
0ADDD 95 6F                     	STA EnemyMovementDirection, X
0ADDF F6 9F                     	INC ObjectAnimationTimer, X
0ADE1 BC 65 04                  	LDY EnemyHP, X
0ADE4 88                        	DEY
0ADE5 D0 5D                     	BNE loc_BANK3_ACE7
0ADE7                           
0ADE7                           NumberFryguySplit:
0ADE7 A9 03                     	LDA #$03
0ADE9 85 09                     	STA byte_RAM_9
0ADEB 8D F8 04                  	STA FryguySplitFlames
0ADEE                           IFDEF PLAYER_STUFF
0ADEE EE F8 04                      INC FryguySplitFlames
0ADF1 BD 9B 04                  	LDA unk_RAM_49B, X
0ADF4 D0 05                         BNE +
0ADF6 A9 00                         LDA #$0
0ADF8 8D F8 04                      STA FryguySplitFlames
0ADFB                           +
0ADFB                           ENDIF
0ADFB 20 39 8A                  	JSR EnemyDestroy
0ADFE                           
0ADFE                           loc_BANK3_ACA1:
0ADFE 20 82 94                  	JSR CreateEnemy
0AE01                           
0AE01 30 3D                     	BMI loc_BANK3_ACE3
0AE03                           
0AE03 A4 00                     	LDY byte_RAM_0
0AE05 B5 1F                     	LDA ObjectYHi, X
0AE07 99 EF 04                  	STA unk_RAM_4EF, Y
0AE0A A9 F0                     	LDA #$F0
0AE0C 99 47 00                  	STA ObjectYVelocity, Y
0AE0F A9 2B                     	LDA #Enemy_FryguySplit
0AE11 99 90 00                  	STA ObjectType, Y
0AE14 A9 30                     	LDA #$30
0AE16 99 53 04                  	STA EnemyArray_453, Y
0AE19 B5 33                     	LDA ObjectYLo, X
0AE1B 48                        	PHA
0AE1C A6 09                     	LDX byte_RAM_9
0AE1E BD C7 AD                  	LDA byte_BANK3_AC77, X
0AE21 99 3D 00                  	STA ObjectXVelocity, Y
0AE24 AD 29 04                  	LDA SpriteTempScreenX
0AE27 7D CB AD                  	ADC byte_BANK3_AC7B, X
0AE2A 99 29 00                  	STA ObjectXLo, Y
0AE2D 68                        	PLA
0AE2E 7D CF AD                  	ADC byte_BANK3_AC7F, X
0AE31 99 33 00                  	STA ObjectYLo, Y
0AE34 A9 00                     	LDA #$00
0AE36 99 15 00                  	STA ObjectXHi, Y
0AE39 98                        	TYA
0AE3A AA                        	TAX
0AE3B 20 B0 84                  	JSR SetEnemyAttributes
0AE3E                           
0AE3E A6 12                     	LDX byte_RAM_12
0AE40                           
0AE40                           loc_BANK3_ACE3:
0AE40 C6 09                     	DEC byte_RAM_9
0AE42 10 BA                     	BPL loc_BANK3_ACA1
0AE44                           
0AE44                           loc_BANK3_ACE7:
0AE44 A5 10                     	LDA byte_RAM_10
0AE46 29 1F                     	AND #$1F
0AE48 D0 1A                     	BNE loc_BANK3_AD07
0AE4A                           
0AE4A 20 82 94                  	JSR CreateEnemy
0AE4D                           
0AE4D A6 00                     	LDX byte_RAM_0
0AE4F A9 20                     	LDA #Enemy_Fireball
0AE51 95 90                     	STA ObjectType, X
0AE53 B5 29                     	LDA ObjectXLo, X
0AE55 E9 08                     	SBC #$08
0AE57 95 29                     	STA ObjectXLo, X
0AE59 B5 33                     	LDA ObjectYLo, X
0AE5B 69 18                     	ADC #$18
0AE5D 95 33                     	STA ObjectYLo, X
0AE5F 20 09 85                  	JSR EnemyInit_BasicAttributes
0AE62                           
0AE62 A6 12                     	LDX byte_RAM_12
0AE64                           
0AE64                           loc_BANK3_AD07:
0AE64 A5 10                     	LDA byte_RAM_10
0AE66 29 01                     	AND #$01
0AE68 D0 2A                     	BNE loc_BANK3_AD37
0AE6A                           
0AE6A B5 79                     	LDA EnemyVariable, X
0AE6C 29 01                     	AND #$01
0AE6E A8                        	TAY
0AE6F B5 47                     	LDA ObjectYVelocity, X
0AE71 18                        	CLC
0AE72 79 D7 AD                  	ADC byte_BANK3_AC87, Y
0AE75 95 47                     	STA ObjectYVelocity, X
0AE77 D9 D9 AD                  	CMP byte_BANK3_AC89, Y
0AE7A D0 02                     	BNE loc_BANK3_AD21
0AE7C                           
0AE7C F6 79                     	INC EnemyVariable, X
0AE7E                           
0AE7E                           loc_BANK3_AD21:
0AE7E BD 77 04                  	LDA EnemyArray_477, X
0AE81 29 01                     	AND #$01
0AE83 A8                        	TAY
0AE84 B5 3D                     	LDA ObjectXVelocity, X
0AE86 18                        	CLC
0AE87 79 D3 AD                  	ADC byte_BANK3_AC83, Y
0AE8A 95 3D                     	STA ObjectXVelocity, X
0AE8C D9 D5 AD                  	CMP byte_BANK3_AC85, Y
0AE8F D0 03                     	BNE loc_BANK3_AD37
0AE91                           
0AE91 FE 77 04                  	INC EnemyArray_477, X
0AE94                           
0AE94                           loc_BANK3_AD37:
0AE94 20 65 AD                  	JSR RenderSprite_Fryguy
0AE97                           
0AE97 20 F0 A0                  	JSR ApplyObjectPhysicsY
0AE9A                           
0AE9A 4C F5 A0                  	JMP ApplyObjectPhysicsX
0AE9D                           
0AE9D                           ; ---------------------------------------------------------------------------
0AE9D                           unk_BANK3_AD40:
0AE9D 3F                        	.db $3F
0AE9E 3F                        	.db $3F
0AE9F 3F                        	.db $3F
0AEA0 7F                        	.db $7F
0AEA1                           unk_BANK3_AD44:
0AEA1 D4                        	.db $D4
0AEA2 D8                        	.db $D8
0AEA3 DA                        	.db $DA
0AEA4 DE                        	.db $DE
0AEA5                           ; ---------------------------------------------------------------------------
0AEA5                           
0AEA5                           EnemyBehavior_FryguySplit:
0AEA5 B5 5B                     	LDA EnemyCollision, X
0AEA7 29 10                     	AND #$10
0AEA9 F0 0D                     	BEQ loc_BANK3_AD59
0AEAB                           
0AEAB 20 99 BB                  	JSR PlayBossHurtSound
0AEAE                           
0AEAE A9 00                     	LDA #%00000000
0AEB0                           IFDEF PLAYER_STUFF
0AEB0 09 80                         ORA #$80
0AEB2 9D 6E 04                  	STA EnemyArray_46E, X
0AEB5                           ;	LDA unk_RAM_49B, X
0AEB5                           ;   BEQ +
0AEB5                           ;	RTS
0AEB5                           ;+
0AEB5 4C 27 93                  	JMP TurnIntoPuffOfSmoke_Proper
0AEB8                           ENDIF
0AEB8                           IFNDEF PLAYER_STUFF
0AEB8                           	STA EnemyArray_46E, X
0AEB8                           	JMP TurnIntoPuffOfSmoke
0AEB8                           ENDIF
0AEB8                           
0AEB8                           ; ---------------------------------------------------------------------------
0AEB8                           
0AEB8                           loc_BANK3_AD59:
0AEB8 A9 02                     	LDA #$02
0AEBA 95 6F                     	STA EnemyMovementDirection, X
0AEBC A5 10                     	LDA byte_RAM_10
0AEBE 9D 4A 04                  	STA ObjectShakeTimer, X
0AEC1 F6 9F                     	INC ObjectAnimationTimer, X
0AEC3 F6 9F                     	INC ObjectAnimationTimer, X
0AEC5 20 36 B5                  	JSR ObjectTileCollision
0AEC8                           
0AEC8 20 90 9D                  	JSR RenderSprite
0AECB                           
0AECB B5 5B                     	LDA EnemyCollision, X
0AECD 48                        	PHA
0AECE 29 04                     	AND #CollisionFlags_Down
0AED0 F0 07                     	BEQ loc_BANK3_AD7A
0AED2                           
0AED2 20 AC 97                  	JSR ResetObjectYVelocity
0AED5                           
0AED5 A9 00                     	LDA #$00
0AED7 95 3D                     	STA ObjectXVelocity, X
0AED9                           
0AED9                           loc_BANK3_AD7A:
0AED9 68                        	PLA
0AEDA 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
0AEDC F0 06                     	BEQ loc_BANK3_AD85
0AEDE                           
0AEDE 20 56 A1                  	JSR EnemyBehavior_TurnAround
0AEE1                           
0AEE1 20 80 97                  	JSR HalfObjectVelocityX
0AEE4                           
0AEE4                           loc_BANK3_AD85:
0AEE4 8A                        	TXA
0AEE5 0A                        	ASL A
0AEE6 0A                        	ASL A
0AEE7 0A                        	ASL A
0AEE8 65 10                     	ADC byte_RAM_10
0AEEA AC F8 04                  	LDY FryguySplitFlames
0AEED 39 9D AE                  	AND unk_BANK3_AD40, Y
0AEF0 15 47                     	ORA ObjectYVelocity, X
0AEF2 D0 16                     	BNE loc_BANK3_ADAB
0AEF4                           
0AEF4 AD AE 05                  	LDA PseudoRNGValues + 2
0AEF7 29 1F                     	AND #$1F
0AEF9 19 A1 AE                  	ORA unk_BANK3_AD44, Y
0AEFC 95 47                     	STA ObjectYVelocity, X
0AEFE 20 0C 85                  	JSR EnemyInit_BasicMovementTowardPlayer
0AF01                           
0AF01 AD F8 04                  	LDA FryguySplitFlames
0AF04 C9 02                     	CMP #$02
0AF06 B0 02                     	BCS loc_BANK3_ADAB
0AF08                           
0AF08 16 3D                     	ASL ObjectXVelocity, X
0AF0A                           
0AF0A                           loc_BANK3_ADAB:
0AF0A                           IFDEF REV_A
0AF0A A5 50                     	LDA PlayerState
0AF0C C9 08                     	CMP #PlayerState_ChangingSize
0AF0E F0 06                     	BEQ +
0AF10                           ENDIF
0AF10                           
0AF10 20 F5 A0                  	JSR ApplyObjectPhysicsX
0AF13                           
0AF13 4C 04 86                  	JMP ApplyObjectMovement_Vertical
0AF16                           
0AF16                           IFDEF REV_A
0AF16 60                        	+ RTS
0AF17                           ENDIF
0AF17                           
0AF17                           ; ---------------------------------------------------------------------------
0AF17                           
0AF17                           EnemyBehavior_Autobomb:
0AF17 B5 B1                     	LDA EnemyArray_B1, X
0AF19 D0 44                     	BNE loc_BANK3_ADF9
0AF1B                           
0AF1B B5 5B                     	LDA EnemyCollision, X
0AF1D 29 10                     	AND #$10
0AF1F 15 A8                     	ORA ObjectBeingCarriedTimer, X
0AF21 F0 3C                     	BEQ loc_BANK3_ADF9
0AF23                           
0AF23 A9 01                     	LDA #Enemy_ShyguyRed
0AF25 95 90                     	STA ObjectType, X
0AF27 20 B0 84                  	JSR SetEnemyAttributes
0AF2A                           
0AF2A BD 41 04                  	LDA unk_RAM_441, X
0AF2D 85 06                     	STA byte_RAM_6
0AF2F A9 FF                     	LDA #$FF
0AF31 9D 41 04                  	STA unk_RAM_441, X
0AF34 20 82 94                  	JSR CreateEnemy
0AF37                           
0AF37 30 26                     	BMI loc_BANK3_ADF9
0AF39                           
0AF39 A4 00                     	LDY byte_RAM_0
0AF3B A5 06                     	LDA byte_RAM_6
0AF3D 99 41 04                  	STA unk_RAM_441, Y
0AF40 B5 29                     	LDA ObjectXLo, X
0AF42 99 29 00                  	STA ObjectXLo, Y
0AF45 B5 15                     	LDA ObjectXHi, X
0AF47 99 15 00                  	STA ObjectXHi, Y
0AF4A A6 00                     	LDX byte_RAM_0
0AF4C A9 26                     	LDA #Enemy_Autobomb
0AF4E 95 90                     	STA ObjectType, X
0AF50 20 09 85                  	JSR EnemyInit_BasicAttributes
0AF53                           
0AF53 F6 B1                     	INC EnemyArray_B1, X
0AF55 20 B0 84                  	JSR SetEnemyAttributes
0AF58                           
0AF58 A9 04                     	LDA #$04
0AF5A 9D 89 04                  	STA EnemyArray_489, X
0AF5D A6 12                     	LDX byte_RAM_12
0AF5F                           
0AF5F                           loc_BANK3_ADF9:
0AF5F 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
0AF62                           
0AF62 20 36 B5                  	JSR ObjectTileCollision
0AF65                           
0AF65 B5 5B                     	LDA EnemyCollision, X
0AF67 48                        	PHA
0AF68 29 04                     	AND #CollisionFlags_Down
0AF6A F0 03                     	BEQ loc_BANK3_AE09
0AF6C                           
0AF6C 20 AC 97                  	JSR ResetObjectYVelocity
0AF6F                           
0AF6F                           loc_BANK3_AE09:
0AF6F 68                        	PLA
0AF70 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
0AF72 F0 06                     	BEQ loc_BANK3_AE14
0AF74                           
0AF74 20 56 A1                  	JSR EnemyBehavior_TurnAround
0AF77                           
0AF77 20 F5 A0                  	JSR ApplyObjectPhysicsX
0AF7A                           
0AF7A                           loc_BANK3_AE14:
0AF7A F6 9F                     	INC ObjectAnimationTimer, X
0AF7C B5 B1                     	LDA EnemyArray_B1, X
0AF7E D0 2B                     	BNE loc_BANK3_AE45
0AF80                           
0AF80 8A                        	TXA
0AF81 0A                        	ASL A
0AF82 0A                        	ASL A
0AF83 0A                        	ASL A
0AF84 0A                        	ASL A
0AF85 65 10                     	ADC byte_RAM_10
0AF87 29 7F                     	AND #$7F
0AF89 D0 03                     	BNE loc_BANK3_AE28
0AF8B                           
0AF8B 20 0C 85                  	JSR EnemyInit_BasicMovementTowardPlayer
0AF8E                           
0AF8E                           loc_BANK3_AE28:
0AF8E B5 9F                     	LDA ObjectAnimationTimer, X
0AF90 29 7F                     	AND #%01111111
0AF92 D0 17                     	BNE loc_BANK3_AE45
0AF94                           
0AF94 20 0C 85                  	JSR EnemyInit_BasicMovementTowardPlayer
0AF97                           
0AF97                           	; which bullet?
0AF97 20 C9 97                  	JSR CreateBullet
0AF9A                           
0AF9A 30 0F                     	BMI loc_BANK3_AE45
0AF9C                           
0AF9C A6 00                     	LDX byte_RAM_0 ; X has the new enemy index
0AF9E A9 27                     	LDA #Enemy_AutobombFire
0AFA0                           	; Set the enemy type and attributes
0AFA0                           	; BUG: The subroutine overwrites RAM_0 (enemy index)
0AFA0                           	; Should have pushed it to stack instead.
0AFA0 20 58 91                  	JSR EnemyBehavior_SpitProjectile
0AFA3                           
0AFA3 A6 00                     	LDX byte_RAM_0
0AFA5 D6 33                     	DEC ObjectYLo, X
0AFA7 D6 33                     	DEC ObjectYLo, X
0AFA9 A6 12                     	LDX byte_RAM_12
0AFAB                           
0AFAB                           loc_BANK3_AE45:
0AFAB 20 FC 85                  	JSR ApplyObjectMovement
0AFAE                           
0AFAE 4C 90 9D                  	JMP RenderSprite
0AFB1                           
0AFB1                           ; ---------------------------------------------------------------------------
0AFB1                           
0AFB1                           RenderSprite_Autobomb:
0AFB1 B5 51                     	LDA EnemyState, X
0AFB3 C9 01                     	CMP #EnemyState_Alive
0AFB5 F0 0B                     	BEQ loc_BANK3_AE5C
0AFB7                           
0AFB7 A9 C1                     	LDA #ObjAttrib_Palette1 | ObjAttrib_16x32 | ObjAttrib_UpsideDown
0AFB9 95 65                     	STA ObjectAttributes, X
0AFBB 95 9F                     	STA ObjectAnimationTimer, X
0AFBD A9 76                     	LDA #$76
0AFBF 4C 28 9E                  	JMP RenderSprite_DrawObject
0AFC2                           
0AFC2                           ; ---------------------------------------------------------------------------
0AFC2                           
0AFC2                           loc_BANK3_AE5C:
0AFC2 B5 B1                     	LDA EnemyArray_B1, X
0AFC4 D0 1C                     	BNE loc_BANK3_AE7C
0AFC6                           
0AFC6                           	LDA_abs byte_RAM_F4
0AFC6                           	IFDEF COMPATIBILITY
0AFC6 AD                        		.db $ad
0AFC7 F4 00                     		.dw byte_RAM_F4
0AFC9                           	ELSE
0AFC9                           		LDA byte_RAM_F4
0AFC9                           		NOP_compat
0AFC9                           	ENDIF
0AFC9 48                        	PHA
0AFCA AD 2C 04                  	LDA SpriteTempScreenY
0AFCD 18                        	CLC
0AFCE 69 F5                     	ADC #$F5
0AFD0 8D 2C 04                  	STA SpriteTempScreenY
0AFD3 20 2F FC                  	JSR loc_BANKF_FAFE
0AFD6                           
0AFD6                           	STY_abs byte_RAM_F4
0AFD6                           	IFDEF COMPATIBILITY
0AFD6 8C                        		.db $8c
0AFD7 F4 00                     		.dw byte_RAM_F4
0AFD9                           	ELSE
0AFD9                           		STY byte_RAM_F4
0AFD9                           		NOP_compat
0AFD9                           	ENDIF
0AFD9 A9 7C                     	LDA #$7C
0AFDB 20 28 9E                  	JSR RenderSprite_DrawObject
0AFDE                           
0AFDE 68                        	PLA
0AFDF                           	STA_abs byte_RAM_F4
0AFDF                           	IFDEF COMPATIBILITY
0AFDF 8D                        		.db $8d
0AFE0 F4 00                     		.dw byte_RAM_F4
0AFE2                           	ELSE
0AFE2                           		STA byte_RAM_F4
0AFE2                           		NOP_compat
0AFE2                           	ENDIF
0AFE2                           
0AFE2                           loc_BANK3_AE7C:
0AFE2 B5 33                     	LDA ObjectYLo, X
0AFE4 8D 2C 04                  	STA SpriteTempScreenY
0AFE7 20 1C 9E                  	JSR RenderSprite_NotAlbatoss
0AFEA                           
0AFEA A9 02                     	LDA #$02
0AFEC 95 6F                     	STA EnemyMovementDirection, X
0AFEE 98                        	TYA
0AFEF 18                        	CLC
0AFF0 69 08                     	ADC #$08
0AFF2                           	STA_abs byte_RAM_F4
0AFF2                           	IFDEF COMPATIBILITY
0AFF2 8D                        		.db $8d
0AFF3 F4 00                     		.dw byte_RAM_F4
0AFF5                           	ELSE
0AFF5                           		STA byte_RAM_F4
0AFF5                           		NOP_compat
0AFF5                           	ENDIF
0AFF5 A5 00                     	LDA byte_RAM_0
0AFF7 8D 2C 04                  	STA SpriteTempScreenY
0AFFA A9 D0                     	LDA #%11010000
0AFFC 9D 6E 04                  	STA EnemyArray_46E, X
0AFFF A9 78                     	LDA #$78
0B001 20 28 9E                  	JSR RenderSprite_DrawObject
0B004                           
0B004 A9 50                     	LDA #$50
0B006 B4 B1                     	LDY EnemyArray_B1, X
0B008 F0 02                     	BEQ loc_BANK3_AEA6
0B00A                           
0B00A A9 52                     	LDA #%01010010
0B00C                           
0B00C                           loc_BANK3_AEA6:
0B00C 9D 6E 04                  	STA EnemyArray_46E, X
0B00F 60                        	RTS
0B010                           
0B010                           ; ---------------------------------------------------------------------------
0B010                           
0B010                           EnemyInit_WhaleSpout:
0B010 20 CF 84                  	JSR EnemyInit_Basic
0B013                           
0B013 B5 33                     	LDA ObjectYLo, X
0B015 95 B1                     	STA EnemyArray_B1, X
0B017 60                        	RTS
0B018                           
0B018                           ; ---------------------------------------------------------------------------
0B018                           
0B018                           EnemyBehavior_WhaleSpout:
0B018 F6 9F                     	INC ObjectAnimationTimer, X
0B01A F6 9F                     	INC ObjectAnimationTimer, X
0B01C F6 79                     	INC EnemyVariable, X
0B01E B5 79                     	LDA EnemyVariable, X
0B020 C9 40                     	CMP #$40
0B022 B0 05                     	BCS loc_BANK3_AEC3
0B024                           
0B024 A9 E0                     	LDA #$E0
0B026 95 33                     	STA ObjectYLo, X
0B028                           
0B028                           locret_BANK3_AEC2:
0B028 60                        	RTS
0B029                           
0B029                           ; ---------------------------------------------------------------------------
0B029                           
0B029                           loc_BANK3_AEC3:
0B029 D0 08                     	BNE loc_BANK3_AECD
0B02B                           
0B02B A9 D0                     	LDA #$D0
0B02D 95 47                     	STA ObjectYVelocity, X
0B02F B5 B1                     	LDA EnemyArray_B1, X
0B031 95 33                     	STA ObjectYLo, X
0B033                           
0B033                           loc_BANK3_AECD:
0B033 A9 01                     	LDA #SoundEffect3_ShortNoise
0B035 8D 05 06                  	STA SoundEffectQueue3
0B038 B5 79                     	LDA EnemyVariable, X
0B03A C9 80                     	CMP #$80
0B03C 90 0E                     	BCC loc_BANK3_AEE6
0B03E                           
0B03E C9 DC                     	CMP #$DC
0B040 B0 0A                     	BCS loc_BANK3_AEE6
0B042                           
0B042 A0 03                     	LDY #$03
0B044 29 10                     	AND #$10
0B046 F0 02                     	BEQ loc_BANK3_AEE4
0B048                           
0B048 A0 FB                     	LDY #$FB
0B04A                           
0B04A                           loc_BANK3_AEE4:
0B04A 94 47                     	STY ObjectYVelocity, X
0B04C                           
0B04C                           loc_BANK3_AEE6:
0B04C F6 47                     	INC ObjectYVelocity, X
0B04E 20 F0 A0                  	JSR ApplyObjectPhysicsY
0B051                           
0B051                           RenderSprite_WhaleSpout:
0B051 A5 EE                     	LDA byte_RAM_EE
0B053 29 0C                     	AND #$C
0B055 D0 D1                     	BNE locret_BANK3_AEC2
0B057                           
0B057 B5 79                     	LDA EnemyVariable, X
0B059 85 07                     	STA byte_RAM_7
0B05B A9 29                     	LDA #$29
0B05D 95 65                     	STA ObjectAttributes, X
0B05F A9 92                     	LDA #$92
0B061 B4 79                     	LDY EnemyVariable, X
0B063 C0 DC                     	CPY #$DC
0B065 90 02                     	BCC loc_BANK3_AF03
0B067                           
0B067 A9 94                     	LDA #$94
0B069                           
0B069                           loc_BANK3_AF03:
0B069 20 28 9E                  	JSR RenderSprite_DrawObject
0B06C                           
0B06C 20 2F FC                  	JSR loc_BANKF_FAFE
0B06F                           
0B06F A9 55                     	LDA #$55
0B071 A6 07                     	LDX byte_RAM_7
0B073 E0 E0                     	CPX #$E0
0B075 90 02                     	BCC loc_BANK3_AF13
0B077                           
0B077 A9 3A                     	LDA #$3A
0B079                           
0B079                           loc_BANK3_AF13:
0B079 99 01 02                  	STA SpriteDMAArea + 1, Y
0B07C A9 55                     	LDA #$55
0B07E E0 E8                     	CPX #$E8
0B080 90 02                     	BCC loc_BANK3_AF1E
0B082                           
0B082 A9 3A                     	LDA #$3A
0B084                           
0B084                           loc_BANK3_AF1E:
0B084 99 05 02                  	STA SpriteDMAArea + 5, Y
0B087 A9 55                     	LDA #$55
0B089 E0 F0                     	CPX #$F0
0B08B 90 02                     	BCC loc_BANK3_AF29
0B08D                           
0B08D A9 3A                     	LDA #$3A
0B08F                           
0B08F                           loc_BANK3_AF29:
0B08F 99 09 02                  	STA SpriteDMAArea + 9, Y
0B092 A9 55                     	LDA #$55
0B094 E0 F8                     	CPX #$F8
0B096 90 02                     	BCC loc_BANK3_AF34
0B098                           
0B098 A9 3A                     	LDA #$3A
0B09A                           
0B09A                           loc_BANK3_AF34:
0B09A 99 0D 02                  	STA SpriteDMAArea + $D, Y
0B09D                           	LDX_abs byte_RAM_F4
0B09D                           	IFDEF COMPATIBILITY
0B09D AE                        		.db $ae
0B09E F4 00                     		.dw byte_RAM_F4
0B0A0                           	ELSE
0B0A0                           		LDX byte_RAM_F4
0B0A0                           		NOP_compat
0B0A0                           	ENDIF
0B0A0 BD 02 02                  	LDA SpriteDMAArea + 2, X
0B0A3 99 02 02                  	STA SpriteDMAArea + 2, Y
0B0A6 99 06 02                  	STA SpriteDMAArea + 6, Y
0B0A9 99 0A 02                  	STA SpriteDMAArea + $A, Y
0B0AC 99 0E 02                  	STA SpriteDMAArea + $E, Y
0B0AF AD 29 04                  	LDA SpriteTempScreenX
0B0B2 18                        	CLC
0B0B3 69 04                     	ADC #$04
0B0B5 99 03 02                  	STA SpriteDMAArea + 3, Y
0B0B8 99 07 02                  	STA SpriteDMAArea + 7, Y
0B0BB 99 0B 02                  	STA SpriteDMAArea + $B, Y
0B0BE 99 0F 02                  	STA SpriteDMAArea + $F, Y
0B0C1 A6 12                     	LDX byte_RAM_12
0B0C3 B5 33                     	LDA ObjectYLo, X
0B0C5 18                        	CLC
0B0C6 69 0F                     	ADC #$F
0B0C8 99 00 02                  	STA SpriteDMAArea, Y
0B0CB 69 10                     	ADC #$10
0B0CD 99 04 02                  	STA SpriteDMAArea + 4, Y
0B0D0 69 10                     	ADC #$10
0B0D2 99 08 02                  	STA SpriteDMAArea + 8, Y
0B0D5 69 10                     	ADC #$10
0B0D7 99 0C 02                  	STA SpriteDMAArea + $C, Y
0B0DA                           
0B0DA                           locret_BANK3_AF74:
0B0DA 60                        	RTS
0B0DB                           
0B0DB                           ; ---------------------------------------------------------------------------
0B0DB 1C                        	.db $1C
0B0DC                           byte_BANK3_AF76:
0B0DC E4                        	.db $E4
0B0DD                           
0B0DD 01                        	.db $01
0B0DE FF                        	.db $FF
0B0DF                           ; ---------------------------------------------------------------------------
0B0DF                           
0B0DF                           EnemyBehavior_Flurry:
0B0DF F6 9F                     	INC ObjectAnimationTimer, X
0B0E1 20 A1 9B                  	JSR EnemyBehavior_CheckDamagedInterrupt
0B0E4                           
0B0E4 20 EE 9A                  	JSR EnemyBehavior_CheckBeingCarriedTimerInterrupt
0B0E7                           
0B0E7 20 36 B5                  	JSR ObjectTileCollision
0B0EA                           
0B0EA B5 5B                     	LDA EnemyCollision, X
0B0EC 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
0B0EE F0 03                     	BEQ loc_BANK3_AF8D
0B0F0                           
0B0F0 20 56 A1                  	JSR EnemyBehavior_TurnAround
0B0F3                           
0B0F3                           loc_BANK3_AF8D:
0B0F3 B5 5B                     	LDA EnemyCollision, X
0B0F5 29 04                     	AND #CollisionFlags_Down
0B0F7 F0 21                     	BEQ loc_BANK3_AFB4
0B0F9                           
0B0F9 B5 47                     	LDA ObjectYVelocity, X
0B0FB 48                        	PHA
0B0FC 20 AC 97                  	JSR ResetObjectYVelocity
0B0FF                           
0B0FF 68                        	PLA
0B100 BC 2F 04                  	LDY EnemyArray_42F, X
0B103 F0 15                     	BEQ loc_BANK3_AFB4
0B105                           
0B105 C9 18                     	CMP #$18
0B107 30 09                     	BMI loc_BANK3_AFAC
0B109                           
0B109 20 80 97                  	JSR HalfObjectVelocityX
0B10C                           
0B10C A9 F0                     	LDA #$F0
0B10E 95 47                     	STA ObjectYVelocity, X
0B110 D0 2E                     	BNE loc_BANK3_AFDA
0B112                           
0B112                           loc_BANK3_AFAC:
0B112 A9 00                     	LDA #$00
0B114 9D 2F 04                  	STA EnemyArray_42F, X
0B117 20 B0 84                  	JSR SetEnemyAttributes
0B11A                           
0B11A                           loc_BANK3_AFB4:
0B11A A5 0E                     	LDA byte_RAM_E
0B11C C9 16                     	CMP #$16
0B11E F0 05                     	BEQ loc_BANK3_AFBF
0B120                           
0B120 D6 9F                     	DEC ObjectAnimationTimer, X
0B122 4C 40 96                  	JMP loc_BANK2_9470
0B125                           
0B125                           ; ---------------------------------------------------------------------------
0B125                           
0B125                           loc_BANK3_AFBF:
0B125 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
0B128                           
0B128 C8                        	INY
0B129 94 6F                     	STY EnemyMovementDirection, X
0B12B A5 10                     	LDA byte_RAM_10
0B12D 29 01                     	AND #$01
0B12F D0 0F                     	BNE loc_BANK3_AFDA
0B131                           
0B131 B5 3D                     	LDA ObjectXVelocity, X
0B133 D9 DA B0                  	CMP locret_BANK3_AF74, Y
0B136 F0 08                     	BEQ loc_BANK3_AFDA
0B138                           
0B138 18                        	CLC
0B139 79 DC B0                  	ADC byte_BANK3_AF76, Y
0B13C 95 3D                     	STA ObjectXVelocity, X
0B13E F6 9F                     	INC ObjectAnimationTimer, X
0B140                           
0B140                           loc_BANK3_AFDA:
0B140 20 FC 85                  	JSR ApplyObjectMovement
0B143                           
0B143 FE A4 04                  	INC unk_RAM_4A4, X
0B146 4C 90 9D                  	JMP RenderSprite
0B149                           
0B149                           ; ---------------------------------------------------------------------------
0B149                           
0B149                           EnemyInit_HawkmouthBoss:
0B149 20 69 8E                  	JSR EnemyInit_Hawkmouth ; Falls through to EnemyInit_Stationary
0B14C                           
0B14C A9 03                     	LDA #$03
0B14E 9D 65 04                  	STA EnemyHP, X
0B151                           IFDEF PLAYER_STUFF
0B151 20 BE AD                      JSR Set_CustomBossHp
0B154                           ENDIF
0B154                           IFDEF PLAYER_STUFF
0B154 A5 EC                         LDA IsHorizontalLevel
0B156 F0 06                         BEQ +
0B158 B5 15                         LDA ObjectXHi, X
0B15A 9D 20 76                      STA Enemy_Champion, X
0B15D 60                            RTS
0B15E                           +
0B15E B5 1F                         LDA ObjectYHi, X
0B160 9D 20 76                      STA Enemy_Champion, X
0B163                           ENDIF
0B163 60                        	RTS
0B164                           
0B164                           ; ---------------------------------------------------------------------------
0B164                           byte_BANK3_AFEC:
0B164 01                        	.db $01
0B165 FF                        	.db $FF
0B166                           byte_BANK3_AFEE:
0B166 28                        	.db $28
0B167 D8                        	.db $D8
0B168                           byte_BANK3_AFF0:
0B168 01                        	.db $01
0B169 FF                        	.db $FF
0B16A                           byte_BANK3_AFF2:
0B16A 10                        	.db $10
0B16B F0                        	.db $F0
0B16C                           ; ---------------------------------------------------------------------------
0B16C                           
0B16C                           EnemyBehavior_HawkmouthBoss:
0B16C 20 63 B2                  	JSR RenderSprite_HawkmouthBoss
0B16F                           
0B16F A9 06                     	LDA #%00000110
0B171 9D 6E 04                  	STA EnemyArray_46E, X
0B174 A9 02                     	LDA #$02
0B176 8D FE 71                  	STA byte_RAM_71FE
0B179 AD B5 04                  	LDA CrystalAndHawkmouthOpenSize
0B17C F0 5D                     	BEQ locret_BANK3_B05F
0B17E                           
0B17E C9 01                     	CMP #$01
0B180 D0 12                     	BNE loc_BANK3_B01C
0B182                           
0B182 9D 80 04                  	STA EnemyArray_480, X
0B185 A9 90                     	LDA #$90
0B187 95 86                     	STA EnemyTimer, X
0B189 A9 40                     	LDA #$40
0B18B 9D 38 04                  	STA EnemyArray_438, X
0B18E 9D 5C 04                  	STA EnemyArray_45C, X
0B191 8D B5 04                  	STA CrystalAndHawkmouthOpenSize
0B194                           
0B194                           loc_BANK3_B01C:
0B194 BD 80 04                  	LDA EnemyArray_480, X
0B197 C9 02                     	CMP #$02
0B199 90 78                     	BCC loc_BANK3_B09B
0B19B                           
0B19B B5 B1                     	LDA EnemyArray_B1, X
0B19D D0 14                     	BNE loc_BANK3_B03B
0B19F                           
0B19F FE 80 04                  	INC EnemyArray_480, X
0B1A2 BD 80 04                  	LDA EnemyArray_480, X
0B1A5 C9 31                     	CMP #$31
0B1A7 D0 33                     	BNE HawkmouthEat
0B1A9                           
0B1A9 BD 53 04                  	LDA EnemyArray_453, X
0B1AC D0 05                     	BNE loc_BANK3_B03B
0B1AE                           
0B1AE F6 B1                     	INC EnemyArray_B1, X
0B1B0 20 0D B2                  	JSR sub_BANK3_B095
0B1B3                           
0B1B3                           loc_BANK3_B03B:
0B1B3 DE 80 04                  	DEC EnemyArray_480, X
0B1B6 BC 80 04                  	LDY EnemyArray_480, X
0B1B9 88                        	DEY
0B1BA D0 20                     	BNE HawkmouthEat
0B1BC                           
0B1BC D6 B1                     	DEC EnemyArray_B1, X
0B1BE A5 50                     	LDA PlayerState
0B1C0 C9 06                     	CMP #PlayerState_HawkmouthEating
0B1C2 D0 18                     	BNE HawkmouthEat
0B1C4                           
0B1C4 A9 01                     	LDA #TransitionType_Door
0B1C6 8D 34 05                  	STA TransitionType
0B1C9                           IFNDEF PLAYER_STUFF
0B1C9                           	JSR DoAreaReset
0B1C9                           ENDIF
0B1C9                           
0B1C9                           IFNDEF PLAYER_STUFF
0B1C9                           	LDA #$09
0B1C9                           	STA PlayerXHi
0B1C9                           ENDIF
0B1C9                           IFDEF PLAYER_STUFF
0B1C9 BD 20 76                      LDA Enemy_Champion, X
0B1CC 85 14                     	STA PlayerXHi
0B1CE 20 66 FA                  	JSR DoAreaReset
0B1D1 20 7C E8                      JSR SetGameModeBonusChanceCustom
0B1D4                           ENDIF
0B1D4 EE 27 06                  	INC DoAreaTransition
0B1D7 68                        	PLA
0B1D8 68                        	PLA
0B1D9 68                        	PLA
0B1DA 68                        	PLA
0B1DB                           
0B1DB                           locret_BANK3_B05F:
0B1DB 60                        	RTS
0B1DC                           
0B1DC                           ; ---------------------------------------------------------------------------
0B1DC                           
0B1DC                           HawkmouthEat:
0B1DC BD 80 04                  	LDA EnemyArray_480, X ; Hawkmouth code?
0B1DF C9 30                     	CMP #$30
0B1E1 D0 2F                     	BNE locret_BANK3_B09A
0B1E3                           
0B1E3 B5 5B                     	LDA EnemyCollision, X ; make sure the player is inside Hawkmouth
0B1E5 29 40                     	AND #CollisionFlags_PlayerInsideMaybe
0B1E7 F0 29                     	BEQ locret_BANK3_B09A
0B1E9                           
0B1E9                           IFNDEF PLAYER_STUFF
0B1E9                           	LDA HoldingItem ; make sure player is not holding something
0B1E9                           	BNE locret_BANK3_B09A
0B1E9                           ENDIF
0B1E9                           
0B1E9 85 5A                     	STA PlayerCollision ; start eating player
0B1EB F6 B1                     	INC EnemyArray_B1, X
0B1ED EE B4 04                  	INC HawkmouthClosing
0B1F0 DE 80 04                  	DEC EnemyArray_480, X
0B1F3 B5 29                     	LDA ObjectXLo, X
0B1F5 85 28                     	STA PlayerXLo
0B1F7 B5 15                     	LDA ObjectXHi, X
0B1F9 85 14                     	STA PlayerXHi
0B1FB B5 33                     	LDA ObjectYLo, X
0B1FD 69 10                     	ADC #$10
0B1FF 85 32                     	STA PlayerYLo
0B201 A9 06                     	LDA #PlayerState_HawkmouthEating
0B203 85 50                     	STA PlayerState
0B205 A9 60                     	LDA #$60
0B207 85 82                     	STA PlayerStateTimer
0B209 A9 FC                     	LDA #$FC
0B20B 85 46                     	STA PlayerYVelocity
0B20D                           
0B20D                           ; =============== S U B R O U T I N E =======================================
0B20D                           
0B20D                           sub_BANK3_B095:
0B20D A9 80                     	LDA #SoundEffect1_HawkOpen_WartBarf
0B20F 8D 02 06                  	STA SoundEffectQueue1
0B212                           
0B212                           locret_BANK3_B09A:
0B212 60                        	RTS
0B213                           
0B213                           ; End of function sub_BANK3_B095
0B213                           
0B213                           ; ---------------------------------------------------------------------------
0B213                           
0B213                           loc_BANK3_B09B:
0B213 A9 03                     	LDA #%00000011
0B215 9D 6E 04                  	STA EnemyArray_46E, X
0B218 A9 00                     	LDA #$00
0B21A 8D FE 71                  	STA byte_RAM_71FE
0B21D BD 65 04                  	LDA EnemyHP, X
0B220 D0 13                     	BNE loc_BANK3_B0BA
0B222                           
0B222 A9 03                     	LDA #$03 ; Hawkmouth Boss health?
0B224 9D 65 04                  	STA EnemyHP, X
0B227                           IFDEF PLAYER_STUFF
0B227 20 BE AD                      JSR Set_CustomBossHp
0B22A                           ENDIF
0B22A 20 0D B2                  	JSR sub_BANK3_B095
0B22D                           
0B22D FE 80 04                  	INC EnemyArray_480, X
0B230 A9 FF                     	LDA #$FF
0B232 9D 53 04                  	STA EnemyArray_453, X
0B235                           
0B235                           loc_BANK3_B0BA:
0B235 A5 10                     	LDA byte_RAM_10
0B237 4A                        	LSR A
0B238 90 24                     	BCC loc_BANK3_B0E3
0B23A                           
0B23A B5 79                     	LDA EnemyVariable, X
0B23C 29 01                     	AND #$01
0B23E A8                        	TAY
0B23F B5 47                     	LDA ObjectYVelocity, X
0B241 18                        	CLC
0B242 79 68 B1                  	ADC byte_BANK3_AFF0, Y
0B245 95 47                     	STA ObjectYVelocity, X
0B247 D9 6A B1                  	CMP byte_BANK3_AFF2, Y
0B24A D0 02                     	BNE loc_BANK3_B0D3
0B24C                           
0B24C F6 79                     	INC EnemyVariable, X
0B24E                           
0B24E                           loc_BANK3_B0D3:
0B24E 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
0B251                           
0B251 B5 3D                     	LDA ObjectXVelocity, X
0B253 D9 66 B1                  	CMP byte_BANK3_AFEE, Y
0B256 F0 06                     	BEQ loc_BANK3_B0E3
0B258                           
0B258 18                        	CLC
0B259 79 64 B1                  	ADC byte_BANK3_AFEC, Y
0B25C 95 3D                     	STA ObjectXVelocity, X
0B25E                           
0B25E                           loc_BANK3_B0E3:
0B25E 4C 00 96                  	JMP sub_BANK2_9430
0B261                           
0B261                           ; ---------------------------------------------------------------------------
0B261                           byte_BANK3_B0E6:
0B261 F8                        	.db $F8
0B262 10                        	.db $10
0B263                           
0B263                           ; =============== S U B R O U T I N E =======================================
0B263                           
0B263                           RenderSprite_HawkmouthBoss:
0B263 BD 80 04                  	LDA EnemyArray_480, X
0B266 20 55 8F                  	JSR sub_BANK2_8E13
0B269                           
0B269 AD B5 04                  	LDA CrystalAndHawkmouthOpenSize
0B26C F0 7A                     	BEQ loc_BANK3_B16D
0B26E                           
0B26E A5 EE                     	LDA byte_RAM_EE
0B270 29 0C                     	AND #$C
0B272 D0 74                     	BNE loc_BANK3_B16D
0B274                           
0B274 B5 86                     	LDA EnemyTimer, X
0B276 85 07                     	STA byte_RAM_7
0B278 20 2F FC                  	JSR loc_BANKF_FAFE
0B27B                           
0B27B A6 02                     	LDX byte_RAM_2
0B27D AD 29 04                  	LDA SpriteTempScreenX
0B280 18                        	CLC
0B281 7D 60 B2                  	ADC byte_BANK3_B0E6 - 1, X
0B284 48                        	PHA
0B285 08                        	PHP
0B286 CA                        	DEX
0B287 F0 04                     	BEQ loc_BANK3_B112
0B289                           
0B289 68                        	PLA
0B28A 49 01                     	EOR #$01
0B28C 48                        	PHA
0B28D                           
0B28D                           loc_BANK3_B112:
0B28D 28                        	PLP
0B28E 68                        	PLA
0B28F 90 57                     	BCC loc_BANK3_B16D
0B291                           
0B291 99 03 02                  	STA SpriteDMAArea + 3, Y
0B294 99 07 02                  	STA SpriteDMAArea + 7, Y
0B297 99 0B 02                  	STA SpriteDMAArea + $B, Y
0B29A 99 0F 02                  	STA SpriteDMAArea + $F, Y
0B29D AE BD 04                  	LDX DoorAnimationTimer
0B2A0 F0 02                     	BEQ loc_BANK3_B129
0B2A2                           
0B2A2 A2 10                     	LDX #$10
0B2A4                           
0B2A4                           loc_BANK3_B129:
0B2A4 BD 00 02                  	LDA SpriteDMAArea, X
0B2A7 99 00 02                  	STA SpriteDMAArea, Y
0B2AA 18                        	CLC
0B2AB 69 10                     	ADC #$10
0B2AD 99 04 02                  	STA SpriteDMAArea + 4, Y
0B2B0 A5 07                     	LDA byte_RAM_7
0B2B2 F0 02                     	BEQ loc_BANK3_B13B
0B2B4                           
0B2B4 A9 20                     	LDA #$20
0B2B6                           
0B2B6                           loc_BANK3_B13B:
0B2B6 1D 02 02                  	ORA SpriteDMAArea + 2, X
0B2B9 99 02 02                  	STA SpriteDMAArea + 2, Y
0B2BC 99 06 02                  	STA SpriteDMAArea + 6, Y
0B2BF 99 0A 02                  	STA SpriteDMAArea + $A, Y
0B2C2 99 0E 02                  	STA SpriteDMAArea + $E, Y
0B2C5                           	LDX_abs byte_RAM_F4
0B2C5                           	IFDEF COMPATIBILITY
0B2C5 AE                        		.db $ae
0B2C6 F4 00                     		.dw byte_RAM_F4
0B2C8                           	ELSE
0B2C8                           		LDX byte_RAM_F4
0B2C8                           		NOP_compat
0B2C8                           	ENDIF
0B2C8 BD 00 02                  	LDA SpriteDMAArea, X
0B2CB 99 08 02                  	STA SpriteDMAArea + 8, Y
0B2CE 18                        	CLC
0B2CF 69 10                     	ADC #$10
0B2D1 99 0C 02                  	STA SpriteDMAArea + $C, Y
0B2D4 A9 F0                     	LDA #$F0
0B2D6 99 01 02                  	STA SpriteDMAArea + 1, Y
0B2D9 A9 F2                     	LDA #$F2
0B2DB 99 05 02                  	STA SpriteDMAArea + 5, Y
0B2DE A9 F4                     	LDA #$F4
0B2E0 99 09 02                  	STA SpriteDMAArea + 9, Y
0B2E3 A9 F6                     	LDA #$F6
0B2E5 99 0D 02                  	STA SpriteDMAArea + $D, Y
0B2E8                           
0B2E8                           loc_BANK3_B16D:
0B2E8 A6 12                     	LDX byte_RAM_12
0B2EA 60                        	RTS
0B2EB                           
0B2EB                           
0B2EB                           VegetableThrowerOffsetX:
0B2EB 08                        	.db $08
0B2EC 28                        	.db $28
0B2ED 48                        	.db $48
0B2EE 28                        	.db $28
0B2EF                           
0B2EF                           VegetableThrowerOffsetY:
0B2EF 94                        	.db $94
0B2F0 84                        	.db $84
0B2F1 94                        	.db $94
0B2F2 84                        	.db $84
0B2F3                           
0B2F3                           VegetableThrowerVelocity:
0B2F3 F8                        	.db $F8
0B2F4 08                        	.db $08
0B2F5 F8                        	.db $F8
0B2F6 08                        	.db $08
0B2F7 08                        	.db $08
0B2F8 F8                        	.db $F8
0B2F9 08                        	.db $08
0B2FA F8                        	.db $F8
0B2FB                           
0B2FB                           
0B2FB                           Generator_VegetableThrower:
0B2FB A5 9C                     	LDA HoldingItem
0B2FD D0 48                     	BNE locret_BANK3_B1CC
0B2FF                           
0B2FF A5 10                     	LDA byte_RAM_10
0B301 29 FF                     	AND #$FF
0B303 D0 42                     	BNE locret_BANK3_B1CC
0B305                           
0B305 EE F9 04                  	INC VegetableThrowerShotCounter
0B308 20 7E 94                  	JSR CreateEnemy_TryAllSlots
0B30B                           
0B30B 30 3A                     	BMI locret_BANK3_B1CC
0B30D                           
0B30D A6 00                     	LDX byte_RAM_0
0B30F AD F9 04                  	LDA VegetableThrowerShotCounter
0B312 29 07                     	AND #$07
0B314 A8                        	TAY
0B315 B9 F3 B2                  	LDA VegetableThrowerVelocity, Y
0B318 95 3D                     	STA ObjectXVelocity, X
0B31A 98                        	TYA
0B31B 29 03                     	AND #$03
0B31D A8                        	TAY
0B31E A9 02                     	LDA #$02
0B320 95 15                     	STA ObjectXHi, X
0B322 B9 EB B2                  	LDA VegetableThrowerOffsetX, Y
0B325 95 29                     	STA ObjectXLo, X
0B327 B9 EF B2                  	LDA VegetableThrowerOffsetY, Y
0B32A 95 33                     	STA ObjectYLo, X
0B32C A9 00                     	LDA #$00
0B32E 95 1F                     	STA ObjectYHi, X
0B330 AD AE 05                  	LDA PseudoRNGValues + 2
0B333 29 03                     	AND #$03
0B335 C9 02                     	CMP #$02
0B337 90 03                     	BCC loc_BANK3_B1C1
0B339                           
0B339 0A                        	ASL A
0B33A 95 B1                     	STA EnemyArray_B1, X
0B33C                           
0B33C                           loc_BANK3_B1C1:
0B33C A0 33                     	LDY #Enemy_VegetableLarge
0B33E 94 90                     	STY ObjectType, X
0B340 20 B0 84                  	JSR SetEnemyAttributes
0B343                           
0B343 A9 D0                     	LDA #$D0
0B345 95 47                     	STA ObjectYVelocity, X
0B347                           
0B347                           locret_BANK3_B1CC:
0B347 60                        	RTS
0B348                           
0B348                           ; ---------------------------------------------------------------------------
0B348                           
0B348                           EnemyInit_Wart:
0B348 20 CF 84                  	JSR EnemyInit_Basic
0B34B                           
0B34B A9 06                     	LDA #$06
0B34D 9D 65 04                  	STA EnemyHP, X
0B350                           IFDEF PLAYER_STUFF
0B350 20 BE AD                      JSR Set_CustomBossHp
0B353                           ENDIF
0B353 B5 15                     	LDA ObjectXHi, X
0B355 9D EF 04                  	STA unk_RAM_4EF, X
0B358 60                        	RTS
0B359                           
0B359                           
0B359                           WartBubbleYVelocity:
0B359 E0                        	.db $E0
0B35A F0                        	.db $F0
0B35B E8                        	.db $E8
0B35C E4                        	.db $E4
0B35D                           
0B35D                           
0B35D                           ;
0B35D                           ; Wart
0B35D                           ; ====
0B35D                           ;
0B35D                           ; Walks back and forth, spits bubbles
0B35D                           ;
0B35D                           ; EnemyTimer = counter used to determing the bubble spit distance
0B35D                           ; EnemyVariable = counter used to pause while walking back and forth
0B35D                           ; EnemyArray_480 = counter used to determine the bubble spit height
0B35D                           ; EnemyArray_B1 = counter for death animation
0B35D                           ; EnemyArray_477 = counter used for alternating steps
0B35D                           ; EnemyArray_45C = counter for blinking while hurt
0B35D                           ;
0B35D                           EnemyBehavior_Wart:
0B35D B5 B1                     	LDA EnemyArray_B1, X
0B35F D0 73                     	BNE EnemyBehavior_Wart_Death
0B361                           
0B361 BD 65 04                  	LDA EnemyHP, X
0B364 D0 08                     	BNE EnemyBehavior_Wart_Alive
0B366                           
0B366                           	; start the death sequence
0B366 A9 80                     	LDA #$80
0B368 95 86                     	STA EnemyTimer, X
0B36A 95 B1                     	STA EnemyArray_B1, X
0B36C D0 63                     	BNE EnemyBehavior_Wart_Exit
0B36E                           
0B36E                           EnemyBehavior_Wart_Alive:
0B36E F6 79                     	INC EnemyVariable, X
0B370 A5 10                     	LDA byte_RAM_10
0B372 29 FF                     	AND #%11111111
0B374 D0 07                     	BNE EnemyBehavior_Wart_Movement
0B376                           
0B376                           	; spit bubbles
0B376 A9 5F                     	LDA #$5F
0B378 95 86                     	STA EnemyTimer, X
0B37A                           	; counter that determines which index of WartBubbleYVelocity to use
0B37A FE 80 04                  	INC EnemyArray_480, X
0B37D                           
0B37D                           EnemyBehavior_Wart_Movement:
0B37D A9 00                     	LDA #$00
0B37F 95 3D                     	STA ObjectXVelocity, X
0B381                           
0B381                           	; pause at the end of movement
0B381 B5 79                     	LDA EnemyVariable, X
0B383 29 40                     	AND #%01000000
0B385 F0 0D                     	BEQ EnemyBehavior_Wart_PhysicsX
0B387                           
0B387                           	; increment animation timer
0B387 FE 77 04                  	INC EnemyArray_477, X
0B38A A9 F8                     	LDA #$F8 ; left movement
0B38C B4 79                     	LDY EnemyVariable, X
0B38E 10 02                     	BPL EnemyBehavior_Wart_SetXVelocity
0B390                           
0B390 A9 08                     	LDA #$08 ; right movement
0B392                           
0B392                           EnemyBehavior_Wart_SetXVelocity:
0B392 95 3D                     	STA ObjectXVelocity, X
0B394                           
0B394                           EnemyBehavior_Wart_PhysicsX:
0B394 20 F5 A0                  	JSR ApplyObjectPhysicsX
0B397                           
0B397 BD 5C 04                  	LDA EnemyArray_45C, X
0B39A D0 35                     	BNE EnemyBehavior_Wart_Exit
0B39C                           
0B39C B5 86                     	LDA EnemyTimer, X
0B39E F0 31                     	BEQ EnemyBehavior_Wart_Exit
0B3A0                           
0B3A0 29 0F                     	AND #$0F
0B3A2 D0 2D                     	BNE EnemyBehavior_Wart_Exit
0B3A4                           
0B3A4                           	; try to create a new enemy for the bubble
0B3A4 20 82 94                  	JSR CreateEnemy
0B3A7                           
0B3A7 30 28                     	BMI EnemyBehavior_Wart_Exit
0B3A9                           
0B3A9 A9 80                     	LDA #SoundEffect1_HawkOpen_WartBarf
0B3AB 8D 02 06                  	STA SoundEffectQueue1
0B3AE                           	; determines how high to spit the bubble
0B3AE BD 80 04                  	LDA EnemyArray_480, X
0B3B1 29 03                     	AND #$03
0B3B3 A8                        	TAY
0B3B4                           	; determines how far to spit the bubble
0B3B4 B5 86                     	LDA EnemyTimer, X
0B3B6                           
0B3B6                           	; set up the bubble
0B3B6 A6 00                     	LDX byte_RAM_0
0B3B8 4A                        	LSR A
0B3B9 49 FF                     	EOR #$FF
0B3BB 95 3D                     	STA ObjectXVelocity, X
0B3BD B9 59 B3                  	LDA WartBubbleYVelocity, Y
0B3C0 95 47                     	STA ObjectYVelocity, X
0B3C2 A9 11                     	LDA #Enemy_WartBubble
0B3C4 95 90                     	STA ObjectType, X
0B3C6 B5 33                     	LDA ObjectYLo, X
0B3C8 69 08                     	ADC #$08
0B3CA 95 33                     	STA ObjectYLo, X
0B3CC 20 B0 84                  	JSR SetEnemyAttributes
0B3CF                           
0B3CF A6 12                     	LDX byte_RAM_12
0B3D1                           
0B3D1                           EnemyBehavior_Wart_Exit:
0B3D1 4C 90 9D                  	JMP RenderSprite
0B3D4                           
0B3D4                           
0B3D4                           EnemyBehavior_Wart_Death:
0B3D4 B5 86                     	LDA EnemyTimer, X
0B3D6 F0 0F                     	BEQ EnemyBehavior_Wart_DeathFall
0B3D8                           
0B3D8                           	; going up
0B3D8 9D 5C 04                  	STA EnemyArray_45C, X
0B3DB FE 77 04                  	INC EnemyArray_477, X
0B3DE FE 77 04                  	INC EnemyArray_477, X
0B3E1 A9 F0                     	LDA #$F0
0B3E3 95 47                     	STA ObjectYVelocity, X
0B3E5 D0 36                     	BNE EnemyBehavior_Wart_Death_Exit
0B3E7                           
0B3E7                           EnemyBehavior_Wart_DeathFall:
0B3E7 A9 04                     	LDA #$04
0B3E9 95 3D                     	STA ObjectXVelocity, X
0B3EB 20 F5 A0                  	JSR ApplyObjectPhysicsX
0B3EE                           
0B3EE 20 F0 A0                  	JSR ApplyObjectPhysicsY
0B3F1                           
0B3F1                           	; every other frame
0B3F1 A5 10                     	LDA byte_RAM_10
0B3F3 4A                        	LSR A
0B3F4 B0 1D                     	BCS EnemyBehavior_Wart_CheckDeathComplete
0B3F6                           
0B3F6 F6 47                     	INC ObjectYVelocity, X
0B3F8 30 19                     	BMI EnemyBehavior_Wart_CheckDeathComplete
0B3FA                           
0B3FA A5 10                     	LDA byte_RAM_10
0B3FC 29 1F                     	AND #$1F
0B3FE D0 13                     	BNE EnemyBehavior_Wart_CheckDeathComplete
0B400                           
0B400 A9 10                     	LDA #DPCM_BossDeath
0B402 8D 01 06                  	STA DPCMQueue
0B405 20 82 94                  	JSR CreateEnemy
0B408                           
0B408 A6 00                     	LDX byte_RAM_0
0B40A B5 33                     	LDA ObjectYLo, X
0B40C 69 08                     	ADC #$08
0B40E 95 33                     	STA ObjectYLo, X
0B410 20 27 93                  	JSR TurnIntoPuffOfSmoke
0B413                           
0B413                           EnemyBehavior_Wart_CheckDeathComplete:
0B413 B5 33                     	LDA ObjectYLo, X
0B415 C9 D0                     	CMP #$D0
0B417 90 04                     	BCC EnemyBehavior_Wart_Death_Exit
0B419                           
0B419 A9 02                     	LDA #EnemyState_Dead
0B41B 95 51                     	STA EnemyState, X
0B41D                           
0B41D                           EnemyBehavior_Wart_Death_Exit:
0B41D 4C 90 9D                  	JMP RenderSprite
0B420                           
0B420                           
0B420                           EnemyBehavior_WartBubble:
0B420 F6 9F                     	INC ObjectAnimationTimer, X
0B422 20 F5 A0                  	JSR ApplyObjectPhysicsX
0B425                           
0B425 20 F0 A0                  	JSR ApplyObjectPhysicsY
0B428                           
0B428 F6 47                     	INC ObjectYVelocity, X
0B42A 4C 90 9D                  	JMP RenderSprite
0B42D                           
0B42D                           EnemyBehavior_WartBubble_Exit:
0B42D 60                        	RTS
0B42E                           
0B42E                           
0B42E                           RenderSprite_Wart:
0B42E                           	LDA_abs byte_RAM_F4
0B42E                           	IFDEF COMPATIBILITY
0B42E AD                        		.db $ad
0B42F F4 00                     		.dw byte_RAM_F4
0B431                           	ELSE
0B431                           		LDA byte_RAM_F4
0B431                           		NOP_compat
0B431                           	ENDIF
0B431 8D 67 72                  	STA byte_RAM_7267
0B434 8D 6B 72                  	STA byte_RAM_726B
0B437 A5 10                     	LDA byte_RAM_10
0B439 29 03                     	AND #$03
0B43B 85 07                     	STA byte_RAM_7
0B43D A8                        	TAY
0B43E B9 65 72                  	LDA unk_RAM_7265, Y
0B441                           	STA_abs byte_RAM_F4
0B441                           	IFDEF COMPATIBILITY
0B441 8D                        		.db $8d
0B442 F4 00                     		.dw byte_RAM_F4
0B444                           	ELSE
0B444                           		STA byte_RAM_F4
0B444                           		NOP_compat
0B444                           	ENDIF
0B444 A5 EF                     	LDA byte_RAM_EF
0B446 D0 E5                     	BNE EnemyBehavior_WartBubble_Exit
0B448                           
0B448 BC 65 04                  	LDY EnemyHP, X
0B44B D0 04                     	BNE RenderSprite_Wart_AfterObjAttrib
0B44D                           
0B44D                           	; he dead
0B44D A9 4E                     	LDA #ObjAttrib_Horizontal | ObjAttrib_FrontFacing | ObjAttrib_16x32 | ObjAttrib_Palette2
0B44F 95 65                     	STA ObjectAttributes, X
0B451                           
0B451                           RenderSprite_Wart_AfterObjAttrib:
0B451 A5 EE                     	LDA byte_RAM_EE
0B453 48                        	PHA
0B454 48                        	PHA
0B455 A0 AE                     	LDY #$AE ; top row: shocked
0B457 B5 B1                     	LDA EnemyArray_B1, X ; death counter
0B459 D0 0F                     	BNE RenderSprite_Wart_TopHurt
0B45B                           
0B45B BD 5C 04                  	LDA EnemyArray_45C, X ; enemy timer
0B45E F0 0D                     	BEQ RenderSprite_Wart_TopRegular
0B460                           
0B460 C9 30                     	CMP #$30
0B462 B0 06                     	BCS RenderSprite_Wart_TopHurt
0B464                           
0B464 29 08                     	AND #$08
0B466 D0 02                     	BNE RenderSprite_Wart_TopHurt
0B468                           
0B468 A0 9E                     	LDY #$9E ; top row: blinking
0B46A                           
0B46A                           RenderSprite_Wart_TopHurt:
0B46A 98                        	TYA
0B46B D0 08                     	BNE RenderSprite_Wart_DrawTop
0B46D                           
0B46D                           RenderSprite_Wart_TopRegular:
0B46D A9 9E                     	LDA #$9E ; top row: regular
0B46F B4 86                     	LDY EnemyTimer, X
0B471 F0 02                     	BEQ RenderSprite_Wart_DrawTop
0B473                           
0B473 A9 A2                     	LDA #$A2 ; top row: spitting
0B475                           
0B475                           RenderSprite_Wart_DrawTop:
0B475 20 28 9E                  	JSR RenderSprite_DrawObject
0B478                           
0B478 A5 00                     	LDA byte_RAM_0
0B47A 8D 2C 04                  	STA SpriteTempScreenY
0B47D A4 07                     	LDY byte_RAM_7
0B47F B9 66 72                  	LDA unk_RAM_7266, Y
0B482                           	STA_abs byte_RAM_F4
0B482                           	IFDEF COMPATIBILITY
0B482 8D                        		.db $8d
0B483 F4 00                     		.dw byte_RAM_F4
0B485                           	ELSE
0B485                           		STA byte_RAM_F4
0B485                           		NOP_compat
0B485                           	ENDIF
0B485 A0 A6                     	LDY #$A6 ; middle row: regular
0B487 B5 B1                     	LDA EnemyArray_B1, X
0B489 D0 13                     	BNE RenderSprite_Wart_MiddleHurt
0B48B                           
0B48B BD 5C 04                  	LDA EnemyArray_45C, X
0B48E F0 0A                     	BEQ RenderSprite_Wart_MiddleRegular
0B490                           
0B490 C9 30                     	CMP #$30
0B492 B0 0A                     	BCS RenderSprite_Wart_MiddleHurt
0B494                           
0B494 29 08                     	AND #$08
0B496 D0 06                     	BNE RenderSprite_Wart_MiddleHurt
0B498                           
0B498 F0 06                     	BEQ RenderSprite_Wart_DrawMiddle
0B49A                           
0B49A                           RenderSprite_Wart_MiddleRegular:
0B49A B5 86                     	LDA EnemyTimer, X
0B49C F0 02                     	BEQ RenderSprite_Wart_DrawMiddle
0B49E                           
0B49E                           RenderSprite_Wart_MiddleHurt:
0B49E A0 AA                     	LDY #$AA ; middle row: spitting
0B4A0                           
0B4A0                           RenderSprite_Wart_DrawMiddle:
0B4A0 68                        	PLA
0B4A1 85 EE                     	STA byte_RAM_EE
0B4A3 98                        	TYA
0B4A4 20 28 9E                  	JSR RenderSprite_DrawObject
0B4A7                           
0B4A7 A5 00                     	LDA byte_RAM_0
0B4A9 8D 2C 04                  	STA SpriteTempScreenY
0B4AC A4 07                     	LDY byte_RAM_7
0B4AE B9 67 72                  	LDA byte_RAM_7267, Y
0B4B1                           	STA_abs byte_RAM_F4
0B4B1                           	IFDEF COMPATIBILITY
0B4B1 8D                        		.db $8d
0B4B2 F4 00                     		.dw byte_RAM_F4
0B4B4                           	ELSE
0B4B4                           		STA byte_RAM_F4
0B4B4                           		NOP_compat
0B4B4                           	ENDIF
0B4B4 A0 BA                     	LDY #$BA ; bottom row: standing
0B4B6 B5 3D                     	LDA ObjectXVelocity, X
0B4B8 F0 0B                     	BEQ RenderSprite_Wart_DrawBottom
0B4BA                           
0B4BA A0 B2                     	LDY #$B2 ; bottom row: left foot up
0B4BC BD 77 04                  	LDA EnemyArray_477, X
0B4BF 29 10                     	AND #$10
0B4C1 F0 02                     	BEQ RenderSprite_Wart_DrawBottom
0B4C3                           
0B4C3 A0 B6                     	LDY #$B6 ; bottom row: right foot up
0B4C5                           
0B4C5                           RenderSprite_Wart_DrawBottom:
0B4C5 68                        	PLA
0B4C6 85 EE                     	STA byte_RAM_EE
0B4C8 98                        	TYA
0B4C9 20 28 9E                  	JSR RenderSprite_DrawObject
0B4CC                           
0B4CC A5 EE                     	LDA byte_RAM_EE
0B4CE D0 46                     	BNE RenderSprite_Wart_Exit
0B4D0                           
0B4D0                           	; draw backside
0B4D0 A4 07                     	LDY byte_RAM_7
0B4D2 BE 67 72                  	LDX byte_RAM_7267, Y
0B4D5 B9 68 72                  	LDA unk_RAM_7268, Y
0B4D8 A8                        	TAY
0B4D9 AD 29 04                  	LDA SpriteTempScreenX
0B4DC 18                        	CLC
0B4DD 69 20                     	ADC #$20
0B4DF B0 35                     	BCS RenderSprite_Wart_Exit
0B4E1                           
0B4E1 99 03 02                  	STA SpriteDMAArea + 3, Y
0B4E4 99 07 02                  	STA SpriteDMAArea + 7, Y
0B4E7 99 0B 02                  	STA SpriteDMAArea + $B, Y
0B4EA A5 00                     	LDA byte_RAM_0
0B4EC E9 2F                     	SBC #$2F
0B4EE 99 00 02                  	STA SpriteDMAArea, Y
0B4F1 69 0F                     	ADC #$0F
0B4F3 99 04 02                  	STA SpriteDMAArea + 4, Y
0B4F6 69 10                     	ADC #$10
0B4F8 99 08 02                  	STA SpriteDMAArea + 8, Y
0B4FB BD 02 02                  	LDA SpriteDMAArea + 2, X
0B4FE 99 02 02                  	STA SpriteDMAArea + 2, Y
0B501 99 06 02                  	STA SpriteDMAArea + 6, Y
0B504 99 0A 02                  	STA SpriteDMAArea + $A, Y
0B507 A9 19                     	LDA #$19 ; top
0B509 99 01 02                  	STA SpriteDMAArea + 1, Y
0B50C A9 1B                     	LDA #$1B ; middle
0B50E 99 05 02                  	STA SpriteDMAArea + 5, Y
0B511 A9 1D                     	LDA #$1D ; bottom
0B513 99 09 02                  	STA SpriteDMAArea + 9, Y
0B516                           
0B516                           RenderSprite_Wart_Exit:
0B516 A6 12                     	LDX byte_RAM_12
0B518 60                        	RTS
0B519                           
0B519                           
0B519                           ; Unused space in the original ($B39B - $B4DF)
0B519                           unusedSpace $B4E0, $FF
0B519                           	IFDEF PRESERVE_UNUSED_SPACE
0B519                           		.pad $B4E0, $FF
0B519                           	ENDIF
0B519                           
0B519                           
0B519                           byte_BANK3_B4E0:
0B519 F0                        	.db $F0
0B51A 10                        	.db $10
0B51B                           
0B51B                           ; =============== S U B R O U T I N E =======================================
0B51B                           
0B51B                           sub_BANK3_B4E2:
0B51B 20 E5 B5                  	JSR ClearDirectionalCollisionFlags
0B51E                           
0B51E A8                        	TAY
0B51F B5 46                     	LDA ObjectYVelocity - 1, X
0B521 30 01                     	BMI loc_BANK3_B4EB
0B523                           
0B523 C8                        	INY
0B524                           
0B524                           loc_BANK3_B4EB:
0B524 20 75 BC                  	JSR sub_BANK3_BB5A
0B527                           
0B527 B0 07                     	BCS loc_BANK3_B4F7
0B529                           
0B529 A5 00                     	LDA byte_RAM_0
0B52B C9 82                     	CMP #$82
0B52D F0 01                     	BEQ loc_BANK3_B4F7
0B52F                           
0B52F 18                        	CLC
0B530                           
0B530                           loc_BANK3_B4F7:
0B530 CA                        	DEX
0B531 60                        	RTS
0B532                           
0B532                           ; End of function sub_BANK3_B4E2
0B532                           
0B532                           
0B532                           ;
0B532                           ; Object/background collision that treats non-sky background tiles as solid,
0B532                           ; such as for Sparks and Mushroom Blocks
0B532                           ;
0B532                           ObjectTileCollision_SolidBackground:
0B532 A9 04                     	LDA #$04
0B534 D0 02                     	BNE ObjectTileCollision_Main
0B536                           
0B536                           ;
0B536                           ; Normal object/background collision
0B536                           ;
0B536                           ObjectTileCollision:
0B536 A9 00                     	LDA #$00
0B538                           
0B538                           ;
0B538                           ; Object Tile Collision
0B538                           ; =====================
0B538                           ;
0B538                           ; Handles object collision with background tiles
0B538                           ;
0B538                           ; Input
0B538                           ;   A = whether or not to tread walk-through tiles as solid
0B538                           ;   X = enemy index
0B538                           ; Output
0B538                           ;  EnemyCollision, X = collision flags
0B538                           ;
0B538                           ObjectTileCollision_Main:
0B538 85 07                     	STA byte_RAM_7
0B53A A9 00                     	LDA #$00
0B53C 85 0B                     	STA byte_RAM_B
0B53E 85 0E                     	STA byte_RAM_E
0B540 20 E5 B5                  	JSR ClearDirectionalCollisionFlags
0B543                           
0B543 85 08                     	STA byte_RAM_8
0B545 B5 46                     	LDA ObjectYVelocity - 1, X
0B547 10 09                     	BPL loc_BANK3_B519
0B549                           
0B549 20 C5 B5                  	JSR sub_BANK3_B58C
0B54C                           
0B54C E6 07                     	INC byte_RAM_7
0B54E E6 08                     	INC byte_RAM_8
0B550 D0 62                     	BNE loc_BANK3_B57B
0B552                           
0B552                           loc_BANK3_B519:
0B552 E6 07                     	INC byte_RAM_7
0B554 E6 08                     	INC byte_RAM_8
0B556 20 C5 B5                  	JSR sub_BANK3_B58C
0B559                           
0B559 B5 8F                     	LDA ObjectType - 1, X
0B55B C9 18                     	CMP #Enemy_CobratJar
0B55D F0 1A                     	BEQ loc_BANK3_B540
0B55F                           
0B55F C9 19                     	CMP #Enemy_CobratSand
0B561 F0 16                     	BEQ loc_BANK3_B540
0B563                           
0B563 A5 00                     	LDA byte_RAM_0
0B565 38                        	SEC
0B566 E9 8A                     	SBC #$8A
0B568 C9 02                     	CMP #$02
0B56A B0 0D                     	BCS loc_BANK3_B540
0B56C                           
0B56C 0A                        	ASL A
0B56D 69 01                     	ADC #$01
0B56F 95 46                     	STA ObjectYVelocity - 1, X
0B571 A9 07                     	LDA #EnemyState_7
0B573 95 50                     	STA EnemyState - 1, X
0B575 A9 FF                     	LDA #$FF
0B577 95 85                     	STA EnemyTimer - 1, X
0B579                           
0B579                           loc_BANK3_B540:
0B579 A5 00                     	LDA byte_RAM_0
0B57B 85 0E                     	STA byte_RAM_E
0B57D 38                        	SEC
0B57E E9 67                     	SBC #$67
0B580 C9 02                     	CMP #$02
0B582 B0 30                     	BCS loc_BANK3_B57B
0B584                           
0B584 BC 37 04                  	LDY EnemyArray_438 - 1, X
0B587 D0 2B                     	BNE loc_BANK3_B57B
0B589                           
0B589 B4 8F                     	LDY ObjectType - 1, X
0B58B C0 32                     	CPY #Enemy_VegetableSmall
0B58D 90 16                     	BCC loc_BANK3_B56C
0B58F                           
0B58F A8                        	TAY
0B590 B5 46                     	LDA ObjectYVelocity - 1, X
0B592 C9 03                     	CMP #$03
0B594 B0 1E                     	BCS loc_BANK3_B57B
0B596                           
0B596 A5 0D                     	LDA byte_RAM_D
0B598 29 03                     	AND #$03
0B59A D0 18                     	BNE loc_BANK3_B57B
0B59C                           
0B59C B9 19 B5                  	LDA byte_BANK3_B4E0, Y
0B59F 95 3C                     	STA ObjectXVelocity - 1, X
0B5A1 85 0B                     	STA byte_RAM_B
0B5A3 D0 0F                     	BNE loc_BANK3_B57B
0B5A5                           
0B5A5                           loc_BANK3_B56C:
0B5A5 B4 3C                     	LDY ObjectXVelocity - 1, X
0B5A7 F0 09                     	BEQ loc_BANK3_B579
0B5A9                           
0B5A9 55 6E                     	EOR EnemyMovementDirection - 1, X
0B5AB 4A                        	LSR A
0B5AC B0 04                     	BCS loc_BANK3_B579
0B5AE                           
0B5AE D6 9E                     	DEC ObjectAnimationTimer - 1, X
0B5B0 D6 9E                     	DEC ObjectAnimationTimer - 1, X
0B5B2                           
0B5B2                           loc_BANK3_B579:
0B5B2 F6 9E                     	INC ObjectAnimationTimer - 1, X
0B5B4                           
0B5B4                           loc_BANK3_B57B:
0B5B4 B5 3C                     	LDA ObjectXVelocity - 1, X
0B5B6 18                        	CLC
0B5B7 7D CB 04                  	ADC ObjectXAcceleration - 1, X
0B5BA 30 04                     	BMI loc_BANK3_B587
0B5BC                           
0B5BC E6 07                     	INC byte_RAM_7
0B5BE E6 08                     	INC byte_RAM_8
0B5C0                           
0B5C0                           loc_BANK3_B587:
0B5C0 20 C5 B5                  	JSR sub_BANK3_B58C
0B5C3                           
0B5C3 CA                        	DEX
0B5C4 60                        	RTS
0B5C5                           
0B5C5                           
0B5C5                           ; =============== S U B R O U T I N E =======================================
0B5C5                           
0B5C5                           sub_BANK3_B58C:
0B5C5 A4 08                     	LDY byte_RAM_8
0B5C7 20 A2 BC                  	JSR sub_BANK3_BB87
0B5CA                           
0B5CA A4 07                     	LDY byte_RAM_7
0B5CC B9 F5 B5                  	LDA byte_BANK3_B5BC, Y
0B5CF A8                        	TAY
0B5D0 A5 00                     	LDA byte_RAM_0
0B5D2 20 FD BC                  	JSR sub_BANK3_BBE2
0B5D5                           
0B5D5 90 09                     	BCC loc_BANK3_B5A7
0B5D7                           
0B5D7 A4 07                     	LDY byte_RAM_7
0B5D9 B9 FD B5                  	LDA byte_BANK3_B5C4, Y
0B5DC 15 5A                     	ORA EnemyCollision - 1, X
0B5DE 95 5A                     	STA EnemyCollision - 1, X
0B5E0                           
0B5E0                           loc_BANK3_B5A7:
0B5E0 E6 07                     	INC byte_RAM_7
0B5E2 E6 08                     	INC byte_RAM_8
0B5E4 60                        	RTS
0B5E5                           
0B5E5                           
0B5E5                           ;
0B5E5                           ; Resets directional collision flags and loads collision data pointer
0B5E5                           ;
0B5E5                           ; Input
0B5E5                           ;   X = enemy index
0B5E5                           ; Output
0B5E5                           ;   byte_RAM_D = previous collision flags
0B5E5                           ;   EnemyCollision = collision flags with up/down/left/right disabled
0B5E5                           ;   A = collision data pointer
0B5E5                           ;   X = X + 1
0B5E5                           ;
0B5E5                           ClearDirectionalCollisionFlags:
0B5E5 E8                        	INX
0B5E6 B5 5A                     	LDA EnemyCollision - 1, X
0B5E8 85 0D                     	STA byte_RAM_D
0B5EA 29 F0                     	AND #CollisionFlags_Damage | CollisionFlags_PlayerOnTop | CollisionFlags_PlayerInsideMaybe | CollisionFlags_80
0B5EC 95 5A                     	STA EnemyCollision - 1, X
0B5EE BC 91 04                  	LDY EnemyArray_492 - 1, X
0B5F1 B9 53 F2                  	LDA byte_BANKF_F000, Y
0B5F4                           
0B5F4                           ClearDirectionalCollisionFlags_Exit:
0B5F4 60                        	RTS
0B5F5                           
0B5F5                           
0B5F5                           byte_BANK3_B5BC:
0B5F5 02                        	.db $02
0B5F6 01                        	.db $01
0B5F7 02                        	.db $02
0B5F8 02                        	.db $02
0B5F9 00                        	.db $00
0B5FA 00                        	.db $00
0B5FB 00                        	.db $00
0B5FC 00                        	.db $00
0B5FD                           
0B5FD                           byte_BANK3_B5C4:
0B5FD 08                        	.db $08
0B5FE 04                        	.db $04
0B5FF 02                        	.db $02
0B600 01                        	.db $01
0B601 08                        	.db $08
0B602 04                        	.db $04
0B603 02                        	.db $02
0B604 01                        	.db $01
0B605                           
0B605                           ; =============== S U B R O U T I N E =======================================
0B605                           
0B605                           sub_BANK3_B5CC:
0B605 A9 00                     	LDA #$00
0B607 9D CC 04                  	STA ObjectXAcceleration, X
0B60A B5 5B                     	LDA EnemyCollision, X
0B60C 29 0F                     	AND #CollisionFlags_Right | CollisionFlags_Left | CollisionFlags_Down | CollisionFlags_Up
0B60E 95 5B                     	STA EnemyCollision, X
0B610 B5 51                     	LDA EnemyState, X
0B612 C9 04                     	CMP #EnemyState_BombExploding
0B614 D0 04                     	BNE loc_BANK3_B5E1
0B616                           
0B616 A0 06                     	LDY #$06
0B618 D0 1E                     	BNE loc_BANK3_B5FF
0B61A                           
0B61A                           loc_BANK3_B5E1:
0B61A C9 07                     	CMP #$07
0B61C F0 13                     	BEQ loc_BANK3_B5F8
0B61E                           
0B61E B4 90                     	LDY ObjectType, X
0B620 C0 1E                     	CPY #Enemy_Egg
0B622 F0 09                     	BEQ loc_BANK3_B5F4
0B624                           
0B624 C0 1A                     	CPY #$1A
0B626 F0 05                     	BEQ loc_BANK3_B5F4
0B628                           
0B628 BC 2F 04                  	LDY EnemyArray_42F, X
0B62B D0 04                     	BNE loc_BANK3_B5F8
0B62D                           
0B62D                           loc_BANK3_B5F4:
0B62D C9 01                     	CMP #$01
0B62F D0 C3                     	BNE ClearDirectionalCollisionFlags_Exit
0B631                           
0B631                           loc_BANK3_B5F8:
0B631 B5 A8                     	LDA ObjectBeingCarriedTimer, X
0B633 D0 BF                     	BNE ClearDirectionalCollisionFlags_Exit
0B635                           
0B635 BC 89 04                  	LDY EnemyArray_489, X
0B638                           
0B638                           loc_BANK3_B5FF:
0B638 B9 28 71                  	LDA unk_RAM_7128, Y
0B63B 85 09                     	STA byte_RAM_9
0B63D A9 00                     	LDA #$00
0B63F 85 00                     	STA byte_RAM_0
0B641 B9 00 71                  	LDA unk_RAM_7100, Y
0B644 10 02                     	BPL loc_BANK3_B60F
0B646                           
0B646 C6 00                     	DEC byte_RAM_0
0B648                           
0B648                           loc_BANK3_B60F:
0B648 18                        	CLC
0B649 75 29                     	ADC ObjectXLo, X
0B64B 85 05                     	STA byte_RAM_5
0B64D B5 15                     	LDA ObjectXHi, X
0B64F 65 00                     	ADC byte_RAM_0
0B651 85 01                     	STA byte_RAM_1
0B653 A5 EC                     	LDA IsHorizontalLevel
0B655 D0 02                     	BNE loc_BANK3_B620
0B657                           
0B657 85 01                     	STA byte_RAM_1
0B659                           
0B659                           loc_BANK3_B620:
0B659 B9 3C 71                  	LDA unk_RAM_713C, Y
0B65C 85 0B                     	STA byte_RAM_B
0B65E A9 00                     	LDA #$00
0B660 85 00                     	STA byte_RAM_0
0B662 B9 14 71                  	LDA unk_RAM_7114, Y
0B665 10 02                     	BPL loc_BANK3_B630
0B667                           
0B667 C6 00                     	DEC byte_RAM_0
0B669                           
0B669                           loc_BANK3_B630:
0B669 18                        	CLC
0B66A 75 33                     	ADC ObjectYLo, X
0B66C 85 07                     	STA byte_RAM_7
0B66E B5 1F                     	LDA ObjectYHi, X
0B670 65 00                     	ADC byte_RAM_0
0B672 85 03                     	STA byte_RAM_3
0B674                           
0B674                           loc_BANK3_B63B:
0B674 86 ED                     	STX byte_RAM_ED
0B676 8A                        	TXA
0B677 D0 21                     	BNE loc_BANK3_B661
0B679                           
0B679 AD C7 04                  	LDA PlayerInRocket
0B67C 0D 1B 04                  	ORA PlayerLock
0B67F D0 06                     	BNE loc_BANK3_B64E
0B681                           
0B681 B5 50                     	LDA EnemyState - 1, X
0B683 C9 02                     	CMP #$02
0B685 90 03                     	BCC loc_BANK3_B651 ; branch if A < $02
0B687                           
0B687                           loc_BANK3_B64E:
0B687 4C 29 B7                  	JMP loc_BANK3_B6F0
0B68A                           
0B68A                           ; ---------------------------------------------------------------------------
0B68A                           
0B68A                           loc_BANK3_B651:
0B68A A4 12                     	LDY byte_RAM_12
0B68C B9 2F 04                  	LDA EnemyArray_42F, Y
0B68F F0 04                     	BEQ loc_BANK3_B65C
0B691                           
0B691 C9 20                     	CMP #$20
0B693 90 F2                     	BCC loc_BANK3_B64E
0B695                           
0B695                           loc_BANK3_B65C:
0B695 A4 9A                     	LDY PlayerDucking
0B697 4C DF B6                  	JMP loc_BANK3_B6A6
0B69A                           
0B69A                           ; ---------------------------------------------------------------------------
0B69A                           
0B69A                           loc_BANK3_B661:
0B69A A4 12                     	LDY byte_RAM_12
0B69C B9 51 00                  	LDA EnemyState, Y
0B69F C9 04                     	CMP #$04
0B6A1 F0 07                     	BEQ loc_BANK3_B671
0B6A3                           
0B6A3 B9 6E 04                  	LDA EnemyArray_46E, Y
0B6A6 29 04                     	AND #%00000100
0B6A8 D0 1F                     	BNE loc_BANK3_B690
0B6AA                           
0B6AA                           loc_BANK3_B671:
0B6AA B5 50                     	LDA EnemyState - 1, X
0B6AC C9 04                     	CMP #EnemyState_BombExploding ; what does this mean for an enemy?
0B6AE D0 04                     	BNE loc_BANK3_B67B
0B6B0                           
0B6B0 A0 06                     	LDY #$06
0B6B2 D0 2B                     	BNE loc_BANK3_B6A6
0B6B4                           
0B6B4                           loc_BANK3_B67B:
0B6B4 C9 07                     	CMP #$07
0B6B6 F0 13                     	BEQ loc_BANK3_B692
0B6B8                           
0B6B8 B4 8F                     	LDY ObjectType - 1, X
0B6BA C0 1E                     	CPY #Enemy_Egg
0B6BC F0 09                     	BEQ loc_BANK3_B68E
0B6BE                           
0B6BE C0 1A                     	CPY #$1A
0B6C0 F0 05                     	BEQ loc_BANK3_B68E
0B6C2                           
0B6C2 BC 2E 04                  	LDY EnemyArray_42F - 1, X
0B6C5 D0 04                     	BNE loc_BANK3_B692
0B6C7                           
0B6C7                           loc_BANK3_B68E:
0B6C7 C9 01                     	CMP #$01
0B6C9                           
0B6C9                           loc_BANK3_B690:
0B6C9 D0 5E                     	BNE loc_BANK3_B6F0
0B6CB                           
0B6CB                           loc_BANK3_B692:
0B6CB B5 A7                     	LDA ObjectBeingCarriedTimer - 1, X
0B6CD D0 5A                     	BNE loc_BANK3_B6F0
0B6CF                           
0B6CF B5 5A                     	LDA EnemyCollision - 1, X
0B6D1 29 10                     	AND #CollisionFlags_Damage
0B6D3 D0 54                     	BNE loc_BANK3_B6F0
0B6D5                           
0B6D5 BD 6D 04                  	LDA EnemyArray_46E - 1, X
0B6D8 29 04                     	AND #$04
0B6DA D0 4D                     	BNE loc_BANK3_B6F0
0B6DC                           
0B6DC BC 88 04                  	LDY EnemyArray_489 - 1, X
0B6DF                           
0B6DF                           loc_BANK3_B6A6:
0B6DF B9 28 71                  	LDA unk_RAM_7128, Y
0B6E2 85 0A                     	STA byte_RAM_A
0B6E4 A9 00                     	LDA #$00
0B6E6 85 00                     	STA byte_RAM_0
0B6E8 B9 00 71                  	LDA unk_RAM_7100, Y
0B6EB 10 02                     	BPL loc_BANK3_B6B6
0B6ED                           
0B6ED C6 00                     	DEC byte_RAM_0
0B6EF                           
0B6EF                           loc_BANK3_B6B6:
0B6EF 18                        	CLC
0B6F0 75 28                     	ADC ObjectXLo - 1, X
0B6F2 85 06                     	STA byte_RAM_6
0B6F4 B5 14                     	LDA ObjectXHi - 1, X
0B6F6 65 00                     	ADC byte_RAM_0
0B6F8 85 02                     	STA byte_RAM_2
0B6FA A5 EC                     	LDA IsHorizontalLevel
0B6FC D0 02                     	BNE loc_BANK3_B6C7
0B6FE                           
0B6FE 85 02                     	STA byte_RAM_2
0B700                           
0B700                           loc_BANK3_B6C7:
0B700 B9 3C 71                  	LDA unk_RAM_713C, Y
0B703 85 0C                     	STA byte_RAM_C
0B705 A9 00                     	LDA #$00
0B707 85 00                     	STA byte_RAM_0
0B709 B9 14 71                  	LDA unk_RAM_7114, Y
0B70C 10 02                     	BPL loc_BANK3_B6D7
0B70E                           
0B70E C6 00                     	DEC byte_RAM_0
0B710                           
0B710                           loc_BANK3_B6D7:
0B710 18                        	CLC
0B711 75 32                     	ADC ObjectYLo - 1, X
0B713 85 08                     	STA byte_RAM_8
0B715 B5 1E                     	LDA ObjectYHi - 1, X
0B717 65 00                     	ADC byte_RAM_0
0B719 85 04                     	STA byte_RAM_4
0B71B 20 2C BE                  	JSR sub_BANK3_BDC5
0B71E                           
0B71E B0 09                     	BCS loc_BANK3_B6F0
0B720                           
0B720 A5 0B                     	LDA byte_RAM_B
0B722 48                        	PHA
0B723 20 32 B7                  	JSR EnemyCollisionBehavior
0B726                           
0B726 68                        	PLA
0B727 85 0B                     	STA byte_RAM_B
0B729                           
0B729                           loc_BANK3_B6F0:
0B729 CA                        	DEX
0B72A 30 03                     	BMI loc_BANK3_B6F6
0B72C                           
0B72C 4C 74 B6                  	JMP loc_BANK3_B63B
0B72F                           
0B72F                           ; ---------------------------------------------------------------------------
0B72F                           
0B72F                           loc_BANK3_B6F6:
0B72F A6 12                     	LDX byte_RAM_12
0B731                           
0B731                           locret_BANK3_B6F8:
0B731 60                        	RTS
0B732                           
0B732                           ; End of function sub_BANK3_B5CC
0B732                           
0B732                           ; =============== S U B R O U T I N E =======================================
0B732                           
0B732                           EnemyCollisionBehavior:
0B732 8A                        	TXA
0B733 D0 0B                     	BNE EnemyCollisionBehavior_ReadCollisionType
0B735                           
0B735 A5 9C                     	LDA HoldingItem
0B737 F0 07                     	BEQ EnemyCollisionBehavior_ReadCollisionType
0B739                           
0B739 AD 2D 04                  	LDA ObjectBeingCarriedIndex
0B73C C5 12                     	CMP byte_RAM_12
0B73E F0 F1                     	BEQ locret_BANK3_B6F8
0B740                           
0B740                           EnemyCollisionBehavior_ReadCollisionType:
0B740 A4 12                     	LDY byte_RAM_12
0B742 B9 90 00                  	LDA ObjectType, Y
0B745 A8                        	TAY
0B746 B9 D1 71                  	LDA unk_RAM_71D1, Y
0B749 20 A6 D9                  	JSR JumpToTableAfterJump
0B74C                           
0B74C 9A B7                     	.dw EnemyCollisionBehavior_Enemy
0B74E E7 B9                     	.dw EnemyCollisionBehavior_ProjectileItem
0B750 59 B9                     	.dw EnemyCollisionBehavior_Object
0B752 E1 B9                     	.dw EnemyCollisionBehavior_POW
0B754 56 B7                     	.dw EnemyCollisionBehavior_Door
0B756                           
0B756                           
0B756                           EnemyCollisionBehavior_Door:
0B756 8A                        	TXA
0B757 D0 40                     	BNE EnemyCollisionBehavior_Exit
0B759                           
0B759 A5 F5                     	LDA Player1JoypadPress
0B75B 29 08                     	AND #ControllerInput_Up
0B75D F0 3A                     	BEQ EnemyCollisionBehavior_Exit
0B75F                           
0B75F A5 5A                     	LDA PlayerCollision
0B761 29 04                     	AND #CollisionFlags_Down
0B763 F0 34                     	BEQ EnemyCollisionBehavior_Exit
0B765                           
0B765 AD 26 04                  	LDA byte_RAM_426
0B768 C9 FA                     	CMP #$FA
0B76A B0 2D                     	BCS EnemyCollisionBehavior_Exit
0B76C                           
0B76C AD BD 04                  	LDA DoorAnimationTimer
0B76F 0D B3 04                  	ORA SubspaceDoorTimer
0B772 D0 25                     	BNE EnemyCollisionBehavior_Exit
0B774                           
0B774 A5 9C                     	LDA HoldingItem
0B776 F0 0A                     	BEQ loc_BANK3_B749
0B778                           
0B778 AC 2D 04                  	LDY ObjectBeingCarriedIndex
0B77B B9 90 00                  	LDA ObjectType, Y
0B77E C9 3D                     	CMP #Enemy_Key
0B780 D0 17                     	BNE EnemyCollisionBehavior_Exit
0B782                           
0B782                           loc_BANK3_B749:
0B782 A4 12                     	LDY byte_RAM_12
0B784 B9 29 00                  	LDA ObjectXLo, Y
0B787 85 28                     	STA PlayerXLo
0B789 B9 15 00                  	LDA ObjectXHi, Y
0B78C 85 14                     	STA PlayerXHi
0B78E 20 76 BD                  	JSR StashPlayerPosition
0B791                           
0B791 A9 04                     	LDA #TransitionType_SubSpace
0B793 8D 34 05                  	STA TransitionType
0B796 4C 0F BD                  	JMP DoorHandling_GoThroughDoor_Bank3
0B799                           
0B799                           EnemyCollisionBehavior_Exit:
0B799 60                        	RTS
0B79A                           
0B79A                           
0B79A                           EnemyCollisionBehavior_Enemy:
0B79A A4 12                     	LDY byte_RAM_12
0B79C 8A                        	TXA
0B79D                           IFDEF PLAYER_STUFF
0B79D D0 03                     	BNE +
0B79F 4C 37 B8                      JMP CheckCollisionWithPlayer
0B7A2                           +
0B7A2                           ENDIF
0B7A2                           IFNDEF PLAYER_STUFF
0B7A2                           	BEQ CheckCollisionWithPlayer
0B7A2                           ENDIF
0B7A2                           
0B7A2 B9 5C 04                  	LDA EnemyArray_45C, Y
0B7A5 1D 5B 04                  	ORA EnemyArray_45C - 1, X
0B7A8 D0 EF                     	BNE EnemyCollisionBehavior_Exit
0B7AA                           
0B7AA B9 2F 04                  	LDA EnemyArray_42F, Y
0B7AD D0 1F                     	BNE loc_BANK3_B792
0B7AF                           
0B7AF B9 51 00                  	LDA EnemyState, Y
0B7B2 C9 04                     	CMP #EnemyState_BombExploding
0B7B4 F0 18                     	BEQ loc_BANK3_B792
0B7B6                           
0B7B6 8A                        	TXA
0B7B7 A8                        	TAY
0B7B8 88                        	DEY
0B7B9 A6 12                     	LDX byte_RAM_12
0B7BB E8                        	INX
0B7BC                           
0B7BC B9 51 00                  	LDA EnemyState, Y
0B7BF C9 04                     	CMP #EnemyState_BombExploding
0B7C1 F0 0B                     	BEQ loc_BANK3_B792
0B7C3                           
0B7C3 B9 2F 04                  	LDA EnemyArray_42F, Y
0B7C6 F0 6A                     	BEQ loc_BANK3_B7E0
0B7C8                           
0B7C8 B5 5A                     	LDA EnemyCollision - 1, X
0B7CA 29 10                     	AND #CollisionFlags_Damage
0B7CC D0 64                     	BNE loc_BANK3_B7E0
0B7CE                           
0B7CE                           loc_BANK3_B792:
0B7CE B9 53 04                  	LDA EnemyArray_453, Y
0B7D1 19 5C 04                  	ORA EnemyArray_45C, Y
0B7D4 D0 53                     	BNE loc_BANK3_B7D7
0B7D6                           
0B7D6 B9 6E 04                  	LDA EnemyArray_46E, Y
0B7D9 29 08                     	AND #%00001000
0B7DB F0 03                     	BEQ loc_BANK3_B7A4
0B7DD                           
0B7DD 20 99 BB                  	JSR PlayBossHurtSound
0B7E0                           
0B7E0                           loc_BANK3_B7A4:
0B7E0 B9 65 04                  	LDA EnemyHP, Y ;; projectile self damage
0B7E3 38                        	SEC
0B7E4 E9 01                     	SBC #$01
0B7E6 99 65 04                  	STA EnemyHP, Y
0B7E9 30 0E                     	BMI loc_BANK3_B7BD
0B7EB                           
0B7EB 20 99 BB                  	JSR PlayBossHurtSound
0B7EE                           
0B7EE A9 21                     	LDA #$21
0B7F0 99 5C 04                  	STA EnemyArray_45C, Y
0B7F3 4A                        	LSR A
0B7F4 99 38 04                  	STA EnemyArray_438, Y
0B7F7 D0 30                     	BNE loc_BANK3_B7D7
0B7F9                           
0B7F9                           loc_BANK3_B7BD:
0B7F9                           IFDEF PLAYER_STUFF
0B7F9 20 02 E8                      JSR HandlePlayerProjectileEffect ;; ?? not the best idea, should handle this in a more organic place
0B7FC                           ENDIF
0B7FC B9 5B 00                  	LDA EnemyCollision, Y
0B7FF 09 10                     	ORA #CollisionFlags_Damage
0B801 99 5B 00                  	STA EnemyCollision, Y
0B804 A9 E0                     	LDA #$E0
0B806 99 47 00                  	STA ObjectYVelocity, Y
0B809 B9 3D 00                  	LDA ObjectXVelocity, Y
0B80C                           IFDEF PLAYER_STUFF
0B80C 30 07                         BMI +
0B80E C9 40                         CMP #$40
0B810 B0 17                         BCS loc_BANK3_B7D7
0B812 4C 1C B8                      JMP ++
0B815 C9 C0                     +   CMP #$C0
0B817 90 10                         BCC loc_BANK3_B7D7
0B819 4C 1C B8                      JMP ++
0B81C                           ++
0B81C B9 3D 00                  	LDA ObjectXVelocity, Y
0B81F                           ENDIF
0B81F 85 00                     	STA byte_RAM_0
0B821 0A                        	ASL A
0B822 66 00                     	ROR byte_RAM_0
0B824 A5 00                     	LDA byte_RAM_0
0B826 99 3D 00                  	STA ObjectXVelocity, Y
0B829                           
0B829                           loc_BANK3_B7D7:
0B829 B5 8F                     	LDA ObjectType - 1, X
0B82B C9 32                     	CMP #Enemy_VegetableSmall
0B82D B0 03                     	BCS loc_BANK3_B7E0
0B82F 20 3A BB                  	JSR sub_BANK3_BA5D
0B832                           
0B832                           loc_BANK3_B7E0:
0B832 A6 ED                     	LDX byte_RAM_ED
0B834 60                        	RTS
0B835                           
0B835                           
0B835                           ; ---------------------------------------------------------------------------
0B835                           InvincibilityKill_VelocityX:
0B835 F8                        	.db $F8 ; to the left
0B836 08                        	.db $08 ; to the right
0B837                           ; ---------------------------------------------------------------------------
0B837                           
0B837                           CheckCollisionWithPlayer:
0B837                           IFNDEF PLAYER_STUFF
0B837                           	LDA byte_RAM_EE
0B837                           	AND #CollisionFlags_Up
0B837                           	BNE CheckCollisionWithPlayer_Exit
0B837                           ENDIF
0B837                           IFDEF PLAYER_STUFF
0B837 A5 EE                     	LDA byte_RAM_EE
0B839 29 08                     	AND #CollisionFlags_Up
0B83B F0 03                     	BEQ + 
0B83D 4C A6 B8                      JMP CheckCollisionWithPlayer_Exit
0B840                           +
0B840 B9 10 76                  	LDA Enemy_Fireball_Hits, Y
0B843 10 16                         BPL +
0B845 B9 6E 04                  	LDA EnemyArray_46E, Y
0B848 29 01                     	AND #%00000001
0B84A D0 0C                     	BNE ++
0B84C 20 B6 BB                  	JSR DetermineCollisionFlags
0B84F A5 0F                     	LDA byte_RAM_F
0B851 29 0B                     	AND #$0B
0B853 D0 03                         BNE ++
0B855 4C 1E B9                      JMP CheckCollisionWithPlayer_StandingOnHead
0B858                           ++
0B858 4C A6 B8                      JMP CheckCollisionWithPlayer_Exit
0B85B                           +
0B85B                           ENDIF
0B85B                           
0B85B                           	; check if it's a heart
0B85B B9 90 00                  	LDA ObjectType, Y ;; Enemy_Heart
0B85E D0 2A                     	BNE CheckCollisionWithPlayer_NotHeart
0B860                           
0B860                           	; accept the heart into your life
0B860 99 51 00                  	STA EnemyState, Y
0B863 A9 04                     	LDA #SoundEffect1_CherryGet
0B865 8D 02 06                  	STA SoundEffectQueue1
0B868                           IFDEF PLAYER_STUFF
0B868 AD C3 04                      LDA PlayerMaxHealth
0B86B 30 1A                         BMI +
0B86D AD C2 04                      LDA PlayerHealth
0B870 69 10                         ADC #$10
0B872 8D C2 04                      STA PlayerHealth
0B875 AD C3 04                      LDA PlayerMaxHealth
0B878 0A                            ASL
0B879 0A                            ASL
0B87A 0A                            ASL
0B87B 0A                            ASL
0B87C 18                            CLC
0B87D 69 1F                         ADC #$1F
0B87F CD C2 04                      CMP PlayerHealth
0B882 B0 03                         BCS +
0B884 8D C2 04                      STA PlayerHealth
0B887                           +
0B887 4C A6 B8                      JMP CheckCollisionWithPlayer_Exit
0B88A                           ENDIF
0B88A                           IFNDEF PLAYER_STUFF
0B88A                           	LDY PlayerMaxHealth
0B88A                           	LDA PlayerHealth
0B88A                           	CLC
0B88A                           	ADC #$10
0B88A                           	STA PlayerHealth
0B88A                           	CMP PlayerHealthValueByHeartCount, Y
0B88A                           	BCC CheckCollisionWithPlayer_Exit
0B88A                           
0B88A                           	JMP RestorePlayerToFullHealth
0B88A                           ENDIF
0B88A                           
0B88A                           ; ---------------------------------------------------------------------------
0B88A                           
0B88A                           CheckCollisionWithPlayer_NotHeart:
0B88A C9 17                     	CMP #Enemy_Phanto
0B88C D0 05                     	BNE CheckCollisionWithPlayer_NotPhanto
0B88E                           
0B88E AC BC 05                  	LDY PhantoActivateTimer
0B891 D0 13                     	BNE CheckCollisionWithPlayer_Exit
0B893                           
0B893                           CheckCollisionWithPlayer_NotPhanto:
0B893 C9 45                     	CMP #Enemy_Starman
0B895 D0 10                     	BNE CheckCollisionWithPlayer_NotStarman
0B897                           
0B897 A9 3F                     	LDA #$3F
0B899 8D E0 04                  	STA StarInvincibilityTimer
0B89C A9 10                     	LDA #Music1_Invincible
0B89E 8D 00 06                  	STA MusicQueue1
0B8A1 A9 00                     	LDA #EnemyState_Inactive
0B8A3 99 51 00                  	STA EnemyState, Y
0B8A6                           
0B8A6                           CheckCollisionWithPlayer_Exit:
0B8A6 60                        	RTS
0B8A7                           
0B8A7                           ; ---------------------------------------------------------------------------
0B8A7                           
0B8A7                           CheckCollisionWithPlayer_NotStarman:
0B8A7 C9 28                     	CMP #Enemy_WhaleSpout
0B8A9 D0 17                     	BNE CheckCollisionWithPlayer_NotWhaleSpout
0B8AB                           
0B8AB B9 79 00                  	LDA EnemyVariable, Y
0B8AE C9 DC                     	CMP #$DC
0B8B0 B0 0F                     	BCS CheckCollisionWithPlayer_Exit2
0B8B2                           
0B8B2 AD E0 04                  	LDA StarInvincibilityTimer
0B8B5 F0 44                     	BEQ CheckCollisionWithPlayer_NotInvincible
0B8B7                           
0B8B7 A9 DC                     	LDA #$DC
0B8B9 99 79 00                  	STA EnemyVariable, Y
0B8BC A9 00                     	LDA #$00
0B8BE 99 47 00                  	STA ObjectYVelocity, Y
0B8C1                           
0B8C1                           CheckCollisionWithPlayer_Exit2:
0B8C1 60                        	RTS
0B8C2                           
0B8C2                           ; ---------------------------------------------------------------------------
0B8C2                           
0B8C2                           CheckCollisionWithPlayer_NotWhaleSpout:
0B8C2 C9 2C                     	CMP #Enemy_Wart
0B8C4 D0 04                     	BNE CheckCollisionWithPlayer_NotWart
0B8C6                           
0B8C6 B5 B1                     	LDA EnemyArray_B1, X
0B8C8 D0 F7                     	BNE CheckCollisionWithPlayer_Exit2
0B8CA                           
0B8CA                           CheckCollisionWithPlayer_NotWart:
0B8CA AC E0 04                  	LDY StarInvincibilityTimer
0B8CD F0 2C                     	BEQ CheckCollisionWithPlayer_NotInvincible
0B8CF                           
0B8CF                           	; player is invincible
0B8CF A6 12                     	LDX byte_RAM_12
0B8D1 C9 27                     	CMP #Enemy_AutobombFire
0B8D3 F0 04                     	BEQ CheckCollisionWithPlayer_Poof
0B8D5                           
0B8D5 C9 20                     	CMP #Enemy_Fireball
0B8D7 D0 0B                     	BNE CheckCollisionWithPlayer_KillEnemy
0B8D9                           
0B8D9                           ; turn into a puff of smoke
0B8D9                           CheckCollisionWithPlayer_Poof:
0B8D9 A9 00                     	LDA #%00000000
0B8DB 9D 6E 04                  	STA EnemyArray_46E, X
0B8DE 20 9C 9A                  	JSR EnemyBehavior_Shell_Destroy
0B8E1                           
0B8E1 4C F6 B8                  	JMP loc_BANK3_B878
0B8E4                           
0B8E4                           ; ---------------------------------------------------------------------------
0B8E4                           
0B8E4                           ; die and fall off
0B8E4                           CheckCollisionWithPlayer_KillEnemy:
0B8E4 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
0B8E7                           
0B8E7 B9 35 B8                  	LDA InvincibilityKill_VelocityX, Y
0B8EA 95 3D                     	STA ObjectXVelocity, X
0B8EC A9 E0                     	LDA #$E0
0B8EE 95 47                     	STA ObjectYVelocity, X
0B8F0 B5 5B                     	LDA EnemyCollision, X
0B8F2 09 10                     	ORA #CollisionFlags_Damage
0B8F4 95 5B                     	STA EnemyCollision, X
0B8F6                           
0B8F6                           loc_BANK3_B878:
0B8F6 A6 ED                     	LDX byte_RAM_ED
0B8F8 A4 12                     	LDY byte_RAM_12
0B8FA 60                        	RTS
0B8FB                           
0B8FB                           ; ---------------------------------------------------------------------------
0B8FB                           
0B8FB                           CheckCollisionWithPlayer_NotInvincible:
0B8FB A4 12                     	LDY byte_RAM_12
0B8FD B9 51 00                  	LDA EnemyState, Y
0B900 C9 04                     	CMP #EnemyState_BombExploding
0B902 F0 17                     	BEQ CheckCollisionWithPlayer_HurtPlayer
0B904                           
0B904                           	; should we damage the player for jumping on top?
0B904 B9 6E 04                  	LDA EnemyArray_46E, Y
0B907 29 01                     	AND #%00000001
0B909 D0 10                     	BNE CheckCollisionWithPlayer_HurtPlayer
0B90B                           
0B90B                           IFDEF PLAYER_STUFF
0B90B 20 58 EB                      JSR JumpAttack
0B90E A6 ED                     	LDX byte_RAM_ED
0B910 A4 12                     	LDY byte_RAM_12
0B912                           ENDIF
0B912                           
0B912                           	; let player land on top
0B912 20 B6 BB                  	JSR DetermineCollisionFlags
0B915                           
0B915 A5 0F                     	LDA byte_RAM_F
0B917 29 0B                     	AND #$0B
0B919 F0 03                     	BEQ CheckCollisionWithPlayer_StandingOnHead
0B91B                           
0B91B                           CheckCollisionWithPlayer_HurtPlayer:
0B91B 4C 89 BA                  	JMP DamagePlayer
0B91E                           
0B91E                           
0B91E                           CheckCollisionWithPlayer_StandingOnHead:
0B91E A9 00                     	LDA #$00
0B920 85 99                     	STA PlayerInAir
0B922 A6 12                     	LDX byte_RAM_12
0B924 B5 5B                     	LDA EnemyCollision, X
0B926 09 20                     	ORA #CollisionFlags_PlayerOnTop
0B928 95 5B                     	STA EnemyCollision, X
0B92A                           
0B92A                           
0B92A                           	; can you even lift
0B92A BD 6E 04                  	LDA EnemyArray_46E, X
0B92D 29 02                     	AND #%00000010
0B92F D0 22                     	BNE CheckCollisionWithPlayer_NoLift
0B931                           
0B931                           	; check B button
0B931 24 F5                     	BIT Player1JoypadPress
0B933 50 1E                     	BVC CheckCollisionWithPlayer_NoLift
0B935                           
0B935                           	; bail if we already have an item or are ducking
0B935 A5 9C                     	LDA HoldingItem
0B937 05 9A                     	ORA PlayerDucking
0B939 D0 18                     	BNE CheckCollisionWithPlayer_NoLift
0B93B                           
0B93B 95 5B                     	STA EnemyCollision, X
0B93D 8E 2D 04                  	STX ObjectBeingCarriedIndex
0B940 9D 4A 04                  	STA ObjectShakeTimer, X
0B943 A9 07                     	LDA #$07
0B945 95 A8                     	STA ObjectBeingCarriedTimer, X
0B947 20 42 BD                  	JSR SetPlayerStateLifting
0B94A                           
0B94A                           	; leave a flying carpet behind if we're picking up pidgit
0B94A B5 90                     	LDA ObjectType, X
0B94C C9 12                     	CMP #Enemy_Pidgit
0B94E D0 03                     	BNE CheckCollisionWithPlayer_NoLift
0B950                           
0B950 20 7D A5                  	JSR CreateFlyingCarpet
0B953                           
0B953                           CheckCollisionWithPlayer_NoLift:
0B953                           IFDEF PLAYER_STUFF
0B953 20 30 DF                      JSR Projectile2to1
0B956                           ENDIF
0B956 A6 ED                     	LDX byte_RAM_ED
0B958 60                        	RTS
0B959                           
0B959                           ; End of function CheckCollisionWithPlayer_StandingOnHead
0B959                           
0B959                           ; ---------------------------------------------------------------------------
0B959                           
0B959                           EnemyCollisionBehavior_Object:
0B959 A4 12                     	LDY byte_RAM_12
0B95B                           IFDEF PLAYER_STUFF
0B95B 20 2E E9                      JSR ItemCollisionCustom
0B95E                           ENDIF
0B95E 8A                        	TXA
0B95F F0 2F                     	BEQ loc_BANK3_B905
0B961                           
0B961 B9 90 00                  	LDA ObjectType, Y
0B964 C9 3D                     	CMP #Enemy_Key
0B966 D0 07                     	BNE loc_BANK3_B8E4
0B968                           
0B968 B9 5B 00                  	LDA EnemyCollision, Y
0B96B 29 04                     	AND #CollisionFlags_Down
0B96D D0 1E                     	BNE locret_BANK3_B902
0B96F                           
0B96F                           loc_BANK3_B8E4:
0B96F B9 2F 04                  	LDA EnemyArray_42F, Y
0B972 D0 16                     	BNE loc_BANK3_B8FF
0B974                           
0B974 20 B6 BB                  	JSR DetermineCollisionFlags
0B977                           
0B977 A5 0F                     	LDA byte_RAM_F
0B979 35 6E                     	AND EnemyMovementDirection - 1, X
0B97B F0 06                     	BEQ loc_BANK3_B8F8
0B97D                           
0B97D CA                        	DEX
0B97E 20 56 A1                  	JSR EnemyBehavior_TurnAround
0B981                           
0B981 A6 ED                     	LDX byte_RAM_ED
0B983                           
0B983                           loc_BANK3_B8F8:
0B983 20 52 BC                  	JSR sub_BANK3_BB31
0B986                           
0B986 C0 00                     	CPY #$00
0B988 F0 03                     	BEQ locret_BANK3_B902
0B98A                           
0B98A                           loc_BANK3_B8FF:
0B98A 4C 79 BA                  	JMP loc_BANK3_B9EA
0B98D                           
0B98D                           ; ---------------------------------------------------------------------------
0B98D                           
0B98D                           locret_BANK3_B902:
0B98D 60                        	RTS
0B98E                           
0B98E                           ; ---------------------------------------------------------------------------
0B98E                           unk_BANK3_B903:
0B98E 08                        	.db $08
0B98F 04                        	.db $04
0B990                           ; ---------------------------------------------------------------------------
0B990                           
0B990                           ; collision with items that the player can stand on
0B990                           loc_BANK3_B905:
0B990 B9 5B 00                  	LDA EnemyCollision, Y
0B993 09 40                     	ORA #CollisionFlags_PlayerInsideMaybe
0B995 99 5B 00                  	STA EnemyCollision, Y
0B998 20 B6 BB                  	JSR DetermineCollisionFlags
0B99B                           
0B99B A5 0F                     	LDA byte_RAM_F
0B99D 25 6E                     	AND PlayerMovementDirection
0B99F F0 03                     	BEQ loc_BANK3_B919
0B9A1                           
0B9A1 20 26 BD                  	JSR PlayerHorizontalCollision
0B9A4                           
0B9A4                           loc_BANK3_B919:
0B9A4 A5 0F                     	LDA byte_RAM_F
0B9A6 29 04                     	AND #$04
0B9A8 F0 03                     	BEQ loc_BANK3_B922
0B9AA                           
0B9AA 20 1E B9                  	JSR CheckCollisionWithPlayer_StandingOnHead
0B9AD                           
0B9AD                           loc_BANK3_B922:
0B9AD 20 52 BC                  	JSR sub_BANK3_BB31
0B9B0                           
0B9B0 C0 01                     	CPY #$01
0B9B2 D0 2C                     	BNE locret_BANK3_B955
0B9B4                           
0B9B4 A4 12                     	LDY byte_RAM_12
0B9B6 B9 47 00                  	LDA ObjectYVelocity, Y
0B9B9 F0 25                     	BEQ locret_BANK3_B955
0B9BB                           
0B9BB 29 80                     	AND #$80
0B9BD 0A                        	ASL A
0B9BE 2A                        	ROL A
0B9BF A8                        	TAY
0B9C0 A5 0F                     	LDA byte_RAM_F
0B9C2 39 8E B9                  	AND unk_BANK3_B903, Y
0B9C5 F0 19                     	BEQ locret_BANK3_B955
0B9C7                           
0B9C7 A4 12                     	LDY byte_RAM_12
0B9C9 B9 47 00                  	LDA ObjectYVelocity, Y
0B9CC 49 FF                     	EOR #$FF
0B9CE 18                        	CLC
0B9CF 69 01                     	ADC #$01
0B9D1 99 47 00                  	STA ObjectYVelocity, Y
0B9D4 A9 01                     	LDA #$01
0B9D6 85 9A                     	STA PlayerDucking
0B9D8 A9 04                     	LDA #$04
0B9DA 85 C7                     	STA PlayerAnimationFrame
0B9DC A9 10                     	LDA #$10
0B9DE 85 82                     	STA PlayerStateTimer
0B9E0                           
0B9E0                           locret_BANK3_B955:
0B9E0 60                        	RTS
0B9E1                           
0B9E1                           EnemyCollisionBehavior_POW:
0B9E1 8A                        	TXA
0B9E2 F0 FC                     	BEQ locret_BANK3_B955
0B9E4 4C 79 BA                  	JMP loc_BANK3_B9EA
0B9E7                           
0B9E7                           EnemyCollisionBehavior_ProjectileItem:
0B9E7 A4 12                     	LDY byte_RAM_12
0B9E9 8A                        	TXA
0B9EA                           
0B9EA                           loc_BANK3_B95F:
0B9EA D0 32                     	BNE loc_BANK3_B993
0B9EC                           
0B9EC B9 51 00                  	LDA EnemyState, Y
0B9EF                           
0B9EF                           loc_BANK3_B964:
0B9EF C9 04                     	CMP #$04
0B9F1 D0 06                     	BNE loc_BANK3_B96E
0B9F3                           
0B9F3 AD E0 04                  	LDA StarInvincibilityTimer
0B9F6 F0 23                     	BEQ loc_BANK3_B990
0B9F8                           
0B9F8                           locret_BANK3_B96D:
0B9F8 60                        	RTS
0B9F9                           
0B9F9                           ; ---------------------------------------------------------------------------
0B9F9                           
0B9F9                           loc_BANK3_B96E:
0B9F9 20 B6 BB                  	JSR DetermineCollisionFlags
0B9FC                           
0B9FC A5 0F                     	LDA byte_RAM_F
0B9FE 29 08                     	AND #$08
0BA00 F0 10                     	BEQ loc_BANK3_B987
0BA02                           
0BA02 A5 9C                     	LDA HoldingItem
0BA04 D0 F2                     	BNE locret_BANK3_B96D
0BA06                           
0BA06 A4 12                     	LDY byte_RAM_12
0BA08 8C 2D 04                  	STY ObjectBeingCarriedIndex
0BA0B A9 01                     	LDA #$01
0BA0D 99 A8 00                  	STA ObjectBeingCarriedTimer, Y
0BA10 E6 9C                     	INC HoldingItem
0BA12                           
0BA12                           loc_BANK3_B987:
0BA12 A5 0F                     	LDA byte_RAM_F
0BA14 29 04                     	AND #$04
0BA16 F0 E0                     	BEQ locret_BANK3_B96D
0BA18                           
0BA18 4C 1E B9                  	JMP CheckCollisionWithPlayer_StandingOnHead
0BA1B                           
0BA1B                           ; ---------------------------------------------------------------------------
0BA1B                           
0BA1B                           loc_BANK3_B990:
0BA1B 4C 89 BA                  	JMP DamagePlayer
0BA1E                           
0BA1E                           ; ---------------------------------------------------------------------------
0BA1E                           
0BA1E                           loc_BANK3_B993:
0BA1E B5 8F                     	LDA ObjectType - 1, X
0BA20 C9 2C                     	CMP #Enemy_Wart
0BA22 D0 22                     	BNE loc_BANK3_B9B7
0BA24                           
0BA24 B5 85                     	LDA EnemyTimer - 1, X
0BA26 F0 60                     	BEQ locret_BANK3_B9F9
0BA28                           
0BA28                           IFNDEF PLAYER_STUFF
0BA28                           	LDA #$00
0BA28                           	STA EnemyState, Y
0BA28                           	JSR sub_BANK3_BA5D
0BA28                           ENDIF
0BA28                           IFDEF PLAYER_STUFF
0BA28 8A                            TXA
0BA29 48                            PHA
0BA2A 98                            TYA
0BA2B AA                            TAX
0BA2C 20 39 8A                      JSR EnemyDestroy
0BA2F 68                            PLA
0BA30 AA                            TAX
0BA31 20 3A BB                  	JSR sub_BANK3_BA5D
0BA34                           ENDIF
0BA34                           
0BA34 A9 60                     	LDA #$60
0BA36 9D 5B 04                  	STA EnemyArray_45C - 1, X
0BA39 4A                        	LSR A
0BA3A 9D 37 04                  	STA EnemyArray_438 - 1, X
0BA3D BD 64 04                  	LDA EnemyHP - 1, X
0BA40 D0 03                     	BNE locret_BANK3_B9B6
0BA42                           
0BA42 EE FA 04                  	INC ScrollXLock
0BA45                           
0BA45                           locret_BANK3_B9B6:
0BA45 60                        	RTS
0BA46                           
0BA46                           ; ---------------------------------------------------------------------------
0BA46                           
0BA46                           loc_BANK3_B9B7:
0BA46 C9 32                     	CMP #$32
0BA48 B0 FB                     	BCS locret_BANK3_B9B6
0BA4A                           
0BA4A C9 11                     	CMP #$11
0BA4C D0 0B                     	BNE loc_BANK3_B9CA
0BA4E                           
0BA4E A9 05                     	LDA #$05
0BA50 99 51 00                  	STA EnemyState, Y
0BA53 A9 1E                     	LDA #$1E
0BA55 99 86 00                  	STA EnemyTimer, Y
0BA58 60                        	RTS
0BA59                           
0BA59                           ; ---------------------------------------------------------------------------
0BA59                           
0BA59                           loc_BANK3_B9CA:
0BA59 B9 51 00                  	LDA EnemyState, Y
0BA5C C9 04                     	CMP #$04
0BA5E F0 1B                     	BEQ loc_BANK3_B9EC
0BA60                           
0BA60 B9 90 00                  	LDA ObjectType, Y
0BA63 C9 35                     	CMP #Enemy_Shell
0BA65 F0 12                     	BEQ loc_BANK3_B9EA
0BA67                           
0BA67 A9 E8                     	LDA #$E8
0BA69 99 47 00                  	STA ObjectYVelocity, Y
0BA6C 86 00                     	STX byte_RAM_0
0BA6E B6 3D                     	LDX ObjectXVelocity, Y
0BA70 30 02                     	BMI loc_BANK3_B9E5
0BA72                           
0BA72 A9 18                     	LDA #$18
0BA74                           
0BA74                           loc_BANK3_B9E5:
0BA74 99 3D 00                  	STA ObjectXVelocity, Y
0BA77 A6 00                     	LDX byte_RAM_0
0BA79                           
0BA79                           loc_BANK3_B9EA:
0BA79 A4 12                     	LDY byte_RAM_12
0BA7B                           
0BA7B                           loc_BANK3_B9EC:
0BA7B 20 3A BB                  	JSR sub_BANK3_BA5D
0BA7E                           
0BA7E D0 08                     	BNE locret_BANK3_B9F9
0BA80                           
0BA80 B5 3C                     	LDA ObjectXVelocity - 1, X
0BA82 0A                        	ASL A
0BA83 76 3C                     	ROR ObjectXVelocity - 1, X
0BA85 0A                        	ASL A
0BA86 76 3C                     	ROR ObjectXVelocity - 1, X
0BA88                           
0BA88                           locret_BANK3_B9F9:
0BA88 60                        	RTS
0BA89                           
0BA89                           ; ---------------------------------------------------------------------------
0BA89                           
0BA89                           DamagePlayer:
0BA89                           IFDEF PLAYER_STUFF
0BA89 8A                            TXA
0BA8A 48                            PHA
0BA8B 98                            TYA
0BA8C 48                            PHA
0BA8D B9 90 00                      LDA ObjectType, Y
0BA90 C9 20                         CMP #Enemy_Fireball
0BA92 F0 1B                         BEQ ++
0BA94 C9 2B                         CMP #Enemy_FryguySplit
0BA96 F0 17                         BEQ ++
0BA98 C9 2A                         CMP #Enemy_Fryguy
0BA9A F0 13                         BEQ ++
0BA9C C9 2E                         CMP #Enemy_Spark1
0BA9E F0 19                         BEQ +++
0BAA0 C9 2F                         CMP #Enemy_Spark2
0BAA2 F0 15                         BEQ +++
0BAA4 C9 30                         CMP #Enemy_Spark3
0BAA6 F0 11                         BEQ +++
0BAA8 C9 31                         CMP #Enemy_Spark4
0BAAA F0 0D                         BEQ +++
0BAAC 4C C7 BA                      JMP +
0BAAF A2 20                     ++  LDX #CustomBitFlag_ImmuneFire
0BAB1 20 45 F1                      JSR ChkFlagPlayer
0BAB4 D0 11                         BNE +
0BAB6 4C C0 BA                      JMP ImmuneSuccess
0BAB9 A2 40                     +++ LDX #CustomBitFlag_ImmuneElec
0BABB 20 45 F1                      JSR ChkFlagPlayer
0BABE D0 07                         BNE +
0BAC0                           ImmuneSuccess:
0BAC0 68                            PLA
0BAC1 A8                            TAY
0BAC2 68                            PLA
0BAC3 AA                            TAX
0BAC4 4C 0E BB                      JMP locret_BANK3_BA31
0BAC7 68                        +   PLA
0BAC8 A8                            TAY
0BAC9 68                            PLA
0BACA AA                            TAX
0BACB                           DamagePlayerNoImmune:
0BACB                           ENDIF
0BACB A5 85                     	LDA DamageInvulnTime
0BACD D0 3F                     	BNE locret_BANK3_BA31
0BACF                               ;; add curse depletion   
0BACF                               ;; add "last destination" to prevent curse depletion
0BACF                               ;; other means of curse depletion?
0BACF AD C2 04                  	LDA PlayerHealth
0BAD2 38                        	SEC
0BAD3 E9 10                     	SBC #$10
0BAD5 90 38                     	BCC loc_BANK3_BA32
0BAD7 8D C2 04                  	STA PlayerHealth
0BADA A0 7F                     	LDY #$7F
0BADC 84 85                     	STY DamageInvulnTime
0BADE A0 00                     	LDY #$00
0BAE0 84 46                     	STY PlayerYVelocity
0BAE2 84 3C                     	STY PlayerXVelocity
0BAE4                           IFDEF PLAYER_STUFF
0BAE4 A4 8F                         LDY CurrentCharacter
0BAE6 B9 C9 EE                      LDA DokiMode, Y
0BAE9 29 01                         AND #CustomCharFlag_Shrinking
0BAEB F0 07                         BEQ +
0BAED AD C2 04                      LDA PlayerHealth
0BAF0 C9 10                     	CMP #$10
0BAF2 90 15                     	BCC loc_BANK3_BA2C
0BAF4                           +
0BAF4                           ENDIF
0BAF4                           IFNDEF PLAYER_STUFF
0BAF4                           	CMP #$10
0BAF4                           	BCC loc_BANK3_BA2C
0BAF4                           ENDIF
0BAF4                           
0BAF4 AD 28 04                  	LDA PlayerScreenX
0BAF7 38                        	SEC
0BAF8 ED 29 04                  	SBC SpriteTempScreenX
0BAFB 0A                        	ASL A
0BAFC 0A                        	ASL A
0BAFD 85 3C                     	STA PlayerXVelocity
0BAFF A9 C0                     	LDA #$C0
0BB01 A4 46                     	LDY PlayerYVelocity
0BB03 10 02                     	BPL loc_BANK3_BA2A
0BB05                           
0BB05 A9 00                     	LDA #$00
0BB07                           
0BB07                           loc_BANK3_BA2A:
0BB07 85 46                     	STA PlayerYVelocity
0BB09                           
0BB09                           loc_BANK3_BA2C:
0BB09 A9 04                     	LDA #DPCM_PlayerHurt
0BB0B 8D 01 06                  	STA DPCMQueue
0BB0E                           
0BB0E                           locret_BANK3_BA31:
0BB0E 60                        	RTS
0BB0F                           
0BB0F                           ; ---------------------------------------------------------------------------
0BB0F                           
0BB0F                           loc_BANK3_BA32:
0BB0F 8A                        	TXA
0BB10                           
0BB10                           loc_BANK3_BA33:
0BB10 48                        	PHA
0BB11 A6 12                     	LDX byte_RAM_12
0BB13 B5 90                     	LDA ObjectType, X
0BB15 C9 0F                     	CMP #Enemy_BeezoDiving
0BB17 B0 0C                     	BCS loc_BANK3_BA48
0BB19                           
0BB19 20 E0 A0                  	JSR EnemyFindWhichSidePlayerIsOn
0BB1C                           
0BB1C C8                        	INY
0BB1D 98                        	TYA
0BB1E D5 6F                     	CMP EnemyMovementDirection, X
0BB20 F0 03                     	BEQ loc_BANK3_BA48
0BB22                           
0BB22 20 56 A1                  	JSR EnemyBehavior_TurnAround
0BB25                           
0BB25                           loc_BANK3_BA48:
0BB25 68                        	PLA
0BB26 AA                        	TAX
0BB27 A9 C0                     	LDA #$C0
0BB29 85 46                     	STA PlayerYVelocity
0BB2B                           
0BB2B                           loc_BANK3_BA4E:
0BB2B A9 20                     	LDA #$20
0BB2D 85 82                     	STA PlayerStateTimer
0BB2F A4 12                     	LDY byte_RAM_12
0BB31 30 04                     	BMI loc_BANK3_BA5A
0BB33                           
0BB33 4A                        	LSR A
0BB34 99 38 04                  	STA EnemyArray_438, Y
0BB37                           
0BB37                           loc_BANK3_BA5A:
0BB37 4C C3 FA                  	JMP KillPlayer
0BB3A                           
0BB3A                           ; =============== S U B R O U T I N E =======================================
0BB3A                           
0BB3A                           ; Damage enemy
0BB3A                           sub_BANK3_BA5D:
0BB3A BD 52 04                  	LDA EnemyArray_453 - 1, X
0BB3D 1D 5B 04                  	ORA EnemyArray_45C - 1, X
0BB40 D0 73                     	BNE locret_BANK3_BA94
0BB42                           
0BB42 BD 6D 04                  	LDA EnemyArray_46E - 1, X
0BB45 29 08                     	AND #Enemy_Ostro
0BB47 F0 03                     	BEQ EnemyTakeDamage
0BB49                           
0BB49 20 99 BB                  	JSR PlayBossHurtSound
0BB4C                           
0BB4C                           EnemyTakeDamage:
0BB4C                           IFNDEF PLAYER_STUFF
0BB4C                           	DEC EnemyHP - 1, X ; Subtract hit point
0BB4C                           ENDIF
0BB4C                           IFDEF PLAYER_STUFF
0BB4C B9 10 76                  	LDA Is_Player_Projectile, Y
0BB4F 10 21                         BPL +
0BB51 BD 9A 04                  	LDA unk_RAM_49B - 1, X ; boss
0BB54 D0 0A                         BNE ++
0BB56 B9 20 7D                      LDA MoreEnemyInfo, Y
0BB59 C9 03                         CMP #$3 ;; freeze
0BB5B D0 15                         BNE +
0BB5D FE 0F 76                      INC Enemy_Fireball_Hits - 1, X ; boss hits
0BB60                           ++
0BB60                           ApplyFireHit:
0BB60 FE 0F 76                      INC Enemy_Fireball_Hits - 1, X ; boss hits
0BB63 BD 0F 76                      LDA Enemy_Fireball_Hits - 1, X
0BB66 C9 04                         CMP #$4
0BB68 D0 2F                         BNE PlayBossHurtSound 
0BB6A A9 00                         LDA #0
0BB6C 9D 0F 76                      STA Enemy_Fireball_Hits - 1, X
0BB6F 4C 88 BB                      JMP ++
0BB72                           +
0BB72 B9 3D 00                  	LDA ObjectXVelocity, Y
0BB75 10 07                         BPL +
0BB77 C9 A8                         CMP #$A8
0BB79 90 0A                         BCC +++ 
0BB7B 4C 88 BB                      JMP ++
0BB7E C9 58                     +   CMP #$58
0BB80 B0 03                         BCS +++
0BB82 4C 88 BB                      JMP ++
0BB85                           +++ 
0BB85 DE 64 04                      DEC EnemyHP - 1, X
0BB88                           ++  
0BB88 20 80 E7                      JSR FreezeEntity
0BB8B                           DamageEnemy_NoProjectile:
0BB8B DE 64 04                      DEC EnemyHP - 1, X
0BB8E                           ENDIF
0BB8E 30 0F                     	BMI EnemyKnockout
0BB90                           
0BB90 A9 21                     	LDA #$21 ; Flash
0BB92 9D 5B 04                  	STA EnemyArray_45C - 1, X
0BB95 4A                        	LSR A
0BB96                           
0BB96                           loc_BANK3_BA7A:
0BB96 9D 37 04                  	STA EnemyArray_438 - 1, X
0BB99                           
0BB99                           ; End of function sub_BANK3_BA5D
0BB99                           
0BB99                           PlayBossHurtSound:
0BB99 A9 40                     	LDA #DPCM_BossHurt
0BB9B 8D 01 06                  	STA DPCMQueue
0BB9E 60                        	RTS
0BB9F                           
0BB9F                           ; ---------------------------------------------------------------------------
0BB9F                           
0BB9F                           EnemyKnockout:
0BB9F                           IFDEF PLAYER_STUFF
0BB9F BD 0F 76                  	LDA Enemy_Fireball_Hits - 1, X
0BBA2 30 11                         BMI locret_BANK3_BA94
0BBA4                           ENDIF
0BBA4 B5 5A                     	LDA EnemyCollision - 1, X
0BBA6 09 10                     	ORA #CollisionFlags_Damage
0BBA8 95 5A                     	STA EnemyCollision - 1, X
0BBAA A9 E0                     	LDA #$E0
0BBAC 95 46                     	STA ObjectYVelocity - 1, X
0BBAE B9 3D 00                  	LDA ObjectXVelocity, Y
0BBB1 95 3C                     	STA ObjectXVelocity - 1, X
0BBB3 A9 00                     	LDA #$00
0BBB5                           
0BBB5                           locret_BANK3_BA94:
0BBB5 60                        	RTS
0BBB6                           
0BBB6                           ;
0BBB6                           ; Determines the collision flags for two objects
0BBB6                           ;
0BBB6                           ; Input:
0BBB6                           ;   RAM_12 = main object
0BBB6                           ;   X = collision object (usually player?)
0BBB6                           ; Output:
0BBB6                           ;   byte_RAM_F = collision flags
0BBB6                           ;
0BBB6                           DetermineCollisionFlags:
0BBB6 A9 00                     	LDA #$00
0BBB8 85 0F                     	STA byte_RAM_F
0BBBA A4 12                     	LDY byte_RAM_12 ; stash Y
0BBBC AD 27 04                  	LDA byte_RAM_427
0BBBF C9 F6                     	CMP #$F6
0BBC1 B0 20                     	BCS DetermineCollisionFlags_Y
0BBC3                           
0BBC3 B9 29 00                  	LDA ObjectXLo, Y
0BBC6 A0 02                     	LDY #CollisionFlags_Left
0BBC8 D5 28                     	CMP ObjectXLo - 1, X
0BBCA 30 02                     	BMI DetermineCollisionFlags_SetFlagsX
0BBCC                           
0BBCC A0 01                     	LDY #CollisionFlags_Right
0BBCE                           
0BBCE                           DetermineCollisionFlags_SetFlagsX:
0BBCE 84 0F                     	STY byte_RAM_F
0BBD0 98                        	TYA
0BBD1 35 6E                     	AND EnemyMovementDirection - 1, X
0BBD3 F0 0D                     	BEQ DetermineCollisionFlags_ExitX
0BBD5                           
0BBD5 A4 12                     	LDY byte_RAM_12 ; restore Y
0BBD7 B9 A4 04                  	LDA unk_RAM_4A4, Y
0BBDA D0 06                     	BNE DetermineCollisionFlags_ExitX
0BBDC                           
0BBDC                           	; @TODO: Looks like a way to make objects move together horizontally
0BBDC B9 3D 00                  	LDA ObjectXVelocity, Y
0BBDF 9D CB 04                  	STA ObjectXAcceleration - 1, X
0BBE2                           
0BBE2                           DetermineCollisionFlags_ExitX:
0BBE2 60                        	RTS
0BBE3                           
0BBE3                           
0BBE3                           DetermineCollisionFlags_Y:
0BBE3 B9 33 00                  	LDA ObjectYLo, Y
0BBE6 E0 01                     	CPX #$01
0BBE8 B0 08                     	BCS loc_BANK3_BAD1
0BBEA                           
0BBEA 48                        	PHA
0BBEB A4 9A                     	LDY PlayerDucking
0BBED 68                        	PLA
0BBEE 38                        	SEC
0BBEF F9 50 BC                  	SBC byte_BANK3_BB2F, Y
0BBF2                           
0BBF2                           loc_BANK3_BAD1:
0BBF2 D5 32                     	CMP ObjectYLo - 1, X
0BBF4 30 2D                     	BMI loc_BANK3_BB02
0BBF6                           
0BBF6 B5 46                     	LDA ObjectYVelocity - 1, X
0BBF8 30 55                     	BMI DetermineCollisionFlags_ExitY
0BBFA                           
0BBFA A4 12                     	LDY byte_RAM_12
0BBFC B9 A4 04                  	LDA unk_RAM_4A4, Y
0BBFF D0 06                     	BNE loc_BANK3_BAE6
0BC01                           
0BC01 B9 3D 00                  	LDA ObjectXVelocity, Y
0BC04 9D CB 04                  	STA ObjectXAcceleration - 1, X
0BC07                           
0BC07                           loc_BANK3_BAE6:
0BC07 A0 00                     	LDY #$00
0BC09 EE 27 04                  	INC byte_RAM_427
0BC0C EE 27 04                  	INC byte_RAM_427
0BC0F 10 01                     	BPL loc_BANK3_BAF1
0BC11                           
0BC11 88                        	DEY
0BC12                           
0BC12                           loc_BANK3_BAF1:
0BC12 AD 27 04                  	LDA byte_RAM_427
0BC15 18                        	CLC
0BC16 75 32                     	ADC ObjectYLo - 1, X
0BC18 95 32                     	STA ObjectYLo - 1, X
0BC1A 98                        	TYA
0BC1B 75 1E                     	ADC ObjectYHi - 1, X
0BC1D 95 1E                     	STA ObjectYHi - 1, X
0BC1F A0 04                     	LDY #CollisionFlags_Down
0BC21 D0 11                     	BNE loc_BANK3_BB13
0BC23                           
0BC23                           loc_BANK3_BB02:
0BC23 B5 46                     	LDA ObjectYVelocity - 1, X
0BC25 F0 0B                     	BEQ loc_BANK3_BB11
0BC27                           
0BC27 10 26                     	BPL DetermineCollisionFlags_ExitY
0BC29                           
0BC29 A4 12                     	LDY byte_RAM_12
0BC2B B9 90 00                  	LDA ObjectType, Y
0BC2E C9 36                     	CMP #Enemy_Coin
0BC30 F0 1D                     	BEQ DetermineCollisionFlags_ExitY
0BC32                           
0BC32                           loc_BANK3_BB11:
0BC32 A0 08                     	LDY #CollisionFlags_Up
0BC34                           
0BC34                           loc_BANK3_BB13:
0BC34 84 0F                     	STY byte_RAM_F
0BC36 A4 12                     	LDY byte_RAM_12
0BC38 B9 A4 04                  	LDA unk_RAM_4A4, Y
0BC3B D0 06                     	BNE loc_BANK3_BB22
0BC3D                           
0BC3D                           	; @TODO: Looks like a way to make objects move together vertically
0BC3D B9 47 00                  	LDA ObjectYVelocity, Y
0BC40 9D D5 04                  	STA ObjectYAcceleration - 1, X
0BC43                           
0BC43                           loc_BANK3_BB22:
0BC43 A9 00                     	LDA #$00
0BC45 95 46                     	STA ObjectYVelocity - 1, X
0BC47 B9 12 04                  	LDA ObjectYSubpixel, Y
0BC4A 9D 11 04                  	STA ObjectYSubpixel - 1, X
0BC4D F6 9E                     	INC ObjectAnimationTimer - 1, X
0BC4F                           
0BC4F                           DetermineCollisionFlags_ExitY:
0BC4F 60                        	RTS
0BC50                           
0BC50                           
0BC50                           byte_BANK3_BB2F:
0BC50 0B                        	.db $0B
0BC51 10                        	.db $10
0BC52                           
0BC52                           ; =============== S U B R O U T I N E =======================================
0BC52                           
0BC52                           sub_BANK3_BB31:
0BC52 A0 00                     	LDY #$00
0BC54 B5 5A                     	LDA EnemyCollision - 1, X
0BC56 05 0F                     	ORA byte_RAM_F
0BC58 29 0C                     	AND #$0C
0BC5A C9 0C                     	CMP #$0C
0BC5C F0 0B                     	BEQ loc_BANK3_BB48
0BC5E                           
0BC5E B5 5A                     	LDA EnemyCollision - 1, X
0BC60 05 0F                     	ORA byte_RAM_F
0BC62 29 03                     	AND #CollisionFlags_Right | CollisionFlags_Left
0BC64 C9 03                     	CMP #CollisionFlags_Right | CollisionFlags_Left
0BC66 D0 02                     	BNE locret_BANK3_BB49
0BC68                           
0BC68 C8                        	INY
0BC69                           
0BC69                           loc_BANK3_BB48:
0BC69 C8                        	INY
0BC6A                           
0BC6A                           locret_BANK3_BB49:
0BC6A 60                        	RTS
0BC6B                           
0BC6B                           ; End of function sub_BANK3_BB31
0BC6B                           
0BC6B                           ; ---------------------------------------------------------------------------
0BC6B                           IFNDEF PLAYER_STUFF
0BC6B                           _unused_BANK3_BB4A:
0BC6B                           	.db $FF ; May not be used, but wasn't marked as data
0BC6B                           	.db $FF
0BC6B                           	.db $FF
0BC6B                           	.db $FF
0BC6B                           	.db $FF
0BC6B                           	.db $FF
0BC6B                           ENDIF
0BC6B                           
0BC6B                           byte_BANK3_BB50:
0BC6B C2                        	.db $C2
0BC6C D4                        	.db $D4
0BC6D C3                        	.db $C3
0BC6E C4                        	.db $C4
0BC6F 07                        	.db $07
0BC70 80                        	.db $80
0BC71 81                        	.db $81
0BC72 94                        	.db $94
0BC73 95                        	.db $95
0BC74 17                        	.db $17
0BC75                           
0BC75                           ; =============== S U B R O U T I N E =======================================
0BC75                           
0BC75                           sub_BANK3_BB5A:
0BC75 20 A2 BC                  	JSR sub_BANK3_BB87
0BC78                           
0BC78 A5 00                     	LDA byte_RAM_0
0BC7A                           
0BC7A A0 09                     	LDY #$09
0BC7C                           loc_BANK3_BB61:
0BC7C D9 6B BC                  	CMP byte_BANK3_BB50, Y
0BC7F F0 04                     	BEQ locret_BANK3_BB6A
0BC81 88                        	DEY
0BC82 10 F8                     	BPL loc_BANK3_BB61
0BC84                           
0BC84 18                        	CLC
0BC85                           
0BC85                           locret_BANK3_BB6A:
0BC85 60                        	RTS
0BC86                           
0BC86                           
0BC86                           ItemCarryYOffsets:
0BC86 F9                        	.db $F9
0BC87 FF                        	.db $FF
0BC88 00                        	.db $00
0BC89 08                        	.db $08
0BC8A 0C                        	.db $0C
0BC8B 18                        	.db $18
0BC8C 1A                        	.db $1A
0BC8D 01                        	.db $01
0BC8E 06                        	.db $06
0BC8F 0A                        	.db $0A
0BC90 0C                        	.db $0C
0BC91 18                        	.db $18
0BC92 1A                        	.db $1A
0BC93 1C                        	.db $1C
0BC94 FF                        	.db $FF
0BC95 FF                        	.db $FF
0BC96 00                        	.db $00
0BC97 00                        	.db $00
0BC98 00                        	.db $00
0BC99 00                        	.db $00
0BC9A 00                        	.db $00
0BC9B 00                        	.db $00
0BC9C 00                        	.db $00
0BC9D 00                        	.db $00
0BC9E 00                        	.db $00
0BC9F 00                        	.db $00
0BCA0 00                        	.db $00
0BCA1 00                        	.db $00
0BCA2                           
0BCA2                           
0BCA2                           ; =============== S U B R O U T I N E =======================================
0BCA2                           
0BCA2                           sub_BANK3_BB87:
0BCA2 8A                        	TXA
0BCA3 48                        	PHA
0BCA4                           
0BCA4 A9 00                     	LDA #$00
0BCA6 85 00                     	STA byte_RAM_0
0BCA8 85 01                     	STA byte_RAM_1
0BCAA B9 64 F2                  	LDA byte_BANKF_F011, Y
0BCAD 10 02                     	BPL loc_BANK3_BB96
0BCAF                           
0BCAF C6 00                     	DEC byte_RAM_0
0BCB1                           
0BCB1                           loc_BANK3_BB96:
0BCB1 18                        	CLC
0BCB2 75 28                     	ADC ObjectXLo - 1, X
0BCB4 29 F0                     	AND #$F0
0BCB6 85 05                     	STA byte_RAM_5
0BCB8 08                        	PHP
0BCB9 4A                        	LSR A
0BCBA 4A                        	LSR A
0BCBB 4A                        	LSR A
0BCBC 4A                        	LSR A
0BCBD 85 E5                     	STA byte_RAM_E5
0BCBF 28                        	PLP
0BCC0 B5 14                     	LDA ObjectXHi - 1, X
0BCC2 65 00                     	ADC byte_RAM_0
0BCC4 85 02                     	STA byte_RAM_2
0BCC6 85 03                     	STA byte_RAM_3
0BCC8 A5 EC                     	LDA IsHorizontalLevel
0BCCA D0 04                     	BNE loc_BANK3_BBB5
0BCCC                           
0BCCC 85 02                     	STA byte_RAM_2
0BCCE 85 03                     	STA byte_RAM_3
0BCD0                           
0BCD0                           loc_BANK3_BBB5:
0BCD0 B9 A8 F2                  	LDA byte_BANKF_F055, Y
0BCD3 10 02                     	BPL loc_BANK3_BBBC
0BCD5                           
0BCD5 C6 01                     	DEC byte_RAM_1
0BCD7                           
0BCD7                           loc_BANK3_BBBC:
0BCD7 18                        	CLC
0BCD8 75 32                     	ADC ObjectYLo - 1, X
0BCDA 29 F0                     	AND #$F0
0BCDC 85 06                     	STA byte_RAM_6
0BCDE 85 E6                     	STA byte_RAM_E6
0BCE0 B5 1E                     	LDA ObjectYHi - 1, X
0BCE2 65 01                     	ADC byte_RAM_1
0BCE4 85 01                     	STA byte_RAM_1
0BCE6 85 04                     	STA byte_RAM_4
0BCE8 20 51 BD                  	JSR sub_BANK3_BC2E
0BCEB                           
0BCEB 90 04                     	BCC loc_BANK3_BBD6
0BCED                           
0BCED A9 00                     	LDA #$00
0BCEF F0 07                     	BEQ loc_BANK3_BBDD
0BCF1                           
0BCF1                           loc_BANK3_BBD6:
0BCF1 20 90 BD                  	JSR SetTileOffsetAndAreaPageAddr
0BCF4                           
0BCF4 A4 E7                     	LDY byte_RAM_E7
0BCF6 B1 01                     	LDA (byte_RAM_1), Y
0BCF8                           
0BCF8                           loc_BANK3_BBDD:
0BCF8 85 00                     	STA byte_RAM_0
0BCFA 68                        	PLA
0BCFB AA                        	TAX
0BCFC 60                        	RTS
0BCFD                           
0BCFD                           
0BCFD                           sub_BANK3_BBE2:
0BCFD 48                        	PHA
0BCFE 29 C0                     	AND #$C0
0BD00 0A                        	ASL A
0BD01 2A                        	ROL A
0BD02 2A                        	ROL A
0BD03 79 0C BD                  	ADC TileGroupTable_Bank3, Y
0BD06 A8                        	TAY
0BD07 68                        	PLA
0BD08 D9 7C F9                  	CMP TileSolidnessTable, Y
0BD0B 60                        	RTS
0BD0C                           
0BD0C                           
0BD0C                           ;
0BD0C                           ; These map the two high bits of a tile to offets in TileSolidnessTable
0BD0C                           ;
0BD0C                           TileGroupTable_Bank3:
0BD0C 00                        	.db $00 ; solid to mushroom blocks
0BD0D 04                        	.db $04 ; solid on top
0BD0E 08                        	.db $08 ; solid on all sides
0BD0F                           
0BD0F                           
0BD0F                           DoorHandling_GoThroughDoor_Bank3:
0BD0F EE BD 04                  	INC DoorAnimationTimer
0BD12 EE 1B 04                  	INC PlayerLock
0BD15                           IFDEF SCROLL_FIX
0BD15 A9 09                         LDA #PlayerState_Nothing
0BD17 85 50                         STA PlayerState
0BD19 A9 50                         LDA #$50
0BD1B 85 82                         STA PlayerStateTimer
0BD1D                           ENDIF
0BD1D 20 C0 BD                  	JSR SnapPlayerToTile_Bank3
0BD20                           
0BD20 A9 01                     	LDA #DPCM_DoorOpenBombBom
0BD22 8D 01 06                  	STA DPCMQueue
0BD25 60                        	RTS
0BD26                           
0BD26                           
0BD26                           ;
0BD26                           ; Checks horizontal collision with the player and stops them if necessary
0BD26                           ;
0BD26                           PlayerHorizontalCollision:
0BD26 A2 00                     	LDX #$00
0BD28 A4 6E                     	LDY PlayerMovementDirection
0BD2A A5 3C                     	LDA PlayerXVelocity
0BD2C 59 BD BD                  	EOR PlayerCollisionResultTable - 1, Y
0BD2F 10 02                     	BPL loc_BANK3_BC10
0BD31                           
0BD31 86 3C                     	STX PlayerXVelocity
0BD33                           
0BD33                           loc_BANK3_BC10:
0BD33 AD CB 04                  	LDA PlayerXAcceleration
0BD36 59 BD BD                  	EOR PlayerCollisionResultTable - 1, Y
0BD39 10 03                     	BPL loc_BANK3_BC1B
0BD3B                           
0BD3B 8E CB 04                  	STX PlayerXAcceleration
0BD3E                           
0BD3E                           loc_BANK3_BC1B:
0BD3E 8E 07 04                  	STX PlayerXSubpixel
0BD41                           
0BD41                           locret_BANK3_BC1E:
0BD41 60                        	RTS
0BD42                           
0BD42                           
0BD42                           ;
0BD42                           ; Set the player state to lifting and Kick off the lifting animation
0BD42                           ;
0BD42                           SetPlayerStateLifting:
0BD42 A9 02                     	LDA #PlayerState_Lifting
0BD44 85 50                     	STA PlayerState
0BD46 A9 06                     	LDA #$06
0BD48 85 82                     	STA PlayerStateTimer
0BD4A A9 08                     	LDA #$08
0BD4C 85 C7                     	STA PlayerAnimationFrame
0BD4E E6 9C                     	INC HoldingItem
0BD50 60                        	RTS
0BD51                           
0BD51                           
0BD51                           ;
0BD51                           ; @TODO: Figure out what this does exactly
0BD51                           ;
0BD51                           sub_BANK3_BC2E:
0BD51 A4 01                     	LDY byte_RAM_1
0BD53 A5 E6                     	LDA byte_RAM_E6
0BD55 20 D2 BD                  	JSR sub_BANK3_BD6B
0BD58                           
0BD58 84 01                     	STY byte_RAM_1
0BD5A 85 E6                     	STA byte_RAM_E6
0BD5C A4 EC                     	LDY IsHorizontalLevel
0BD5E B9 01 00                  	LDA byte_RAM_1, Y
0BD61 85 E8                     	STA byte_RAM_E8
0BD63 A5 02                     	LDA byte_RAM_2
0BD65 D9 71 BD                  	CMP byte_BANK3_BC4D + 1, Y
0BD68 B0 05                     	BCS locret_BANK3_BC4C
0BD6A                           
0BD6A A5 01                     	LDA byte_RAM_1
0BD6C D9 70 BD                  	CMP byte_BANK3_BC4D, Y
0BD6F                           
0BD6F                           locret_BANK3_BC4C:
0BD6F 60                        	RTS
0BD70                           
0BD70                           
0BD70                           byte_BANK3_BC4D:
0BD70 0A                        	.db $0A
0BD71 01                        	.db $01
0BD72 0B                        	.db $0B
0BD73                           
0BD73                           
0BD73                           ;
0BD73                           ; Replaces a tile when something is thrown
0BD73                           ;
0BD73                           ; Input
0BD73                           ;   A = target tile
0BD73                           ;   X = enemy index of object being thrown
0BD73                           ;
0BD73                           ReplaceTile:
0BD73                           IFDEF PLAYER_STUFF
0BD73 4C 38 EE                      JMP CustomReplaceTile
0BD76                           ENDIF
0BD76                           IFNDEF PLAYER_STUFF
0BD76                           	PHA
0BD76                           	LDA ObjectXLo, X
0BD76                           	CLC
0BD76                           	ADC #$08
0BD76                           	PHP
0BD76                           	LSR A
0BD76                           	LSR A
0BD76                           	LSR A
0BD76                           	LSR A
0BD76                           	STA byte_RAM_E5
0BD76                           	PLP
0BD76                           	LDA ObjectXHi, X
0BD76                           	LDY IsHorizontalLevel
0BD76                           	BEQ ReplaceTile_StoreXHi
0BD76                           
0BD76                           	ADC #$00
0BD76                           
0BD76                           ReplaceTile_StoreXHi:
0BD76                           	STA byte_RAM_2
0BD76                           	LDA ObjectYLo, X
0BD76                           	CLC
0BD76                           	ADC #$08
0BD76                           	AND #$F0
0BD76                           	STA byte_RAM_E6
0BD76                           	LDA ObjectYHi, X
0BD76                           	ADC #$00
0BD76                           	STA byte_RAM_1
0BD76                           	JSR sub_BANK3_BC2E
0BD76                           
0BD76                           	PLA
0BD76                           	BCS locret_BANK3_BC1E
0BD76                           
0BD76                           	STX byte_RAM_3
0BD76                           	PHA
0BD76                           	JSR SetTileOffsetAndAreaPageAddr
0BD76                           
0BD76                           	PLA
0BD76                           	LDY byte_RAM_E7
0BD76                           	STA (byte_RAM_1), Y
0BD76                           	PHA
0BD76                           	LDX byte_RAM_300
0BD76                           	LDA #$00
0BD76                           	STA PPUBuffer_301, X
0BD76                           	TYA
0BD76                           	AND #$F0
0BD76                           	ASL A
0BD76                           	ROL PPUBuffer_301, X
0BD76                           	ASL A
0BD76                           	ROL PPUBuffer_301, X
0BD76                           	STA PPUBuffer_301 + 1, X
0BD76                           	TYA
0BD76                           	AND #$0F
0BD76                           	ASL A
0BD76                           
0BD76                           	ADC PPUBuffer_301 + 1, X
0BD76                           	STA PPUBuffer_301 + 1, X
0BD76                           	CLC
0BD76                           	ADC #$20
0BD76                           	STA PPUBuffer_301 + 6, X
0BD76                           	LDA IsHorizontalLevel
0BD76                           	ASL A
0BD76                           	TAY
0BD76                           	LDA byte_RAM_1
0BD76                           	AND #$10
0BD76                           	BNE loc_BANK3_BCBA
0BD76                           
0BD76                           	INY
0BD76                           
0BD76                           loc_BANK3_BCBA:
0BD76                           	LDA unk_BANK3_BD0B, Y
0BD76                           	CLC
0BD76                           	ADC PPUBuffer_301, X
0BD76                           	STA PPUBuffer_301, X
0BD76                           	STA PPUBuffer_301 + 5, X
0BD76                           	LDA #$02
0BD76                           	STA PPUBuffer_301 + 2, X
0BD76                           	STA PPUBuffer_301 + 7, X
0BD76                           	PLA
0BD76                           	PHA
0BD76                           	AND #$C0
0BD76                           	ASL A
0BD76                           	ROL A
0BD76                           	ROL A
0BD76                           	TAY
0BD76                           	LDA TileQuadPointersLo, Y
0BD76                           	STA byte_RAM_0
0BD76                           	LDA TileQuadPointersHi, Y
0BD76                           	STA byte_RAM_1
0BD76                           	PLA
0BD76                           	ASL A
0BD76                           	ASL A
0BD76                           	TAY
0BD76                           	LDA (byte_RAM_0), Y
0BD76                           	STA PPUBuffer_301 + 3, X
0BD76                           	INY
0BD76                           	LDA (byte_RAM_0), Y
0BD76                           	STA PPUBuffer_301 + 4, X
0BD76                           	INY
0BD76                           	LDA (byte_RAM_0), Y
0BD76                           	STA PPUBuffer_301 + 8, X
0BD76                           	INY
0BD76                           	LDA (byte_RAM_0), Y
0BD76                           	STA PPUBuffer_301 + 9, X
0BD76                           	LDA #$00
0BD76                           	STA PPUBuffer_301 + 10, X
0BD76                           	TXA
0BD76                           	CLC
0BD76                           	ADC #$A
0BD76                           	STA byte_RAM_300
0BD76                           	LDX byte_RAM_3
0BD76                           	RTS
0BD76                           
0BD76                           
0BD76                           ; Another byte of PPU high addresses for horiz/vert levels
0BD76                           unk_BANK3_BD0B:
0BD76                           	.db $20
0BD76                           	.db $28
0BD76                           	.db $20
0BD76                           	.db $24
0BD76                           ENDIF
0BD76                           
0BD76                           
0BD76                           StashPlayerPosition:
0BD76 AD 28 06                  	LDA InSubspaceOrJar
0BD79 D0 14                     	BNE StashPlayerPosition_Exit
0BD7B                           
0BD7B A5 14                     	LDA PlayerXHi
0BD7D 8D 0F 05                  	STA PlayerXHi_Backup
0BD80 A5 28                     	LDA PlayerXLo
0BD82 8D 11 05                  	STA PlayerXLo_Backup
0BD85 A5 1E                     	LDA PlayerYHi
0BD87 8D 10 05                  	STA PlayerYHi_Backup
0BD8A A5 32                     	LDA PlayerYLo
0BD8C 8D 12 05                  	STA PlayerYLo_Backup
0BD8F                           
0BD8F                           StashPlayerPosition_Exit:
0BD8F 60                        	RTS
0BD90                           
0BD90                           
0BD90                           ;
0BD90                           ; Updates the area page and tile placement offset @TODO
0BD90                           ;
0BD90                           ; Input
0BD90                           ;   byte_RAM_E8 = area page
0BD90                           ;   byte_RAM_E5 = tile placement offset shift
0BD90                           ;   byte_RAM_E6 = previous tile placement offset
0BD90                           ; Output
0BD90                           ;   RAM_1 = low byte of decoded level data RAM
0BD90                           ;   RAM_2 = low byte of decoded level data RAM
0BD90                           ;   byte_RAM_E7 = target tile placement offset
0BD90                           ;
0BD90                           SetTileOffsetAndAreaPageAddr:
0BD90 A6 E8                     	LDX byte_RAM_E8
0BD92 20 B3 BD                  	JSR SetAreaPageAddr
0BD95                           
0BD95 A5 E6                     	LDA byte_RAM_E6
0BD97 18                        	CLC
0BD98 65 E5                     	ADC byte_RAM_E5
0BD9A 85 E7                     	STA byte_RAM_E7
0BD9C 60                        	RTS
0BD9D                           
0BD9D                           
0BD9D                           DecodedLevelPageStartLo:
0BD9D 00                        	.db <DecodedLevelData
0BD9E F0                        	.db <(DecodedLevelData+$00F0)
0BD9F E0                        	.db <(DecodedLevelData+$01E0)
0BDA0 D0                        	.db <(DecodedLevelData+$02D0)
0BDA1 C0                        	.db <(DecodedLevelData+$03C0)
0BDA2 B0                        	.db <(DecodedLevelData+$04B0)
0BDA3 A0                        	.db <(DecodedLevelData+$05A0)
0BDA4 90                        	.db <(DecodedLevelData+$0690)
0BDA5 80                        	.db <(DecodedLevelData+$0780)
0BDA6 70                        	.db <(DecodedLevelData+$0870)
0BDA7 00                        	.db <(SubAreaTileLayout)
0BDA8                           
0BDA8                           DecodedLevelPageStartHi:
0BDA8 60                        	.db >DecodedLevelData
0BDA9 60                        	.db >(DecodedLevelData+$00F0)
0BDAA 61                        	.db >(DecodedLevelData+$01E0)
0BDAB 62                        	.db >(DecodedLevelData+$02D0)
0BDAC 63                        	.db >(DecodedLevelData+$03C0)
0BDAD 64                        	.db >(DecodedLevelData+$04B0)
0BDAE 65                        	.db >(DecodedLevelData+$05A0)
0BDAF 66                        	.db >(DecodedLevelData+$0690)
0BDB0 67                        	.db >(DecodedLevelData+$0780)
0BDB1 68                        	.db >(DecodedLevelData+$0870)
0BDB2 07                        	.db >(SubAreaTileLayout)
0BDB3                           
0BDB3                           
0BDB3                           
0BDB3                           ;
0BDB3                           ; Updates the area page that we're reading tiles from
0BDB3                           ;
0BDB3                           ; Input
0BDB3                           ;   X = area page
0BDB3                           ; Output
0BDB3                           ;   byte_RAM_1 = low byte of decoded level data RAM
0BDB3                           ;   byte_RAM_2 = low byte of decoded level data RAM
0BDB3                           ;
0BDB3                           SetAreaPageAddr:
0BDB3 BD 9D BD                  	LDA DecodedLevelPageStartLo, X
0BDB6 85 01                     	STA byte_RAM_1
0BDB8 BD A8 BD                  	LDA DecodedLevelPageStartHi, X
0BDBB 85 02                     	STA byte_RAM_2
0BDBD 60                        	RTS
0BDBE                           
0BDBE                           
0BDBE                           PlayerCollisionResultTable:
0BDBE 80                        	.db CollisionFlags_80
0BDBF 00                        	.db CollisionFlags_00
0BDC0                           
0BDC0                           ; =============== S U B R O U T I N E =======================================
0BDC0                           
0BDC0                           ;
0BDC0                           ; Note: Door animation code copied from Bank 0
0BDC0                           ;
0BDC0                           ; Snaps the player to the closest tile (for entering doors and jars)
0BDC0                           ;
0BDC0                           SnapPlayerToTile_Bank3:
0BDC0 A5 28                     	LDA PlayerXLo
0BDC2 18                        	CLC
0BDC3 69 08                     	ADC #$08
0BDC5 29 F0                     	AND #$F0
0BDC7 85 28                     	STA PlayerXLo
0BDC9 90 06                     	BCC SnapPlayerToTile_Exit_Bank3
0BDCB                           
0BDCB A5 EC                     	LDA IsHorizontalLevel
0BDCD F0 02                     	BEQ SnapPlayerToTile_Exit_Bank3
0BDCF                           
0BDCF E6 14                     	INC PlayerXHi
0BDD1                           
0BDD1                           SnapPlayerToTile_Exit_Bank3:
0BDD1 60                        	RTS
0BDD2                           
0BDD2                           
0BDD2                           ; =============== S U B R O U T I N E =======================================
0BDD2                           
0BDD2                           sub_BANK3_BD6B:
0BDD2 85 0F                     	STA byte_RAM_F
0BDD4 98                        	TYA
0BDD5 30 11                     	BMI locret_BANK3_BD81
0BDD7                           
0BDD7 0A                        	ASL A
0BDD8 0A                        	ASL A
0BDD9 0A                        	ASL A
0BDDA 0A                        	ASL A
0BDDB 18                        	CLC
0BDDC 65 0F                     	ADC byte_RAM_F
0BDDE B0 04                     	BCS loc_BANK3_BD7D
0BDE0                           
0BDE0 C9 F0                     	CMP #$F0
0BDE2 90 04                     	BCC locret_BANK3_BD81
0BDE4                           
0BDE4                           loc_BANK3_BD7D:
0BDE4 18                        	CLC
0BDE5 69 10                     	ADC #$10
0BDE7 C8                        	INY
0BDE8                           
0BDE8                           locret_BANK3_BD81:
0BDE8 60                        	RTS
0BDE9                           
0BDE9                           ; End of function sub_BANK3_BD6B
0BDE9                           
0BDE9                           ; =============== S U B R O U T I N E =======================================
0BDE9                           
0BDE9                           sub_BANK3_BD82:
0BDE9 B9 05 00                  	LDA byte_RAM_5, Y
0BDEC 38                        	SEC
0BDED F9 06 00                  	SBC byte_RAM_6, Y
0BDF0 10 06                     	BPL loc_BANK3_BD91
0BDF2                           
0BDF2 49 FF                     	EOR #$FF
0BDF4 18                        	CLC
0BDF5 69 01                     	ADC #$01
0BDF7 CA                        	DEX
0BDF8                           
0BDF8                           loc_BANK3_BD91:
0BDF8 38                        	SEC
0BDF9 F5 09                     	SBC byte_RAM_9, X
0BDFB 60                        	RTS
0BDFC                           
0BDFC                           ; End of function sub_BANK3_BD82
0BDFC                           
0BDFC                           ; =============== S U B R O U T I N E =======================================
0BDFC                           
0BDFC                           sub_BANK3_BD95:
0BDFC B9 05 00                  	LDA byte_RAM_5, Y
0BDFF 38                        	SEC
0BE00 F9 06 00                  	SBC byte_RAM_6, Y
0BE03 99 06 00                  	STA byte_RAM_6, Y
0BE06 B9 01 00                  	LDA byte_RAM_1, Y
0BE09 F9 02 00                  	SBC byte_RAM_2, Y
0BE0C 10 12                     	BPL loc_BANK3_BDB9
0BE0E                           
0BE0E 49 FF                     	EOR #$FF
0BE10 48                        	PHA
0BE11 B9 06 00                  	LDA byte_RAM_6, Y
0BE14 49 FF                     	EOR #$FF
0BE16 18                        	CLC
0BE17 69 01                     	ADC #$01
0BE19 99 06 00                  	STA byte_RAM_6, Y
0BE1C 68                        	PLA
0BE1D 69 00                     	ADC #$00
0BE1F CA                        	DEX
0BE20                           
0BE20                           loc_BANK3_BDB9:
0BE20 C9 00                     	CMP #$00
0BE22 F0 02                     	BEQ loc_BANK3_BDBF
0BE24                           
0BE24 38                        	SEC
0BE25 60                        	RTS
0BE26                           
0BE26                           ; ---------------------------------------------------------------------------
0BE26                           
0BE26                           loc_BANK3_BDBF:
0BE26 B9 06 00                  	LDA byte_RAM_6, Y
0BE29 F5 09                     	SBC byte_RAM_9, X
0BE2B 60                        	RTS
0BE2C                           
0BE2C                           ; End of function sub_BANK3_BD95
0BE2C                           
0BE2C                           ; =============== S U B R O U T I N E =======================================
0BE2C                           
0BE2C                           sub_BANK3_BDC5:
0BE2C 8A                        	TXA
0BE2D 48                        	PHA
0BE2E A0 02                     	LDY #$02
0BE30                           
0BE30                           loc_BANK3_BDC9:
0BE30 98                        	TYA
0BE31 AA                        	TAX
0BE32 E8                        	INX
0BE33 C0 00                     	CPY #$00
0BE35 D0 0A                     	BNE loc_BANK3_BDDA
0BE37                           
0BE37 A5 EC                     	LDA IsHorizontalLevel
0BE39 D0 06                     	BNE loc_BANK3_BDDA
0BE3B                           
0BE3B 20 E9 BD                  	JSR sub_BANK3_BD82
0BE3E                           
0BE3E 4C 44 BE                  	JMP loc_BANK3_BDDD
0BE41                           
0BE41                           ; ---------------------------------------------------------------------------
0BE41                           
0BE41                           loc_BANK3_BDDA:
0BE41 20 FC BD                  	JSR sub_BANK3_BD95
0BE44                           
0BE44                           loc_BANK3_BDDD:
0BE44 B0 0D                     	BCS loc_BANK3_BDEC
0BE46                           
0BE46 48                        	PHA
0BE47 98                        	TYA
0BE48 4A                        	LSR A
0BE49 AA                        	TAX
0BE4A 68                        	PLA
0BE4B 9D 26 04                  	STA byte_RAM_426, X
0BE4E 88                        	DEY
0BE4F 88                        	DEY
0BE50 10 DE                     	BPL loc_BANK3_BDC9
0BE52                           
0BE52 18                        	CLC
0BE53                           
0BE53                           loc_BANK3_BDEC:
0BE53 68                        	PLA
0BE54 AA                        	TAX
0BE55 60                        	RTS
0BE56                           
0BE56                           ; End of function sub_BANK3_BDC5
0BE56                           
0BE56                           ; ---------------------------------------------------------------------------
0BE56                           HealthBarTiles:
0BE56 BA                        	.db $BA ; 0
0BE57 BA                        	.db $BA
0BE58 BA                        	.db $BA
0BE59 BA                        	.db $BA
0BE5A B8                        	.db $B8 ; 1
0BE5B BA                        	.db $BA
0BE5C BA                        	.db $BA
0BE5D BA                        	.db $BA
0BE5E B8                        	.db $B8 ; 2
0BE5F B8                        	.db $B8
0BE60 BA                        	.db $BA
0BE61 BA                        	.db $BA
0BE62 B8                        	.db $B8 ; 3
0BE63 B8                        	.db $B8
0BE64 B8                        	.db $B8
0BE65 BA                        	.db $BA
0BE66 B8                        	.db $B8 ; 4
0BE67 B8                        	.db $B8
0BE68 B8                        	.db $B8
0BE69 B8                        	.db $B8
0BE6A                           
0BE6A                           POWQuakeOffsets:
0BE6A 00                        	.db $00
0BE6B 03                        	.db $03
0BE6C 00                        	.db $00
0BE6D FD                        	.db $FD
0BE6E                           
0BE6E                           SkyFlashColors:
0BE6E 26                        	.db $26
0BE6F 2A                        	.db $2A
0BE70 22                        	.db $22
0BE71 26                        	.db $26
0BE72                           
0BE72                           ; =============== S U B R O U T I N E =======================================
0BE72                           
0BE72                           AreaSecondaryRoutine:
0BE72 AD C6 04                  	LDA SkyFlashTimer
0BE75 F0 45                     	BEQ AreaSecondaryRoutine_HealthBar
0BE77                           
0BE77                           	; sky flash timer (ie. explosions)
0BE77 CE C6 04                  	DEC SkyFlashTimer
0BE7A AE 00 03                  	LDX byte_RAM_300
0BE7D A9 3F                     	LDA #$3F
0BE7F 9D 01 03                  	STA PPUBuffer_301, X
0BE82 A9 10                     	LDA #$10
0BE84 9D 02 03                  	STA PPUBuffer_301 + 1, X
0BE87 A9 04                     	LDA #$04
0BE89 9D 03 03                  	STA PPUBuffer_301 + 2, X
0BE8C AD BC 04                  	LDA SkyColor
0BE8F AC C6 04                  	LDY SkyFlashTimer
0BE92 F0 07                     	BEQ AreaSecondaryRoutine_PlayerPalette
0BE94                           
0BE94 98                        	TYA
0BE95 29 03                     	AND #$03
0BE97 A8                        	TAY
0BE98 B9 6E BE                  	LDA SkyFlashColors, Y
0BE9B                           
0BE9B                           AreaSecondaryRoutine_PlayerPalette:
0BE9B 9D 04 03                  	STA PPUBuffer_301 + 3, X
0BE9E AD 38 06                  	LDA RestorePlayerPalette1
0BEA1 9D 05 03                  	STA PPUBuffer_301 + 4, X
0BEA4 AD 39 06                  	LDA RestorePlayerPalette2
0BEA7 9D 06 03                  	STA PPUBuffer_301 + 5, X
0BEAA AD 3A 06                  	LDA RestorePlayerPalette3
0BEAD 9D 07 03                  	STA PPUBuffer_301 + 6, X
0BEB0 A9 00                     	LDA #$00
0BEB2 9D 08 03                  	STA PPUBuffer_301 + 7, X
0BEB5 8A                        	TXA
0BEB6 18                        	CLC
0BEB7 69 07                     	ADC #$07
0BEB9 8D 00 03                  	STA byte_RAM_300
0BEBC                           
0BEBC                           AreaSecondaryRoutine_HealthBar:
0BEBC A9 30                     	LDA #$30
0BEBE 85 00                     	STA byte_RAM_0
0BEC0 20 2F FC                  	JSR loc_BANKF_FAFE
0BEC3                           
0BEC3 AD C2 04                  	LDA PlayerHealth
0BEC6 F0 06                     	BEQ AreaSecondaryRoutine_HealthBar_Draw
0BEC8                           
0BEC8 29 F0                     	AND #$F0
0BECA 4A                        	LSR A
0BECB 4A                        	LSR A
0BECC 69 04                     	ADC #$04 ; max health
0BECE                           
0BECE                           AreaSecondaryRoutine_HealthBar_Draw:
0BECE AA                        	TAX
0BECF                           
0BECF A9 FE                     	LDA #$FE
0BED1 85 03                     	STA byte_RAM_3
0BED3                           IFDEF HEALTH_REVAMP
0BED3 AD C3 04                      LDA PlayerMaxHealth
0BED6 30 53                         BMI AreaSecondaryRoutine_POW
0BED8 C9 03                         CMP #$3
0BEDA 90 06                         BCC +
0BEDC 20 7D FC                      JSR NewHealthRender
0BEDF 4C 2B BF                      JMP AreaSecondaryRoutine_POW
0BEE2 8A                        +   TXA
0BEE3 C9 10                         CMP #$10
0BEE5 90 03                         BCC +
0BEE7 A9 10                         LDA #$10
0BEE9 AA                            TAX
0BEEA                           +
0BEEA 48                            PHA
0BEEB AD C2 04                      LDA PlayerHealth
0BEEE F0 0E                         BEQ ++
0BEF0 AE F1 76                      LDX ProjectileType
0BEF3 BD 40 E7                  	LDA ProjectileTileHealth, X
0BEF6 99 01 02                  	STA SpriteDMAArea + 1, Y
0BEF9 68                            PLA
0BEFA AA                            TAX
0BEFB 4C 05 BF                      JMP +++
0BEFE 68                        ++  PLA
0BEFF                           ENDIF
0BEFF                           AreaSecondaryRoutine_HealthBar_Loop:
0BEFF BD 56 BE                  	LDA HealthBarTiles, X
0BF02 99 01 02                  	STA SpriteDMAArea + 1, Y
0BF05                           IFDEF PLAYER_STUFF
0BF05                               +++
0BF05                           ENDIF
0BF05 A9 10                     	LDA #$10
0BF07 99 03 02                  	STA SpriteDMAArea + 3, Y
0BF0A A9 01                     	LDA #$01
0BF0C 99 02 02                  	STA SpriteDMAArea + 2, Y
0BF0F A5 00                     	LDA byte_RAM_0
0BF11 99 00 02                  	STA SpriteDMAArea, Y
0BF14 18                        	CLC
0BF15 69 10                     	ADC #$10
0BF17 85 00                     	STA byte_RAM_0
0BF19 E8                        	INX
0BF1A C8                        	INY
0BF1B C8                        	INY
0BF1C C8                        	INY
0BF1D C8                        	INY
0BF1E E6 03                     	INC byte_RAM_3
0BF20 A5 03                     	LDA byte_RAM_3
0BF22                           IFDEF HEALTH_REVAMP
0BF22 C9 02                     	CMP #2
0BF24 F0 05                     	BEQ AreaSecondaryRoutine_POW
0BF26                           ENDIF
0BF26 CD C3 04                  	CMP PlayerMaxHealth
0BF29 D0 D4                     	BNE AreaSecondaryRoutine_HealthBar_Loop
0BF2B                           
0BF2B                           AreaSecondaryRoutine_POW:
0BF2B AD C4 04                  	LDA POWQuakeTimer
0BF2E                           IFDEF PLAYER_STUFF
0BF2E 10 06                         BPL +++ 
0BF30 EE C4 04                      INC POWQuakeTimer
0BF33 EE C4 04                      INC POWQuakeTimer
0BF36                           +++
0BF36                           ENDIF
0BF36 F0 1B                     	BEQ AreaSecondaryRoutine_Exit
0BF38                           
0BF38 CE C4 04                  	DEC POWQuakeTimer
0BF3B 4A                        	LSR A
0BF3C 29 01                     	AND #$01
0BF3E A8                        	TAY
0BF3F A5 FC                     	LDA PPUScrollYMirror
0BF41 10 02                     	BPL AreaSecondaryRoutine_POW_OffsetScreen
0BF43                           
0BF43 C8                        	INY
0BF44 C8                        	INY
0BF45                           
0BF45                           AreaSecondaryRoutine_POW_OffsetScreen:
0BF45 B9 6A BE                  	LDA POWQuakeOffsets, Y
0BF48 8D C5 04                  	STA BackgroundYOffset
0BF4B                           IFDEF PLAYER_STUFF
0BF4B AD C4 04                      LDA POWQuakeTimer
0BF4E 30 03                         BMI AreaSecondaryRoutine_Exit 
0BF50                           ENDIF
0BF50                           
0BF50 4C 56 9B                  	JMP KillOnscreenEnemies
0BF53                           
0BF53                           AreaSecondaryRoutine_Exit:
0BF53 60                        	RTS
0BF54                           
0BF54                           IFDEF CONTROLLER_2_DEBUG
0BF54                           ;
0BF54                           ; Copies all character stats to RAM for hot-swapping the current character
0BF54                           ;
0BF54                           CopyCarryYOffsets:
0BF54                           	LDX #(AreaMainRoutine - CarryYOffsets - 1)
0BF54                           CopyCarryYOffsets_Loop:
0BF54                           	LDA CarryYOffsets, X
0BF54                           	STA CarryYOffsetsRAM, X
0BF54                           	DEX
0BF54                           	BPL CopyCarryYOffsets_Loop
0BF54                           
0BF54                           	RTS
0BF54                           
0BF54                           AreaDebugRoutine:
0BF54                           	LDA CreateObjectType
0BF54                           	BEQ AreaDebugRoutine_Exit
0BF54                           
0BF54                           	JSR DebugCreateObject
0BF54                           
0BF54                           AreaDebugRoutine_Exit:
0BF54                           	RTS
0BF54                           
0BF54                           ;
0BF54                           ; Input
0BF54                           ;   CreateObjectType = object type
0BF54                           ;
0BF54                           DebugCreateObject:
0BF54                           	JSR CreateEnemy
0BF54                           
0BF54                           	BMI AreaDebugRoutine_Exit
0BF54                           
0BF54                           	LDX byte_RAM_0
0BF54                           	LDA CreateObjectType
0BF54                           	STA ObjectType, X
0BF54                           	LDA ScreenBoundaryLeftLo
0BF54                           	ADC #$80
0BF54                           	STA ObjectXLo, X
0BF54                           	LDA ScreenBoundaryLeftHi
0BF54                           	ADC #$00
0BF54                           	STA ObjectXHi, X
0BF54                           	LDA ScreenYLo
0BF54                           	STA ObjectYLo, X
0BF54                           	LDA ScreenYHi
0BF54                           	ADC #$00
0BF54                           	STA ObjectYHi, X
0BF54                           
0BF54                           	JSR InitializeEnemy
0BF54                           
0BF54                           	LDA CreateObjectAttributes
0BF54                           	BEQ DebugCreateObject_ClearObjectType
0BF54                           
0BF54                           DebugCreateObject_ObjectCarried:
0BF54                           	ROL CreateObjectAttributes
0BF54                           	BCC DebugCreateObject_ObjectTimer
0BF54                           
0BF54                           	LDA #$01
0BF54                           	STA HoldingItem
0BF54                           	STA ObjectBeingCarriedTimer, X
0BF54                           	STX ObjectBeingCarriedIndex
0BF54                           
0BF54                           	LDA #SoundEffect1_CherryGet
0BF54                           	STA SoundEffectQueue1
0BF54                           
0BF54                           DebugCreateObject_ObjectTimer:
0BF54                           	ROL CreateObjectAttributes
0BF54                           	BCC DebugCreateObject_ObjectBottomScreen
0BF54                           
0BF54                           	LDA #$FF
0BF54                           	STA EnemyTimer, X
0BF54                           
0BF54                           DebugCreateObject_ObjectBottomScreen:
0BF54                           	ROL CreateObjectAttributes
0BF54                           	BCC DebugCreateObject_Bit4
0BF54                           
0BF54                           	LDA ObjectYLo, X
0BF54                           	CLC
0BF54                           	ADC #$E0
0BF54                           	STA ObjectYLo, X
0BF54                           	LDA ObjectYHi, X
0BF54                           	ADC #$00
0BF54                           	STA ObjectYHi, X
0BF54                           
0BF54                           DebugCreateObject_Bit4:
0BF54                           	ROL CreateObjectAttributes
0BF54                           	BCC DebugCreateObject_Bit3
0BF54                           
0BF54                           DebugCreateObject_Bit3:
0BF54                           	ROL CreateObjectAttributes
0BF54                           	BCC DebugCreateObject_Bit2
0BF54                           
0BF54                           DebugCreateObject_Bit2:
0BF54                           	ROL CreateObjectAttributes
0BF54                           	BCC DebugCreateObject_ObjectThrown
0BF54                           
0BF54                           DebugCreateObject_ObjectThrown:
0BF54                           	ROL CreateObjectAttributes
0BF54                           	BCC DebugCreateObject_ObjectNoVelocityReset
0BF54                           
0BF54                           	LDA #$01
0BF54                           	STA EnemyArray_42F, X
0BF54                           
0BF54                           DebugCreateObject_ObjectNoVelocityReset:
0BF54                           	ROL CreateObjectAttributes
0BF54                           	BCS DebugCreateObject_ClearObjectType
0BF54                           
0BF54                           	LDA #$00
0BF54                           	STA ObjectXVelocity, X
0BF54                           	STA ObjectYVelocity, X
0BF54                           
0BF54                           DebugCreateObject_ClearObjectType:
0BF54                           	LDA #$00
0BF54                           	STA CreateObjectType
0BF54                           
0BF54                           DebugCreateObject_Exit:
0BF54                           	RTS
0BF54                           
0BF54                           ENDIF
0BF54                           
0BF54 FF FF FF FF FF FF FF FF.. .pad $c000, $ff
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; Banks 4 and 5. Music engine and song data.
0C000                           .base $8000
08000                           .include "src/prg-4-5.asm"
08000                           ;
08000                           ; Bank 4 & Bank 5
08000                           ; ===============
08000                           ;
08000                           ; What's inside:
08000                           ;
08000                           ;   - Music engine
08000                           ;   - Sound effects engine
08000                           ;   - Sound effect pointers and data
08000                           ;   - Song pointers and data
08000                           ;   - Note length tables (tempos)
08000                           ;   - Instrument tables and data
08000                           ;
08000                           
08000                           StartProcessingSoundQueue:
08000 A9 FF                     	LDA #$FF
08002 8D 17 40                  	STA JOY2
08005 AD 00 01                  	LDA StackArea
08008 C9 41                     	CMP #Stack100_Pause
0800A D0 08                     	BNE ProcessMusicAndSfxQueues
0800C                           
0800C A9 0C                     	LDA #%00001100 ; Mute the two square channels
0800E 8D 15 40                  	STA SND_CHN
08011                           	; You would think you could skip processing,
08011                           	; since if the game is paused, nothing should
08011                           	; be setting new music or whatever.
08011                           	;
08011                           	; You would be correct, except for the suicide code!
08011                           	; That sets MusicQueue2.
08011                           	;
08011                           	; If not for processing it, the music would not
08011                           	; change (or stop) when you used the code. Welp!
08011 4C 20 80                  	JMP ProcessOnlyMusicQueue2
08014                           
08014                           
08014                           ProcessMusicAndSfxQueues:
08014 20 78 80                  	JSR ProcessSoundEffectQueue2
08017                           
08017 20 38 81                  	JSR ProcessSoundEffectQueue1
0801A                           
0801A 20 A2 82                  	JSR ProcessSoundEffectQueue3
0801D                           
0801D 20 FD 82                  	JSR ProcessDPCMQueue
08020                           
08020                           ProcessOnlyMusicQueue2:
08020 20 61 83                  	JSR ProcessMusicQueue
08023                           
08023                           	; Reset queues
08023 A9 00                     	LDA #$00
08025 8D 04 06                  	STA SoundEffectQueue2
08028 8D 03 06                  	STA MusicQueue2
0802B 8D 02 06                  	STA SoundEffectQueue1
0802E 8D 01 06                  	STA DPCMQueue
08031 8D 00 06                  	STA MusicQueue1
08034 8D 05 06                  	STA SoundEffectQueue3
08037 60                        	RTS
08038                           
08038                           
08038                           ProcessSoundEffectQueue2_Jump:
08038 A9 42                     	LDA #$42
0803A A2 82                     	LDX #$82
0803C A0 A8                     	LDY #$A8
0803E 20 DC 86                  	JSR PlaySquare1Sweep
08041                           
08041 A9 22                     	LDA #$22
08043 85 C4                     	STA SoundEffectTimer2
08045                           
08045                           ProcessSoundEffectQueue2_JumpPart2:
08045 A5 C4                     	LDA SoundEffectTimer2
08047 C9 20                     	CMP #$20
08049 D0 06                     	BNE ProcessSoundEffectQueue2_JumpPart3
0804B                           
0804B A2 DF                     	LDX #$DF
0804D A0 F6                     	LDY #$F6
0804F D0 08                     	BNE ProcessSoundEffectQueue2_SetSquare1ThenDecrementTimer
08051                           
08051                           ProcessSoundEffectQueue2_JumpPart3:
08051 C9 1A                     	CMP #$1A
08053 D0 21                     	BNE ProcessSoundEffectQueue2_ThenDecrementTimer
08055                           
08055 A2 C1                     	LDX #$C1
08057 A0 BC                     	LDY #$BC
08059                           
08059                           ProcessSoundEffectQueue2_SetSquare1ThenDecrementTimer:
08059 20 CE 86                  	JSR SetSquare1VolumeAndSweep
0805C                           
0805C D0 18                     	BNE ProcessSoundEffectQueue2_ThenDecrementTimer
0805E                           
0805E                           ProcessSoundEffectQueue2_CoinGet:
0805E A9 35                     	LDA #$35
08060 A2 8D                     	LDX #$8D
08062 85 C4                     	STA SoundEffectTimer2
08064                           
08064 A0 7F                     	LDY #$7F
08066 A9 5E                     	LDA #$5E
08068 20 DC 86                  	JSR PlaySquare1Sweep
0806B                           
0806B                           ProcessSoundEffectQueue2_CoinGetPart2:
0806B A5 C4                     	LDA SoundEffectTimer2
0806D C9 30                     	CMP #$30
0806F D0 05                     	BNE ProcessSoundEffectQueue2_ThenDecrementTimer
08071                           
08071 A9 54                     	LDA #$54
08073 8D 02 40                  	STA SQ1_LO
08076                           
08076                           ProcessSoundEffectQueue2_ThenDecrementTimer:
08076 D0 5B                     	BNE ProcessSoundEffectQueue2_DecrementTimer
08078                           
08078                           ProcessSoundEffectQueue2:
08078 AD 0D 06                  	LDA SoundEffectPlaying2
0807B C9 02                     	CMP #SoundEffect2_Climbing
0807D F0 54                     	BEQ ProcessSoundEffectQueue2_DecrementTimer
0807F                           
0807F AC 04 06                  	LDY SoundEffectQueue2
08082 F0 21                     	BEQ ProcessSoundEffectQueue2_None
08084                           
08084 8C 0D 06                  	STY SoundEffectPlaying2
08087 4E 04 06                  	LSR SoundEffectQueue2
0808A B0 AC                     	BCS ProcessSoundEffectQueue2_Jump
0808C                           
0808C 4E 04 06                  	LSR SoundEffectQueue2
0808F B0 32                     	BCS ProcessSoundEffectQueue2_Climbing
08091                           
08091 4E 04 06                  	LSR SoundEffectQueue2
08094 B0 C8                     	BCS ProcessSoundEffectQueue2_CoinGet
08096                           
08096 4E 04 06                  	LSR SoundEffectQueue2
08099 B0 4C                     	BCS ProcessSoundEffectQueue2_Shrinking
0809B                           
0809B 4E 04 06                  	LSR SoundEffectQueue2
0809E B0 1D                     	BCS ProcessSoundEffectQueue2_IntroFallSlide
080A0                           
080A0 4E 04 06                  	LSR SoundEffectQueue2
080A3 B0 5E                     	BCS ProcessSoundEffectQueue2_Growing
080A5                           
080A5                           ProcessSoundEffectQueue2_None:
080A5 AD 0D 06                  	LDA SoundEffectPlaying2
080A8 F0 12                     	BEQ ProcessSoundEffectQueue2_NoneExit
080AA                           
080AA                           	; Jumping
080AA 4A                        	LSR A
080AB B0 98                     	BCS ProcessSoundEffectQueue2_JumpPart2
080AD                           
080AD                           	; Climbing
080AD 4A                        	LSR A
080AE B0 23                     	BCS ProcessSoundEffectQueue2_DecrementTimer
080B0                           
080B0                           	; CoinGet
080B0 4A                        	LSR A
080B1 B0 B8                     	BCS ProcessSoundEffectQueue2_CoinGetPart2
080B3                           
080B3                           	; Shrinking
080B3 4A                        	LSR A
080B4 B0 35                     	BCS ProcessSoundEffectQueue2_ShrinkingPart2
080B6                           
080B6                           	; IntroFallSlide
080B6 4A                        	LSR A
080B7 B0 1A                     	BCS ProcessSoundEffectQueue2_DecrementTimer
080B9                           
080B9                           	; Growing
080B9 4A                        	LSR A
080BA B0 4B                     	BCS ProcessSoundEffectQueue2_GrowingPart2
080BC                           
080BC                           ProcessSoundEffectQueue2_NoneExit:
080BC 60                        	RTS
080BD                           
080BD                           ProcessSoundEffectQueue2_IntroFallSlide:
080BD A9 60                     	LDA #$60
080BF A0 A5                     	LDY #$A5
080C1 D0 07                     	BNE ProcessSoundEffectQueue2_SingleSweep
080C3                           
080C3                           ProcessSoundEffectQueue2_Climbing:
080C3 8C 0D 06                  	STY SoundEffectPlaying2
080C6 A9 05                     	LDA #$05
080C8 A0 9C                     	LDY #$9C
080CA                           
080CA                           ; A = timer
080CA                           ; Y = sweep
080CA                           ProcessSoundEffectQueue2_SingleSweep:
080CA A2 9E                     	LDX #$9E
080CC 85 C4                     	STA SoundEffectTimer2
080CE A9 60                     	LDA #$60
080D0 20 DC 86                  	JSR PlaySquare1Sweep
080D3                           
080D3                           ProcessSoundEffectQueue2_DecrementTimer:
080D3 C6 C4                     	DEC SoundEffectTimer2
080D5 D0 0F                     	BNE ProcessSoundEffectQueue2_Exit
080D7                           
080D7 A2 0E                     	LDX #%00001110
080D9 8E 15 40                  	STX SND_CHN
080DC A2 0F                     	LDX #%00001111
080DE 8E 15 40                  	STX SND_CHN
080E1 A2 00                     	LDX #$00
080E3 8E 0D 06                  	STX SoundEffectPlaying2
080E6                           
080E6                           ProcessSoundEffectQueue2_Exit:
080E6 60                        	RTS
080E7                           
080E7                           ProcessSoundEffectQueue2_Shrinking:
080E7 A9 2F                     	LDA #$2F
080E9 85 C4                     	STA SoundEffectTimer2
080EB                           
080EB                           ProcessSoundEffectQueue2_ShrinkingPart2:
080EB A5 C4                     	LDA SoundEffectTimer2
080ED 4A                        	LSR A
080EE B0 10                     	BCS ProcessSoundEffectQueue2_ShrinkingPart3
080F0                           
080F0 4A                        	LSR A
080F1 B0 0D                     	BCS ProcessSoundEffectQueue2_ShrinkingPart3
080F3                           
080F3 29 02                     	AND #$02
080F5 F0 09                     	BEQ ProcessSoundEffectQueue2_ShrinkingPart3
080F7                           
080F7 A0 91                     	LDY #$91
080F9 A2 9A                     	LDX #$9A
080FB A9 68                     	LDA #$68
080FD 20 DC 86                  	JSR PlaySquare1Sweep
08100                           
08100                           ProcessSoundEffectQueue2_ShrinkingPart3:
08100 4C D3 80                  	JMP ProcessSoundEffectQueue2_DecrementTimer
08103                           
08103                           ProcessSoundEffectQueue2_Growing:
08103 A9 36                     	LDA #$36
08105 85 C4                     	STA SoundEffectTimer2
08107                           
08107                           ProcessSoundEffectQueue2_GrowingPart2:
08107 A5 C4                     	LDA SoundEffectTimer2
08109 4A                        	LSR A
0810A B0 C7                     	BCS ProcessSoundEffectQueue2_DecrementTimer
0810C                           
0810C A8                        	TAY
0810D B9 19 81                  	LDA MushroomSoundData - 1, Y
08110 A2 5D                     	LDX #$5D
08112 A0 7F                     	LDY #$7F
08114 20 DC 86                  	JSR PlaySquare1Sweep
08117                           
08117 4C D3 80                  	JMP ProcessSoundEffectQueue2_DecrementTimer
0811A                           
0811A                           MushroomSoundData:
0811A 6A 74 6A 64 5C 52 5C 52.. 	.db $6A, $74, $6A, $64, $5C, $52, $5C, $52, $4C, $44, $66, $70, $66, $60, $58, $4E
0812A 58 4E 48 40 56 60 56 50.. 	.db $58, $4E, $48, $40, $56, $60, $56, $50, $48, $3E, $48, $3E, $38, $30 ; $10
08138                           
08138                           
08138                           ProcessSoundEffectQueue1:
08138 AD 02 06                  	LDA SoundEffectQueue1
0813B F0 09                     	BEQ ProcessSoundEffectQueue1_None
0813D                           
0813D C9 40                     	CMP #SoundEffect1_StopwatchTick
0813F D0 0B                     	BNE ProcessSoundEffectQueue1_Part2
08141                           
08141 AE 07 06                  	LDX SoundEffectPlaying1
08144 F0 06                     	BEQ ProcessSoundEffectQueue1_Part2
08146                           
08146                           ProcessSoundEffectQueue1_None:
08146 AD 07 06                  	LDA SoundEffectPlaying1
08149 D0 0F                     	BNE ProcessSoundEffectQueue1_Part3
0814B                           
0814B 60                        	RTS
0814C                           
0814C                           ProcessSoundEffectQueue1_Part2:
0814C 8D 07 06                  	STA SoundEffectPlaying1
0814F A0 00                     	LDY #$00
08151                           
08151                           ProcessSoundEffectQueue1_PointerLoop:
08151 C8                        	INY
08152 4A                        	LSR A
08153 90 FC                     	BCC ProcessSoundEffectQueue1_PointerLoop
08155                           
08155 B9 8E 81                  	LDA SoundEffectPointers - 1, Y
08158 85 C1                     	STA SoundEffect1DataOffset
0815A                           
0815A                           ProcessSoundEffectQueue1_Part3:
0815A A4 C1                     	LDY SoundEffect1DataOffset
0815C E6 C1                     	INC SoundEffect1DataOffset
0815E B9 8F 81                  	LDA SoundEffectPointers, Y
08161 30 15                     	BMI ProcessSoundEffectQueue1_Patch
08163                           
08163 D0 1D                     	BNE ProcessSoundEffectQueue1_Note
08165                           
08165                           	; if it was $00, we're at the end of the data for this sound effect
08165 A2 90                     	LDX #$90
08167 8E 04 40                  	STX SQ2_VOL
0816A A2 18                     	LDX #$18
0816C 8E 07 40                  	STX SQ2_HI
0816F A2 00                     	LDX #$00
08171 8E 06 40                  	STX SQ2_LO
08174 8E 07 06                  	STX SoundEffectPlaying1
08177 60                        	RTS
08178                           
08178                           ProcessSoundEffectQueue1_Patch:
08178 8D 04 40                  	STA SQ2_VOL
0817B A4 C1                     	LDY SoundEffect1DataOffset
0817D E6 C1                     	INC SoundEffect1DataOffset
0817F B9 8F 81                  	LDA SoundEffectPointers, Y
08182                           
08182                           ProcessSoundEffectQueue1_Note:
08182 C9 7E                     	CMP #$7E
08184 F0 03                     	BEQ ProcessSoundEffectQueue1_Exit
08186                           
08186 20 53 87                  	JSR PlaySquare2Note
08189                           
08189                           ProcessSoundEffectQueue1_Exit:
08189 A9 7F                     	LDA #$7F
0818B 8D 05 40                  	STA SQ2_SWEEP
0818E                           
0818E 60                        	RTS
0818F                           
0818F                           
0818F                           ;
0818F                           ; Sound effect data
0818F                           ;
0818F                           .include "src/music/sound-effect-data.asm"
0818F                           ;
0818F                           ; Sound effect pointers
0818F                           ;
0818F                           .include "src/music/sound-effect-pointers.asm"
0818F                           SoundEffectPointers:
0818F 4E                        	.db SoundEffect1Data_BirdoShot - SoundEffectPointers
08190 08                        	.db SoundEffect1Data_PotionDoorBong - SoundEffectPointers
08191 6D                        	.db SoundEffect1Data_CherryGet - SoundEffectPointers
08192 27                        	.db SoundEffect1Data_ThrowItem - SoundEffectPointers
08193 D7                        	.db SoundEffect1Data_1UP - SoundEffectPointers
08194 74                        	.db SoundEffect1Data_EnemyHit - SoundEffectPointers
08195 8B                        	.db SoundEffect1Data_StopwatchTick - SoundEffectPointers
08196 A5                        	.db SoundEffect1Data_HawkOpen_WartBarf - SoundEffectPointers
08197                           
08197                           ; Sound effects themselves
08197                           ;
08197                           .include "src/music/sound-effects/potion-door-bong.asm"
08197                           SoundEffect1Data_PotionDoorBong:
08197 9F                        	.db $9F
08198 10 0E 0C 7E 7E 7E         	.db $10, $0E, $0C, $7E, $7E, $7E
0819E 10 0E 0C 7E 7E 7E         	.db $10, $0E, $0C, $7E, $7E, $7E
081A4 86                        	.db $86
081A5 10 0E 0C 7E 7E 7E 7E 7E.. 	.db $10, $0E, $0C, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E
081B5 00                        	.db $00
081B6                           .include "src/music/sound-effects/throw-item.asm"
081B6                           SoundEffect1Data_ThrowItem:
081B6 9F 64 7E 7E               	.db $9F, $64, $7E, $7E
081BA 9E 68 7E 7E               	.db $9E, $68, $7E, $7E
081BE 9D 6A 7E 7E               	.db $9D, $6A, $7E, $7E
081C2 9C 6E 7E 7E               	.db $9C, $6E, $7E, $7E
081C6 9B 72 7E 7E               	.db $9B, $72, $7E, $7E
081CA 9A 76 7E 7E               	.db $9A, $76, $7E, $7E
081CE 84 78 7E 7E 7E 7E 7E 7E.. 	.db $84, $78, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E
081DC 00                        	.db $00
081DD                           .include "src/music/sound-effects/birdo-shot.asm"
081DD                           SoundEffect1Data_BirdoShot:
081DD 9F 30 34 36 38            	.db $9F, $30, $34, $36, $38
081E2 9F 3C 3E 40 42            	.db $9F, $3C, $3E, $40, $42
081E7 9A 3A 3C 3E 40            	.db $9A, $3A, $3C, $3E, $40
081EC 9C 38 3A 3C 3E            	.db $9C, $38, $3A, $3C, $3E
081F1 96 36 38 3A 3C            	.db $96, $36, $38, $3A, $3C
081F6 98 34 36 38 36            	.db $98, $34, $36, $38, $36
081FB 00                        	.db $00
081FC                           .include "src/music/sound-effects/cherry-get.asm"
081FC                           SoundEffect1Data_CherryGet:
081FC 81 56 7E 64 7E 68         	.db $81, $56, $7E, $64, $7E, $68
08202 00                        	.db $00
08203                           .include "src/music/sound-effects/enemy-hit.asm"
08203                           SoundEffect1Data_EnemyHit:
08203 99 18 1A 18 1C 18 1A      	.db $99, $18, $1A, $18, $1C, $18, $1A
0820A 9B 18 1C 18 20 18 22      	.db $9B, $18, $1C, $18, $20, $18, $22
08211 9F 18 3C 24 30 3C 18 30   	.db $9F, $18, $3C, $24, $30, $3C, $18, $30
08219 00                        	.db $00
0821A                           .include "src/music/sound-effects/stopwatch-tick.asm"
0821A                           SoundEffect1Data_StopwatchTick:
0821A 80                        	.db $80
0821B 68 7E 7E 7E 7E 7E 7E 7E.. 	.db $68, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E
08224 60 7E 7E                  	.db $60, $7E, $7E
08227 64 7E 7E 7E 7E 7E 7E 7E.. 	.db $64, $7E, $7E, $7E, $7E, $7E, $7E, $7E, $7E
08230 56 7E 7E                  	.db $56, $7E, $7E
08233 00                        	.db $00
08234                           .include "src/music/sound-effects/hawk-open-wart-barf.asm"
08234                           SoundEffect1Data_HawkOpen_WartBarf:
08234 80 1E 1C 1E 1A 18 16 1C.. 	.db $80, $1E, $1C, $1E, $1A, $18, $16, $1C, $18, $1A, $1E, $18
08240 16 14 12 14 16 14 12 2C.. 	.db $16, $14, $12, $14, $16, $14, $12, $2C, $2C, $2A, $2E, $2C
0824C 2A 28 26 28 24 22 20 1E.. 	.db $2A, $28, $26, $28, $24, $22, $20, $1E, $1C, $1A, $18, $16
08258 14 14 12 10 0E 0C 0A 08.. 	.db $14, $14, $12, $10, $0E, $0C, $0A, $08, $08, $06, $04, $02, $02
08265 00                        	.db $00
08266                           .include "src/music/sound-effects/1up.asm"
08266                           SoundEffect1Data_1UP:
08266 81                        	.db $81
08267 5E 7E 7E 7E 7E 7E 7E      	.db $5E, $7E, $7E, $7E, $7E, $7E, $7E
0826E 64 7E 7E 7E 7E 7E 7E      	.db $64, $7E, $7E, $7E, $7E, $7E, $7E
08275 76 7E 7E 7E 7E 7E 7E      	.db $76, $7E, $7E, $7E, $7E, $7E, $7E
0827C 6E 7E 7E 7E 7E 7E 7E      	.db $6E, $7E, $7E, $7E, $7E, $7E, $7E
08283 72 7E 7E 7E 7E 7E 7E      	.db $72, $7E, $7E, $7E, $7E, $7E, $7E
0828A 7C 7E 7E                  	.db $7C, $7E, $7E
0828D 00                        	.db $00
0828E                           
0828E                           
0828E                           ProcessSoundEffectQueue3_ShortNoise:
0828E A9 02                     	LDA #$02
08290 8D 11 06                  	STA SoundEffectTimer3
08293                           
08293                           ProcessSoundEffectQueue3_ShortNoisePart2:
08293 A9 1A                     	LDA #$1A
08295 8D 0C 40                  	STA NOISE_VOL
08298 A9 04                     	LDA #$04
0829A 8D 0E 40                  	STA NOISE_LO
0829D 8D 0F 40                  	STA NOISE_HI
082A0 D0 46                     	BNE ProcessSoundEffectQueue3_DecrementTimer
082A2                           
082A2                           ProcessSoundEffectQueue3:
082A2 AC 05 06                  	LDY SoundEffectQueue3
082A5 F0 12                     	BEQ ProcessSoundEffectQueue3_Part2
082A7                           
082A7 8C 0E 06                  	STY SoundEffectPlaying3
082AA 4E 05 06                  	LSR SoundEffectQueue3
082AD B0 DF                     	BCS ProcessSoundEffectQueue3_ShortNoise
082AF                           
082AF 4E 05 06                  	LSR SoundEffectQueue3
082B2 B0 12                     	BCS ProcessSoundEffectQueue3_Rumble
082B4                           
082B4 4E 05 06                  	LSR SoundEffectQueue3
082B7 B0 0D                     	BCS ProcessSoundEffectQueue3_Rumble
082B9                           
082B9                           ProcessSoundEffectQueue3_Part2:
082B9 AD 0E 06                  	LDA SoundEffectPlaying3
082BC 4A                        	LSR A
082BD B0 D4                     	BCS ProcessSoundEffectQueue3_ShortNoisePart2
082BF                           
082BF 4A                        	LSR A
082C0 B0 09                     	BCS ProcessSoundEffectQueue3_RumblePart2
082C2                           
082C2 4A                        	LSR A
082C3 B0 06                     	BCS ProcessSoundEffectQueue3_RumblePart2
082C5                           
082C5 60                        	RTS
082C6                           
082C6                           ProcessSoundEffectQueue3_Rumble:
082C6 A9 7F                     	LDA #$7F
082C8 8D 11 06                  	STA SoundEffectTimer3
082CB                           
082CB                           ProcessSoundEffectQueue3_RumblePart2:
082CB AC 11 06                  	LDY SoundEffectTimer3
082CE B9 61 83                  	LDA ProcessMusicQueue, Y ; weird, but i guess that's one way to get "random" noise
082D1 09 0C                     	ORA #$0C
082D3 8D 0E 40                  	STA NOISE_LO
082D6 AD 11 06                  	LDA SoundEffectTimer3
082D9 4A                        	LSR A
082DA 4A                        	LSR A
082DB 4A                        	LSR A
082DC 29 1F                     	AND #$1F
082DE 09 10                     	ORA #$10
082E0 8D 0C 40                  	STA NOISE_VOL
082E3 A9 18                     	LDA #$18
082E5 8D 0F 40                  	STA NOISE_HI
082E8                           
082E8                           ProcessSoundEffectQueue3_DecrementTimer:
082E8 CE 11 06                  	DEC SoundEffectTimer3
082EB D0 0F                     	BNE ProcessSoundEffectQueue3_Exit
082ED                           
082ED A2 07                     	LDX #$07
082EF 8E 15 40                  	STX SND_CHN
082F2 A2 0F                     	LDX #$0F
082F4 8E 15 40                  	STX SND_CHN
082F7 A2 00                     	LDX #$00
082F9 8E 0E 06                  	STX SoundEffectPlaying3
082FC                           
082FC                           ProcessSoundEffectQueue3_Exit:
082FC 60                        	RTS
082FD                           
082FD                           
082FD                           ProcessDPCMQueue:
082FD AD 01 06                  	LDA DPCMQueue
08300 D0 15                     	BNE ProcessDPCMQueue_Part2
08302                           
08302 AD 08 06                  	LDA DPCMPlaying
08305 F0 05                     	BEQ ProcessDPCMQueue_None
08307                           
08307 CE 0A 06                  	DEC DPCMTimer
0830A D0 0A                     	BNE ProcessDPCMQueue_Exit
0830C                           
0830C                           ProcessDPCMQueue_None:
0830C A9 00                     	LDA #$00
0830E 8D 08 06                  	STA DPCMPlaying
08311 A9 0F                     	LDA #%00001111
08313 8D 15 40                  	STA SND_CHN
08316                           
08316                           ProcessDPCMQueue_Exit:
08316 60                        	RTS
08317                           
08317                           ProcessDPCMQueue_Part2:
08317 8D 08 06                  	STA DPCMPlaying
0831A                           IFDEF EXPAND_MUSIC
0831A                           	CMP #$7E
0831A                           	BNE ProcessDPCMQueue_LookUpSample
0831A                           
0831A                           	LDA #$A0
0831A                           	STA DPCMTimer
0831A                           	RTS
0831A                           
0831A                           ProcessDPCMQueue_LookUpSample:
0831A                           ENDIF
0831A A0 00                     	LDY #$00
0831C                           
0831C                           IFNDEF EXPAND_MUSIC
0831C                           ProcessDPCMQueue_PointerLoop:
0831C C8                        	INY
0831D 4A                        	LSR A
0831E 90 FC                     	BCC ProcessDPCMQueue_PointerLoop
08320                           ELSE
08320                           	TAY
08320                           ENDIF
08320                           
08320 B9 51 83                  	LDA DMCFreqTable - 1, Y
08323 8D 10 40                  	STA DMC_FREQ
08326                           
08326 B9 41 83                  	LDA DMCStartTable - 1, Y
08329 8D 12 40                  	STA DMC_START
0832C B9 49 83                  	LDA DMCLengthTable - 1, Y
0832F 8D 13 40                  	STA DMC_LEN
08332 A9 A0                     	LDA #$A0
08334 8D 0A 06                  	STA DPCMTimer
08337 A9 0F                     	LDA #%00001111
08339 8D 15 40                  	STA SND_CHN
0833C A9 1F                     	LDA #%00011111
0833E 8D 15 40                  	STA SND_CHN
08341 60                        	RTS
08342                           
08342                           
08342                           DMCStartTable:
08342 33                        	.db (DPCMSampleData_DoorOpenBombBom - DPCMSampleData)/64 ; $4F
08343 44                        	.db (DPCMSampleData_DrumSample - DPCMSampleData)/64 ; $60
08344 2F                        	.db (DPCMSampleData_PlayerHurt - DPCMSampleData)/64 ; $4B
08345 00                        	.db (DPCMSampleData_ItemPull - DPCMSampleData)/64 ; $00
08346 1D                        	.db (DPCMSampleData_BossDeath - DPCMSampleData)/64 ; $31
08347 44                        	.db (DPCMSampleData_DrumSample - DPCMSampleData)/64 ; $60
08348 0E                        	.db (DPCMSampleData_BossHurt - DPCMSampleData)/64 ; $0E
08349 1D                        	.db (DPCMSampleData_PlayerDeath - DPCMSampleData)/64 ; $1D
0834A                           
0834A                           DMCLengthTable:
0834A 43                        	.db (DPCMSampleDataEnd_DoorOpenBombBom - DPCMSampleData_DoorOpenBombBom)/16 ; $43
0834B 14                        	.db (DPCMSampleDataEnd_DrumSample_A - DPCMSampleData_DrumSample)/16 ; $14
0834C 10                        	.db (DPCMSampleDataEnd_PlayerHurt - DPCMSampleData_PlayerHurt)/16 ; $10
0834D 38                        	.db (DPCMSampleDataEnd_ItemPull - DPCMSampleData_ItemPull)/16 ; $38
0834E 48                        	.db (DPCMSampleDataEnd_BossDeath - DPCMSampleData_BossDeath)/16 ; $48
0834F 28                        	.db (DPCMSampleDataEnd_DrumSample_B - DPCMSampleData_DrumSample)/16 ; $28
08350 3C                        	.db (DPCMSampleDataEnd_BossHurt - DPCMSampleData_BossHurt)/16 ; $3C
08351 00                        	.db (DPCMSampleDataEnd_PlayerDeath - DPCMSampleData_PlayerDeath)/16 ; $50
08352                           
08352                           DMCFreqTable:
08352 0E                        	.db $0E
08353 0E                        	.db $0E
08354 0F                        	.db $0F
08355 0F                        	.db $0F
08356 0F                        	.db $0F
08357 0F                        	.db $0F
08358 0F                        	.db $0F
08359 0F                        	.db $0F
0835A 60                        	.db $60 ; ???
0835B                           
0835B                           
0835B                           ProcessMusicQueue_ThenReadNoteData:
0835B 4C 3D 84                  	JMP ProcessMusicQueue_ReadNoteData
0835E                           
0835E                           ProcessMusicQueue_StopMusic:
0835E 4C 65 84                  	JMP StopMusic
08361                           
08361                           ProcessMusicQueue:
08361                           IFDEF PLAYER_STUFF
08361 AD 03 06                  	LDA MusicQueue2
08364 F0 13                         BEQ +
08366 CD 06 06                      CMP MusicPlaying2
08369 F0 0E                         BEQ +
0836B                           ENDIF
0836B AD 03 06                  	LDA MusicQueue2
0836E 30 EE                     	BMI ProcessMusicQueue_StopMusic
08370                           
08370 C9 04                     	CMP #Music2_EndingAndCast
08372 F0 1D                     	BEQ ProcessMusicQueue_EndingAndCast
08374                           
08374 AD 03 06                  	LDA MusicQueue2
08377 D0 60                     	BNE ProcessMusicQueue_Part2
08379                           
08379                           IFDEF PLAYER_STUFF
08379                           +
08379 AD 00 06                      LDA MusicQueue1
0837C F0 0A                         BEQ ++
0837E CD 09 06                      CMP MusicPlaying1
08381 F0 05                         BEQ ++
08383                           +
08383                           ENDIF
08383 AD 00 06                  	LDA MusicQueue1
08386 D0 15                     	BNE ProcessMusicQueue_MusicQueue1
08388                           
08388                           IFDEF PLAYER_STUFF
08388                           ++
08388                           ENDIF
08388 AD 06 06                  	LDA MusicPlaying2
0838B 0D 09 06                  	ORA MusicPlaying1
0838E D0 CB                     	BNE ProcessMusicQueue_ThenReadNoteData
08390                           
08390 60                        	RTS
08391                           
08391                           ProcessMusicQueue_EndingAndCast:
08391 8D 06 06                  	STA MusicPlaying2
08394 A0 00                     	LDY #$00
08396 8C 09 06                  	STY MusicPlaying1
08399 A0 08                     	LDY #$08 ; index of ending music pointer
0839B D0 0E                     	BNE ProcessMusicQueue_ReadFirstPointer
0839D                           
0839D                           ProcessMusicQueue_MusicQueue1:
0839D 8D 09 06                  	STA MusicPlaying1
083A0 A0 00                     	LDY #$00
083A2 8C 06 06                  	STY MusicPlaying2
083A5 A0 FF                     	LDY #$FF
083A7                           
083A7                           IFNDEF EXPAND_MUSIC
083A7                           ProcessMusicQueue_FirstPointerLoop:
083A7 C8                        	INY
083A8 4A                        	LSR A
083A9 90 FC                     	BCC ProcessMusicQueue_FirstPointerLoop
083AB                           ELSE
083AB                           	TAY
083AB                           	DEY
083AB                           ENDIF
083AB                           
083AB                           ProcessMusicQueue_ReadFirstPointer:
083AB B9 29 89                  	LDA MusicPointersFirstPart, Y
083AE 8D EE 05                  	STA MusicPointerFirstPart
083B1 B9 32 89                  	LDA MusicPointersEndPart, Y
083B4 18                        	CLC
083B5 69 02                     	ADC #$02
083B7 8D EF 05                  	STA MusicPointerEndPart
083BA B9 3B 89                  	LDA MusicPointersLoopPart, Y
083BD 8D F0 05                  	STA MusicPointerLoopPart
083C0 AD EE 05                  	LDA MusicPointerFirstPart
083C3                           
083C3                           ProcessMusicQueue_SetCurrentPart:
083C3 8D EC 05                  	STA MusicPointerCurrentPart
083C6                           
083C6                           ProcessMusicQueue_SetNextPart:
083C6 EE EC 05                  	INC MusicPointerCurrentPart
083C9 AC EC 05                  	LDY MusicPointerCurrentPart
083CC CC EF 05                  	CPY MusicPointerEndPart
083CF D0 1A                     	BNE ProcessMusicQueue_ReadHeader
083D1                           
083D1 AD F0 05                  	LDA MusicPointerLoopPart
083D4 D0 ED                     	BNE ProcessMusicQueue_SetCurrentPart
083D6                           
083D6 4C 65 84                  	JMP StopMusic
083D9                           
083D9                           ProcessMusicQueue_Part2:
083D9 8D 06 06                  	STA MusicPlaying2
083DC AC 09 06                  	LDY MusicPlaying1
083DF 8C F3 05                  	STY MusicResume1
083E2 A0 00                     	LDY #$00
083E4 8C 09 06                  	STY MusicPlaying1
083E7                           
083E7                           IFNDEF EXPAND_MUSIC
083E7                           ProcessMusicQueue_PointerLoop:
083E7 C8                        	INY
083E8 4A                        	LSR A
083E9 90 FC                     	BCC ProcessMusicQueue_PointerLoop
083EB                           ELSE
083EB                           	TAY
083EB                           ENDIF
083EB                           
083EB                           IFNDEF EXPAND_MUSIC
083EB                           ProcessMusicQueue_ReadHeader:
083EB B9 25 88                  	LDA MusicPartPointers - 1, Y
083EE A8                        	TAY
083EF B9 26 88                  	LDA MusicPartPointers, Y
083F2 8D 12 06                  	STA MusicTempoSetting
083F5 B9 27 88                  	LDA MusicPartPointers + 1, Y
083F8 85 BB                     	STA CurrentMusicPointer
083FA B9 28 88                  	LDA MusicPartPointers + 2, Y
083FD 85 BC                     	STA CurrentMusicPointer + 1
083FF B9 29 88                  	LDA MusicPartPointers + 3, Y
08402 8D 15 06                  	STA CurrentMusicTriangleOffset
08405 B9 2A 88                  	LDA MusicPartPointers + 4, Y
08408 8D 14 06                  	STA CurrentMusicSquare1Offset
0840B B9 2B 88                  	LDA MusicPartPointers + 5, Y
0840E 8D 16 06                  	STA CurrentMusicNoiseOffset
08411 8D F5 05                  	STA CurrentMusicNoiseStartOffset
08414                           IFDEF PROTOTYPE_MUSIC_UNDERGROUND
08414                           	LDA MusicPartPointers + 6, Y
08414                           ENDIF
08414 8D FF 05                  	STA CurrentMusicDPCMOffset
08417 8D FC 05                  	STA CurrentMusicDPCMStartOffset
0841A                           ENDIF
0841A                           
0841A                           IFDEF EXPAND_MUSIC
0841A                           ProcessMusicQueue_ReadHeader:
0841A                           	LDA MusicPartPointers - 1, Y
0841A                           	TAY
0841A                           
0841A                           	LDA MusicHeaderPointersLo, Y
0841A                           	STA byte_RAM_0
0841A                           	LDA MusicHeaderPointersHi, Y
0841A                           	STA byte_RAM_0+1
0841A                           
0841A                           	LDY #$00
0841A                           
0841A                           	LDA (byte_RAM_0), Y
0841A                           	STA MusicTempoSetting
0841A                           	INY
0841A                           	LDA (byte_RAM_0), Y
0841A                           	STA CurrentMusicPointer
0841A                           	INY
0841A                           	LDA (byte_RAM_0), Y
0841A                           	STA CurrentMusicPointer + 1
0841A                           	INY
0841A                           	LDA (byte_RAM_0), Y
0841A                           	STA CurrentMusicTriangleOffset
0841A                           	INY
0841A                           	LDA (byte_RAM_0), Y
0841A                           	STA CurrentMusicSquare1Offset
0841A                           	INY
0841A                           	LDA (byte_RAM_0), Y
0841A                           	STA CurrentMusicNoiseOffset
0841A                           	STA CurrentMusicNoiseStartOffset
0841A                           	INY
0841A                           	LDA (byte_RAM_0), Y
0841A                           	STA CurrentMusicDPCMOffset
0841A                           	STA CurrentMusicDPCMStartOffset
0841A                           ENDIF
0841A                           
0841A A9 01                     	LDA #$01
0841C 8D 18 06                  	STA MusicSquare2NoteLength
0841F 8D 1A 06                  	STA MusicSquare1NoteLength
08422 8D 1D 06                  	STA MusicTriangleNoteLength
08425 8D 1E 06                  	STA MusicNoiseNoteLength
08428 8D FA 05                  	STA MusicDPCMNoteLength
0842B                           
0842B A9 00                     	LDA #$00
0842D 8D 13 06                  	STA CurrentMusicSquare2Offset
08430 8D 0C 06                  	STA MusicSquare1NoteSweep
08433                           IFDEF EXPAND_MUSIC
08433                           	STA MusicSquare1NoteBend
08433                           	STA MusicSquare2NoteBend
08433                           ENDIF
08433                           
08433 A9 0B                     	LDA #%00001011
08435 8D 15 40                  	STA SND_CHN
08438 A9 0F                     	LDA #%00001111
0843A 8D 15 40                  	STA SND_CHN
0843D                           
0843D                           ProcessMusicQueue_ReadNoteData:
0843D CE 18 06                  	DEC MusicSquare2NoteLength
08440 D0 73                     	BNE ProcessMusicQueue_Square2SustainNote
08442                           
08442 AC 13 06                  	LDY CurrentMusicSquare2Offset
08445 EE 13 06                  	INC CurrentMusicSquare2Offset
08448 B1 BB                     	LDA (CurrentMusicPointer), Y
0844A F0 04                     	BEQ ProcessMusicQueue_EndOfSegment
0844C                           
0844C 10 43                     	BPL ProcessMusicQueue_Square2Note
0844E                           
0844E D0 2C                     	BNE ProcessMusicQueue_Square2Patch
08450                           
08450                           ProcessMusicQueue_EndOfSegment:
08450 AD 09 06                  	LDA MusicPlaying1
08453 D0 21                     	BNE ProcessMusicQueue_ThenSetNextPart
08455                           
08455 AD 06 06                  	LDA MusicPlaying2
08458 C9 04                     	CMP #Music2_EndingAndCast
0845A F0 1A                     	BEQ ProcessMusicQueue_ThenSetNextPart
0845C                           
0845C                           IFNDEF EXPAND_MUSIC
0845C 29 25                     	AND #Music1_Overworld | Music1_Inside | Music1_Subspace
0845E                           ELSE
0845E                           	JSR CheckStopMusic
0845E                           ENDIF
0845E F0 05                     	BEQ StopMusic
08460                           
08460 AD F3 05                  	LDA MusicResume1
08463 D0 14                     	BNE ProcessMusicQueue_ResumeMusicQueue1
08465                           
08465                           StopMusic:
08465 A9 00                     	LDA #$00
08467 8D 06 06                  	STA MusicPlaying2
0846A 8D 09 06                  	STA MusicPlaying1
0846D 8D 15 40                  	STA SND_CHN
08470 A2 0F                     	LDX #%00001111
08472 8E 15 40                  	STX SND_CHN
08475 60                        	RTS
08476                           
08476                           ProcessMusicQueue_ThenSetNextPart:
08476 4C C6 83                  	JMP ProcessMusicQueue_SetNextPart
08479                           
08479                           ProcessMusicQueue_ResumeMusicQueue1:
08479 4C 9D 83                  	JMP ProcessMusicQueue_MusicQueue1
0847C                           
0847C                           ProcessMusicQueue_Square2Patch:
0847C AA                        	TAX
0847D 29 F0                     	AND #$F0
0847F 8D F1 05                  	STA MusicSquare2Patch
08482 8A                        	TXA
08483 20 3D 86                  	JSR ProcessMusicQueue_PatchNoteLength
08486                           
08486 8D 17 06                  	STA MusicSquare2NoteStartLength
08489                           
08489                           ProcessMusicQueue_Square2NextOffset:
08489 AC 13 06                  	LDY CurrentMusicSquare2Offset
0848C EE 13 06                  	INC CurrentMusicSquare2Offset
0848F B1 BB                     	LDA (CurrentMusicPointer), Y
08491                           
08491                           ProcessMusicQueue_Square2Note:
08491 AE 07 06                  	LDX SoundEffectPlaying1
08494 D0 19                     	BNE ProcessMusicQueue_Square2ContinueNote
08496                           
08496 20 53 87                  	JSR PlaySquare2Note
08499                           
08499 A8                        	TAY
0849A D0 05                     	BNE ProcessMusicQueue_Square2StartNote
0849C                           
0849C A5 BF                     	LDA MusicSquareInstrumentStartOffset
0849E 4C A9 84                  	JMP ProcessMusicQueue_Square2UpdateNoteOffset
084A1                           
084A1                           ProcessMusicQueue_Square2StartNote:
084A1 AD 17 06                  	LDA MusicSquare2NoteStartLength
084A4                           	; seems like the next line should be LDX MusicSquareEnvelope based on the equivalent code for square 1?
084A4 A6 BF                     	LDX MusicSquareInstrumentStartOffset ; always overridden in the following subroutine...?
084A6 20 48 86                  	JSR SetInstrumentStartOffset
084A9                           
084A9                           ProcessMusicQueue_Square2UpdateNoteOffset:
084A9 8D 19 06                  	STA MusicSquare2InstrumentOffset
084AC                           
084AC                           IFDEF EXPAND_MUSIC
084AC                           	JSR CheckSquare2NoteBend
084AC                           ENDIF
084AC                           
084AC 20 D5 86                  	JSR SetSquare2VolumeAndSweep
084AF                           
084AF                           ProcessMusicQueue_Square2ContinueNote:
084AF AD 17 06                  	LDA MusicSquare2NoteStartLength
084B2 8D 18 06                  	STA MusicSquare2NoteLength
084B5                           
084B5                           ProcessMusicQueue_Square2SustainNote:
084B5 AE 07 06                  	LDX SoundEffectPlaying1
084B8 D0 19                     	BNE ProcessMusicQueue_Square1
084BA                           
084BA                           IFDEF EXPAND_MUSIC
084BA                           	LDA MusicSquare2NoteBend
084BA                           	BEQ ProcessMusicQueue_LoadSquare2InstrumentOffset
084BA                           
084BA                           	LDA MusicSquare2NoteStartLength
084BA                           	LDX #$04
084BA                           	JSR UpdateNoteBend
084BA                           ENDIF
084BA                           
084BA                           ProcessMusicQueue_LoadSquare2InstrumentOffset:
084BA AC 19 06                  	LDY MusicSquare2InstrumentOffset
084BD F0 03                     	BEQ ProcessMusicQueue_LoadSquare2Instrument
084BF                           
084BF CE 19 06                  	DEC MusicSquare2InstrumentOffset
084C2                           
084C2                           ProcessMusicQueue_LoadSquare2Instrument:
084C2 AD 17 06                  	LDA MusicSquare2NoteStartLength
084C5 AE F1 05                  	LDX MusicSquare2Patch
084C8 20 57 86                  	JSR LoadSquareInstrumentDVE
084CB                           
084CB 8D 04 40                  	STA SQ2_VOL
084CE A2 7F                     	LDX #$7F
084D0 8E 05 40                  	STX SQ2_SWEEP
084D3                           
084D3                           ProcessMusicQueue_Square1:
084D3 CE 1A 06                  	DEC MusicSquare1NoteLength
084D6 D0 54                     	BNE ProcessMusicQueue_Square1SustainNote
084D8                           
084D8                           ProcessMusicQueue_Square1Patch:
084D8 AC 14 06                  	LDY CurrentMusicSquare1Offset
084DB EE 14 06                  	INC CurrentMusicSquare1Offset
084DE B1 BB                     	LDA (CurrentMusicPointer), Y
084E0 10 15                     	BPL ProcessMusicQueue_Square1AfterPatch
084E2                           
084E2 AA                        	TAX
084E3 29 F0                     	AND #$F0
084E5 8D F2 05                  	STA MusicSquare1Patch
084E8 8A                        	TXA
084E9 20 3D 86                  	JSR ProcessMusicQueue_PatchNoteLength
084EC                           
084EC 8D ED 05                  	STA MusicSquare1NoteStartLength
084EF                           
084EF                           ProcessMusicQueue_Square1NextOffset:
084EF AC 14 06                  	LDY CurrentMusicSquare1Offset
084F2 EE 14 06                  	INC CurrentMusicSquare1Offset
084F5 B1 BB                     	LDA (CurrentMusicPointer), Y
084F7                           
084F7                           ProcessMusicQueue_Square1AfterPatch:
084F7 A8                        	TAY
084F8 D0 0F                     	BNE ProcessMusicQueue_Square1Note
084FA                           
084FA A9 83                     	LDA #$83
084FC 8D 00 40                  	STA SQ1_VOL
084FF A9 94                     	LDA #$94
08501 8D 01 40                  	STA SQ1_SWEEP
08504 8D 0C 06                  	STA MusicSquare1NoteSweep
08507 D0 CF                     	BNE ProcessMusicQueue_Square1Patch
08509                           
08509                           ProcessMusicQueue_Square1Note:
08509 AC 0D 06                  	LDY SoundEffectPlaying2
0850C D0 18                     	BNE ProcessMusicQueue_Square1ContinueNote
0850E                           
0850E 20 E2 86                  	JSR PlaySquare1Note
08511                           
08511 D0 05                     	BNE ProcessMusicQueue_Square1StartNote
08513                           
08513 A5 BF                     	LDA MusicSquareInstrumentStartOffset
08515 4C 20 85                  	JMP ProcessMusicQueue_Square1UpdateNoteOffset
08518                           
08518                           ProcessMusicQueue_Square1StartNote:
08518 AD ED 05                  	LDA MusicSquare1NoteStartLength
0851B A6 C0                     	LDX MusicSquareEnvelope ; always overridden in the following subroutine...?
0851D 20 48 86                  	JSR SetInstrumentStartOffset
08520                           
08520                           ProcessMusicQueue_Square1UpdateNoteOffset:
08520 8D 1B 06                  	STA MusicSquare1InstrumentOffset
08523                           
08523                           IFDEF EXPAND_MUSIC
08523                           	JSR CheckSquare1NoteBend
08523                           ENDIF
08523                           
08523 20 CE 86                  	JSR SetSquare1VolumeAndSweep
08526                           
08526                           ProcessMusicQueue_Square1ContinueNote:
08526 AD ED 05                  	LDA MusicSquare1NoteStartLength
08529 8D 1A 06                  	STA MusicSquare1NoteLength
0852C                           
0852C                           ProcessMusicQueue_Square1SustainNote:
0852C AD 0D 06                  	LDA SoundEffectPlaying2
0852F D0 1E                     	BNE ProcessMusicQueue_Triangle
08531                           
08531                           IFDEF EXPAND_MUSIC
08531                           	LDA MusicSquare1NoteBend
08531                           	BEQ ProcessMusicQueue_LoadSquare1InstrumentOffset
08531                           
08531                           	LDX #$00
08531                           	LDA MusicSquare1NoteStartLength
08531                           	JSR UpdateNoteBend
08531                           ENDIF
08531                           
08531                           ProcessMusicQueue_LoadSquare1InstrumentOffset:
08531 AC 1B 06                  	LDY MusicSquare1InstrumentOffset
08534 F0 03                     	BEQ ProcessMusicQueue_Square1AfterDecrementInstrumentOffset
08536                           
08536 CE 1B 06                  	DEC MusicSquare1InstrumentOffset
08539                           
08539                           ProcessMusicQueue_Square1AfterDecrementInstrumentOffset:
08539 AD ED 05                  	LDA MusicSquare1NoteStartLength
0853C AE F2 05                  	LDX MusicSquare1Patch
0853F 20 57 86                  	JSR LoadSquareInstrumentDVE
08542                           
08542 8D 00 40                  	STA SQ1_VOL
08545 AD 0C 06                  	LDA MusicSquare1NoteSweep
08548 D0 02                     	BNE ProcessMusicQueue_Square1Sweep
0854A                           
0854A A9 7F                     	LDA #$7F
0854C                           
0854C                           ProcessMusicQueue_Square1Sweep:
0854C 8D 01 40                  	STA SQ1_SWEEP
0854F                           
0854F                           ProcessMusicQueue_Triangle:
0854F AD 15 06                  	LDA CurrentMusicTriangleOffset
08552 F0 45                     	BEQ ProcessMusicQueue_NoiseDPCM
08554                           
08554 CE 1D 06                  	DEC MusicTriangleNoteLength
08557 D0 40                     	BNE ProcessMusicQueue_NoiseDPCM
08559                           
08559 AC 15 06                  	LDY CurrentMusicTriangleOffset
0855C EE 15 06                  	INC CurrentMusicTriangleOffset
0855F B1 BB                     	LDA (CurrentMusicPointer), Y
08561 F0 33                     	BEQ ProcessMusicQueue_TriangleSetLength
08563                           
08563 10 15                     	BPL ProcessMusicQueue_TriangleNote
08565                           
08565 20 3D 86                  	JSR ProcessMusicQueue_PatchNoteLength
08568                           
08568 8D 1C 06                  	STA MusicTriangleNoteStartLength
0856B A9 1F                     	LDA #$1F
0856D 8D 08 40                  	STA TRI_LINEAR
08570 AC 15 06                  	LDY CurrentMusicTriangleOffset
08573 EE 15 06                  	INC CurrentMusicTriangleOffset
08576 B1 BB                     	LDA (CurrentMusicPointer), Y
08578 F0 1C                     	BEQ ProcessMusicQueue_TriangleSetLength
0857A                           
0857A                           ProcessMusicQueue_TriangleNote:
0857A 20 57 87                  	JSR PlayTriangleNote
0857D                           
0857D AE 1C 06                  	LDX MusicTriangleNoteStartLength
08580 8E 1D 06                  	STX MusicTriangleNoteLength
08583 8A                        	TXA
08584 C9 0A                     	CMP #$0A
08586 90 08                     	BCC ProcessMusicQueue_TriangleNoteShort
08588                           
08588 C9 1E                     	CMP #$1E
0858A B0 08                     	BCS ProcessMusicQueue_TriangleNoteLong
0858C                           
0858C                           ProcessMusicQueue_TriangleNoteMedium:
0858C A9 24                     	LDA #$24
0858E D0 06                     	BNE ProcessMusicQueue_TriangleSetLength
08590                           
08590                           ProcessMusicQueue_TriangleNoteShort:
08590 A9 18                     	LDA #$18
08592 D0 02                     	BNE ProcessMusicQueue_TriangleSetLength
08594                           
08594                           ProcessMusicQueue_TriangleNoteLong:
08594 A9 6F                     	LDA #$6F
08596                           
08596                           ProcessMusicQueue_TriangleSetLength:
08596 8D 08 40                  	STA TRI_LINEAR
08599                           
08599                           ProcessMusicQueue_NoiseDPCM:
08599                           IFNDEF EXPAND_MUSIC
08599                           	IFNDEF PROTOTYPE_MUSIC_UNDERGROUND
08599                           		IFNDEF PROTOTYPE_MUSIC_STARMAN
08599                           			; skip to DPCM for underground/invincibility music
08599 AD 09 06                  			LDA MusicPlaying1
0859C 29 14                     			AND #Music1_Inside | Music1_Invincible
0859E D0 54                     			BNE ProcessMusicQueue_DPCM
085A0                           		ELSE
085A0                           			; skip to DPCM for underground music ONLY
085A0                           			LDA MusicPlaying1
085A0                           			AND #Music1_Inside
085A0                           			BNE ProcessMusicQueue_DPCM
085A0                           		ENDIF
085A0                           	ELSE
085A0                           		IFNDEF PROTOTYPE_MUSIC_STARMAN
085A0                           			; no starman, underground
085A0                           			LDA MusicPlaying1
085A0                           			AND #Music1_Invincible
085A0                           			BNE ProcessMusicQueue_DPCM
085A0                           		ENDIF
085A0                           	ENDIF
085A0                           ENDIF
085A0                           
085A0                           ProcessMusicQueue_Noise:
085A0 AD 16 06                  	LDA CurrentMusicNoiseOffset
085A3 F0 3B                     	BEQ ProcessMusicQueue_ThenNoiseEnd
085A5                           
085A5 CE 1E 06                  	DEC MusicNoiseNoteLength
085A8 D0 36                     	BNE ProcessMusicQueue_ThenNoiseEnd
085AA                           
085AA                           ProcessMusicQueue_NoiseByte:
085AA AC 16 06                  	LDY CurrentMusicNoiseOffset
085AD EE 16 06                  	INC CurrentMusicNoiseOffset
085B0 B1 BB                     	LDA (CurrentMusicPointer), Y
085B2 F0 2F                     	BEQ ProcessMusicQueue_NoiseLoopSegment
085B4                           
085B4 10 10                     	BPL ProcessMusicQueue_NoiseNote
085B6                           
085B6 20 3D 86                  	JSR ProcessMusicQueue_PatchNoteLength
085B9                           
085B9 8D 1F 06                  	STA MusicNoiseNoteStartLength
085BC AC 16 06                  	LDY CurrentMusicNoiseOffset
085BF EE 16 06                  	INC CurrentMusicNoiseOffset
085C2 B1 BB                     	LDA (CurrentMusicPointer), Y
085C4 F0 1D                     	BEQ ProcessMusicQueue_NoiseLoopSegment
085C6                           
085C6                           ProcessMusicQueue_NoiseNote:
085C6 4A                        	LSR A
085C7 A8                        	TAY
085C8 B9 31 86                  	LDA NoiseVolTable, Y
085CB 8D 0C 40                  	STA NOISE_VOL
085CE B9 35 86                  	LDA NoiseLoTable, Y
085D1 8D 0E 40                  	STA NOISE_LO
085D4 B9 39 86                  	LDA NoiseHiTable, Y
085D7 8D 0F 40                  	STA NOISE_HI
085DA AD 1F 06                  	LDA MusicNoiseNoteStartLength
085DD 8D 1E 06                  	STA MusicNoiseNoteLength
085E0                           
085E0                           ProcessMusicQueue_ThenNoiseEnd:
085E0 4C EC 85                  	JMP ProcessMusicQueue_NoiseEnd
085E3                           
085E3                           ProcessMusicQueue_NoiseLoopSegment:
085E3 AD F5 05                  	LDA CurrentMusicNoiseStartOffset
085E6 8D 16 06                  	STA CurrentMusicNoiseOffset
085E9 4C AA 85                  	JMP ProcessMusicQueue_NoiseByte
085EC                           
085EC                           ProcessMusicQueue_NoiseEnd:
085EC                           IFNDEF EXPAND_MUSIC
085EC AD 09 06                  	LDA MusicPlaying1
085EF                           	IFNDEF PROTOTYPE_MUSIC_STARMAN
085EF 29 14                     		AND #Music1_Inside | Music1_Invincible
085F1                           	ELSE
085F1                           		AND #Music1_Inside
085F1                           	ENDIF
085F1 D0 01                     	BNE ProcessMusicQueue_DPCM
085F3                           
085F3 60                        	RTS
085F4                           ENDIF
085F4                           
085F4                           ProcessMusicQueue_DPCM:
085F4 AD FF 05                  	LDA CurrentMusicDPCMOffset
085F7 F0 2E                     	BEQ ProcessMusicQueue_DPCMEnd
085F9                           
085F9 CE FA 05                  	DEC MusicDPCMNoteLength
085FC D0 29                     	BNE ProcessMusicQueue_DPCMEnd
085FE                           
085FE                           ProcessMusicQueue_DPCMByte:
085FE AC FF 05                  	LDY CurrentMusicDPCMOffset
08601 EE FF 05                  	INC CurrentMusicDPCMOffset
08604 B1 BB                     	LDA (CurrentMusicPointer), Y
08606 F0 20                     	BEQ ProcessMusicQueue_DPCMLoopSegment
08608                           
08608 10 10                     	BPL ProcessMusicQueue_DPCMNote
0860A                           
0860A 20 3D 86                  	JSR ProcessMusicQueue_PatchNoteLength
0860D                           
0860D 8D FB 05                  	STA MusicDPCMNoteStartLength
08610 AC FF 05                  	LDY CurrentMusicDPCMOffset
08613 EE FF 05                  	INC CurrentMusicDPCMOffset
08616 B1 BB                     	LDA (CurrentMusicPointer), Y
08618 F0 0E                     	BEQ ProcessMusicQueue_DPCMLoopSegment
0861A                           
0861A                           ProcessMusicQueue_DPCMNote:
0861A                           	; POI: This left shift precludes using the first DPCM sample (bomb explosion) in the DPCM track.
0861A                           	; This could be to allow $80 for a "rest" note on the DPCM track, but none of the in-game music
0861A                           	; takes advantage of that.
0861A                           IFNDEF EXPAND_MUSIC
0861A 0A                        	ASL A
0861B                           ENDIF
0861B 8D 01 06                  	STA DPCMQueue
0861E 20 FD 82                  	JSR ProcessDPCMQueue
08621                           
08621 AD FB 05                  	LDA MusicDPCMNoteStartLength
08624 8D FA 05                  	STA MusicDPCMNoteLength
08627                           
08627                           ProcessMusicQueue_DPCMEnd:
08627 60                        	RTS
08628                           
08628                           ProcessMusicQueue_DPCMLoopSegment:
08628 AD FC 05                  	LDA CurrentMusicDPCMStartOffset
0862B 8D FF 05                  	STA CurrentMusicDPCMOffset
0862E 4C FE 85                  	JMP ProcessMusicQueue_DPCMByte
08631                           
08631                           
08631                           NoiseVolTable:
08631 10                        	.db $10
08632 1E                        	.db $1E
08633 1F                        	.db $1F
08634 16                        	.db $16
08635                           
08635                           NoiseLoTable:
08635 00                        	.db $00
08636 03                        	.db $03
08637 0A                        	.db $0A
08638 02                        	.db $02
08639                           
08639                           NoiseHiTable:
08639 00                        	.db $00
0863A 18                        	.db $18
0863B 18                        	.db $18
0863C 58                        	.db $58
0863D                           
0863D                           
0863D                           ; Input
0863D                           ;   A = full patch byte
0863D                           ; Output
0863D                           ;   A = new note length
0863D                           ProcessMusicQueue_PatchNoteLength:
0863D 29 0F                     	AND #$0F
0863F 18                        	CLC
08640 6D 12 06                  	ADC MusicTempoSetting
08643 A8                        	TAY
08644 B9 73 87                  	LDA NoteLengthTable, Y
08647 60                        	RTS
08648                           
08648                           ; Input
08648                           ;   A = note start length, >= $13 for table A, < $13 for instrument table B
08648                           ; Ouput
08648                           ;   A = starting instrument offset ($16 for short, $3F for long)
08648                           ;   X = duty/volume/envelope ($82)
08648                           ;   Y = sweep ($7F)
08648                           ;
08648                           SetInstrumentStartOffset:
08648 C9 13                     	CMP #$13
0864A 90 04                     	BCC SetInstrumentStartOffset_Short
0864C A9 3F                     	LDA #$3F
0864E D0 02                     	BNE SetInstrumentStartOffset_Exit
08650                           SetInstrumentStartOffset_Short:
08650 A9 16                     	LDA #$16
08652                           SetInstrumentStartOffset_Exit:
08652 A2 82                     	LDX #$82
08654 A0 7F                     	LDY #$7F
08656 60                        	RTS
08657                           
08657                           ;
08657                           ; Loads instrument data for a square channel
08657                           ;
08657                           ; Each instrument has two lookup tables based on the note length.
08657                           ;
08657                           ; Input
08657                           ;   A = note length, >= $13 for table A, < $13 for instrument table B
08657                           ;   X = instrument patch
08657                           ;   Y = instrument offset
08657                           ; Output
08657                           ;   A = duty/volume/envelope
08657                           ;
08657                           LoadSquareInstrumentDVE:
08657 E0 90                     	CPX #$90
08659 F0 25                     	BEQ LoadSquareInstrumentDVE_90_E0
0865B                           
0865B E0 E0                     	CPX #$E0
0865D F0 21                     	BEQ LoadSquareInstrumentDVE_90_E0
0865F                           
0865F E0 A0                     	CPX #$A0
08661 F0 2A                     	BEQ LoadSquareInstrumentDVE_A0
08663                           
08663 E0 B0                     	CPX #$B0
08665 F0 33                     	BEQ LoadSquareInstrumentDVE_B0
08667                           
08667 E0 C0                     	CPX #$C0
08669 F0 3C                     	BEQ LoadSquareInstrumentDVE_C0
0866B                           
0866B E0 D0                     	CPX #$D0
0866D F0 52                     	BEQ LoadSquareInstrumentDVE_D0
0866F                           
0866F E0 F0                     	CPX #$F0
08671 F0 41                     	BEQ LoadSquareInstrumentDVE_F0
08673                           
08673                           LoadSquareInstrumentDVE_80:
08673 C9 13                     	CMP #$13
08675 90 05                     	BCC LoadSquareInstrumentDVE_80_Short
08677 B9 B3 99                  	LDA InstrumentDVE_80, Y
0867A D0 03                     	BNE LoadSquareInstrumentDVE_80_Exit
0867C                           LoadSquareInstrumentDVE_80_Short:
0867C B9 F3 99                  	LDA InstrumentDVE_80_Short, Y
0867F                           LoadSquareInstrumentDVE_80_Exit:
0867F 60                        	RTS
08680                           
08680                           LoadSquareInstrumentDVE_90_E0:
08680 C9 13                     	CMP #$13
08682 90 05                     	BCC LoadSquareInstrumentDVE_90_E0_Short
08684 B9 0A 9A                  	LDA InstrumentDVE_90_E0, Y
08687 D0 03                     	BNE LoadSquareInstrumentDVE_90_E0_Exit
08689                           LoadSquareInstrumentDVE_90_E0_Short:
08689 B9 4A 9A                  	LDA InstrumentDVE_90_E0_Short, Y
0868C                           LoadSquareInstrumentDVE_90_E0_Exit:
0868C 60                        	RTS
0868D                           
0868D                           LoadSquareInstrumentDVE_A0:
0868D C9 13                     	CMP #$13
0868F 90 05                     	BCC LoadSquareInstrumentDVE_A0_Short
08691 B9 61 9A                  	LDA InstrumentDVE_A0, Y
08694 D0 03                     	BNE LoadSquareInstrumentDVE_A0_Exit
08696                           LoadSquareInstrumentDVE_A0_Short:
08696 B9 A1 9A                  	LDA InstrumentDVE_A0_Short, Y
08699                           LoadSquareInstrumentDVE_A0_Exit:
08699 60                        	RTS
0869A                           
0869A                           LoadSquareInstrumentDVE_B0:
0869A C9 13                     	CMP #$13
0869C 90 05                     	BCC LoadSquareInstrumentDVE_B0_Short
0869E B9 B9 9A                  	LDA InstrumentDVE_B0, Y
086A1 D0 03                     	BNE LoadSquareInstrumentDVE_B0_Exit
086A3                           LoadSquareInstrumentDVE_B0_Short:
086A3 B9 F9 9A                  	LDA InstrumentDVE_B0_Short, Y
086A6                           LoadSquareInstrumentDVE_B0_Exit:
086A6 60                        	RTS
086A7                           
086A7                           LoadSquareInstrumentDVE_C0:
086A7 C9 13                     	CMP #$13
086A9 90 05                     	BCC LoadSquareInstrumentDVE_C0_Short
086AB B9 27 9B                  	LDA InstrumentDVE_C0, Y
086AE D0 03                     	BNE LoadSquareInstrumentDVE_C0_Exit
086B0                           LoadSquareInstrumentDVE_C0_Short:
086B0 B9 10 9B                  	LDA InstrumentDVE_C0_Short, Y
086B3                           LoadSquareInstrumentDVE_C0_Exit:
086B3 60                        	RTS
086B4                           
086B4                           LoadSquareInstrumentDVE_F0:
086B4 C9 13                     	CMP #$13
086B6 90 05                     	BCC LoadSquareInstrumentDVE_F0_Short
086B8 B9 D5 9B                  	LDA InstrumentDVE_F0, Y
086BB D0 03                     	BNE LoadSquareInstrumentDVE_F0_Exit
086BD                           LoadSquareInstrumentDVE_F0_Short:
086BD B9 BE 9B                  	LDA InstrumentDVE_F0_Short, Y
086C0                           LoadSquareInstrumentDVE_F0_Exit:
086C0 60                        	RTS
086C1                           
086C1                           LoadSquareInstrumentDVE_D0:
086C1 C9 13                     	CMP #$13
086C3 90 05                     	BCC LoadSquareInstrumentDVE_D0_Short
086C5 B9 67 9B                  	LDA InstrumentDVE_D0, Y
086C8 D0 03                     	BNE LoadSquareInstrumentDVE_D0_Exit
086CA                           LoadSquareInstrumentDVE_D0_Short:
086CA B9 A7 9B                  	LDA InstrumentDVE_D0_Short, Y
086CD                           LoadSquareInstrumentDVE_D0_Exit:
086CD 60                        	RTS
086CE                           
086CE                           
086CE                           ; Sets volume/sweep on Square 1 channel
086CE                           ;
086CE                           ; Input
086CE                           ;   X = duty/volume/envelope
086CE                           ;   Y = sweep
086CE                           SetSquare1VolumeAndSweep:
086CE 8C 01 40                  	STY SQ1_SWEEP
086D1 8E 00 40                  	STX SQ1_VOL
086D4 60                        	RTS
086D5                           
086D5                           ; Sets volume/sweep on Square 2 channel
086D5                           ;
086D5                           ; Input
086D5                           ;   X = duty/volume/envelope
086D5                           ;   Y = sweep
086D5                           SetSquare2VolumeAndSweep:
086D5 8E 04 40                  	STX SQ2_VOL
086D8 8C 05 40                  	STY SQ2_SWEEP
086DB 60                        	RTS
086DC                           
086DC                           ; Sets volume/sweep on Square 1 channel and plays a note
086DC                           ;
086DC                           ; Input
086DC                           ;   A = note
086DC                           ;   X = duty/volume/envelope
086DC                           ;   Y = sweep
086DC                           PlaySquare1Sweep:
086DC 8E 00 40                  	STX SQ1_VOL
086DF 8C 01 40                  	STY SQ1_SWEEP
086E2                           
086E2                           ; Play a note on the Square 1 channel
086E2                           ;
086E2                           ; Input
086E2                           ;   A = note
086E2                           PlaySquare1Note:
086E2 A2 00                     	LDX #$00
086E4                           
086E4                           ; Plays a note
086E4                           ;
086E4                           ; Input
086E4                           ;   A = note
086E4                           ;   X = channel
086E4                           ;       $00: square 1
086E4                           ;       $04: square 2
086E4                           ;       $08: triangle
086E4                           ;       $0C: noise
086E4                           ; Output
086E4                           ;   A = $00 for rest, hi frequency otherwise
086E4                           PlayNote:
086E4 C9 7E                     	CMP #$7E
086E6 D0 08                     	BNE PlayNote_NotRest
086E8                           
086E8 A9 10                     	LDA #$10
086EA 9D 00 40                  	STA SQ1_VOL, X
086ED A9 00                     	LDA #$00
086EF 60                        	RTS
086F0                           
086F0                           PlayNote_NotRest:
086F0 A0 01                     	LDY #$01
086F2 8C F4 05                  	STY NextOctave
086F5 48                        	PHA
086F6 A8                        	TAY
086F7 30 08                     	BMI PlayNote_LoadFrequencyData
086F9                           
086F9                           PlayNote_IncrementOctave:
086F9 EE F4 05                  	INC NextOctave
086FC 38                        	SEC
086FD E9 18                     	SBC #$18
086FF 10 F8                     	BPL PlayNote_IncrementOctave
08701                           
08701                           PlayNote_LoadFrequencyData:
08701 18                        	CLC
08702 69 18                     	ADC #$18
08704 A8                        	TAY
08705 B9 5B 87                  	LDA NoteFrequencyData, Y
08708 85 BD                     	STA NextFrequencyLo
0870A B9 5C 87                  	LDA NoteFrequencyData + 1, Y
0870D 85 BE                     	STA NextFrequencyHi
0870F                           
0870F                           PlayNote_FrequencyOctaveLoop:
0870F 46 BE                     	LSR NextFrequencyHi
08711 66 BD                     	ROR NextFrequencyLo
08713 CE F4 05                  	DEC NextOctave
08716 D0 F7                     	BNE PlayNote_FrequencyOctaveLoop
08718                           
08718 68                        	PLA
08719 C9 38                     	CMP #$38
0871B 90 02                     	BCC PlayNote_CheckSquareChorus
0871D                           
0871D                           	; tweak the frequency for notes >= $38
0871D C6 BD                     	DEC NextFrequencyLo
0871F                           
0871F                           ;
0871F                           ; Square 2 plays slightly detuned when Square 1 is using instrument E0
0871F                           ;
0871F                           ; This can be used to achieve a honky tonk piano effect, which is used for the
0871F                           ; title screen as well as the bridge of the overworld theme.
0871F                           ;
0871F                           PlayNote_CheckSquareChorus:
0871F 8A                        	TXA
08720 C9 04                     	CMP #APUOffset_Square2
08722 D0 07                     	BNE PlayNote_SetFrequency
08724                           
08724 AD F2 05                  	LDA MusicSquare1Patch
08727 C9 E0                     	CMP #$E0
08729 F0 10                     	BEQ PlayNote_SetFrequency_Square2Detuned
0872B                           
0872B                           IFDEF EXPAND_MUSIC
0872B                           	LDA MusicSquare1NoteBend, X
0872B                           	BNE NoteBendStashFrequency
0872B                           ENDIF
0872B                           
0872B                           PlayNote_SetFrequency:
0872B A5 BD                     	LDA NextFrequencyLo
0872D 9D 02 40                  	STA SQ1_LO, X
08730 9D F9 05                  	STA MusicSquare1Lo, X ; unused
08733 A5 BE                     	LDA NextFrequencyHi
08735 09 08                     	ORA #$08
08737 9D 03 40                  	STA SQ1_HI, X
0873A 60                        	RTS
0873B                           
0873B                           PlayNote_SetFrequency_Square2Detuned:
0873B A5 BD                     	LDA NextFrequencyLo
0873D 38                        	SEC
0873E E9 02                     	SBC #$02
08740 8D 06 40                  	STA SQ2_LO
08743 85 C2                     	STA MusicSquare2Lo
08745 A5 BE                     	LDA NextFrequencyHi
08747 09 08                     	ORA #$08
08749 8D 07 40                  	STA SQ2_HI
0874C 60                        	RTS
0874D                           
0874D                           ; (not referenced)
0874D                           ; Sets volume/sweep on Square 2 channel and plays a note
0874D                           ;
0874D                           ; Input
0874D                           ;   A = note
0874D                           ;   X = duty/volume/envelope
0874D                           ;   Y = sweep
0874D                           PlaySquare2Sweep:
0874D 8E 04 40                  	STX SQ2_VOL
08750 8C 05 40                  	STY SQ2_SWEEP
08753                           
08753                           ; Play a note on the Square 2 channel
08753                           ;
08753                           ; Input
08753                           ;   A = note
08753                           PlaySquare2Note:
08753 A2 04                     	LDX #APUOffset_Square2
08755 D0 8D                     	BNE PlayNote
08757                           
08757                           ; Play a note on the Triangle channel
08757                           ;
08757                           ; Input
08757                           ;   A = note
08757                           PlayTriangleNote:
08757 A2 08                     	LDX #APUOffset_Triangle
08759 D0 89                     	BNE PlayNote
0875B                           
0875B                           
0875B                           IFDEF EXPAND_MUSIC
0875B                           ;
0875B                           ; Determines whether the currently playing track should stop
0875B                           ;
0875B                           ; Input
0875B                           ;   A = MusicPlaying2
0875B                           ;
0875B                           CheckStopMusic:
0875B                           	CMP #Music1_Overworld
0875B                           	BEQ CheckStopMusic_Resume
0875B                           	CMP #Music1_Inside
0875B                           	BEQ CheckStopMusic_Resume
0875B                           	CMP #Music1_Subspace
0875B                           	BEQ CheckStopMusic_Resume
0875B                           
0875B                           CheckStopMusic_Stop:
0875B                           	LDA #$00
0875B                           	RTS
0875B                           
0875B                           CheckStopMusic_Resume:
0875B                           	LDA #$01
0875B                           	RTS
0875B                           
0875B                           
0875B                           ;
0875B                           ; Reads ahead to see if we have a note bend
0875B                           ;
0875B                           CheckSquare2NoteBend:
0875B                           	LDY CurrentMusicSquare2Offset
0875B                           	LDA (CurrentMusicPointer), Y
0875B                           	CMP #$FF
0875B                           	BNE CheckSquare2NoteBend_Exit
0875B                           
0875B                           	INC CurrentMusicSquare2Offset
0875B                           
0875B                           	LDA MusicSquare2Lo
0875B                           	STA MusicSquare2NoteBend
0875B                           
0875B                           	PLA
0875B                           	PLA
0875B                           	JMP ProcessMusicQueue_Square2NextOffset
0875B                           
0875B                           CheckSquare2NoteBend_Exit:
0875B                           	RTS
0875B                           
0875B                           
0875B                           ;
0875B                           ; Reads ahead to see if we have a note bend
0875B                           ;
0875B                           CheckSquare1NoteBend:
0875B                           	LDY CurrentMusicSquare1Offset
0875B                           	LDA (CurrentMusicPointer), Y
0875B                           	CMP #$FF
0875B                           	BNE CheckSquare1NoteBend_Exit
0875B                           
0875B                           	INC CurrentMusicSquare1Offset
0875B                           
0875B                           	LDA MusicSquare1Lo
0875B                           	STA MusicSquare1NoteBend
0875B                           
0875B                           	PLA
0875B                           	PLA
0875B                           	JMP ProcessMusicQueue_Square1NextOffset
0875B                           
0875B                           CheckSquare1NoteBend_Exit:
0875B                           	RTS
0875B                           
0875B                           
0875B                           NoteBendStashFrequency:
0875B                           	; If bend is in effect, this stores the last set frequency
0875B                           	LDA <NextFrequencyLo
0875B                           	STA MusicSquare1Lo, X
0875B                           	RTS
0875B                           
0875B                           
0875B                           ;
0875B                           ; Updates note bend
0875B                           ;
0875B                           ; Input
0875B                           ;   A = rest time remaining
0875B                           ;   X = channel
0875B                           ;       $00: square 1
0875B                           ;       $04: square 2
0875B                           ;
0875B                           UpdateNoteBend:
0875B                           	AND #%00000011
0875B                           	CMP #$03
0875B                           	BEQ UpdateNoteBend_AfterDecrement
0875B                           
0875B                           	DEC MusicSquare1NoteBend, X
0875B                           
0875B                           UpdateNoteBend_AfterDecrement:
0875B                           	LDA MusicSquare1NoteBend, X
0875B                           	CMP MusicSquare1Lo, X
0875B                           	BCS UpdateNoteBend_Exit
0875B                           
0875B                           	LDA #$00
0875B                           	STA MusicSquare1NoteBend, X
0875B                           	LDA MusicSquare1Lo, X
0875B                           
0875B                           UpdateNoteBend_Exit:
0875B                           	STA SQ1_LO, X
0875B                           	RTS
0875B                           ENDIF
0875B                           
0875B                           
0875B                           ;
0875B                           ; -------------------------------------------------------------------------
0875B                           ; Various bits of the music engine have been extracted into separate files;
0875B                           ; see the individual files for details on the formats within
0875B                           ;
0875B                           
0875B                           ; Frequency table for notes; standard between various Mario games
0875B                           .include "src/music/frequency-table.asm";
0875B                           NoteFrequencyData:
0875B B8 1A                     	.dw $1AB8 ; C
0875D 38 19                     	.dw $1938 ; C# / Db
0875F CC 17                     	.dw $17CC ; D
08761 78 16                     	.dw $1678 ; D# / Eb
08763 34 15                     	.dw $1534 ; E
08765 04 14                     	.dw $1404 ; F
08767 E4 12                     	.dw $12E4 ; F# / Gb
08769 D4 11                     	.dw $11D4 ; G
0876B D4 10                     	.dw $10D4 ; G# / Ab
0876D E0 0F                     	.dw $0FE0 ; A
0876F FC 0E                     	.dw $0EFC ; A# / Bb
08771 24 0E                     	.dw $0E24 ; B
08773                           
08773                           ; Unused space in the original ($875F - $8EFF)
08773                           unusedSpace $8F00, $FF
08773                           	IFDEF PRESERVE_UNUSED_SPACE
08773                           		.pad $8F00, $FF
08773                           	ENDIF
08773                           
08773                           ; Note lengths for various BPM settings
08773                           .include "src/music/note-lengths.asm";
08773                           ;
08773                           ; Note Lengths
08773                           ; ============
08773                           ;
08773                           ; These are lookup tables used to determine note lengths (in ticks).
08773                           ;
08773                           ; There are a few weird values floating around, but it's generally broken into
08773                           ; groups of 13 note lengths that correspond to a tempo as follows:
08773                           ;
08773                           ; $x0: 1/16 note (rounding down)
08773                           ; $x1: 1/16 note (rounding up)
08773                           ; $x2: 1/4 note triplet (rounding down)
08773                           ; $x3: 1/4 note triplet (rounding up)
08773                           ; $x4: 1/8 note
08773                           ; $x5: dotted 1/8 note
08773                           ; $x6: 1/2 note triplet (rounding down)
08773                           ; $x7: 1/2 note triplet (rounding up)
08773                           ; $x8: 1/4 note
08773                           ; $x9: dotted 1/4 note
08773                           ; $xA: 1/2 note
08773                           ; $xB: dotted 1/2 note
08773                           ; $xC: whole note
08773                           ; $xD: dotted whole note (usually not defined)
08773                           ; $xE: double note (usually note defined)
08773                           ; $xF: usually not defined
08773                           ;
08773                           ; 14400 is the number of ticks in a minute (4 ticks * 60 fps * 60 seconds), and
08773                           ; you can work out the tempo by dividing 14400 by the length of a whole note.
08773                           ;
08773                           NoteLengthTable:
08773                           
08773                           ; Character Select
08773                           ; Star
08773                           ; Crystal
08773                           ; Game Over
08773                           ; Boss Beaten
08773                           NoteLengthTable_300bpm:
08773                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08773 03 03 04 04 06 09 08 08.. 	.db $03, $03, $04, $04, $06, $09, $08, $08, $0C, $12, $18, $24, $30
08780                           
08780                           NoteLengthTable_257bpm: ; rounded
08780                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08780 03 04 05 04 07 0A 09 0A.. 	.db $03, $04, $05, $04, $07, $0A, $09, $0A, $0E, $15, $1C, $2A, $38
0878D 0B                        	.db $0B ; junk?
0878E                           
0878E                           ; Title Screen
0878E                           NoteLengthTable_225bpm:
0878E                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
0878E 04 04 05 06 08 0C 0B 0A.. 	.db $04, $04, $05, $06, $08, $0C, $0B, $0A, $10, $18, $20, $30, $40
0879B                           
0879B                           ; Overworld
0879B                           ; Boss
0879B                           ; Wart
0879B                           ; Death
0879B                           ; Subspace
0879B                           NoteLengthTable_200bpm:
0879B                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
0879B 04 05 06 06 09 0D 0C 0C.. 	.db $04, $05, $06, $06, $09, $0D, $0C, $0C, $12, $1B, $24, $36, $48
087A8 0E 03                     	.db $0E, $03 ; junk?
087AA                           
087AA                           NoteLengthTable_180bpm:
087AA                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
087AA 05 05 07 06 0A 0F 0D 0E.. 	.db $05, $05, $07, $06, $0A, $0F, $0D, $0E, $14, $1E, $28, $3C, $50
087B7                           
087B7                           NoteLengthTable_164bpm: ; rounded, 163.64 bpm
087B7                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
087B7 05 06 07 08 0B 10 0F 0E.. 	.db $05, $06, $07, $08, $0B, $10, $0F, $0E, $16, $21, $2C, $42, $58
087C4 11                        	.db $11 ; junk?
087C5                           
087C5                           ; Bonus Chance
087C5                           NoteLengthTable_150bpm:
087C5                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
087C5 06 06 08 08 0C 12 10 10.. 	.db $06, $06, $08, $08, $0C, $12, $10, $10, $18, $24, $30, $48, $60
087D2 02                        	.db $02 ; junk?
087D3                           
087D3                           NoteLengthTable_138bpm: ; rounded, 138.46 bpm
087D3                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
087D3 06 07 09 08 0D 13 11 12.. 	.db $06, $07, $09, $08, $0D, $13, $11, $12, $1A, $27, $34, $4E, $68
087E0 14                        	.db $14 ; junk?
087E1                           
087E1                           ; Underground
087E1                           ; Ending
087E1                           NoteLengthTable_129bpm: ; rounded, 128.57
087E1                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
087E1 07 07 09 0A 0E 15 13 12.. 	.db $07, $07, $09, $0A, $0E, $15, $13, $12, $1C, $2A, $38, $54, $70
087EE 03 04                     	.db $03, $04 ; junk?
087F0                           
087F0                           NoteLengthTable_120bpm:
087F0                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
087F0 07 08 0A 0A 0F 16 14 14.. 	.db $07, $08, $0A, $0A, $0F, $16, $14, $14, $1E, $2D, $3C, $5A, $78
087FD 17                        	.db $17 ; junk?
087FE                           
087FE                           NoteLengthTable_112bpm: ; rounded, 112.5 bpm
087FE                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
087FE 08 08 0B 0A 10 18 15 16.. 	.db $08, $08, $0B, $0A, $10, $18, $15, $16, $20, $30, $40, $60, $80
0880B                           
0880B                           NoteLengthTable_106bpm: ; rounded, 105.88 bpm
0880B                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
0880B 08 09 0B 0C 11 19 15 16.. 	.db $08, $09, $0B, $0C, $11, $19, $15, $16, $22, $33, $44, $60, $88
08818 1A                        	.db $1A ; junk?
08819                           
08819                           NoteLengthTable_100bpm:
08819                           	;   $0   $1   $2   $3   $4   $5   $6   $7   $8   $9   $A   $B   $C
08819 09 09 0C 0C 12 1B 18 18.. 	.db $09, $09, $0C, $0C, $12, $1B, $18, $18, $24, $36, $48, $6C, $90
08826                           
08826                           ; Unused space in the original ($8FB3 - $8FFF)
08826                           unusedSpace $9000, $FF
08826                           	IFDEF PRESERVE_UNUSED_SPACE
08826                           		.pad $9000, $FF
08826                           	ENDIF
08826                           
08826                           ; Pointers to music segments
08826                           IFNDEF EXPAND_MUSIC
08826                           	.include "src/music/music-part-pointers.asm"
08826                           ;
08826                           ; Music Part Pointers
08826                           ; ===================
08826                           ;
08826                           ; These are the pointers to various music segments used to cue those themes in
08826                           ; the game as well as handle relative offsets for looping segments
08826                           ;
08826                           MusicPartPointers:
08826                           
08826                           ; These pointers correspond to MusicQueue2 fanfares that temporarily interrupt
08826                           ; the current background music
08826                           MusicPartPointers_Mushroom:
08826                           	musicPart MusicHeaderMushroomBonusChance
08826 99                        	.db (MusicHeaderMushroomBonusChance - MusicPartPointers)
08827                           
08827                           MusicPartPointers_BossBeaten:
08827                           	musicPart MusicHeaderBossBeaten
08827 8E                        	.db (MusicHeaderBossBeaten - MusicPartPointers)
08828                           
08828                           ; This version of the crystal fanfare is unused, because special logic in
08828                           ; ProcessMusicQueue uses this slot for the ending theme instead.
08828                           MusicPartPointers_CrystalUnused:
08828                           	musicPart MusicHeaderCrystal
08828 84                        	.db (MusicHeaderCrystal - MusicPartPointers)
08829                           
08829                           MusicPartPointers_Death:
08829                           	musicPart MusicHeaderDeath
08829 A4                        	.db (MusicHeaderDeath - MusicPartPointers)
0882A                           
0882A                           MusicPartPointers_GameOver:
0882A                           	musicPart MusicHeaderGameOver
0882A 89                        	.db (MusicHeaderGameOver - MusicPartPointers)
0882B                           
0882B                           MusicPartPointers_Crystal:
0882B                           	musicPart MusicHeaderCrystal
0882B 84                        	.db (MusicHeaderCrystal - MusicPartPointers)
0882C                           
0882C                           MusicPartPointers_BonusChance:
0882C                           	musicPart MusicHeaderMushroomBonusChance
0882C 99                        	.db (MusicHeaderMushroomBonusChance - MusicPartPointers)
0882D                           
0882D                           ; The rest of the pointers correspond to music that uses the pointer tables
0882D                           ; with support for segment-based looping.
0882D                           MusicPartPointers_CharacterSelect:
0882D                           	musicPart MusicHeaderCharacterSelect1
0882D 2A                        	.db (MusicHeaderCharacterSelect1 - MusicPartPointers)
0882E                           MusicPartPointers_CharacterSelectLoop:
0882E                           	musicPart MusicHeaderCharacterSelect2
0882E 30                        	.db (MusicHeaderCharacterSelect2 - MusicPartPointers)
0882F                           	musicPart MusicHeaderCharacterSelect3
0882F 36                        	.db (MusicHeaderCharacterSelect3 - MusicPartPointers)
08830                           	musicPart MusicHeaderCharacterSelect2
08830 30                        	.db (MusicHeaderCharacterSelect2 - MusicPartPointers)
08831                           	musicPart MusicHeaderCharacterSelect4
08831 3C                        	.db (MusicHeaderCharacterSelect4 - MusicPartPointers)
08832                           	musicPart MusicHeaderCharacterSelect5
08832 42                        	.db (MusicHeaderCharacterSelect5 - MusicPartPointers)
08833                           	musicPart MusicHeaderCharacterSelect6
08833 A9                        	.db (MusicHeaderCharacterSelect6 - MusicPartPointers)
08834                           	musicPart MusicHeaderCharacterSelect7
08834 9E                        	.db (MusicHeaderCharacterSelect7 - MusicPartPointers)
08835                           MusicPartPointers_CharacterSelectEnd:
08835                           	musicPart MusicHeaderCharacterSelect8
08835 93                        	.db (MusicHeaderCharacterSelect8 - MusicPartPointers)
08836                           
08836                           
08836                           MusicPartPointers_Overworld:
08836                           	musicPart MusicHeaderOverworld1
08836 48                        	.db (MusicHeaderOverworld1 - MusicPartPointers)
08837                           MusicPartPointers_OverworldLoop:
08837                           	musicPart MusicHeaderOverworld2
08837 4E                        	.db (MusicHeaderOverworld2 - MusicPartPointers)
08838                           	musicPart MusicHeaderOverworld3
08838 54                        	.db (MusicHeaderOverworld3 - MusicPartPointers)
08839                           	musicPart MusicHeaderOverworld4
08839 5A                        	.db (MusicHeaderOverworld4 - MusicPartPointers)
0883A                           	musicPart MusicHeaderOverworld3
0883A 54                        	.db (MusicHeaderOverworld3 - MusicPartPointers)
0883B                           	musicPart MusicHeaderOverworld5
0883B 60                        	.db (MusicHeaderOverworld5 - MusicPartPointers)
0883C                           MusicPartPointers_OverworldEnd:
0883C                           	musicPart MusicHeaderOverworld6
0883C 66                        	.db (MusicHeaderOverworld6 - MusicPartPointers)
0883D                           
0883D                           
0883D                           MusicPartPointers_Boss:
0883D                           MusicPartPointers_BossLoop:
0883D                           MusicPartPointers_BossEnd:
0883D                           	musicPart MusicHeaderBoss
0883D 72                        	.db (MusicHeaderBoss - MusicPartPointers)
0883E                           
0883E                           
0883E                           MusicPartPointers_Star:
0883E                           MusicPartPointers_StarLoop:
0883E                           MusicPartPointers_StarEnd:
0883E                           	musicPart MusicHeaderStar
0883E 78                        	.db (MusicHeaderStar - MusicPartPointers)
0883F                           
0883F                           
0883F                           MusicPartPointers_Wart:
0883F                           MusicPartPointers_WartLoop:
0883F                           MusicPartPointers_WartEnd:
0883F                           	musicPart MusicHeaderWart
0883F 7E                        	.db (MusicHeaderWart - MusicPartPointers)
08840                           
08840                           
08840                           MusicPartPointers_TitleScreen:
08840                           	musicPart MusicHeaderTitleScreen1
08840 B5                        	.db (MusicHeaderTitleScreen1 - MusicPartPointers)
08841                           	musicPart MusicHeaderTitleScreen2
08841 AF                        	.db (MusicHeaderTitleScreen2 - MusicPartPointers)
08842                           	musicPart MusicHeaderTitleScreen3
08842 BB                        	.db (MusicHeaderTitleScreen3 - MusicPartPointers)
08843                           MusicPartPointers_TitleScreenEnd:
08843                           	musicPart MusicHeaderTitleScreen4
08843 C1                        	.db (MusicHeaderTitleScreen4 - MusicPartPointers)
08844                           
08844                           
08844                           MusicPartPointers_SubSpace:
08844                           MusicPartPointers_SubSpaceLoop:
08844                           	musicPart MusicHeaderSubspace1
08844 C7                        	.db (MusicHeaderSubspace1 - MusicPartPointers)
08845                           	musicPart MusicHeaderSubspace2
08845 CD                        	.db (MusicHeaderSubspace2 - MusicPartPointers)
08846                           	musicPart MusicHeaderSubspace3
08846 D3                        	.db (MusicHeaderSubspace3 - MusicPartPointers)
08847                           	musicPart MusicHeaderSubspace2
08847 CD                        	.db (MusicHeaderSubspace2 - MusicPartPointers)
08848                           MusicPartPointers_SubSpaceEnd:
08848                           	musicPart MusicHeaderSubspace4
08848 D9                        	.db (MusicHeaderSubspace4 - MusicPartPointers)
08849                           
08849                           
08849                           MusicPartPointers_Ending:
08849                           	musicPart MusicHeaderEnding1
08849 DF                        	.db (MusicHeaderEnding1 - MusicPartPointers)
0884A                           	musicPart MusicHeaderEnding2
0884A EB                        	.db (MusicHeaderEnding2 - MusicPartPointers)
0884B                           	musicPart MusicHeaderEnding3
0884B E5                        	.db (MusicHeaderEnding3 - MusicPartPointers)
0884C                           	musicPart MusicHeaderEnding4
0884C F7                        	.db (MusicHeaderEnding4 - MusicPartPointers)
0884D                           IFNDEF PROTOTYPE_MUSIC_ENDING
0884D                           	musicPart MusicHeaderEnding5
0884D F1                        	.db (MusicHeaderEnding5 - MusicPartPointers)
0884E                           MusicPartPointers_EndingLoop:
0884E                           MusicPartPointers_EndingEnd:
0884E                           	musicPart MusicHeaderEnding6
0884E FD                        	.db (MusicHeaderEnding6 - MusicPartPointers)
0884F                           ELSE
0884F                           MusicPartPointers_EndingEnd:
0884F                           	musicPart MusicHeaderEnding5
0884F                           ENDIF
0884F                           
0884F                           
0884F                           IFNDEF PROTOTYPE_MUSIC_UNDERGROUND
0884F                           MusicPartPointers_Underground:
0884F                           MusicPartPointers_UndergroundLoop:
0884F                           MusicPartPointers_UndergroundEnd:
0884F                           	musicPart MusicHeaderUnderground
0884F 6C                        	.db (MusicHeaderUnderground - MusicPartPointers)
08850                           ELSE
08850                           MusicPartPointers_Underground:
08850                           MusicPartPointers_UndergroundLoop:
08850                           	musicPart MusicHeaderUndergroundBeta1
08850                           	musicPart MusicHeaderUndergroundBeta1
08850                           	musicPart MusicHeaderUndergroundBeta2
08850                           MusicPartPointers_UndergroundEnd:
08850                           	musicPart MusicHeaderUndergroundBeta2
08850                           ENDIF
08850                           ELSE
08850                           	.include "src/music/music-part-pointers-expanded.asm"
08850                           ENDIF
08850                           
08850                           ; Headers for songs (BPM, tracks to use, etc)
08850                           .include "src/music/music-headers.asm"
08850                           ;
08850                           ; Music Headers
08850                           ; =============
08850                           ;
08850                           ; These are broken down by song segment and point to the note length table and
08850                           ; and individual channel data. Square 2 is the main pointer, and triangle,
08850                           ; square 1, and noise are stored as offets relative to the main pointer.
08850                           ;
08850                           ; Bytes:
08850                           ;   00: Note length table (from $8F00)
08850                           ;   01: Main address / Square 2 (lo)
08850                           ;   02: Main address / Square 2 (hi)
08850                           ;   03: Triangle offset from main
08850                           ;   04: Square 1 offset from main
08850                           ;   05: Noise/DPCM offset from main
08850                           ;
08850                           ; For the musicHeader macro, specifying $00 is "none", -1 for noise/pcm is "omit".
08850                           ; Some of the music headers use the $00 from the next header's note length table,
08850                           ; to save one byte (in a ROM /full/ of unused space...)
08850                           ;
08850                           ; This turns out to be important because the music part pointers are stored as
08850                           ; offsets from MusicPartPointers, which means they can't be larger than $FF!
08850                           ;
08850                           MusicPartHeaders:
08850                           
08850                           ; ----------------------------------------
08850                           ; Character select segments 1 through 5
08850                           ; (6 through 8 are a ways below this)
08850                           MusicHeaderCharacterSelect1:
08850                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect1, MusicDataCharacterSelect1_Triangle, MusicDataCharacterSelect1_Square1, MusicDataCharacterSelect1_Noise, -1
08850                           	noteLength NoteLengthTable_300bpm
08850 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
08851 D3 90                     	.dw MusicDataCharacterSelect1
08853                           	IF MusicDataCharacterSelect1_Triangle <= 0
08853                           		.db $00
08853                           	ELSE
08853 6B                        		.db (MusicDataCharacterSelect1_Triangle - MusicDataCharacterSelect1)
08854                           	ENDIF
08854                           	IF MusicDataCharacterSelect1_Square1 <= 0
08854                           		.db $00
08854                           	ELSE
08854 36                        		.db (MusicDataCharacterSelect1_Square1 - MusicDataCharacterSelect1)
08855                           	ENDIF
08855                           
08855                           	IFNDEF EXPAND_MUSIC
08855                           		IF MusicDataCharacterSelect1_Noise = 0
08855                           			.db $00
08855                           		ELSEIF MusicDataCharacterSelect1_Noise > 0
08855 A0                        			.db (MusicDataCharacterSelect1_Noise - MusicDataCharacterSelect1)
08856                           		ENDIF
08856                           		IF -1 = 0
08856                           			.db $00
08856                           		ELSEIF -1 > 0
08856                           			.db (-1 - MusicDataCharacterSelect1)
08856                           		ENDIF
08856                           	ELSE
08856                           		IF MusicDataCharacterSelect1_Noise <= 0
08856                           			.db $00
08856                           		ELSE
08856                           			.db (MusicDataCharacterSelect1_Noise - MusicDataCharacterSelect1)
08856                           		ENDIF
08856                           		IF -1 <= 0
08856                           			.db $00
08856                           		ELSE
08856                           			.db (-1 - MusicDataCharacterSelect1)
08856                           		ENDIF
08856                           	ENDIF
08856                           
08856                           MusicHeaderCharacterSelect2:
08856                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect2, MusicDataCharacterSelect2_Triangle, MusicDataCharacterSelect2_Square1, MusicDataCharacterSelect2_Noise, -1
08856                           	noteLength NoteLengthTable_300bpm
08856 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
08857 82 91                     	.dw MusicDataCharacterSelect2
08859                           	IF MusicDataCharacterSelect2_Triangle <= 0
08859                           		.db $00
08859                           	ELSE
08859 8E                        		.db (MusicDataCharacterSelect2_Triangle - MusicDataCharacterSelect2)
0885A                           	ENDIF
0885A                           	IF MusicDataCharacterSelect2_Square1 <= 0
0885A                           		.db $00
0885A                           	ELSE
0885A 48                        		.db (MusicDataCharacterSelect2_Square1 - MusicDataCharacterSelect2)
0885B                           	ENDIF
0885B                           
0885B                           	IFNDEF EXPAND_MUSIC
0885B                           		IF MusicDataCharacterSelect2_Noise = 0
0885B                           			.db $00
0885B                           		ELSEIF MusicDataCharacterSelect2_Noise > 0
0885B B0                        			.db (MusicDataCharacterSelect2_Noise - MusicDataCharacterSelect2)
0885C                           		ENDIF
0885C                           		IF -1 = 0
0885C                           			.db $00
0885C                           		ELSEIF -1 > 0
0885C                           			.db (-1 - MusicDataCharacterSelect2)
0885C                           		ENDIF
0885C                           	ELSE
0885C                           		IF MusicDataCharacterSelect2_Noise <= 0
0885C                           			.db $00
0885C                           		ELSE
0885C                           			.db (MusicDataCharacterSelect2_Noise - MusicDataCharacterSelect2)
0885C                           		ENDIF
0885C                           		IF -1 <= 0
0885C                           			.db $00
0885C                           		ELSE
0885C                           			.db (-1 - MusicDataCharacterSelect2)
0885C                           		ENDIF
0885C                           	ENDIF
0885C                           
0885C                           MusicHeaderCharacterSelect3:
0885C                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect3, MusicDataCharacterSelect3_Triangle, MusicDataCharacterSelect3_Square1, MusicDataCharacterSelect3_Noise, -1
0885C                           	noteLength NoteLengthTable_300bpm
0885C 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
0885D C0 91                     	.dw MusicDataCharacterSelect3
0885F                           	IF MusicDataCharacterSelect3_Triangle <= 0
0885F                           		.db $00
0885F                           	ELSE
0885F 6F                        		.db (MusicDataCharacterSelect3_Triangle - MusicDataCharacterSelect3)
08860                           	ENDIF
08860                           	IF MusicDataCharacterSelect3_Square1 <= 0
08860                           		.db $00
08860                           	ELSE
08860 48                        		.db (MusicDataCharacterSelect3_Square1 - MusicDataCharacterSelect3)
08861                           	ENDIF
08861                           
08861                           	IFNDEF EXPAND_MUSIC
08861                           		IF MusicDataCharacterSelect3_Noise = 0
08861                           			.db $00
08861                           		ELSEIF MusicDataCharacterSelect3_Noise > 0
08861 76                        			.db (MusicDataCharacterSelect3_Noise - MusicDataCharacterSelect3)
08862                           		ENDIF
08862                           		IF -1 = 0
08862                           			.db $00
08862                           		ELSEIF -1 > 0
08862                           			.db (-1 - MusicDataCharacterSelect3)
08862                           		ENDIF
08862                           	ELSE
08862                           		IF MusicDataCharacterSelect3_Noise <= 0
08862                           			.db $00
08862                           		ELSE
08862                           			.db (MusicDataCharacterSelect3_Noise - MusicDataCharacterSelect3)
08862                           		ENDIF
08862                           		IF -1 <= 0
08862                           			.db $00
08862                           		ELSE
08862                           			.db (-1 - MusicDataCharacterSelect3)
08862                           		ENDIF
08862                           	ENDIF
08862                           
08862                           MusicHeaderCharacterSelect4:
08862                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect4, MusicDataCharacterSelect4_Triangle, MusicDataCharacterSelect4_Square1, MusicDataCharacterSelect4_Noise, -1
08862                           	noteLength NoteLengthTable_300bpm
08862 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
08863 C4 91                     	.dw MusicDataCharacterSelect4
08865                           	IF MusicDataCharacterSelect4_Triangle <= 0
08865                           		.db $00
08865                           	ELSE
08865 6B                        		.db (MusicDataCharacterSelect4_Triangle - MusicDataCharacterSelect4)
08866                           	ENDIF
08866                           	IF MusicDataCharacterSelect4_Square1 <= 0
08866                           		.db $00
08866                           	ELSE
08866 47                        		.db (MusicDataCharacterSelect4_Square1 - MusicDataCharacterSelect4)
08867                           	ENDIF
08867                           
08867                           	IFNDEF EXPAND_MUSIC
08867                           		IF MusicDataCharacterSelect4_Noise = 0
08867                           			.db $00
08867                           		ELSEIF MusicDataCharacterSelect4_Noise > 0
08867 72                        			.db (MusicDataCharacterSelect4_Noise - MusicDataCharacterSelect4)
08868                           		ENDIF
08868                           		IF -1 = 0
08868                           			.db $00
08868                           		ELSEIF -1 > 0
08868                           			.db (-1 - MusicDataCharacterSelect4)
08868                           		ENDIF
08868                           	ELSE
08868                           		IF MusicDataCharacterSelect4_Noise <= 0
08868                           			.db $00
08868                           		ELSE
08868                           			.db (MusicDataCharacterSelect4_Noise - MusicDataCharacterSelect4)
08868                           		ENDIF
08868                           		IF -1 <= 0
08868                           			.db $00
08868                           		ELSE
08868                           			.db (-1 - MusicDataCharacterSelect4)
08868                           		ENDIF
08868                           	ENDIF
08868                           
08868                           MusicHeaderCharacterSelect5:
08868                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect5, MusicDataCharacterSelect5_Triangle, MusicDataCharacterSelect5_Square1, MusicDataCharacterSelect5_Noise, -1
08868                           	noteLength NoteLengthTable_300bpm
08868 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
08869 4C 92                     	.dw MusicDataCharacterSelect5
0886B                           	IF MusicDataCharacterSelect5_Triangle <= 0
0886B                           		.db $00
0886B                           	ELSE
0886B 8A                        		.db (MusicDataCharacterSelect5_Triangle - MusicDataCharacterSelect5)
0886C                           	ENDIF
0886C                           	IF MusicDataCharacterSelect5_Square1 <= 0
0886C                           		.db $00
0886C                           	ELSE
0886C 46                        		.db (MusicDataCharacterSelect5_Square1 - MusicDataCharacterSelect5)
0886D                           	ENDIF
0886D                           
0886D                           	IFNDEF EXPAND_MUSIC
0886D                           		IF MusicDataCharacterSelect5_Noise = 0
0886D                           			.db $00
0886D                           		ELSEIF MusicDataCharacterSelect5_Noise > 0
0886D AC                        			.db (MusicDataCharacterSelect5_Noise - MusicDataCharacterSelect5)
0886E                           		ENDIF
0886E                           		IF -1 = 0
0886E                           			.db $00
0886E                           		ELSEIF -1 > 0
0886E                           			.db (-1 - MusicDataCharacterSelect5)
0886E                           		ENDIF
0886E                           	ELSE
0886E                           		IF MusicDataCharacterSelect5_Noise <= 0
0886E                           			.db $00
0886E                           		ELSE
0886E                           			.db (MusicDataCharacterSelect5_Noise - MusicDataCharacterSelect5)
0886E                           		ENDIF
0886E                           		IF -1 <= 0
0886E                           			.db $00
0886E                           		ELSE
0886E                           			.db (-1 - MusicDataCharacterSelect5)
0886E                           		ENDIF
0886E                           	ENDIF
0886E                           
0886E                           ; ----------------------------------------
0886E                           ; Overworld music headers
0886E                           MusicHeaderOverworld1:
0886E                           	musicHeader NoteLengthTable_200bpm, MusicDataOverworld1, MusicDataOverworld1_Triangle, MusicDataOverworld1_Square1, MusicDataOverworld1_Noise, -1
0886E                           	noteLength NoteLengthTable_200bpm
0886E 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
0886F FA 93                     	.dw MusicDataOverworld1
08871                           	IF MusicDataOverworld1_Triangle <= 0
08871                           		.db $00
08871                           	ELSE
08871 2B                        		.db (MusicDataOverworld1_Triangle - MusicDataOverworld1)
08872                           	ENDIF
08872                           	IF MusicDataOverworld1_Square1 <= 0
08872                           		.db $00
08872                           	ELSE
08872 16                        		.db (MusicDataOverworld1_Square1 - MusicDataOverworld1)
08873                           	ENDIF
08873                           
08873                           	IFNDEF EXPAND_MUSIC
08873                           		IF MusicDataOverworld1_Noise = 0
08873                           			.db $00
08873                           		ELSEIF MusicDataOverworld1_Noise > 0
08873 3D                        			.db (MusicDataOverworld1_Noise - MusicDataOverworld1)
08874                           		ENDIF
08874                           		IF -1 = 0
08874                           			.db $00
08874                           		ELSEIF -1 > 0
08874                           			.db (-1 - MusicDataOverworld1)
08874                           		ENDIF
08874                           	ELSE
08874                           		IF MusicDataOverworld1_Noise <= 0
08874                           			.db $00
08874                           		ELSE
08874                           			.db (MusicDataOverworld1_Noise - MusicDataOverworld1)
08874                           		ENDIF
08874                           		IF -1 <= 0
08874                           			.db $00
08874                           		ELSE
08874                           			.db (-1 - MusicDataOverworld1)
08874                           		ENDIF
08874                           	ENDIF
08874                           
08874                           MusicHeaderOverworld2:
08874                           	musicHeader NoteLengthTable_200bpm, MusicDataOverworld2, MusicDataOverworld2_Triangle, MusicDataOverworld2_Square1, MusicDataOverworld2_Noise, -1
08874                           	noteLength NoteLengthTable_200bpm
08874 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
08875 46 94                     	.dw MusicDataOverworld2
08877                           	IF MusicDataOverworld2_Triangle <= 0
08877                           		.db $00
08877                           	ELSE
08877 A8                        		.db (MusicDataOverworld2_Triangle - MusicDataOverworld2)
08878                           	ENDIF
08878                           	IF MusicDataOverworld2_Square1 <= 0
08878                           		.db $00
08878                           	ELSE
08878 54                        		.db (MusicDataOverworld2_Square1 - MusicDataOverworld2)
08879                           	ENDIF
08879                           
08879                           	IFNDEF EXPAND_MUSIC
08879                           		IF MusicDataOverworld2_Noise = 0
08879                           			.db $00
08879                           		ELSEIF MusicDataOverworld2_Noise > 0
08879 C9                        			.db (MusicDataOverworld2_Noise - MusicDataOverworld2)
0887A                           		ENDIF
0887A                           		IF -1 = 0
0887A                           			.db $00
0887A                           		ELSEIF -1 > 0
0887A                           			.db (-1 - MusicDataOverworld2)
0887A                           		ENDIF
0887A                           	ELSE
0887A                           		IF MusicDataOverworld2_Noise <= 0
0887A                           			.db $00
0887A                           		ELSE
0887A                           			.db (MusicDataOverworld2_Noise - MusicDataOverworld2)
0887A                           		ENDIF
0887A                           		IF -1 <= 0
0887A                           			.db $00
0887A                           		ELSE
0887A                           			.db (-1 - MusicDataOverworld2)
0887A                           		ENDIF
0887A                           	ENDIF
0887A                           
0887A                           MusicHeaderOverworld3:
0887A                           	musicHeader NoteLengthTable_200bpm, MusicDataOverworld3, MusicDataOverworld3_Triangle, MusicDataOverworld3_Square1, MusicDataOverworld3_Noise, -1
0887A                           	noteLength NoteLengthTable_200bpm
0887A 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
0887B 1F 95                     	.dw MusicDataOverworld3
0887D                           	IF MusicDataOverworld3_Triangle <= 0
0887D                           		.db $00
0887D                           	ELSE
0887D DD                        		.db (MusicDataOverworld3_Triangle - MusicDataOverworld3)
0887E                           	ENDIF
0887E                           	IF MusicDataOverworld3_Square1 <= 0
0887E                           		.db $00
0887E                           	ELSE
0887E 73                        		.db (MusicDataOverworld3_Square1 - MusicDataOverworld3)
0887F                           	ENDIF
0887F                           
0887F                           	IFNDEF EXPAND_MUSIC
0887F                           		IF MusicDataOverworld3_Noise = 0
0887F                           			.db $00
0887F                           		ELSEIF MusicDataOverworld3_Noise > 0
0887F 6C                        			.db (MusicDataOverworld3_Noise - MusicDataOverworld3)
08880                           		ENDIF
08880                           		IF -1 = 0
08880                           			.db $00
08880                           		ELSEIF -1 > 0
08880                           			.db (-1 - MusicDataOverworld3)
08880                           		ENDIF
08880                           	ELSE
08880                           		IF MusicDataOverworld3_Noise <= 0
08880                           			.db $00
08880                           		ELSE
08880                           			.db (MusicDataOverworld3_Noise - MusicDataOverworld3)
08880                           		ENDIF
08880                           		IF -1 <= 0
08880                           			.db $00
08880                           		ELSE
08880                           			.db (-1 - MusicDataOverworld3)
08880                           		ENDIF
08880                           	ENDIF
08880                           
08880                           MusicHeaderOverworld4:
08880                           	musicHeader NoteLengthTable_200bpm, MusicDataOverworld4, MusicDataOverworld4_Triangle, MusicDataOverworld4_Square1, MusicDataOverworld4_Noise, -1
08880                           	noteLength NoteLengthTable_200bpm
08880 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
08881 65 95                     	.dw MusicDataOverworld4
08883                           	IF MusicDataOverworld4_Triangle <= 0
08883                           		.db $00
08883                           	ELSE
08883 B2                        		.db (MusicDataOverworld4_Triangle - MusicDataOverworld4)
08884                           	ENDIF
08884                           	IF MusicDataOverworld4_Square1 <= 0
08884                           		.db $00
08884                           	ELSE
08884 73                        		.db (MusicDataOverworld4_Square1 - MusicDataOverworld4)
08885                           	ENDIF
08885                           
08885                           	IFNDEF EXPAND_MUSIC
08885                           		IF MusicDataOverworld4_Noise = 0
08885                           			.db $00
08885                           		ELSEIF MusicDataOverworld4_Noise > 0
08885 26                        			.db (MusicDataOverworld4_Noise - MusicDataOverworld4)
08886                           		ENDIF
08886                           		IF -1 = 0
08886                           			.db $00
08886                           		ELSEIF -1 > 0
08886                           			.db (-1 - MusicDataOverworld4)
08886                           		ENDIF
08886                           	ELSE
08886                           		IF MusicDataOverworld4_Noise <= 0
08886                           			.db $00
08886                           		ELSE
08886                           			.db (MusicDataOverworld4_Noise - MusicDataOverworld4)
08886                           		ENDIF
08886                           		IF -1 <= 0
08886                           			.db $00
08886                           		ELSE
08886                           			.db (-1 - MusicDataOverworld4)
08886                           		ENDIF
08886                           	ENDIF
08886                           
08886                           MusicHeaderOverworld5:
08886                           	musicHeader NoteLengthTable_200bpm, MusicDataOverworld5, MusicDataOverworld5_Triangle, MusicDataOverworld5_Square1, MusicDataOverworld5_Noise, -1
08886                           	noteLength NoteLengthTable_200bpm
08886 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
08887 26 96                     	.dw MusicDataOverworld5
08889                           	IF MusicDataOverworld5_Triangle <= 0
08889                           		.db $00
08889                           	ELSE
08889 38                        		.db (MusicDataOverworld5_Triangle - MusicDataOverworld5)
0888A                           	ENDIF
0888A                           	IF MusicDataOverworld5_Square1 <= 0
0888A                           		.db $00
0888A                           	ELSE
0888A 1D                        		.db (MusicDataOverworld5_Square1 - MusicDataOverworld5)
0888B                           	ENDIF
0888B                           
0888B                           	IFNDEF EXPAND_MUSIC
0888B                           		IF MusicDataOverworld5_Noise = 0
0888B                           			.db $00
0888B                           		ELSEIF MusicDataOverworld5_Noise > 0
0888B 46                        			.db (MusicDataOverworld5_Noise - MusicDataOverworld5)
0888C                           		ENDIF
0888C                           		IF -1 = 0
0888C                           			.db $00
0888C                           		ELSEIF -1 > 0
0888C                           			.db (-1 - MusicDataOverworld5)
0888C                           		ENDIF
0888C                           	ELSE
0888C                           		IF MusicDataOverworld5_Noise <= 0
0888C                           			.db $00
0888C                           		ELSE
0888C                           			.db (MusicDataOverworld5_Noise - MusicDataOverworld5)
0888C                           		ENDIF
0888C                           		IF -1 <= 0
0888C                           			.db $00
0888C                           		ELSE
0888C                           			.db (-1 - MusicDataOverworld5)
0888C                           		ENDIF
0888C                           	ENDIF
0888C                           
0888C                           MusicHeaderOverworld6:
0888C                           	musicHeader NoteLengthTable_200bpm, MusicDataOverworld6, MusicDataOverworld6_Triangle, MusicDataOverworld6_Square1, MusicDataOverworld6_Noise, -1
0888C                           	noteLength NoteLengthTable_200bpm
0888C 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
0888D 73 96                     	.dw MusicDataOverworld6
0888F                           	IF MusicDataOverworld6_Triangle <= 0
0888F                           		.db $00
0888F                           	ELSE
0888F A7                        		.db (MusicDataOverworld6_Triangle - MusicDataOverworld6)
08890                           	ENDIF
08890                           	IF MusicDataOverworld6_Square1 <= 0
08890                           		.db $00
08890                           	ELSE
08890 4F                        		.db (MusicDataOverworld6_Square1 - MusicDataOverworld6)
08891                           	ENDIF
08891                           
08891                           	IFNDEF EXPAND_MUSIC
08891                           		IF MusicDataOverworld6_Noise = 0
08891                           			.db $00
08891                           		ELSEIF MusicDataOverworld6_Noise > 0
08891 C8                        			.db (MusicDataOverworld6_Noise - MusicDataOverworld6)
08892                           		ENDIF
08892                           		IF -1 = 0
08892                           			.db $00
08892                           		ELSEIF -1 > 0
08892                           			.db (-1 - MusicDataOverworld6)
08892                           		ENDIF
08892                           	ELSE
08892                           		IF MusicDataOverworld6_Noise <= 0
08892                           			.db $00
08892                           		ELSE
08892                           			.db (MusicDataOverworld6_Noise - MusicDataOverworld6)
08892                           		ENDIF
08892                           		IF -1 <= 0
08892                           			.db $00
08892                           		ELSE
08892                           			.db (-1 - MusicDataOverworld6)
08892                           		ENDIF
08892                           	ENDIF
08892                           
08892                           ; ----------------------------------------
08892                           ; Underground music
08892                           IFNDEF PROTOTYPE_MUSIC_UNDERGROUND
08892                           MusicHeaderUnderground:
08892                           	musicHeader NoteLengthTable_129bpm, MusicDataUnderground, MusicDataUnderground_Triangle, MusicDataUnderground_Square1, -1, MusicDataUnderground_DPCM
08892                           	noteLength NoteLengthTable_129bpm
08892 6E                        	.db (NoteLengthTable_129bpm - NoteLengthTable)
08893 E3 8C                     	.dw MusicDataUnderground
08895                           	IF MusicDataUnderground_Triangle <= 0
08895                           		.db $00
08895                           	ELSE
08895 53                        		.db (MusicDataUnderground_Triangle - MusicDataUnderground)
08896                           	ENDIF
08896                           	IF MusicDataUnderground_Square1 <= 0
08896                           		.db $00
08896                           	ELSE
08896 2A                        		.db (MusicDataUnderground_Square1 - MusicDataUnderground)
08897                           	ENDIF
08897                           
08897                           	IFNDEF EXPAND_MUSIC
08897                           		IF -1 = 0
08897                           			.db $00
08897                           		ELSEIF -1 > 0
08897                           			.db (-1 - MusicDataUnderground)
08897                           		ENDIF
08897                           		IF MusicDataUnderground_DPCM = 0
08897                           			.db $00
08897                           		ELSEIF MusicDataUnderground_DPCM > 0
08897 84                        			.db (MusicDataUnderground_DPCM - MusicDataUnderground)
08898                           		ENDIF
08898                           	ELSE
08898                           		IF -1 <= 0
08898                           			.db $00
08898                           		ELSE
08898                           			.db (-1 - MusicDataUnderground)
08898                           		ENDIF
08898                           		IF MusicDataUnderground_DPCM <= 0
08898                           			.db $00
08898                           		ELSE
08898                           			.db (MusicDataUnderground_DPCM - MusicDataUnderground)
08898                           		ENDIF
08898                           	ENDIF
08898                           ENDIF
08898                           
08898                           ; ----------------------------------------
08898                           ; Boss and boss area music
08898                           MusicHeaderBoss:
08898                           IFNDEF PROTOTYPE_MUSIC_ENDING
08898                           	musicHeader NoteLengthTable_200bpm, MusicDataBoss, MusicDataBoss_Triangle, MusicDataBoss_Square1, $00, -1
08898                           	noteLength NoteLengthTable_200bpm
08898 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
08899 42 97                     	.dw MusicDataBoss
0889B                           	IF MusicDataBoss_Triangle <= 0
0889B                           		.db $00
0889B                           	ELSE
0889B 83                        		.db (MusicDataBoss_Triangle - MusicDataBoss)
0889C                           	ENDIF
0889C                           	IF MusicDataBoss_Square1 <= 0
0889C                           		.db $00
0889C                           	ELSE
0889C 42                        		.db (MusicDataBoss_Square1 - MusicDataBoss)
0889D                           	ENDIF
0889D                           
0889D                           	IFNDEF EXPAND_MUSIC
0889D                           		IF $00 = 0
0889D 00                        			.db $00
0889E                           		ELSEIF $00 > 0
0889E                           			.db ($00 - MusicDataBoss)
0889E                           		ENDIF
0889E                           		IF -1 = 0
0889E                           			.db $00
0889E                           		ELSEIF -1 > 0
0889E                           			.db (-1 - MusicDataBoss)
0889E                           		ENDIF
0889E                           	ELSE
0889E                           		IF $00 <= 0
0889E                           			.db $00
0889E                           		ELSE
0889E                           			.db ($00 - MusicDataBoss)
0889E                           		ENDIF
0889E                           		IF -1 <= 0
0889E                           			.db $00
0889E                           		ELSE
0889E                           			.db (-1 - MusicDataBoss)
0889E                           		ENDIF
0889E                           	ENDIF
0889E                           ELSE
0889E                           	; sharing $00 with NoteLengthTable_300bpm from the segment below
0889E                           	; (we're scrounging for bytes to avoid overflowing the music header table)
0889E                           	musicHeader NoteLengthTable_200bpm, MusicDataBoss, MusicDataBoss_Triangle, MusicDataBoss_Square1, -1, -1
0889E                           ENDIF
0889E                           
0889E                           ; ----------------------------------------
0889E                           ; Starman music
0889E                           MusicHeaderStar:
0889E                           IFNDEF PROTOTYPE_MUSIC_STARMAN
0889E                           	IFNDEF PROTOTYPE_MUSIC_UNDERGROUND
0889E                           		musicHeader NoteLengthTable_300bpm, MusicDataStar, MusicDataStar_Triangle, MusicDataStar_Square1, -1, MusicDataStar_DPCM
0889E                           	noteLength NoteLengthTable_300bpm
0889E 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
0889F 8F 8C                     	.dw MusicDataStar
088A1                           	IF MusicDataStar_Triangle <= 0
088A1                           		.db $00
088A1                           	ELSE
088A1 37                        		.db (MusicDataStar_Triangle - MusicDataStar)
088A2                           	ENDIF
088A2                           	IF MusicDataStar_Square1 <= 0
088A2                           		.db $00
088A2                           	ELSE
088A2 1A                        		.db (MusicDataStar_Square1 - MusicDataStar)
088A3                           	ENDIF
088A3                           
088A3                           	IFNDEF EXPAND_MUSIC
088A3                           		IF -1 = 0
088A3                           			.db $00
088A3                           		ELSEIF -1 > 0
088A3                           			.db (-1 - MusicDataStar)
088A3                           		ENDIF
088A3                           		IF MusicDataStar_DPCM = 0
088A3                           			.db $00
088A3                           		ELSEIF MusicDataStar_DPCM > 0
088A3 49                        			.db (MusicDataStar_DPCM - MusicDataStar)
088A4                           		ENDIF
088A4                           	ELSE
088A4                           		IF -1 <= 0
088A4                           			.db $00
088A4                           		ELSE
088A4                           			.db (-1 - MusicDataStar)
088A4                           		ENDIF
088A4                           		IF MusicDataStar_DPCM <= 0
088A4                           			.db $00
088A4                           		ELSE
088A4                           			.db (MusicDataStar_DPCM - MusicDataStar)
088A4                           		ENDIF
088A4                           	ENDIF
088A4                           	ELSE
088A4                           		musicHeader NoteLengthTable_300bpm, MusicDataStar, MusicDataStar_Triangle, MusicDataStar_Square1, $00, MusicDataStar_DPCM
088A4                           	ENDIF
088A4                           ENDIF
088A4                           IFDEF PROTOTYPE_MUSIC_STARMAN
088A4                           	musicHeader NoteLengthTable_300bpm, MusicDataStar, MusicDataStar_Triangle, MusicDataStar_Square1, MusicDataStar_Noise, -1
088A4                           ENDIF
088A4                           
088A4                           ; ----------------------------------------
088A4                           ; Wart's final boss music
088A4                           MusicHeaderWart:
088A4                           IFNDEF PROTOTYPE_MUSIC_ENDING
088A4                           	musicHeader NoteLengthTable_200bpm, MusicDataWart, MusicDataWart_Triangle, MusicDataWart_Square1, $00, -1
088A4                           	noteLength NoteLengthTable_200bpm
088A4 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
088A5 ED 97                     	.dw MusicDataWart
088A7                           	IF MusicDataWart_Triangle <= 0
088A7                           		.db $00
088A7                           	ELSE
088A7 96                        		.db (MusicDataWart_Triangle - MusicDataWart)
088A8                           	ENDIF
088A8                           	IF MusicDataWart_Square1 <= 0
088A8                           		.db $00
088A8                           	ELSE
088A8 4B                        		.db (MusicDataWart_Square1 - MusicDataWart)
088A9                           	ENDIF
088A9                           
088A9                           	IFNDEF EXPAND_MUSIC
088A9                           		IF $00 = 0
088A9 00                        			.db $00
088AA                           		ELSEIF $00 > 0
088AA                           			.db ($00 - MusicDataWart)
088AA                           		ENDIF
088AA                           		IF -1 = 0
088AA                           			.db $00
088AA                           		ELSEIF -1 > 0
088AA                           			.db (-1 - MusicDataWart)
088AA                           		ENDIF
088AA                           	ELSE
088AA                           		IF $00 <= 0
088AA                           			.db $00
088AA                           		ELSE
088AA                           			.db ($00 - MusicDataWart)
088AA                           		ENDIF
088AA                           		IF -1 <= 0
088AA                           			.db $00
088AA                           		ELSE
088AA                           			.db (-1 - MusicDataWart)
088AA                           		ENDIF
088AA                           	ENDIF
088AA                           ELSE
088AA                           	; sharing $00 with NoteLengthTable_300bpm from the segment below
088AA                           	; (we're scrounging for bytes to avoid overflowing the music header table)
088AA                           	musicHeader NoteLengthTable_200bpm, MusicDataWart, MusicDataWart_Triangle, MusicDataWart_Square1, -1, -1
088AA                           ENDIF
088AA                           
088AA                           ; ----------------------------------------
088AA                           ; Various shorter jingles, extra character select segments (8, 7, 6), and other potpourri
088AA                           
088AA                           MusicHeaderCrystal:
088AA                           	musicHeader NoteLengthTable_300bpm, MusicDataCrystal, MusicDataCrystal_Triangle, MusicDataCrystal_Square1, -1, -1
088AA                           	noteLength NoteLengthTable_300bpm
088AA 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
088AB 6E 99                     	.dw MusicDataCrystal
088AD                           	IF MusicDataCrystal_Triangle <= 0
088AD                           		.db $00
088AD                           	ELSE
088AD 1B                        		.db (MusicDataCrystal_Triangle - MusicDataCrystal)
088AE                           	ENDIF
088AE                           	IF MusicDataCrystal_Square1 <= 0
088AE                           		.db $00
088AE                           	ELSE
088AE 0D                        		.db (MusicDataCrystal_Square1 - MusicDataCrystal)
088AF                           	ENDIF
088AF                           
088AF                           	IFNDEF EXPAND_MUSIC
088AF                           		IF -1 = 0
088AF                           			.db $00
088AF                           		ELSEIF -1 > 0
088AF                           			.db (-1 - MusicDataCrystal)
088AF                           		ENDIF
088AF                           		IF -1 = 0
088AF                           			.db $00
088AF                           		ELSEIF -1 > 0
088AF                           			.db (-1 - MusicDataCrystal)
088AF                           		ENDIF
088AF                           	ELSE
088AF                           		IF -1 <= 0
088AF                           			.db $00
088AF                           		ELSE
088AF                           			.db (-1 - MusicDataCrystal)
088AF                           		ENDIF
088AF                           		IF -1 <= 0
088AF                           			.db $00
088AF                           		ELSE
088AF                           			.db (-1 - MusicDataCrystal)
088AF                           		ENDIF
088AF                           	ENDIF
088AF                           
088AF                           MusicHeaderGameOver:
088AF                            	musicHeader NoteLengthTable_300bpm, MusicDataGameOver, MusicDataGameOver_Triangle, MusicDataGameOver_Square1, -1, -1
088AF                           	noteLength NoteLengthTable_300bpm
088AF 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
088B0 F4 98                     	.dw MusicDataGameOver
088B2                           	IF MusicDataGameOver_Triangle <= 0
088B2                           		.db $00
088B2                           	ELSE
088B2 1B                        		.db (MusicDataGameOver_Triangle - MusicDataGameOver)
088B3                           	ENDIF
088B3                           	IF MusicDataGameOver_Square1 <= 0
088B3                           		.db $00
088B3                           	ELSE
088B3 0E                        		.db (MusicDataGameOver_Square1 - MusicDataGameOver)
088B4                           	ENDIF
088B4                           
088B4                           	IFNDEF EXPAND_MUSIC
088B4                           		IF -1 = 0
088B4                           			.db $00
088B4                           		ELSEIF -1 > 0
088B4                           			.db (-1 - MusicDataGameOver)
088B4                           		ENDIF
088B4                           		IF -1 = 0
088B4                           			.db $00
088B4                           		ELSEIF -1 > 0
088B4                           			.db (-1 - MusicDataGameOver)
088B4                           		ENDIF
088B4                           	ELSE
088B4                           		IF -1 <= 0
088B4                           			.db $00
088B4                           		ELSE
088B4                           			.db (-1 - MusicDataGameOver)
088B4                           		ENDIF
088B4                           		IF -1 <= 0
088B4                           			.db $00
088B4                           		ELSE
088B4                           			.db (-1 - MusicDataGameOver)
088B4                           		ENDIF
088B4                           	ENDIF
088B4                           
088B4                           MusicHeaderBossBeaten:
088B4                            	musicHeader NoteLengthTable_300bpm, MusicDataBossBeaten, MusicDataBossBeaten_Triangle, MusicDataBossBeaten_Square1, -1, -1
088B4                           	noteLength NoteLengthTable_300bpm
088B4 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
088B5 18 99                     	.dw MusicDataBossBeaten
088B7                           	IF MusicDataBossBeaten_Triangle <= 0
088B7                           		.db $00
088B7                           	ELSE
088B7 41                        		.db (MusicDataBossBeaten_Triangle - MusicDataBossBeaten)
088B8                           	ENDIF
088B8                           	IF MusicDataBossBeaten_Square1 <= 0
088B8                           		.db $00
088B8                           	ELSE
088B8 27                        		.db (MusicDataBossBeaten_Square1 - MusicDataBossBeaten)
088B9                           	ENDIF
088B9                           
088B9                           	IFNDEF EXPAND_MUSIC
088B9                           		IF -1 = 0
088B9                           			.db $00
088B9                           		ELSEIF -1 > 0
088B9                           			.db (-1 - MusicDataBossBeaten)
088B9                           		ENDIF
088B9                           		IF -1 = 0
088B9                           			.db $00
088B9                           		ELSEIF -1 > 0
088B9                           			.db (-1 - MusicDataBossBeaten)
088B9                           		ENDIF
088B9                           	ELSE
088B9                           		IF -1 <= 0
088B9                           			.db $00
088B9                           		ELSE
088B9                           			.db (-1 - MusicDataBossBeaten)
088B9                           		ENDIF
088B9                           		IF -1 <= 0
088B9                           			.db $00
088B9                           		ELSE
088B9                           			.db (-1 - MusicDataBossBeaten)
088B9                           		ENDIF
088B9                           	ENDIF
088B9                           
088B9                           MusicHeaderCharacterSelect8:
088B9                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect8, MusicDataCharacterSelect8_Triangle, MusicDataCharacterSelect8_Square1, MusicDataCharacterSelect8_Noise, -1
088B9                           	noteLength NoteLengthTable_300bpm
088B9 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
088BA B9 93                     	.dw MusicDataCharacterSelect8
088BC                           	IF MusicDataCharacterSelect8_Triangle <= 0
088BC                           		.db $00
088BC                           	ELSE
088BC 2F                        		.db (MusicDataCharacterSelect8_Triangle - MusicDataCharacterSelect8)
088BD                           	ENDIF
088BD                           	IF MusicDataCharacterSelect8_Square1 <= 0
088BD                           		.db $00
088BD                           	ELSE
088BD 21                        		.db (MusicDataCharacterSelect8_Square1 - MusicDataCharacterSelect8)
088BE                           	ENDIF
088BE                           
088BE                           	IFNDEF EXPAND_MUSIC
088BE                           		IF MusicDataCharacterSelect8_Noise = 0
088BE                           			.db $00
088BE                           		ELSEIF MusicDataCharacterSelect8_Noise > 0
088BE 38                        			.db (MusicDataCharacterSelect8_Noise - MusicDataCharacterSelect8)
088BF                           		ENDIF
088BF                           		IF -1 = 0
088BF                           			.db $00
088BF                           		ELSEIF -1 > 0
088BF                           			.db (-1 - MusicDataCharacterSelect8)
088BF                           		ENDIF
088BF                           	ELSE
088BF                           		IF MusicDataCharacterSelect8_Noise <= 0
088BF                           			.db $00
088BF                           		ELSE
088BF                           			.db (MusicDataCharacterSelect8_Noise - MusicDataCharacterSelect8)
088BF                           		ENDIF
088BF                           		IF -1 <= 0
088BF                           			.db $00
088BF                           		ELSE
088BF                           			.db (-1 - MusicDataCharacterSelect8)
088BF                           		ENDIF
088BF                           	ENDIF
088BF                           
088BF                           MusicHeaderMushroomBonusChance:
088BF                            	musicHeader NoteLengthTable_150bpm, MusicDataMushroomBonusChance, $00, MusicDataMushroomBonusChance_Square1, -1, -1
088BF                           	noteLength NoteLengthTable_150bpm
088BF 52                        	.db (NoteLengthTable_150bpm - NoteLengthTable)
088C0 E1 98                     	.dw MusicDataMushroomBonusChance
088C2                           	IF $00 <= 0
088C2 00                        		.db $00
088C3                           	ELSE
088C3                           		.db ($00 - MusicDataMushroomBonusChance)
088C3                           	ENDIF
088C3                           	IF MusicDataMushroomBonusChance_Square1 <= 0
088C3                           		.db $00
088C3                           	ELSE
088C3 0A                        		.db (MusicDataMushroomBonusChance_Square1 - MusicDataMushroomBonusChance)
088C4                           	ENDIF
088C4                           
088C4                           	IFNDEF EXPAND_MUSIC
088C4                           		IF -1 = 0
088C4                           			.db $00
088C4                           		ELSEIF -1 > 0
088C4                           			.db (-1 - MusicDataMushroomBonusChance)
088C4                           		ENDIF
088C4                           		IF -1 = 0
088C4                           			.db $00
088C4                           		ELSEIF -1 > 0
088C4                           			.db (-1 - MusicDataMushroomBonusChance)
088C4                           		ENDIF
088C4                           	ELSE
088C4                           		IF -1 <= 0
088C4                           			.db $00
088C4                           		ELSE
088C4                           			.db (-1 - MusicDataMushroomBonusChance)
088C4                           		ENDIF
088C4                           		IF -1 <= 0
088C4                           			.db $00
088C4                           		ELSE
088C4                           			.db (-1 - MusicDataMushroomBonusChance)
088C4                           		ENDIF
088C4                           	ENDIF
088C4                           
088C4                           MusicHeaderCharacterSelect7:
088C4                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect7, MusicDataCharacterSelect7_Triangle, MusicDataCharacterSelect7_Square1, MusicDataCharacterSelect7_Noise, -1
088C4                           	noteLength NoteLengthTable_300bpm
088C4 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
088C5 05 93                     	.dw MusicDataCharacterSelect7
088C7                           	IF MusicDataCharacterSelect7_Triangle <= 0
088C7                           		.db $00
088C7                           	ELSE
088C7 97                        		.db (MusicDataCharacterSelect7_Triangle - MusicDataCharacterSelect7)
088C8                           	ENDIF
088C8                           	IF MusicDataCharacterSelect7_Square1 <= 0
088C8                           		.db $00
088C8                           	ELSE
088C8 61                        		.db (MusicDataCharacterSelect7_Square1 - MusicDataCharacterSelect7)
088C9                           	ENDIF
088C9                           
088C9                           	IFNDEF EXPAND_MUSIC
088C9                           		IF MusicDataCharacterSelect7_Noise = 0
088C9                           			.db $00
088C9                           		ELSEIF MusicDataCharacterSelect7_Noise > 0
088C9 B0                        			.db (MusicDataCharacterSelect7_Noise - MusicDataCharacterSelect7)
088CA                           		ENDIF
088CA                           		IF -1 = 0
088CA                           			.db $00
088CA                           		ELSEIF -1 > 0
088CA                           			.db (-1 - MusicDataCharacterSelect7)
088CA                           		ENDIF
088CA                           	ELSE
088CA                           		IF MusicDataCharacterSelect7_Noise <= 0
088CA                           			.db $00
088CA                           		ELSE
088CA                           			.db (MusicDataCharacterSelect7_Noise - MusicDataCharacterSelect7)
088CA                           		ENDIF
088CA                           		IF -1 <= 0
088CA                           			.db $00
088CA                           		ELSE
088CA                           			.db (-1 - MusicDataCharacterSelect7)
088CA                           		ENDIF
088CA                           	ENDIF
088CA                           
088CA                           MusicHeaderDeath:
088CA                            	musicHeader NoteLengthTable_200bpm, MusicDataDeath, MusicDataDeath_Triangle, MusicDataDeath_Square1, -1, -1
088CA                           	noteLength NoteLengthTable_200bpm
088CA 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
088CB 95 99                     	.dw MusicDataDeath
088CD                           	IF MusicDataDeath_Triangle <= 0
088CD                           		.db $00
088CD                           	ELSE
088CD 17                        		.db (MusicDataDeath_Triangle - MusicDataDeath)
088CE                           	ENDIF
088CE                           	IF MusicDataDeath_Square1 <= 0
088CE                           		.db $00
088CE                           	ELSE
088CE 0C                        		.db (MusicDataDeath_Square1 - MusicDataDeath)
088CF                           	ENDIF
088CF                           
088CF                           	IFNDEF EXPAND_MUSIC
088CF                           		IF -1 = 0
088CF                           			.db $00
088CF                           		ELSEIF -1 > 0
088CF                           			.db (-1 - MusicDataDeath)
088CF                           		ENDIF
088CF                           		IF -1 = 0
088CF                           			.db $00
088CF                           		ELSEIF -1 > 0
088CF                           			.db (-1 - MusicDataDeath)
088CF                           		ENDIF
088CF                           	ELSE
088CF                           		IF -1 <= 0
088CF                           			.db $00
088CF                           		ELSE
088CF                           			.db (-1 - MusicDataDeath)
088CF                           		ENDIF
088CF                           		IF -1 <= 0
088CF                           			.db $00
088CF                           		ELSE
088CF                           			.db (-1 - MusicDataDeath)
088CF                           		ENDIF
088CF                           	ENDIF
088CF                           
088CF                           MusicHeaderCharacterSelect6:
088CF                           	musicHeader NoteLengthTable_300bpm, MusicDataCharacterSelect6, MusicDataCharacterSelect6_Triangle, MusicDataCharacterSelect6_Square1, MusicDataCharacterSelect6_Noise, -1
088CF                           	noteLength NoteLengthTable_300bpm
088CF 00                        	.db (NoteLengthTable_300bpm - NoteLengthTable)
088D0 83 92                     	.dw MusicDataCharacterSelect6
088D2                           	IF MusicDataCharacterSelect6_Triangle <= 0
088D2                           		.db $00
088D2                           	ELSE
088D2 6C                        		.db (MusicDataCharacterSelect6_Triangle - MusicDataCharacterSelect6)
088D3                           	ENDIF
088D3                           	IF MusicDataCharacterSelect6_Square1 <= 0
088D3                           		.db $00
088D3                           	ELSE
088D3 45                        		.db (MusicDataCharacterSelect6_Square1 - MusicDataCharacterSelect6)
088D4                           	ENDIF
088D4                           
088D4                           	IFNDEF EXPAND_MUSIC
088D4                           		IF MusicDataCharacterSelect6_Noise = 0
088D4                           			.db $00
088D4                           		ELSEIF MusicDataCharacterSelect6_Noise > 0
088D4 79                        			.db (MusicDataCharacterSelect6_Noise - MusicDataCharacterSelect6)
088D5                           		ENDIF
088D5                           		IF -1 = 0
088D5                           			.db $00
088D5                           		ELSEIF -1 > 0
088D5                           			.db (-1 - MusicDataCharacterSelect6)
088D5                           		ENDIF
088D5                           	ELSE
088D5                           		IF MusicDataCharacterSelect6_Noise <= 0
088D5                           			.db $00
088D5                           		ELSE
088D5                           			.db (MusicDataCharacterSelect6_Noise - MusicDataCharacterSelect6)
088D5                           		ENDIF
088D5                           		IF -1 <= 0
088D5                           			.db $00
088D5                           		ELSE
088D5                           			.db (-1 - MusicDataCharacterSelect6)
088D5                           		ENDIF
088D5                           	ENDIF
088D5                           
088D5                           ; ----------------------------------------
088D5                           ; Title screen segments
088D5                           
088D5                           MusicHeaderTitleScreen2:
088D5                           	musicHeader NoteLengthTable_225bpm, MusicDataTitleScreen2, MusicDataTitleScreen2_Triangle, MusicDataTitleScreen2_Square1, MusicDataTitleScreen2_Noise, -1
088D5                           	noteLength NoteLengthTable_225bpm
088D5 1B                        	.db (NoteLengthTable_225bpm - NoteLengthTable)
088D6 CD 8E                     	.dw MusicDataTitleScreen2
088D8                           	IF MusicDataTitleScreen2_Triangle <= 0
088D8                           		.db $00
088D8                           	ELSE
088D8 BC                        		.db (MusicDataTitleScreen2_Triangle - MusicDataTitleScreen2)
088D9                           	ENDIF
088D9                           	IF MusicDataTitleScreen2_Square1 <= 0
088D9                           		.db $00
088D9                           	ELSE
088D9 64                        		.db (MusicDataTitleScreen2_Square1 - MusicDataTitleScreen2)
088DA                           	ENDIF
088DA                           
088DA                           	IFNDEF EXPAND_MUSIC
088DA                           		IF MusicDataTitleScreen2_Noise = 0
088DA                           			.db $00
088DA                           		ELSEIF MusicDataTitleScreen2_Noise > 0
088DA 59                        			.db (MusicDataTitleScreen2_Noise - MusicDataTitleScreen2)
088DB                           		ENDIF
088DB                           		IF -1 = 0
088DB                           			.db $00
088DB                           		ELSEIF -1 > 0
088DB                           			.db (-1 - MusicDataTitleScreen2)
088DB                           		ENDIF
088DB                           	ELSE
088DB                           		IF MusicDataTitleScreen2_Noise <= 0
088DB                           			.db $00
088DB                           		ELSE
088DB                           			.db (MusicDataTitleScreen2_Noise - MusicDataTitleScreen2)
088DB                           		ENDIF
088DB                           		IF -1 <= 0
088DB                           			.db $00
088DB                           		ELSE
088DB                           			.db (-1 - MusicDataTitleScreen2)
088DB                           		ENDIF
088DB                           	ENDIF
088DB                           
088DB                           MusicHeaderTitleScreen1:
088DB                           	musicHeader NoteLengthTable_225bpm, MusicDataTitleScreen1, MusicDataTitleScreen1_Triangle, MusicDataTitleScreen1_Square1, MusicDataTitleScreen1_Noise, -1
088DB                           	noteLength NoteLengthTable_225bpm
088DB 1B                        	.db (NoteLengthTable_225bpm - NoteLengthTable)
088DC 64 8E                     	.dw MusicDataTitleScreen1
088DE                           	IF MusicDataTitleScreen1_Triangle <= 0
088DE                           		.db $00
088DE                           	ELSE
088DE 43                        		.db (MusicDataTitleScreen1_Triangle - MusicDataTitleScreen1)
088DF                           	ENDIF
088DF                           	IF MusicDataTitleScreen1_Square1 <= 0
088DF                           		.db $00
088DF                           	ELSE
088DF 22                        		.db (MusicDataTitleScreen1_Square1 - MusicDataTitleScreen1)
088E0                           	ENDIF
088E0                           
088E0                           	IFNDEF EXPAND_MUSIC
088E0                           		IF MusicDataTitleScreen1_Noise = 0
088E0                           			.db $00
088E0                           		ELSEIF MusicDataTitleScreen1_Noise > 0
088E0 57                        			.db (MusicDataTitleScreen1_Noise - MusicDataTitleScreen1)
088E1                           		ENDIF
088E1                           		IF -1 = 0
088E1                           			.db $00
088E1                           		ELSEIF -1 > 0
088E1                           			.db (-1 - MusicDataTitleScreen1)
088E1                           		ENDIF
088E1                           	ELSE
088E1                           		IF MusicDataTitleScreen1_Noise <= 0
088E1                           			.db $00
088E1                           		ELSE
088E1                           			.db (MusicDataTitleScreen1_Noise - MusicDataTitleScreen1)
088E1                           		ENDIF
088E1                           		IF -1 <= 0
088E1                           			.db $00
088E1                           		ELSE
088E1                           			.db (-1 - MusicDataTitleScreen1)
088E1                           		ENDIF
088E1                           	ENDIF
088E1                           
088E1                           MusicHeaderTitleScreen3:
088E1                           	musicHeader NoteLengthTable_225bpm, MusicDataTitleScreen3, MusicDataTitleScreen3_Triangle, MusicDataTitleScreen3_Square1, MusicDataTitleScreen3_Noise, -1
088E1                           	noteLength NoteLengthTable_225bpm
088E1 1B                        	.db (NoteLengthTable_225bpm - NoteLengthTable)
088E2 BA 8F                     	.dw MusicDataTitleScreen3
088E4                           	IF MusicDataTitleScreen3_Triangle <= 0
088E4                           		.db $00
088E4                           	ELSE
088E4 8D                        		.db (MusicDataTitleScreen3_Triangle - MusicDataTitleScreen3)
088E5                           	ENDIF
088E5                           	IF MusicDataTitleScreen3_Square1 <= 0
088E5                           		.db $00
088E5                           	ELSE
088E5 47                        		.db (MusicDataTitleScreen3_Square1 - MusicDataTitleScreen3)
088E6                           	ENDIF
088E6                           
088E6                           	IFNDEF EXPAND_MUSIC
088E6                           		IF MusicDataTitleScreen3_Noise = 0
088E6                           			.db $00
088E6                           		ELSEIF MusicDataTitleScreen3_Noise > 0
088E6 BA                        			.db (MusicDataTitleScreen3_Noise - MusicDataTitleScreen3)
088E7                           		ENDIF
088E7                           		IF -1 = 0
088E7                           			.db $00
088E7                           		ELSEIF -1 > 0
088E7                           			.db (-1 - MusicDataTitleScreen3)
088E7                           		ENDIF
088E7                           	ELSE
088E7                           		IF MusicDataTitleScreen3_Noise <= 0
088E7                           			.db $00
088E7                           		ELSE
088E7                           			.db (MusicDataTitleScreen3_Noise - MusicDataTitleScreen3)
088E7                           		ENDIF
088E7                           		IF -1 <= 0
088E7                           			.db $00
088E7                           		ELSE
088E7                           			.db (-1 - MusicDataTitleScreen3)
088E7                           		ENDIF
088E7                           	ENDIF
088E7                           
088E7                           MusicHeaderTitleScreen4:
088E7                           	musicHeader NoteLengthTable_225bpm, MusicDataTitleScreen4, MusicDataTitleScreen4_Triangle, MusicDataTitleScreen4_Square1, MusicDataTitleScreen4_Noise, -1
088E7                           	noteLength NoteLengthTable_225bpm
088E7 1B                        	.db (NoteLengthTable_225bpm - NoteLengthTable)
088E8 9E 90                     	.dw MusicDataTitleScreen4
088EA                           	IF MusicDataTitleScreen4_Triangle <= 0
088EA                           		.db $00
088EA                           	ELSE
088EA 24                        		.db (MusicDataTitleScreen4_Triangle - MusicDataTitleScreen4)
088EB                           	ENDIF
088EB                           	IF MusicDataTitleScreen4_Square1 <= 0
088EB                           		.db $00
088EB                           	ELSE
088EB 12                        		.db (MusicDataTitleScreen4_Square1 - MusicDataTitleScreen4)
088EC                           	ENDIF
088EC                           
088EC                           	IFNDEF EXPAND_MUSIC
088EC                           		IF MusicDataTitleScreen4_Noise = 0
088EC                           			.db $00
088EC                           		ELSEIF MusicDataTitleScreen4_Noise > 0
088EC 29                        			.db (MusicDataTitleScreen4_Noise - MusicDataTitleScreen4)
088ED                           		ENDIF
088ED                           		IF -1 = 0
088ED                           			.db $00
088ED                           		ELSEIF -1 > 0
088ED                           			.db (-1 - MusicDataTitleScreen4)
088ED                           		ENDIF
088ED                           	ELSE
088ED                           		IF MusicDataTitleScreen4_Noise <= 0
088ED                           			.db $00
088ED                           		ELSE
088ED                           			.db (MusicDataTitleScreen4_Noise - MusicDataTitleScreen4)
088ED                           		ENDIF
088ED                           		IF -1 <= 0
088ED                           			.db $00
088ED                           		ELSE
088ED                           			.db (-1 - MusicDataTitleScreen4)
088ED                           		ENDIF
088ED                           	ENDIF
088ED                           
088ED                           ; ----------------------------------------
088ED                           ; Subspace music, quite longer than normally heard
088ED                           
088ED                           MusicHeaderSubspace1:
088ED                           	musicHeader NoteLengthTable_200bpm, MusicDataSubspace1, MusicDataSubspace1_Triangle, MusicDataSubspace1_Square1, MusicDataSubspace1_Noise, -1
088ED                           	noteLength NoteLengthTable_200bpm
088ED 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
088EE 76 8D                     	.dw MusicDataSubspace1
088F0                           	IF MusicDataSubspace1_Triangle <= 0
088F0                           		.db $00
088F0                           	ELSE
088F0 38                        		.db (MusicDataSubspace1_Triangle - MusicDataSubspace1)
088F1                           	ENDIF
088F1                           	IF MusicDataSubspace1_Square1 <= 0
088F1                           		.db $00
088F1                           	ELSE
088F1 1C                        		.db (MusicDataSubspace1_Square1 - MusicDataSubspace1)
088F2                           	ENDIF
088F2                           
088F2                           	IFNDEF EXPAND_MUSIC
088F2                           		IF MusicDataSubspace1_Noise = 0
088F2                           			.db $00
088F2                           		ELSEIF MusicDataSubspace1_Noise > 0
088F2 83                        			.db (MusicDataSubspace1_Noise - MusicDataSubspace1)
088F3                           		ENDIF
088F3                           		IF -1 = 0
088F3                           			.db $00
088F3                           		ELSEIF -1 > 0
088F3                           			.db (-1 - MusicDataSubspace1)
088F3                           		ENDIF
088F3                           	ELSE
088F3                           		IF MusicDataSubspace1_Noise <= 0
088F3                           			.db $00
088F3                           		ELSE
088F3                           			.db (MusicDataSubspace1_Noise - MusicDataSubspace1)
088F3                           		ENDIF
088F3                           		IF -1 <= 0
088F3                           			.db $00
088F3                           		ELSE
088F3                           			.db (-1 - MusicDataSubspace1)
088F3                           		ENDIF
088F3                           	ENDIF
088F3                           
088F3                           MusicHeaderSubspace2:
088F3                           	musicHeader NoteLengthTable_200bpm, MusicDataSubspace2, MusicDataSubspace2_Triangle, MusicDataSubspace2_Square1, MusicDataSubspace2_Noise, -1
088F3                           	noteLength NoteLengthTable_200bpm
088F3 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
088F4 C9 8D                     	.dw MusicDataSubspace2
088F6                           	IF MusicDataSubspace2_Triangle <= 0
088F6                           		.db $00
088F6                           	ELSE
088F6 24                        		.db (MusicDataSubspace2_Triangle - MusicDataSubspace2)
088F7                           	ENDIF
088F7                           	IF MusicDataSubspace2_Square1 <= 0
088F7                           		.db $00
088F7                           	ELSE
088F7 12                        		.db (MusicDataSubspace2_Square1 - MusicDataSubspace2)
088F8                           	ENDIF
088F8                           
088F8                           	IFNDEF EXPAND_MUSIC
088F8                           		IF MusicDataSubspace2_Noise = 0
088F8                           			.db $00
088F8                           		ELSEIF MusicDataSubspace2_Noise > 0
088F8 30                        			.db (MusicDataSubspace2_Noise - MusicDataSubspace2)
088F9                           		ENDIF
088F9                           		IF -1 = 0
088F9                           			.db $00
088F9                           		ELSEIF -1 > 0
088F9                           			.db (-1 - MusicDataSubspace2)
088F9                           		ENDIF
088F9                           	ELSE
088F9                           		IF MusicDataSubspace2_Noise <= 0
088F9                           			.db $00
088F9                           		ELSE
088F9                           			.db (MusicDataSubspace2_Noise - MusicDataSubspace2)
088F9                           		ENDIF
088F9                           		IF -1 <= 0
088F9                           			.db $00
088F9                           		ELSE
088F9                           			.db (-1 - MusicDataSubspace2)
088F9                           		ENDIF
088F9                           	ENDIF
088F9                           
088F9                           MusicHeaderSubspace3:
088F9                           	musicHeader NoteLengthTable_200bpm, MusicDataSubspace3, MusicDataSubspace3_Triangle, MusicDataSubspace3_Square1, MusicDataSubspace3_Noise, -1
088F9                           	noteLength NoteLengthTable_200bpm
088F9 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
088FA 06 8E                     	.dw MusicDataSubspace3
088FC                           	IF MusicDataSubspace3_Triangle <= 0
088FC                           		.db $00
088FC                           	ELSE
088FC 22                        		.db (MusicDataSubspace3_Triangle - MusicDataSubspace3)
088FD                           	ENDIF
088FD                           	IF MusicDataSubspace3_Square1 <= 0
088FD                           		.db $00
088FD                           	ELSE
088FD 10                        		.db (MusicDataSubspace3_Square1 - MusicDataSubspace3)
088FE                           	ENDIF
088FE                           
088FE                           	IFNDEF EXPAND_MUSIC
088FE                           		IF MusicDataSubspace3_Noise = 0
088FE                           			.db $00
088FE                           		ELSEIF MusicDataSubspace3_Noise > 0
088FE 51                        			.db (MusicDataSubspace3_Noise - MusicDataSubspace3)
088FF                           		ENDIF
088FF                           		IF -1 = 0
088FF                           			.db $00
088FF                           		ELSEIF -1 > 0
088FF                           			.db (-1 - MusicDataSubspace3)
088FF                           		ENDIF
088FF                           	ELSE
088FF                           		IF MusicDataSubspace3_Noise <= 0
088FF                           			.db $00
088FF                           		ELSE
088FF                           			.db (MusicDataSubspace3_Noise - MusicDataSubspace3)
088FF                           		ENDIF
088FF                           		IF -1 <= 0
088FF                           			.db $00
088FF                           		ELSE
088FF                           			.db (-1 - MusicDataSubspace3)
088FF                           		ENDIF
088FF                           	ENDIF
088FF                           
088FF                           MusicHeaderSubspace4:
088FF                           	musicHeader NoteLengthTable_200bpm, MusicDataSubspace4, MusicDataSubspace4_Triangle, MusicDataSubspace4_Square1, MusicDataSubspace4_Noise, -1
088FF                           	noteLength NoteLengthTable_200bpm
088FF 28                        	.db (NoteLengthTable_200bpm - NoteLengthTable)
08900 35 8E                     	.dw MusicDataSubspace4
08902                           	IF MusicDataSubspace4_Triangle <= 0
08902                           		.db $00
08902                           	ELSE
08902 17                        		.db (MusicDataSubspace4_Triangle - MusicDataSubspace4)
08903                           	ENDIF
08903                           	IF MusicDataSubspace4_Square1 <= 0
08903                           		.db $00
08903                           	ELSE
08903 0A                        		.db (MusicDataSubspace4_Square1 - MusicDataSubspace4)
08904                           	ENDIF
08904                           
08904                           	IFNDEF EXPAND_MUSIC
08904                           		IF MusicDataSubspace4_Noise = 0
08904                           			.db $00
08904                           		ELSEIF MusicDataSubspace4_Noise > 0
08904 22                        			.db (MusicDataSubspace4_Noise - MusicDataSubspace4)
08905                           		ENDIF
08905                           		IF -1 = 0
08905                           			.db $00
08905                           		ELSEIF -1 > 0
08905                           			.db (-1 - MusicDataSubspace4)
08905                           		ENDIF
08905                           	ELSE
08905                           		IF MusicDataSubspace4_Noise <= 0
08905                           			.db $00
08905                           		ELSE
08905                           			.db (MusicDataSubspace4_Noise - MusicDataSubspace4)
08905                           		ENDIF
08905                           		IF -1 <= 0
08905                           			.db $00
08905                           		ELSE
08905                           			.db (-1 - MusicDataSubspace4)
08905                           		ENDIF
08905                           	ENDIF
08905                           
08905                           ; ----------------------------------------
08905                           ; Ending music
08905                           
08905                           MusicHeaderEnding1:
08905                           	musicHeader NoteLengthTable_129bpm, MusicDataEnding1, MusicDataEnding1_Triangle, MusicDataEnding1_Square1, MusicDataEnding1_Noise, -1
08905                           	noteLength NoteLengthTable_129bpm
08905 6E                        	.db (NoteLengthTable_129bpm - NoteLengthTable)
08906 44 89                     	.dw MusicDataEnding1
08908                           	IF MusicDataEnding1_Triangle <= 0
08908                           		.db $00
08908                           	ELSE
08908 3D                        		.db (MusicDataEnding1_Triangle - MusicDataEnding1)
08909                           	ENDIF
08909                           	IF MusicDataEnding1_Square1 <= 0
08909                           		.db $00
08909                           	ELSE
08909 1F                        		.db (MusicDataEnding1_Square1 - MusicDataEnding1)
0890A                           	ENDIF
0890A                           
0890A                           	IFNDEF EXPAND_MUSIC
0890A                           		IF MusicDataEnding1_Noise = 0
0890A                           			.db $00
0890A                           		ELSEIF MusicDataEnding1_Noise > 0
0890A 6D                        			.db (MusicDataEnding1_Noise - MusicDataEnding1)
0890B                           		ENDIF
0890B                           		IF -1 = 0
0890B                           			.db $00
0890B                           		ELSEIF -1 > 0
0890B                           			.db (-1 - MusicDataEnding1)
0890B                           		ENDIF
0890B                           	ELSE
0890B                           		IF MusicDataEnding1_Noise <= 0
0890B                           			.db $00
0890B                           		ELSE
0890B                           			.db (MusicDataEnding1_Noise - MusicDataEnding1)
0890B                           		ENDIF
0890B                           		IF -1 <= 0
0890B                           			.db $00
0890B                           		ELSE
0890B                           			.db (-1 - MusicDataEnding1)
0890B                           		ENDIF
0890B                           	ENDIF
0890B                           
0890B                           MusicHeaderEnding3:
0890B                           	musicHeader NoteLengthTable_129bpm, MusicDataEnding3, MusicDataEnding3_Triangle, MusicDataEnding3_Square1, MusicDataEnding3_Noise, -1
0890B                           	noteLength NoteLengthTable_129bpm
0890B 6E                        	.db (NoteLengthTable_129bpm - NoteLengthTable)
0890C C2 89                     	.dw MusicDataEnding3
0890E                           	IF MusicDataEnding3_Triangle <= 0
0890E                           		.db $00
0890E                           	ELSE
0890E 41                        		.db (MusicDataEnding3_Triangle - MusicDataEnding3)
0890F                           	ENDIF
0890F                           	IF MusicDataEnding3_Square1 <= 0
0890F                           		.db $00
0890F                           	ELSE
0890F 21                        		.db (MusicDataEnding3_Square1 - MusicDataEnding3)
08910                           	ENDIF
08910                           
08910                           	IFNDEF EXPAND_MUSIC
08910                           		IF MusicDataEnding3_Noise = 0
08910                           			.db $00
08910                           		ELSEIF MusicDataEnding3_Noise > 0
08910 8C                        			.db (MusicDataEnding3_Noise - MusicDataEnding3)
08911                           		ENDIF
08911                           		IF -1 = 0
08911                           			.db $00
08911                           		ELSEIF -1 > 0
08911                           			.db (-1 - MusicDataEnding3)
08911                           		ENDIF
08911                           	ELSE
08911                           		IF MusicDataEnding3_Noise <= 0
08911                           			.db $00
08911                           		ELSE
08911                           			.db (MusicDataEnding3_Noise - MusicDataEnding3)
08911                           		ENDIF
08911                           		IF -1 <= 0
08911                           			.db $00
08911                           		ELSE
08911                           			.db (-1 - MusicDataEnding3)
08911                           		ENDIF
08911                           	ENDIF
08911                           
08911                           MusicHeaderEnding2:
08911                           	musicHeader NoteLengthTable_129bpm, MusicDataEnding2, MusicDataEnding2_Triangle, MusicDataEnding2_Square1, MusicDataEnding2_Noise, -1
08911                           	noteLength NoteLengthTable_129bpm
08911 6E                        	.db (NoteLengthTable_129bpm - NoteLengthTable)
08912 A6 8A                     	.dw MusicDataEnding2
08914                           	IF MusicDataEnding2_Triangle <= 0
08914                           		.db $00
08914                           	ELSE
08914 2A                        		.db (MusicDataEnding2_Triangle - MusicDataEnding2)
08915                           	ENDIF
08915                           	IF MusicDataEnding2_Square1 <= 0
08915                           		.db $00
08915                           	ELSE
08915 5A                        		.db (MusicDataEnding2_Square1 - MusicDataEnding2)
08916                           	ENDIF
08916                           
08916                           	IFNDEF EXPAND_MUSIC
08916                           		IF MusicDataEnding2_Noise = 0
08916                           			.db $00
08916                           		ELSEIF MusicDataEnding2_Noise > 0
08916 19                        			.db (MusicDataEnding2_Noise - MusicDataEnding2)
08917                           		ENDIF
08917                           		IF -1 = 0
08917                           			.db $00
08917                           		ELSEIF -1 > 0
08917                           			.db (-1 - MusicDataEnding2)
08917                           		ENDIF
08917                           	ELSE
08917                           		IF MusicDataEnding2_Noise <= 0
08917                           			.db $00
08917                           		ELSE
08917                           			.db (MusicDataEnding2_Noise - MusicDataEnding2)
08917                           		ENDIF
08917                           		IF -1 <= 0
08917                           			.db $00
08917                           		ELSE
08917                           			.db (-1 - MusicDataEnding2)
08917                           		ENDIF
08917                           	ENDIF
08917                           
08917                           MusicHeaderEnding5:
08917                           	musicHeader NoteLengthTable_129bpm, MusicDataEnding5, MusicDataEnding5_Triangle, MusicDataEnding5_Square1, MusicDataEnding5_Noise, -1
08917                           	noteLength NoteLengthTable_129bpm
08917 6E                        	.db (NoteLengthTable_129bpm - NoteLengthTable)
08918 18 8B                     	.dw MusicDataEnding5
0891A                           	IF MusicDataEnding5_Triangle <= 0
0891A                           		.db $00
0891A                           	ELSE
0891A 4C                        		.db (MusicDataEnding5_Triangle - MusicDataEnding5)
0891B                           	ENDIF
0891B                           	IF MusicDataEnding5_Square1 <= 0
0891B                           		.db $00
0891B                           	ELSE
0891B 14                        		.db (MusicDataEnding5_Square1 - MusicDataEnding5)
0891C                           	ENDIF
0891C                           
0891C                           	IFNDEF EXPAND_MUSIC
0891C                           		IF MusicDataEnding5_Noise = 0
0891C                           			.db $00
0891C                           		ELSEIF MusicDataEnding5_Noise > 0
0891C 68                        			.db (MusicDataEnding5_Noise - MusicDataEnding5)
0891D                           		ENDIF
0891D                           		IF -1 = 0
0891D                           			.db $00
0891D                           		ELSEIF -1 > 0
0891D                           			.db (-1 - MusicDataEnding5)
0891D                           		ENDIF
0891D                           	ELSE
0891D                           		IF MusicDataEnding5_Noise <= 0
0891D                           			.db $00
0891D                           		ELSE
0891D                           			.db (MusicDataEnding5_Noise - MusicDataEnding5)
0891D                           		ENDIF
0891D                           		IF -1 <= 0
0891D                           			.db $00
0891D                           		ELSE
0891D                           			.db (-1 - MusicDataEnding5)
0891D                           		ENDIF
0891D                           	ENDIF
0891D                           
0891D                           MusicHeaderEnding4:
0891D                           	musicHeader NoteLengthTable_129bpm, MusicDataEnding4, MusicDataEnding4_Triangle, MusicDataEnding4_Square1, MusicDataEnding4_Noise, -1
0891D                           	noteLength NoteLengthTable_129bpm
0891D 6E                        	.db (NoteLengthTable_129bpm - NoteLengthTable)
0891E 33 8A                     	.dw MusicDataEnding4
08920                           	IF MusicDataEnding4_Triangle <= 0
08920                           		.db $00
08920                           	ELSE
08920 43                        		.db (MusicDataEnding4_Triangle - MusicDataEnding4)
08921                           	ENDIF
08921                           	IF MusicDataEnding4_Square1 <= 0
08921                           		.db $00
08921                           	ELSE
08921 29                        		.db (MusicDataEnding4_Square1 - MusicDataEnding4)
08922                           	ENDIF
08922                           
08922                           	IFNDEF EXPAND_MUSIC
08922                           		IF MusicDataEnding4_Noise = 0
08922                           			.db $00
08922                           		ELSEIF MusicDataEnding4_Noise > 0
08922 1B                        			.db (MusicDataEnding4_Noise - MusicDataEnding4)
08923                           		ENDIF
08923                           		IF -1 = 0
08923                           			.db $00
08923                           		ELSEIF -1 > 0
08923                           			.db (-1 - MusicDataEnding4)
08923                           		ENDIF
08923                           	ELSE
08923                           		IF MusicDataEnding4_Noise <= 0
08923                           			.db $00
08923                           		ELSE
08923                           			.db (MusicDataEnding4_Noise - MusicDataEnding4)
08923                           		ENDIF
08923                           		IF -1 <= 0
08923                           			.db $00
08923                           		ELSE
08923                           			.db (-1 - MusicDataEnding4)
08923                           		ENDIF
08923                           	ENDIF
08923                           
08923                           IFNDEF PROTOTYPE_MUSIC_ENDING
08923                           MusicHeaderEnding6:
08923                           	musicHeader NoteLengthTable_129bpm, MusicDataEnding6, $00, MusicDataEnding6_Square1, $00, -1
08923                           	noteLength NoteLengthTable_129bpm
08923 6E                        	.db (NoteLengthTable_129bpm - NoteLengthTable)
08924 9C 8B                     	.dw MusicDataEnding6
08926                           	IF $00 <= 0
08926 00                        		.db $00
08927                           	ELSE
08927                           		.db ($00 - MusicDataEnding6)
08927                           	ENDIF
08927                           	IF MusicDataEnding6_Square1 <= 0
08927                           		.db $00
08927                           	ELSE
08927 72                        		.db (MusicDataEnding6_Square1 - MusicDataEnding6)
08928                           	ENDIF
08928                           
08928                           	IFNDEF EXPAND_MUSIC
08928                           		IF $00 = 0
08928 00                        			.db $00
08929                           		ELSEIF $00 > 0
08929                           			.db ($00 - MusicDataEnding6)
08929                           		ENDIF
08929                           		IF -1 = 0
08929                           			.db $00
08929                           		ELSEIF -1 > 0
08929                           			.db (-1 - MusicDataEnding6)
08929                           		ENDIF
08929                           	ELSE
08929                           		IF $00 <= 0
08929                           			.db $00
08929                           		ELSE
08929                           			.db ($00 - MusicDataEnding6)
08929                           		ENDIF
08929                           		IF -1 <= 0
08929                           			.db $00
08929                           		ELSE
08929                           			.db (-1 - MusicDataEnding6)
08929                           		ENDIF
08929                           	ENDIF
08929                           ENDIF
08929                           
08929                           IFDEF PROTOTYPE_MUSIC_UNDERGROUND
08929                           ; Much cooler SMB3-esque underground music...
08929                           ; apparently using /both/ noise and DPCM (!)
08929                           MusicHeaderUndergroundBeta1:
08929                           	musicHeader NoteLengthTable_200bpm, MusicDataUndergroundBeta1, MusicDataUndergroundBeta1_Triangle, MusicDataUndergroundBeta1_Square1, MusicDataUndergroundBeta1_Noise, MusicDataUndergroundBeta1_DPCM
08929                           MusicHeaderUndergroundBeta2:
08929                           	musicHeader NoteLengthTable_200bpm, MusicDataUndergroundBeta2, MusicDataUndergroundBeta2_Triangle, MusicDataUndergroundBeta2_Square1, MusicDataUndergroundBeta2_Noise, MusicDataUndergroundBeta2_DPCM
08929                           ENDIF
08929                           
08929                           ; More music pointers
08929                           .include "src/music/music-pointers.asm"
08929                           ;
08929                           ; Music Pointers
08929                           ; ==============
08929                           ;
08929                           ; These pointers are set up the master song table and are used in conjunction
08929                           ; with the music part pointers to determine where those songs start and loop
08929                           ;
08929                           
08929                           MusicPointersFirstPart:
08929                           	musicPart MusicPartPointers_Overworld
08929 10                        	.db (MusicPartPointers_Overworld - MusicPartPointers)
0892A                           	musicPart MusicPartPointers_CharacterSelect
0892A 07                        	.db (MusicPartPointers_CharacterSelect - MusicPartPointers)
0892B                           	musicPart MusicPartPointers_Underground
0892B 29                        	.db (MusicPartPointers_Underground - MusicPartPointers)
0892C                           	musicPart MusicPartPointers_Boss
0892C 17                        	.db (MusicPartPointers_Boss - MusicPartPointers)
0892D                           	musicPart MusicPartPointers_Star
0892D 18                        	.db (MusicPartPointers_Star - MusicPartPointers)
0892E                           	musicPart MusicPartPointers_SubSpace
0892E 1E                        	.db (MusicPartPointers_SubSpace - MusicPartPointers)
0892F                           	musicPart MusicPartPointers_Wart
0892F 19                        	.db (MusicPartPointers_Wart - MusicPartPointers)
08930                           	musicPart MusicPartPointers_TitleScreen
08930 1A                        	.db (MusicPartPointers_TitleScreen - MusicPartPointers)
08931                           	musicPart MusicPartPointers_Ending
08931 23                        	.db (MusicPartPointers_Ending - MusicPartPointers)
08932                           
08932                           MusicPointersEndPart:
08932                           	musicPart MusicPartPointers_OverworldEnd
08932 16                        	.db (MusicPartPointers_OverworldEnd - MusicPartPointers)
08933                           	musicPart MusicPartPointers_CharacterSelectEnd
08933 0F                        	.db (MusicPartPointers_CharacterSelectEnd - MusicPartPointers)
08934                           	musicPart MusicPartPointers_UndergroundEnd
08934 29                        	.db (MusicPartPointers_UndergroundEnd - MusicPartPointers)
08935                           	musicPart MusicPartPointers_BossEnd
08935 17                        	.db (MusicPartPointers_BossEnd - MusicPartPointers)
08936                           	musicPart MusicPartPointers_StarEnd
08936 18                        	.db (MusicPartPointers_StarEnd - MusicPartPointers)
08937                           	musicPart MusicPartPointers_SubSpaceEnd
08937 22                        	.db (MusicPartPointers_SubSpaceEnd - MusicPartPointers)
08938                           	musicPart MusicPartPointers_WartEnd
08938 19                        	.db (MusicPartPointers_WartEnd - MusicPartPointers)
08939                           	musicPart MusicPartPointers_TitleScreenEnd
08939 1D                        	.db (MusicPartPointers_TitleScreenEnd - MusicPartPointers)
0893A                           	musicPart MusicPartPointers_EndingEnd
0893A 28                        	.db (MusicPartPointers_EndingEnd - MusicPartPointers)
0893B                           
0893B                           MusicPointersLoopPart:
0893B                           	musicPart MusicPartPointers_OverworldLoop
0893B 11                        	.db (MusicPartPointers_OverworldLoop - MusicPartPointers)
0893C                           	musicPart MusicPartPointers_CharacterSelectLoop
0893C 08                        	.db (MusicPartPointers_CharacterSelectLoop - MusicPartPointers)
0893D                           	musicPart MusicPartPointers_UndergroundLoop
0893D 29                        	.db (MusicPartPointers_UndergroundLoop - MusicPartPointers)
0893E                           	musicPart MusicPartPointers_BossLoop
0893E 17                        	.db (MusicPartPointers_BossLoop - MusicPartPointers)
0893F                           	musicPart MusicPartPointers_StarLoop
0893F 18                        	.db (MusicPartPointers_StarLoop - MusicPartPointers)
08940                           	musicPart MusicPartPointers_SubSpaceLoop
08940 1E                        	.db (MusicPartPointers_SubSpaceLoop - MusicPartPointers)
08941                           	musicPart MusicPartPointers_WartEnd
08941 19                        	.db (MusicPartPointers_WartEnd - MusicPartPointers)
08942 00                        	.db $00 ; title screen, no loop
08943                           IFNDEF PROTOTYPE_MUSIC_ENDING
08943                           	musicPart MusicPartPointers_EndingLoop
08943 28                        	.db (MusicPartPointers_EndingLoop - MusicPartPointers)
08944                           ELSE
08944                           	.db $00 ; ending, no loop
08944                           ENDIF
08944                           
08944                           ; Music and track data
08944                           .include "src/music/music-data.asm"
08944                           ;
08944                           ; Music Data
08944                           ; ==========
08944                           ;
08944                           ; Each segment of music is broken down into tracks for individual instruments.
08944                           ;
08944                           ; Square 2:
08944                           ;   $00: End of segment
08944                           ;   $01-$7D: Note On
08944                           ;   $7E: Rest
08944                           ;   $80-$FE: first nybble is the instrument, second nybble is the note length
08944                           ;            as determined by the note length lookup table. The next byte is
08944                           ;            expected to be a Note On.
08944                           ;   $FF: activate bend if used after a Note On
08944                           ;
08944                           ; Square 1 is the same as Square 2, except for the following:
08944                           ;   $00: Activate a ramp effect
08944                           ;
08944                           ; Triangle is the same as Square 2, except for the following:
08944                           ;   $00: Mute output (triangle channel is constant volume otherwise)
08944                           ;   $80-$FF: second nybble is the note length from the note length lookup table
08944                           ;
08944                           ; Noise/DPCM:
08944                           ;   $00: Restart (used for looping percussion within a segment)
08944                           ;   $01: Rest
08944                           ;   $02-$7F: Various note-on values, low bit is ignored
08944                           ;   $02: Closed Hi-Hat
08944                           ;   $04: Kick
08944                           ;   $06: Open Hi-Hat
08944                           ;   $08: Quiet Hi-Hat
08944                           ;   $0A: Crash Cymbal
08944                           ;   $0C: Brushed Snare
08944                           ;   $0E: Muted Crash
08944                           ;   $10: Snare
08944                           ;   $12: Deep Kick
08944                           ;   $14: High Static
08944                           ;   $16: Low Static
08944                           ;   $18: Ride
08944                           ;   $1A: Closed Hi-Hat
08944                           ;   $1C: Medium Static
08944                           ;   $1E: Obnoxious Crash
08944                           ;   $80-$FF: second nybble is the note length from the note length lookup table
08944                           ;
08944                           ; DPCM is the same as Noise, except for the following:
08944                           ;
08944                           ; The SMB3 disassembly is a good reference, since the format is the same:
08944                           ; http://sonicepoch.com/sm3mix/disassembly.html#TRACK
08944                           ;
08944                           MusicData:
08944                           
08944                           ;
08944                           ; Ending music
08944                           ; Segments 3 and 4 share a noise track (set in segment 4)
08944                           ;
08944                           .include "src/music/segments/ending/ending-1.asm"
08944                           MusicDataEnding1:
08944                           MusicDataEnding1_Square2:
08944 8A                        	.db $8A
08945 50                        	.db $50
08946 84                        	.db $84
08947 7E                        	.db $7E
08948 52                        	.db $52
08949 50                        	.db $50
0894A 48                        	.db $48
0894B 82                        	.db $82
0894C 4C                        	.db $4C
0894D 7E                        	.db $7E
0894E 83                        	.db $83
0894F 50                        	.db $50
08950 8A                        	.db $8A
08951 52                        	.db $52
08952 88                        	.db $88
08953 4C                        	.db $4C
08954 8A                        	.db $8A
08955 56                        	.db $56
08956 82                        	.db $82
08957 7E                        	.db $7E
08958 7E                        	.db $7E
08959 52                        	.db $52
0895A 52                        	.db $52
0895B 83                        	.db $83
0895C 50                        	.db $50
0895D 4C                        	.db $4C
0895E 8B                        	.db $8B
0895F 50                        	.db $50
08960 88                        	.db $88
08961 4C                        	.db $4C
08962 00                        	.db $00
08963                           MusicDataEnding1_Square1:
08963 8A                        	.db $8A
08964 3E                        	.db $3E
08965 84                        	.db $84
08966 7E                        	.db $7E
08967 42                        	.db $42
08968 3E                        	.db $3E
08969 38                        	.db $38
0896A 82                        	.db $82
0896B 3A                        	.db $3A
0896C 7E                        	.db $7E
0896D 83                        	.db $83
0896E 3E                        	.db $3E
0896F 8A                        	.db $8A
08970 44                        	.db $44
08971 88                        	.db $88
08972 3A                        	.db $3A
08973 8A                        	.db $8A
08974 44                        	.db $44
08975 82                        	.db $82
08976 7E                        	.db $7E
08977 7E                        	.db $7E
08978 44                        	.db $44
08979 44                        	.db $44
0897A 83                        	.db $83
0897B 3E                        	.db $3E
0897C 3A                        	.db $3A
0897D 8B                        	.db $8B
0897E 3E                        	.db $3E
0897F 88                        	.db $88
08980 3A                        	.db $3A
08981                           MusicDataEnding1_Triangle:
08981 88                        	.db $88
08982 30                        	.db $30
08983 82                        	.db $82
08984 30                        	.db $30
08985 30                        	.db $30
08986 83                        	.db $83
08987 30                        	.db $30
08988 84                        	.db $84
08989 30                        	.db $30
0898A 30                        	.db $30
0898B 30                        	.db $30
0898C 30                        	.db $30
0898D 88                        	.db $88
0898E 30                        	.db $30
0898F 82                        	.db $82
08990 30                        	.db $30
08991 30                        	.db $30
08992 83                        	.db $83
08993 30                        	.db $30
08994 84                        	.db $84
08995 30                        	.db $30
08996 30                        	.db $30
08997 30                        	.db $30
08998 30                        	.db $30
08999 88                        	.db $88
0899A 30                        	.db $30
0899B 82                        	.db $82
0899C 30                        	.db $30
0899D 30                        	.db $30
0899E 83                        	.db $83
0899F 30                        	.db $30
089A0 84                        	.db $84
089A1 30                        	.db $30
089A2 30                        	.db $30
089A3 30                        	.db $30
089A4 30                        	.db $30
089A5 88                        	.db $88
089A6 30                        	.db $30
089A7 82                        	.db $82
089A8 30                        	.db $30
089A9 30                        	.db $30
089AA 83                        	.db $83
089AB 30                        	.db $30
089AC 84                        	.db $84
089AD 30                        	.db $30
089AE 30                        	.db $30
089AF 2E                        	.db $2E
089B0 2E                        	.db $2E
089B1                           MusicDataEnding1_Noise:
089B1 88                        	.db $88
089B2 10                        	.db $10
089B3 82                        	.db $82
089B4 10                        	.db $10
089B5 82                        	.db $82
089B6 10                        	.db $10
089B7 83                        	.db $83
089B8 10                        	.db $10
089B9 84                        	.db $84
089BA 10                        	.db $10
089BB 84                        	.db $84
089BC 10                        	.db $10
089BD 84                        	.db $84
089BE 10                        	.db $10
089BF 84                        	.db $84
089C0 10                        	.db $10
089C1 00                        	.db $00
089C2                           .include "src/music/segments/ending/ending-3.asm"
089C2                           MusicDataEnding3:
089C2                           MusicDataEnding3_Square2:
089C2 8A                        	.db $8A
089C3 50                        	.db $50
089C4 84                        	.db $84
089C5 7E                        	.db $7E
089C6 52                        	.db $52
089C7 50                        	.db $50
089C8 48                        	.db $48
089C9 82                        	.db $82
089CA 4C                        	.db $4C
089CB 7E                        	.db $7E
089CC 83                        	.db $83
089CD 4C                        	.db $4C
089CE 8A                        	.db $8A
089CF 56                        	.db $56
089D0 88                        	.db $88
089D1 3E                        	.db $3E
089D2 8A                        	.db $8A
089D3 4C                        	.db $4C
089D4 84                        	.db $84
089D5 7E                        	.db $7E
089D6 4E                        	.db $4E
089D7 4C                        	.db $4C
089D8 44                        	.db $44
089D9 82                        	.db $82
089DA 48                        	.db $48
089DB 7E                        	.db $7E
089DC 83                        	.db $83
089DD 48                        	.db $48
089DE 8A                        	.db $8A
089DF 52                        	.db $52
089E0 88                        	.db $88
089E1 3A                        	.db $3A
089E2 00                        	.db $00
089E3                           MusicDataEnding3_Square1:
089E3 8A                        	.db $8A
089E4 48                        	.db $48
089E5 84                        	.db $84
089E6 7E                        	.db $7E
089E7 48                        	.db $48
089E8 48                        	.db $48
089E9 3E                        	.db $3E
089EA 82                        	.db $82
089EB 46                        	.db $46
089EC 7E                        	.db $7E
089ED 83                        	.db $83
089EE 46                        	.db $46
089EF 8A                        	.db $8A
089F0 4C                        	.db $4C
089F1 88                        	.db $88
089F2 34                        	.db $34
089F3 8A                        	.db $8A
089F4 44                        	.db $44
089F5 84                        	.db $84
089F6 7E                        	.db $7E
089F7 44                        	.db $44
089F8 44                        	.db $44
089F9 3A                        	.db $3A
089FA 82                        	.db $82
089FB 42                        	.db $42
089FC 7E                        	.db $7E
089FD 83                        	.db $83
089FE 42                        	.db $42
089FF 8A                        	.db $8A
08A00 48                        	.db $48
08A01 88                        	.db $88
08A02 30                        	.db $30
08A03                           MusicDataEnding3_Triangle:
08A03 88                        	.db $88
08A04 30                        	.db $30
08A05 82                        	.db $82
08A06 30                        	.db $30
08A07 30                        	.db $30
08A08 83                        	.db $83
08A09 30                        	.db $30
08A0A 84                        	.db $84
08A0B 30                        	.db $30
08A0C 30                        	.db $30
08A0D 30                        	.db $30
08A0E 30                        	.db $30
08A0F 88                        	.db $88
08A10 2E                        	.db $2E
08A11 82                        	.db $82
08A12 2E                        	.db $2E
08A13 2E                        	.db $2E
08A14 83                        	.db $83
08A15 2E                        	.db $2E
08A16 84                        	.db $84
08A17 2E                        	.db $2E
08A18 2E                        	.db $2E
08A19 2E                        	.db $2E
08A1A 2E                        	.db $2E
08A1B 88                        	.db $88
08A1C 2C                        	.db $2C
08A1D 82                        	.db $82
08A1E 2C                        	.db $2C
08A1F 2C                        	.db $2C
08A20 83                        	.db $83
08A21 2C                        	.db $2C
08A22 84                        	.db $84
08A23 2C                        	.db $2C
08A24 2C                        	.db $2C
08A25 2C                        	.db $2C
08A26 2C                        	.db $2C
08A27 88                        	.db $88
08A28 2A                        	.db $2A
08A29 82                        	.db $82
08A2A 2A                        	.db $2A
08A2B 2A                        	.db $2A
08A2C 83                        	.db $83
08A2D 2A                        	.db $2A
08A2E 84                        	.db $84
08A2F 2A                        	.db $2A
08A30 2A                        	.db $2A
08A31 2A                        	.db $2A
08A32 2A                        	.db $2A
08A33                           .include "src/music/segments/ending/ending-4.asm"
08A33                           MusicDataEnding4:
08A33                           MusicDataEnding4_Square2:
08A33 8A                        	.db $8A
08A34 48                        	.db $48
08A35 84                        	.db $84
08A36 7E                        	.db $7E
08A37 48                        	.db $48
08A38 4C                        	.db $4C
08A39 52                        	.db $52
08A3A 8A                        	.db $8A
08A3B 50                        	.db $50
08A3C 88                        	.db $88
08A3D 48                        	.db $48
08A3E 3E                        	.db $3E
08A3F 8A                        	.db $8A
08A40 42                        	.db $42
08A41 84                        	.db $84
08A42 7E                        	.db $7E
08A43 42                        	.db $42
08A44 46                        	.db $46
08A45 48                        	.db $48
08A46 8A                        	.db $8A
08A47 42                        	.db $42
08A48 84                        	.db $84
08A49 7E                        	.db $7E
08A4A 42                        	.db $42
08A4B 46                        	.db $46
08A4C 50                        	.db $50
08A4D 00                        	.db $00
08A4E                           MusicDataEnding3_Noise:
08A4E                           MusicDataEnding4_Noise:
08A4E 88                        	.db $88
08A4F 10                        	.db $10
08A50 82                        	.db $82
08A51 10                        	.db $10
08A52 10                        	.db $10
08A53 83                        	.db $83
08A54 10                        	.db $10
08A55 84                        	.db $84
08A56 10                        	.db $10
08A57 84                        	.db $84
08A58 10                        	.db $10
08A59 10                        	.db $10
08A5A 10                        	.db $10
08A5B 00                        	.db $00
08A5C                           MusicDataEnding4_Square1:
08A5C 8A                        	.db $8A
08A5D 40                        	.db $40
08A5E 84                        	.db $84
08A5F 7E                        	.db $7E
08A60 40                        	.db $40
08A61 40                        	.db $40
08A62 48                        	.db $48
08A63 8A                        	.db $8A
08A64 48                        	.db $48
08A65 88                        	.db $88
08A66 3E                        	.db $3E
08A67 38                        	.db $38
08A68 8A                        	.db $8A
08A69 3A                        	.db $3A
08A6A 84                        	.db $84
08A6B 7E                        	.db $7E
08A6C 3A                        	.db $3A
08A6D 3A                        	.db $3A
08A6E 42                        	.db $42
08A6F 8A                        	.db $8A
08A70 3A                        	.db $3A
08A71 84                        	.db $84
08A72 7E                        	.db $7E
08A73 3A                        	.db $3A
08A74 3A                        	.db $3A
08A75 3A                        	.db $3A
08A76                           MusicDataEnding4_Triangle:
08A76 88                        	.db $88
08A77 28                        	.db $28
08A78 82                        	.db $82
08A79 28                        	.db $28
08A7A 28                        	.db $28
08A7B 83                        	.db $83
08A7C 28                        	.db $28
08A7D 84                        	.db $84
08A7E 28                        	.db $28
08A7F 28                        	.db $28
08A80 28                        	.db $28
08A81 28                        	.db $28
08A82 88                        	.db $88
08A83 26                        	.db $26
08A84 82                        	.db $82
08A85 26                        	.db $26
08A86 26                        	.db $26
08A87 83                        	.db $83
08A88 26                        	.db $26
08A89 84                        	.db $84
08A8A 26                        	.db $26
08A8B 26                        	.db $26
08A8C 26                        	.db $26
08A8D 26                        	.db $26
08A8E 88                        	.db $88
08A8F 34                        	.db $34
08A90 82                        	.db $82
08A91 34                        	.db $34
08A92 34                        	.db $34
08A93 83                        	.db $83
08A94 34                        	.db $34
08A95 84                        	.db $84
08A96 34                        	.db $34
08A97 34                        	.db $34
08A98 34                        	.db $34
08A99 34                        	.db $34
08A9A 88                        	.db $88
08A9B 26                        	.db $26
08A9C 82                        	.db $82
08A9D 26                        	.db $26
08A9E 26                        	.db $26
08A9F 83                        	.db $83
08AA0 26                        	.db $26
08AA1 84                        	.db $84
08AA2 26                        	.db $26
08AA3 26                        	.db $26
08AA4 26                        	.db $26
08AA5 26                        	.db $26
08AA6                           .include "src/music/segments/ending/ending-2.asm"
08AA6                           MusicDataEnding2:
08AA6                           MusicDataEnding2_Square2:
08AA6 8A                        	.db $8A
08AA7 48                        	.db $48
08AA8 84                        	.db $84
08AA9 7E                        	.db $7E
08AAA 46                        	.db $46
08AAB 48                        	.db $48
08AAC 4C                        	.db $4C
08AAD 8A                        	.db $8A
08AAE 48                        	.db $48
08AAF 84                        	.db $84
08AB0 7E                        	.db $7E
08AB1 46                        	.db $46
08AB2 48                        	.db $48
08AB3 4C                        	.db $4C
08AB4 8A                        	.db $8A
08AB5 48                        	.db $48
08AB6 84                        	.db $84
08AB7 7E                        	.db $7E
08AB8 42                        	.db $42
08AB9 48                        	.db $48
08ABA 4C                        	.db $4C
08ABB 8A                        	.db $8A
08ABC 56                        	.db $56
08ABD 7E                        	.db $7E
08ABE 00                        	.db $00
08ABF                           MusicDataEnding2_Noise:
08ABF 88                        	.db $88
08AC0 10                        	.db $10
08AC1 82                        	.db $82
08AC2 10                        	.db $10
08AC3 82                        	.db $82
08AC4 10                        	.db $10
08AC5 83                        	.db $83
08AC6 10                        	.db $10
08AC7 84                        	.db $84
08AC8 10                        	.db $10
08AC9 84                        	.db $84
08ACA 10                        	.db $10
08ACB 84                        	.db $84
08ACC 10                        	.db $10
08ACD 84                        	.db $84
08ACE 10                        	.db $10
08ACF 00                        	.db $00
08AD0                           MusicDataEnding2_Triangle:
08AD0 88                        	.db $88
08AD1 2A                        	.db $2A
08AD2 82                        	.db $82
08AD3 2A                        	.db $2A
08AD4 2A                        	.db $2A
08AD5 83                        	.db $83
08AD6 2A                        	.db $2A
08AD7 84                        	.db $84
08AD8 28                        	.db $28
08AD9 28                        	.db $28
08ADA 28                        	.db $28
08ADB 28                        	.db $28
08ADC 88                        	.db $88
08ADD 26                        	.db $26
08ADE 82                        	.db $82
08ADF 26                        	.db $26
08AE0 26                        	.db $26
08AE1 83                        	.db $83
08AE2 26                        	.db $26
08AE3 84                        	.db $84
08AE4 24                        	.db $24
08AE5 24                        	.db $24
08AE6 24                        	.db $24
08AE7 24                        	.db $24
08AE8 88                        	.db $88
08AE9 22                        	.db $22
08AEA 82                        	.db $82
08AEB 22                        	.db $22
08AEC 22                        	.db $22
08AED 83                        	.db $83
08AEE 22                        	.db $22
08AEF 84                        	.db $84
08AF0 22                        	.db $22
08AF1 22                        	.db $22
08AF2 22                        	.db $22
08AF3 22                        	.db $22
08AF4 88                        	.db $88
08AF5 26                        	.db $26
08AF6 82                        	.db $82
08AF7 26                        	.db $26
08AF8 26                        	.db $26
08AF9 83                        	.db $83
08AFA 26                        	.db $26
08AFB 84                        	.db $84
08AFC 26                        	.db $26
08AFD 26                        	.db $26
08AFE 26                        	.db $26
08AFF 26                        	.db $26
08B00                           MusicDataEnding2_Square1:
08B00 8A                        	.db $8A
08B01 38                        	.db $38
08B02 84                        	.db $84
08B03 7E                        	.db $7E
08B04 3A                        	.db $3A
08B05 3A                        	.db $3A
08B06 3A                        	.db $3A
08B07 8A                        	.db $8A
08B08 38                        	.db $38
08B09 84                        	.db $84
08B0A 7E                        	.db $7E
08B0B 36                        	.db $36
08B0C 36                        	.db $36
08B0D 36                        	.db $36
08B0E 8A                        	.db $8A
08B0F 34                        	.db $34
08B10 84                        	.db $84
08B11 7E                        	.db $7E
08B12 30                        	.db $30
08B13 3A                        	.db $3A
08B14 3A                        	.db $3A
08B15 8A                        	.db $8A
08B16 48                        	.db $48
08B17 46                        	.db $46
08B18                           IFNDEF PROTOTYPE_MUSIC_ENDING
08B18                           	.include "src/music/segments/ending/ending-5.asm"
08B18                           MusicDataEnding5:
08B18                           MusicDataEnding5_Square2:
08B18 8A                        	.db $8A
08B19 48                        	.db $48
08B1A 48                        	.db $48
08B1B 88                        	.db $88
08B1C 48                        	.db $48
08B1D 84                        	.db $84
08B1E 26                        	.db $26
08B1F 26                        	.db $26
08B20 26                        	.db $26
08B21 8A                        	.db $8A
08B22 26                        	.db $26
08B23 7E                        	.db $7E
08B24 8C                        	.db $8C
08B25 7E                        	.db $7E
08B26 88                        	.db $88
08B27 7E                        	.db $7E
08B28 FC                        	.db $FC
08B29 7E                        	.db $7E
08B2A 7E                        	.db $7E
08B2B 00                        	.db $00
08B2C                           MusicDataEnding5_Square1:
08B2C 88                        	.db $88
08B2D 40                        	.db $40
08B2E 82                        	.db $82
08B2F 40                        	.db $40
08B30 40                        	.db $40
08B31 83                        	.db $83
08B32 40                        	.db $40
08B33 88                        	.db $88
08B34 3A                        	.db $3A
08B35 82                        	.db $82
08B36 3A                        	.db $3A
08B37 3A                        	.db $3A
08B38 83                        	.db $83
08B39 3A                        	.db $3A
08B3A 88                        	.db $88
08B3B 38                        	.db $38
08B3C 84                        	.db $84
08B3D 18                        	.db $18
08B3E 18                        	.db $18
08B3F 18                        	.db $18
08B40 88                        	.db $88
08B41 18                        	.db $18
08B42 F4                        	.db $F4
08B43 48                        	.db $48
08B44 56                        	.db $56
08B45 50                        	.db $50
08B46 56                        	.db $56
08B47 46                        	.db $46
08B48 56                        	.db $56
08B49 4C                        	.db $4C
08B4A 56                        	.db $56
08B4B 42                        	.db $42
08B4C 56                        	.db $56
08B4D 50                        	.db $50
08B4E 56                        	.db $56
08B4F 46                        	.db $46
08B50 56                        	.db $56
08B51 4C                        	.db $4C
08B52 56                        	.db $56
08B53 F4                        	.db $F4
08B54 48                        	.db $48
08B55 56                        	.db $56
08B56 50                        	.db $50
08B57 56                        	.db $56
08B58 46                        	.db $46
08B59 56                        	.db $56
08B5A 4C                        	.db $4C
08B5B 56                        	.db $56
08B5C 42                        	.db $42
08B5D 56                        	.db $56
08B5E 50                        	.db $50
08B5F 56                        	.db $56
08B60 46                        	.db $46
08B61 56                        	.db $56
08B62 4C                        	.db $4C
08B63 56                        	.db $56
08B64                           MusicDataEnding5_Triangle:
08B64 88                        	.db $88
08B65 28                        	.db $28
08B66 82                        	.db $82
08B67 28                        	.db $28
08B68 28                        	.db $28
08B69 83                        	.db $83
08B6A 28                        	.db $28
08B6B 88                        	.db $88
08B6C 2C                        	.db $2C
08B6D 82                        	.db $82
08B6E 2C                        	.db $2C
08B6F 2C                        	.db $2C
08B70 83                        	.db $83
08B71 2C                        	.db $2C
08B72 88                        	.db $88
08B73 30                        	.db $30
08B74 84                        	.db $84
08B75 30                        	.db $30
08B76 30                        	.db $30
08B77 30                        	.db $30
08B78 8A                        	.db $8A
08B79 30                        	.db $30
08B7A 7E                        	.db $7E
08B7B 8C                        	.db $8C
08B7C 7E                        	.db $7E
08B7D 7E                        	.db $7E
08B7E 7E                        	.db $7E
08B7F 7E                        	.db $7E
08B80                           MusicDataEnding5_Noise:
08B80 88                        	.db $88
08B81 10                        	.db $10
08B82 82                        	.db $82
08B83 10                        	.db $10
08B84 10                        	.db $10
08B85 83                        	.db $83
08B86 10                        	.db $10
08B87 88                        	.db $88
08B88 10                        	.db $10
08B89 82                        	.db $82
08B8A 10                        	.db $10
08B8B 10                        	.db $10
08B8C 83                        	.db $83
08B8D 10                        	.db $10
08B8E 88                        	.db $88
08B8F 10                        	.db $10
08B90 84                        	.db $84
08B91 10                        	.db $10
08B92 10                        	.db $10
08B93 10                        	.db $10
08B94 8A                        	.db $8A
08B95 10                        	.db $10
08B96 01                        	.db $01
08B97 8C                        	.db $8C
08B98 01                        	.db $01
08B99 01                        	.db $01
08B9A 01                        	.db $01
08B9B 01                        	.db $01
08B9C                           	.include "src/music/segments/ending/ending-6.asm"
08B9C                           IFNDEF PROTOTYPE_MUSIC
08B9C                           MusicDataEnding6:
08B9C                           MusicDataEnding6_Square2:
08B9C F4                        	.db $F4
08B9D 68                        	.db $68
08B9E 6A                        	.db $6A
08B9F 6E                        	.db $6E
08BA0 64                        	.db $64
08BA1 7E                        	.db $7E
08BA2 64                        	.db $64
08BA3 7E                        	.db $7E
08BA4 64                        	.db $64
08BA5 60                        	.db $60
08BA6 64                        	.db $64
08BA7 68                        	.db $68
08BA8 5E                        	.db $5E
08BA9 7E                        	.db $7E
08BAA 5E                        	.db $5E
08BAB 7E                        	.db $7E
08BAC 56                        	.db $56
08BAD 5A                        	.db $5A
08BAE 5E                        	.db $5E
08BAF 60                        	.db $60
08BB0 56                        	.db $56
08BB1 7E                        	.db $7E
08BB2 56                        	.db $56
08BB3 54                        	.db $54
08BB4 56                        	.db $56
08BB5 5A                        	.db $5A
08BB6 5E                        	.db $5E
08BB7 60                        	.db $60
08BB8 5E                        	.db $5E
08BB9 7E                        	.db $7E
08BBA 60                        	.db $60
08BBB 64                        	.db $64
08BBC 7E                        	.db $7E
08BBD 68                        	.db $68
08BBE 6A                        	.db $6A
08BBF 6E                        	.db $6E
08BC0 64                        	.db $64
08BC1 7E                        	.db $7E
08BC2 64                        	.db $64
08BC3 6E                        	.db $6E
08BC4 76                        	.db $76
08BC5 78                        	.db $78
08BC6 7C                        	.db $7C
08BC7 78                        	.db $78
08BC8 76                        	.db $76
08BC9 7E                        	.db $7E
08BCA 72                        	.db $72
08BCB 6E                        	.db $6E
08BCC 6A                        	.db $6A
08BCD 68                        	.db $68
08BCE 6A                        	.db $6A
08BCF 6E                        	.db $6E
08BD0 64                        	.db $64
08BD1 7E                        	.db $7E
08BD2 64                        	.db $64
08BD3 60                        	.db $60
08BD4 5E                        	.db $5E
08BD5 60                        	.db $60
08BD6 7E                        	.db $7E
08BD7 FB                        	.db $FB
08BD8 7E                        	.db $7E
08BD9 F4                        	.db $F4
08BDA 60                        	.db $60
08BDB 64                        	.db $64
08BDC 60                        	.db $60
08BDD 64                        	.db $64
08BDE 7E                        	.db $7E
08BDF 66                        	.db $66
08BE0 6A                        	.db $6A
08BE1 6E                        	.db $6E
08BE2 FC                        	.db $FC
08BE3 7E                        	.db $7E
08BE4 F4                        	.db $F4
08BE5 60                        	.db $60
08BE6 64                        	.db $64
08BE7 60                        	.db $60
08BE8 64                        	.db $64
08BE9 7E                        	.db $7E
08BEA 66                        	.db $66
08BEB 7E                        	.db $7E
08BEC 6A                        	.db $6A
08BED 6E                        	.db $6E
08BEE 7E                        	.db $7E
08BEF FB                        	.db $FB
08BF0 7E                        	.db $7E
08BF1 F4                        	.db $F4
08BF2 60                        	.db $60
08BF3 64                        	.db $64
08BF4 60                        	.db $60
08BF5 64                        	.db $64
08BF6 7E                        	.db $7E
08BF7 66                        	.db $66
08BF8 6A                        	.db $6A
08BF9 6E                        	.db $6E
08BFA 7E                        	.db $7E
08BFB 68                        	.db $68
08BFC 60                        	.db $60
08BFD 56                        	.db $56
08BFE FA                        	.db $FA
08BFF 7E                        	.db $7E
08C00 F4                        	.db $F4
08C01 60                        	.db $60
08C02 64                        	.db $64
08C03 60                        	.db $60
08C04 64                        	.db $64
08C05 7E                        	.db $7E
08C06 5A                        	.db $5A
08C07 5E                        	.db $5E
08C08 60                        	.db $60
08C09 64                        	.db $64
08C0A 7E                        	.db $7E
08C0B 8B                        	.db $8B
08C0C 7E                        	.db $7E
08C0D 00                        	.db $00
08C0E                           MusicDataEnding6_Square1:
08C0E F4                        	.db $F4
08C0F 48                        	.db $48
08C10 56                        	.db $56
08C11 50                        	.db $50
08C12 56                        	.db $56
08C13 46                        	.db $46
08C14 56                        	.db $56
08C15 4C                        	.db $4C
08C16 56                        	.db $56
08C17 42                        	.db $42
08C18 56                        	.db $56
08C19 50                        	.db $50
08C1A 56                        	.db $56
08C1B 3E                        	.db $3E
08C1C 56                        	.db $56
08C1D 4C                        	.db $4C
08C1E 56                        	.db $56
08C1F 3A                        	.db $3A
08C20 52                        	.db $52
08C21 48                        	.db $48
08C22 52                        	.db $52
08C23 38                        	.db $38
08C24 50                        	.db $50
08C25 46                        	.db $46
08C26 50                        	.db $50
08C27 34                        	.db $34
08C28 4C                        	.db $4C
08C29 42                        	.db $42
08C2A 4C                        	.db $4C
08C2B 3E                        	.db $3E
08C2C 52                        	.db $52
08C2D 46                        	.db $46
08C2E 52                        	.db $52
08C2F 48                        	.db $48
08C30 56                        	.db $56
08C31 50                        	.db $50
08C32 56                        	.db $56
08C33 46                        	.db $46
08C34 56                        	.db $56
08C35 4C                        	.db $4C
08C36 56                        	.db $56
08C37 44                        	.db $44
08C38 52                        	.db $52
08C39 4C                        	.db $4C
08C3A 52                        	.db $52
08C3B 42                        	.db $42
08C3C 52                        	.db $52
08C3D 48                        	.db $48
08C3E 52                        	.db $52
08C3F 3E                        	.db $3E
08C40 50                        	.db $50
08C41 48                        	.db $48
08C42 50                        	.db $50
08C43 3E                        	.db $3E
08C44 4C                        	.db $4C
08C45 46                        	.db $46
08C46 4C                        	.db $4C
08C47 48                        	.db $48
08C48 56                        	.db $56
08C49 50                        	.db $50
08C4A 56                        	.db $56
08C4B 48                        	.db $48
08C4C 56                        	.db $56
08C4D 50                        	.db $50
08C4E 56                        	.db $56
08C4F 40                        	.db $40
08C50 4E                        	.db $4E
08C51 48                        	.db $48
08C52 4E                        	.db $4E
08C53 40                        	.db $40
08C54 4E                        	.db $4E
08C55 48                        	.db $48
08C56 4E                        	.db $4E
08C57 3E                        	.db $3E
08C58 50                        	.db $50
08C59 48                        	.db $48
08C5A 50                        	.db $50
08C5B 3E                        	.db $3E
08C5C 50                        	.db $50
08C5D 48                        	.db $48
08C5E 50                        	.db $50
08C5F 40                        	.db $40
08C60 4E                        	.db $4E
08C61 48                        	.db $48
08C62 4E                        	.db $4E
08C63 40                        	.db $40
08C64 4E                        	.db $4E
08C65 48                        	.db $48
08C66 4E                        	.db $4E
08C67 3E                        	.db $3E
08C68 50                        	.db $50
08C69 48                        	.db $48
08C6A 50                        	.db $50
08C6B 3E                        	.db $3E
08C6C 50                        	.db $50
08C6D 48                        	.db $48
08C6E 50                        	.db $50
08C6F 40                        	.db $40
08C70 4E                        	.db $4E
08C71 48                        	.db $48
08C72 4E                        	.db $4E
08C73 40                        	.db $40
08C74 4E                        	.db $4E
08C75 48                        	.db $48
08C76 4E                        	.db $4E
08C77 3E                        	.db $3E
08C78 50                        	.db $50
08C79 48                        	.db $48
08C7A 50                        	.db $50
08C7B 3E                        	.db $3E
08C7C 50                        	.db $50
08C7D 48                        	.db $48
08C7E 50                        	.db $50
08C7F 3C                        	.db $3C
08C80 4C                        	.db $4C
08C81 48                        	.db $48
08C82 4C                        	.db $4C
08C83 3C                        	.db $3C
08C84 4C                        	.db $4C
08C85 48                        	.db $48
08C86 4C                        	.db $4C
08C87 3E                        	.db $3E
08C88 4C                        	.db $4C
08C89 46                        	.db $46
08C8A 4C                        	.db $4C
08C8B 3E                        	.db $3E
08C8C 52                        	.db $52
08C8D 4C                        	.db $4C
08C8E 5E                        	.db $5E
08C8F                           ENDIF
08C8F                           ELSE
08C8F                           	.include "src/music/segments/ending/ending-5-prototype.asm"
08C8F                           ENDIF
08C8F                           
08C8F                           ;
08C8F                           ; Starman music
08C8F                           ;
08C8F                           IFNDEF PROTOTYPE_MUSIC_STARMAN
08C8F                           	.include "src/music/segments/star/star.asm"
08C8F                           MusicDataStar:
08C8F                           MusicDataStar_Square2:
08C8F 98                        	.db $98
08C90 48                        	.db $48
08C91 48                        	.db $48
08C92 48                        	.db $48
08C93 94                        	.db $94
08C94 7E                        	.db $7E
08C95 48                        	.db $48
08C96 7E                        	.db $7E
08C97 99                        	.db $99
08C98 48                        	.db $48
08C99 98                        	.db $98
08C9A 48                        	.db $48
08C9B 48                        	.db $48
08C9C 46                        	.db $46
08C9D 46                        	.db $46
08C9E 46                        	.db $46
08C9F 94                        	.db $94
08CA0 7E                        	.db $7E
08CA1 46                        	.db $46
08CA2 7E                        	.db $7E
08CA3 99                        	.db $99
08CA4 46                        	.db $46
08CA5 98                        	.db $98
08CA6 46                        	.db $46
08CA7 46                        	.db $46
08CA8 00                        	.db $00
08CA9                           
08CA9                           MusicDataStar_Square1:
08CA9 98                        	.db $98
08CAA 3A                        	.db $3A
08CAB 3A                        	.db $3A
08CAC 3A                        	.db $3A
08CAD 94                        	.db $94
08CAE 34                        	.db $34
08CAF 98                        	.db $98
08CB0 3A                        	.db $3A
08CB1 3A                        	.db $3A
08CB2 94                        	.db $94
08CB3 34                        	.db $34
08CB4 3A                        	.db $3A
08CB5 34                        	.db $34
08CB6 98                        	.db $98
08CB7 3A                        	.db $3A
08CB8 38                        	.db $38
08CB9 38                        	.db $38
08CBA 38                        	.db $38
08CBB 94                        	.db $94
08CBC 30                        	.db $30
08CBD 98                        	.db $98
08CBE 38                        	.db $38
08CBF 38                        	.db $38
08CC0 94                        	.db $94
08CC1 30                        	.db $30
08CC2 38                        	.db $38
08CC3 30                        	.db $30
08CC4 98                        	.db $98
08CC5 38                        	.db $38
08CC6                           
08CC6                           MusicDataStar_Triangle:
08CC6 9A                        	.db $9A
08CC7 34                        	.db $34
08CC8 99                        	.db $99
08CC9 42                        	.db $42
08CCA 4C                        	.db $4C
08CCB 98                        	.db $98
08CCC 7E                        	.db $7E
08CCD 42                        	.db $42
08CCE 4C                        	.db $4C
08CCF 9A                        	.db $9A
08CD0 30                        	.db $30
08CD1 99                        	.db $99
08CD2 3E                        	.db $3E
08CD3 48                        	.db $48
08CD4 98                        	.db $98
08CD5 7E                        	.db $7E
08CD6 3E                        	.db $3E
08CD7 48                        	.db $48
08CD8                           
08CD8                           MusicDataStar_DPCM:
08CD8                           IFNDEF EXPAND_MUSIC
08CD8 94 01                     	.db $94, $01
08CDA 98 10                     	.db $98, $10
08CDC 94 10 10 10 01 01         	.db $94, $10, $10, $10, $01, $01
08CE2 00                        	.db $00
08CE3                           ELSE
08CE3                           	.db $94, $02
08CE3                           	.db $98, $06
08CE3                           	.db $94, $06, $06, $06, $02, $02
08CE3                           	.db $00
08CE3                           ENDIF
08CE3                           ELSE
08CE3                           	.include "src/music/segments/star/star-prototype.asm"
08CE3                           ENDIF
08CE3                           
08CE3                           ;
08CE3                           ; Underground music
08CE3                           ; (including prototype version)
08CE3                           ;
08CE3                           IFNDEF PROTOTYPE_MUSIC_UNDERGROUND
08CE3                           	.include "src/music/segments/underground/underground.asm"
08CE3                           MusicDataUnderground:
08CE3                           MusicDataUnderground_Square2:
08CE3 A4                        	.db $A4
08CE4 0A                        	.db $0A
08CE5 18                        	.db $18
08CE6 22                        	.db $22
08CE7 84                        	.db $84
08CE8 40                        	.db $40
08CE9 7E                        	.db $7E
08CEA 89                        	.db $89
08CEB 42                        	.db $42
08CEC A4                        	.db $A4
08CED 0A                        	.db $0A
08CEE 18                        	.db $18
08CEF 22                        	.db $22
08CF0 84                        	.db $84
08CF1 40                        	.db $40
08CF2 7E                        	.db $7E
08CF3 89                        	.db $89
08CF4 3E                        	.db $3E
08CF5 B8                        	.db $B8
08CF6 7E                        	.db $7E
08CF7 B9                        	.db $B9
08CF8 48                        	.db $48
08CF9 44                        	.db $44
08CFA B8                        	.db $B8
08CFB 3A                        	.db $3A
08CFC B9                        	.db $B9
08CFD 40                        	.db $40
08CFE B8                        	.db $B8
08CFF 44                        	.db $44
08D00 B4                        	.db $B4
08D01 36                        	.db $36
08D02 B8                        	.db $B8
08D03 3A                        	.db $3A
08D04 B9                        	.db $B9
08D05 30                        	.db $30
08D06 B9                        	.db $B9
08D07 34                        	.db $34
08D08 BB                        	.db $BB
08D09 36                        	.db $36
08D0A B8                        	.db $B8
08D0B 7E                        	.db $7E
08D0C 00                        	.db $00
08D0D                           
08D0D                           MusicDataUnderground_Square1:
08D0D B4                        	.db $B4
08D0E 0A                        	.db $0A
08D0F 18                        	.db $18
08D10 22                        	.db $22
08D11 84                        	.db $84
08D12 36                        	.db $36
08D13 7E                        	.db $7E
08D14 89                        	.db $89
08D15 38                        	.db $38
08D16 B4                        	.db $B4
08D17 0A                        	.db $0A
08D18 18                        	.db $18
08D19 22                        	.db $22
08D1A 84                        	.db $84
08D1B 36                        	.db $36
08D1C 7E                        	.db $7E
08D1D 89                        	.db $89
08D1E 34                        	.db $34
08D1F B8                        	.db $B8
08D20 7E                        	.db $7E
08D21 B9                        	.db $B9
08D22 3A                        	.db $3A
08D23 36                        	.db $36
08D24 B8                        	.db $B8
08D25 30                        	.db $30
08D26 B9                        	.db $B9
08D27 36                        	.db $36
08D28 B8                        	.db $B8
08D29 3A                        	.db $3A
08D2A B4                        	.db $B4
08D2B 2C                        	.db $2C
08D2C B8                        	.db $B8
08D2D 30                        	.db $30
08D2E B9                        	.db $B9
08D2F 22                        	.db $22
08D30 B9                        	.db $B9
08D31 26                        	.db $26
08D32 BB                        	.db $BB
08D33 28                        	.db $28
08D34 B8                        	.db $B8
08D35 7E                        	.db $7E
08D36                           
08D36                           MusicDataUnderground_Triangle:
08D36 84                        	.db $84
08D37 22                        	.db $22
08D38 30                        	.db $30
08D39 3A                        	.db $3A
08D3A 42                        	.db $42
08D3B 7E                        	.db $7E
08D3C 44                        	.db $44
08D3D 3A                        	.db $3A
08D3E 30                        	.db $30
08D3F 22                        	.db $22
08D40 30                        	.db $30
08D41 3A                        	.db $3A
08D42 42                        	.db $42
08D43 7E                        	.db $7E
08D44 40                        	.db $40
08D45 3A                        	.db $3A
08D46 30                        	.db $30
08D47 22                        	.db $22
08D48 30                        	.db $30
08D49 3A                        	.db $3A
08D4A 30                        	.db $30
08D4B 7E                        	.db $7E
08D4C 40                        	.db $40
08D4D 3A                        	.db $3A
08D4E 30                        	.db $30
08D4F 22                        	.db $22
08D50 30                        	.db $30
08D51 3A                        	.db $3A
08D52 30                        	.db $30
08D53 7E                        	.db $7E
08D54 40                        	.db $40
08D55 3A                        	.db $3A
08D56 30                        	.db $30
08D57 22                        	.db $22
08D58 30                        	.db $30
08D59 3A                        	.db $3A
08D5A 30                        	.db $30
08D5B 7E                        	.db $7E
08D5C 40                        	.db $40
08D5D 3A                        	.db $3A
08D5E 30                        	.db $30
08D5F 22                        	.db $22
08D60 30                        	.db $30
08D61 3A                        	.db $3A
08D62 30                        	.db $30
08D63 7E                        	.db $7E
08D64 40                        	.db $40
08D65 3A                        	.db $3A
08D66 30                        	.db $30
08D67                           
08D67                           MusicDataUnderground_DPCM:
08D67                           IFNDEF EXPAND_MUSIC
08D67 85 01                     	.db $85, $01
08D69 8D 10                     	.db $8D, $10
08D6B 8E 10                     	.db $8E, $10
08D6D 84 10                     	.db $84, $10
08D6F 88 10                     	.db $88, $10
08D71 84 01 01 01               	.db $84, $01, $01, $01
08D75 00                        	.db $00
08D76                           ELSE
08D76                           	.db $85, $02
08D76                           	.db $8D, $06
08D76                           	.db $8E, $06
08D76                           	.db $84, $06
08D76                           	.db $88, $06
08D76                           	.db $84, $02, $02, $02
08D76                           	.db $00
08D76                           ENDIF
08D76                           ELSE
08D76                           	.include "src/music/segments/underground/underground-prototype.asm"
08D76                           ENDIF
08D76                           
08D76                           ;
08D76                           ; Subspace music
08D76                           ; Segments 1 and 2 share the same noise track,
08D76                           ; as do segments 3 and 4 (defined in 2 and 4)
08D76                           ;
08D76                           .include "src/music/segments/subspace/subspace-1.asm"
08D76                           MusicDataSubspace1:
08D76                           MusicDataSubspace1_Square2:
08D76 99                        	.db $99
08D77 48                        	.db $48
08D78 3E                        	.db $3E
08D79 38                        	.db $38
08D7A 98                        	.db $98
08D7B 42                        	.db $42
08D7C 46                        	.db $46
08D7D 94                        	.db $94
08D7E 44                        	.db $44
08D7F 42                        	.db $42
08D80 7E                        	.db $7E
08D81 96                        	.db $96
08D82 3E                        	.db $3E
08D83 50                        	.db $50
08D84 56                        	.db $56
08D85 94                        	.db $94
08D86 5A                        	.db $5A
08D87 7E                        	.db $7E
08D88 52                        	.db $52
08D89 98                        	.db $98
08D8A 56                        	.db $56
08D8B 50                        	.db $50
08D8C 94                        	.db $94
08D8D 48                        	.db $48
08D8E 4C                        	.db $4C
08D8F 99                        	.db $99
08D90 46                        	.db $46
08D91 00                        	.db $00
08D92                           MusicDataSubspace1_Square1:
08D92 99                        	.db $99
08D93 38                        	.db $38
08D94 30                        	.db $30
08D95 26                        	.db $26
08D96 98                        	.db $98
08D97 30                        	.db $30
08D98 34                        	.db $34
08D99 94                        	.db $94
08D9A 32                        	.db $32
08D9B 98                        	.db $98
08D9C 30                        	.db $30
08D9D 96                        	.db $96
08D9E 30                        	.db $30
08D9F 3E                        	.db $3E
08DA0 46                        	.db $46
08DA1 98                        	.db $98
08DA2 48                        	.db $48
08DA3 94                        	.db $94
08DA4 42                        	.db $42
08DA5 98                        	.db $98
08DA6 46                        	.db $46
08DA7 98                        	.db $98
08DA8 42                        	.db $42
08DA9 94                        	.db $94
08DAA 38                        	.db $38
08DAB 3A                        	.db $3A
08DAC 99                        	.db $99
08DAD 34                        	.db $34
08DAE                           MusicDataSubspace1_Triangle:
08DAE 99                        	.db $99
08DAF 3E                        	.db $3E
08DB0 38                        	.db $38
08DB1 30                        	.db $30
08DB2 98                        	.db $98
08DB3 3A                        	.db $3A
08DB4 3E                        	.db $3E
08DB5 94                        	.db $94
08DB6 3C                        	.db $3C
08DB7 3A                        	.db $3A
08DB8 7E                        	.db $7E
08DB9 96                        	.db $96
08DBA 38                        	.db $38
08DBB 48                        	.db $48
08DBC 50                        	.db $50
08DBD 94                        	.db $94
08DBE 52                        	.db $52
08DBF 7E                        	.db $7E
08DC0 4C                        	.db $4C
08DC1 50                        	.db $50
08DC2 7E                        	.db $7E
08DC3 48                        	.db $48
08DC4 7E                        	.db $7E
08DC5 42                        	.db $42
08DC6 46                        	.db $46
08DC7 99                        	.db $99
08DC8 3E                        	.db $3E
08DC9                           .include "src/music/segments/subspace/subspace-2.asm"
08DC9                           MusicDataSubspace2:
08DC9                           MusicDataSubspace2_Square2:
08DC9 98                        	.db $98
08DCA 7E                        	.db $7E
08DCB 94                        	.db $94
08DCC 56                        	.db $56
08DCD 54                        	.db $54
08DCE 52                        	.db $52
08DCF 4E                        	.db $4E
08DD0 7E                        	.db $7E
08DD1 50                        	.db $50
08DD2 7E                        	.db $7E
08DD3 40                        	.db $40
08DD4 42                        	.db $42
08DD5 48                        	.db $48
08DD6 7E                        	.db $7E
08DD7 42                        	.db $42
08DD8 48                        	.db $48
08DD9 4C                        	.db $4C
08DDA 00                        	.db $00
08DDB                           MusicDataSubspace2_Square1:
08DDB 98                        	.db $98
08DDC 7E                        	.db $7E
08DDD 94                        	.db $94
08DDE 50                        	.db $50
08DDF 4E                        	.db $4E
08DE0 4C                        	.db $4C
08DE1 98                        	.db $98
08DE2 46                        	.db $46
08DE3 94                        	.db $94
08DE4 48                        	.db $48
08DE5 7E                        	.db $7E
08DE6 38                        	.db $38
08DE7 3A                        	.db $3A
08DE8 3E                        	.db $3E
08DE9 7E                        	.db $7E
08DEA 30                        	.db $30
08DEB 38                        	.db $38
08DEC 3A                        	.db $3A
08DED                           MusicDataSubspace2_Triangle:
08DED 99                        	.db $99
08DEE 30                        	.db $30
08DEF 3E                        	.db $3E
08DF0 98                        	.db $98
08DF1 48                        	.db $48
08DF2 99                        	.db $99
08DF3 3A                        	.db $3A
08DF4 94                        	.db $94
08DF5 48                        	.db $48
08DF6 98                        	.db $98
08DF7 48                        	.db $48
08DF8 3A                        	.db $3A
08DF9                           MusicDataSubspace1_Noise:
08DF9                           MusicDataSubspace2_Noise:
08DF9 98                        	.db $98
08DFA 04                        	.db $04
08DFB 92                        	.db $92
08DFC 02                        	.db $02
08DFD 01                        	.db $01
08DFE 02                        	.db $02
08DFF 98                        	.db $98
08E00 06                        	.db $06
08E01 92                        	.db $92
08E02 02                        	.db $02
08E03 01                        	.db $01
08E04 02                        	.db $02
08E05 00                        	.db $00
08E06                           .include "src/music/segments/subspace/subspace-3.asm"
08E06                           MusicDataSubspace3:
08E06                           MusicDataSubspace3_Square2:
08E06 98                        	.db $98
08E07 7E                        	.db $7E
08E08 94                        	.db $94
08E09 56                        	.db $56
08E0A 54                        	.db $54
08E0B 52                        	.db $52
08E0C 4E                        	.db $4E
08E0D 7E                        	.db $7E
08E0E 50                        	.db $50
08E0F 7E                        	.db $7E
08E10 60                        	.db $60
08E11 7E                        	.db $7E
08E12 60                        	.db $60
08E13 9A                        	.db $9A
08E14 60                        	.db $60
08E15 00                        	.db $00
08E16                           MusicDataSubspace3_Square1:
08E16 98                        	.db $98
08E17 7E                        	.db $7E
08E18 94                        	.db $94
08E19 50                        	.db $50
08E1A 4E                        	.db $4E
08E1B 4C                        	.db $4C
08E1C 98                        	.db $98
08E1D 46                        	.db $46
08E1E 94                        	.db $94
08E1F 48                        	.db $48
08E20 7E                        	.db $7E
08E21 98                        	.db $98
08E22 52                        	.db $52
08E23 94                        	.db $94
08E24 52                        	.db $52
08E25 52                        	.db $52
08E26 99                        	.db $99
08E27 7E                        	.db $7E
08E28                           MusicDataSubspace3_Triangle:
08E28 99                        	.db $99
08E29 30                        	.db $30
08E2A 38                        	.db $38
08E2B 94                        	.db $94
08E2C 3E                        	.db $3E
08E2D 98                        	.db $98
08E2E 48                        	.db $48
08E2F 6E                        	.db $6E
08E30 94                        	.db $94
08E31 6E                        	.db $6E
08E32 98                        	.db $98
08E33 6E                        	.db $6E
08E34 3E                        	.db $3E
08E35                           .include "src/music/segments/subspace/subspace-4.asm"
08E35                           MusicDataSubspace4:
08E35                           MusicDataSubspace4_Square2:
08E35 98                        	.db $98
08E36 7E                        	.db $7E
08E37 99                        	.db $99
08E38 4E                        	.db $4E
08E39 99                        	.db $99
08E3A 4C                        	.db $4C
08E3B 9A                        	.db $9A
08E3C 48                        	.db $48
08E3D 7E                        	.db $7E
08E3E 00                        	.db $00
08E3F                           MusicDataSubspace4_Square1:
08E3F 98                        	.db $98
08E40 7E                        	.db $7E
08E41 94                        	.db $94
08E42 40                        	.db $40
08E43 98                        	.db $98
08E44 7E                        	.db $7E
08E45 94                        	.db $94
08E46 3A                        	.db $3A
08E47 98                        	.db $98
08E48 7E                        	.db $7E
08E49 9A                        	.db $9A
08E4A 38                        	.db $38
08E4B 7E                        	.db $7E
08E4C                           MusicDataSubspace4_Triangle:
08E4C 98                        	.db $98
08E4D 30                        	.db $30
08E4E 99                        	.db $99
08E4F 40                        	.db $40
08E50 44                        	.db $44
08E51 48                        	.db $48
08E52 94                        	.db $94
08E53 3E                        	.db $3E
08E54 98                        	.db $98
08E55 3E                        	.db $3E
08E56 30                        	.db $30
08E57                           MusicDataSubspace3_Noise:
08E57                           MusicDataSubspace4_Noise:
08E57 98                        	.db $98
08E58 04                        	.db $04
08E59 92                        	.db $92
08E5A 02                        	.db $02
08E5B 01                        	.db $01
08E5C 02                        	.db $02
08E5D 98                        	.db $98
08E5E 06                        	.db $06
08E5F 92                        	.db $92
08E60 02                        	.db $02
08E61 01                        	.db $01
08E62 02                        	.db $02
08E63 00                        	.db $00
08E64                           
08E64                           ;
08E64                           ; Title screen music
08E64                           ;
08E64                           .include "src/music/segments/title/title-1.asm"
08E64                           MusicDataTitleScreen1:
08E64                           MusicDataTitleScreen1_Square2:
08E64 E4                        	.db $E4
08E65 6E                        	.db $6E
08E66 E8                        	.db $E8
08E67 6A                        	.db $6A
08E68 E4                        	.db $E4
08E69 64                        	.db $64
08E6A E8                        	.db $E8
08E6B 5E                        	.db $5E
08E6C E4                        	.db $E4
08E6D 56                        	.db $56
08E6E E8                        	.db $E8
08E6F 52                        	.db $52
08E70 E4                        	.db $E4
08E71 4C                        	.db $4C
08E72 E8                        	.db $E8
08E73 46                        	.db $46
08E74 E4                        	.db $E4
08E75 3E                        	.db $3E
08E76 E8                        	.db $E8
08E77 3C                        	.db $3C
08E78 E4                        	.db $E4
08E79 3A                        	.db $3A
08E7A 34                        	.db $34
08E7B 2E                        	.db $2E
08E7C E8                        	.db $E8
08E7D 26                        	.db $26
08E7E 7E                        	.db $7E
08E7F 3E                        	.db $3E
08E80 E8                        	.db $E8
08E81 56                        	.db $56
08E82 7E                        	.db $7E
08E83 E9                        	.db $E9
08E84 3E                        	.db $3E
08E85 00                        	.db $00
08E86                           MusicDataTitleScreen1_Square1:
08E86 E4                        	.db $E4
08E87 56                        	.db $56
08E88 E8                        	.db $E8
08E89 52                        	.db $52
08E8A E4                        	.db $E4
08E8B 4C                        	.db $4C
08E8C E8                        	.db $E8
08E8D 46                        	.db $46
08E8E E4                        	.db $E4
08E8F 3E                        	.db $3E
08E90 E8                        	.db $E8
08E91 3A                        	.db $3A
08E92 E4                        	.db $E4
08E93 34                        	.db $34
08E94 E8                        	.db $E8
08E95 2E                        	.db $2E
08E96 E4                        	.db $E4
08E97 26                        	.db $26
08E98 E8                        	.db $E8
08E99 24                        	.db $24
08E9A E4                        	.db $E4
08E9B 22                        	.db $22
08E9C 1C                        	.db $1C
08E9D 16                        	.db $16
08E9E E8                        	.db $E8
08E9F 0E                        	.db $0E
08EA0 7E                        	.db $7E
08EA1 26                        	.db $26
08EA2 E8                        	.db $E8
08EA3 46                        	.db $46
08EA4 7E                        	.db $7E
08EA5 E9                        	.db $E9
08EA6 3E                        	.db $3E
08EA7                           MusicDataTitleScreen1_Triangle:
08EA7 EB                        	.db $EB
08EA8 7E                        	.db $7E
08EA9 7E                        	.db $7E
08EAA E4                        	.db $E4
08EAB 3E                        	.db $3E
08EAC E8                        	.db $E8
08EAD 3C                        	.db $3C
08EAE E4                        	.db $E4
08EAF 3A                        	.db $3A
08EB0 34                        	.db $34
08EB1 2E                        	.db $2E
08EB2 E8                        	.db $E8
08EB3 3E                        	.db $3E
08EB4 7E                        	.db $7E
08EB5 7E                        	.db $7E
08EB6 E8                        	.db $E8
08EB7 4C                        	.db $4C
08EB8 7E                        	.db $7E
08EB9 89                        	.db $89
08EBA 7E                        	.db $7E
08EBB                           MusicDataTitleScreen1_Noise:
08EBB E8                        	.db $E8
08EBC 10                        	.db $10
08EBD 02                        	.db $02
08EBE 06                        	.db $06
08EBF 10                        	.db $10
08EC0 02                        	.db $02
08EC1 06                        	.db $06
08EC2 10                        	.db $10
08EC3 02                        	.db $02
08EC4 06                        	.db $06
08EC5 10                        	.db $10
08EC6 01                        	.db $01
08EC7 10                        	.db $10
08EC8 10                        	.db $10
08EC9 01                        	.db $01
08ECA 01                        	.db $01
08ECB EA                        	.db $EA
08ECC 01                        	.db $01
08ECD                           .include "src/music/segments/title/title-2.asm"
08ECD                           MusicDataTitleScreen2:
08ECD                           MusicDataTitleScreen2_Square2:
08ECD E4                        	.db $E4
08ECE 50                        	.db $50
08ECF 3E                        	.db $3E
08ED0 48                        	.db $48
08ED1 50                        	.db $50
08ED2 7E                        	.db $7E
08ED3 3E                        	.db $3E
08ED4 4E                        	.db $4E
08ED5 3E                        	.db $3E
08ED6 46                        	.db $46
08ED7 4E                        	.db $4E
08ED8 7E                        	.db $7E
08ED9 3E                        	.db $3E
08EDA EB                        	.db $EB
08EDB 50                        	.db $50
08EDC E4                        	.db $E4
08EDD 7E                        	.db $7E
08EDE 7E                        	.db $7E
08EDF 42                        	.db $42
08EE0 46                        	.db $46
08EE1 48                        	.db $48
08EE2 4C                        	.db $4C
08EE3 50                        	.db $50
08EE4 3E                        	.db $3E
08EE5 48                        	.db $48
08EE6 50                        	.db $50
08EE7 7E                        	.db $7E
08EE8 3E                        	.db $3E
08EE9 4E                        	.db $4E
08EEA 3E                        	.db $3E
08EEB 46                        	.db $46
08EEC 52                        	.db $52
08EED 7E                        	.db $7E
08EEE 3E                        	.db $3E
08EEF E9                        	.db $E9
08EF0 50                        	.db $50
08EF1 E4                        	.db $E4
08EF2 26                        	.db $26
08EF3 2A                        	.db $2A
08EF4 26                        	.db $26
08EF5 E8                        	.db $E8
08EF6 2E                        	.db $2E
08EF7 2A                        	.db $2A
08EF8 26                        	.db $26
08EF9 E4                        	.db $E4
08EFA 4C                        	.db $4C
08EFB 3E                        	.db $3E
08EFC 46                        	.db $46
08EFD 4C                        	.db $4C
08EFE 7E                        	.db $7E
08EFF 3E                        	.db $3E
08F00 4A                        	.db $4A
08F01 3E                        	.db $3E
08F02 44                        	.db $44
08F03 4A                        	.db $4A
08F04 7E                        	.db $7E
08F05 3E                        	.db $3E
08F06 EB                        	.db $EB
08F07 4C                        	.db $4C
08F08 E4                        	.db $E4
08F09 7E                        	.db $7E
08F0A 7E                        	.db $7E
08F0B 42                        	.db $42
08F0C 46                        	.db $46
08F0D 48                        	.db $48
08F0E 4A                        	.db $4A
08F0F 4C                        	.db $4C
08F10 3E                        	.db $3E
08F11 46                        	.db $46
08F12 4C                        	.db $4C
08F13 7E                        	.db $7E
08F14 3E                        	.db $3E
08F15 46                        	.db $46
08F16 3E                        	.db $3E
08F17 46                        	.db $46
08F18 52                        	.db $52
08F19 7E                        	.db $7E
08F1A 46                        	.db $46
08F1B E9                        	.db $E9
08F1C 50                        	.db $50
08F1D E4                        	.db $E4
08F1E 26                        	.db $26
08F1F 2A                        	.db $2A
08F20 26                        	.db $26
08F21 E8                        	.db $E8
08F22 2E                        	.db $2E
08F23 30                        	.db $30
08F24 34                        	.db $34
08F25 00                        	.db $00
08F26                           MusicDataTitleScreen2_Noise:
08F26 B8                        	.db $B8
08F27 02                        	.db $02
08F28 10                        	.db $10
08F29 10                        	.db $10
08F2A 02                        	.db $02
08F2B B4                        	.db $B4
08F2C 10                        	.db $10
08F2D 10                        	.db $10
08F2E B8                        	.db $B8
08F2F 10                        	.db $10
08F30 00                        	.db $00
08F31                           MusicDataTitleScreen2_Square1:
08F31 E4                        	.db $E4
08F32 38                        	.db $38
08F33 3E                        	.db $3E
08F34 48                        	.db $48
08F35 38                        	.db $38
08F36 7E                        	.db $7E
08F37 3E                        	.db $3E
08F38 36                        	.db $36
08F39 3E                        	.db $3E
08F3A 46                        	.db $46
08F3B 36                        	.db $36
08F3C 7E                        	.db $7E
08F3D 3E                        	.db $3E
08F3E EB                        	.db $EB
08F3F 38                        	.db $38
08F40 E4                        	.db $E4
08F41 7E                        	.db $7E
08F42 7E                        	.db $7E
08F43 42                        	.db $42
08F44 46                        	.db $46
08F45 48                        	.db $48
08F46 4C                        	.db $4C
08F47 38                        	.db $38
08F48 3E                        	.db $3E
08F49 48                        	.db $48
08F4A 38                        	.db $38
08F4B 7E                        	.db $7E
08F4C 3E                        	.db $3E
08F4D 36                        	.db $36
08F4E 3E                        	.db $3E
08F4F 46                        	.db $46
08F50 3A                        	.db $3A
08F51 7E                        	.db $7E
08F52 3E                        	.db $3E
08F53 E9                        	.db $E9
08F54 48                        	.db $48
08F55 E4                        	.db $E4
08F56 26                        	.db $26
08F57 2A                        	.db $2A
08F58 26                        	.db $26
08F59 E8                        	.db $E8
08F5A 2E                        	.db $2E
08F5B 2A                        	.db $2A
08F5C 26                        	.db $26
08F5D E4                        	.db $E4
08F5E 34                        	.db $34
08F5F 3E                        	.db $3E
08F60 46                        	.db $46
08F61 34                        	.db $34
08F62 7E                        	.db $7E
08F63 3E                        	.db $3E
08F64 32                        	.db $32
08F65 3E                        	.db $3E
08F66 44                        	.db $44
08F67 32                        	.db $32
08F68 7E                        	.db $7E
08F69 3E                        	.db $3E
08F6A EB                        	.db $EB
08F6B 34                        	.db $34
08F6C E4                        	.db $E4
08F6D 7E                        	.db $7E
08F6E 7E                        	.db $7E
08F6F 42                        	.db $42
08F70 46                        	.db $46
08F71 48                        	.db $48
08F72 4A                        	.db $4A
08F73 34                        	.db $34
08F74 3E                        	.db $3E
08F75 46                        	.db $46
08F76 34                        	.db $34
08F77 7E                        	.db $7E
08F78 3E                        	.db $3E
08F79 2E                        	.db $2E
08F7A 3E                        	.db $3E
08F7B 46                        	.db $46
08F7C 3A                        	.db $3A
08F7D 7E                        	.db $7E
08F7E 46                        	.db $46
08F7F E9                        	.db $E9
08F80 48                        	.db $48
08F81 E4                        	.db $E4
08F82 26                        	.db $26
08F83 2A                        	.db $2A
08F84 26                        	.db $26
08F85 E8                        	.db $E8
08F86 2E                        	.db $2E
08F87 30                        	.db $30
08F88 34                        	.db $34
08F89                           MusicDataTitleScreen2_Triangle:
08F89 88                        	.db $88
08F8A 48                        	.db $48
08F8B 56                        	.db $56
08F8C 56                        	.db $56
08F8D 46                        	.db $46
08F8E 56                        	.db $56
08F8F 56                        	.db $56
08F90 48                        	.db $48
08F91 56                        	.db $56
08F92 56                        	.db $56
08F93 3E                        	.db $3E
08F94 56                        	.db $56
08F95 56                        	.db $56
08F96 48                        	.db $48
08F97 56                        	.db $56
08F98 56                        	.db $56
08F99 46                        	.db $46
08F9A 56                        	.db $56
08F9B 56                        	.db $56
08F9C 48                        	.db $48
08F9D 56                        	.db $56
08F9E 56                        	.db $56
08F9F 3E                        	.db $3E
08FA0 56                        	.db $56
08FA1 56                        	.db $56
08FA2 4C                        	.db $4C
08FA3 56                        	.db $56
08FA4 56                        	.db $56
08FA5 4A                        	.db $4A
08FA6 54                        	.db $54
08FA7 54                        	.db $54
08FA8 4C                        	.db $4C
08FA9 56                        	.db $56
08FAA 56                        	.db $56
08FAB 46                        	.db $46
08FAC 56                        	.db $56
08FAD 56                        	.db $56
08FAE 4C                        	.db $4C
08FAF 56                        	.db $56
08FB0 56                        	.db $56
08FB1 46                        	.db $46
08FB2 56                        	.db $56
08FB3 56                        	.db $56
08FB4 48                        	.db $48
08FB5 56                        	.db $56
08FB6 56                        	.db $56
08FB7 3E                        	.db $3E
08FB8 56                        	.db $56
08FB9 56                        	.db $56
08FBA                           .include "src/music/segments/title/title-3.asm"
08FBA                           MusicDataTitleScreen3:
08FBA                           MusicDataTitleScreen3_Square2:
08FBA E4                        	.db $E4
08FBB 56                        	.db $56
08FBC 48                        	.db $48
08FBD 7E                        	.db $7E
08FBE 56                        	.db $56
08FBF 7E                        	.db $7E
08FC0 48                        	.db $48
08FC1 56                        	.db $56
08FC2 46                        	.db $46
08FC3 7E                        	.db $7E
08FC4 56                        	.db $56
08FC5 7E                        	.db $7E
08FC6 46                        	.db $46
08FC7 56                        	.db $56
08FC8 44                        	.db $44
08FC9 7E                        	.db $7E
08FCA 56                        	.db $56
08FCB 7E                        	.db $7E
08FCC 44                        	.db $44
08FCD 56                        	.db $56
08FCE 7E                        	.db $7E
08FCF 5A                        	.db $5A
08FD0 7E                        	.db $7E
08FD1 E6                        	.db $E6
08FD2 7E                        	.db $7E
08FD3 E4                        	.db $E4
08FD4 56                        	.db $56
08FD5 52                        	.db $52
08FD6 42                        	.db $42
08FD7 7E                        	.db $7E
08FD8 52                        	.db $52
08FD9 7E                        	.db $7E
08FDA 42                        	.db $42
08FDB 52                        	.db $52
08FDC 42                        	.db $42
08FDD 7E                        	.db $7E
08FDE 52                        	.db $52
08FDF 7E                        	.db $7E
08FE0 42                        	.db $42
08FE1 52                        	.db $52
08FE2 42                        	.db $42
08FE3 7E                        	.db $7E
08FE4 52                        	.db $52
08FE5 7E                        	.db $7E
08FE6 42                        	.db $42
08FE7 52                        	.db $52
08FE8 7E                        	.db $7E
08FE9 56                        	.db $56
08FEA 7E                        	.db $7E
08FEB E6                        	.db $E6
08FEC 7E                        	.db $7E
08FED E4                        	.db $E4
08FEE 52                        	.db $52
08FEF 50                        	.db $50
08FF0 3E                        	.db $3E
08FF1 3E                        	.db $3E
08FF2 50                        	.db $50
08FF3 7E                        	.db $7E
08FF4 3E                        	.db $3E
08FF5 E8                        	.db $E8
08FF6 42                        	.db $42
08FF7 46                        	.db $46
08FF8 52                        	.db $52
08FF9 E4                        	.db $E4
08FFA 50                        	.db $50
08FFB 50                        	.db $50
08FFC E9                        	.db $E9
08FFD 50                        	.db $50
08FFE E4                        	.db $E4
08FFF 46                        	.db $46
09000 00                        	.db $00
09001                           MusicDataTitleScreen3_Square1:
09001 E4                        	.db $E4
09002 50                        	.db $50
09003 48                        	.db $48
09004 7E                        	.db $7E
09005 50                        	.db $50
09006 7E                        	.db $7E
09007 48                        	.db $48
09008 4C                        	.db $4C
09009 46                        	.db $46
0900A 7E                        	.db $7E
0900B 4C                        	.db $4C
0900C 7E                        	.db $7E
0900D 46                        	.db $46
0900E 4A                        	.db $4A
0900F 44                        	.db $44
09010 7E                        	.db $7E
09011 4A                        	.db $4A
09012 7E                        	.db $7E
09013 44                        	.db $44
09014 4A                        	.db $4A
09015 4A                        	.db $4A
09016 4A                        	.db $4A
09017 7E                        	.db $7E
09018 E6                        	.db $E6
09019 7E                        	.db $7E
0901A E4                        	.db $E4
0901B 56                        	.db $56
0901C 4C                        	.db $4C
0901D 42                        	.db $42
0901E 7E                        	.db $7E
0901F 4C                        	.db $4C
09020 7E                        	.db $7E
09021 42                        	.db $42
09022 4A                        	.db $4A
09023 42                        	.db $42
09024 7E                        	.db $7E
09025 4A                        	.db $4A
09026 7E                        	.db $7E
09027 42                        	.db $42
09028 48                        	.db $48
09029 42                        	.db $42
0902A 7E                        	.db $7E
0902B 48                        	.db $48
0902C 7E                        	.db $7E
0902D 42                        	.db $42
0902E 46                        	.db $46
0902F 46                        	.db $46
09030 46                        	.db $46
09031 7E                        	.db $7E
09032 E6                        	.db $E6
09033 7E                        	.db $7E
09034 E4                        	.db $E4
09035 52                        	.db $52
09036 30                        	.db $30
09037 3E                        	.db $3E
09038 3E                        	.db $3E
09039 30                        	.db $30
0903A 7E                        	.db $7E
0903B 3E                        	.db $3E
0903C E8                        	.db $E8
0903D 3A                        	.db $3A
0903E 3E                        	.db $3E
0903F 46                        	.db $46
09040 E4                        	.db $E4
09041 46                        	.db $46
09042 46                        	.db $46
09043 E9                        	.db $E9
09044 46                        	.db $46
09045 E4                        	.db $E4
09046 3A                        	.db $3A
09047                           MusicDataTitleScreen3_Triangle:
09047 48                        	.db $48
09048 56                        	.db $56
09049 56                        	.db $56
0904A 46                        	.db $46
0904B 56                        	.db $56
0904C 56                        	.db $56
0904D 44                        	.db $44
0904E 56                        	.db $56
0904F 56                        	.db $56
09050 4A                        	.db $4A
09051 56                        	.db $56
09052 86                        	.db $86
09053 7E                        	.db $7E
09054 84                        	.db $84
09055 7E                        	.db $7E
09056 88                        	.db $88
09057 4C                        	.db $4C
09058 5A                        	.db $5A
09059 5A                        	.db $5A
0905A 4A                        	.db $4A
0905B 5A                        	.db $5A
0905C 5A                        	.db $5A
0905D 48                        	.db $48
0905E 5A                        	.db $5A
0905F 5A                        	.db $5A
09060 46                        	.db $46
09061 56                        	.db $56
09062 86                        	.db $86
09063 7E                        	.db $7E
09064 84                        	.db $84
09065 7E                        	.db $7E
09066 88                        	.db $88
09067 48                        	.db $48
09068 56                        	.db $56
09069 56                        	.db $56
0906A 3E                        	.db $3E
0906B 56                        	.db $56
0906C 56                        	.db $56
0906D 84                        	.db $84
0906E 52                        	.db $52
0906F 52                        	.db $52
09070 89                        	.db $89
09071 52                        	.db $52
09072 84                        	.db $84
09073 46                        	.db $46
09074                           MusicDataTitleScreen3_Noise:
09074 B8                        	.db $B8
09075 02                        	.db $02
09076 10                        	.db $10
09077 10                        	.db $10
09078 02                        	.db $02
09079 10                        	.db $10
0907A 10                        	.db $10
0907B 02                        	.db $02
0907C 10                        	.db $10
0907D 10                        	.db $10
0907E 02                        	.db $02
0907F 10                        	.db $10
09080 86                        	.db $86
09081 01                        	.db $01
09082 84                        	.db $84
09083 01                        	.db $01
09084 88                        	.db $88
09085 02                        	.db $02
09086 10                        	.db $10
09087 10                        	.db $10
09088 02                        	.db $02
09089 10                        	.db $10
0908A 10                        	.db $10
0908B 02                        	.db $02
0908C 10                        	.db $10
0908D 10                        	.db $10
0908E 02                        	.db $02
0908F 10                        	.db $10
09090 86                        	.db $86
09091 01                        	.db $01
09092 84                        	.db $84
09093 01                        	.db $01
09094 88                        	.db $88
09095 02                        	.db $02
09096 10                        	.db $10
09097 10                        	.db $10
09098 02                        	.db $02
09099 10                        	.db $10
0909A 10                        	.db $10
0909B 02                        	.db $02
0909C 10                        	.db $10
0909D 10                        	.db $10
0909E                           .include "src/music/segments/title/title-4.asm"
0909E                           MusicDataTitleScreen4:
0909E                           MusicDataTitleScreen4_Square2:
0909E 48                        	.db $48
0909F 7E                        	.db $7E
090A0 7E                        	.db $7E
090A1 3E                        	.db $3E
090A2 38                        	.db $38
090A3 34                        	.db $34
090A4 30                        	.db $30
090A5 7E                        	.db $7E
090A6 7E                        	.db $7E
090A7 26                        	.db $26
090A8 20                        	.db $20
090A9 1C                        	.db $1C
090AA E8                        	.db $E8
090AB 18                        	.db $18
090AC 7E                        	.db $7E
090AD 3E                        	.db $3E
090AE 48                        	.db $48
090AF 00                        	.db $00
090B0                           MusicDataTitleScreen4_Square1:
090B0 30                        	.db $30
090B1 7E                        	.db $7E
090B2 7E                        	.db $7E
090B3 26                        	.db $26
090B4 20                        	.db $20
090B5 1C                        	.db $1C
090B6 18                        	.db $18
090B7 7E                        	.db $7E
090B8 7E                        	.db $7E
090B9 0E                        	.db $0E
090BA 08                        	.db $08
090BB 04                        	.db $04
090BC E8                        	.db $E8
090BD 18                        	.db $18
090BE 7E                        	.db $7E
090BF 00                        	.db $00
090C0 2E                        	.db $2E
090C1 38                        	.db $38
090C2                           MusicDataTitleScreen4_Triangle:
090C2 EB                        	.db $EB
090C3 7E                        	.db $7E
090C4 7E                        	.db $7E
090C5 7E                        	.db $7E
090C6 30                        	.db $30
090C7                           MusicDataTitleScreen4_Noise:
090C7 10                        	.db $10
090C8 01                        	.db $01
090C9 01                        	.db $01
090CA 10                        	.db $10
090CB 01                        	.db $01
090CC 01                        	.db $01
090CD 10                        	.db $10
090CE 01                        	.db $01
090CF 10                        	.db $10
090D0 10                        	.db $10
090D1 01                        	.db $01
090D2 01                        	.db $01
090D3                           
090D3                           ;
090D3                           ; Character Select screen music (1 through 5)
090D3                           ; Segment 1 is in a single group,
090D3                           ; Segments 3-6 are split by channel,
090D3                           ; Segments 3 and 4 share the same triangle and noise channel
090D3                           ; Segments 5 and 6 are just split by channel for some reason
090D3                           ; Segments 7 and 8 are back in single groups like usual
090D3                           ;
090D3                           .include "src/music/segments/character-select/character-select-1.asm"
090D3                           MusicDataCharacterSelect1:
090D3                           MusicDataCharacterSelect1_Square2:
090D3 96                        	.db $96
090D4 48                        	.db $48
090D5 92                        	.db $92
090D6 48                        	.db $48
090D7 96                        	.db $96
090D8 7E                        	.db $7E
090D9 92                        	.db $92
090DA 48                        	.db $48
090DB 96                        	.db $96
090DC 7E                        	.db $7E
090DD 92                        	.db $92
090DE 48                        	.db $48
090DF 96                        	.db $96
090E0 7E                        	.db $7E
090E1 92                        	.db $92
090E2 48                        	.db $48
090E3 96                        	.db $96
090E4 48                        	.db $48
090E5 92                        	.db $92
090E6 48                        	.db $48
090E7 96                        	.db $96
090E8 7E                        	.db $7E
090E9 92                        	.db $92
090EA 48                        	.db $48
090EB 96                        	.db $96
090EC 7E                        	.db $7E
090ED 92                        	.db $92
090EE 48                        	.db $48
090EF 96                        	.db $96
090F0 7E                        	.db $7E
090F1 92                        	.db $92
090F2 48                        	.db $48
090F3 96                        	.db $96
090F4 48                        	.db $48
090F5 92                        	.db $92
090F6 48                        	.db $48
090F7 96                        	.db $96
090F8 7E                        	.db $7E
090F9 92                        	.db $92
090FA 48                        	.db $48
090FB 96                        	.db $96
090FC 7E                        	.db $7E
090FD 92                        	.db $92
090FE 48                        	.db $48
090FF 96                        	.db $96
09100 7E                        	.db $7E
09101 92                        	.db $92
09102 48                        	.db $48
09103 98                        	.db $98
09104 50                        	.db $50
09105 7E                        	.db $7E
09106 4C                        	.db $4C
09107 7E                        	.db $7E
09108 00                        	.db $00
09109                           MusicDataCharacterSelect1_Square1:
09109 96                        	.db $96
0910A 3E                        	.db $3E
0910B 92                        	.db $92
0910C 3E                        	.db $3E
0910D 96                        	.db $96
0910E 7E                        	.db $7E
0910F 92                        	.db $92
09110 3E                        	.db $3E
09111 96                        	.db $96
09112 7E                        	.db $7E
09113 92                        	.db $92
09114 3E                        	.db $3E
09115 96                        	.db $96
09116 7E                        	.db $7E
09117 92                        	.db $92
09118 3E                        	.db $3E
09119 96                        	.db $96
0911A 3C                        	.db $3C
0911B 92                        	.db $92
0911C 3C                        	.db $3C
0911D 96                        	.db $96
0911E 7E                        	.db $7E
0911F 92                        	.db $92
09120 3C                        	.db $3C
09121 96                        	.db $96
09122 7E                        	.db $7E
09123 92                        	.db $92
09124 3C                        	.db $3C
09125 96                        	.db $96
09126 7E                        	.db $7E
09127 92                        	.db $92
09128 3C                        	.db $3C
09129 96                        	.db $96
0912A 3A                        	.db $3A
0912B 92                        	.db $92
0912C 3A                        	.db $3A
0912D 96                        	.db $96
0912E 7E                        	.db $7E
0912F 92                        	.db $92
09130 3A                        	.db $3A
09131 96                        	.db $96
09132 7E                        	.db $7E
09133 92                        	.db $92
09134 3A                        	.db $3A
09135 96                        	.db $96
09136 7E                        	.db $7E
09137 92                        	.db $92
09138 3A                        	.db $3A
09139 98                        	.db $98
0913A 46                        	.db $46
0913B 7E                        	.db $7E
0913C 3A                        	.db $3A
0913D 7E                        	.db $7E
0913E                           MusicDataCharacterSelect1_Triangle:
0913E 96                        	.db $96
0913F 48                        	.db $48
09140 92                        	.db $92
09141 48                        	.db $48
09142 96                        	.db $96
09143 7E                        	.db $7E
09144 92                        	.db $92
09145 48                        	.db $48
09146 96                        	.db $96
09147 7E                        	.db $7E
09148 92                        	.db $92
09149 48                        	.db $48
0914A 96                        	.db $96
0914B 7E                        	.db $7E
0914C 92                        	.db $92
0914D 48                        	.db $48
0914E 96                        	.db $96
0914F 48                        	.db $48
09150 92                        	.db $92
09151 48                        	.db $48
09152 96                        	.db $96
09153 7E                        	.db $7E
09154 92                        	.db $92
09155 48                        	.db $48
09156 96                        	.db $96
09157 7E                        	.db $7E
09158 92                        	.db $92
09159 48                        	.db $48
0915A 96                        	.db $96
0915B 7E                        	.db $7E
0915C 92                        	.db $92
0915D 48                        	.db $48
0915E 96                        	.db $96
0915F 48                        	.db $48
09160 92                        	.db $92
09161 48                        	.db $48
09162 96                        	.db $96
09163 7E                        	.db $7E
09164 92                        	.db $92
09165 48                        	.db $48
09166 96                        	.db $96
09167 7E                        	.db $7E
09168 92                        	.db $92
09169 48                        	.db $48
0916A 96                        	.db $96
0916B 7E                        	.db $7E
0916C 92                        	.db $92
0916D 48                        	.db $48
0916E 98                        	.db $98
0916F 3E                        	.db $3E
09170 7E                        	.db $7E
09171 46                        	.db $46
09172 7E                        	.db $7E
09173                           MusicDataCharacterSelect1_Noise:
09173 8A                        	.db $8A
09174 04                        	.db $04
09175 01                        	.db $01
09176 00                        	.db $00
09177                           
09177                           .include "src/music/segments/character-select/character-select-2-square2.asm"
09177                           ; Seems to be a little duplicated chunk of MusicDataCharacterSelect2_Square2
09177                           MusicDataCharacterSelect_Square_UNUSED:
09177 A6                        	.db $A6
09178 7E                        	.db $7E
09179 A2                        	.db $A2
0917A 48                        	.db $48
0917B A6                        	.db $A6
0917C 7E                        	.db $7E
0917D A2                        	.db $A2
0917E 42                        	.db $42
0917F A8                        	.db $A8
09180 50                        	.db $50
09181 50                        	.db $50
09182                           
09182                           MusicDataCharacterSelect2:
09182                           MusicDataCharacterSelect2_Square2:
09182 A8                        	.db $A8
09183 50                        	.db $50
09184 7E                        	.db $7E
09185 50                        	.db $50
09186 A6                        	.db $A6
09187 7E                        	.db $7E
09188 A2                        	.db $A2
09189 50                        	.db $50
0918A A6                        	.db $A6
0918B 7E                        	.db $7E
0918C A2                        	.db $A2
0918D 48                        	.db $48
0918E A6                        	.db $A6
0918F 7E                        	.db $7E
09190 A2                        	.db $A2
09191 42                        	.db $42
09192 AA                        	.db $AA
09193 3E                        	.db $3E
09194 A8                        	.db $A8
09195 48                        	.db $48
09196 7E                        	.db $7E
09197 48                        	.db $48
09198 A6                        	.db $A6
09199 7E                        	.db $7E
0919A A2                        	.db $A2
0919B 48                        	.db $48
0919C A6                        	.db $A6
0919D 7E                        	.db $7E
0919E A2                        	.db $A2
0919F 42                        	.db $42
091A0 A6                        	.db $A6
091A1 7E                        	.db $7E
091A2 A2                        	.db $A2
091A3 3C                        	.db $3C
091A4 AA                        	.db $AA
091A5 38                        	.db $38
091A6 A8                        	.db $A8
091A7 50                        	.db $50
091A8 7E                        	.db $7E
091A9 50                        	.db $50
091AA A6                        	.db $A6
091AB 7E                        	.db $7E
091AC A2                        	.db $A2
091AD 50                        	.db $50
091AE A6                        	.db $A6 ; MusicDataCharacterSelect_Square_UNUSED copy starts
091AF 7E                        	.db $7E
091B0 A2                        	.db $A2
091B1 48                        	.db $48
091B2 A6                        	.db $A6
091B3 7E                        	.db $7E
091B4 A2                        	.db $A2
091B5 42                        	.db $42
091B6 A8                        	.db $A8
091B7 50                        	.db $50
091B8 50                        	.db $50 ; MusicDataCharacterSelect_Square_UNUSED copy ends
091B9 A4                        	.db $A4
091BA 48                        	.db $48
091BB A9                        	.db $A9
091BC 7E                        	.db $7E
091BD AA                        	.db $AA
091BE 7E                        	.db $7E
091BF 00                        	.db $00
091C0                           .include "src/music/segments/character-select/character-select-3-square2.asm"
091C0                           MusicDataCharacterSelect3:
091C0                           MusicDataCharacterSelect3_Square2:
091C0 AA                        	.db $AA
091C1 7E                        	.db $7E
091C2 7E                        	.db $7E
091C3 00                        	.db $00
091C4                           .include "src/music/segments/character-select/character-select-4-square2.asm"
091C4                           MusicDataCharacterSelect4:
091C4                           MusicDataCharacterSelect4_Square2:
091C4 C8                        	.db $C8
091C5 7E                        	.db $7E
091C6 48                        	.db $48
091C7 4C                        	.db $4C
091C8 4E                        	.db $4E
091C9 00                        	.db $00
091CA                           .include "src/music/segments/character-select/character-select-2-square1.asm"
091CA                           MusicDataCharacterSelect2_Square1:
091CA A8                        	.db $A8
091CB 3E                        	.db $3E
091CC 7E                        	.db $7E
091CD A8                        	.db $A8
091CE 3E                        	.db $3E
091CF A6                        	.db $A6
091D0 7E                        	.db $7E
091D1 A2                        	.db $A2
091D2 3E                        	.db $3E
091D3 A6                        	.db $A6
091D4 7E                        	.db $7E
091D5 A2                        	.db $A2
091D6 38                        	.db $38
091D7 A6                        	.db $A6
091D8 7E                        	.db $7E
091D9 A2                        	.db $A2
091DA 38                        	.db $38
091DB AA                        	.db $AA
091DC 30                        	.db $30
091DD A8                        	.db $A8
091DE 3C                        	.db $3C
091DF 7E                        	.db $7E
091E0 3C                        	.db $3C
091E1 A6                        	.db $A6
091E2 7E                        	.db $7E
091E3 A2                        	.db $A2
091E4 3C                        	.db $3C
091E5 A6                        	.db $A6
091E6 7E                        	.db $7E
091E7 A2                        	.db $A2
091E8 34                        	.db $34
091E9 A6                        	.db $A6
091EA 7E                        	.db $7E
091EB A2                        	.db $A2
091EC 34                        	.db $34
091ED AA                        	.db $AA
091EE 30                        	.db $30
091EF A8                        	.db $A8
091F0 3A                        	.db $3A
091F1 7E                        	.db $7E
091F2 3A                        	.db $3A
091F3 A6                        	.db $A6
091F4 7E                        	.db $7E
091F5 A2                        	.db $A2
091F6 3A                        	.db $3A
091F7 A6                        	.db $A6
091F8 7E                        	.db $7E
091F9 A2                        	.db $A2
091FA 34                        	.db $34
091FB A6                        	.db $A6
091FC 7E                        	.db $7E
091FD A2                        	.db $A2
091FE 2E                        	.db $2E
091FF A8                        	.db $A8
09200 3E                        	.db $3E
09201 3E                        	.db $3E
09202 A4                        	.db $A4
09203 38                        	.db $38
09204 A9                        	.db $A9
09205 7E                        	.db $7E
09206 AA                        	.db $AA
09207 7E                        	.db $7E
09208                           .include "src/music/segments/character-select/character-select-3-square1.asm"
09208                           MusicDataCharacterSelect3_Square1:
09208 AA                        	.db $AA
09209 7E                        	.db $7E
0920A 7E                        	.db $7E
0920B                           .include "src/music/segments/character-select/character-select-4-square1.asm"
0920B                           MusicDataCharacterSelect4_Square1:
0920B C8                        	.db $C8
0920C 7E                        	.db $7E
0920D 38                        	.db $38
0920E 3A                        	.db $3A
0920F 3C                        	.db $3C
09210                           .include "src/music/segments/character-select/character-select-2-triangle.asm"
09210                           MusicDataCharacterSelect2_Triangle:
09210 88                        	.db $88
09211 30                        	.db $30
09212 7E                        	.db $7E
09213 30                        	.db $30
09214 7E                        	.db $7E
09215 30                        	.db $30
09216 7E                        	.db $7E
09217 30                        	.db $30
09218 7E                        	.db $7E
09219 34                        	.db $34
0921A 7E                        	.db $7E
0921B 34                        	.db $34
0921C 7E                        	.db $7E
0921D 34                        	.db $34
0921E 7E                        	.db $7E
0921F 34                        	.db $34
09220 7E                        	.db $7E
09221 3E                        	.db $3E
09222 7E                        	.db $7E
09223 3E                        	.db $3E
09224 7E                        	.db $7E
09225 3E                        	.db $3E
09226 7E                        	.db $7E
09227 3E                        	.db $3E
09228 7E                        	.db $7E
09229 30                        	.db $30
0922A 7E                        	.db $7E
0922B 8A                        	.db $8A
0922C 7E                        	.db $7E
0922D 7E                        	.db $7E
0922E 7E                        	.db $7E
0922F                           .include "src/music/segments/character-select/character-select-3-4-triangle.asm"
0922F                           MusicDataCharacterSelect3_Triangle:
0922F                           MusicDataCharacterSelect4_Triangle:
0922F 8A                        	.db $8A
09230 7E                        	.db $7E
09231 7E                        	.db $7E
09232                           .include "src/music/segments/character-select/character-select-2-noise.asm"
09232                           MusicDataCharacterSelect2_Noise:
09232 88                        	.db $88
09233 02                        	.db $02
09234 04                        	.db $04
09235 00                        	.db $00
09236                           .include "src/music/segments/character-select/character-select-3-4-noise.asm"
09236                           MusicDataCharacterSelect3_Noise:
09236                           MusicDataCharacterSelect4_Noise:
09236 82                        	.db $82
09237 04                        	.db $04
09238 82                        	.db $82
09239 04                        	.db $04
0923A 82                        	.db $82
0923B 04                        	.db $04
0923C 86                        	.db $86
0923D 04                        	.db $04
0923E 82                        	.db $82
0923F 04                        	.db $04
09240 82                        	.db $82
09241 04                        	.db $04
09242 82                        	.db $82
09243 01                        	.db $01
09244 82                        	.db $82
09245 04                        	.db $04
09246 82                        	.db $82
09247 04                        	.db $04
09248 82                        	.db $82
09249 01                        	.db $01
0924A 82                        	.db $82
0924B 04                        	.db $04
0924C                           
0924C                           .include "src/music/segments/character-select/character-select-5-square2.asm"
0924C                           MusicDataCharacterSelect5:
0924C                           MusicDataCharacterSelect5_Square2:
0924C C8                        	.db $C8
0924D 50                        	.db $50
0924E 7E                        	.db $7E
0924F 50                        	.db $50
09250 C6                        	.db $C6
09251 7E                        	.db $7E
09252 C2                        	.db $C2
09253 50                        	.db $50
09254 C6                        	.db $C6
09255 7E                        	.db $7E
09256 C8                        	.db $C8
09257 4C                        	.db $4C
09258 C2                        	.db $C2
09259 7E                        	.db $7E
0925A C8                        	.db $C8
0925B 4C                        	.db $4C
0925C 50                        	.db $50
0925D C4                        	.db $C4
0925E 4C                        	.db $4C
0925F 7E                        	.db $7E
09260 48                        	.db $48
09261 7E                        	.db $7E
09262 C2                        	.db $C2
09263 48                        	.db $48
09264 C6                        	.db $C6
09265 46                        	.db $46
09266 7E                        	.db $7E
09267 C8                        	.db $C8
09268 48                        	.db $48
09269 C2                        	.db $C2
0926A 7E                        	.db $7E
0926B C8                        	.db $C8
0926C 42                        	.db $42
0926D 46                        	.db $46
0926E 48                        	.db $48
0926F C8                        	.db $C8
09270 4C                        	.db $4C
09271 7E                        	.db $7E
09272 4C                        	.db $4C
09273 C6                        	.db $C6
09274 7E                        	.db $7E
09275 C2                        	.db $C2
09276 4C                        	.db $4C
09277 C6                        	.db $C6
09278 7E                        	.db $7E
09279 C8                        	.db $C8
0927A 48                        	.db $48
0927B C2                        	.db $C2
0927C 7E                        	.db $7E
0927D C8                        	.db $C8
0927E 46                        	.db $46
0927F C4                        	.db $C4
09280 42                        	.db $42
09281 7E                        	.db $7E
09282 00                        	.db $00
09283                           .include "src/music/segments/character-select/character-select-6-square2.asm"
09283                           MusicDataCharacterSelect6:
09283                           MusicDataCharacterSelect6_Square2:
09283 C8                        	.db $C8
09284 7E                        	.db $7E
09285 46                        	.db $46
09286 48                        	.db $48
09287 4A                        	.db $4A
09288 C8                        	.db $C8
09289 4C                        	.db $4C
0928A 7E                        	.db $7E
0928B C6                        	.db $C6
0928C 7E                        	.db $7E
0928D C8                        	.db $C8
0928E 3E                        	.db $3E
0928F C2                        	.db $C2
09290 7E                        	.db $7E
09291 00                        	.db $00
09292                           .include "src/music/segments/character-select/character-select-5-square1.asm"
09292                           MusicDataCharacterSelect5_Square1:
09292 C8                        	.db $C8
09293 40                        	.db $40
09294 7E                        	.db $7E
09295 40                        	.db $40
09296 C6                        	.db $C6
09297 7E                        	.db $7E
09298 C2                        	.db $C2
09299 40                        	.db $40
0929A C6                        	.db $C6
0929B 7E                        	.db $7E
0929C C8                        	.db $C8
0929D 3C                        	.db $3C
0929E C2                        	.db $C2
0929F 7E                        	.db $7E
092A0 C8                        	.db $C8
092A1 3C                        	.db $3C
092A2 40                        	.db $40
092A3 C4                        	.db $C4
092A4 38                        	.db $38
092A5 7E                        	.db $7E
092A6 38                        	.db $38
092A7 7E                        	.db $7E
092A8 C2                        	.db $C2
092A9 38                        	.db $38
092AA C6                        	.db $C6
092AB 34                        	.db $34
092AC 7E                        	.db $7E
092AD C8                        	.db $C8
092AE 38                        	.db $38
092AF C2                        	.db $C2
092B0 7E                        	.db $7E
092B1 C8                        	.db $C8
092B2 30                        	.db $30
092B3 34                        	.db $34
092B4 38                        	.db $38
092B5 C8                        	.db $C8
092B6 3C                        	.db $3C
092B7 7E                        	.db $7E
092B8 3C                        	.db $3C
092B9 C6                        	.db $C6
092BA 7E                        	.db $7E
092BB C2                        	.db $C2
092BC 3C                        	.db $3C
092BD C6                        	.db $C6
092BE 7E                        	.db $7E
092BF C8                        	.db $C8
092C0 38                        	.db $38
092C1 C2                        	.db $C2
092C2 7E                        	.db $7E
092C3 C8                        	.db $C8
092C4 34                        	.db $34
092C5 C4                        	.db $C4
092C6 30                        	.db $30
092C7 7E                        	.db $7E
092C8                           .include "src/music/segments/character-select/character-select-6-square1.asm"
092C8                           MusicDataCharacterSelect6_Square1:
092C8 C8                        	.db $C8
092C9 7E                        	.db $7E
092CA 34                        	.db $34
092CB 38                        	.db $38
092CC 3A                        	.db $3A
092CD C8                        	.db $C8
092CE 3C                        	.db $3C
092CF 7E                        	.db $7E
092D0 C6                        	.db $C6
092D1 7E                        	.db $7E
092D2 C8                        	.db $C8
092D3 2E                        	.db $2E
092D4 C2                        	.db $C2
092D5 7E                        	.db $7E
092D6                           .include "src/music/segments/character-select/character-select-5-triangle.asm"
092D6                           MusicDataCharacterSelect5_Triangle:
092D6 88                        	.db $88
092D7 38                        	.db $38
092D8 7E                        	.db $7E
092D9 3C                        	.db $3C
092DA 7E                        	.db $7E
092DB 3E                        	.db $3E
092DC 7E                        	.db $7E
092DD 40                        	.db $40
092DE 46                        	.db $46
092DF 42                        	.db $42
092E0 7E                        	.db $7E
092E1 46                        	.db $46
092E2 7E                        	.db $7E
092E3 48                        	.db $48
092E4 7E                        	.db $7E
092E5 46                        	.db $46
092E6 42                        	.db $42
092E7 34                        	.db $34
092E8 7E                        	.db $7E
092E9 38                        	.db $38
092EA 7E                        	.db $7E
092EB 3A                        	.db $3A
092EC 7E                        	.db $7E
092ED 3C                        	.db $3C
092EE 42                        	.db $42
092EF                           .include "src/music/segments/character-select/character-select-6-triangle.asm"
092EF                           MusicDataCharacterSelect6_Triangle:
092EF 88                        	.db $88
092F0 7E                        	.db $7E
092F1 3E                        	.db $3E
092F2 42                        	.db $42
092F3 44                        	.db $44
092F4 46                        	.db $46
092F5 7E                        	.db $7E
092F6 8A                        	.db $8A
092F7 7E                        	.db $7E
092F8                           .include "src/music/segments/character-select/character-select-5-noise.asm"
092F8                           MusicDataCharacterSelect5_Noise:
092F8 88                        	.db $88
092F9 02                        	.db $02
092FA 04                        	.db $04
092FB 00                        	.db $00
092FC                           .include "src/music/segments/character-select/character-select-6-noise.asm"
092FC                           MusicDataCharacterSelect6_Noise:
092FC 88                        	.db $88
092FD 02                        	.db $02
092FE 04                        	.db $04
092FF 04                        	.db $04
09300 04                        	.db $04
09301 02                        	.db $02
09302 02                        	.db $02
09303 7E                        	.db $7E
09304 06                        	.db $06
09305                           
09305                           .include "src/music/segments/character-select/character-select-7.asm"
09305                           MusicDataCharacterSelect7:
09305                           MusicDataCharacterSelect7_Square2:
09305 96                        	.db $96
09306 50                        	.db $50
09307 92                        	.db $92
09308 4E                        	.db $4E
09309 96                        	.db $96
0930A 50                        	.db $50
0930B 92                        	.db $92
0930C 5E                        	.db $5E
0930D 96                        	.db $96
0930E 58                        	.db $58
0930F 92                        	.db $92
09310 50                        	.db $50
09311 96                        	.db $96
09312 68                        	.db $68
09313 92                        	.db $92
09314 5E                        	.db $5E
09315 96                        	.db $96
09316 64                        	.db $64
09317 92                        	.db $92
09318 5E                        	.db $5E
09319 96                        	.db $96
0931A 5A                        	.db $5A
0931B 92                        	.db $92
0931C 5E                        	.db $5E
0931D 96                        	.db $96
0931E 58                        	.db $58
0931F 92                        	.db $92
09320 52                        	.db $52
09321 96                        	.db $96
09322 50                        	.db $50
09323 92                        	.db $92
09324 4C                        	.db $4C
09325 96                        	.db $96
09326 48                        	.db $48
09327 92                        	.db $92
09328 46                        	.db $46
09329 96                        	.db $96
0932A 48                        	.db $48
0932B 92                        	.db $92
0932C 4C                        	.db $4C
0932D 96                        	.db $96
0932E 50                        	.db $50
0932F 92                        	.db $92
09330 4E                        	.db $4E
09331 96                        	.db $96
09332 50                        	.db $50
09333 92                        	.db $92
09334 5A                        	.db $5A
09335 96                        	.db $96
09336 58                        	.db $58
09337 92                        	.db $92
09338 50                        	.db $50
09339 96                        	.db $96
0933A 4C                        	.db $4C
0933B 92                        	.db $92
0933C 4E                        	.db $4E
0933D 96                        	.db $96
0933E 5A                        	.db $5A
0933F 92                        	.db $92
09340 50                        	.db $50
09341 96                        	.db $96
09342 56                        	.db $56
09343 92                        	.db $92
09344 54                        	.db $54
09345 96                        	.db $96
09346 52                        	.db $52
09347 92                        	.db $92
09348 50                        	.db $50
09349 96                        	.db $96
0934A 52                        	.db $52
0934B 92                        	.db $92
0934C 5A                        	.db $5A
0934D 96                        	.db $96
0934E 68                        	.db $68
0934F 92                        	.db $92
09350 4C                        	.db $4C
09351 96                        	.db $96
09352 5A                        	.db $5A
09353 92                        	.db $92
09354 58                        	.db $58
09355 96                        	.db $96
09356 56                        	.db $56
09357 92                        	.db $92
09358 68                        	.db $68
09359 96                        	.db $96
0935A 56                        	.db $56
0935B 92                        	.db $92
0935C 54                        	.db $54
0935D 96                        	.db $96
0935E 52                        	.db $52
0935F 92                        	.db $92
09360 64                        	.db $64
09361 96                        	.db $96
09362 5A                        	.db $5A
09363 92                        	.db $92
09364 5C                        	.db $5C
09365 00                        	.db $00
09366                           MusicDataCharacterSelect7_Square1:
09366 C8                        	.db $C8
09367 50                        	.db $50
09368 7E                        	.db $7E
09369 50                        	.db $50
0936A C6                        	.db $C6
0936B 7E                        	.db $7E
0936C C2                        	.db $C2
0936D 50                        	.db $50
0936E C6                        	.db $C6
0936F 7E                        	.db $7E
09370 C8                        	.db $C8
09371 4C                        	.db $4C
09372 C2                        	.db $C2
09373 7E                        	.db $7E
09374 C8                        	.db $C8
09375 4C                        	.db $4C
09376 50                        	.db $50
09377 C4                        	.db $C4
09378 4C                        	.db $4C
09379 7E                        	.db $7E
0937A 48                        	.db $48
0937B 7E                        	.db $7E
0937C C2                        	.db $C2
0937D 48                        	.db $48
0937E C6                        	.db $C6
0937F 46                        	.db $46
09380 C6                        	.db $C6
09381 7E                        	.db $7E
09382 C8                        	.db $C8
09383 48                        	.db $48
09384 C2                        	.db $C2
09385 7E                        	.db $7E
09386 C8                        	.db $C8
09387 42                        	.db $42
09388 46                        	.db $46
09389 48                        	.db $48
0938A 4C                        	.db $4C
0938B 7E                        	.db $7E
0938C 4C                        	.db $4C
0938D C6                        	.db $C6
0938E 7E                        	.db $7E
0938F C2                        	.db $C2
09390 4C                        	.db $4C
09391 C6                        	.db $C6
09392 7E                        	.db $7E
09393 C8                        	.db $C8
09394 48                        	.db $48
09395 C2                        	.db $C2
09396 7E                        	.db $7E
09397 C8                        	.db $C8
09398 46                        	.db $46
09399 C4                        	.db $C4
0939A 42                        	.db $42
0939B 7E                        	.db $7E
0939C                           MusicDataCharacterSelect7_Triangle:
0939C 88                        	.db $88
0939D 38                        	.db $38
0939E 7E                        	.db $7E
0939F 3C                        	.db $3C
093A0 7E                        	.db $7E
093A1 3E                        	.db $3E
093A2 7E                        	.db $7E
093A3 40                        	.db $40
093A4 46                        	.db $46
093A5 42                        	.db $42
093A6 7E                        	.db $7E
093A7 46                        	.db $46
093A8 7E                        	.db $7E
093A9 48                        	.db $48
093AA 7E                        	.db $7E
093AB 46                        	.db $46
093AC 42                        	.db $42
093AD 34                        	.db $34
093AE 7E                        	.db $7E
093AF 38                        	.db $38
093B0 7E                        	.db $7E
093B1 3A                        	.db $3A
093B2 7E                        	.db $7E
093B3 3C                        	.db $3C
093B4 42                        	.db $42
093B5                           MusicDataCharacterSelect7_Noise:
093B5 88                        	.db $88
093B6 02                        	.db $02
093B7 04                        	.db $04
093B8 00                        	.db $00
093B9                           .include "src/music/segments/character-select/character-select-8.asm"
093B9                           MusicDataCharacterSelect8:
093B9                           MusicDataCharacterSelect8_Square2:
093B9 96                        	.db $96
093BA 5E                        	.db $5E
093BB 92                        	.db $92
093BC 5C                        	.db $5C
093BD 96                        	.db $96
093BE 5E                        	.db $5E
093BF 92                        	.db $92
093C0 5A                        	.db $5A
093C1 96                        	.db $96
093C2 56                        	.db $56
093C3 92                        	.db $92
093C4 52                        	.db $52
093C5 96                        	.db $96
093C6 42                        	.db $42
093C7 92                        	.db $92
093C8 46                        	.db $46
093C9 96                        	.db $96
093CA 56                        	.db $56
093CB 92                        	.db $92
093CC 52                        	.db $52
093CD 96                        	.db $96
093CE 46                        	.db $46
093CF 92                        	.db $92
093D0 42                        	.db $42
093D1 96                        	.db $96
093D2 52                        	.db $52
093D3 92                        	.db $92
093D4 46                        	.db $46
093D5 96                        	.db $96
093D6 42                        	.db $42
093D7 92                        	.db $92
093D8 3E                        	.db $3E
093D9 00                        	.db $00
093DA                           MusicDataCharacterSelect8_Square1:
093DA C8                        	.db $C8
093DB 7E                        	.db $7E
093DC 46                        	.db $46
093DD 48                        	.db $48
093DE 4A                        	.db $4A
093DF C8                        	.db $C8
093E0 4C                        	.db $4C
093E1 7E                        	.db $7E
093E2 C6                        	.db $C6
093E3 7E                        	.db $7E
093E4 C8                        	.db $C8
093E5 3E                        	.db $3E
093E6 C2                        	.db $C2
093E7 7E                        	.db $7E
093E8                           MusicDataCharacterSelect8_Triangle:
093E8 88                        	.db $88
093E9 7E                        	.db $7E
093EA 3E                        	.db $3E
093EB 42                        	.db $42
093EC 44                        	.db $44
093ED 46                        	.db $46
093EE 7E                        	.db $7E
093EF 8A                        	.db $8A
093F0 7E                        	.db $7E
093F1                           MusicDataCharacterSelect8_Noise:
093F1 88                        	.db $88
093F2 02                        	.db $02
093F3 04                        	.db $04
093F4 04                        	.db $04
093F5 04                        	.db $04
093F6 02                        	.db $02
093F7 02                        	.db $02
093F8 7E                        	.db $7E
093F9 06                        	.db $06
093FA                           
093FA                           ;
093FA                           ; Overworld music segments ...
093FA                           ; Segments 1, 2, 5, and 6 are all separate;
093FA                           ; Segments 3 and 4 have separate square2, square1, and triangle tracks,
093FA                           ; but share a noise track
093FA                           ;
093FA                           .include "src/music/segments/overworld/overworld-1.asm"
093FA                           MusicDataOverworld1:
093FA                           MusicDataOverworld1_Square2:
093FA A2                        	.db $A2
093FB 7E                        	.db $7E
093FC 7E                        	.db $7E
093FD 56                        	.db $56
093FE 54                        	.db $54
093FF 7E                        	.db $7E
09400 52                        	.db $52
09401 4C                        	.db $4C
09402 7E                        	.db $7E
09403 46                        	.db $46
09404 42                        	.db $42
09405 7E                        	.db $7E
09406 40                        	.db $40
09407 A4                        	.db $A4
09408 3E                        	.db $3E
09409 7E                        	.db $7E
0940A 56                        	.db $56
0940B 7E                        	.db $7E
0940C A8                        	.db $A8
0940D 3E                        	.db $3E
0940E 7E                        	.db $7E
0940F 00                        	.db $00
09410                           MusicDataOverworld1_Square1:
09410 A2                        	.db $A2
09411 7E                        	.db $7E
09412 7E                        	.db $7E
09413 46                        	.db $46
09414 44                        	.db $44
09415 7E                        	.db $7E
09416 42                        	.db $42
09417 3A                        	.db $3A
09418 7E                        	.db $7E
09419 34                        	.db $34
0941A 30                        	.db $30
0941B 7E                        	.db $7E
0941C 2E                        	.db $2E
0941D A4                        	.db $A4
0941E 2E                        	.db $2E
0941F 7E                        	.db $7E
09420 46                        	.db $46
09421 7E                        	.db $7E
09422 A8                        	.db $A8
09423 3A                        	.db $3A
09424 7E                        	.db $7E
09425                           MusicDataOverworld1_Triangle:
09425 82                        	.db $82
09426 7E                        	.db $7E
09427 7E                        	.db $7E
09428 4C                        	.db $4C
09429 4A                        	.db $4A
0942A 7E                        	.db $7E
0942B 48                        	.db $48
0942C 46                        	.db $46
0942D 7E                        	.db $7E
0942E 3E                        	.db $3E
0942F 3A                        	.db $3A
09430 7E                        	.db $7E
09431 38                        	.db $38
09432 88                        	.db $88
09433 34                        	.db $34
09434 4C                        	.db $4C
09435 34                        	.db $34
09436 3E                        	.db $3E
09437                           MusicDataOverworld1_Noise:
09437 8A                        	.db $8A
09438 01                        	.db $01
09439 01                        	.db $01
0943A 88                        	.db $88
0943B 02                        	.db $02
0943C 82                        	.db $82
0943D 02                        	.db $02
0943E 02                        	.db $02
0943F 02                        	.db $02
09440 02                        	.db $02
09441 01                        	.db $01
09442 02                        	.db $02
09443 02                        	.db $02
09444 02                        	.db $02
09445 02                        	.db $02
09446                           .include "src/music/segments/overworld/overworld-2.asm"
09446                           MusicDataOverworld2:
09446                           MusicDataOverworld2_Square2:
09446 82                        	.db $82
09447 56                        	.db $56
09448 7E                        	.db $7E
09449 48                        	.db $48
0944A 50                        	.db $50
0944B 7E                        	.db $7E
0944C 88                        	.db $88
0944D 56                        	.db $56
0944E 82                        	.db $82
0944F 48                        	.db $48
09450 50                        	.db $50
09451 7E                        	.db $7E
09452 56                        	.db $56
09453 46                        	.db $46
09454 4E                        	.db $4E
09455 56                        	.db $56
09456 5E                        	.db $5E
09457 7E                        	.db $7E
09458 8A                        	.db $8A
09459 5A                        	.db $5A
0945A 82                        	.db $82
0945B 7E                        	.db $7E
0945C 56                        	.db $56
0945D 7E                        	.db $7E
0945E 44                        	.db $44
0945F 4C                        	.db $4C
09460 7E                        	.db $7E
09461 88                        	.db $88
09462 56                        	.db $56
09463 82                        	.db $82
09464 44                        	.db $44
09465 4C                        	.db $4C
09466 7E                        	.db $7E
09467 56                        	.db $56
09468 4A                        	.db $4A
09469 50                        	.db $50
0946A 56                        	.db $56
0946B 5E                        	.db $5E
0946C 7E                        	.db $7E
0946D 8A                        	.db $8A
0946E 5A                        	.db $5A
0946F 82                        	.db $82
09470 5E                        	.db $5E
09471 60                        	.db $60
09472 7E                        	.db $7E
09473 5E                        	.db $5E
09474 60                        	.db $60
09475 7E                        	.db $7E
09476 88                        	.db $88
09477 5A                        	.db $5A
09478 82                        	.db $82
09479 60                        	.db $60
0947A 5E                        	.db $5E
0947B 7E                        	.db $7E
0947C 5A                        	.db $5A
0947D 56                        	.db $56
0947E 7E                        	.db $7E
0947F 54                        	.db $54
09480 56                        	.db $56
09481 7E                        	.db $7E
09482 88                        	.db $88
09483 50                        	.db $50
09484 82                        	.db $82
09485 4A                        	.db $4A
09486 4C                        	.db $4C
09487 7E                        	.db $7E
09488 50                        	.db $50
09489 52                        	.db $52
0948A 7E                        	.db $7E
0948B 50                        	.db $50
0948C 52                        	.db $52
0948D 7E                        	.db $7E
0948E 88                        	.db $88
0948F 46                        	.db $46
09490 82                        	.db $82
09491 50                        	.db $50
09492 4C                        	.db $4C
09493 7E                        	.db $7E
09494 8A                        	.db $8A
09495 48                        	.db $48
09496 7E                        	.db $7E
09497 82                        	.db $82
09498 7E                        	.db $7E
09499 00                        	.db $00
0949A                           MusicDataOverworld2_Square1:
0949A 82                        	.db $82
0949B 48                        	.db $48
0949C 7E                        	.db $7E
0949D 38                        	.db $38
0949E 3E                        	.db $3E
0949F 7E                        	.db $7E
094A0 88                        	.db $88
094A1 48                        	.db $48
094A2 82                        	.db $82
094A3 38                        	.db $38
094A4 3E                        	.db $3E
094A5 7E                        	.db $7E
094A6 48                        	.db $48
094A7 36                        	.db $36
094A8 3E                        	.db $3E
094A9 46                        	.db $46
094AA 4E                        	.db $4E
094AB 7E                        	.db $7E
094AC 8A                        	.db $8A
094AD 46                        	.db $46
094AE 82                        	.db $82
094AF 7E                        	.db $7E
094B0 44                        	.db $44
094B1 7E                        	.db $7E
094B2 34                        	.db $34
094B3 3E                        	.db $3E
094B4 7E                        	.db $7E
094B5 88                        	.db $88
094B6 44                        	.db $44
094B7 82                        	.db $82
094B8 34                        	.db $34
094B9 3E                        	.db $3E
094BA 7E                        	.db $7E
094BB 44                        	.db $44
094BC 38                        	.db $38
094BD 42                        	.db $42
094BE 4A                        	.db $4A
094BF 50                        	.db $50
094C0 7E                        	.db $7E
094C1 8A                        	.db $8A
094C2 4A                        	.db $4A
094C3 82                        	.db $82
094C4 50                        	.db $50
094C5 5A                        	.db $5A
094C6 7E                        	.db $7E
094C7 56                        	.db $56
094C8 5A                        	.db $5A
094C9 7E                        	.db $7E
094CA 88                        	.db $88
094CB 52                        	.db $52
094CC 82                        	.db $82
094CD 5A                        	.db $5A
094CE 56                        	.db $56
094CF 7E                        	.db $7E
094D0 54                        	.db $54
094D1 50                        	.db $50
094D2 7E                        	.db $7E
094D3 4E                        	.db $4E
094D4 50                        	.db $50
094D5 7E                        	.db $7E
094D6 88                        	.db $88
094D7 48                        	.db $48
094D8 82                        	.db $82
094D9 42                        	.db $42
094DA 46                        	.db $46
094DB 7E                        	.db $7E
094DC 4A                        	.db $4A
094DD 4C                        	.db $4C
094DE 7E                        	.db $7E
094DF 48                        	.db $48
094E0 4C                        	.db $4C
094E1 7E                        	.db $7E
094E2 88                        	.db $88
094E3 3E                        	.db $3E
094E4 82                        	.db $82
094E5 48                        	.db $48
094E6 46                        	.db $46
094E7 7E                        	.db $7E
094E8 8A                        	.db $8A
094E9 3E                        	.db $3E
094EA 8A                        	.db $8A
094EB 7E                        	.db $7E
094EC 82                        	.db $82
094ED 7E                        	.db $7E
094EE                           MusicDataOverworld2_Triangle:
094EE 88                        	.db $88
094EF 30                        	.db $30
094F0 3E                        	.db $3E
094F1 30                        	.db $30
094F2 3E                        	.db $3E
094F3 2E                        	.db $2E
094F4 3E                        	.db $3E
094F5 2E                        	.db $2E
094F6 3E                        	.db $3E
094F7 2C                        	.db $2C
094F8 3E                        	.db $3E
094F9 2C                        	.db $2C
094FA 3E                        	.db $3E
094FB 2A                        	.db $2A
094FC 3E                        	.db $3E
094FD 2A                        	.db $2A
094FE 3E                        	.db $3E
094FF 22                        	.db $22
09500 3A                        	.db $3A
09501 24                        	.db $24
09502 3C                        	.db $3C
09503 26                        	.db $26
09504 3E                        	.db $3E
09505 2A                        	.db $2A
09506 42                        	.db $42
09507 34                        	.db $34
09508 3A                        	.db $3A
09509 26                        	.db $26
0950A 34                        	.db $34
0950B 30                        	.db $30
0950C 26                        	.db $26
0950D 30                        	.db $30
0950E 7E                        	.db $7E
0950F                           MusicDataOverworld2_Noise:
0950F 88                        	.db $88
09510 01                        	.db $01
09511 02                        	.db $02
09512 01                        	.db $01
09513 02                        	.db $02
09514 88                        	.db $88
09515 01                        	.db $01
09516 02                        	.db $02
09517 82                        	.db $82
09518 02                        	.db $02
09519 02                        	.db $02
0951A 02                        	.db $02
0951B 02                        	.db $02
0951C 01                        	.db $01
0951D 02                        	.db $02
0951E 00                        	.db $00
0951F                           .include "src/music/segments/overworld/overworld-3-square2.asm"
0951F                           MusicDataOverworld3:
0951F                           MusicDataOverworld3_Square2:
0951F 92                        	.db $92
09520 7E                        	.db $7E
09521 7E                        	.db $7E
09522 98                        	.db $98
09523 50                        	.db $50
09524 92                        	.db $92
09525 7E                        	.db $7E
09526 56                        	.db $56
09527 7E                        	.db $7E
09528 7E                        	.db $7E
09529 5A                        	.db $5A
0952A 7E                        	.db $7E
0952B 9A                        	.db $9A
0952C 60                        	.db $60
0952D 92                        	.db $92
0952E 7E                        	.db $7E
0952F 5A                        	.db $5A
09530 7E                        	.db $7E
09531 56                        	.db $56
09532 50                        	.db $50
09533 7E                        	.db $7E
09534 48                        	.db $48
09535 4C                        	.db $4C
09536 7E                        	.db $7E
09537 50                        	.db $50
09538 4C                        	.db $4C
09539 7E                        	.db $7E
0953A 50                        	.db $50
0953B 4C                        	.db $4C
0953C 7E                        	.db $7E
0953D 42                        	.db $42
0953E 7E                        	.db $7E
0953F 7E                        	.db $7E
09540 98                        	.db $98
09541 4C                        	.db $4C
09542 90                        	.db $90
09543 42                        	.db $42
09544 4C                        	.db $4C
09545 42                        	.db $42
09546 4C                        	.db $4C
09547 42                        	.db $42
09548 4C                        	.db $4C
09549 42                        	.db $42
0954A 4C                        	.db $4C
0954B 42                        	.db $42
0954C 4C                        	.db $4C
0954D 42                        	.db $42
0954E 4C                        	.db $4C
0954F 92                        	.db $92
09550 7E                        	.db $7E
09551 98                        	.db $98
09552 4C                        	.db $4C
09553 92                        	.db $92
09554 50                        	.db $50
09555 4C                        	.db $4C
09556 7E                        	.db $7E
09557 50                        	.db $50
09558 4C                        	.db $4C
09559 7E                        	.db $7E
0955A 50                        	.db $50
0955B 7E                        	.db $7E
0955C 7E                        	.db $7E
0955D 98                        	.db $98
0955E 5A                        	.db $5A
0955F 92                        	.db $92
09560 56                        	.db $56
09561 5A                        	.db $5A
09562 7E                        	.db $7E
09563 56                        	.db $56
09564 00                        	.db $00
09565                           .include "src/music/segments/overworld/overworld-4-square2.asm"
09565                           MusicDataOverworld4:
09565                           MusicDataOverworld4_Square2:
09565 92                        	.db $92
09566 50                        	.db $50
09567 7E                        	.db $7E
09568 4C                        	.db $4C
09569 48                        	.db $48
0956A 7E                        	.db $7E
0956B 98                        	.db $98
0956C 50                        	.db $50
0956D 90                        	.db $90
0956E 3E                        	.db $3E
0956F 50                        	.db $50
09570 3E                        	.db $3E
09571 50                        	.db $50
09572 3E                        	.db $3E
09573 50                        	.db $50
09574 3E                        	.db $3E
09575 50                        	.db $50
09576 3E                        	.db $3E
09577 50                        	.db $50
09578 3E                        	.db $3E
09579 50                        	.db $50
0957A 92                        	.db $92
0957B 7E                        	.db $7E
0957C 7E                        	.db $7E
0957D C2                        	.db $C2
0957E 7E                        	.db $7E
0957F 7E                        	.db $7E
09580 56                        	.db $56
09581 7E                        	.db $7E
09582 4E                        	.db $4E
09583 7E                        	.db $7E
09584 46                        	.db $46
09585 7E                        	.db $7E
09586 42                        	.db $42
09587 7E                        	.db $7E
09588 3E                        	.db $3E
09589 7E                        	.db $7E
0958A 00                        	.db $00
0958B                           .include "src/music/segments/overworld/overworld-3-4-noise.asm"
0958B                           MusicDataOverworld3_Noise:
0958B                           MusicDataOverworld4_Noise:
0958B 88                        	.db $88
0958C 06                        	.db $06
0958D 82                        	.db $82
0958E 02                        	.db $02
0958F 01                        	.db $01
09590 02                        	.db $02
09591 00                        	.db $00
09592                           .include "src/music/segments/overworld/overworld-3-square1.asm"
09592                           MusicDataOverworld3_Square1:
09592 92                        	.db $92
09593 7E                        	.db $7E
09594 7E                        	.db $7E
09595 98                        	.db $98
09596 3E                        	.db $3E
09597 92                        	.db $92
09598 7E                        	.db $7E
09599 48                        	.db $48
0959A 7E                        	.db $7E
0959B 7E                        	.db $7E
0959C 50                        	.db $50
0959D 7E                        	.db $7E
0959E 9A                        	.db $9A
0959F 56                        	.db $56
095A0 92                        	.db $92
095A1 7E                        	.db $7E
095A2 50                        	.db $50
095A3 7E                        	.db $7E
095A4 48                        	.db $48
095A5 42                        	.db $42
095A6 7E                        	.db $7E
095A7 3E                        	.db $3E
095A8 3C                        	.db $3C
095A9 7E                        	.db $7E
095AA 3E                        	.db $3E
095AB 3C                        	.db $3C
095AC 7E                        	.db $7E
095AD 3E                        	.db $3E
095AE 3C                        	.db $3C
095AF 7E                        	.db $7E
095B0 34                        	.db $34
095B1 7E                        	.db $7E
095B2 7E                        	.db $7E
095B3 98                        	.db $98
095B4 3C                        	.db $3C
095B5 90                        	.db $90
095B6 34                        	.db $34
095B7 3C                        	.db $3C
095B8 34                        	.db $34
095B9 34                        	.db $34
095BA 3C                        	.db $3C
095BB 34                        	.db $34
095BC 3C                        	.db $3C
095BD 34                        	.db $34
095BE 3C                        	.db $3C
095BF 90                        	.db $90
095C0 34                        	.db $34
095C1 3C                        	.db $3C
095C2 34                        	.db $34
095C3 92                        	.db $92
095C4 7E                        	.db $7E
095C5 98                        	.db $98
095C6 3A                        	.db $3A
095C7 92                        	.db $92
095C8 3E                        	.db $3E
095C9 3A                        	.db $3A
095CA 7E                        	.db $7E
095CB 3E                        	.db $3E
095CC 3A                        	.db $3A
095CD 7E                        	.db $7E
095CE 3E                        	.db $3E
095CF 7E                        	.db $7E
095D0 7E                        	.db $7E
095D1 98                        	.db $98
095D2 48                        	.db $48
095D3 92                        	.db $92
095D4 46                        	.db $46
095D5 48                        	.db $48
095D6 7E                        	.db $7E
095D7 46                        	.db $46
095D8                           .include "src/music/segments/overworld/overworld-4-square1.asm"
095D8                           MusicDataOverworld4_Square1:
095D8 92                        	.db $92
095D9 3E                        	.db $3E
095DA 7E                        	.db $7E
095DB 3A                        	.db $3A
095DC 38                        	.db $38
095DD 7E                        	.db $7E
095DE 98                        	.db $98
095DF 48                        	.db $48
095E0 90                        	.db $90
095E1 38                        	.db $38
095E2 48                        	.db $48
095E3 38                        	.db $38
095E4 48                        	.db $48
095E5 38                        	.db $38
095E6 48                        	.db $48
095E7 38                        	.db $38
095E8 48                        	.db $48
095E9 38                        	.db $38
095EA 48                        	.db $48
095EB 38                        	.db $38
095EC 48                        	.db $48
095ED C2                        	.db $C2
095EE 7E                        	.db $7E
095EF 7E                        	.db $7E
095F0 7E                        	.db $7E
095F1 7E                        	.db $7E
095F2 46                        	.db $46
095F3 7E                        	.db $7E
095F4 42                        	.db $42
095F5 7E                        	.db $7E
095F6 3E                        	.db $3E
095F7 7E                        	.db $7E
095F8 3A                        	.db $3A
095F9 7E                        	.db $7E
095FA 36                        	.db $36
095FB 7E                        	.db $7E
095FC                           .include "src/music/segments/overworld/overworld-3-triangle.asm"
095FC                           MusicDataOverworld3_Triangle:
095FC 88                        	.db $88
095FD 30                        	.db $30
095FE 34                        	.db $34
095FF 38                        	.db $38
09600 3E                        	.db $3E
09601 42                        	.db $42
09602 3E                        	.db $3E
09603 38                        	.db $38
09604 30                        	.db $30
09605 34                        	.db $34
09606 38                        	.db $38
09607 3C                        	.db $3C
09608 2A                        	.db $2A
09609 82                        	.db $82
0960A 34                        	.db $34
0960B 7E                        	.db $7E
0960C 38                        	.db $38
0960D 88                        	.db $88
0960E 30                        	.db $30
0960F 2E                        	.db $2E
09610 2A                        	.db $2A
09611 26                        	.db $26
09612 3E                        	.db $3E
09613 3A                        	.db $3A
09614 34                        	.db $34
09615 2E                        	.db $2E
09616 26                        	.db $26
09617                           .include "src/music/segments/overworld/overworld-4-triangle.asm"
09617                           MusicDataOverworld4_Triangle:
09617 88                        	.db $88
09618 2A                        	.db $2A
09619 2E                        	.db $2E
0961A 30                        	.db $30
0961B 32                        	.db $32
0961C 34                        	.db $34
0961D 36                        	.db $36
0961E 82                        	.db $82
0961F 38                        	.db $38
09620 7E                        	.db $7E
09621 2E                        	.db $2E
09622 88                        	.db $88
09623 2A                        	.db $2A
09624 26                        	.db $26
09625 2E                        	.db $2E
09626                           .include "src/music/segments/overworld/overworld-5.asm"
09626                           MusicDataOverworld5:
09626                           MusicDataOverworld5_Square2:
09626 92                        	.db $92
09627 5A                        	.db $5A
09628 7E                        	.db $7E
09629 56                        	.db $56
0962A 50                        	.db $50
0962B 7E                        	.db $7E
0962C 9A                        	.db $9A
0962D 48                        	.db $48
0962E 82                        	.db $82
0962F 3C                        	.db $3C
09630 3E                        	.db $3E
09631 7E                        	.db $7E
09632 40                        	.db $40
09633 42                        	.db $42
09634 7E                        	.db $7E
09635 48                        	.db $48
09636 7E                        	.db $7E
09637 7E                        	.db $7E
09638 88                        	.db $88
09639 7E                        	.db $7E
0963A 82                        	.db $82
0963B 48                        	.db $48
0963C 88                        	.db $88
0963D 7E                        	.db $7E
0963E E2                        	.db $E2
0963F 7E                        	.db $7E
09640 7E                        	.db $7E
09641 50                        	.db $50
09642 00                        	.db $00
09643                           MusicDataOverworld5_Square1:
09643 92                        	.db $92
09644 48                        	.db $48
09645 7E                        	.db $7E
09646 46                        	.db $46
09647 3E                        	.db $3E
09648 7E                        	.db $7E
09649 9A                        	.db $9A
0964A 38                        	.db $38
0964B 88                        	.db $88
0964C 7E                        	.db $7E
0964D 82                        	.db $82
0964E 7E                        	.db $7E
0964F 3A                        	.db $3A
09650 7E                        	.db $7E
09651 38                        	.db $38
09652 7E                        	.db $7E
09653 7E                        	.db $7E
09654 88                        	.db $88
09655 7E                        	.db $7E
09656 82                        	.db $82
09657 38                        	.db $38
09658 88                        	.db $88
09659 7E                        	.db $7E
0965A E2                        	.db $E2
0965B 7E                        	.db $7E
0965C 7E                        	.db $7E
0965D 38                        	.db $38
0965E                           MusicDataOverworld5_Triangle:
0965E 2A                        	.db $2A
0965F 2E                        	.db $2E
09660 30                        	.db $30
09661 26                        	.db $26
09662 2A                        	.db $2A
09663 2E                        	.db $2E
09664 30                        	.db $30
09665 82                        	.db $82
09666 7E                        	.db $7E
09667 7E                        	.db $7E
09668 30                        	.db $30
09669 88                        	.db $88
0966A 7E                        	.db $7E
0966B 7E                        	.db $7E
0966C                           MusicDataOverworld5_Noise:
0966C 88                        	.db $88
0966D 06                        	.db $06
0966E 82                        	.db $82
0966F 02                        	.db $02
09670 01                        	.db $01
09671 02                        	.db $02
09672 00                        	.db $00
09673                           .include "src/music/segments/overworld/overworld-6.asm"
09673                           MusicDataOverworld6:
09673                           MusicDataOverworld6_Square2:
09673 E2                        	.db $E2
09674 7E                        	.db $7E
09675 7E                        	.db $7E
09676 52                        	.db $52
09677 4E                        	.db $4E
09678 7E                        	.db $7E
09679 50                        	.db $50
0967A 52                        	.db $52
0967B 7E                        	.db $7E
0967C 4E                        	.db $4E
0967D 50                        	.db $50
0967E 7E                        	.db $7E
0967F E8                        	.db $E8
09680 5E                        	.db $5E
09681 E2                        	.db $E2
09682 7E                        	.db $7E
09683 E8                        	.db $E8
09684 58                        	.db $58
09685 52                        	.db $52
09686 50                        	.db $50
09687 E2                        	.db $E2
09688 4C                        	.db $4C
09689 E0                        	.db $E0
0968A 50                        	.db $50
0968B 4C                        	.db $4C
0968C 48                        	.db $48
0968D E2                        	.db $E2
0968E 46                        	.db $46
0968F 7E                        	.db $7E
09690 48                        	.db $48
09691 E2                        	.db $E2
09692 4C                        	.db $4C
09693 7E                        	.db $7E
09694 48                        	.db $48
09695 46                        	.db $46
09696 7E                        	.db $7E
09697 EA                        	.db $EA
09698 48                        	.db $48
09699 E2                        	.db $E2
0969A 48                        	.db $48
0969B E8                        	.db $E8
0969C 46                        	.db $46
0969D 48                        	.db $48
0969E E2                        	.db $E2
0969F 7E                        	.db $7E
096A0 7E                        	.db $7E
096A1 E8                        	.db $E8
096A2 4C                        	.db $4C
096A3 E2                        	.db $E2
096A4 7E                        	.db $7E
096A5 E8                        	.db $E8
096A6 4A                        	.db $4A
096A7 E2                        	.db $E2
096A8 4C                        	.db $4C
096A9 7E                        	.db $7E
096AA E8                        	.db $E8
096AB 5A                        	.db $5A
096AC E2                        	.db $E2
096AD 7E                        	.db $7E
096AE E8                        	.db $E8
096AF 54                        	.db $54
096B0 56                        	.db $56
096B1 5A                        	.db $5A
096B2 EA                        	.db $EA
096B3 5E                        	.db $5E
096B4 5A                        	.db $5A
096B5 E8                        	.db $E8
096B6 58                        	.db $58
096B7 E2                        	.db $E2
096B8 7E                        	.db $7E
096B9 7E                        	.db $7E
096BA 7E                        	.db $7E
096BB 56                        	.db $56
096BC 7E                        	.db $7E
096BD 4C                        	.db $4C
096BE 46                        	.db $46
096BF 7E                        	.db $7E
096C0 3E                        	.db $3E
096C1 00                        	.db $00
096C2                           MusicDataOverworld6_Square1:
096C2 E2                        	.db $E2
096C3 7E                        	.db $7E
096C4 7E                        	.db $7E
096C5 3A                        	.db $3A
096C6 36                        	.db $36
096C7 7E                        	.db $7E
096C8 38                        	.db $38
096C9 3A                        	.db $3A
096CA 7E                        	.db $7E
096CB 36                        	.db $36
096CC 38                        	.db $38
096CD 7E                        	.db $7E
096CE E8                        	.db $E8
096CF 46                        	.db $46
096D0 E2                        	.db $E2
096D1 7E                        	.db $7E
096D2 E8                        	.db $E8
096D3 40                        	.db $40
096D4 3A                        	.db $3A
096D5 38                        	.db $38
096D6 E2                        	.db $E2
096D7 34                        	.db $34
096D8 E0                        	.db $E0
096D9 38                        	.db $38
096DA 34                        	.db $34
096DB 30                        	.db $30
096DC E2                        	.db $E2
096DD 2E                        	.db $2E
096DE 7E                        	.db $7E
096DF 30                        	.db $30
096E0 E2                        	.db $E2
096E1 34                        	.db $34
096E2 7E                        	.db $7E
096E3 30                        	.db $30
096E4 2E                        	.db $2E
096E5 7E                        	.db $7E
096E6 EA                        	.db $EA
096E7 30                        	.db $30
096E8 E2                        	.db $E2
096E9 30                        	.db $30
096EA E8                        	.db $E8
096EB 2E                        	.db $2E
096EC 30                        	.db $30
096ED E2                        	.db $E2
096EE 7E                        	.db $7E
096EF 7E                        	.db $7E
096F0 E8                        	.db $E8
096F1 34                        	.db $34
096F2 E2                        	.db $E2
096F3 7E                        	.db $7E
096F4 E8                        	.db $E8
096F5 32                        	.db $32
096F6 E2                        	.db $E2
096F7 34                        	.db $34
096F8 7E                        	.db $7E
096F9 E8                        	.db $E8
096FA 42                        	.db $42
096FB E2                        	.db $E2
096FC 7E                        	.db $7E
096FD E8                        	.db $E8
096FE 3C                        	.db $3C
096FF 3E                        	.db $3E
09700 42                        	.db $42
09701 E2                        	.db $E2
09702 46                        	.db $46
09703 7E                        	.db $7E
09704 44                        	.db $44
09705 46                        	.db $46
09706 7E                        	.db $7E
09707 5E                        	.db $5E
09708 42                        	.db $42
09709 7E                        	.db $7E
0970A 40                        	.db $40
0970B 42                        	.db $42
0970C 7E                        	.db $7E
0970D 5A                        	.db $5A
0970E 40                        	.db $40
0970F 7E                        	.db $7E
09710 3E                        	.db $3E
09711 40                        	.db $40
09712 7E                        	.db $7E
09713 58                        	.db $58
09714 3E                        	.db $3E
09715 7E                        	.db $7E
09716 34                        	.db $34
09717 2E                        	.db $2E
09718 7E                        	.db $7E
09719 26                        	.db $26
0971A                           MusicDataOverworld6_Triangle:
0971A 88                        	.db $88
0971B 38                        	.db $38
0971C 46                        	.db $46
0971D 40                        	.db $40
0971E 3A                        	.db $3A
0971F 38                        	.db $38
09720 34                        	.db $34
09721 2E                        	.db $2E
09722 28                        	.db $28
09723 2A                        	.db $2A
09724 2E                        	.db $2E
09725 30                        	.db $30
09726 34                        	.db $34
09727 38                        	.db $38
09728 30                        	.db $30
09729 2E                        	.db $2E
0972A 2A                        	.db $2A
0972B 34                        	.db $34
0972C 38                        	.db $38
0972D 3C                        	.db $3C
0972E 42                        	.db $42
0972F 34                        	.db $34
09730 2A                        	.db $2A
09731 34                        	.db $34
09732 3C                        	.db $3C
09733 3E                        	.db $3E
09734 3A                        	.db $3A
09735 34                        	.db $34
09736 2E                        	.db $2E
09737 34                        	.db $34
09738 2E                        	.db $2E
09739 2A                        	.db $2A
0973A 26                        	.db $26
0973B                           MusicDataOverworld6_Noise:
0973B 88                        	.db $88
0973C 06                        	.db $06
0973D 82                        	.db $82
0973E 10                        	.db $10
0973F 01                        	.db $01
09740 10                        	.db $10
09741 00                        	.db $00
09742                           
09742                           ;
09742                           ; Boss music segment...
09742                           ;
09742                           .include "src/music/segments/boss/boss.asm"
09742                           MusicDataBoss:
09742                           MusicDataBoss_Square2:
09742 94                        	.db $94
09743 34                        	.db $34
09744 36                        	.db $36
09745 36                        	.db $36
09746 34                        	.db $34
09747 36                        	.db $36
09748 36                        	.db $36
09749 34                        	.db $34
0974A 36                        	.db $36
0974B 34                        	.db $34
0974C 36                        	.db $36
0974D 36                        	.db $36
0974E 34                        	.db $34
0974F 36                        	.db $36
09750 36                        	.db $36
09751 34                        	.db $34
09752 36                        	.db $36
09753 34                        	.db $34
09754 36                        	.db $36
09755 36                        	.db $36
09756 34                        	.db $34
09757 36                        	.db $36
09758 36                        	.db $36
09759 34                        	.db $34
0975A 36                        	.db $36
0975B 34                        	.db $34
0975C 36                        	.db $36
0975D 36                        	.db $36
0975E 34                        	.db $34
0975F 36                        	.db $36
09760 36                        	.db $36
09761 34                        	.db $34
09762 36                        	.db $36
09763 38                        	.db $38
09764 3A                        	.db $3A
09765 3A                        	.db $3A
09766 38                        	.db $38
09767 3A                        	.db $3A
09768 3A                        	.db $3A
09769 38                        	.db $38
0976A 3A                        	.db $3A
0976B 38                        	.db $38
0976C 3A                        	.db $3A
0976D 3A                        	.db $3A
0976E 38                        	.db $38
0976F 3A                        	.db $3A
09770 3A                        	.db $3A
09771 38                        	.db $38
09772 3A                        	.db $3A
09773 38                        	.db $38
09774 3A                        	.db $3A
09775 3A                        	.db $3A
09776 38                        	.db $38
09777 3A                        	.db $3A
09778 3A                        	.db $3A
09779 38                        	.db $38
0977A 3A                        	.db $3A
0977B 38                        	.db $38
0977C 3A                        	.db $3A
0977D 3A                        	.db $3A
0977E 38                        	.db $38
0977F 3A                        	.db $3A
09780 3A                        	.db $3A
09781 38                        	.db $38
09782 3A                        	.db $3A
09783 00                        	.db $00
09784                           MusicDataBoss_Square1:
09784 94                        	.db $94
09785 7E                        	.db $7E
09786 42                        	.db $42
09787 42                        	.db $42
09788 7E                        	.db $7E
09789 42                        	.db $42
0978A 42                        	.db $42
0978B 7E                        	.db $7E
0978C 42                        	.db $42
0978D 7E                        	.db $7E
0978E 42                        	.db $42
0978F 42                        	.db $42
09790 7E                        	.db $7E
09791 42                        	.db $42
09792 42                        	.db $42
09793 7E                        	.db $7E
09794 42                        	.db $42
09795 7E                        	.db $7E
09796 40                        	.db $40
09797 40                        	.db $40
09798 7E                        	.db $7E
09799 40                        	.db $40
0979A 40                        	.db $40
0979B 7E                        	.db $7E
0979C 40                        	.db $40
0979D 7E                        	.db $7E
0979E 40                        	.db $40
0979F 40                        	.db $40
097A0 7E                        	.db $7E
097A1 40                        	.db $40
097A2 40                        	.db $40
097A3 7E                        	.db $7E
097A4 40                        	.db $40
097A5 7E                        	.db $7E
097A6 46                        	.db $46
097A7 46                        	.db $46
097A8 7E                        	.db $7E
097A9 46                        	.db $46
097AA 46                        	.db $46
097AB 7E                        	.db $7E
097AC 46                        	.db $46
097AD 7E                        	.db $7E
097AE 46                        	.db $46
097AF 46                        	.db $46
097B0 7E                        	.db $7E
097B1 46                        	.db $46
097B2 46                        	.db $46
097B3 7E                        	.db $7E
097B4 46                        	.db $46
097B5 7E                        	.db $7E
097B6 44                        	.db $44
097B7 44                        	.db $44
097B8 7E                        	.db $7E
097B9 44                        	.db $44
097BA 44                        	.db $44
097BB 7E                        	.db $7E
097BC 44                        	.db $44
097BD 7E                        	.db $7E
097BE 44                        	.db $44
097BF 44                        	.db $44
097C0 7E                        	.db $7E
097C1 44                        	.db $44
097C2 44                        	.db $44
097C3 7E                        	.db $7E
097C4 44                        	.db $44
097C5                           MusicDataBoss_Triangle:
097C5 89                        	.db $89
097C6 3C                        	.db $3C
097C7 3C                        	.db $3C
097C8 88                        	.db $88
097C9 3C                        	.db $3C
097CA 89                        	.db $89
097CB 3C                        	.db $3C
097CC 3C                        	.db $3C
097CD 88                        	.db $88
097CE 3C                        	.db $3C
097CF 89                        	.db $89
097D0 3A                        	.db $3A
097D1 3A                        	.db $3A
097D2 88                        	.db $88
097D3 3A                        	.db $3A
097D4 89                        	.db $89
097D5 3A                        	.db $3A
097D6 3A                        	.db $3A
097D7 88                        	.db $88
097D8 3A                        	.db $3A
097D9 89                        	.db $89
097DA 40                        	.db $40
097DB 40                        	.db $40
097DC 88                        	.db $88
097DD 40                        	.db $40
097DE 89                        	.db $89
097DF 40                        	.db $40
097E0 40                        	.db $40
097E1 88                        	.db $88
097E2 40                        	.db $40
097E3 89                        	.db $89
097E4 3E                        	.db $3E
097E5 3E                        	.db $3E
097E6 88                        	.db $88
097E7 3E                        	.db $3E
097E8 89                        	.db $89
097E9 3E                        	.db $3E
097EA 3E                        	.db $3E
097EB 88                        	.db $88
097EC 3E                        	.db $3E
097ED                           
097ED                           ;
097ED                           ; Wart's final boss music segment
097ED                           ;
097ED                           .include "src/music/segments/wart/wart.asm"
097ED                           MusicDataWart:
097ED                           MusicDataWart_Square2:
097ED A9                        	.db $A9
097EE 56                        	.db $56
097EF 54                        	.db $54
097F0 A8                        	.db $A8
097F1 4C                        	.db $4C
097F2 A9                        	.db $A9
097F3 54                        	.db $54
097F4 52                        	.db $52
097F5 A8                        	.db $A8
097F6 4A                        	.db $4A
097F7 A9                        	.db $A9
097F8 52                        	.db $52
097F9 50                        	.db $50
097FA A8                        	.db $A8
097FB 48                        	.db $48
097FC A4                        	.db $A4
097FD 4E                        	.db $4E
097FE AB                        	.db $AB
097FF 4C                        	.db $4C
09800 A4                        	.db $A4
09801 7E                        	.db $7E
09802 A9                        	.db $A9
09803 5A                        	.db $5A
09804 58                        	.db $58
09805 A8                        	.db $A8
09806 50                        	.db $50
09807 A9                        	.db $A9
09808 58                        	.db $58
09809 56                        	.db $56
0980A A8                        	.db $A8
0980B 4E                        	.db $4E
0980C A9                        	.db $A9
0980D 56                        	.db $56
0980E 54                        	.db $54
0980F A8                        	.db $A8
09810 4C                        	.db $4C
09811 A4                        	.db $A4
09812 52                        	.db $52
09813 AB                        	.db $AB
09814 50                        	.db $50
09815 A4                        	.db $A4
09816 7E                        	.db $7E
09817 4E                        	.db $4E
09818 4C                        	.db $4C
09819 4E                        	.db $4E
0981A 4C                        	.db $4C
0981B 4E                        	.db $4E
0981C 4C                        	.db $4C
0981D 4E                        	.db $4E
0981E 4C                        	.db $4C
0981F 50                        	.db $50
09820 4E                        	.db $4E
09821 50                        	.db $50
09822 4E                        	.db $4E
09823 50                        	.db $50
09824 4E                        	.db $4E
09825 50                        	.db $50
09826 4E                        	.db $4E
09827 52                        	.db $52
09828 50                        	.db $50
09829 52                        	.db $52
0982A 50                        	.db $50
0982B 52                        	.db $52
0982C 50                        	.db $50
0982D 52                        	.db $52
0982E 50                        	.db $50
0982F 54                        	.db $54
09830 52                        	.db $52
09831 54                        	.db $54
09832 52                        	.db $52
09833 54                        	.db $54
09834 52                        	.db $52
09835 54                        	.db $54
09836 52                        	.db $52
09837 00                        	.db $00
09838                           MusicDataWart_Square1:
09838 A9                        	.db $A9
09839 44                        	.db $44
0983A 42                        	.db $42
0983B A8                        	.db $A8
0983C 3A                        	.db $3A
0983D A9                        	.db $A9
0983E 42                        	.db $42
0983F 40                        	.db $40
09840 A8                        	.db $A8
09841 38                        	.db $38
09842 A9                        	.db $A9
09843 40                        	.db $40
09844 3E                        	.db $3E
09845 A8                        	.db $A8
09846 36                        	.db $36
09847 A4                        	.db $A4
09848 3C                        	.db $3C
09849 AB                        	.db $AB
0984A 3A                        	.db $3A
0984B A4                        	.db $A4
0984C 7E                        	.db $7E
0984D A9                        	.db $A9
0984E 48                        	.db $48
0984F 46                        	.db $46
09850 A8                        	.db $A8
09851 3E                        	.db $3E
09852 A9                        	.db $A9
09853 46                        	.db $46
09854 44                        	.db $44
09855 A8                        	.db $A8
09856 3C                        	.db $3C
09857 A9                        	.db $A9
09858 44                        	.db $44
09859 42                        	.db $42
0985A A8                        	.db $A8
0985B 3A                        	.db $3A
0985C A4                        	.db $A4
0985D 42                        	.db $42
0985E AB                        	.db $AB
0985F 40                        	.db $40
09860 A4                        	.db $A4
09861 7E                        	.db $7E
09862 A4                        	.db $A4
09863 42                        	.db $42
09864 40                        	.db $40
09865 42                        	.db $42
09866 40                        	.db $40
09867 42                        	.db $42
09868 40                        	.db $40
09869 42                        	.db $42
0986A 40                        	.db $40
0986B 44                        	.db $44
0986C 42                        	.db $42
0986D 44                        	.db $44
0986E 42                        	.db $42
0986F 44                        	.db $44
09870 42                        	.db $42
09871 44                        	.db $44
09872 42                        	.db $42
09873 46                        	.db $46
09874 44                        	.db $44
09875 46                        	.db $46
09876 44                        	.db $44
09877 46                        	.db $46
09878 44                        	.db $44
09879 46                        	.db $46
0987A 44                        	.db $44
0987B 48                        	.db $48
0987C 46                        	.db $46
0987D 48                        	.db $48
0987E 46                        	.db $46
0987F 48                        	.db $48
09880 46                        	.db $46
09881 48                        	.db $48
09882 46                        	.db $46
09883                           MusicDataWart_Triangle:
09883 84                        	.db $84
09884 3E                        	.db $3E
09885 42                        	.db $42
09886 44                        	.db $44
09887 3E                        	.db $3E
09888 42                        	.db $42
09889 44                        	.db $44
0988A 3E                        	.db $3E
0988B 44                        	.db $44
0988C 3E                        	.db $3E
0988D 42                        	.db $42
0988E 44                        	.db $44
0988F 3E                        	.db $3E
09890 42                        	.db $42
09891 44                        	.db $44
09892 3E                        	.db $3E
09893 44                        	.db $44
09894 3E                        	.db $3E
09895 42                        	.db $42
09896 44                        	.db $44
09897 3E                        	.db $3E
09898 42                        	.db $42
09899 44                        	.db $44
0989A 3E                        	.db $3E
0989B 44                        	.db $44
0989C 3E                        	.db $3E
0989D 42                        	.db $42
0989E 44                        	.db $44
0989F 3E                        	.db $3E
098A0 42                        	.db $42
098A1 44                        	.db $44
098A2 3E                        	.db $3E
098A3 44                        	.db $44
098A4 3C                        	.db $3C
098A5 40                        	.db $40
098A6 42                        	.db $42
098A7 3C                        	.db $3C
098A8 40                        	.db $40
098A9 42                        	.db $42
098AA 3C                        	.db $3C
098AB 42                        	.db $42
098AC 3C                        	.db $3C
098AD 40                        	.db $40
098AE 42                        	.db $42
098AF 3C                        	.db $3C
098B0 40                        	.db $40
098B1 42                        	.db $42
098B2 3C                        	.db $3C
098B3 42                        	.db $42
098B4 3C                        	.db $3C
098B5 40                        	.db $40
098B6 42                        	.db $42
098B7 3C                        	.db $3C
098B8 40                        	.db $40
098B9 42                        	.db $42
098BA 3C                        	.db $3C
098BB 42                        	.db $42
098BC 3C                        	.db $3C
098BD 40                        	.db $40
098BE 42                        	.db $42
098BF 3C                        	.db $3C
098C0 40                        	.db $40
098C1 42                        	.db $42
098C2 3C                        	.db $3C
098C3 42                        	.db $42
098C4 84                        	.db $84
098C5 3A                        	.db $3A
098C6 88                        	.db $88
098C7 3A                        	.db $3A
098C8 3A                        	.db $3A
098C9 3A                        	.db $3A
098CA 84                        	.db $84
098CB 3A                        	.db $3A
098CC 3C                        	.db $3C
098CD 88                        	.db $88
098CE 3C                        	.db $3C
098CF 3C                        	.db $3C
098D0 3C                        	.db $3C
098D1 84                        	.db $84
098D2 3C                        	.db $3C
098D3 3E                        	.db $3E
098D4 88                        	.db $88
098D5 3E                        	.db $3E
098D6 3E                        	.db $3E
098D7 3E                        	.db $3E
098D8 84                        	.db $84
098D9 3E                        	.db $3E
098DA 40                        	.db $40
098DB 88                        	.db $88
098DC 40                        	.db $40
098DD 40                        	.db $40
098DE 40                        	.db $40
098DF 84                        	.db $84
098E0 40                        	.db $40
098E1                           
098E1                           ;
098E1                           ; Various sound effect jingles; not really full songs...
098E1                           ;
098E1                           .include "src/music/segments/jingles/mushroom-bonus-chance.asm"
098E1                           MusicDataMushroomBonusChance:
098E1                           MusicDataMushroomBonusChance_Square2:
098E1 82                        	.db $82
098E2 46                        	.db $46
098E3 48                        	.db $48
098E4 4A                        	.db $4A
098E5 4C                        	.db $4C
098E6 7E                        	.db $7E
098E7 56                        	.db $56
098E8 88                        	.db $88
098E9 52                        	.db $52
098EA 00                        	.db $00
098EB                           MusicDataMushroomBonusChance_Square1:
098EB 82                        	.db $82
098EC 3E                        	.db $3E
098ED 42                        	.db $42
098EE 44                        	.db $44
098EF 46                        	.db $46
098F0 7E                        	.db $7E
098F1 50                        	.db $50
098F2 88                        	.db $88
098F3 4C                        	.db $4C
098F4                           .include "src/music/segments/jingles/game-over.asm"
098F4                           MusicDataGameOver:
098F4                           MusicDataGameOver_Square2:
098F4 94                        	.db $94
098F5 56                        	.db $56
098F6 5A                        	.db $5A
098F7 60                        	.db $60
098F8 3E                        	.db $3E
098F9 42                        	.db $42
098FA 48                        	.db $48
098FB 26                        	.db $26
098FC 2A                        	.db $2A
098FD 98                        	.db $98
098FE 30                        	.db $30
098FF 26                        	.db $26
09900 30                        	.db $30
09901 00                        	.db $00
09902                           MusicDataGameOver_Square1:
09902 98                        	.db $98
09903 7E                        	.db $7E
09904 94                        	.db $94
09905 30                        	.db $30
09906 98                        	.db $98
09907 7E                        	.db $7E
09908 94                        	.db $94
09909 30                        	.db $30
0990A 98                        	.db $98
0990B 7E                        	.db $7E
0990C 30                        	.db $30
0990D 3A                        	.db $3A
0990E 38                        	.db $38
0990F                           MusicDataGameOver_Triangle:
0990F 88                        	.db $88
09910 7E                        	.db $7E
09911 89                        	.db $89
09912 60                        	.db $60
09913 48                        	.db $48
09914 88                        	.db $88
09915 30                        	.db $30
09916 3E                        	.db $3E
09917 30                        	.db $30
09918                           .include "src/music/segments/jingles/boss-beaten.asm"
09918                           MusicDataBossBeaten:
09918                           MusicDataBossBeaten_Square2:
09918 94                        	.db $94
09919 42                        	.db $42
0991A 48                        	.db $48
0991B 4C                        	.db $4C
0991C 42                        	.db $42
0991D 48                        	.db $48
0991E 4C                        	.db $4C
0991F 3E                        	.db $3E
09920 42                        	.db $42
09921 50                        	.db $50
09922 3E                        	.db $3E
09923 42                        	.db $42
09924 52                        	.db $52
09925 50                        	.db $50
09926 48                        	.db $48
09927 42                        	.db $42
09928 7E                        	.db $7E
09929 3A                        	.db $3A
0992A 42                        	.db $42
0992B 48                        	.db $48
0992C 50                        	.db $50
0992D 4C                        	.db $4C
0992E 3E                        	.db $3E
0992F 42                        	.db $42
09930 7E                        	.db $7E
09931 30                        	.db $30
09932 7E                        	.db $7E
09933 26                        	.db $26
09934 2A                        	.db $2A
09935 7E                        	.db $7E
09936 26                        	.db $26
09937 20                        	.db $20
09938 7E                        	.db $7E
09939 98                        	.db $98
0993A 18                        	.db $18
0993B 26                        	.db $26
0993C 30                        	.db $30
0993D 7E                        	.db $7E
0993E 00                        	.db $00
0993F                           MusicDataBossBeaten_Square1:
0993F 88                        	.db $88
09940 7E                        	.db $7E
09941 30                        	.db $30
09942 7E                        	.db $7E
09943 30                        	.db $30
09944 7E                        	.db $7E
09945 34                        	.db $34
09946 7E                        	.db $7E
09947 38                        	.db $38
09948 7E                        	.db $7E
09949 42                        	.db $42
0994A 7E                        	.db $7E
0994B 46                        	.db $46
0994C 48                        	.db $48
0994D 94                        	.db $94
0994E 3E                        	.db $3E
0994F 98                        	.db $98
09950 42                        	.db $42
09951 94                        	.db $94
09952 3E                        	.db $3E
09953 98                        	.db $98
09954 38                        	.db $38
09955 30                        	.db $30
09956 7E                        	.db $7E
09957 9A                        	.db $9A
09958 48                        	.db $48
09959                           MusicDataBossBeaten_Triangle:
09959 88                        	.db $88
0995A 3A                        	.db $3A
0995B 52                        	.db $52
0995C 3C                        	.db $3C
0995D 54                        	.db $54
0995E 3E                        	.db $3E
0995F 56                        	.db $56
09960 42                        	.db $42
09961 5A                        	.db $5A
09962 4C                        	.db $4C
09963 3A                        	.db $3A
09964 3E                        	.db $3E
09965 4C                        	.db $4C
09966 48                        	.db $48
09967 7E                        	.db $7E
09968 7E                        	.db $7E
09969 7E                        	.db $7E
0996A 48                        	.db $48
0996B 3E                        	.db $3E
0996C 30                        	.db $30
0996D 7E                        	.db $7E
0996E                           .include "src/music/segments/jingles/crystal.asm"
0996E                           MusicDataCrystal:
0996E                           MusicDataCrystal_Square2:
0996E 89                        	.db $89
0996F 40                        	.db $40
09970 84                        	.db $84
09971 40                        	.db $40
09972 88                        	.db $88
09973 40                        	.db $40
09974 88                        	.db $88
09975 56                        	.db $56
09976 56                        	.db $56
09977 52                        	.db $52
09978 8B                        	.db $8B
09979 50                        	.db $50
0997A 00                        	.db $00
0997B                           MusicDataCrystal_Square1:
0997B 89                        	.db $89
0997C 36                        	.db $36
0997D 84                        	.db $84
0997E 36                        	.db $36
0997F 88                        	.db $88
09980 36                        	.db $36
09981 88                        	.db $88
09982 44                        	.db $44
09983 88                        	.db $88
09984 44                        	.db $44
09985 88                        	.db $88
09986 40                        	.db $40
09987 8B                        	.db $8B
09988 3E                        	.db $3E
09989                           MusicDataCrystal_Triangle:
09989 89                        	.db $89
0998A 40                        	.db $40
0998B 84                        	.db $84
0998C 40                        	.db $40
0998D 88                        	.db $88
0998E 40                        	.db $40
0998F 88                        	.db $88
09990 4E                        	.db $4E
09991 4E                        	.db $4E
09992 4A                        	.db $4A
09993 8B                        	.db $8B
09994 48                        	.db $48
09995                           .include "src/music/segments/jingles/death.asm"
09995                           MusicDataDeath:
09995                           MusicDataDeath_Square2:
09995 84                        	.db $84
09996 7E                        	.db $7E
09997 82                        	.db $82
09998 4E                        	.db $4E
09999 7E                        	.db $7E
0999A 46                        	.db $46
0999B 3E                        	.db $3E
0999C 7E                        	.db $7E
0999D 3A                        	.db $3A
0999E 8A                        	.db $8A
0999F 38                        	.db $38
099A0 00                        	.db $00
099A1                           MusicDataDeath_Square1:
099A1 84                        	.db $84
099A2 7E                        	.db $7E
099A3 82                        	.db $82
099A4 3E                        	.db $3E
099A5 7E                        	.db $7E
099A6 34                        	.db $34
099A7 2E                        	.db $2E
099A8 7E                        	.db $7E
099A9 2A                        	.db $2A
099AA 8A                        	.db $8A
099AB 26                        	.db $26
099AC                           MusicDataDeath_Triangle:
099AC 84                        	.db $84
099AD 7E                        	.db $7E
099AE 88                        	.db $88
099AF 46                        	.db $46
099B0 3E                        	.db $3E
099B1 8A                        	.db $8A
099B2 30                        	.db $30
099B3                           
099B3                           ; Instrument data and definitions
099B3                           .include "src/music/instruments.asm"
099B3                           ;
099B3                           ; Instrument Sound Data
099B3                           ; =====================
099B3                           ;
099B3                           ; Each "instrument" is a lookup table of duty/volume/envelope values that are
099B3                           ; read backwards from the end
099B3                           ;
099B3                           ; The normal version of an instrument is 64 bytes
099B3                           ; The shorter version of an instrument is 23 bytes
099B3                           ;
099B3                           InstrumentSoundData:
099B3                           
099B3                           ; Long square
099B3                           ; 50% duty cycle (square) with slight decay
099B3                           InstrumentDVE_80: ; $A18D
099B3 90 95 95 95 95 95 96 96.. 	.db $90, $95, $95, $95, $95, $95, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96
099C3 96 96 96 96 96 96 96 96.. 	.db $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96
099D3 96 96 96 96 96 96 96 96.. 	.db $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96
099E3 96 96 96 96 96 96 96 96.. 	.db $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $97, $97, $97, $97, $98, $98
099F3                           
099F3                           ; Long square
099F3                           ; 50% duty cycle (square) with slight decay
099F3                           InstrumentDVE_80_Short: ; $A1CD
099F3 90 92 94 96 96 96 96 96.. 	.db $90, $92, $94, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96, $96
09A03 96 97 97 97 97 98 98      	.db $96, $97, $97, $97, $97, $98, $98
09A0A                           
09A0A                           ; Short square
09A0A                           ; 25% duty cycle with pronounced decay
09A0A                           InstrumentDVE_90_E0: ; $A1E4
09A0A 51 51 51 51 51 51 51 51.. 	.db $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51
09A1A 51 51 51 51 51 51 51 51.. 	.db $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51
09A2A 51 51 51 51 51 51 51 51.. 	.db $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51
09A3A 51 51 51 51 51 51 52 53.. 	.db $51, $51, $51, $51, $51, $51, $52, $53, $54, $55, $56, $57, $58, $59, $5A, $5B
09A4A                           
09A4A                           ; Short square
09A4A                           ; 25% duty cycle with pronounced decay
09A4A                           InstrumentDVE_90_E0_Short: ; $A224
09A4A 51 51 51 51 51 51 51 51.. 	.db $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $52, $53, $54
09A5A 55 56 57 58 59 5A 5B      	.db $55, $56, $57, $58, $59, $5A, $5B
09A61                           
09A61                           ; Electric Piano
09A61                           ; 12.5% duty cycle with pronounced decay
09A61                           InstrumentDVE_A0: ; $A23B
09A61 10 11 11 11 12 12 12 13.. 	.db $10, $11, $11, $11, $12, $12, $12, $13, $13, $14, $14, $14, $14, $15, $15, $15
09A71 15 16 16 16 17 17 17 17.. 	.db $15, $16, $16, $16, $17, $17, $17, $17, $17, $17, $17, $18, $18, $18, $18, $18
09A81 18 18 18 18 18 18 18 18.. 	.db $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
09A91 18 18 18 18 18 18 18 18.. 	.db $18, $18, $18, $18, $18, $18, $18, $18, $19, $19, $19, $1A, $1A, $1B, $1B, $1C
09AA1                           
09AA1                           ; Electric Piano
09AA1                           ; 12.5% duty cycle with pronounced decay
09AA1                           InstrumentDVE_A0_Short: ; $A27B
09AA1 10 11 12 13 14 15 16 17.. 	.db $10, $11, $12, $13, $14, $15, $16, $17, $17, $18, $18, $18, $18, $18, $18, $18
09AB1 19 19 19 1A 1A 1B 1B 1C   	.db $19, $19, $19, $1A, $1A, $1B, $1B, $1C
09AB9                           
09AB9                           ; Organ
09AB9                           ; 25% duty cycle with slight decay
09AB9                           InstrumentDVE_B0: ; $A293
09AB9 51 52 52 52 52 53 53 53.. 	.db $51, $52, $52, $52, $52, $53, $53, $53, $53, $53, $53, $53, $54, $54, $54, $54
09AC9 54 54 54 54 54 55 55 55.. 	.db $54, $54, $54, $54, $54, $55, $55, $55, $55, $55, $55, $56, $56, $56, $56, $56
09AD9 56 56 56 56 56 56 56 56.. 	.db $56, $56, $56, $56, $56, $56, $56, $56, $56, $56, $56, $56, $56, $56, $56, $56
09AE9 56 56 56 56 56 56 56 55.. 	.db $56, $56, $56, $56, $56, $56, $56, $55, $55, $56, $56, $56, $56, $56, $56, $56
09AF9                           
09AF9                           ; Organ
09AF9                           ; 25% duty cycle with slight decay
09AF9                           InstrumentDVE_B0_Short: ; $A2D3
09AF9 51 52 52 52 52 53 53 53.. 	.db $51, $52, $52, $52, $52, $53, $53, $53, $53, $53, $53, $53, $54, $54, $54, $54
09B09 54 54 54 55 55 56 56      	.db $54, $54, $54, $55, $55, $56, $56
09B10                           
09B10                           ; Strings
09B10                           ; 25% duty cycle with slow attack
09B10                           InstrumentDVE_C0_Short: ; $A2EA
09B10 51 52 53 54 54 55 56 56.. 	.db $51, $52, $53, $54, $54, $55, $56, $56, $57, $58, $59, $5A, $5B, $5B, $5B, $5B
09B20 5B 5A 59 58 56 55 55      	.db $5B, $5A, $59, $58, $56, $55, $55
09B27                           
09B27                           ; Strings
09B27                           ; 25% duty cycle with slow attack
09B27                           InstrumentDVE_C0: ; $A301
09B27 51 52 52 51 52 52 52 53.. 	.db $51, $52, $52, $51, $52, $52, $52, $53, $53, $53, $53, $53, $53, $54, $54, $54
09B37 54 54 54 55 55 55 55 55.. 	.db $54, $54, $54, $55, $55, $55, $55, $55, $56, $56, $56, $57, $57, $57, $57, $57
09B47 58 58 58 58 58 58 58 58.. 	.db $58, $58, $58, $58, $58, $58, $58, $58, $58, $58, $59, $59, $59, $59, $5A, $5A
09B57 5A 5A 5A 5B 5B 5B 5B 5B.. 	.db $5A, $5A, $5A, $5B, $5B, $5B, $5B, $5B, $5B, $5B, $5A, $59, $58, $56, $55, $55
09B67                           
09B67                           ; Pluck
09B67                           ; 50% to -25% to 12.5% to 12.5% duty cycle with pronounced decay
09B67                           InstrumentDVE_D0: ; $A341
09B67 50 50 50 50 50 50 50 50.. 	.db $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50
09B77 51 51 51 51 51 51 51 51.. 	.db $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51
09B87 51 51 51 51 51 51 51 51.. 	.db $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51
09B97 51 51 51 51 51 51 52 53.. 	.db $51, $51, $51, $51, $51, $51, $52, $53, $54, $55, $56, $57, $58, $19, $DA, $9B
09BA7                           
09BA7                           ; Pluck
09BA7                           ; 50% to -25% to 12.5% to 12.5% duty cycle with pronounced decay
09BA7                           InstrumentDVE_D0_Short: ; $A381
09BA7 50 51 51 51 51 51 51 51.. 	.db $50, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $51, $52, $53, $54
09BB7 55 56 57 58 19 DA 9B      	.db $55, $56, $57, $58, $19, $DA, $9B
09BBE                           
09BBE                           IFNDEF PROTOTYPE_INSTRUMENTS
09BBE                           ; Soft pluck
09BBE                           ; 25% duty cycle with pronounced decay
09BBE                           InstrumentDVE_F0_Short: ; $A398
09BBE 50 50 50 50 50 50 50 50.. 	.db $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $51, $51, $51, $51
09BCE 52 52 52 53 53 54 55      	.db $52, $52, $52, $53, $53, $54, $55
09BD5                           
09BD5                           ; Soft pluck
09BD5                           ; 25% duty cycle with pronounced decay
09BD5                           InstrumentDVE_F0: ; $A3AF
09BD5 50 50 50 50 50 50 50 50.. 	.db $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50
09BE5 50 50 50 50 50 50 50 50.. 	.db $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50
09BF5 50 50 50 50 50 50 50 50.. 	.db $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50
09C05 50 50 50 50 50 51 51 51.. 	.db $50, $50, $50, $50, $50, $51, $51, $51, $51, $52, $52, $52, $53, $53, $54, $55
09C15                           
09C15                           ENDIF
09C15                           IFDEF PROTOTYPE_INSTRUMENTS
09C15                           ; Soft pluck
09C15                           ; 25% duty cycle with pronounced decay
09C15                           InstrumentDVE_F0_Short:
09C15                           	.db $54, $54, $55, $56, $56, $57, $58, $59, $5A, $5B, $5B, $5B, $5B, $5B, $5B, $5B
09C15                           	.db $5B, $5B, $5B, $5D
09C15                           
09C15                           ; Soft pluck
09C15                           ; 25% duty cycle with pronounced decay
09C15                           InstrumentDVE_F0:
09C15                           	.db $51, $51, $51, $51, $52, $52, $52, $53, $53, $53, $53, $53, $53, $54, $54, $54
09C15                           	.db $54, $54, $54, $55, $55, $55, $55, $55, $56, $56, $56, $57, $57, $57, $57, $57
09C15                           	.db $58, $58, $58, $58, $58, $58, $58, $58, $58, $58, $59, $59, $59, $59, $5A, $5A
09C15                           	.db $5A, $5A, $5A, $5B, $5B, $5B, $5B, $5B, $5B, $5B, $5B, $5B, $5C, $5C, $5C, $5D
09C15                           
09C15                           ENDIF
09C15 FF FF FF FF FF FF FF FF.. .pad $c000, $ff
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; Bank 6 and 7. Level handling ode, I think.
0C000                           ; Hmm, I wonder how this actually works when
0C000                           ; dealing with the fact the level data is
0C000                           ; in another bank...
0C000                           ; Bank 7 is completely empty.
0C000                           .base $8000
08000                           .include "src/prg-6-7.asm"
08000                           ;
08000                           ; Bank 6 & Bank 7
08000                           ; ===============
08000                           ;
08000                           ; What's inside:
08000                           ;
08000                           ;   - Level palettes
08000                           ;   - Groundset data
08000                           ;   - Object tiles
08000                           ;   - Level handling code
08000                           ;
08000                           
08000                           WorldBackgroundPalettePointersLo:
08000 1C                        	.db <World1BackgroundPalettes
08001 B0                        	.db <World2BackgroundPalettes
08002 44                        	.db <World3BackgroundPalettes
08003 D8                        	.db <World4BackgroundPalettes
08004 6C                        	.db <World5BackgroundPalettes
08005 00                        	.db <World6BackgroundPalettes
08006 94                        	.db <World7BackgroundPalettes
08007                           
08007                           WorldSpritePalettePointersLo:
08007 8C                        	.db <World1SpritePalettes
08008 20                        	.db <World2SpritePalettes
08009 B4                        	.db <World3SpritePalettes
0800A 48                        	.db <World4SpritePalettes
0800B DC                        	.db <World5SpritePalettes
0800C 70                        	.db <World6SpritePalettes
0800D 04                        	.db <World7SpritePalettes
0800E                           
0800E                           WorldBackgroundPalettePointersHi:
0800E 80                        	.db >World1BackgroundPalettes
0800F 80                        	.db >World2BackgroundPalettes
08010 81                        	.db >World3BackgroundPalettes
08011 81                        	.db >World4BackgroundPalettes
08012 82                        	.db >World5BackgroundPalettes
08013 83                        	.db >World6BackgroundPalettes
08014 83                        	.db >World7BackgroundPalettes
08015                           
08015                           WorldSpritePalettePointersHi:
08015 80                        	.db >World1SpritePalettes
08016 81                        	.db >World2SpritePalettes
08017 81                        	.db >World3SpritePalettes
08018 82                        	.db >World4SpritePalettes
08019 82                        	.db >World5SpritePalettes
0801A 83                        	.db >World6SpritePalettes
0801B 84                        	.db >World7SpritePalettes
0801C                           
0801C                           World1BackgroundPalettes:
0801C                           	; Day
0801C 21 30 12 0F               	.db $21, $30, $12, $0F ; $00
08020 21 30 16 0F               	.db $21, $30, $16, $0F ; $04
08024 21 27 17 0F               	.db $21, $27, $17, $0F ; $08
08028 21 29 1A 0F               	.db $21, $29, $1A, $0F ; $0C
0802C                           	; Night
0802C 0F 30 12 01               	.db $0F, $30, $12, $01 ; $10
08030 0F 30 16 02               	.db $0F, $30, $16, $02 ; $14
08034 0F 27 17 08               	.db $0F, $27, $17, $08 ; $18
08038 0F 29 1A 0A               	.db $0F, $29, $1A, $0A ; $1C
0803C                           	; Underground
0803C 0F 2C 1C 0C               	.db $0F, $2C, $1C, $0C ; $20
08040 0F 30 16 02               	.db $0F, $30, $16, $02 ; $24
08044 0F 27 17 08               	.db $0F, $27, $17, $08 ; $28
08048 0F 2A 1A 0A               	.db $0F, $2A, $1A, $0A ; $2C
0804C                           	; Jar
0804C 07 30 27 0F               	.db $07, $30, $27, $0F ; $30
08050 07 30 16 0F               	.db $07, $30, $16, $0F ; $34
08054 07 27 17 0F               	.db $07, $27, $17, $0F ; $38
08058 07 31 21 0F               	.db $07, $31, $21, $0F ; $3C
0805C                           	; Castle
0805C 03 2C 1C 0F               	.db $03, $2C, $1C, $0F ; $40
08060 03 30 16 0F               	.db $03, $30, $16, $0F ; $44
08064 03 3C 1C 0F               	.db $03, $3C, $1C, $0F ; $48
08068 03 25 15 05               	.db $03, $25, $15, $05 ; $4C
0806C                           	; Boss
0806C 0C 30 06 0F               	.db $0C, $30, $06, $0F ; $50
08070 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $54
08074 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $58
08078 0C 30 26 0F               	.db $0C, $30, $26, $0F ; $5C
0807C                           	; Subspace
0807C 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $60
08080 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $64
08084 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $68
08088 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $6C
0808C                           
0808C                           World1SpritePalettes:
0808C                           	; Overworld
0808C FF 30 16 0F               	.db $FF, $30, $16, $0F ; $00
08090 FF 38 10 0F               	.db $FF, $38, $10, $0F ; $04
08094 FF 30 25 0F               	.db $FF, $30, $25, $0F ; $08
08098                           	; Underground
08098 FF 30 16 02               	.db $FF, $30, $16, $02 ; $0C
0809C FF 38 10 02               	.db $FF, $38, $10, $02 ; $10
080A0 FF 30 25 02               	.db $FF, $30, $25, $02 ; $14
080A4                           	; Boss
080A4 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $18
080A8 FF 30 10 0F               	.db $FF, $30, $10, $0F ; $1C
080AC FF 25 10 0F               	.db $FF, $25, $10, $0F ; $20
080B0                           IFDEF EXPAND_TABLES
080B0                           	unusedSpace World1SpritePalettes + $30, $FF
080B0                           ENDIF
080B0                           
080B0                           World2BackgroundPalettes:
080B0                           	; Day
080B0 11 30 2A 0F               	.db $11, $30, $2A, $0F ; $00
080B4 11 30 16 0F               	.db $11, $30, $16, $0F ; $04
080B8 11 28 18 0F               	.db $11, $28, $18, $0F ; $08
080BC 11 17 07 0F               	.db $11, $17, $07, $0F ; $0C
080C0                           	; Night (unused?)
080C0 0F 30 2A 0A               	.db $0F, $30, $2A, $0A ; $10
080C4 0F 30 16 02               	.db $0F, $30, $16, $02 ; $14
080C8 0F 28 18 08               	.db $0F, $28, $18, $08 ; $18
080CC 0F 17 07 08               	.db $0F, $17, $07, $08 ; $1C
080D0                           	; Underground
080D0 0F 2A 1A 0A               	.db $0F, $2A, $1A, $0A ; $20
080D4 0F 30 16 02               	.db $0F, $30, $16, $02 ; $24
080D8 0F 28 18 08               	.db $0F, $28, $18, $08 ; $28
080DC 0F 27 17 07               	.db $0F, $27, $17, $07 ; $2C
080E0                           	; Jar
080E0 07 30 27 0F               	.db $07, $30, $27, $0F ; $30
080E4 07 30 16 0F               	.db $07, $30, $16, $0F ; $34
080E8 07 28 17 0F               	.db $07, $28, $17, $0F ; $38
080EC 07 31 11 0F               	.db $07, $31, $11, $0F ; $3C;
080F0                           	; Castle (unused)
080F0 0C 2A 1A 0F               	.db $0C, $2A, $1A, $0F ; $40
080F4 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $44
080F8 0C 17 07 0F               	.db $0C, $17, $07, $0F ; $48
080FC 0C 25 15 0F               	.db $0C, $25, $15, $0F ; $4C
08100                           	; Boss
08100 0C 30 1A 0F               	.db $0C, $30, $1A, $0F ; $50
08104 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $54
08108 0C 30 2A 0F               	.db $0C, $30, $2A, $0F ; $58
0810C 0C 30 3A 0F               	.db $0C, $30, $3A, $0F ; $5C
08110                           	; Subspace
08110 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $60
08114 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $64
08118 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $68
0811C 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $6C
08120                           
08120                           World2SpritePalettes:
08120                           	; Overworld
08120 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $00
08124 FF 38 2A 0F               	.db $FF, $38, $2A, $0F ; $04
08128 FF 30 25 0F               	.db $FF, $30, $25, $0F ; $08
0812C                           	; Underground
0812C FF 30 16 02               	.db $FF, $30, $16, $02 ; $0C
08130 FF 38 2A 02               	.db $FF, $38, $2A, $02 ; $10
08134 FF 30 25 02               	.db $FF, $30, $25, $02 ; $14
08138                           	; Boss
08138 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $18
0813C FF 30 10 0F               	.db $FF, $30, $10, $0F ; $1C
08140 FF 30 23 0F               	.db $FF, $30, $23, $0F ; $20
08144                           IFDEF EXPAND_TABLES
08144                           	unusedSpace World2SpritePalettes + $30, $FF
08144                           ENDIF
08144                           
08144                           World3BackgroundPalettes:
08144                           	; Day
08144 22 30 12 0F               	.db $22, $30, $12, $0F ; $00
08148 22 30 16 0F               	.db $22, $30, $16, $0F ; $04
0814C 22 27 17 0F               	.db $22, $27, $17, $0F ; $08
08150 22 29 1A 0F               	.db $22, $29, $1A, $0F ; $0C
08154                           	; Night (unused)
08154 0F 30 12 01               	.db $0F, $30, $12, $01 ; $10
08158 0F 30 16 02               	.db $0F, $30, $16, $02 ; $14
0815C 0F 27 17 08               	.db $0F, $27, $17, $08 ; $18
08160 0F 29 1A 04               	.db $0F, $29, $1A, $04 ; $1C
08164                           	; Underground
08164 0F 30 1C 0C               	.db $0F, $30, $1C, $0C ; $20
08168 0F 30 16 02               	.db $0F, $30, $16, $02 ; $24
0816C 0F 27 17 08               	.db $0F, $27, $17, $08 ; $28
08170 0F 26 16 06               	.db $0F, $26, $16, $06 ; $2C
08174                           	; Jar
08174 07 30 27 0F               	.db $07, $30, $27, $0F ; $30
08178 07 30 16 0F               	.db $07, $30, $16, $0F ; $34
0817C 07 27 17 0F               	.db $07, $27, $17, $0F ; $38
08180 07 31 31 0F               	.db $07, $31, $31, $0F ; $3C
08184                           	; Castle
08184 03 31 21 0F               	.db $03, $31, $21, $0F ; $40
08188 03 30 16 0F               	.db $03, $30, $16, $0F ; $44
0818C 03 3C 1C 0F               	.db $03, $3C, $1C, $0F ; $48
08190 03 2A 1A 0F               	.db $03, $2A, $1A, $0F ; $4C
08194                           	; Boss
08194 0C 30 11 0F               	.db $0C, $30, $11, $0F ; $50
08198 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $54
0819C 0C 30 21 0F               	.db $0C, $30, $21, $0F ; $58
081A0 0C 30 31 0F               	.db $0C, $30, $31, $0F ; $5C
081A4                           	; Subspace
081A4 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $60
081A8 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $64
081AC 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $68
081B0 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $6C
081B4                           
081B4                           World3SpritePalettes:
081B4                           	; Overworld
081B4 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $00
081B8 FF 38 10 0F               	.db $FF, $38, $10, $0F ; $04
081BC FF 30 25 0F               	.db $FF, $30, $25, $0F ; $08
081C0                           	; Underground
081C0 FF 30 16 02               	.db $FF, $30, $16, $02 ; $0C
081C4 FF 38 10 02               	.db $FF, $38, $10, $02 ; $10
081C8 FF 30 25 02               	.db $FF, $30, $25, $02 ; $14
081CC                           	; Boss
081CC FF 30 16 0F               	.db $FF, $30, $16, $0F ; $18
081D0 FF 30 10 0F               	.db $FF, $30, $10, $0F ; $1C
081D4 FF 2B 10 0F               	.db $FF, $2B, $10, $0F ; $20
081D8                           IFDEF EXPAND_TABLES
081D8                           	unusedSpace World3SpritePalettes + $30, $FF
081D8                           ENDIF
081D8                           
081D8                           World4BackgroundPalettes:
081D8                           	; Day
081D8 23 30 12 0F               	.db $23, $30, $12, $0F ; $00
081DC 23 30 16 0F               	.db $23, $30, $16, $0F ; $04
081E0 23 2B 1B 0F               	.db $23, $2B, $1B, $0F ; $08
081E4 23 30 32 0F               	.db $23, $30, $32, $0F ; $0C
081E8                           	; Night (unused)
081E8 0F 30 12 01               	.db $0F, $30, $12, $01 ; $10
081EC 0F 30 16 02               	.db $0F, $30, $16, $02 ; $14
081F0 0F 2B 1B 0B               	.db $0F, $2B, $1B, $0B ; $18
081F4 0F 29 1A 0A               	.db $0F, $29, $1A, $0A ; $1C
081F8                           	; Underground
081F8 0F 32 12 01               	.db $0F, $32, $12, $01 ; $20
081FC 0F 30 16 02               	.db $0F, $30, $16, $02 ; $24
08200 0F 2B 1B 0B               	.db $0F, $2B, $1B, $0B ; $28
08204 0F 27 17 07               	.db $0F, $27, $17, $07 ; $2C
08208                           	; Jar
08208 07 30 27 0F               	.db $07, $30, $27, $0F ; $30
0820C 07 30 16 0F               	.db $07, $30, $16, $0F ; $34
08210 07 27 17 0F               	.db $07, $27, $17, $0F ; $38
08214 07 21 21 0F               	.db $07, $21, $21, $0F ; $3C
08218                           	; Castle
08218 03 30 12 0F               	.db $03, $30, $12, $0F ; $40
0821C 03 30 16 0F               	.db $03, $30, $16, $0F ; $44
08220 03 3C 1C 0F               	.db $03, $3C, $1C, $0F ; $48
08224 03 28 18 0F               	.db $03, $28, $18, $0F ; $4C
08228                           	; Boss
08228 0C 30 00 0F               	.db $0C, $30, $00, $0F ; $50
0822C 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $54
08230 0C 30 10 0F               	.db $0C, $30, $10, $0F ; $58
08234 0C 30 30 0F               	.db $0C, $30, $30, $0F ; $5C
08238                           	; Subspace
08238 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $60
0823C 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $64
08240 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $68
08244 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $6C
08248                           
08248                           World4SpritePalettes:
08248                           	; Overworld
08248 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $00
0824C FF 38 10 0F               	.db $FF, $38, $10, $0F ; $04
08250 FF 30 25 0F               	.db $FF, $30, $25, $0F ; $08
08254                           	; Underground
08254 FF 30 16 02               	.db $FF, $30, $16, $02 ; $0C
08258 FF 38 10 02               	.db $FF, $38, $10, $02 ; $10
0825C FF 30 25 02               	.db $FF, $30, $25, $02 ; $14
08260                           	; Boss
08260 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $18
08264 FF 30 10 0F               	.db $FF, $30, $10, $0F ; $1C
08268 FF 27 16 0F               	.db $FF, $27, $16, $0F ; $20
0826C                           IFDEF EXPAND_TABLES
0826C                           	unusedSpace World4SpritePalettes + $30, $FF
0826C                           ENDIF
0826C                           
0826C                           World5BackgroundPalettes:
0826C                           	; Night
0826C 0F 30 12 01               	.db $0F, $30, $12, $01 ; $00
08270 0F 30 16 01               	.db $0F, $30, $16, $01 ; $04
08274 0F 27 17 07               	.db $0F, $27, $17, $07 ; $08
08278 0F 2B 1B 0B               	.db $0F, $2B, $1B, $0B ; $0C
0827C                           	; Also night (unused)
0827C 0F 30 12 01               	.db $0F, $30, $12, $01 ; $10
08280 0F 30 16 02               	.db $0F, $30, $16, $02 ; $14
08284 0F 27 17 08               	.db $0F, $27, $17, $08 ; $18
08288 0F 29 1A 0A               	.db $0F, $29, $1A, $0A ; $1C
0828C                           	; Underground
0828C 0F 31 12 01               	.db $0F, $31, $12, $01 ; $20
08290 0F 30 16 02               	.db $0F, $30, $16, $02 ; $24
08294 0F 3C 1C 0C               	.db $0F, $3C, $1C, $0C ; $28
08298 0F 2A 1A 0A               	.db $0F, $2A, $1A, $0A ; $2C
0829C                           	; Jar/Tree
0829C 07 30 27 0F               	.db $07, $30, $27, $0F ; $30
082A0 07 30 16 0F               	.db $07, $30, $16, $0F ; $34
082A4 07 27 17 0F               	.db $07, $27, $17, $0F ; $38
082A8 07 31 01 0F               	.db $07, $31, $01, $0F ; $3C
082AC                           	; Castle
082AC 01 2A 1A 0F               	.db $01, $2A, $1A, $0F ; $40
082B0 01 30 16 0F               	.db $01, $30, $16, $0F ; $44
082B4 01 3C 1C 0F               	.db $01, $3C, $1C, $0F ; $48
082B8 01 25 15 05               	.db $01, $25, $15, $05 ; $4C
082BC                           	; Boss
082BC 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $50
082C0 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $54
082C4 0C 30 24 0F               	.db $0C, $30, $24, $0F ; $58
082C8 0C 30 34 0F               	.db $0C, $30, $34, $0F ; $5C
082CC                           	; Subspace
082CC 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $60
082D0 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $64
082D4 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $68
082D8 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $6C
082DC                           
082DC                           World5SpritePalettes:
082DC                           	; Overworld
082DC FF 30 16 0F               	.db $FF, $30, $16, $0F ; $00
082E0 FF 38 10 0F               	.db $FF, $38, $10, $0F ; $04
082E4 FF 30 25 0F               	.db $FF, $30, $25, $0F ; $08
082E8                           	; Underground
082E8 FF 30 16 02               	.db $FF, $30, $16, $02 ; $0C
082EC FF 38 10 02               	.db $FF, $38, $10, $02 ; $10
082F0 FF 30 25 02               	.db $FF, $30, $25, $02 ; $14
082F4                           	; Boss
082F4 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $18
082F8 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $1C
082FC FF 16 30 0F               	.db $FF, $16, $30, $0F ; $20
08300                           IFDEF EXPAND_TABLES
08300                           	unusedSpace World5SpritePalettes + $30, $FF
08300                           ENDIF
08300                           
08300                           World6BackgroundPalettes:
08300                           	; Day
08300 21 30 2A 0F               	.db $21, $30, $2A, $0F ; $00
08304 21 30 16 0F               	.db $21, $30, $16, $0F ; $04
08308 21 28 18 0F               	.db $21, $28, $18, $0F ; $08
0830C 21 17 07 0F               	.db $21, $17, $07, $0F ; $0C
08310                           	; Night
08310 0F 30 2A 01               	.db $0F, $30, $2A, $01 ; $10
08314 0F 30 16 02               	.db $0F, $30, $16, $02 ; $14
08318 0F 28 18 08               	.db $0F, $28, $18, $08 ; $18
0831C 0F 17 07 08               	.db $0F, $17, $07, $08 ; $1C
08320                           	; Underground
08320 0F 30 12 01               	.db $0F, $30, $12, $01 ; $20
08324 0F 30 16 02               	.db $0F, $30, $16, $02 ; $24
08328 0F 28 18 08               	.db $0F, $28, $18, $08 ; $28
0832C 0F 27 17 07               	.db $0F, $27, $17, $07 ; $2C
08330                           	; Jar
08330 07 30 27 0F               	.db $07, $30, $27, $0F ; $30
08334 07 30 16 0F               	.db $07, $30, $16, $0F ; $34
08338 07 28 17 0F               	.db $07, $28, $17, $0F ; $38
0833C 07 31 01 0F               	.db $07, $31, $01, $0F ; $3C
08340                           	; Castle
08340 0C 2A 1A 0F               	.db $0C, $2A, $1A, $0F ; $40
08344 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $44
08348 0C 17 07 0F               	.db $0C, $17, $07, $0F ; $48
0834C 0C 25 15 0F               	.db $0C, $25, $15, $0F ; $4C
08350                           	; Boss
08350 0C 30 1B 0F               	.db $0C, $30, $1B, $0F ; $50
08354 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $54
08358 0C 30 2B 0F               	.db $0C, $30, $2B, $0F ; $58
0835C 0C 30 3B 0F               	.db $0C, $30, $3B, $0F ; $5C
08360                           	; Subspace
08360 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $60
08364 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $64
08368 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $68
0836C 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $6C
08370                           
08370                           World6SpritePalettes:
08370                           	; Overworld
08370 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $00
08374 FF 38 2A 0F               	.db $FF, $38, $2A, $0F ; $04
08378 FF 30 25 0F               	.db $FF, $30, $25, $0F ; $08
0837C                           	; Underground
0837C FF 30 16 02               	.db $FF, $30, $16, $02 ; $0C
08380 FF 38 2A 02               	.db $FF, $38, $2A, $02 ; $10
08384 FF 30 25 02               	.db $FF, $30, $25, $02 ; $14
08388                           	; Boss
08388 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $18
0838C FF 30 10 0F               	.db $FF, $30, $10, $0F ; $1C
08390 FF 30 23 0F               	.db $FF, $30, $23, $0F ; $20
08394                           IFDEF EXPAND_TABLES
08394                           	unusedSpace World6SpritePalettes + $30, $FF
08394                           ENDIF
08394                           
08394                           World7BackgroundPalettes:
08394                           	; Day
08394 21 30 12 0F               	.db $21, $30, $12, $0F ; $00
08398 21 30 16 0F               	.db $21, $30, $16, $0F ; $04
0839C 21 27 17 0F               	.db $21, $27, $17, $0F ; $08
083A0 21 29 1A 0F               	.db $21, $29, $1A, $0F ; $0C
083A4                           	; Night (unused)
083A4 0F 30 12 01               	.db $0F, $30, $12, $01 ; $10
083A8 0F 30 16 02               	.db $0F, $30, $16, $02 ; $14
083AC 0F 27 17 08               	.db $0F, $27, $17, $08 ; $18
083B0 0F 29 1A 0A               	.db $0F, $29, $1A, $0A ; $1C
083B4                           	; Castle
083B4 0F 2C 1C 0C               	.db $0F, $2C, $1C, $0C ; $20
083B8 0F 30 16 02               	.db $0F, $30, $16, $02 ; $24
083BC 0F 27 17 08               	.db $0F, $27, $17, $08 ; $28
083C0 0F 2A 1A 0A               	.db $0F, $2A, $1A, $0A ; $2C
083C4                           	; Jar (unused)
083C4 07 30 16 0F               	.db $07, $30, $16, $0F ; $30
083C8 07 30 16 0F               	.db $07, $30, $16, $0F ; $34
083CC 07 27 17 0F               	.db $07, $27, $17, $0F ; $38
083D0 07 31 01 0F               	.db $07, $31, $01, $0F ; $3C
083D4                           	; Castle (unused)
083D4 0F 3C 2C 0C               	.db $0F, $3C, $2C, $0C ; $40
083D8 0F 30 16 02               	.db $0F, $30, $16, $02 ; $44
083DC 0F 28 18 08               	.db $0F, $28, $18, $08 ; $48
083E0 0F 25 15 05               	.db $0F, $25, $15, $05 ; $4C
083E4                           	; Boss
083E4 0C 30 08 0F               	.db $0C, $30, $08, $0F ; $50
083E8 0C 30 16 0F               	.db $0C, $30, $16, $0F ; $54
083EC 0C 38 18 0F               	.db $0C, $38, $18, $0F ; $58
083F0 0C 28 08 0F               	.db $0C, $28, $08, $0F ; $5C
083F4                           	; Subspace
083F4 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $60
083F8 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $64
083FC 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $68
08400 01 0F 0F 0F               	.db $01, $0F, $0F, $0F ; $6C
08404                           
08404                           World7SpritePalettes:
08404                           	; Overworld
08404 FF 30 16 0F               	.db $FF, $30, $16, $0F ; $00
08408 FF 38 10 0F               	.db $FF, $38, $10, $0F ; $04
0840C FF 30 25 0F               	.db $FF, $30, $25, $0F ; $08
08410                           	; Underground
08410 FF 30 16 02               	.db $FF, $30, $16, $02 ; $0C
08414 FF 38 10 02               	.db $FF, $38, $10, $02 ; $10
08418 FF 30 25 02               	.db $FF, $30, $25, $02 ; $14
0841C                           	; Boss
0841C FF 30 16 0F               	.db $FF, $30, $16, $0F ; $18
08420 FF 30 10 0F               	.db $FF, $30, $10, $0F ; $1C
08424 FF 30 2A 0F               	.db $FF, $30, $2A, $0F ; $20
08428                           IFDEF EXPAND_TABLES
08428                           	unusedSpace World7SpritePalettes + $30, $FF
08428                           ENDIF
08428                           
08428                           GroundTilesHorizontalLo:
08428 44                        	.db <World1GroundTilesHorizontal
08429 84                        	.db <World2GroundTilesHorizontal
0842A C4                        	.db <World3GroundTilesHorizontal
0842B 04                        	.db <World4GroundTilesHorizontal
0842C 44                        	.db <World5GroundTilesHorizontal
0842D 84                        	.db <World6GroundTilesHorizontal
0842E C4                        	.db <World7GroundTilesHorizontal
0842F                           
0842F                           GroundTilesVerticalLo:
0842F 64                        	.db <World1GroundTilesVertical
08430 A4                        	.db <World2GroundTilesVertical
08431 E4                        	.db <World3GroundTilesVertical
08432 24                        	.db <World4GroundTilesVertical
08433 64                        	.db <World5GroundTilesVertical
08434 A4                        	.db <World6GroundTilesVertical
08435 E4                        	.db <World7GroundTilesVertical
08436                           
08436                           GroundTilesHorizontalHi:
08436 84                        	.db >World1GroundTilesHorizontal
08437 84                        	.db >World2GroundTilesHorizontal
08438 84                        	.db >World3GroundTilesHorizontal
08439 85                        	.db >World4GroundTilesHorizontal
0843A 85                        	.db >World5GroundTilesHorizontal
0843B 85                        	.db >World6GroundTilesHorizontal
0843C 85                        	.db >World7GroundTilesHorizontal
0843D                           
0843D                           GroundTilesVerticalHi:
0843D 84                        	.db >World1GroundTilesVertical
0843E 84                        	.db >World2GroundTilesVertical
0843F 84                        	.db >World3GroundTilesVertical
08440 85                        	.db >World4GroundTilesVertical
08441 85                        	.db >World5GroundTilesVertical
08442 85                        	.db >World6GroundTilesVertical
08443 85                        	.db >World7GroundTilesVertical
08444                           
08444                           ;
08444                           ; Ground appearance tiles
08444                           ; =======================
08444                           ;
08444                           ; These are the tiles used to render the ground setting of an area.
08444                           ; Each row in a world's table corresponds to the ground type.
08444                           ;
08444                           ; You'll notice that the first entry, which correponds to the sky/background is
08444                           ; $00 instead of $40. This is skipped with a BEQ in WriteGroundSetTiles,
08444                           ; presumably as an optimization, so the value doesn't matter!
08444                           ;
08444                           World1GroundTilesHorizontal:
08444 00 99 D5 00               	.db $00, $99, $D5, $00 ; $00
08448 00 99 99 99               	.db $00, $99, $99, $99 ; $01
0844C 00 A0 A0 A0               	.db $00, $A0, $A0, $A0 ; $02
08450 00 A2 A2 A2               	.db $00, $A2, $A2, $A2 ; $03
08454 00 D6 9B 18               	.db $00, $D6, $9B, $18 ; $04
08458 00 A0 A0 99               	.db $00, $A0, $A0, $99 ; $05
0845C 00 00 00 00               	.db $00, $00, $00, $00 ; $06
08460 00 00 00 00               	.db $00, $00, $00, $00 ; $07
08464                           IFDEF EXPAND_TABLES
08464                           	unusedSpace World1GroundTilesHorizontal + $40, $00
08464                           ENDIF
08464                           
08464                           World1GroundTilesVertical:
08464 00 9D 9E C6               	.db $00, $9D, $9E, $C6 ; $00
08468 00 05 A0 00               	.db $00, $05, $A0, $00 ; $01
0846C 00 00 00 00               	.db $00, $00, $00, $00 ; $02
08470 00 00 A2 00               	.db $00, $00, $A2, $00 ; $03
08474 00 00 C2 00               	.db $00, $00, $C2, $00 ; $04
08478 00 00 A0 00               	.db $00, $00, $A0, $00 ; $05
0847C 00 93 9E C6               	.db $00, $93, $9E, $C6 ; $06
08480 00 40 9E C6               	.db $00, $40, $9E, $C6 ; $07
08484                           IFDEF EXPAND_TABLES
08484                           	unusedSpace World1GroundTilesVertical + $40, $00
08484                           ENDIF
08484                           
08484                           World2GroundTilesHorizontal:
08484 00 99 99 99               	.db $00, $99, $99, $99 ; $00
08488 00 8A 8A 8A               	.db $00, $8A, $8A, $8A ; $01
0848C 00 8B 8B 8B               	.db $00, $8B, $8B, $8B ; $02
08490 00 A0 A0 A0               	.db $00, $A0, $A0, $A0 ; $03
08494 00 A2 A2 A2               	.db $00, $A2, $A2, $A2 ; $04
08498 00 D6 9B 18               	.db $00, $D6, $9B, $18 ; $05
0849C 00 00 00 00               	.db $00, $00, $00, $00 ; $06
084A0 00 00 00 00               	.db $00, $00, $00, $00 ; $07
084A4                           IFDEF EXPAND_TABLES
084A4                           	unusedSpace World2GroundTilesHorizontal + $40, $00
084A4                           ENDIF
084A4                           
084A4                           World2GroundTilesVertical:
084A4 00 9D 9E C6               	.db $00, $9D, $9E, $C6 ; $00
084A8 00 93 A0 00               	.db $00, $93, $A0, $00 ; $01
084AC 00 40 9B 40               	.db $00, $40, $9B, $40 ; $02
084B0 00 93 9E C6               	.db $00, $93, $9E, $C6 ; $03
084B4 00 40 9E C6               	.db $00, $40, $9E, $C6 ; $04
084B8 00 00 00 00               	.db $00, $00, $00, $00 ; $05
084BC 00 00 00 00               	.db $00, $00, $00, $00 ; $06
084C0 00 00 00 00               	.db $00, $00, $00, $00 ; $07
084C4                           IFDEF EXPAND_TABLES
084C4                           	unusedSpace World2GroundTilesVertical + $40, $00
084C4                           ENDIF
084C4                           
084C4                           World3GroundTilesHorizontal:
084C4 00 99 D5 00               	.db $00, $99, $D5, $00 ; $00
084C8 00 99 99 99               	.db $00, $99, $99, $99 ; $01
084CC 00 A0 A0 A0               	.db $00, $A0, $A0, $A0 ; $02
084D0 00 A2 A2 A2               	.db $00, $A2, $A2, $A2 ; $03
084D4 00 D6 9B 18               	.db $00, $D6, $9B, $18 ; $04
084D8 00 A0 A0 99               	.db $00, $A0, $A0, $99 ; $05
084DC 00 00 00 00               	.db $00, $00, $00, $00 ; $06
084E0 00 00 00 00               	.db $00, $00, $00, $00 ; $07
084E4                           IFDEF EXPAND_TABLES
084E4                           	unusedSpace World3GroundTilesHorizontal + $40, $00
084E4                           ENDIF
084E4                           
084E4                           World3GroundTilesVertical:
084E4 00 C6 9E 9D               	.db $00, $C6, $9E, $9D ; $00
084E8 00 05 A0 00               	.db $00, $05, $A0, $00 ; $01
084EC 00 93 9E C6               	.db $00, $93, $9E, $C6 ; $02
084F0 00 00 A2 00               	.db $00, $00, $A2, $00 ; $03
084F4 00 00 C2 00               	.db $00, $00, $C2, $00 ; $04
084F8 00 00 A0 00               	.db $00, $00, $A0, $00 ; $05
084FC 00 40 9E C6               	.db $00, $40, $9E, $C6 ; $06
08500 00 06 A0 00               	.db $00, $06, $A0, $00 ; $07
08504                           IFDEF EXPAND_TABLES
08504                           	unusedSpace World3GroundTilesVertical + $40, $00
08504                           ENDIF
08504                           
08504                           World4GroundTilesHorizontal:
08504 00 99 D5 00               	.db $00, $99, $D5, $00 ; $00
08508 00 99 16 00               	.db $00, $99, $16, $00 ; $01
0850C 00 A0 A0 A0               	.db $00, $A0, $A0, $A0 ; $02
08510 00 A2 A2 A2               	.db $00, $A2, $A2, $A2 ; $03
08514 00 D6 9B 18               	.db $00, $D6, $9B, $18 ; $04
08518 00 0A 0A 08               	.db $00, $0A, $0A, $08 ; $05
0851C 00 1F 1F 1F               	.db $00, $1F, $1F, $1F ; $06
08520 00 00 00 00               	.db $00, $00, $00, $00 ; $07
08524                           IFDEF EXPAND_TABLES
08524                           	unusedSpace World4GroundTilesHorizontal + $40, $00
08524                           ENDIF
08524                           
08524                           World4GroundTilesVertical:
08524 00 C6 99 9D               	.db $00, $C6, $99, $9D ; $00
08528 00 A2 A2 A2               	.db $00, $A2, $A2, $A2 ; $01
0852C 00 9B 9B 9B               	.db $00, $9B, $9B, $9B ; $02
08530 00 A0 A0 A0               	.db $00, $A0, $A0, $A0 ; $03
08534 00 D6 D6 D6               	.db $00, $D6, $D6, $D6 ; $04
08538 00 18 18 18               	.db $00, $18, $18, $18 ; $05
0853C 00 00 00 00               	.db $00, $00, $00, $00 ; $06
08540 00 00 00 00               	.db $00, $00, $00, $00 ; $07
08544                           IFDEF EXPAND_TABLES
08544                           	unusedSpace World4GroundTilesVertical + $40, $00
08544                           ENDIF
08544                           
08544                           World5GroundTilesHorizontal:
08544 00 99 D5 40               	.db $00, $99, $D5, $40 ; $00
08548 00 99 99 99               	.db $00, $99, $99, $99 ; $01
0854C 00 A0 A0 A0               	.db $00, $A0, $A0, $A0 ; $02
08550 00 A2 A2 A2               	.db $00, $A2, $A2, $A2 ; $03
08554 00 D6 9B 18               	.db $00, $D6, $9B, $18 ; $04
08558 00 A0 A0 99               	.db $00, $A0, $A0, $99 ; $05
0855C 00 00 00 00               	.db $00, $00, $00, $00 ; $06
08560 00 00 00 00               	.db $00, $00, $00, $00 ; $07
08564                           IFDEF EXPAND_TABLES
08564                           	unusedSpace World5GroundTilesHorizontal + $40, $00
08564                           ENDIF
08564                           
08564                           World5GroundTilesVertical:
08564 00 9D 9E C6               	.db $00, $9D, $9E, $C6 ; $00
08568 00 05 A0 00               	.db $00, $05, $A0, $00 ; $01
0856C 00 40 A4 00               	.db $00, $40, $A4, $00 ; $02
08570 00 00 A2 00               	.db $00, $00, $A2, $00 ; $03
08574 00 00 C2 00               	.db $00, $00, $C2, $00 ; $04
08578 00 00 A0 00               	.db $00, $00, $A0, $00 ; $05
0857C 00 93 9E C6               	.db $00, $93, $9E, $C6 ; $06
08580 00 40 9E C6               	.db $00, $40, $9E, $C6 ; $07
08584                           IFDEF EXPAND_TABLES
08584                           	unusedSpace World5GroundTilesVertical + $40, $00
08584                           ENDIF
08584                           
08584                           World6GroundTilesHorizontal:
08584 00 99 99 99               	.db $00, $99, $99, $99 ; $00
08588 00 8A 8A 8A               	.db $00, $8A, $8A, $8A ; $01
0858C 00 8B 8B 8B               	.db $00, $8B, $8B, $8B ; $02
08590 00 A0 A0 A0               	.db $00, $A0, $A0, $A0 ; $03
08594 00 A2 A2 A2               	.db $00, $A2, $A2, $A2 ; $04
08598 00 D6 9B 18               	.db $00, $D6, $9B, $18 ; $05
0859C 00 00 00 00               	.db $00, $00, $00, $00 ; $06
085A0 00 00 00 00               	.db $00, $00, $00, $00 ; $07
085A4                           IFDEF EXPAND_TABLES
085A4                           	unusedSpace World6GroundTilesHorizontal + $40, $00
085A4                           ENDIF
085A4                           
085A4                           World6GroundTilesVertical:
085A4 00 9D 9E C6               	.db $00, $9D, $9E, $C6 ; $00
085A8 00 93 A0 00               	.db $00, $93, $A0, $00 ; $01
085AC 00 40 18 40               	.db $00, $40, $18, $40 ; $02
085B0 00 93 9E C6               	.db $00, $93, $9E, $C6 ; $03
085B4 00 40 9E C6               	.db $00, $40, $9E, $C6 ; $04
085B8 00 00 00 00               	.db $00, $00, $00, $00 ; $05
085BC 00 00 00 00               	.db $00, $00, $00, $00 ; $06
085C0 00 00 00 00               	.db $00, $00, $00, $00 ; $07
085C4                           IFDEF EXPAND_TABLES
085C4                           	unusedSpace World6GroundTilesVertical + $40, $00
085C4                           ENDIF
085C4                           
085C4                           World7GroundTilesHorizontal:
085C4 00 9C 9C 9C               	.db $00, $9C, $9C, $9C ; $00
085C8 00 D7 9C 19               	.db $00, $D7, $9C, $19 ; $01
085CC 00 00 00 00               	.db $00, $00, $00, $00 ; $02
085D0 00 00 00 00               	.db $00, $00, $00, $00 ; $03
085D4 00 00 00 00               	.db $00, $00, $00, $00 ; $04
085D8 00 00 00 00               	.db $00, $00, $00, $00 ; $05
085DC 00 00 00 00               	.db $00, $00, $00, $00 ; $06
085E0 00 00 00 00               	.db $00, $00, $00, $00 ; $07
085E4                           IFDEF EXPAND_TABLES
085E4                           	unusedSpace World7GroundTilesHorizontal + $40, $00
085E4                           ENDIF
085E4                           
085E4                           World7GroundTilesVertical:
085E4 00 9C 9C 9C               	.db $00, $9C, $9C, $9C ; $00
085E8 00 05 A0 00               	.db $00, $05, $A0, $00 ; $01
085EC 00 00 00 00               	.db $00, $00, $00, $00 ; $02
085F0 00 00 9C 00               	.db $00, $00, $9C, $00 ; $03
085F4 00 00 C2 00               	.db $00, $00, $C2, $00 ; $04
085F8 00 00 A0 00               	.db $00, $00, $A0, $00 ; $05
085FC 00 00 00 00               	.db $00, $00, $00, $00 ; $06
08600 00 00 00 00               	.db $00, $00, $00, $00 ; $07
08604                           IFDEF EXPAND_TABLES
08604                           	unusedSpace World7GroundTilesVertical + $40, $00
08604                           ENDIF
08604                           
08604                           ; These seem to be unused duplicates of the tile quads from bank F
08604                           UnusedTileQuadPointersLo:
08604 0C                        	.db <UnusedTileQuads1
08605 98                        	.db <UnusedTileQuads2
08606 84                        	.db <UnusedTileQuads3
08607 34                        	.db <UnusedTileQuads4
08608                           UnusedTileQuadPointersHi:
08608 86                        	.db >UnusedTileQuads1
08609 86                        	.db >UnusedTileQuads2
0860A 87                        	.db >UnusedTileQuads3
0860B 88                        	.db >UnusedTileQuads4
0860C                           UnusedTileQuads1:
0860C FE FE FE FE               	.db $FE,$FE,$FE,$FE ; $00
08610 B4 B6 B5 B7               	.db $B4,$B6,$B5,$B7 ; $04
08614 B8 FA B9 FA               	.db $B8,$FA,$B9,$FA ; $08
08618 FA FA B2 B3               	.db $FA,$FA,$B2,$B3 ; $0C
0861C BE BE BF BF               	.db $BE,$BE,$BF,$BF ; $10
08620 BF BF BF BF               	.db $BF,$BF,$BF,$BF ; $14
08624 4A 4A 4B 4B               	.db $4A,$4A,$4B,$4B ; $18
08628 5E 5F 5E 5F               	.db $5E,$5F,$5E,$5F ; $1C
0862C E8 E8 A9 A9               	.db $E8,$E8,$A9,$A9 ; $20
08630 46 FC 46 FC               	.db $46,$FC,$46,$FC ; $24
08634 A9 A9 A9 A9               	.db $A9,$A9,$A9,$A9 ; $28
08638 FC FC FC FC               	.db $FC,$FC,$FC,$FC ; $2C
0863C E9 E9 A9 A9               	.db $E9,$E9,$A9,$A9 ; $30
08640 FC 48 FC 48               	.db $FC,$48,$FC,$48 ; $34
08644 11 11 11 11               	.db $11,$11,$11,$11 ; $38
08648 22 22 22 22               	.db $22,$22,$22,$22 ; $3C
0864C 33 33 33 33               	.db $33,$33,$33,$33 ; $40
08650 E8 EB A9 A9               	.db $E8,$EB,$A9,$A9 ; $44
08654 74 76 75 77               	.db $74,$76,$75,$77 ; $48
08658 98 9A 99 9B               	.db $98,$9A,$99,$9B ; $4C
0865C 9C 9A 9D 9B               	.db $9C,$9A,$9D,$9B ; $50
08660 9C 9E 9B 9F               	.db $9C,$9E,$9B,$9F ; $54
08664 58 5A 59 5B               	.db $58,$5A,$59,$5B ; $58
08668 5E 5F 5E 5F               	.db $5E,$5F,$5E,$5F ; $5C
0866C 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $60
08670 72 73 73 72               	.db $72,$73,$73,$72 ; $64
08674 A6 A6 A7 A7               	.db $A6,$A6,$A7,$A7 ; $68
08678 92 93 93 92               	.db $92,$93,$93,$92 ; $6C
0867C 74 76 75 77               	.db $74,$76,$75,$77 ; $70
08680 70 72 71 73               	.db $70,$72,$71,$73 ; $74
08684 71 73 71 73               	.db $71,$73,$71,$73 ; $78
08688 24 26 25 27               	.db $24,$26,$25,$27 ; $7C
0868C 32 34 33 35               	.db $32,$34,$33,$35 ; $80
08690 33 35 33 35               	.db $33,$35,$33,$35 ; $84
08694 24 26 25 27               	.db $24,$26,$25,$27 ; $88
08698                           UnusedTileQuads2:
08698 FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $00
0869C FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $04
086A0 FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $08
086A4 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $0C
086A8 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $10
086AC FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $14
086B0 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $18
086B4 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $1C
086B8 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $20
086BC FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $24
086C0 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $28
086C4 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $2C
086C8 FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $30
086CC FA FA B0 B1               	.db $FA,$FA,$B0,$B1 ; $34
086D0 A0 A2 A1 A3               	.db $A0,$A2,$A1,$A3 ; $38
086D4 80 82 81 83               	.db $80,$82,$81,$83 ; $3C
086D8 F4 86 F5 87               	.db $F4,$86,$F5,$87 ; $40
086DC 84 86 85 87               	.db $84,$86,$85,$87 ; $44
086E0 FC FC FC FC               	.db $FC,$FC,$FC,$FC ; $48
086E4 AD FB AC AD               	.db $AD,$FB,$AC,$AD ; $4C
086E8 AC AC AC AC               	.db $AC,$AC,$AC,$AC ; $50
086EC FB 3B 3B AC               	.db $FB,$3B,$3B,$AC ; $54
086F0 FC FC FC FC               	.db $FC,$FC,$FC,$FC ; $58
086F4 F4 86 F5 87               	.db $F4,$86,$F5,$87 ; $5C
086F8 FB 49 49 FB               	.db $FB,$49,$49,$FB ; $60
086FC FE FE FE FE               	.db $FE,$FE,$FE,$FE ; $64
08700 FE FE 6D FE               	.db $FE,$FE,$6D,$FE ; $68
08704 3C 3E 3D 3F               	.db $3C,$3E,$3D,$3F ; $6C
08708 58 FD 59 5A               	.db $58,$FD,$59,$5A ; $70
0870C 5B 5A FD FD               	.db $5B,$5A,$FD,$FD ; $74
08710 5B 5C FD 5D               	.db $5B,$5C,$FD,$5D ; $78
08714 FD FD 5B 5A               	.db $FD,$FD,$5B,$5A ; $7C
08718 6C FE FE FE               	.db $6C,$FE,$FE,$FE ; $80
0871C FE FE FE FE               	.db $FE,$FE,$FE,$FE ; $84
08720 FE 6E FE 6F               	.db $FE,$6E,$FE,$6F ; $88
08724 20 22 21 23               	.db $20,$22,$21,$23 ; $8C
08728 6E 6F 70 71               	.db $6E,$6F,$70,$71 ; $90
0872C 57 57 FB FB               	.db $57,$57,$FB,$FB ; $94
08730 57 57 FE FE               	.db $57,$57,$FE,$FE ; $98
08734 D3 D3 FB FB               	.db $D3,$D3,$FB,$FB ; $9C
08738 D2 D2 FB FB               	.db $D2,$D2,$FB,$FB ; $A0
0873C 7C 7E 7D 7F               	.db $7C,$7E,$7D,$7F ; $A4
08740 CA CC CB CD               	.db $CA,$CC,$CB,$CD ; $A8
08744 CA CC CB CD               	.db $CA,$CC,$CB,$CD ; $AC
08748 C0 C2 C1 C3               	.db $C0,$C2,$C1,$C3 ; $B0
0874C 2C 2E 2D 2F               	.db $2C,$2E,$2D,$2F ; $B4
08750 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $B8
08754 88 8A 89 8B               	.db $88,$8A,$89,$8B ; $BC
08758 89 8B 89 8B               	.db $89,$8B,$89,$8B ; $C0
0875C 89 8B 8C 8D               	.db $89,$8B,$8C,$8D ; $C4
08760 88 8A 8C 8D               	.db $88,$8A,$8C,$8D ; $C8
08764 88 8A 89 8B               	.db $88,$8A,$89,$8B ; $CC
08768 88 8A 89 8B               	.db $88,$8A,$89,$8B ; $D0
0876C 6A 6C 6B 6D               	.db $6A,$6C,$6B,$6D ; $D4
08770 6C 6C 6D 6D               	.db $6C,$6C,$6D,$6D ; $D8
08774 6C 6E 6D 6F               	.db $6C,$6E,$6D,$6F ; $DC
08778 6C 54 6D 55               	.db $6C,$54,$6D,$55 ; $E0
0877C 32 34 33 35               	.db $32,$34,$33,$35 ; $E4
08780 33 35 33 35               	.db $33,$35,$33,$35 ; $E8
08784                           UnusedTileQuads3:
08784 94 95 94 95               	.db $94,$95,$94,$95 ; $00
08788 96 97 96 97               	.db $96,$97,$96,$97 ; $04
0878C 48 49 48 49               	.db $48,$49,$48,$49 ; $08
08790 FE FE FE FE               	.db $FE,$FE,$FE,$FE ; $0C
08794 FB 32 32 33               	.db $FB,$32,$32,$33 ; $10
08798 33 33 33 33               	.db $33,$33,$33,$33 ; $14
0879C FD FD FD FD               	.db $FD,$FD,$FD,$FD ; $18
087A0 34 FB FD 34               	.db $34,$FB,$FD,$34 ; $1C
087A4 FB 30 FB FB               	.db $FB,$30,$FB,$FB ; $20
087A8 FB FB 31 FB               	.db $FB,$FB,$31,$FB ; $24
087AC D0 D0 D0 D0               	.db $D0,$D0,$D0,$D0 ; $28
087B0 D1 D1 D1 D1               	.db $D1,$D1,$D1,$D1 ; $2C
087B4 64 66 65 67               	.db $64,$66,$65,$67 ; $30
087B8 68 6A 69 6B               	.db $68,$6A,$69,$6B ; $34
087BC FA 6C FA 6C               	.db $FA,$6C,$FA,$6C ; $38
087C0 6D FA 6D FA               	.db $6D,$FA,$6D,$FA ; $3C
087C4 92 93 93 92               	.db $92,$93,$93,$92 ; $40
087C8 AE AF AE AF               	.db $AE,$AF,$AE,$AF ; $44
087CC 78 7A 79 7B               	.db $78,$7A,$79,$7B ; $48
087D0 A8 A8 AF AE               	.db $A8,$A8,$AF,$AE ; $4C
087D4 94 95 94 95               	.db $94,$95,$94,$95 ; $50
087D8 96 97 96 97               	.db $96,$97,$96,$97 ; $54
087DC 22 24 23 25               	.db $22,$24,$23,$25 ; $58
087E0 92 93 93 92               	.db $92,$93,$93,$92 ; $5C
087E4 50 51 50 51               	.db $50,$51,$50,$51 ; $60
087E8 AE AF AE AF               	.db $AE,$AF,$AE,$AF ; $64
087EC 50 51 50 51               	.db $50,$51,$50,$51 ; $68
087F0 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $6C
087F4 72 73 73 72               	.db $72,$73,$73,$72 ; $70
087F8 50 52 51 53               	.db $50,$52,$51,$53 ; $74
087FC FD FD FD FD               	.db $FD,$FD,$FD,$FD ; $78
08800 FB 36 36 4F               	.db $FB,$36,$36,$4F ; $7C
08804 4F 4E 4E 4F               	.db $4F,$4E,$4E,$4F ; $80
08808 4E 4F 4F 4E               	.db $4E,$4F,$4F,$4E ; $84
0880C 92 93 93 92               	.db $92,$93,$93,$92 ; $88
08810 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $8C
08814 44 45 45 44               	.db $44,$45,$45,$44 ; $90
08818 4F 37 4E FE               	.db $4F,$37,$4E,$FE ; $94
0881C 4F 3A 4E FE               	.db $4F,$3A,$4E,$FE ; $98
08820 4F 4E 37 38               	.db $4F,$4E,$37,$38 ; $9C
08824 4A 4B FE FE               	.db $4A,$4B,$FE,$FE ; $A0
08828 72 73 4A 4B               	.db $72,$73,$4A,$4B ; $A4
0882C 40 42 41 43               	.db $40,$42,$41,$43 ; $A8
08830 41 43 41 43               	.db $41,$43,$41,$43 ; $AC
08834                           UnusedTileQuads4:
08834 40 42 41 43               	.db $40,$42,$41,$43 ; $00
08838 40 42 41 43               	.db $40,$42,$41,$43 ; $04
0883C BA BC BB BD               	.db $BA,$BC,$BB,$BD ; $08
08840 BA BC 90 91               	.db $BA,$BC,$90,$91 ; $0C
08844 FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $10
08848 FA FA FA FA               	.db $FA,$FA,$FA,$FA ; $14
0884C FD FD FD FD               	.db $FD,$FD,$FD,$FD ; $18
08850 61 63 61 63               	.db $61,$63,$61,$63 ; $1C
08854 65 63 65 63               	.db $65,$63,$65,$63 ; $20
08858 65 67 65 67               	.db $65,$67,$65,$67 ; $24
0885C 60 62 61 63               	.db $60,$62,$61,$63 ; $28
08860 32 34 33 35               	.db $32,$34,$33,$35 ; $2C
08864 64 62 65 63               	.db $64,$62,$65,$63 ; $30
08868 36 34 37 35               	.db $36,$34,$37,$35 ; $34
0886C 64 66 65 67               	.db $64,$66,$65,$67 ; $38
08870 36 38 37 39               	.db $36,$38,$37,$39 ; $3C
08874 68 62 61 63               	.db $68,$62,$61,$63 ; $40
08878 64 69 65 67               	.db $64,$69,$65,$67 ; $44
0887C 46 62 61 63               	.db $46,$62,$61,$63 ; $48
08880 64 47 65 67               	.db $64,$47,$65,$67 ; $4C
08884 BA BC BB BD               	.db $BA,$BC,$BB,$BD ; $50
08888 70 72 71 73               	.db $70,$72,$71,$73 ; $54
0888C 8E 8F 8F 8E               	.db $8E,$8F,$8F,$8E ; $58
08890 72 73 73 72               	.db $72,$73,$73,$72 ; $5C
08894 44 45 45 44               	.db $44,$45,$45,$44 ; $60
08898                           ; ---------------------------------------------------------------------------
08898                           
08898                           CreateObjects_30thruF0:
08898 20 A6 D9                  	JSR JumpToTableAfterJump
0889B                           
0889B 5C 8A                     	.dw CreateObject_HorizontalBlocks ; $3X
0889D 5C 8A                     	.dw CreateObject_HorizontalBlocks ; $4X
0889F 5C 8A                     	.dw CreateObject_HorizontalBlocks ; $5X
088A1 5C 8A                     	.dw CreateObject_HorizontalBlocks ; $6X
088A3 5C 8A                     	.dw CreateObject_HorizontalBlocks ; $7X
088A5 E8 8A                     	.dw CreateObject_VerticalBlocks ; $8X
088A7 E8 8A                     	.dw CreateObject_VerticalBlocks ; $9X
088A9 E8 8A                     	.dw CreateObject_VerticalBlocks ; $AX
088AB                           IFNDEF ENABLE_LEVEL_OBJECT_MODE
088AB                           	.dw CreateObject_WhaleOrDrawBridgeChain ; $BX
088AB                           	.dw CreateObject_JumpthroughPlatform ; $CX
088AB                           ENDIF
088AB                           IFDEF ENABLE_LEVEL_OBJECT_MODE
088AB CD 8E                     	.dw CreateObject_Platform_BX ; $BX
088AD 99 8B                     	.dw CreateObject_Platform_CX ; $CX
088AF                           ENDIF
088AF 5D 8B                     	.dw CreateObject_HorizontalPlatform ; $DX
088B1 5D 8B                     	.dw CreateObject_HorizontalPlatform ; $EX
088B3 7F 8D                     	.dw CreateObject_WaterfallOrFrozenRocks ; $FX
088B5                           
088B5                           CreateObjects_00:
088B5 20 A6 D9                  	JSR JumpToTableAfterJump
088B8                           
088B8 34 8B                     	.dw CreateObject_SingleBlock ; $00
088BA 34 8B                     	.dw CreateObject_SingleBlock ; $01
088BC 34 8B                     	.dw CreateObject_SingleBlock ; $02
088BE 34 8B                     	.dw CreateObject_SingleBlock ; $03
088C0 34 8B                     	.dw CreateObject_SingleBlock ; $04
088C2                           IFNDEF LEVEL_ENGINE_UPGRADES
088C2 34 8B                     	.dw CreateObject_SingleBlock ; $05
088C4                           ENDIF
088C4                           IFDEF LEVEL_ENGINE_UPGRADES
088C4                           	.dw CreateObject_StandableAutomatic ; $05
088C4                           ENDIF
088C4 AF 8C                     	.dw CreateObject_Vase ; $06
088C6 AF 8C                     	.dw CreateObject_Vase ; $07
088C8 AF 8C                     	.dw CreateObject_Vase ; $08
088CA 39 90                     	.dw CreateObject_Door ; $09
088CC 39 90                     	.dw CreateObject_Door ; $0A
088CE 39 90                     	.dw CreateObject_Door ; $0B
088D0 D7 8C                     	.dw CreateObject_Vine ; $0C
088D2 D7 8C                     	.dw CreateObject_Vine ; $0D
088D4 5F 8E                     	.dw CreateObject_StarBackground ; $0E
088D6 E3 90                     	.dw CreateObject_Pillar ; $0F
088D8                           
088D8                           CreateObjects_10:
088D8 AD 0E 05                  	LDA byte_RAM_50E
088DB 20 A6 D9                  	JSR JumpToTableAfterJump
088DE                           
088DE 99 8C                     	.dw CreateObject_BigCloud ; $10
088E0 A5 8C                     	.dw CreateObject_SmallCloud ; $11
088E2 FD 8C                     	.dw CreateObject_VineBottom ; $12
088E4 6A 8A                     	.dw CreateObject_LightEntranceRight ; $13
088E6 C7 8A                     	.dw CreateObject_LightEntranceLeft ; $14
088E8 40 8C                     	.dw CreateObject_Tall ; $15
088EA 40 8C                     	.dw CreateObject_Tall ; $16
088EC E7 8D                     	.dw CreateObject_Pyramid ; $17
088EE 38 8D                     	.dw CreateObject_Wall ; $18
088F0 38 8D                     	.dw CreateObject_Wall ; $19
088F2 07 91                     	.dw CreateObject_Horn ; $1A
088F4 22 91                     	.dw CreateObject_DrawBridgeChain ; $1B
088F6 39 90                     	.dw CreateObject_Door ; $1C
088F8 39 90                     	.dw CreateObject_Door ; $1D
088FA 0F 90                     	.dw CreateObject_RockWallEntrance ; $1E
088FC AA 8F                     	.dw CreateObject_TreeBackground ; $1F
088FE                           
088FE                           CreateObjects_20:
088FE 4C 29 8D                  	JMP CreateObject_SingleObject
08901                           
08901                           WorldObjectTilePointersLo:
08901 0F                        	.db <World1ObjectTiles
08902 33                        	.db <World2ObjectTiles
08903 57                        	.db <World3ObjectTiles
08904 7B                        	.db <World4ObjectTiles
08905 9F                        	.db <World5ObjectTiles
08906 C3                        	.db <World6ObjectTiles
08907 E7                        	.db <World7ObjectTiles
08908                           
08908                           WorldObjectTilePointersHi:
08908 89                        	.db >World1ObjectTiles
08909 89                        	.db >World2ObjectTiles
0890A 89                        	.db >World3ObjectTiles
0890B 89                        	.db >World4ObjectTiles
0890C 89                        	.db >World5ObjectTiles
0890D 89                        	.db >World6ObjectTiles
0890E 89                        	.db >World7ObjectTiles
0890F                           
0890F                           World1ObjectTiles:
0890F 97 92 12 12               	.db $97, $92, $12, $12 ; 3X (horizontal jump-through block)
08913 1C 99 1C 1C               	.db $1C, $99, $1C, $1C ; 4X (horizontal solid block)
08917 45 45 45 45               	.db $45, $45, $45, $45 ; 5X (small veggie grass)
0891B 65 65 65 65               	.db $65, $65, $65, $65 ; 6X (bridge)
0891F 1A 1A 1A 1A               	.db $1A, $1A, $1A, $1A ; 7X (spikes)
08923 A0 00 9D A2               	.db $A0, $00, $9D, $A2 ; 8X (vertical wall, eg. rock, bombable)
08927 A0 A0 A0 A0               	.db $A0, $A0, $A0, $A0 ; 9X (vertical wall, eg. rock with angle)
0892B 80 07 81 80               	.db $80, $07, $81, $80 ; AX (ladder, chain)
0892F 81 81 81 81               	.db $81, $81, $81, $81 ; AX over background (ladder with shadow)
08933                           
08933                           World2ObjectTiles:
08933 96 92 93 12               	.db $96, $92, $93, $12 ; 3X (horizontal jump-through block)
08937 1C 1C 1C 1C               	.db $1C, $1C, $1C, $1C ; 4X (horizontal solid block)
0893B 45 45 45 45               	.db $45, $45, $45, $45 ; 5X (small veggie grass)
0893F 65 65 65 65               	.db $65, $65, $65, $65 ; 6X (bridge)
08943 1A 1A 1A 1A               	.db $1A, $1A, $1A, $1A ; 7X (spikes)
08947 A0 40 9D 18               	.db $A0, $40, $9D, $18 ; 8X (vertical wall, eg. rock, bombable)
0894B A0 A0 A0 A0               	.db $A0, $A0, $A0, $A0 ; 9X (vertical wall, eg. rock with angle)
0894F 80 07 81 80               	.db $80, $07, $81, $80 ; AX (ladder, chain)
08953 81 81 81 81               	.db $81, $81, $81, $81 ; AX over background (ladder with shadow)
08957                           
08957                           World3ObjectTiles:
08957 97 92 12 12               	.db $97, $92, $12, $12 ; 3X (horizontal jump-through block)
0895B 1C 99 A0 1C               	.db $1C, $99, $A0, $1C ; 4X (horizontal solid block)
0895F 45 45 45 45               	.db $45, $45, $45, $45 ; 5X (small veggie grass)
08963 65 65 65 65               	.db $65, $65, $65, $65 ; 6X (bridge)
08967 1A 1A 1A 1A               	.db $1A, $1A, $1A, $1A ; 7X (spikes)
0896B A0 00 9D A2               	.db $A0, $00, $9D, $A2 ; 8X (vertical wall, eg. rock, bombable)
0896F A0 A0 A0 A0               	.db $A0, $A0, $A0, $A0 ; 9X (vertical wall, eg. rock with angle)
08973 80 07 81 80               	.db $80, $07, $81, $80 ; AX (ladder, chain)
08977 81 81 81 81               	.db $81, $81, $81, $81 ; AX over background (ladder with shadow)
0897B                           
0897B                           World4ObjectTiles:
0897B 16 92 16 12               	.db $16, $92, $16, $12 ; 3X (horizontal jump-through block)
0897F 1C 99 A2 18               	.db $1C, $99, $A2, $18 ; 4X (horizontal solid block)
08983 45 45 45 45               	.db $45, $45, $45, $45 ; 5X (small veggie grass)
08987 65 65 65 65               	.db $65, $65, $65, $65 ; 6X (bridge)
0898B 1A 1A 1A 1A               	.db $1A, $1A, $1A, $1A ; 7X (spikes)
0898F A0 1F 9D 18               	.db $A0, $1F, $9D, $18 ; 8X (vertical wall, eg. rock, bombable)
08993 A0 A0 A0 A0               	.db $A0, $A0, $A0, $A0 ; 9X (vertical wall, eg. rock with angle)
08997 80 07 81 80               	.db $80, $07, $81, $80 ; AX (ladder, chain)
0899B 81 81 81 81               	.db $81, $81, $81, $81 ; AX over background (ladder with shadow)
0899F                           
0899F                           World5ObjectTiles:
0899F 97 92 12 12               	.db $97, $92, $12, $12 ; 3X (horizontal jump-through block)
089A3 1C 99 1C 1C               	.db $1C, $99, $1C, $1C ; 4X (horizontal solid block)
089A7 45 45 45 45               	.db $45, $45, $45, $45 ; 5X (small veggie grass)
089AB 65 65 65 65               	.db $65, $65, $65, $65 ; 6X (bridge)
089AF 1A 1A 1A 1A               	.db $1A, $1A, $1A, $1A ; 7X (spikes)
089B3 A0 A4 9D 18               	.db $A0, $A4, $9D, $18 ; 8X (vertical wall, eg. rock, bombable)
089B7 A0 A0 A0 A0               	.db $A0, $A0, $A0, $A0 ; 9X (vertical wall, eg. rock with angle)
089BB 80 07 81 80               	.db $80, $07, $81, $80 ; AX (ladder, chain)
089BF 81 81 81 81               	.db $81, $81, $81, $81 ; AX over background (ladder with shadow)
089C3                           
089C3                           World6ObjectTiles:
089C3 96 92 93 12               	.db $96, $92, $93, $12 ; 3X (horizontal jump-through block)
089C7 1C 1C 1C 1C               	.db $1C, $1C, $1C, $1C ; 4X (horizontal solid block)
089CB 45 45 45 45               	.db $45, $45, $45, $45 ; 5X (small veggie grass)
089CF 65 65 65 65               	.db $65, $65, $65, $65 ; 6X (bridge)
089D3 1A 1A 1A 1A               	.db $1A, $1A, $1A, $1A ; 7X (spikes)
089D7 A0 40 9D 18               	.db $A0, $40, $9D, $18 ; 8X (vertical wall, eg. rock, bombable)
089DB A0 A0 A0 A0               	.db $A0, $A0, $A0, $A0 ; 9X (vertical wall, eg. rock with angle)
089DF 80 07 81 80               	.db $80, $07, $81, $80 ; AX (ladder, chain)
089E3 81 81 81 81               	.db $81, $81, $81, $81 ; AX over background (ladder with shadow)
089E7                           
089E7                           World7ObjectTiles:
089E7 12 68 12 9D               	.db $12, $68, $12, $9D ; 3X (horizontal jump-through block)
089EB 9C 67 64 69               	.db $9C, $67, $64, $69 ; 4X (horizontal solid block)
089EF 45 45 45 45               	.db $45, $45, $45, $45 ; 5X (small veggie grass)
089F3 65 65 65 65               	.db $65, $65, $65, $65 ; 6X (bridge)
089F7 1A 1A 1A 1A               	.db $1A, $1A, $1A, $1A ; 7X (spikes)
089FB 9C 9C 9C 9C               	.db $9C, $9C, $9C, $9C ; 8X (vertical wall, eg. rock, bombable)
089FF A0 A0 A0 A0               	.db $A0, $A0, $A0, $A0 ; 9X (vertical wall, eg. rock with angle)
08A03 80 07 81 80               	.db $80, $07, $81, $80 ; AX (ladder, chain)
08A07 81 81 81 81               	.db $81, $81, $81, $81 ; AX over background (ladder with shadow)
08A0B                           
08A0B                           
08A0B                           IFDEF LEVEL_ENGINE_UPGRADES
08A0B                           ClimbableTileSearch:
08A0B                           	.db BackgroundTile_LadderShadow
08A0B                           	.db BackgroundTile_Ladder
08A0B                           	.db BackgroundTile_Chain
08A0B                           	.db BackgroundTile_Vine
08A0B                           
08A0B                           ClimbableTilePlatform:
08A0B                           	.db BackgroundTile_LadderStandableShadow
08A0B                           	.db BackgroundTile_LadderStandable
08A0B                           	.db BackgroundTile_ChainStandable
08A0B                           	.db BackgroundTile_VineStandable
08A0B                           
08A0B                           
08A0B                           ;
08A0B                           ; Find the corresponding climbable tile
08A0B                           ;
08A0B                           ; Input
08A0B                           ;   A = search tile
08A0B                           ; Output
08A0B                           ;   A = replace tile
08A0B                           ;   C = set if a match was found
08A0B                           ;
08A0B                           FindClimableTile:
08A0B                           	STX byte_RAM_7
08A0B                           	LDX #(ClimbableTilePlatform - ClimbableTileSearch - 1)
08A0B                           
08A0B                           FindClimableTile_Loop:
08A0B                           	CMP ClimbableTileSearch, X
08A0B                           	BEQ FindClimableTile_LoadReplacement
08A0B                           
08A0B                           	DEX
08A0B                           	BPL FindClimableTile_Loop
08A0B                           
08A0B                           	LDX byte_RAM_7
08A0B                           	CLC
08A0B                           	RTS
08A0B                           
08A0B                           FindClimableTile_LoadReplacement:
08A0B                           	LDA ClimbableTilePlatform, X
08A0B                           	LDX byte_RAM_7
08A0B                           	RTS
08A0B                           
08A0B                           ;
08A0B                           ; Creatse a climbable tile that you can stand on based on ObjectTypeAXthruFX
08A0B                           ;
08A0B                           ; Output
08A0B                           ;   A = tile that was written
08A0B                           ;
08A0B                           CreateObject_StandableObjectType:
08A0B                           	LDA ObjectTypeAXthruFX
08A0B                           	BEQ CreateObject_StandableObjectType_TableOffset
08A0B                           
08A0B                           	; Offset for shadow
08A0B                           	CLC
08A0B                           	ADC #$04
08A0B                           
08A0B                           CreateObject_StandableObjectType_TableOffset:
08A0B                           	; Offset to ladder/chain object definition
08A0B                           	ADC #$1C
08A0B                           	TAX
08A0B                           
08A0B                           	LDY byte_RAM_E7
08A0B                           	STX byte_RAM_7
08A0B                           	STY byte_RAM_8
08A0B                           	LDX CurrentWorldTileset
08A0B                           	LDA WorldObjectTilePointersLo, X
08A0B                           	STA byte_RAM_C
08A0B                           	LDA WorldObjectTilePointersHi, X
08A0B                           	STA byte_RAM_D
08A0B                           	LDY byte_RAM_7
08A0B                           	LDA (byte_RAM_C), Y
08A0B                           	LDY byte_RAM_8
08A0B                           	LDX byte_RAM_7
08A0B                           
08A0B                           	JSR FindClimableTile
08A0B                           
08A0B                           	STA (byte_RAM_1), Y
08A0B                           	RTS
08A0B                           
08A0B                           ;
08A0B                           ; Creates a climbable tile that you can stand on based on the based on the tile underneath
08A0B                           ;
08A0B                           ; Output
08A0B                           ;   A = tile that was written
08A0B                           ;
08A0B                           CreateObject_StandableAutomatic:
08A0B                           	LDY byte_RAM_E7
08A0B                           	LDA (byte_RAM_1), Y
08A0B                           
08A0B                           	JSR FindClimableTile
08A0B                           	BCC CreateObject_StandableObjectType
08A0B                           
08A0B                           	STA (byte_RAM_1), Y
08A0B                           	RTS
08A0B                           ENDIF
08A0B                           
08A0B                           
08A0B                           ;
08A0B                           ; Places a tile using the world-specific tile lookup table
08A0B                           ;
08A0B                           ; Input
08A0B                           ;   Y = destination tile
08A0B                           ;   byte_RAM_50E = type of object to create (upper nybble of level object minus 3)
08A0B                           ;     $00 = jumpthrough block
08A0B                           ;     $01 = solid block
08A0B                           ;     $02 = grass
08A0B                           ;     $03 = bridge
08A0B                           ;     $04 = spikes
08A0B                           ;     $05 = vertical rock
08A0B                           ;     $06 = vertical rock with angle
08A0B                           ;     $07 = ladder
08A0B                           ;     $08 = whale
08A0B                           ;     $09 = jumpthrough platform
08A0B                           ;     $0A = log platform
08A0B                           ;     $0B = cloud platform
08A0B                           ;     $0C = waterfall
08A0B                           ; Output
08A0B                           ;   A = tile that was written
08A0B                           CreateWorldSpecificTile:
08A0B AD 0E 05                  	LDA byte_RAM_50E
08A0E 0A                        	ASL A
08A0F 0A                        	ASL A
08A10 85 0F                     	STA byte_RAM_F
08A12 AD 0E 05                  	LDA byte_RAM_50E
08A15 C9 07                     	CMP #$07
08A17 90 06                     	BCC CreateWorldSpecificTile_3Xthru9X
08A19                           
08A19                           CreateWorldSpecificTile_AXthruFX:
08A19 AD 43 05                  	LDA ObjectTypeAXthruFX
08A1C 4C 22 8A                  	JMP CreateWorldSpecificTile_ApplyObjectType
08A1F                           
08A1F                           CreateWorldSpecificTile_3Xthru9X:
08A1F AD 42 05                  	LDA ObjectType3Xthru9X
08A22                           
08A22                           CreateWorldSpecificTile_ApplyObjectType:
08A22 18                        	CLC
08A23 65 0F                     	ADC byte_RAM_F
08A25 AA                        	TAX
08A26 AD 0E 05                  	LDA byte_RAM_50E
08A29 C9 03                     	CMP #$03
08A2B D0 0A                     	BNE CreateWorldSpecificTile_LookUpTile
08A2D                           
08A2D                           	; bridge casts a shadow on background bricks
08A2D B1 01                     	LDA (byte_RAM_1), Y
08A2F C9 90                     	CMP #BackgroundTile_BackgroundBrick
08A31 D0 04                     	BNE CreateWorldSpecificTile_LookUpTile
08A33                           
08A33 A9 66                     	LDA #BackgroundTile_BridgeShadow
08A35 D0 22                     	BNE CreateWorldSpecificTile_Exit
08A37                           
08A37                           CreateWorldSpecificTile_LookUpTile:
08A37 86 07                     	STX byte_RAM_7
08A39 84 08                     	STY byte_RAM_8
08A3B AE 34 06                  	LDX CurrentWorldTileset
08A3E                           IFDEF PLAYER_STUFF
08A3E AD D4 7D                  	LDA StartCustomExterior
08A41 F0 04                         BEQ +
08A43 29 7F                         AND #$7F
08A45 AA                            TAX
08A46 CA                            DEX
08A47                           +
08A47                           ENDIF
08A47 BD 01 89                  	LDA WorldObjectTilePointersLo, X
08A4A 85 0C                     	STA byte_RAM_C
08A4C BD 08 89                  	LDA WorldObjectTilePointersHi, X
08A4F 85 0D                     	STA byte_RAM_D
08A51 A4 07                     	LDY byte_RAM_7
08A53 B1 0C                     	LDA (byte_RAM_C), Y
08A55 A4 08                     	LDY byte_RAM_8
08A57 A6 07                     	LDX byte_RAM_7
08A59                           
08A59                           CreateWorldSpecificTile_Exit:
08A59 91 01                     	STA (byte_RAM_1), Y
08A5B 60                        	RTS
08A5C                           
08A5C                           
08A5C                           CreateObject_HorizontalBlocks:
08A5C A4 E7                     	LDY byte_RAM_E7
08A5E                           
08A5E                           CreateObject_HorizontalBlocks_Loop:
08A5E 20 0B 8A                  	JSR CreateWorldSpecificTile
08A61                           
08A61 20 53 9A                  	JSR IncrementAreaXOffset
08A64                           
08A64 CE 0D 05                  	DEC byte_RAM_50D
08A67 10 F5                     	BPL CreateObject_HorizontalBlocks_Loop
08A69                           
08A69 60                        	RTS
08A6A                           
08A6A                           
08A6A                           CreateObject_LightEntranceRight:
08A6A                           IFNDEF PLAYER_STUFF
08A6A                           	LDA CurrentWorldTileset
08A6A                           	CMP #$05
08A6A                           	BNE CreateObject_LightEntranceRight_NotWorld6
08A6A                           ENDIF
08A6A                           
08A6A 4C 8D 8A                  	JMP CreateObject_LightEntranceRight_World6
08A6D                           
08A6D                           CreateObject_LightEntranceRight_NotWorld6:
08A6D A4 E7                     	LDY byte_RAM_E7
08A6F A9 52                     	LDA #BackgroundTile_LightDoor
08A71 91 01                     	STA (byte_RAM_1), Y
08A73 C8                        	INY
08A74 A9 53                     	LDA #BackgroundTile_LightTrailRight
08A76 91 01                     	STA (byte_RAM_1), Y
08A78 A5 E7                     	LDA byte_RAM_E7
08A7A 18                        	CLC
08A7B 69 10                     	ADC #$10
08A7D A8                        	TAY
08A7E A9 52                     	LDA #BackgroundTile_LightDoor
08A80 91 01                     	STA (byte_RAM_1), Y
08A82 C8                        	INY
08A83 A9 54                     	LDA #BackgroundTile_LightTrail
08A85 91 01                     	STA (byte_RAM_1), Y
08A87 C8                        	INY
08A88 A9 53                     	LDA #BackgroundTile_LightTrailRight
08A8A 91 01                     	STA (byte_RAM_1), Y
08A8C                           
08A8C                           IFNDEF DISABLE_DOOR_POINTERS
08A8C                           	LDA CurrentWorld
08A8C                           	CMP #$05
08A8C                           	BEQ CreateObject_LightEntranceRight_World6or7Exit
08A8C                           
08A8C                           	LDA CurrentWorld
08A8C                           	CMP #$06
08A8C                           	BEQ CreateObject_LightEntranceRight_World6or7Exit
08A8C                           
08A8C                           	JSR LevelParser_EatDoorPointer
08A8C                           ENDIF
08A8C                           
08A8C                           CreateObject_LightEntranceRight_World6or7Exit:
08A8C 60                        	RTS
08A8D                           
08A8D                           CreateObject_LightEntranceRight_World6:
08A8D A4 E7                     	LDY byte_RAM_E7
08A8F A9 00                     	LDA #$00
08A91 85 08                     	STA byte_RAM_8
08A93                           
08A93                           CreateObject_LightEntranceRight_World6Loop:
08A93                           IFDEF PLAYER_STUFF
08A93 A5 08                         LDA byte_RAM_8
08A95 C9 02                         CMP #$2
08A97 90 06                         BCC CreateObj_SkipAirCheck
08A99                           ENDIF
08A99 B1 01                     	LDA (byte_RAM_1), Y
08A9B C9 40                     	CMP #BackgroundTile_Sky
08A9D D0 27                     	BNE CreateObject_LightEntranceRight_World6_Exit
08A9F                           
08A9F                           IFDEF PLAYER_STUFF
08A9F                           CreateObj_SkipAirCheck:
08A9F                           ENDIF
08A9F A9 52                     	LDA #BackgroundTile_LightDoor
08AA1 91 01                     	STA (byte_RAM_1), Y
08AA3 A5 08                     	LDA byte_RAM_8
08AA5 AA                        	TAX
08AA6                           
08AA6                           CreateObject_LightEntranceRight_World6InnerLoop:
08AA6 E0 00                     	CPX #$00
08AA8 F0 09                     	BEQ CreateObject_LightEntranceRight_World6_TrailRight
08AAA                           
08AAA C8                        	INY
08AAB A9 54                     	LDA #BackgroundTile_LightTrail
08AAD 91 01                     	STA (byte_RAM_1), Y
08AAF CA                        	DEX
08AB0 4C A6 8A                  	JMP CreateObject_LightEntranceRight_World6InnerLoop
08AB3                           
08AB3                           CreateObject_LightEntranceRight_World6_TrailRight:
08AB3 C8                        	INY
08AB4 A9 53                     	LDA #BackgroundTile_LightTrailRight
08AB6 91 01                     	STA (byte_RAM_1), Y
08AB8 E6 08                     	INC byte_RAM_8
08ABA A4 E7                     	LDY byte_RAM_E7
08ABC 98                        	TYA
08ABD 18                        	CLC
08ABE 69 10                     	ADC #$10
08AC0 A8                        	TAY
08AC1 85 E7                     	STA byte_RAM_E7
08AC3 4C 93 8A                  	JMP CreateObject_LightEntranceRight_World6Loop
08AC6                           
08AC6                           CreateObject_LightEntranceRight_World6_Exit:
08AC6 60                        	RTS
08AC7                           
08AC7                           
08AC7                           CreateObject_LightEntranceLeft:
08AC7 A4 E7                     	LDY byte_RAM_E7
08AC9 A9 52                     	LDA #BackgroundTile_LightDoor
08ACB 91 01                     	STA (byte_RAM_1), Y
08ACD 88                        	DEY
08ACE A9 55                     	LDA #BackgroundTile_LightTrailLeft
08AD0 91 01                     	STA (byte_RAM_1), Y
08AD2 A4 E7                     	LDY byte_RAM_E7
08AD4 98                        	TYA
08AD5 18                        	CLC
08AD6 69 10                     	ADC #$10
08AD8 A8                        	TAY
08AD9 A9 52                     	LDA #BackgroundTile_LightDoor
08ADB 91 01                     	STA (byte_RAM_1), Y
08ADD 88                        	DEY
08ADE A9 54                     	LDA #BackgroundTile_LightTrail
08AE0 91 01                     	STA (byte_RAM_1), Y
08AE2 88                        	DEY
08AE3 A9 55                     	LDA #BackgroundTile_LightTrailLeft
08AE5 91 01                     	STA (byte_RAM_1), Y
08AE7                           
08AE7                           IFNDEF DISABLE_DOOR_POINTERS
08AE7                           	LDA CurrentWorld
08AE7                           	CMP #$05
08AE7                           	BEQ CreateObject_LightEntranceLeft_World6or7Exit
08AE7                           
08AE7                           	LDA CurrentWorld
08AE7                           	CMP #$06
08AE7                           	BEQ CreateObject_LightEntranceLeft_World6or7Exit
08AE7                           
08AE7                           	JSR LevelParser_EatDoorPointer
08AE7                           ENDIF
08AE7                           
08AE7                           CreateObject_LightEntranceLeft_World6or7Exit:
08AE7 60                        	RTS
08AE8                           
08AE8                           
08AE8                           CreateObject_VerticalBlocks:
08AE8 A4 E7                     	LDY byte_RAM_E7
08AEA AD 0E 05                  	LDA byte_RAM_50E
08AED C9 06                     	CMP #$06
08AEF D0 1B                     	BNE CreateObject_VerticalBlocks_NotClawGrip
08AF1                           
08AF1 AD 31 05                  	LDA CurrentLevel
08AF4 C9 0E                     	CMP #$0E
08AF6 D0 14                     	BNE CreateObject_VerticalBlocks_NotClawGrip
08AF8                           
08AF8 AD 32 05                  	LDA CurrentLevelArea
08AFB C9 05                     	CMP #$05
08AFD D0 0D                     	BNE CreateObject_VerticalBlocks_NotClawGrip
08AFF                           
08AFF                           CreateObject_VerticalBlocks_ClawGripRockLoop:
08AFF A9 22                     	LDA #BackgroundTile_ClawGripRock
08B01 91 01                     	STA (byte_RAM_1), Y
08B03 20 6B 9A                  	JSR IncrementAreaYOffset
08B06                           
08B06 CE 0D 05                  	DEC byte_RAM_50D
08B09 10 F4                     	BPL CreateObject_VerticalBlocks_ClawGripRockLoop
08B0B                           
08B0B 60                        	RTS
08B0C                           
08B0C                           CreateObject_VerticalBlocks_NotClawGrip:
08B0C AD 0E 05                  	LDA byte_RAM_50E
08B0F C9 06                     	CMP #$06
08B11 D0 07                     	BNE CreateObject_VerticalBlocks_Normal
08B13                           
08B13 A9 9F                     	LDA #BackgroundTile_RockWallAngle
08B15 91 01                     	STA (byte_RAM_1), Y
08B17 4C 1D 8B                  	JMP CreateObject_VerticalBlocks_NextRow
08B1A                           
08B1A                           CreateObject_VerticalBlocks_Normal:
08B1A 20 0B 8A                  	JSR CreateWorldSpecificTile
08B1D                           
08B1D                           CreateObject_VerticalBlocks_NextRow:
08B1D 20 6B 9A                  	JSR IncrementAreaYOffset
08B20                           
08B20 CE 0D 05                  	DEC byte_RAM_50D
08B23 10 F5                     	BPL CreateObject_VerticalBlocks_Normal
08B25                           
08B25 60                        	RTS
08B26                           
08B26                           
08B26                           World1thru6SingleBlocks:
08B26 69                        	.db BackgroundTile_MushroomBlock
08B27 6C                        	.db BackgroundTile_POWBlock
08B28 9D                        	.db BackgroundTile_BombableBrick
08B29 D4                        	.db BackgroundTile_VineStandable
08B2A 72                        	.db BackgroundTile_JarSmall
08B2B 94                        	.db BackgroundTile_LadderStandable
08B2C 95                        	.db BackgroundTile_LadderStandableShadow
08B2D                           
08B2D                           World7SingleBlocks:
08B2D 69                        	.db BackgroundTile_MushroomBlock
08B2E 6C                        	.db BackgroundTile_POWBlock
08B2F 9D                        	.db BackgroundTile_BombableBrick
08B30 17                        	.db BackgroundTile_ChainStandable
08B31 72                        	.db BackgroundTile_JarSmall
08B32 94                        	.db BackgroundTile_LadderStandable
08B33 95                        	.db BackgroundTile_LadderStandableShadow
08B34                           
08B34                           CreateObject_SingleBlock:
08B34 AD 0E 05                  	LDA byte_RAM_50E
08B37 AA                        	TAX
08B38 C9 05                     	CMP #$05
08B3A D0 06                     	BNE CreateObject_SingleBlock_NotLadderStandable
08B3C                           
08B3C                           	; the ladder has a shadow ObjectTypeAXthruFX is set
08B3C AD 43 05                  	LDA ObjectTypeAXthruFX
08B3F F0 01                     	BEQ CreateObject_SingleBlock_NotLadderStandable
08B41                           
08B41 E8                        	INX
08B42                           
08B42                           CreateObject_SingleBlock_NotLadderStandable:
08B42 A4 E7                     	LDY byte_RAM_E7
08B44 AD 34 06                  	LDA CurrentWorldTileset
08B47 C9 06                     	CMP #$06
08B49 D0 06                     	BNE CreateObject_SingleBlock_NotWorld7
08B4B                           
08B4B                           CreateObject_SingleBlock_World7:
08B4B BD 2D 8B                  	LDA World7SingleBlocks, X
08B4E 4C 54 8B                  	JMP CreateObject_SingleBlock_Exit
08B51                           
08B51                           CreateObject_SingleBlock_NotWorld7:
08B51 BD 26 8B                  	LDA World1thru6SingleBlocks, X
08B54                           
08B54                           CreateObject_SingleBlock_Exit:
08B54 91 01                     	STA (byte_RAM_1), Y
08B56 60                        	RTS
08B57                           
08B57                           HorizontalPlatformLeftTiles:
08B57 75                        	.db BackgroundTile_LogLeft
08B58 13                        	.db BackgroundTile_CloudLeft
08B59                           HorizontalPlatformMiddleTiles:
08B59 76                        	.db BackgroundTile_LogMiddle
08B5A 14                        	.db BackgroundTile_CloudMiddle
08B5B                           HorizontalPlatformRightTiles:
08B5B 77                        	.db BackgroundTile_LogRight
08B5C 15                        	.db BackgroundTile_CloudRight
08B5D                           
08B5D                           CreateObject_HorizontalPlatform:
08B5D AD 34 06                  	LDA CurrentWorldTileset
08B60 C9 04                     	CMP #$04
08B62 D0 03                     	BNE CreateObject_HorizontalPlatform_NotWorld5
08B64                           
08B64 4C 6B 8F                  	JMP CreateObject_HorizontalPlatform_World5
08B67                           
08B67                           CreateObject_HorizontalPlatform_NotWorld5:
08B67 A4 E7                     	LDY byte_RAM_E7
08B69 AD 0E 05                  	LDA byte_RAM_50E
08B6C 38                        	SEC
08B6D E9 0A                     	SBC #$0A
08B6F AA                        	TAX
08B70 BD 57 8B                  	LDA HorizontalPlatformLeftTiles, X
08B73 91 01                     	STA (byte_RAM_1), Y
08B75 CE 0D 05                  	DEC byte_RAM_50D
08B78 F0 0D                     	BEQ CreateObject_HorizontalPlatform_Exit
08B7A                           
08B7A                           CreateObject_HorizontalPlatform_Loop:
08B7A 20 53 9A                  	JSR IncrementAreaXOffset
08B7D                           
08B7D BD 59 8B                  	LDA HorizontalPlatformMiddleTiles, X
08B80 91 01                     	STA (byte_RAM_1), Y
08B82 CE 0D 05                  	DEC byte_RAM_50D
08B85 D0 F3                     	BNE CreateObject_HorizontalPlatform_Loop
08B87                           
08B87                           CreateObject_HorizontalPlatform_Exit:
08B87 20 53 9A                  	JSR IncrementAreaXOffset
08B8A                           
08B8A BD 5B 8B                  	LDA HorizontalPlatformRightTiles, X
08B8D 91 01                     	STA (byte_RAM_1), Y
08B8F 60                        	RTS
08B90                           
08B90                           
08B90                           GreenPlatformTiles:
08B90 CA                        	.db BackgroundTile_GreenPlatformTopLeft
08B91 CC                        	.db BackgroundTile_GreenPlatformTop
08B92 CE                        	.db BackgroundTile_GreenPlatformTopRight
08B93 C7                        	.db BackgroundTile_GreenPlatformLeft
08B94 C8                        	.db BackgroundTile_GreenPlatformMiddle
08B95 C9                        	.db BackgroundTile_GreenPlatformRight
08B96                           
08B96                           ; These are the background tiles that the green platforms are allowed to overwrite.
08B96                           ; Any other tiles will stop the green platform from extending to the bottom of the page.
08B96                           GreenPlatformOverwriteTiles:
08B96 40                        	.db BackgroundTile_Sky
08B97 04                        	.db BackgroundTile_WaterfallTop
08B98 05                        	.db BackgroundTile_Waterfall
08B99                           IFDEF LEVEL_ENGINE_UPGRADES
08B99                           	.db BackgroundTile_WaterfallSplash
08B99                           	.db BackgroundTile_Water
08B99                           	.db BackgroundTile_WaterTop
08B99                           ENDIF
08B99                           GreenPlatformTiles_End:
08B99                           
08B99                           
08B99                           IFNDEF ENABLE_LEVEL_OBJECT_MODE
08B99                           ; Either draw typical green hill platforms (W1-6) or a mushroom-like platform (W7)
08B99                           CreateObject_JumpthroughPlatform:
08B99                           	LDA CurrentWorldTileset
08B99                           	CMP #$06
08B99                           	BNE CreateObject_GreenJumpthroughPlatform
08B99                           
08B99                           	JMP CreateObject_MushroomJumpthroughPlatform
08B99                           ENDIF
08B99                           
08B99                           
08B99                           IFDEF ENABLE_LEVEL_OBJECT_MODE
08B99                           CreateObject_Platform_CX:
08B99 AD 33 06                  	LDA LevelObjectMode
08B9C 20 A6 D9                  	JSR JumpToTableAfterJump
08B9F                           
08B9F A7 8B                     	.dw CreateObject_GreenJumpthroughPlatform
08BA1 A7 8B                     	.dw CreateObject_GreenJumpthroughPlatform
08BA3 DB 8E                     	.dw CreateObject_Whale
08BA5 9F 90                     	.dw CreateObject_MushroomJumpthroughPlatform
08BA7                           ENDIF
08BA7                           
08BA7                           
08BA7                           ; Typical (usually) green hill platforms used throughout World 1 through 6
08BA7                           CreateObject_GreenJumpthroughPlatform:
08BA7 A2 00                     	LDX #$00
08BA9                           
08BA9                           loc_BANK6_8BBF:
08BA9 86 0B                     	STX byte_RAM_B
08BAB A6 E8                     	LDX byte_RAM_E8
08BAD 20 48 9A                  	JSR SetAreaPageAddr_Bank6
08BB0                           
08BB0 A2 05                     	LDX #$05
08BB2 A4 E7                     	LDY byte_RAM_E7
08BB4 A6 0B                     	LDX byte_RAM_B
08BB6 A4 E7                     	LDY byte_RAM_E7
08BB8 AD 0D 05                  	LDA byte_RAM_50D
08BBB 85 07                     	STA byte_RAM_7
08BBD 20 EE 8B                  	JSR loc_BANK6_8C04
08BC0                           
08BC0 E8                        	INX
08BC1 A5 07                     	LDA byte_RAM_7
08BC3 F0 08                     	BEQ loc_BANK6_8BE3
08BC5                           
08BC5                           loc_BANK6_8BDB:
08BC5 20 53 9A                  	JSR IncrementAreaXOffset
08BC8                           
08BC8 20 EE 8B                  	JSR loc_BANK6_8C04
08BCB                           
08BCB D0 F8                     	BNE loc_BANK6_8BDB
08BCD                           
08BCD                           loc_BANK6_8BE3:
08BCD 20 53 9A                  	JSR IncrementAreaXOffset
08BD0                           
08BD0 E8                        	INX
08BD1 20 EE 8B                  	JSR loc_BANK6_8C04
08BD4                           
08BD4 A5 E7                     	LDA byte_RAM_E7
08BD6 18                        	CLC
08BD7 69 10                     	ADC #$10
08BD9 C9 F0                     	CMP #$F0
08BDB B0 07                     	BCS locret_BANK6_8BFA
08BDD                           
08BDD A2 03                     	LDX #$03
08BDF 85 E7                     	STA byte_RAM_E7
08BE1 4C A9 8B                  	JMP loc_BANK6_8BBF
08BE4                           
08BE4                           ; ---------------------------------------------------------------------------
08BE4                           
08BE4                           locret_BANK6_8BFA:
08BE4 60                        	RTS
08BE5                           
08BE5                           ; ---------------------------------------------------------------------------
08BE5                           GreenPlatformOverlapCompareTiles:
08BE5 C7                        	.db BackgroundTile_GreenPlatformLeft
08BE6 C8                        	.db BackgroundTile_GreenPlatformMiddle
08BE7 C9                        	.db BackgroundTile_GreenPlatformRight
08BE8                           GreenPlatformOverlapLeftTiles:
08BE8 D2                        	.db BackgroundTile_GreenPlatformTopLeftOverlapEdge
08BE9 D0                        	.db BackgroundTile_GreenPlatformTopLeftOverlap
08BEA D0                        	.db BackgroundTile_GreenPlatformTopLeftOverlap
08BEB                           GreenPlatformOverlapRightTiles:
08BEB D1                        	.db BackgroundTile_GreenPlatformTopRightOverlap
08BEC D1                        	.db BackgroundTile_GreenPlatformTopRightOverlap
08BED D3                        	.db BackgroundTile_GreenPlatformTopRightOverlapEdge
08BEE                           
08BEE                           loc_BANK6_8C04:
08BEE 86 08                     	STX byte_RAM_8
08BF0 8A                        	TXA
08BF1 D0 13                     	BNE loc_BANK6_8C1C
08BF3                           
08BF3 A2 02                     	LDX #$02
08BF5 B1 01                     	LDA (byte_RAM_1), Y
08BF7                           
08BF7                           loc_BANK6_8C0D:
08BF7 DD E5 8B                  	CMP GreenPlatformOverlapCompareTiles, X
08BFA F0 05                     	BEQ loc_BANK6_8C17
08BFC                           
08BFC CA                        	DEX
08BFD 10 F8                     	BPL loc_BANK6_8C0D
08BFF                           
08BFF 30 1E                     	BMI loc_BANK6_8C35
08C01                           
08C01                           loc_BANK6_8C17:
08C01 BD E8 8B                  	LDA GreenPlatformOverlapLeftTiles, X
08C04 D0 2F                     	BNE loc_BANK6_8C4B
08C06                           
08C06                           loc_BANK6_8C1C:
08C06 A6 08                     	LDX byte_RAM_8
08C08 E0 02                     	CPX #$02
08C0A D0 13                     	BNE loc_BANK6_8C35
08C0C                           
08C0C A2 02                     	LDX #$02
08C0E B1 01                     	LDA (byte_RAM_1), Y
08C10                           
08C10                           loc_BANK6_8C26:
08C10 DD E5 8B                  	CMP GreenPlatformOverlapCompareTiles, X
08C13 F0 05                     	BEQ loc_BANK6_8C30
08C15                           
08C15 CA                        	DEX
08C16 10 F8                     	BPL loc_BANK6_8C26
08C18                           
08C18 30 05                     	BMI loc_BANK6_8C35
08C1A                           
08C1A                           loc_BANK6_8C30:
08C1A BD EB 8B                  	LDA GreenPlatformOverlapRightTiles, X
08C1D D0 16                     	BNE loc_BANK6_8C4B
08C1F                           
08C1F                           loc_BANK6_8C35:
08C1F A2 08                     	LDX #(GreenPlatformTiles_End - GreenPlatformTiles - 1)
08C21                           
08C21                           loc_BANK6_8C37:
08C21 B1 01                     	LDA (byte_RAM_1), Y
08C23 DD 90 8B                  	CMP GreenPlatformTiles, X
08C26 F0 08                     	BEQ loc_BANK6_8C46
08C28                           
08C28 CA                        	DEX
08C29 10 F6                     	BPL loc_BANK6_8C37
08C2B                           
08C2B A6 08                     	LDX byte_RAM_8
08C2D 4C 37 8C                  	JMP loc_BANK6_8C4D
08C30                           
08C30                           ; ---------------------------------------------------------------------------
08C30                           
08C30                           loc_BANK6_8C46:
08C30 A6 08                     	LDX byte_RAM_8
08C32 BD 90 8B                  	LDA GreenPlatformTiles, X
08C35                           
08C35                           loc_BANK6_8C4B:
08C35 91 01                     	STA (byte_RAM_1), Y
08C37                           
08C37                           loc_BANK6_8C4D:
08C37 A6 08                     	LDX byte_RAM_8
08C39 C6 07                     	DEC byte_RAM_7
08C3B 60                        	RTS
08C3C                           
08C3C                           
08C3C                           TallObjectTopTiles:
08C3C 52                        	.db BackgroundTile_LightDoor
08C3D C0                        	.db BackgroundTile_PalmTreeTop
08C3E                           
08C3E                           TallObjectBottomTiles:
08C3E 52                        	.db BackgroundTile_LightDoor
08C3F 82                        	.db BackgroundTile_PalmTreeTrunk
08C40                           
08C40                           
08C40                           CreateObject_Tall:
08C40 AD 34 06                  	LDA CurrentWorldTileset
08C43 C9 04                     	CMP #$04
08C45 D0 03                     	BNE CreateObject_Tall_NotWorld5
08C47 4C 71 8C                  	JMP CreateObject_Tall_World5
08C4A                           
08C4A                           CreateObject_Tall_NotWorld5:
08C4A AD 0E 05                  	LDA byte_RAM_50E
08C4D 38                        	SEC
08C4E E9 05                     	SBC #$05
08C50 85 07                     	STA byte_RAM_7
08C52 AA                        	TAX
08C53 A4 E7                     	LDY byte_RAM_E7
08C55 BD 3C 8C                  	LDA TallObjectTopTiles, X
08C58 91 01                     	STA (byte_RAM_1), Y
08C5A                           
08C5A                           CreateObject_Tall_NotWorld5_Loop:
08C5A 20 6B 9A                  	JSR IncrementAreaYOffset
08C5D                           
08C5D B1 01                     	LDA (byte_RAM_1), Y
08C5F C9 40                     	CMP #BackgroundTile_Sky
08C61 D0 09                     	BNE CreateObject_Tall_NotWorld5_Exit
08C63                           
08C63 A6 07                     	LDX byte_RAM_7
08C65 BD 3E 8C                  	LDA TallObjectBottomTiles, X
08C68 91 01                     	STA (byte_RAM_1), Y
08C6A D0 EE                     	BNE CreateObject_Tall_NotWorld5_Loop
08C6C                           
08C6C                           CreateObject_Tall_NotWorld5_Exit:
08C6C 60                        	RTS
08C6D                           
08C6D                           
08C6D                           World5TallObjectTopTiles:
08C6D C0                        	.db BackgroundTile_PalmTreeTop
08C6E C0                        	.db BackgroundTile_PalmTreeTop
08C6F                           
08C6F                           World5TallObjectBottomTiles:
08C6F 82                        	.db BackgroundTile_PalmTreeTrunk
08C70 82                        	.db BackgroundTile_PalmTreeTrunk
08C71                           
08C71                           
08C71                           ;
08C71                           ; POI: The only practical difference with this subroutine (other than the fact
08C71                           ; that it only renders palm trees and not doors) is that it will stop at the
08C71                           ; bottom of the screen if it doesn't encounter another tile beforehand.
08C71                           ;
08C71                           ; This appears to be a work-around for the palm trees in 5-2 that have vertical
08C71                           ; rock platforms beneath them. Since the rock comes later, tree trunk tiles would
08C71                           ; render all the way down to the screen and through to the next page!
08C71                           ;
08C71                           ; Using a new object layer would have achieved the same effect, but the
08C71                           ; developer decided to create this special case instead.
08C71                           ;
08C71                           CreateObject_Tall_World5:
08C71 A2 00                     	LDX #$00
08C73 AD 0E 05                  	LDA byte_RAM_50E
08C76 C9 05                     	CMP #$05
08C78 F0 01                     	BEQ CreateObject_Tall_World5_DoLookup
08C7A                           
08C7A E8                        	INX
08C7B                           
08C7B                           CreateObject_Tall_World5_DoLookup:
08C7B 86 07                     	STX byte_RAM_7
08C7D A4 E7                     	LDY byte_RAM_E7
08C7F BD 6D 8C                  	LDA World5TallObjectTopTiles, X
08C82 91 01                     	STA (byte_RAM_1), Y
08C84                           
08C84                           CreateObject_Tall_World5_Loop:
08C84 20 6B 9A                  	JSR IncrementAreaYOffset
08C87                           
08C87 B1 01                     	LDA (byte_RAM_1), Y
08C89 C9 40                     	CMP #BackgroundTile_Sky
08C8B D0 0B                     	BNE CreateObject_Tall_World5_Exit
08C8D                           
08C8D A6 07                     	LDX byte_RAM_7
08C8F BD 6F 8C                  	LDA World5TallObjectBottomTiles, X
08C92 91 01                     	STA (byte_RAM_1), Y
08C94 C0 E0                     	CPY #$E0
08C96 90 EC                     	BCC CreateObject_Tall_World5_Loop
08C98                           
08C98                           CreateObject_Tall_World5_Exit:
08C98 60                        	RTS
08C99                           
08C99                           ; ---------------------------------------------------------------------------
08C99                           
08C99                           CreateObject_BigCloud:
08C99 A4 E7                     	LDY byte_RAM_E7
08C9B A9 01                     	LDA #BackgroundTile_BgCloudLeft
08C9D 91 01                     	STA (byte_RAM_1), Y
08C9F C8                        	INY
08CA0 A9 02                     	LDA #BackgroundTile_BgCloudRight
08CA2 91 01                     	STA (byte_RAM_1), Y
08CA4 60                        	RTS
08CA5                           
08CA5                           ; ---------------------------------------------------------------------------
08CA5                           
08CA5                           CreateObject_SmallCloud:
08CA5 A4 E7                     	LDY byte_RAM_E7
08CA7 A9 03                     	LDA #BackgroundTile_BgCloudSmall
08CA9 91 01                     	STA (byte_RAM_1), Y
08CAB 60                        	RTS
08CAC                           
08CAC                           
08CAC                           JarTopTiles:
08CAC 6F                        	.db BackgroundTile_JarTopPointer
08CAD 73                        	.db BackgroundTile_JarTopGeneric
08CAE 74                        	.db BackgroundTile_JarTopNonEnterable
08CAF                           
08CAF                           
08CAF                           CreateObject_Vase:
08CAF A4 E7                     	LDY byte_RAM_E7
08CB1 AD 0E 05                  	LDA byte_RAM_50E
08CB4 38                        	SEC
08CB5 E9 06                     	SBC #$06
08CB7 AA                        	TAX
08CB8 BD AC 8C                  	LDA JarTopTiles, X
08CBB 91 01                     	STA (byte_RAM_1), Y
08CBD                           
08CBD                           CreateObject_Vase_Loop:
08CBD 20 6B 9A                  	JSR IncrementAreaYOffset
08CC0                           
08CC0 B1 01                     	LDA (byte_RAM_1), Y
08CC2 C9 40                     	CMP #BackgroundTile_Sky
08CC4 D0 07                     	BNE CreateObject_Vase_Exit
08CC6                           
08CC6 A9 70                     	LDA #BackgroundTile_JarMiddle
08CC8 91 01                     	STA (byte_RAM_1), Y
08CCA 4C BD 8C                  	JMP CreateObject_Vase_Loop
08CCD                           
08CCD                           CreateObject_Vase_Exit:
08CCD 98                        	TYA
08CCE 38                        	SEC
08CCF E9 10                     	SBC #$10
08CD1 A8                        	TAY
08CD2 A9 71                     	LDA #BackgroundTile_JarBottom
08CD4 91 01                     	STA (byte_RAM_1), Y
08CD6 60                        	RTS
08CD7                           
08CD7                           
08CD7                           CreateObject_Vine:
08CD7 A4 E7                     	LDY byte_RAM_E7
08CD9 AD 0E 05                  	LDA byte_RAM_50E
08CDC C9 0D                     	CMP #$0D
08CDE F0 07                     	BEQ loc_BANK6_8CFD
08CE0                           
08CE0 A9 C1                     	LDA #BackgroundTile_VineTop
08CE2 91 01                     	STA (byte_RAM_1), Y
08CE4                           
08CE4                           loc_BANK6_8CFA:
08CE4 20 6B 9A                  	JSR IncrementAreaYOffset
08CE7                           
08CE7                           loc_BANK6_8CFD:
08CE7 B1 01                     	LDA (byte_RAM_1), Y
08CE9 C9 40                     	CMP #BackgroundTile_Sky
08CEB D0 0F                     	BNE locret_BANK6_8D12
08CED                           
08CED A9 C2                     	LDA #BackgroundTile_Vine
08CEF 91 01                     	STA (byte_RAM_1), Y
08CF1 A5 EC                     	LDA IsHorizontalLevel
08CF3 F0 04                     	BEQ loc_BANK6_8D0F
08CF5                           
08CF5                           loc_BANK6_8D0B:
08CF5 C0 E0                     	CPY #$E0
08CF7 B0 03                     	BCS locret_BANK6_8D12
08CF9                           
08CF9                           loc_BANK6_8D0F:
08CF9 4C E4 8C                  	JMP loc_BANK6_8CFA
08CFC                           
08CFC                           ; ---------------------------------------------------------------------------
08CFC                           
08CFC                           locret_BANK6_8D12:
08CFC 60                        	RTS
08CFD                           
08CFD                           ; ---------------------------------------------------------------------------
08CFD                           
08CFD                           CreateObject_VineBottom:
08CFD A4 E7                     	LDY byte_RAM_E7
08CFF A9 C3                     	LDA #BackgroundTile_VineBottom
08D01 91 01                     	STA (byte_RAM_1), Y
08D03                           
08D03                           loc_BANK6_8D19:
08D03 98                        	TYA
08D04 38                        	SEC
08D05 E9 10                     	SBC #$10
08D07 A8                        	TAY
08D08 C9 F0                     	CMP #$F0
08D0A B0 0D                     	BCS locret_BANK6_8D2F
08D0C                           
08D0C B1 01                     	LDA (byte_RAM_1), Y
08D0E C9 40                     	CMP #BackgroundTile_Sky
08D10 D0 07                     	BNE locret_BANK6_8D2F
08D12                           
08D12 A9 C2                     	LDA #BackgroundTile_Vine
08D14 91 01                     	STA (byte_RAM_1), Y
08D16 4C 03 8D                  	JMP loc_BANK6_8D19
08D19                           
08D19                           locret_BANK6_8D2F:
08D19 60                        	RTS
08D1A                           
08D1A                           SingleObjects:
08D1A 43                        	.db BackgroundTile_GrassCoin ; $20
08D1B 44                        	.db BackgroundTile_GrassLargeVeggie ; $21
08D1C 45                        	.db BackgroundTile_GrassSmallVeggie ; $22
08D1D 46                        	.db BackgroundTile_GrassRocket ; $23
08D1E 47                        	.db BackgroundTile_GrassShell ; $24
08D1F 48                        	.db BackgroundTile_GrassBomb ; $25
08D20 49                        	.db BackgroundTile_GrassPotion ; $26
08D21 4A                        	.db BackgroundTile_Grass1UP ; $27
08D22 4B                        	.db BackgroundTile_GrassPow ; $28
08D23 4E                        	.db BackgroundTile_Cherry ; $29
08D24 4C                        	.db BackgroundTile_GrassBobOmb ; $2A
08D25 41                        	.db BackgroundTile_SubspaceMushroom1 ; $2B
08D26 5B                        	.db BackgroundTile_Phanto ; $2C
08D27 42                        	.db BackgroundTile_SubspaceMushroom2 ; $2D
08D28 5A                        	.db BackgroundTile_WhaleEye ; $2E
08D29                           	; No entry for $2F in this table, so it uses tile $A4 due to the LDY below
08D29                           IFDEF EXPAND_TABLES
08D29                           	.db BackgroundTile_SolidWood ; $2F
08D29                           ENDIF
08D29                           
08D29                           CreateObject_SingleObject:
08D29 A4 E7                     	LDY byte_RAM_E7
08D2B AE 0E 05                  	LDX byte_RAM_50E
08D2E BD 1A 8D                  	LDA SingleObjects, X
08D31 91 01                     	STA (byte_RAM_1), Y
08D33 60                        	RTS
08D34                           
08D34                           
08D34                           World1thru6BrickWallTiles:
08D34 90                        	.db BackgroundTile_BackgroundBrick
08D35 A3                        	.db BackgroundTile_SolidBrick2Wall
08D36                           
08D36                           World7BrickWallTiles:
08D36 9C                        	.db BackgroundTile_GroundBrick2
08D37 9C                        	.db BackgroundTile_GroundBrick2
08D38                           
08D38                           
08D38                           CreateObject_Wall:
08D38 AD 0E 05                  	LDA byte_RAM_50E
08D3B 38                        	SEC
08D3C E9 08                     	SBC #$08
08D3E 85 08                     	STA byte_RAM_8
08D40 A4 E7                     	LDY byte_RAM_E7
08D42 A6 E8                     	LDX byte_RAM_E8
08D44 20 48 9A                  	JSR SetAreaPageAddr_Bank6
08D47                           
08D47 A4 E7                     	LDY byte_RAM_E7
08D49 A9 05                     	LDA #$05
08D4B 85 07                     	STA byte_RAM_7
08D4D B1 01                     	LDA (byte_RAM_1), Y
08D4F C9 40                     	CMP #BackgroundTile_Sky
08D51 D0 29                     	BNE CreateObject_Wall_Exit
08D53                           
08D53                           loc_BANK6_8D69:
08D53 A6 08                     	LDX byte_RAM_8
08D55 AD 34 06                  	LDA CurrentWorldTileset
08D58 C9 06                     	CMP #$06
08D5A D0 06                     	BNE loc_BANK6_8D78
08D5C                           
08D5C BD 36 8D                  	LDA World7BrickWallTiles, X
08D5F 4C 65 8D                  	JMP loc_BANK6_8D7B
08D62                           
08D62                           loc_BANK6_8D78:
08D62 BD 34 8D                  	LDA World1thru6BrickWallTiles, X
08D65                           
08D65                           loc_BANK6_8D7B:
08D65 91 01                     	STA (byte_RAM_1), Y
08D67 20 53 9A                  	JSR IncrementAreaXOffset
08D6A                           
08D6A C6 07                     	DEC byte_RAM_7
08D6C 10 E5                     	BPL loc_BANK6_8D69
08D6E                           
08D6E A5 E7                     	LDA byte_RAM_E7
08D70 18                        	CLC
08D71 69 10                     	ADC #$10
08D73 C9 F0                     	CMP #$F0
08D75 B0 05                     	BCS CreateObject_Wall_Exit
08D77                           
08D77 85 E7                     	STA byte_RAM_E7
08D79 4C 38 8D                  	JMP CreateObject_Wall
08D7C                           
08D7C                           CreateObject_Wall_Exit:
08D7C 60                        	RTS
08D7D                           
08D7D                           
08D7D                           WaterfallTiles:
08D7D 04                        	.db BackgroundTile_WaterfallTop
08D7E 05                        	.db BackgroundTile_Waterfall
08D7F                           
08D7F                           
08D7F                           CreateObject_WaterfallOrFrozenRocks:
08D7F                           IFNDEF ENABLE_LEVEL_OBJECT_MODE
08D7F                           	LDA CurrentWorldTileset
08D7F                           	CMP #$03
08D7F                           	BNE CreateObject_Waterfall
08D7F                           
08D7F                           	JMP CreateObject_FrozenRocks
08D7F                           ENDIF
08D7F                           
08D7F                           CreateObject_Waterfall:
08D7F A9 00                     	LDA #$00
08D81 85 08                     	STA byte_RAM_8
08D83                           
08D83                           CreateObject_Waterfall_OuterLoop:
08D83 A4 E7                     	LDY byte_RAM_E7
08D85 A6 E8                     	LDX byte_RAM_E8
08D87 20 48 9A                  	JSR SetAreaPageAddr_Bank6
08D8A                           
08D8A A4 E7                     	LDY byte_RAM_E7
08D8C AD 0D 05                  	LDA byte_RAM_50D
08D8F 85 07                     	STA byte_RAM_7
08D91 A6 08                     	LDX byte_RAM_8
08D93                           
08D93                           CreateObject_Waterfall_InnerLoop:
08D93 BD 7D 8D                  	LDA WaterfallTiles, X
08D96 91 01                     	STA (byte_RAM_1), Y
08D98 20 53 9A                  	JSR IncrementAreaXOffset
08D9B                           
08D9B C6 07                     	DEC byte_RAM_7
08D9D 10 F4                     	BPL CreateObject_Waterfall_InnerLoop
08D9F                           
08D9F A9 01                     	LDA #$01
08DA1 85 08                     	STA byte_RAM_8
08DA3 A5 E7                     	LDA byte_RAM_E7
08DA5 18                        	CLC
08DA6 69 10                     	ADC #$10
08DA8 C9 F0                     	CMP #$F0
08DAA B0 05                     	BCS CreateObject_Waterfall_Exit
08DAC                           
08DAC 85 E7                     	STA byte_RAM_E7
08DAE 4C 83 8D                  	JMP CreateObject_Waterfall_OuterLoop
08DB1                           
08DB1                           CreateObject_Waterfall_Exit:
08DB1 60                        	RTS
08DB2                           
08DB2                           
08DB2                           IFDEF ENABLE_LEVEL_OBJECT_MODE
08DB2                           WaterTiles:
08DB2 08                        	.db BackgroundTile_WaterTop
08DB3 0A                        	.db BackgroundTile_Water
08DB4                           
08DB4                           CreateObject_Water:
08DB4 A9 00                     	LDA #$00
08DB6 85 08                     	STA byte_RAM_8
08DB8                           
08DB8                           CreateObject_Water_OuterLoop:
08DB8 A4 E7                     	LDY byte_RAM_E7
08DBA A6 E8                     	LDX byte_RAM_E8
08DBC 20 48 9A                  	JSR SetAreaPageAddr_Bank6
08DBF                           
08DBF A4 E7                     	LDY byte_RAM_E7
08DC1 AD 0D 05                  	LDA byte_RAM_50D
08DC4 85 07                     	STA byte_RAM_7
08DC6 A6 08                     	LDX byte_RAM_8
08DC8                           
08DC8                           CreateObject_Water_InnerLoop:
08DC8 BD B2 8D                  	LDA WaterTiles, X
08DCB 91 01                     	STA (byte_RAM_1), Y
08DCD 20 53 9A                  	JSR IncrementAreaXOffset
08DD0                           
08DD0 C6 07                     	DEC byte_RAM_7
08DD2 10 F4                     	BPL CreateObject_Water_InnerLoop
08DD4                           
08DD4 A9 01                     	LDA #$01
08DD6 85 08                     	STA byte_RAM_8
08DD8 A5 E7                     	LDA byte_RAM_E7
08DDA 18                        	CLC
08DDB 69 10                     	ADC #$10
08DDD C9 F0                     	CMP #$F0
08DDF B0 05                     	BCS CreateObject_Water_Exit
08DE1                           
08DE1 85 E7                     	STA byte_RAM_E7
08DE3 4C B8 8D                  	JMP CreateObject_Water_OuterLoop
08DE6                           
08DE6                           CreateObject_Water_Exit:
08DE6 60                        	RTS
08DE7                           ENDIF
08DE7                           
08DE7                           CreateObject_Pyramid:
08DE7 A4 E7                     	LDY byte_RAM_E7
08DE9 A9 00                     	LDA #$00
08DEB 85 08                     	STA byte_RAM_8
08DED                           
08DED                           loc_BANK6_8DD8:
08DED B1 01                     	LDA (byte_RAM_1), Y
08DEF C9 40                     	CMP #BackgroundTile_Sky
08DF1 F0 01                     	BEQ loc_BANK6_8DDF
08DF3                           
08DF3 60                        	RTS
08DF4                           
08DF4                           ; ---------------------------------------------------------------------------
08DF4                           
08DF4                           loc_BANK6_8DDF:
08DF4 A9 84                     	LDA #BackgroundTile_PyramidLeftAngle
08DF6 91 01                     	STA (byte_RAM_1), Y
08DF8 A6 08                     	LDX byte_RAM_8
08DFA F0 12                     	BEQ loc_BANK6_8DF9
08DFC                           
08DFC                           loc_BANK6_8DE7:
08DFC C8                        	INY
08DFD A9 85                     	LDA #BackgroundTile_PyramidLeft
08DFF 91 01                     	STA (byte_RAM_1), Y
08E01 CA                        	DEX
08E02 D0 F8                     	BNE loc_BANK6_8DE7
08E04                           
08E04 A6 08                     	LDX byte_RAM_8
08E06                           
08E06                           loc_BANK6_8DF1:
08E06 C8                        	INY
08E07 A9 86                     	LDA #BackgroundTile_PyramidRight
08E09 91 01                     	STA (byte_RAM_1), Y
08E0B CA                        	DEX
08E0C D0 F8                     	BNE loc_BANK6_8DF1
08E0E                           
08E0E                           loc_BANK6_8DF9:
08E0E C8                        	INY
08E0F A9 87                     	LDA #BackgroundTile_PyramidRightAngle
08E11 91 01                     	STA (byte_RAM_1), Y
08E13 E6 08                     	INC byte_RAM_8
08E15 A5 E7                     	LDA byte_RAM_E7
08E17 18                        	CLC
08E18 69 10                     	ADC #$10
08E1A 85 E7                     	STA byte_RAM_E7
08E1C 38                        	SEC
08E1D E5 08                     	SBC byte_RAM_8
08E1F A8                        	TAY
08E20 4C ED 8D                  	JMP loc_BANK6_8DD8
08E23                           
08E23                           ; Not referenced, maybe unused...?
08E23 A4 E7                     	LDY byte_RAM_E7
08E25 A9 1D                     	LDA #BackgroundTile_CactusTop
08E27 91 01                     	STA (byte_RAM_1), Y
08E29                           
08E29                           loc_BANK6_8E14:
08E29 20 6B 9A                  	JSR IncrementAreaYOffset
08E2C                           
08E2C B1 01                     	LDA (byte_RAM_1), Y
08E2E C9 40                     	CMP #BackgroundTile_Sky
08E30 F0 01                     	BEQ loc_BANK6_8E1E
08E32                           
08E32 60                        	RTS
08E33                           
08E33                           ; ---------------------------------------------------------------------------
08E33                           
08E33                           loc_BANK6_8E1E:
08E33 A9 1E                     	LDA #BackgroundTile_CactusMiddle
08E35 91 01                     	STA (byte_RAM_1), Y
08E37 D0 F0                     	BNE loc_BANK6_8E14
08E39                           
08E39                           ; =============== S U B R O U T I N E =======================================
08E39                           
08E39                           sub_BANK6_8E24:
08E39 A5 09                     	LDA byte_RAM_9
08E3B 0A                        	ASL A
08E3C 0A                        	ASL A
08E3D 38                        	SEC
08E3E 65 09                     	ADC byte_RAM_9
08E40 85 09                     	STA byte_RAM_9
08E42 06 0A                     	ASL byte_RAM_A
08E44 A9 20                     	LDA #$20
08E46 24 0A                     	BIT byte_RAM_A
08E48 B0 04                     	BCS loc_BANK6_8E39
08E4A                           
08E4A D0 04                     	BNE loc_BANK6_8E3B
08E4C                           
08E4C F0 04                     	BEQ loc_BANK6_8E3D
08E4E                           
08E4E                           loc_BANK6_8E39:
08E4E D0 02                     	BNE loc_BANK6_8E3D
08E50                           
08E50                           loc_BANK6_8E3B:
08E50 E6 0A                     	INC byte_RAM_A
08E52                           
08E52                           loc_BANK6_8E3D:
08E52 A5 0A                     	LDA byte_RAM_A
08E54 45 09                     	EOR byte_RAM_9
08E56 60                        	RTS
08E57                           
08E57                           ; End of function sub_BANK6_8E24
08E57                           
08E57                           StarBackgroundTiles:
08E57 40                        	.db BackgroundTile_Sky
08E58 88                        	.db BackgroundTile_StarBg1
08E59 40                        	.db BackgroundTile_Sky
08E5A 40                        	.db BackgroundTile_Sky
08E5B 40                        	.db BackgroundTile_Sky
08E5C 40                        	.db BackgroundTile_Sky
08E5D 89                        	.db BackgroundTile_StarBg2
08E5E 40                        	.db BackgroundTile_Sky
08E5F                           
08E5F                           CreateObject_StarBackground:
08E5F A5 E8                     	LDA byte_RAM_E8
08E61 85 0D                     	STA byte_RAM_D
08E63 A9 80                     	LDA #$80
08E65 85 0A                     	STA byte_RAM_A
08E67 A9 31                     	LDA #$31
08E69 85 09                     	STA byte_RAM_9
08E6B                           
08E6B                           loc_BANK6_8E56:
08E6B 20 39 8E                  	JSR sub_BANK6_8E24
08E6E                           
08E6E 29 07                     	AND #$07
08E70 AA                        	TAX
08E71 BD 57 8E                  	LDA StarBackgroundTiles, X
08E74 91 01                     	STA (byte_RAM_1), Y
08E76 20 6B 9A                  	JSR IncrementAreaYOffset
08E79                           
08E79 C0 30                     	CPY #$30
08E7B 90 EE                     	BCC loc_BANK6_8E56
08E7D                           
08E7D 98                        	TYA
08E7E 29 0F                     	AND #$0F
08E80 A8                        	TAY
08E81 20 53 9A                  	JSR IncrementAreaXOffset
08E84                           
08E84 A5 0D                     	LDA byte_RAM_D
08E86 85 E8                     	STA byte_RAM_E8
08E88 C9 0A                     	CMP #$A
08E8A D0 DF                     	BNE loc_BANK6_8E56
08E8C                           
08E8C A9 00                     	LDA #$00
08E8E 85 E8                     	STA byte_RAM_E8
08E90 85 E6                     	STA byte_RAM_E6
08E92 85 E5                     	STA byte_RAM_E5
08E94 60                        	RTS
08E95                           
08E95                           WhaleLeftTiles:
08E95 00                        	.db BackgroundTile_Black
08E96 13                        	.db BackgroundTile_CloudLeft
08E97 60                        	.db BackgroundTile_WhaleTopLeft
08E98 59                        	.db BackgroundTile_Whale
08E99 0C                        	.db BackgroundTile_WaterWhale
08E9A                           WhaleMiddleTiles:
08E9A 00                        	.db BackgroundTile_Black
08E9B 14                        	.db BackgroundTile_CloudMiddle
08E9C 61                        	.db BackgroundTile_WhaleTop
08E9D 59                        	.db BackgroundTile_Whale
08E9E 0C                        	.db BackgroundTile_WaterWhale
08E9F                           WhaleRightTiles:
08E9F 00                        	.db BackgroundTile_Black
08EA0 15                        	.db BackgroundTile_CloudRight
08EA1 62                        	.db BackgroundTile_WhaleTopRight
08EA2 59                        	.db BackgroundTile_Whale
08EA3 0C                        	.db BackgroundTile_WaterWhale
08EA4                           
08EA4                           ; =============== S U B R O U T I N E =======================================
08EA4                           
08EA4                           sub_BANK6_8E8F:
08EA4 A4 E7                     	LDY byte_RAM_E7
08EA6 AD 0E 05                  	LDA byte_RAM_50E
08EA9 38                        	SEC
08EAA E9 0A                     	SBC #$0A
08EAC AA                        	TAX
08EAD BD 95 8E                  	LDA WhaleLeftTiles, X
08EB0 91 01                     	STA (byte_RAM_1), Y
08EB2 CE 0D 05                  	DEC byte_RAM_50D
08EB5 F0 0D                     	BEQ loc_BANK6_8EAF
08EB7                           
08EB7                           loc_BANK6_8EA2:
08EB7 20 53 9A                  	JSR IncrementAreaXOffset
08EBA                           
08EBA BD 9A 8E                  	LDA WhaleMiddleTiles, X
08EBD 91 01                     	STA (byte_RAM_1), Y
08EBF CE 0D 05                  	DEC byte_RAM_50D
08EC2 D0 F3                     	BNE loc_BANK6_8EA2
08EC4                           
08EC4                           loc_BANK6_8EAF:
08EC4 20 53 9A                  	JSR IncrementAreaXOffset
08EC7                           
08EC7 BD 9F 8E                  	LDA WhaleRightTiles, X
08ECA 91 01                     	STA (byte_RAM_1), Y
08ECC 60                        	RTS
08ECD                           
08ECD                           ; End of function sub_BANK6_8E8F
08ECD                           
08ECD                           ; ---------------------------------------------------------------------------
08ECD                           
08ECD                           IFDEF ENABLE_LEVEL_OBJECT_MODE
08ECD                           CreateObject_Platform_BX:
08ECD AD 33 06                  	LDA LevelObjectMode
08ED0 20 A6 D9                  	JSR JumpToTableAfterJump
08ED3                           
08ED3 B4 8D                     	.dw CreateObject_Water
08ED5 2E 8F                     	.dw CreateObject_FrozenRocks
08ED7 2E 8F                     	.dw CreateObject_FrozenRocks
08ED9 22 91                     	.dw CreateObject_DrawBridgeChain
08EDB                           ENDIF
08EDB                           
08EDB                           IFNDEF ENABLE_LEVEL_OBJECT_MODE
08EDB                           CreateObject_WhaleOrDrawBridgeChain:
08EDB                           	LDA CurrentWorldTileset
08EDB                           	CMP #$06
08EDB                           	BNE CreateObject_Whale
08EDB                           
08EDB                           	JMP CreateObject_DrawBridgeChain
08EDB                           ENDIF
08EDB                           
08EDB                           ; ---------------------------------------------------------------------------
08EDB                           
08EDB                           CreateObject_Whale:
08EDB AD 0D 05                  	LDA byte_RAM_50D
08EDE 85 07                     	STA byte_RAM_7
08EE0 A9 0C                     	LDA #$0C
08EE2 8D 0E 05                  	STA byte_RAM_50E
08EE5 20 A4 8E                  	JSR sub_BANK6_8E8F
08EE8                           
08EE8 EE 0E 05                  	INC byte_RAM_50E
08EEB                           
08EEB                           loc_BANK6_8ED2:
08EEB A5 07                     	LDA byte_RAM_7
08EED 8D 0D 05                  	STA byte_RAM_50D
08EF0 A5 E7                     	LDA byte_RAM_E7
08EF2 18                        	CLC
08EF3 69 10                     	ADC #$10
08EF5 85 E7                     	STA byte_RAM_E7
08EF7 C9 B0                     	CMP #$B0
08EF9 90 00                     	BCC loc_BANK6_8EE2
08EFB                           
08EFB                           loc_BANK6_8EE2:
08EFB A6 E8                     	LDX byte_RAM_E8
08EFD 20 48 9A                  	JSR SetAreaPageAddr_Bank6
08F00                           
08F00 20 A4 8E                  	JSR sub_BANK6_8E8F
08F03                           
08F03 98                        	TYA
08F04 29 F0                     	AND #$F0
08F06 C9 B0                     	CMP #$B0
08F08 D0 10                     	BNE loc_BANK6_8F01
08F0A                           
08F0A 20 53 9A                  	JSR IncrementAreaXOffset
08F0D                           
08F0D 20 53 9A                  	JSR IncrementAreaXOffset
08F10                           
08F10 A9 63                     	LDA #BackgroundTile_WhaleTail
08F12 91 01                     	STA (byte_RAM_1), Y
08F14 EE 0E 05                  	INC byte_RAM_50E
08F17 4C EB 8E                  	JMP loc_BANK6_8ED2
08F1A                           
08F1A                           ; ---------------------------------------------------------------------------
08F1A                           
08F1A                           loc_BANK6_8F01:
08F1A AD 0E 05                  	LDA byte_RAM_50E
08F1D C9 0E                     	CMP #$E
08F1F D0 CA                     	BNE loc_BANK6_8ED2
08F21                           
08F21 20 53 9A                  	JSR IncrementAreaXOffset
08F24                           
08F24                           loc_BANK6_8F0B:
08F24 20 53 9A                  	JSR IncrementAreaXOffset
08F27                           
08F27 A9 11                     	LDA #BackgroundTile_WaterWhaleTail
08F29 91 01                     	STA (byte_RAM_1), Y
08F2B 60                        	RTS
08F2C                           
08F2C                           FrozenRockTiles:
08F2C 0C                        	.db BackgroundTile_WaterWhale
08F2D 1F                        	.db BackgroundTile_FrozenRock
08F2E                           
08F2E                           CreateObject_FrozenRocks:
08F2E A9 01                     	LDA #$01
08F30 85 08                     	STA byte_RAM_8
08F32                           
08F32                           loc_BANK6_8F19:
08F32 A4 E7                     	LDY byte_RAM_E7
08F34 A6 E8                     	LDX byte_RAM_E8
08F36 20 48 9A                  	JSR SetAreaPageAddr_Bank6
08F39                           
08F39 A4 E7                     	LDY byte_RAM_E7
08F3B AD 0D 05                  	LDA byte_RAM_50D
08F3E 85 07                     	STA byte_RAM_7
08F40 A6 08                     	LDX byte_RAM_8
08F42                           
08F42                           loc_BANK6_8F29:
08F42 BD 2C 8F                  	LDA FrozenRockTiles, X
08F45 91 01                     	STA (byte_RAM_1), Y
08F47 20 53 9A                  	JSR IncrementAreaXOffset
08F4A                           
08F4A C6 07                     	DEC byte_RAM_7
08F4C 10 F4                     	BPL loc_BANK6_8F29
08F4E                           
08F4E A5 08                     	LDA byte_RAM_8
08F50 D0 01                     	BNE loc_BANK6_8F3A
08F52                           
08F52 60                        	RTS
08F53                           
08F53                           ; ---------------------------------------------------------------------------
08F53                           
08F53                           loc_BANK6_8F3A:
08F53 A5 E7                     	LDA byte_RAM_E7
08F55 18                        	CLC
08F56 69 10                     	ADC #$10
08F58 C9 C0                     	CMP #$C0
08F5A 90 02                     	BCC loc_BANK6_8F45
08F5C                           
08F5C C6 08                     	DEC byte_RAM_8
08F5E                           
08F5E                           loc_BANK6_8F45:
08F5E 85 E7                     	STA byte_RAM_E7
08F60 4C 32 8F                  	JMP loc_BANK6_8F19
08F63                           
08F63                           ; Unlike HorizontalPlatform(Left/Middle/Right)Tiles, these support overlap with
08F63                           ; the red tree background
08F63                           HorizontalPlatformWithOverlapLeftTiles:
08F63 75                        	.db BackgroundTile_LogLeft
08F64 13                        	.db BackgroundTile_CloudLeft
08F65 76                        	.db BackgroundTile_LogMiddle
08F66                           HorizontalPlatformWithOverlapMiddleTiles:
08F66 76                        	.db BackgroundTile_LogMiddle
08F67 14                        	.db BackgroundTile_CloudMiddle
08F68                           HorizontalPlatformWithOverlapRightTiles:
08F68 77                        	.db BackgroundTile_LogRight
08F69 15                        	.db BackgroundTile_CloudRight
08F6A 78                        	.db BackgroundTile_LogRightTree
08F6B                           
08F6B                           CreateObject_HorizontalPlatform_World5:
08F6B A4 E7                     	LDY byte_RAM_E7
08F6D AD 0E 05                  	LDA byte_RAM_50E
08F70 38                        	SEC
08F71 E9 0A                     	SBC #$0A
08F73 AA                        	TAX
08F74 20 9C 8F                  	JSR CreateObject_HorizontalPlatform_World5CheckOverlap
08F77                           
08F77 BD 63 8F                  	LDA HorizontalPlatformWithOverlapLeftTiles, X
08F7A 91 01                     	STA (byte_RAM_1), Y
08F7C A6 07                     	LDX byte_RAM_7
08F7E CE 0D 05                  	DEC byte_RAM_50D
08F81 F0 0D                     	BEQ CreateObject_HorizontalPlatform_World5_Exit
08F83                           
08F83                           CreateObject_HorizontalPlatform_World5_Loop:
08F83 20 53 9A                  	JSR IncrementAreaXOffset
08F86                           
08F86 BD 66 8F                  	LDA HorizontalPlatformWithOverlapMiddleTiles, X
08F89 91 01                     	STA (byte_RAM_1), Y
08F8B CE 0D 05                  	DEC byte_RAM_50D
08F8E D0 F3                     	BNE CreateObject_HorizontalPlatform_World5_Loop
08F90                           
08F90                           CreateObject_HorizontalPlatform_World5_Exit:
08F90 20 53 9A                  	JSR IncrementAreaXOffset
08F93                           
08F93 20 9C 8F                  	JSR CreateObject_HorizontalPlatform_World5CheckOverlap
08F96                           
08F96 BD 68 8F                  	LDA HorizontalPlatformWithOverlapRightTiles, X
08F99 91 01                     	STA (byte_RAM_1), Y
08F9B 60                        	RTS
08F9C                           
08F9C                           ;
08F9C                           ; Check if the next platform tile overlaps the background
08F9C                           ;
08F9C                           ; Output
08F9C                           ;   X = table offset for (2 if there is an overlap)
08F9C                           ;
08F9C                           CreateObject_HorizontalPlatform_World5CheckOverlap:
08F9C 86 07                     	STX byte_RAM_7
08F9E B1 01                     	LDA (byte_RAM_1), Y
08FA0 C9 40                     	CMP #BackgroundTile_Sky
08FA2 F0 02                     	BEQ CreateObject_HorizontalPlatform_World5CheckOverlap_Exit
08FA4                           
08FA4                           	; otherwise, the platform is overlapping the background, so we need a special tile
08FA4 A2 02                     	LDX #$02
08FA6                           
08FA6                           CreateObject_HorizontalPlatform_World5CheckOverlap_Exit:
08FA6 60                        	RTS
08FA7                           
08FA7                           
08FA7                           TreeBackgroundTiles:
08FA7 5E                        	.db BackgroundTile_TreeBackgroundRight
08FA8 5D                        	.db BackgroundTile_TreeBackgroundMiddleLeft
08FA9 5C                        	.db BackgroundTile_TreeBackgroundLeft
08FAA                           
08FAA                           CreateObject_TreeBackground:
08FAA A9 04                     	LDA #$04
08FAC 85 07                     	STA byte_RAM_7
08FAE A4 E7                     	LDY byte_RAM_E7
08FB0 A6 E8                     	LDX byte_RAM_E8
08FB2 20 48 9A                  	JSR SetAreaPageAddr_Bank6
08FB5                           
08FB5 A2 02                     	LDX #$02
08FB7 B1 01                     	LDA (byte_RAM_1), Y
08FB9 C9 40                     	CMP #BackgroundTile_Sky
08FBB D0 1D                     	BNE locret_BANK6_8FC1
08FBD                           
08FBD                           loc_BANK6_8FA4:
08FBD BD A7 8F                  	LDA TreeBackgroundTiles, X
08FC0 91 01                     	STA (byte_RAM_1), Y
08FC2 20 53 9A                  	JSR IncrementAreaXOffset
08FC5                           
08FC5                           	; using two alternating tiles for the middle of the tree
08FC5 CA                        	DEX
08FC6 E0 01                     	CPX #$01
08FC8 D0 03                     	BNE loc_BANK6_8FB4
08FCA                           
08FCA 20 DB 8F                  	JSR sub_BANK6_8FC2
08FCD                           
08FCD                           loc_BANK6_8FB4:
08FCD CA                        	DEX
08FCE 10 ED                     	BPL loc_BANK6_8FA4
08FD0                           
08FD0 A4 E7                     	LDY byte_RAM_E7
08FD2 20 6B 9A                  	JSR IncrementAreaYOffset
08FD5                           
08FD5 84 E7                     	STY byte_RAM_E7
08FD7 4C AA 8F                  	JMP CreateObject_TreeBackground
08FDA                           
08FDA                           ; ---------------------------------------------------------------------------
08FDA                           
08FDA                           locret_BANK6_8FC1:
08FDA 60                        	RTS
08FDB                           
08FDB                           ; =============== S U B R O U T I N E =======================================
08FDB                           
08FDB                           sub_BANK6_8FC2:
08FDB A9 5D                     	LDA #BackgroundTile_TreeBackgroundMiddleLeft
08FDD 91 01                     	STA (byte_RAM_1), Y
08FDF 20 53 9A                  	JSR IncrementAreaXOffset
08FE2                           
08FE2 A9 5F                     	LDA #BackgroundTile_TreeBackgroundMiddleRight
08FE4 91 01                     	STA (byte_RAM_1), Y
08FE6 20 53 9A                  	JSR IncrementAreaXOffset
08FE9                           
08FE9 C6 07                     	DEC byte_RAM_7
08FEB 10 EE                     	BPL sub_BANK6_8FC2
08FED                           
08FED 60                        	RTS
08FEE                           
08FEE                           ; End of function sub_BANK6_8FC2
08FEE                           
08FEE                           ; ---------------------------------------------------------------------------
08FEE                           
08FEE                           ; Unreferenced?
08FEE                           SomeUnusedTilesTop:
08FEE 52                        	.db BackgroundTile_LightDoor
08FEF 1D                        	.db BackgroundTile_CactusTop
08FF0 C0                        	.db BackgroundTile_PalmTreeTop
08FF1                           SomeUnusedTilesBottom:
08FF1 52                        	.db BackgroundTile_LightDoor
08FF2 1E                        	.db BackgroundTile_CactusMiddle
08FF3 82                        	.db BackgroundTile_PalmTreeTrunk
08FF4                           
08FF4                           ; This 3x9 tile entrance is used in 6-3
08FF4                           RockWallEntranceTiles:
08FF4 9F                        	.db BackgroundTile_RockWallAngle
08FF5 A0                        	.db BackgroundTile_RockWall
08FF6 A0                        	.db BackgroundTile_RockWall
08FF7                           
08FF7 A0                        	.db BackgroundTile_RockWall
08FF8 A0                        	.db BackgroundTile_RockWall
08FF9 A0                        	.db BackgroundTile_RockWall
08FFA                           
08FFA A0                        	.db BackgroundTile_RockWall
08FFB A0                        	.db BackgroundTile_RockWall
08FFC A0                        	.db BackgroundTile_RockWall
08FFD                           
08FFD A5                        	.db BackgroundTile_RockWallEyeLeft
08FFE A6                        	.db BackgroundTile_RockWallEyeRight
08FFF A0                        	.db BackgroundTile_RockWall
09000                           
09000 A7                        	.db BackgroundTile_RockWallMouth
09001 A7                        	.db BackgroundTile_RockWallMouth
09002 A0                        	.db BackgroundTile_RockWall
09003                           
09003 83                        	.db BackgroundTile_DarkDoor
09004 83                        	.db BackgroundTile_DarkDoor
09005 A0                        	.db BackgroundTile_RockWall
09006                           
09006 83                        	.db BackgroundTile_DarkDoor
09007 83                        	.db BackgroundTile_DarkDoor
09008 A0                        	.db BackgroundTile_RockWall
09009                           
09009 83                        	.db BackgroundTile_DarkDoor
0900A 83                        	.db BackgroundTile_DarkDoor
0900B A0                        	.db BackgroundTile_RockWall
0900C                           
0900C 83                        	.db BackgroundTile_DarkDoor
0900D 83                        	.db BackgroundTile_DarkDoor
0900E A0                        	.db BackgroundTile_RockWall
0900F                           
0900F                           CreateObject_RockWallEntrance:
0900F A2 00                     	LDX #$00
09011                           
09011                           CreateObject_RockWallEntrance_Loop:
09011 A4 E7                     	LDY byte_RAM_E7
09013 A9 02                     	LDA #$02
09015 85 09                     	STA byte_RAM_9
09017                           
09017                           CreateObject_RockWallEntrance_InnerLoop:
09017 BD F4 8F                  	LDA RockWallEntranceTiles, X
0901A 91 01                     	STA (byte_RAM_1), Y
0901C E8                        	INX
0901D C8                        	INY
0901E C6 09                     	DEC byte_RAM_9
09020 10 F5                     	BPL CreateObject_RockWallEntrance_InnerLoop
09022                           
09022 A4 E7                     	LDY byte_RAM_E7
09024 98                        	TYA
09025 18                        	CLC
09026 69 10                     	ADC #$10
09028 85 E7                     	STA byte_RAM_E7
0902A E0 1B                     	CPX #$1B
0902C D0 E3                     	BNE CreateObject_RockWallEntrance_Loop
0902E                           
0902E 60                        	RTS
0902F                           
0902F                           
0902F                           DoorTopTiles:
0902F 4F                        	.db BackgroundTile_DoorTop
09030 4F                        	.db BackgroundTile_DoorTop
09031 83                        	.db BackgroundTile_DarkDoor
09032 A9                        	.db BackgroundTile_DoorwayTop
09033 A8                        	.db BackgroundTile_WindowTop
09034                           
09034                           DoorBottomTiles:
09034 50                        	.db BackgroundTile_DoorBottomLock
09035 51                        	.db BackgroundTile_DoorBottom
09036 83                        	.db BackgroundTile_DarkDoor
09037 83                        	.db BackgroundTile_DarkDoor
09038 83                        	.db BackgroundTile_DarkDoor
09039                           
09039                           CreateObject_Door:
09039 A4 E7                     	LDY byte_RAM_E7
0903B AD 0E 05                  	LDA byte_RAM_50E
0903E C9 09                     	CMP #$09
09040 D0 13                     	BNE loc_BANK6_9034
09042                           
09042                           IFDEF FLAGSET
09042 8A                            TXA
09043 48                            PHA
09044 A2 40                         LDX #CustomBitFlag_Key
09046 20 4E F1                      JSR ChkFlagLevel
09049 D0 06                         BNE +
0904B EE 0E 05                  	INC byte_RAM_50E
0904E EE 0E 05                  	INC byte_RAM_50E
09051                           +
09051 68                            PLA
09052 AA                            TAX
09053 A4 E7                     	LDY byte_RAM_E7
09055                           ENDIF
09055                           
09055                           IFNDEF FLAGSET
09055                           	LDA KeyUsed
09055                           	BEQ loc_BANK6_9034
09055                           
09055                           	INC byte_RAM_50E
09055                           	INC byte_RAM_50E
09055                           ENDIF
09055                           
09055                           loc_BANK6_9034:
09055 AD 0E 05                  	LDA byte_RAM_50E
09058 38                        	SEC
09059 E9 09                     	SBC #$09
0905B AA                        	TAX
0905C BD 2F 90                  	LDA DoorTopTiles, X
0905F 91 01                     	STA (byte_RAM_1), Y
09061 20 6B 9A                  	JSR IncrementAreaYOffset
09064                           
09064 BD 34 90                  	LDA DoorBottomTiles, X
09067 91 01                     	STA (byte_RAM_1), Y
09069                           IFNDEF DISABLE_DOOR_POINTERS
09069                           	LDA CurrentWorld
09069                           	CMP #$05
09069                           	BEQ CreateObject_Door_Exit
09069                           
09069                           	LDA CurrentWorld
09069                           	CMP #$06
09069                           	BEQ CreateObject_Door_Exit
09069                           
09069                           loc_BANK6_9056:
09069                           	JSR LevelParser_EatDoorPointer
09069                           ENDIF
09069                           
09069                           CreateObject_Door_Exit:
09069 60                        	RTS
0906A                           
0906A                           
0906A                           MushroomHouseLeftTiles:
0906A 00                        	.db BackgroundTile_Black
0906B 13                        	.db BackgroundTile_CloudLeft
0906C CB                        	.db BackgroundTile_MushroomTopLeft
0906D 09                        	.db BackgroundTile_HouseLeft
0906E                           
0906E                           MushroomHouseMiddleTiles:
0906E 00                        	.db BackgroundTile_Black
0906F 14                        	.db BackgroundTile_CloudMiddle
09070 CD                        	.db BackgroundTile_MushroomTopMiddle
09071 0B                        	.db BackgroundTile_HouseMiddle
09072                           
09072                           MushroomHouseRightTiles:
09072 00                        	.db BackgroundTile_Black
09073 15                        	.db BackgroundTile_CloudRight
09074 CF                        	.db BackgroundTile_MushroomTopRight
09075 0D                        	.db BackgroundTile_HouseRight
09076                           
09076                           ; =============== S U B R O U T I N E =======================================
09076                           
09076                           sub_BANK6_9066:
09076 A4 E7                     	LDY byte_RAM_E7
09078 AD 0E 05                  	LDA byte_RAM_50E
0907B 38                        	SEC
0907C E9 0A                     	SBC #$0A
0907E AA                        	TAX
0907F BD 6A 90                  	LDA MushroomHouseLeftTiles, X
09082 91 01                     	STA (byte_RAM_1), Y
09084 CE 0D 05                  	DEC byte_RAM_50D
09087 F0 0D                     	BEQ loc_BANK6_9086
09089                           
09089                           loc_BANK6_9079:
09089 20 53 9A                  	JSR IncrementAreaXOffset
0908C                           
0908C BD 6E 90                  	LDA MushroomHouseMiddleTiles, X
0908F 91 01                     	STA (byte_RAM_1), Y
09091 CE 0D 05                  	DEC byte_RAM_50D
09094 D0 F3                     	BNE loc_BANK6_9079
09096                           
09096                           loc_BANK6_9086:
09096 20 53 9A                  	JSR IncrementAreaXOffset
09099                           
09099 BD 72 90                  	LDA MushroomHouseRightTiles, X
0909C 91 01                     	STA (byte_RAM_1), Y
0909E 60                        	RTS
0909F                           
0909F                           ; End of function sub_BANK6_9066
0909F                           
0909F                           ; ---------------------------------------------------------------------------
0909F                           
0909F                           ; Jump-through mushroom platforms, used in World 7
0909F                           CreateObject_MushroomJumpthroughPlatform:
0909F AD 0D 05                  	LDA byte_RAM_50D
090A2 85 07                     	STA byte_RAM_7
090A4 A9 0C                     	LDA #$0C
090A6 8D 0E 05                  	STA byte_RAM_50E
090A9                           	; Draw roof of mushroom house
090A9 20 76 90                  	JSR sub_BANK6_9066
090AC                           
090AC                           loc_BANK6_909C:
090AC A5 E7                     	LDA byte_RAM_E7
090AE 18                        	CLC
090AF 69 10                     	ADC #$10
090B1 85 E7                     	STA byte_RAM_E7
090B3 A9 0D                     	LDA #$0D
090B5 8D 0E 05                  	STA byte_RAM_50E
090B8                           	LDA_abs byte_RAM_7
090B8                           	IFDEF COMPATIBILITY
090B8 AD                        		.db $ad
090B9 07 00                     		.dw byte_RAM_7
090BB                           	ELSE
090BB                           		LDA byte_RAM_7
090BB                           		NOP_compat
090BB                           	ENDIF
090BB                           
090BB 8D 0D 05                  	STA byte_RAM_50D
090BE A6 E8                     	LDX byte_RAM_E8
090C0 20 48 9A                  	JSR SetAreaPageAddr_Bank6
090C3                           
090C3 A4 E7                     	LDY byte_RAM_E7
090C5 B1 01                     	LDA (byte_RAM_1), Y
090C7 C9 40                     	CMP #BackgroundTile_Sky
090C9 D0 09                     	BNE locret_BANK6_90C4
090CB                           
090CB                           	; Draw body of mushroom house
090CB 20 76 90                  	JSR sub_BANK6_9066
090CE                           
090CE A5 E7                     	LDA byte_RAM_E7
090D0 C9 E0                     	CMP #$E0
090D2                           
090D2                           loc_BANK6_90C2:
090D2 90 D8                     	BCC loc_BANK6_909C
090D4                           
090D4                           locret_BANK6_90C4:
090D4 60                        	RTS
090D5                           
090D5                           
090D5                           ; Pillar tiles, arranged by world
090D5                           PillarTopTiles:
090D5 79                        	.db BackgroundTile_LogPillarTop1
090D6 1D                        	.db BackgroundTile_CactusTop
090D7 79                        	.db BackgroundTile_LogPillarTop1
090D8 20                        	.db BackgroundTile_LogPillarTop0
090D9 79                        	.db BackgroundTile_LogPillarTop1
090DA 1D                        	.db BackgroundTile_CactusTop
090DB AA                        	.db BackgroundTile_ColumnPillarTop2
090DC                           
090DC                           PillarBottomTiles:
090DC 7A                        	.db BackgroundTile_LogPillarMiddle1
090DD 1E                        	.db BackgroundTile_CactusMiddle
090DE 7A                        	.db BackgroundTile_LogPillarMiddle1
090DF 21                        	.db BackgroundTile_LogPillarMiddle0
090E0 7A                        	.db BackgroundTile_LogPillarMiddle1
090E1 1E                        	.db BackgroundTile_CactusMiddle
090E2 AB                        	.db BackgroundTile_ColumnPillarMiddle2
090E3                           
090E3                           CreateObject_Pillar:
090E3 AE 34 06                  	LDX CurrentWorldTileset
090E6 A4 E7                     	LDY byte_RAM_E7
090E8 BD D5 90                  	LDA PillarTopTiles, X
090EB 91 01                     	STA (byte_RAM_1), Y
090ED                           
090ED                           CreateObject_Pillar_Loop:
090ED 20 6B 9A                  	JSR IncrementAreaYOffset
090F0                           
090F0 B1 01                     	LDA (byte_RAM_1), Y
090F2 C9 40                     	CMP #BackgroundTile_Sky
090F4 D0 10                     	BNE CreateObject_Pillar_Exit
090F6                           
090F6 AE 34 06                  	LDX CurrentWorldTileset
090F9 BD DC 90                  	LDA PillarBottomTiles, X
090FC 91 01                     	STA (byte_RAM_1), Y
090FE                           
090FE                           IFNDEF PLAYER_STUFF
090FE                           	LDA CurrentWorldTileset
090FE                           	CMP #$04
090FE                           	BNE CreateObject_Pillar_Loop
090FE                           ENDIF
090FE                           IFDEF PLAYER_STUFF
090FE A5 EC                         LDA IsHorizontalLevel
09100 F0 EB                         BEQ CreateObject_Pillar_Loop
09102                           ENDIF
09102                           
09102                           	; some kind of special behavior for world 5?
09102 C0 E0                     	CPY #$E0
09104 90 E7                     	BCC CreateObject_Pillar_Loop
09106                           
09106                           CreateObject_Pillar_Exit:
09106 60                        	RTS
09107                           
09107                           
09107                           CreateObject_Horn:
09107 A4 E7                     	LDY byte_RAM_E7
09109 A9 8C                     	LDA #BackgroundTile_HornTopLeft
0910B 91 01                     	STA (byte_RAM_1), Y
0910D C8                        	INY
0910E A9 8D                     	LDA #BackgroundTile_HornTopRight
09110 91 01                     	STA (byte_RAM_1), Y
09112 A5 E7                     	LDA byte_RAM_E7
09114 18                        	CLC
09115 69 10                     	ADC #$10
09117 A8                        	TAY
09118 A9 8E                     	LDA #BackgroundTile_HornBottomLeft
0911A 91 01                     	STA (byte_RAM_1), Y
0911C C8                        	INY
0911D A9 8F                     	LDA #BackgroundTile_HornBottomRight
0911F 91 01                     	STA (byte_RAM_1), Y
09121 60                        	RTS
09122                           
09122                           
09122                           CreateObject_DrawBridgeChain:
09122 A4 E7                     	LDY byte_RAM_E7
09124                           
09124                           CreateObject_DrawBridgeChain_Loop:
09124 A9 58                     	LDA #BackgroundTile_DrawBridgeChain
09126 91 01                     	STA (byte_RAM_1), Y
09128 98                        	TYA
09129 18                        	CLC
0912A 69 0F                     	ADC #$F
0912C A8                        	TAY
0912D CE 0D 05                  	DEC byte_RAM_50D
09130 D0 F2                     	BNE CreateObject_DrawBridgeChain_Loop
09132                           
09132 60                        	RTS
09133                           
09133                           
09133                           IFNDEF EXPAND_TABLES
09133                           ; Unused space in the original ($9126 - $91FF)
09133                           unusedSpace $9200, $FF
09133                           	IFDEF PRESERVE_UNUSED_SPACE
09133                           		.pad $9200, $FF
09133                           	ENDIF
09133                           ENDIF
09133                           IFDEF PLAYER_STUFF
09133                           ; Unused space in the original ($9126 - $91FF)
09133 FF FF FF FF FF FF FF FF.. .pad $9200, $FF
09200                           ENDIF
09200                           
09200                           
09200                           ;
09200                           ; Horizontal ground set data
09200                           ; ==========================
09200                           ;
09200                           ; Two bits per tile
09200                           ;
09200                           ; It seems to go top-to-bottom except for the last tile, which is actually the top?
09200                           ;
09200                           ; The tiles are defined in the WorldXGroundTilesHorizontal lookup tables, but
09200                           ; here's an example of how they apply:
09200                           ;
09200                           ;   00 - default background (ie. sky)
09200                           ;   01 - secondary platform (eg. sand)
09200                           ;   10 - primary platform (eg. grass)
09200                           ;   11 - secondary background (eg. black background in 3-2)
09200                           ;
09200                           HorizontalGroundSetData:
09200 00 00 00 24               	.db $00,$00,$00,$24 ; $00
09204 00 00 02 54               	.db $00,$00,$02,$54 ; $01
09208 00 02 55 54               	.db $00,$02,$55,$54 ; $02
0920C 00 02 7F 54               	.db $00,$02,$7F,$54 ; $03
09210 00 02 7F D4               	.db $00,$02,$7F,$D4 ; $04
09214 00 03 FF 54               	.db $00,$03,$FF,$54 ; $05
09218 00 02 5F FC               	.db $00,$02,$5F,$FC ; $06
0921C 00 03 FF FC               	.db $00,$03,$FF,$FC ; $07
09220 00 00 00 00               	.db $00,$00,$00,$00 ; $08
09224 55 55 55 7C               	.db $55,$55,$55,$7C ; $09
09228 E7 9E 79 E4               	.db $E7,$9E,$79,$E4 ; $0A
0922C 00 0E 79 E4               	.db $00,$0E,$79,$E4 ; $0B
09230 00 00 09 E4               	.db $00,$00,$09,$E4 ; $0C
09234 00 00 00 24               	.db $00,$00,$00,$24 ; $0D
09238 E0 0E 79 E4               	.db $E0,$0E,$79,$E4 ; $0E
0923C E4 00 09 E4               	.db $E4,$00,$09,$E4 ; $0F
09240 E4 00 00 24               	.db $E4,$00,$00,$24 ; $10
09244 E7 90 09 E4               	.db $E7,$90,$09,$E4 ; $11
09248 E7 9E 70 24               	.db $E7,$9E,$70,$24 ; $12
0924C E7 9E 40 24               	.db $E7,$9E,$40,$24 ; $13
09250 E7 9C 00 24               	.db $E7,$9C,$00,$24 ; $14
09254 E0 0E 40 24               	.db $E0,$0E,$40,$24 ; $15
09258 00 00 00 E4               	.db $00,$00,$00,$E4 ; $16
0925C E4 00 00 00               	.db $E4,$00,$00,$00 ; $17
09260 E7 9E 79 E4               	.db $E7,$9E,$79,$E4 ; $18
09264 E7 90 01 E4               	.db $E7,$90,$01,$E4 ; $19
09268 E0 00 01 E4               	.db $E0,$00,$01,$E4 ; $1A
0926C E7 90 00 24               	.db $E7,$90,$00,$24 ; $1B
09270 E0 00 00 24               	.db $E0,$00,$00,$24 ; $1C
09274 00 00 00 24               	.db $00,$00,$00,$24 ; $1D
09278 00 00 00 24               	.db $00,$00,$00,$24 ; $1E
0927C                           	; Based on the level header parsing code, $1F seems like it may have been reserved for some
0927C                           	; special behavior at some point, but it doesn't appear to be implemented.
0927C                           IFDEF EXPAND_TABLES
0927C                           	.db $00,$00,$00,$24 ; $1F
0927C                           ENDIF
0927C                           
0927C                           ;
0927C                           ; Vertical ground set data
0927C                           ; ========================
0927C                           ;
0927C                           ; Two bits per tile, left-to-right
0927C                           ;
0927C                           ; The tiles are defined in the WorldXGroundTilesVertical lookup tables, but
0927C                           ; here's an example of how they apply:
0927C                           ;
0927C                           ;   00 - default background (ie. sky)
0927C                           ;   01 - secondary platform (eg. bombable wall, sand)
0927C                           ;   10 - primary platform
0927C                           ;   11 - secondary background
0927C                           ;
0927C                           VerticalGroundSetData:
0927C AA AA AA AA               	.db $AA,$AA,$AA,$AA ; $00
09280 80 00 00 02               	.db $80,$00,$00,$02 ; $01
09284 AA 00 00 AA               	.db $AA,$00,$00,$AA ; $02
09288 FA 00 00 AF               	.db $FA,$00,$00,$AF ; $03
0928C FE 00 00 BF               	.db $FE,$00,$00,$BF ; $04
09290 FA 80 02 AF               	.db $FA,$80,$02,$AF ; $05
09294 E8 00 00 2B               	.db $E8,$00,$00,$2B ; $06
09298 E0 00 00 0B               	.db $E0,$00,$00,$0B ; $07
0929C FA 95 56 AF               	.db $FA,$95,$56,$AF ; $08
092A0 95 00 00 56               	.db $95,$00,$00,$56 ; $09
092A4 A5 55 55 5A               	.db $A5,$55,$55,$5A ; $0A
092A8 A5 5A A5 5A               	.db $A5,$5A,$A5,$5A ; $0B
092AC 55 55 55 55               	.db $55,$55,$55,$55 ; $0C
092B0 95 55 55 56               	.db $95,$55,$55,$56 ; $0D
092B4 95 5A A5 56               	.db $95,$5A,$A5,$56 ; $0E
092B8 A9 55 55 6A               	.db $A9,$55,$55,$6A ; $0F
092BC 81 55 55 42               	.db $81,$55,$55,$42 ; $10
092C0 AA A5 55 5A               	.db $AA,$A5,$55,$5A ; $11
092C4 A5 55 5A AA               	.db $A5,$55,$5A,$AA ; $12
092C8 00 00 00 00               	.db $00,$00,$00,$00 ; $13
092CC 80 00 00 02               	.db $80,$00,$00,$02 ; $14
092D0 A0 00 00 0A               	.db $A0,$00,$00,$0A ; $15
092D4 AA 00 00 AA               	.db $AA,$00,$00,$AA ; $16
092D8 AA A0 0A AA               	.db $AA,$A0,$0A,$AA ; $17
092DC 80 00 0A AA               	.db $80,$00,$0A,$AA ; $18
092E0 80 0A AA AA               	.db $80,$0A,$AA,$AA ; $19
092E4 AA AA A0 02               	.db $AA,$AA,$A0,$02 ; $1A
092E8 AA A0 00 02               	.db $AA,$A0,$00,$02 ; $1B
092EC A0 0A A0 0A               	.db $A0,$0A,$A0,$0A ; $1C
092F0 A0 00 00 00               	.db $A0,$00,$00,$00 ; $1D
092F4 00 00 00 0A               	.db $00,$00,$00,$0A ; $1E
092F8                           	; Based on the level header parsing code, $1F seems like it may have been reserved for some
092F8                           	; special behavior at some point, but it doesn't appear to be implemented.
092F8                           IFDEF EXPAND_TABLES
092F8                           	.db $00,$00,$00,$0A ; $1F
092F8                           ENDIF
092F8                           
092F8                           DecodedLevelPageStartLo_Bank6:
092F8 00                        	.db <DecodedLevelData
092F9 F0                        	.db <(DecodedLevelData+$00F0)
092FA E0                        	.db <(DecodedLevelData+$01E0)
092FB D0                        	.db <(DecodedLevelData+$02D0)
092FC C0                        	.db <(DecodedLevelData+$03C0)
092FD B0                        	.db <(DecodedLevelData+$04B0)
092FE A0                        	.db <(DecodedLevelData+$05A0)
092FF 90                        	.db <(DecodedLevelData+$0690)
09300 80                        	.db <(DecodedLevelData+$0780)
09301 70                        	.db <(DecodedLevelData+$0870)
09302 00                        	.db <(SubAreaTileLayout)
09303                           
09303                           DecodedLevelPageStartHi_Bank6:
09303 60                        	.db >DecodedLevelData
09304 60                        	.db >(DecodedLevelData+$00F0)
09305 61                        	.db >(DecodedLevelData+$01E0)
09306 62                        	.db >(DecodedLevelData+$02D0)
09307 63                        	.db >(DecodedLevelData+$03C0)
09308 64                        	.db >(DecodedLevelData+$04B0)
09309 65                        	.db >(DecodedLevelData+$05A0)
0930A 66                        	.db >(DecodedLevelData+$0690)
0930B 67                        	.db >(DecodedLevelData+$0780)
0930C 68                        	.db >(DecodedLevelData+$0870)
0930D 07                        	.db >(SubAreaTileLayout)
0930E                           
0930E                           SubspaceTilesSearch:
0930E 75                        	.db $75 ; $00
0930F 77                        	.db $77 ; $01
09310 CA                        	.db $CA ; $02
09311 CE                        	.db $CE ; $03
09312 C7                        	.db $C7 ; $04
09313                           IFNDEF FIX_SUBSPACE_TILES
09313                           	.db $C8 ; $05 ; BUG: This should be $C9
09313                           ENDIF
09313                           IFDEF FIX_SUBSPACE_TILES
09313 C9                        	.db $C9 ; $05
09314                           ENDIF
09314 D0                        	.db $D0 ; $06
09315 D1                        	.db $D1 ; $07
09316 01                        	.db $01 ; $08
09317 02                        	.db $02 ; $09
09318 84                        	.db $84 ; $0A
09319 87                        	.db $87 ; $0B
0931A 60                        	.db $60 ; $0C
0931B 62                        	.db $62 ; $0D
0931C 13                        	.db $13 ; $0E
0931D 15                        	.db $15 ; $0F
0931E 53                        	.db $53 ; $10
0931F 55                        	.db $55 ; $11
09320 CB                        	.db $CB ; $12
09321 CF                        	.db $CF ; $13
09322 09                        	.db $09 ; $14
09323 0D                        	.db $0D ; $15
09324                           
09324                           SubspaceTilesReplace:
09324 77                        	.db $77 ; $00
09325 75                        	.db $75 ; $01
09326 CE                        	.db $CE ; $02
09327 CA                        	.db $CA ; $03
09328                           IFNDEF FIX_SUBSPACE_TILES
09328                           	.db $C8 ; $04 ; BUG: This should be $C9
09328                           ENDIF
09328                           IFDEF FIX_SUBSPACE_TILES
09328 C9                        	.db $C9 ; $04
09329                           ENDIF
09329 C7                        	.db $C7 ; $05
0932A D1                        	.db $D1 ; $06
0932B D0                        	.db $D0 ; $07
0932C 02                        	.db $02 ; $08
0932D 01                        	.db $01 ; $09
0932E 87                        	.db $87 ; $0A
0932F 84                        	.db $84 ; $0B
09330 62                        	.db $62 ; $0C
09331 60                        	.db $60 ; $0D
09332 15                        	.db $15 ; $0E
09333 13                        	.db $13 ; $0F
09334 55                        	.db $55 ; $10
09335 53                        	.db $53 ; $11
09336 CF                        	.db $CF ; $12
09337 CB                        	.db $CB ; $13
09338 0D                        	.db $0D ; $14
09339 09                        	.db $09 ; $15
0933A                           
0933A                           
0933A                           ;
0933A                           ; Resets level data and PPU scrolling
0933A                           ;
0933A                           ResetLevelData:
0933A A9 00                     	LDA #<DecodedLevelData
0933C 85 0A                     	STA byte_RAM_A
0933E A0 69                     	LDY #>(DecodedLevelData+$0900)
09340 84 0B                     	STY byte_RAM_B
09342 A0 5F                     	LDY #>(DecodedLevelData-$0100)
09344 A9 40                     	LDA #BackgroundTile_Sky
09346                           
09346                           ResetLevelData_Loop:
09346 91 0A                     	STA (byte_RAM_A), Y
09348 88                        	DEY
09349 C0 FF                     	CPY #$FF
0934B D0 F9                     	BNE ResetLevelData_Loop
0934D                           
0934D C6 0B                     	DEC byte_RAM_B
0934F A6 0B                     	LDX byte_RAM_B
09351 E0 60                     	CPX #>DecodedLevelData
09353 B0 F1                     	BCS ResetLevelData_Loop
09355                           
09355 A9 00                     	LDA #$00
09357 85 FD                     	STA PPUScrollXMirror
09359 85 FC                     	STA PPUScrollYMirror
0935B 8D 36 05                  	STA CurrentLevelPageX
0935E 85 D5                     	STA byte_RAM_D5
09360 85 E6                     	STA byte_RAM_E6
09362 85 CA                     	STA ScreenYHi
09364 85 CB                     	STA ScreenYLo
09366 8D BE 04                  	STA ScreenBoundaryLeftHi
09369 8D C0 04                  	STA ScreenBoundaryLeftLo
0936C                           	STA_abs NeedVerticalScroll
0936C                           	IFDEF COMPATIBILITY
0936C 8D                        		.db $8d
0936D D8 00                     		.dw NeedVerticalScroll
0936F                           	ELSE
0936F                           		STA NeedVerticalScroll
0936F                           		NOP_compat
0936F                           	ENDIF
0936F 60                        	RTS
09370                           
09370                           
09370                           ;
09370                           ; Reads a color from the world's background palette
09370                           ;
09370                           ; Input
09370                           ;   X = color index
09370                           ; Output
09370                           ;   A = background palette color
09370                           ;
09370                           ReadWorldBackgroundColor:
09370                           	; stash X and Y registers
09370 84 0E                     	STY byte_RAM_E
09372 86 0D                     	STX byte_RAM_D
09374                           	; look up the address of the current world's palette
09374 AC 34 06                  	LDY CurrentWorldTileset
09377 B9 00 80                  	LDA WorldBackgroundPalettePointersLo, Y
0937A 85 07                     	STA byte_RAM_7
0937C B9 0E 80                  	LDA WorldBackgroundPalettePointersHi, Y
0937F 85 08                     	STA byte_RAM_8
09381                           	; load the color
09381 A4 0D                     	LDY byte_RAM_D
09383 B1 07                     	LDA (byte_RAM_7), Y
09385                           	; restore prior X and Y registers
09385 A4 0E                     	LDY byte_RAM_E
09387 A6 0D                     	LDX byte_RAM_D
09389 60                        	RTS
0938A                           
0938A                           ;
0938A                           ; Reads a color from the world's sprite palette
0938A                           ;
0938A                           ; Input
0938A                           ;   X = color index
0938A                           ; Output
0938A                           ;   A = background palette color
0938A                           ;
0938A                           ReadWorldSpriteColor:
0938A                           	; stash X and Y registers
0938A 84 0E                     	STY byte_RAM_E
0938C 86 0D                     	STX byte_RAM_D
0938E                           	; look up the address of the current world's palette
0938E AC 34 06                  	LDY CurrentWorldTileset
09391 B9 07 80                  	LDA WorldSpritePalettePointersLo, Y
09394 85 07                     	STA byte_RAM_7
09396 B9 15 80                  	LDA WorldSpritePalettePointersHi, Y
09399 85 08                     	STA byte_RAM_8
0939B                           	; load the color
0939B A4 0D                     	LDY byte_RAM_D
0939D B1 07                     	LDA (byte_RAM_7), Y
0939F                           	; restore prior X and Y registers
0939F A4 0E                     	LDY byte_RAM_E
093A1 A6 0D                     	LDX byte_RAM_D
093A3 60                        	RTS
093A4                           
093A4                           ;
093A4                           ; Loads the current area or jar palette
093A4                           ;
093A4                           LoadCurrentPalette:
093A4 AD 28 06                  	LDA InSubspaceOrJar
093A7 C9 01                     	CMP #$01
093A9 D0 06                     	BNE LoadCurrentPalette_NotJar
093AB                           
093AB                           	; This function call will overwrite the
093AB                           	; normal level loading area with $7A00
093AB 20 24 96                  	JSR HijackLevelDataCopyAddressWithJar
093AE                           
093AE 4C B4 93                  	JMP LoadCurrentPalette_AreaOffset
093B1                           
093B1                           ; ---------------------------------------------------------------------------
093B1                           
093B1                           LoadCurrentPalette_NotJar:
093B1 20 1B 96                  	JSR RestoreLevelDataCopyAddress
093B4                           
093B4                           ; Read the palette offset from the area header
093B4                           LoadCurrentPalette_AreaOffset:
093B4 A0 00                     	LDY #$00
093B6 B1 05                     	LDA (byte_RAM_5), Y
093B8                           
093B8                           ; End of function LoadCurrentPalette
093B8                           
093B8                           ;
093B8                           ; Loads a world palette to RAM
093B8                           ;
093B8                           ; Input
093B8                           ;   A = background palette header byte
093B8                           ;
093B8                           ApplyPalette:
093B8                           	; Read background palette index from area header byte
093B8 85 0F                     	STA byte_RAM_F
093BA 29 38                     	AND #%00111000
093BC 0A                        	ASL A
093BD AA                        	TAX
093BE 20 70 93                  	JSR ReadWorldBackgroundColor
093C1                           
093C1                           	; Something PPU-related. If it's not right, the colors are very wrong.
093C1                           ApplySkyColor:
093C1 8D BC 04                  	STA SkyColor
093C4 A9 3F                     	LDA #$3F
093C6 8D 01 03                  	STA PPUBuffer_301
093C9 A9 00                     	LDA #$00
093CB 8D 02 03                  	STA PPUBuffer_301 + 1
093CE A9 20                     	LDA #$20
093D0 8D 03 03                  	STA PPUBuffer_301 + 2
093D3                           
093D3 A0 00                     	LDY #$00
093D5                           ApplyPalette_BackgroundLoop:
093D5 20 70 93                  	JSR ReadWorldBackgroundColor
093D8 99 04 03                  	STA PPUBuffer_301 + 3, Y
093DB E8                        	INX
093DC C8                        	INY
093DD C0 10                     	CPY #$10
093DF 90 F4                     	BCC ApplyPalette_BackgroundLoop
093E1                           
093E1                           	; Read sprite palette index from area header byte
093E1 A5 0F                     	LDA byte_RAM_F
093E3 29 03                     	AND #$03
093E5 0A                        	ASL A
093E6 85 0F                     	STA byte_RAM_F
093E8 0A                        	ASL A
093E9 65 0F                     	ADC byte_RAM_F
093EB 0A                        	ASL A
093EC AA                        	TAX
093ED                           
093ED A0 00                     	LDY #$00
093EF                           ApplyPalette_SpriteLoop:
093EF 20 8A 93                  	JSR ReadWorldSpriteColor
093F2 99 18 03                  	STA unk_RAM_318, Y
093F5 E8                        	INX
093F6 C8                        	INY
093F7 C0 0C                     	CPY #$0C
093F9 90 F4                     	BCC ApplyPalette_SpriteLoop
093FB                           
093FB A9 00                     	LDA #$00
093FD 99 18 03                  	STA unk_RAM_318, Y
09400 A0 03                     	LDY #$03
09402                           
09402                           ApplyPalette_PlayerLoop:
09402 B9 37 06                  	LDA RestorePlayerPalette0, Y
09405 99 14 03                  	STA unk_RAM_314, Y
09408 88                        	DEY
09409 10 F7                     	BPL ApplyPalette_PlayerLoop
0940B                           
0940B A2 03                     	LDX #$03
0940D A0 10                     	LDY #$10
0940F                           ApplyPalette_SkyLoop:
0940F AD BC 04                  	LDA SkyColor
09412 99 04 03                  	STA PPUBuffer_301 + 3, Y
09415 C8                        	INY
09416 C8                        	INY
09417 C8                        	INY
09418 C8                        	INY
09419 CA                        	DEX
0941A 10 F3                     	BPL ApplyPalette_SkyLoop
0941C                           
0941C 60                        	RTS
0941D                           
0941D                           
0941D                           GenerateSubspaceArea:
0941D AD 32 05                  	LDA CurrentLevelArea
09420 8D 19 05                  	STA CurrentLevelAreaCopy
09423 A9 30                     	LDA #$30 ; subspace palette (works like area header byte)
09425 85 0F                     	STA byte_RAM_F ; why...?
09427 20 B8 93                  	JSR ApplyPalette
0942A                           
0942A AD BE 04                  	LDA ScreenBoundaryLeftHi
0942D 85 E8                     	STA byte_RAM_E8
0942F                           
0942F                           
0942F AD C0 04                  	LDA ScreenBoundaryLeftLo
09432 18                        	CLC
09433 69 08                     	ADC #$08
09435 90 02                     	BCC loc_BANK6_9439
09437                           
09437 E6 E8                     	INC byte_RAM_E8
09439                           
09439                           
09439                           
09439                           
09439                           
09439                           loc_BANK6_9439:
09439 29 F0                     	AND #$F0
0943B 48                        	PHA
0943C 38                        	SEC
0943D                           
0943D ED C0 04                  	SBC ScreenBoundaryLeftLo
09440 85 BA                     	STA byte_RAM_BA
09442 68                        	PLA
09443 4A                        	LSR A
09444 4A                        	LSR A
09445 4A                        	LSR A
09446 4A                        	LSR A
09447 85 E5                     	STA byte_RAM_E5
09449                           IFDEF PLAYER_STUFF_JAR
09449                               LDA #$0
09449                               STA RandomDropType
09449                               LDA IsHorizontalLevel
09449                               BNE +
09449                               LDA #$1
09449                               STA RandomDropType
09449                               LDA #$1
09449                               STA IsHorizontalLevel
09449                               LDA ScreenYHi
09449                               STA byte_RAM_E8
09449                               LDA #$a
09449                               STA ScreenBoundaryLeftHi
09449                               STA ScreenBoundaryRightHi
09449                           +
09449                           ENDIF
09449 A9 00                     	LDA #$00
0944B 85 E6                     	STA byte_RAM_E6
0944D A5 E8                     	LDA byte_RAM_E8
0944F 85 0D                     	STA byte_RAM_D
09451 20 3B 9A                  	JSR SetTileOffsetAndAreaPageAddr_Bank6
09454                           
09454 A4 E7                     	LDY byte_RAM_E7
09456                           IFDEF PLAYER_STUFF_JAR
09456                               LDA RandomDropType
09456                               BEQ +
09456                               TYA
09456                               ASL
09456                               ASL
09456                               ASL
09456                               ASL
09456                               TAY
09456                           +
09456                           ENDIF
09456 A2 0F                     	LDX #$0F
09458                           
09458                           GenerateSubspaceArea_TileRemapLoop:
09458 B1 01                     	LDA (byte_RAM_1), Y
0945A 20 79 94                  	JSR DoSubspaceTileRemap
0945D                           
0945D 9D 00 07                  	STA SubAreaTileLayout, X
09460 98                        	TYA
09461 18                        	CLC
09462 69 10                     	ADC #$10
09464 A8                        	TAY
09465 8A                        	TXA
09466 18                        	CLC
09467 69 10                     	ADC #$10
09469 AA                        	TAX
0946A 29 F0                     	AND #$F0
0946C D0 EA                     	BNE GenerateSubspaceArea_TileRemapLoop
0946E                           
0946E 98                        	TYA
0946F 29 0F                     	AND #$0F
09471 A8                        	TAY
09472 20 53 9A                  	JSR IncrementAreaXOffset
09475                           
09475 CA                        	DEX
09476 10 E0                     	BPL GenerateSubspaceArea_TileRemapLoop
09478                           
09478 60                        	RTS
09479                           
09479                           
09479                           ;
09479                           ; Remaps a single subspace tile
09479                           ;
09479                           ; This also handles creating the mushroom sprites
09479                           ;
09479                           ; Input
09479                           ;   A = input tile
09479                           ; Output
09479                           ;   A = output tile
09479                           ;
09479                           DoSubspaceTileRemap:
09479 84 08                     	STY byte_RAM_8
0947B 86 07                     	STX byte_RAM_7
0947D A2 15                     	LDX #(SubspaceTilesReplace-SubspaceTilesSearch-1)
0947F                           
0947F                           DoSubspaceTileRemap_Loop:
0947F DD 0E 93                  	CMP SubspaceTilesSearch, X
09482 F0 2D                     	BEQ DoSubspaceTileRemap_ReplaceTile
09484                           
09484 CA                        	DEX
09485 10 F8                     	BPL DoSubspaceTileRemap_Loop
09487                           
09487 C9 41                     	CMP #BackgroundTile_SubspaceMushroom1
09489 F0 07                     	BEQ DoSubspaceTileRemap_CheckCreateMushroom
0948B                           
0948B C9 42                     	CMP #BackgroundTile_SubspaceMushroom2
0948D F0 03                     	BEQ DoSubspaceTileRemap_CheckCreateMushroom
0948F                           
0948F 4C B4 94                  	JMP DoSubspaceTileRemap_Exit
09492                           
09492                           DoSubspaceTileRemap_CheckCreateMushroom:
09492 38                        	SEC
09493 E9 41                     	SBC #BackgroundTile_SubspaceMushroom1
09495                           IFNDEF FLAGSET
09495                           	TAY
09495                           	LDA Mushroom1Pulled, Y
09495                           	BNE DoSubspaceTileRemap_AfterCreateMushroom
09495                           ENDIF
09495                           IFDEF FLAGSET
09495 48                            PHA
09496 A8                            TAY
09497 AA                            TAX
09498 20 1F F1                      JSR GetMushFlag_Bitmask
0949B 20 4E F1                      JSR ChkFlagLevel
0949E D0 05                         BNE +
094A0 68                            PLA
094A1 A8                            TAY
094A2 4C AC 94                  	JMP DoSubspaceTileRemap_AfterCreateMushroom
094A5 68                        +   PLA
094A6 A8                            TAY
094A7                           ENDIF
094A7 A6 07                     	LDX byte_RAM_7
094A9 20 9C 9A                  	JSR CreateMushroomObject
094AC                           
094AC                           DoSubspaceTileRemap_AfterCreateMushroom:
094AC A9 41                     	LDA #BackgroundTile_SubspaceMushroom1
094AE 4C B4 94                  	JMP DoSubspaceTileRemap_Exit
094B1                           
094B1                           DoSubspaceTileRemap_ReplaceTile:
094B1 BD 24 93                  	LDA SubspaceTilesReplace, X
094B4                           
094B4                           DoSubspaceTileRemap_Exit:
094B4 A6 07                     	LDX byte_RAM_7
094B6 A4 08                     	LDY byte_RAM_8
094B8 60                        	RTS
094B9                           
094B9                           
094B9                           ;
094B9                           ; Clears the sub-area tile layout when the player goes into a jar
094B9                           ;
094B9                           ClearSubAreaTileLayout:
094B9 A2 00                     	LDX #$00
094BB 86 EC                     	STX IsHorizontalLevel
094BD                           
094BD                           ClearSubAreaTileLayout_Loop:
094BD A9 40                     	LDA #BackgroundTile_Sky
094BF 9D 00 07                  	STA SubAreaTileLayout, X
094C2 E8                        	INX
094C3 D0 F8                     	BNE ClearSubAreaTileLayout_Loop
094C5                           
094C5 AD 32 05                  	LDA CurrentLevelArea
094C8 8D 19 05                  	STA CurrentLevelAreaCopy
094CB A9 04                     	LDA #$04 ; jar is always area 4
094CD 8D 32 05                  	STA CurrentLevelArea
094D0 A9 0A                     	LDA #$0A
094D2 20 24 96                  	JSR HijackLevelDataCopyAddressWithJar
094D5                           
094D5 A0 00                     	LDY #$00
094D7 A9 0A                     	LDA #$0A
094D9 85 E8                     	STA byte_RAM_E8
094DB 8D 40 05                  	STA byte_RAM_540
094DE 84 E6                     	STY byte_RAM_E6
094E0 84 E5                     	STY byte_RAM_E5
094E2 8C 5E 05                  	STY GroundType
094E5 A0 03                     	LDY #$03
094E7 8C 41 05                  	STY GroundSetting
094EA A0 04                     	LDY #$04
094EC 20 6F 98                  	JSR loc_BANK6_972D
094EF                           
094EF                           	; object type
094EF A0 02                     	LDY #$02
094F1 B1 05                     	LDA (byte_RAM_5), Y
094F3 29 03                     	AND #%00000011
094F5 8D 42 05                  	STA ObjectType3Xthru9X
094F8 B1 05                     	LDA (byte_RAM_5), Y
094FA 4A                        	LSR A
094FB 4A                        	LSR A
094FC 29 03                     	AND #%00000011
094FE 8D 43 05                  	STA ObjectTypeAXthruFX
09501                           IFDEF PLAYER_STUFF
09501 A9 00                         LDA #$0
09503 8D D4 7D                      STA StartCustomExterior
09506                           ENDIF
09506 20 24 96                  	JSR HijackLevelDataCopyAddressWithJar
09509                           
09509 A9 0A                     	LDA #$A
0950B 85 E8                     	STA byte_RAM_E8
0950D A9 00                     	LDA #$00
0950F 85 E6                     	STA byte_RAM_E6
09511 85 E5                     	STA byte_RAM_E5
09513 A9 03                     	LDA #$03
09515 85 04                     	STA byte_RAM_4
09517 20 36 96                  	JSR ReadLevelData_NextByteObject
0951A                           
0951A A9 01                     	LDA #$01
0951C 85 EC                     	STA IsHorizontalLevel
0951E 60                        	RTS
0951F                           
0951F                           ;
0951F                           ; Set the current background music to the current area's music as defined in the header
0951F                           ;
0951F                           ; This stops the current music unless the player is currently invincible
0951F                           ;
0951F                           LoadAreaMusic:
0951F A0 03                     	LDY #$03
09521 B1 05                     	LDA (byte_RAM_5), Y
09523 29 03                     	AND #%00000011
09525 8D 44 05                  	STA CompareMusicIndex
09528 CD 45 05                  	CMP CurrentMusicIndex
0952B F0 0C                     	BEQ LoadAreaMusic_Exit
0952D                           
0952D AD E0 04                  	LDA StarInvincibilityTimer
09530 C9 08                     	CMP #$08
09532 B0 05                     	BCS LoadAreaMusic_Exit
09534                           
09534 A9 80                     	LDA #Music2_StopMusic
09536 8D 03 06                  	STA MusicQueue2
09539                           
09539                           LoadAreaMusic_Exit:
09539 60                        	RTS
0953A                           
0953A                           
0953A                           ;
0953A                           ; Unreferenced? A similar routine exists in Bank F, so it seems like this may
0953A                           ; be leftover code from a previous version.
0953A                           ;
0953A                           Unused_LevelMusicIndexes:
0953A 01                        	.db Music1_Overworld
0953B 04                        	.db Music1_Inside
0953C 08                        	.db Music1_Boss
0953D 40                        	.db Music1_Wart
0953E 20                        	.db Music1_Subspace
0953F                           
0953F                           Unused_ChangeAreaMusic:
0953F AD 44 05                  	LDA CompareMusicIndex
09542 CD 45 05                  	CMP CurrentMusicIndex
09545 F0 11                     	BEQ Unused_ChangeAreaMusic_Exit
09547                           
09547 AA                        	TAX
09548 8E 45 05                  	STX CurrentMusicIndex
0954B AD E0 04                  	LDA StarInvincibilityTimer
0954E C9 08                     	CMP #$08
09550 B0 E7                     	BCS LoadAreaMusic_Exit
09552                           
09552 BD 3A 95                  	LDA Unused_LevelMusicIndexes, X
09555 8D 00 06                  	STA MusicQueue1
09558                           
09558                           Unused_ChangeAreaMusic_Exit:
09558 60                        	RTS
09559                           
09559                           ; Unreferenced?
09559 AD 35 05                  	LDA CurrentLevelPage
0955C 0A                        	ASL A
0955D A8                        	TAY
0955E B9 1D 05                  	LDA AreaPointersByPage, Y
09561 8D 31 05                  	STA CurrentLevel
09564 C8                        	INY
09565 B9 1D 05                  	LDA AreaPointersByPage, Y
09568 4A                        	LSR A
09569 4A                        	LSR A
0956A 4A                        	LSR A
0956B 4A                        	LSR A
0956C 8D 32 05                  	STA CurrentLevelArea
0956F B9 1D 05                  	LDA AreaPointersByPage, Y
09572 29 0F                     	AND #$0F
09574 8D 33 05                  	STA CurrentLevelEntryPage
09577 60                        	RTS
09578                           
09578                           
09578                           ;
09578                           ; Resets the level data, loads the current area's level data, and queues any music changes
09578                           ;
09578                           LoadCurrentArea:
09578 20 3A 93                  	JSR ResetLevelData
0957B                           
0957B 20 81 9A                  	JSR sub_BANK6_98DC
0957E                           
0957E 20 1B 96                  	JSR RestoreLevelDataCopyAddress
09581                           
09581 20 1F 95                  	JSR LoadAreaMusic
09584                           
09584                           	; read the level header
09584                           
09584                           	; ground type
09584 A0 03                     	LDY #$03
09586 B1 05                     	LDA (byte_RAM_5), Y
09588                           IFNDEF LEVEL_ENGINE_UPGRADES
09588 4A                        	LSR A
09589 29 1C                     	AND #%00011100
0958B                           ENDIF
0958B                           IFDEF LEVEL_ENGINE_UPGRADES
0958B                           	; double available ground types
0958B                           	AND #%11110000
0958B                           	LSR A
0958B                           	LSR A
0958B                           ENDIF
0958B                           
0958B                           	; store ground type
0958B 8D 5E 05                  	STA GroundType
0958E                           IFDEF INVERSE_LEVEL
0958E A9 00                         LDA #0
09590 8D D0 7D                      STA StartCustomGroundType
09593                           ENDIF
09593 20 1B 96                  	JSR RestoreLevelDataCopyAddress
09596                           
09596                           IFDEF ENABLE_LEVEL_OBJECT_MODE
09596                           	; level object mode
09596 B1 05                     	LDA (byte_RAM_5), Y
09598 4A                        	LSR A
09599 4A                        	LSR A
0959A 4A                        	LSR A
0959B 4A                        	LSR A
0959C 4A                        	LSR A
0959D 4A                        	LSR A
0959E 29 03                     	AND #%00000011
095A0 8D 33 06                  	STA LevelObjectMode
095A3                           ENDIF
095A3                           
095A3                           	; horizontal or vertical level
095A3 A0 00                     	LDY #$00
095A5 B1 05                     	LDA (byte_RAM_5), Y
095A7 0A                        	ASL A
095A8 A9 00                     	LDA #$00
095AA 2A                        	ROL A
095AB 85 EC                     	STA IsHorizontalLevel
095AD                           
095AD                           	; reset the screen position?
095AD A9 00                     	LDA #$00
095AF 85 E8                     	STA byte_RAM_E8
095B1                           
095B1                           	; level length (pages)
095B1 A0 02                     	LDY #$02
095B3 B1 05                     	LDA (byte_RAM_5), Y
095B5 4A                        	LSR A
095B6 4A                        	LSR A
095B7 4A                        	LSR A
095B8 4A                        	LSR A
095B9 8D 3F 05                  	STA CurrentLevelPages
095BC                           
095BC                           	; object type
095BC B1 05                     	LDA (byte_RAM_5), Y
095BE 29 03                     	AND #%00000011
095C0 8D 42 05                  	STA ObjectType3Xthru9X
095C3 B1 05                     	LDA (byte_RAM_5), Y
095C5 4A                        	LSR A
095C6 4A                        	LSR A
095C7 29 03                     	AND #%00000011
095C9 8D 43 05                  	STA ObjectTypeAXthruFX
095CC                           IFDEF PLAYER_STUFF
095CC A9 00                         LDA #$0
095CE 8D D4 7D                      STA StartCustomExterior
095D1                           ENDIF
095D1 88                        	DEY
095D2                           
095D2                           IFDEF AREA_HEADER_TILESET
095D2                           	; tileset
095D2 B1 05                     	LDA (byte_RAM_5), Y
095D4 2A                        	ROL A
095D5 2A                        	ROL A
095D6 2A                        	ROL A
095D7 2A                        	ROL A
095D8 29 07                     	AND #%00000111
095DA C9 07                     	CMP #$07 ; only $00-06 are valid, force $07 to CurrentWorld
095DC 90 03                     	BCC LoadCurrentArea_IsValid
095DE AD 35 06                  	LDA CurrentWorld
095E1                           LoadCurrentArea_IsValid:
095E1 8D 34 06                  	STA CurrentWorldTileset
095E4                           ENDIF
095E4                           
095E4                           	; ground setting
095E4 B1 05                     	LDA (byte_RAM_5), Y
095E6 29 1F                     	AND #%00011111
095E8                           	; ground setting of $1F would skip the next part, but no areas do this...?
095E8 C9 1F                     	CMP #%00011111
095EA F0 0F                     	BEQ LoadCurrentArea_StartLevelData
095EC                           
095EC                           	; store ground setting
095EC 8D 41 05                  	STA GroundSetting
095EF                           
095EF                           	; read first object
095EF C8                        	INY
095F0 C8                        	INY
095F1 C8                        	INY
095F2 A9 00                     	LDA #$00
095F4 85 E5                     	STA byte_RAM_E5
095F6 85 E6                     	STA byte_RAM_E6
095F8 20 6A 98                  	JSR sub_BANK6_9728
095FB                           
095FB                           LoadCurrentArea_StartLevelData:
095FB A9 00                     	LDA #$00
095FD 85 E6                     	STA byte_RAM_E6
095FF                           	; byte_RAM_4 is the offset of the byte before the next level data byte
095FF A9 03                     	LDA #$03
09601 85 04                     	STA byte_RAM_4
09603 20 2D 96                  	JSR ReadLevelData
09606                           
09606                           IFDEF PLAYER_STUFF_BONUS
09606 20 08 FB                      JSR LoadBonusLevelPtr
09609 20 1B 96                  	JSR RestoreLevelDataCopyAddress
0960C                               ; could just leave this as is, represents page number
0960C                           	; LDA #$00
0960C                           	; STA byte_RAM_E6
0960C A9 03                     	LDA #$03
0960E 85 04                     	STA byte_RAM_4
09610 20 31 96                  	JSR ReadLevelData_No_Reset
09613                           ENDIF
09613                           
09613 A9 22                     	LDA #$22
09615 05 10                     	ORA byte_RAM_10
09617 8D AC 05                  	STA PseudoRNGValues
0961A 60                        	RTS
0961B                           
0961B                           
0961B                           ;
0961B                           ; Use level data
0961B                           ;
0961B                           RestoreLevelDataCopyAddress:
0961B A9 78                     	LDA #>RawLevelData
0961D 85 06                     	STA byte_RAM_6
0961F A9 00                     	LDA #<RawLevelData
09621 85 05                     	STA byte_RAM_5
09623 60                        	RTS
09624                           
09624                           
09624                           ;
09624                           ; Use jar data
09624                           ;
09624                           HijackLevelDataCopyAddressWithJar:
09624 A9 7A                     	LDA #>RawJarData
09626 85 06                     	STA byte_RAM_6
09628 A9 00                     	LDA #<RawJarData
0962A 85 05                     	STA byte_RAM_5
0962C 60                        	RTS
0962D                           
0962D                           
0962D                           ;
0962D                           ; Reads level data from the beginning
0962D                           ;
0962D                           ReadLevelData:
0962D A9 00                     	LDA #$00
0962F 85 E8                     	STA byte_RAM_E8
09631                           
09631                           IFDEF PLAYER_STUFF
09631                           ReadLevelData_No_Reset:
09631                           ENDIF
09631                           	; weird? the next lines do nothing
09631 A0 00                     	LDY #$00
09633 4C 36 96                  	JMP ReadLevelData_NextByteObject
09636                           
09636                           ReadLevelData_NextByteObject:
09636 A4 04                     	LDY byte_RAM_4
09638                           
09638                           ReadLevelData_NextByte:
09638 C8                        	INY
09639 B1 05                     	LDA (byte_RAM_5), Y
0963B C9 FF                     	CMP #$FF
0963D D0 01                     	BNE ReadLevelData_ProcessObject
0963F                           	; encountering $FF indicates the end of the level data
0963F 60                        	RTS
09640                           
09640                           ReadLevelData_ProcessObject:
09640 B1 05                     	LDA (byte_RAM_5), Y
09642 29 0F                     	AND #$0F
09644 85 E5                     	STA byte_RAM_E5
09646 B1 05                     	LDA (byte_RAM_5), Y
09648 29 F0                     	AND #$F0
0964A C9 F0                     	CMP #$F0
0964C D0 0C                     	BNE ReadLevelData_RegularObject
0964E                           
0964E                           ReadLevelData_SpecialObject:
0964E A5 E5                     	LDA byte_RAM_E5
09650 84 0F                     	STY byte_RAM_F
09652 20 D7 96                  	JSR ProcessSpecialObjectA
09655                           
09655 A4 0F                     	LDY byte_RAM_F
09657 4C 38 96                  	JMP ReadLevelData_NextByte
0965A                           
0965A                           ReadLevelData_RegularObject:
0965A 20 C2 96                  	JSR UpdateAreaYOffset
0965D                           
0965D                           	; check object type
0965D C8                        	INY
0965E                           	; upper nybble
0965E B1 05                     	LDA (byte_RAM_5), Y
09660 4A                        	LSR A
09661 4A                        	LSR A
09662 4A                        	LSR A
09663 4A                        	LSR A
09664 8D 0E 05                  	STA byte_RAM_50E
09667 C9 03                     	CMP #$03
09669 B0 2D                     	BCS ReadLevelData_RegularObjectWithSize
0966B                           
0966B                           ReadLevelData_RegularObjectNoSize:
0966B 48                        	PHA
0966C B1 05                     	LDA (byte_RAM_5), Y
0966E 29 0F                     	AND #$0F
09670 8D 0E 05                  	STA byte_RAM_50E
09673 68                        	PLA
09674 F0 3D                     	BEQ ReadLevelData_RegularObjectNoSize_00
09676                           
09676 48                        	PHA
09677 20 3B 9A                  	JSR SetTileOffsetAndAreaPageAddr_Bank6
0967A                           
0967A B1 05                     	LDA (byte_RAM_5), Y
0967C 29 0F                     	AND #$0F
0967E 84 04                     	STY byte_RAM_4
09680 68                        	PLA
09681 C9 01                     	CMP #$01
09683 D0 06                     	BNE ReadLevelData_RegularObjectNoSize_Not10
09685                           
09685                           ReadLevelData_RegularObjectNoSize_10:
09685 20 D8 88                  	JSR CreateObjects_10
09688 4C B0 96                  	JMP ReadLevelData_RegularObject_Exit
0968B                           
0968B                           ReadLevelData_RegularObjectNoSize_Not10:
0968B C9 02                     	CMP #$02
0968D D0 06                     	BNE ReadLevelData_RegularObjectNoSize_Not20
0968F                           
0968F                           ReadLevelData_RegularObjectNoSize_20:
0968F 20 FE 88                  	JSR CreateObjects_20
09692 4C B0 96                  	JMP ReadLevelData_RegularObject_Exit
09695                           
09695                           ReadLevelData_RegularObjectNoSize_Not20:
09695 4C B0 96                  	JMP ReadLevelData_RegularObject_Exit
09698                           
09698                           ReadLevelData_RegularObjectWithSize:
09698 B1 05                     	LDA (byte_RAM_5), Y
0969A 29 0F                     	AND #$0F
0969C 8D 0D 05                  	STA byte_RAM_50D
0969F 84 04                     	STY byte_RAM_4
096A1 20 3B 9A                  	JSR SetTileOffsetAndAreaPageAddr_Bank6
096A4                           
096A4 AD 0E 05                  	LDA byte_RAM_50E
096A7 38                        	SEC
096A8 E9 03                     	SBC #$03
096AA 8D 0E 05                  	STA byte_RAM_50E
096AD 20 98 88                  	JSR CreateObjects_30thruF0
096B0                           
096B0                           ReadLevelData_RegularObject_Exit:
096B0 4C 36 96                  	JMP ReadLevelData_NextByteObject
096B3                           
096B3                           ReadLevelData_RegularObjectNoSize_00:
096B3 20 3B 9A                  	JSR SetTileOffsetAndAreaPageAddr_Bank6
096B6                           
096B6 B1 05                     	LDA (byte_RAM_5), Y
096B8 29 0F                     	AND #$0F
096BA 84 04                     	STY byte_RAM_4
096BC 20 B5 88                  	JSR CreateObjects_00
096BF                           
096BF 4C B0 96                  	JMP ReadLevelData_RegularObject_Exit
096C2                           
096C2                           
096C2                           ;
096C2                           ; Updates the area Y offset for object placement
096C2                           ;
096C2                           ; Input
096C2                           ;   A = vertical offset
096C2                           ;
096C2                           UpdateAreaYOffset:
096C2 18                        	CLC
096C3 65 E6                     	ADC byte_RAM_E6
096C5 90 05                     	BCC UpdateAreaYOffset_SamePage
096C7                           
096C7 69 0F                     	ADC #$0F
096C9 4C D2 96                  	JMP UpdateAreaYOffset_NextPage
096CC                           
096CC                           UpdateAreaYOffset_SamePage:
096CC C9 F0                     	CMP #$F0
096CE D0 04                     	BNE UpdateAreaYOffset_Exit
096D0                           
096D0 A9 00                     	LDA #$00
096D2                           
096D2                           UpdateAreaYOffset_NextPage:
096D2 E6 E8                     	INC byte_RAM_E8
096D4                           
096D4                           UpdateAreaYOffset_Exit:
096D4 85 E6                     	STA byte_RAM_E6
096D6 60                        	RTS
096D7                           
096D7                           
096D7                           ProcessSpecialObjectA: ;; setup enum for extra options on compile
096D7 20 A6 D9                  	JSR JumpToTableAfterJump
096DA                           
096DA 39 97                     	.dw EatLevelObject1Byte ; Ground setting 0-8
096DC 39 97                     	.dw EatLevelObject1Byte ; Ground setting 9-15
096DE 0B 97                     	.dw SkipForwardPage1 ; Skip forward 1 page
096E0 09 97                     	.dw SkipForwardPage2 ; Skip forward 2 pages
096E2 28 98                     	.dw ResetPageAndOffset ; New object layer
096E4 3C 97                     	.dw SetAreaPointer ; Area pointer
096E6 39 97                     	.dw EatLevelObject1Byte ; Ground appearance
096E8                           IFDEF INVERSE_LEVEL
096E8 39 97                     	.dw EatLevelObject1Byte ; Ground setting 0-7
096EA 39 97                     	.dw EatLevelObject1Byte ; Ground setting 8-15
096EC                           ENDIF
096EC                           IFDEF INVERSE_LEVEL
096EC 52 97                     	.dw SetArbitraryBytes ; Ground setting 0-7
096EE 33 97                     	.dw EatLevelObject3Bytes ; Ground appearance
096F0                           ENDIF
096F0                           IFDEF LEVEL_ENGINE_UPGRADES
096F0                           	.dw CreateRawTiles
096F0                           ENDIF
096F0                           
096F0                           
096F0                           ProcessSpecialObjectB:
096F0 20 A6 D9                  	JSR JumpToTableAfterJump
096F3                           
096F3 E7 97                     	.dw SetGroundSettingA ; Ground setting 0-7
096F5 F2 97                     	.dw SetGroundSettingB ; Ground setting 8-15
096F7 15 97                     	.dw loc_BANK6_96BE ; Skip forward 1 page
096F9 12 97                     	.dw loc_BANK6_96BB ; Skip forward 2 pages
096FB 2F 98                     	.dw loc_BANK6_9712 ; New object layer
096FD 37 98                     	.dw SetAreaPointerNoOp ; Area pointer
096FF 58 98                     	.dw SetGroundType ; Ground appearance
09701                           IFDEF INVERSE_LEVEL
09701 00 98                     	.dw SetGroundSettingC ; Ground setting 0-7
09703 0B 98                     	.dw SetGroundSettingD ; Ground setting 8-15
09705                           ENDIF
09705                           IFDEF INVERSE_LEVEL
09705 37 98                     	.dw SetAreaPointerNoOp ; Ground setting 0-7
09707 38 98                     	.dw SetGroundTypeCustom ; Ground appearance
09709                           ENDIF
09709                           IFDEF LEVEL_ENGINE_UPGRADES
09709                           	.dw CreateRawTilesNoOp
09709                           ENDIF
09709                           
09709                           SkipForwardPage2:
09709 E6 E8                     	INC byte_RAM_E8
0970B                           
0970B                           SkipForwardPage1:
0970B E6 E8                     	INC byte_RAM_E8
0970D A9 00                     	LDA #$00
0970F 85 E6                     	STA byte_RAM_E6
09711 60                        	RTS
09712                           
09712                           
09712                           loc_BANK6_96BB:
09712 EE 40 05                  	INC byte_RAM_540
09715                           
09715                           loc_BANK6_96BE:
09715 EE 40 05                  	INC byte_RAM_540
09718 A9 00                     	LDA #$00
0971A 85 0E                     	STA byte_RAM_E
0971C 85 09                     	STA byte_RAM_9
0971E 60                        	RTS
0971F                           
0971F                           
0971F                           IFDEF INVERSE_LEVEL
0971F                           EatLevelObjectXByte:
0971F A4 0F                     	LDY byte_RAM_F
09721 C8                            INY
09722 C8                            INY
09723 C8                            INY
09724 B1 05                     	LDA (byte_RAM_5), Y
09726 C8                            INY
09727 84 0F                         STY byte_RAM_F
09729 AA                            TAX
0972A F0 61                         BEQ EndArbitraryBytes
0972C E6 0F                     -   INC byte_RAM_F
0972E C8                            INY
0972F CA                            DEX
09730 D0 FA                         BNE -
09732 60                            RTS
09733                           
09733                           EatLevelObject3Bytes:
09733 E6 0F                     	INC byte_RAM_F
09735 E6 0F                     	INC byte_RAM_F
09737                           ENDIF
09737                           ; Unreferenced?
09737                           EatLevelObject2Bytes:
09737 E6 0F                     	INC byte_RAM_F
09739                           
09739                           EatLevelObject1Byte:
09739 E6 0F                     	INC byte_RAM_F
0973B 60                        	RTS
0973C                           
0973C                           
0973C                           SetAreaPointer:
0973C A4 0F                     	LDY byte_RAM_F
0973E C8                        	INY
0973F A5 E8                     	LDA byte_RAM_E8
09741 0A                        	ASL A
09742 AA                        	TAX
09743 B1 05                     	LDA (byte_RAM_5), Y
09745 9D 1D 05                  	STA AreaPointersByPage, X
09748 C8                        	INY
09749 E8                        	INX
0974A B1 05                     	LDA (byte_RAM_5), Y
0974C 9D 1D 05                  	STA AreaPointersByPage, X
0974F 84 0F                     	STY byte_RAM_F
09751 60                        	RTS
09752                           
09752                           IFDEF INVERSE_LEVEL
09752                           SetArbitraryBytes:
09752                               ;; should be ptr ptr, cnt, data
09752 A4 0F                     	LDY byte_RAM_F ;; current byte
09754 C8                        	INY
09755 B1 05                     	LDA (byte_RAM_5), Y
09757 85 C6                     	STA $c5+1 ;; ld 1
09759 C8                        	INY
0975A B1 05                     	LDA (byte_RAM_5), Y
0975C 85 C5                     	STA $c5 ;; ld 2
0975E C8                        	INY
0975F B1 05                     	LDA (byte_RAM_5), Y
09761 8D 01 04                      STA Arbitrary_CNT
09764 30 2D                         BMI ArbitraryBytesVertical
09766 F0 25                         BEQ EndArbitraryBytes
09768 84 0F                         STY byte_RAM_F
0976A C8                            INY
0976B 98                        -   TYA
0976C 48                        	PHA
0976D B1 05                         LDA (byte_RAM_5), Y
0976F A0 00                         LDY #0
09771 91 C5                     	STA ($c5), Y
09773 68                            PLA
09774 A8                            TAY
09775 E6 C5                         INC $c5
09777 C8                            INY
09778 E6 0F                         INC byte_RAM_F
0977A CE 01 04                      DEC Arbitrary_CNT
0977D AD 01 04                      LDA Arbitrary_CNT
09780 C9 40                         CMP #$40
09782 F0 09                         BEQ ++
09784 90 03                         BCC +
09786 88                            DEY
09787 C6 0F                         DEC byte_RAM_F
09789 C9 00                     +   CMP #$0
0978B D0 DE                         BNE -
0978D                           ++
0978D                           EndArbitraryBytes:
0978D                           
0978D A4 0F                         LDY byte_RAM_F
0978F C8                            INY
09790 A9 00                         LDA #0
09792 60                            RTS
09793                           
09793                           ArbitraryBytesVertical:
09793 29 7F                         AND #$7F
09795 8D 01 04                      STA Arbitrary_CNT
09798 F0 F3                         BEQ EndArbitraryBytes
0979A                           StartLoopArbitraryNeg:
0979A A5 C5                         LDA $c5
0979C 48                            PHA
0979D A5 C6                         LDA $c6
0979F 48                            PHA
097A0 84 0F                         STY byte_RAM_F
097A2 C8                            INY
097A3 98                        -   TYA
097A4 48                            PHA
097A5 B1 05                         LDA (byte_RAM_5), Y
097A7 A0 00                         LDY #0
097A9 91 C5                     	STA ($c5), Y
097AB 68                            PLA
097AC A8                            TAY
097AD C8                            INY
097AE E6 0F                         INC byte_RAM_F
097B0 CE 01 04                      DEC Arbitrary_CNT
097B3 A5 C5                         LDA $c5
097B5 18                            CLC
097B6 69 10                         ADC #$10
097B8 85 C5                         STA $c5
097BA A5 C6                         LDA $c6
097BC 69 00                         ADC #$0
097BE 85 C6                         STA $c6
097C0 AD 01 04                      LDA Arbitrary_CNT
097C3 C9 40                         CMP #$40
097C5 F0 09                         BEQ ++
097C7 90 03                         BCC +
097C9 88                            DEY
097CA C6 0F                         DEC byte_RAM_F
097CC C9 00                     +   CMP #$0
097CE D0 D3                         BNE -
097D0                           ++
097D0 68                            PLA
097D1 85 C6                         STA $c6
097D3 68                            PLA
097D4 85 C5                         STA $c5
097D6 E6 C5                         INC $c5
097D8 F0 B3                         BEQ EndArbitraryBytes
097DA                           ENDIF
097DA                           
097DA                           IFDEF LEVEL_ENGINE_UPGRADES
097DA                           ;
097DA                           ; Special Object $F7
097DA                           ; ==================
097DA                           ;
097DA                           ; Creates a run of 1-16 arbitrary tiles
097DA                           ;
097DA                           ; Usage: $F7 $YX $WL ...
097DA                           ;    Y - relative Y offset on page
097DA                           ;    X - X position on page
097DA                           ;    W - wrap width (eg. 0 for no wrap, 2 for 2-tiles wide, etc.)
097DA                           ;    L - run length, L+1 subsequent bytes are the raw tiles
097DA                           ;
097DA                           CreateRawTiles:
097DA                           	LDY byte_RAM_F
097DA                           
097DA                           	; setting the page address allows this to be the first object of an area
097DA                           	LDX byte_RAM_E8
097DA                           	JSR SetAreaPageAddr_Bank6
097DA                           
097DA                           	INY
097DA                           	; read tile placement offset
097DA                           	LDA (byte_RAM_5), Y
097DA                           	CLC
097DA                           	ADC byte_RAM_E6 ; add current offset
097DA                           	STA byte_RAM_E7 ; target tile placement offset
097DA                           
097DA                           	; apply page Y offset
097DA                           	LDA (byte_RAM_5), Y
097DA                           	AND #$F0
097DA                           	JSR UpdateAreaYOffset
097DA                           
097DA                           	INY
097DA                           	; read run length
097DA                           	LDA (byte_RAM_5), Y
097DA                           	AND #$0F
097DA                           	STA byte_RAM_50D
097DA                           
097DA                           	; read wrap length
097DA                           	LDA (byte_RAM_5), Y
097DA                           	LSR A
097DA                           	LSR A
097DA                           	LSR A
097DA                           	LSR A
097DA                           	STA byte_RAM_50E
097DA                           
097DA                           	; start counting from 0
097DA                           	LDX #$00
097DA                           
097DA                           	; everything afterwards is raw data
097DA                           CreateRawTiles_Loop:
097DA                           	; increment and stash Y
097DA                           	INY
097DA                           	TYA
097DA                           	PHA
097DA                           
097DA                           	; write the next tile
097DA                           	LDA (byte_RAM_5), Y
097DA                           	LDY byte_RAM_E7
097DA                           	STA (byte_RAM_1), Y
097DA                           
097DA                           	; increment x-position (crossing page as necessary)
097DA                           	JSR IncrementAreaXOffset
097DA                           	STY byte_RAM_E7
097DA                           
097DA                           	; are we wrapping this run of tiles?
097DA                           	LDA byte_RAM_50E
097DA                           	BEQ CreateRawTiles_NoWrap
097DA                           
097DA                           	; increment y-position if we hit the wrap point
097DA                           	TXA
097DA                           	CLC
097DA                           	ADC #$01
097DA                           CreateRawTiles_CheckWrap:
097DA                           	SEC
097DA                           	SBC byte_RAM_50E
097DA                           	BMI CreateRawTiles_NoWrap
097DA                           	BNE CreateRawTiles_CheckWrap
097DA                           
097DA                           CreateRawTiles_Wrap:
097DA                           	TXA
097DA                           	PHA
097DA                           	JSR IncrementAreaYOffset
097DA                           	SEC
097DA                           	SBC byte_RAM_50E
097DA                           	TAY
097DA                           	STY byte_RAM_E7
097DA                           	PLA
097DA                           	TAX
097DA                           
097DA                           CreateRawTiles_NoWrap:
097DA                           	; restore Y and iterate
097DA                           	PLA
097DA                           	TAY
097DA                           
097DA                           	CPX byte_RAM_50D
097DA                           	INX
097DA                           	BCC CreateRawTiles_Loop
097DA                           
097DA                           	; update level data offset
097DA                           	STY byte_RAM_F
097DA                           
097DA                           CreateRawTilesNoOp:
097DA                           	RTS
097DA                           ENDIF
097DA                           
097DA                           
097DA                           ;
097DA                           ; Use top 3 bits for the X offset of a ground setting object
097DA                           ;
097DA                           ; Output
097DA                           ;   A = 0-7
097DA                           ;
097DA                           ReadGroundSettingOffset:
097DA A4 0F                     	LDY byte_RAM_F
097DC C8                        	INY
097DD B1 05                     	LDA (byte_RAM_5), Y
097DF 29 E0                     	AND #%11100000
097E1 4A                        	LSR A
097E2 4A                        	LSR A
097E3 4A                        	LSR A
097E4 4A                        	LSR A
097E5 4A                        	LSR A
097E6 60                        	RTS
097E7                           
097E7                           ; Ground setting for X=0 through X=7
097E7                           SetGroundSettingA:
097E7                           IFDEF INVERSE_LEVEL
097E7 A9 00                         LDA #0
097E9 8D FE 06                      STA InvertGroundSetting 
097EC                           ENDIF
097EC 20 DA 97                  	JSR ReadGroundSettingOffset
097EF 4C 19 98                  	JMP SetGroundSetting
097F2                           
097F2                           ; Ground setting for X=8 through X=15
097F2                           SetGroundSettingB:
097F2                           IFDEF INVERSE_LEVEL
097F2 A9 00                         LDA #0
097F4 8D FE 06                      STA InvertGroundSetting 
097F7                           ENDIF
097F7 20 DA 97                  	JSR ReadGroundSettingOffset
097FA 18                        	CLC
097FB 69 08                     	ADC #$08
097FD                           
097FD                           IFDEF INVERSE_LEVEL
097FD 4C 19 98                      JMP SetGroundSetting
09800                           SetGroundSettingC:
09800 A9 01                         LDA #1
09802 8D FE 06                      STA InvertGroundSetting 
09805 20 DA 97                  	JSR ReadGroundSettingOffset
09808 4C 19 98                  	JMP SetGroundSetting
0980B                           SetGroundSettingD:
0980B A9 01                         LDA #1
0980D 8D FE 06                      STA InvertGroundSetting 
09810 20 DA 97                  	JSR ReadGroundSettingOffset
09813 18                        	CLC
09814 69 08                     	ADC #$08
09816 4C 19 98                  	JMP SetGroundSetting
09819                           ENDIF
09819                           
09819                           SetGroundSetting:
09819 85 0E                     	STA byte_RAM_E
0981B A5 EC                     	LDA IsHorizontalLevel
0981D D0 08                     	BNE SetGroundSetting_Exit
0981F                           
0981F A5 0E                     	LDA byte_RAM_E
09821 0A                        	ASL A
09822 0A                        	ASL A
09823 0A                        	ASL A
09824 0A                        	ASL A
09825 85 0E                     	STA byte_RAM_E
09827                           
09827                           SetGroundSetting_Exit:
09827 60                        	RTS
09828                           
09828                           
09828                           ResetPageAndOffset:
09828 A9 00                     	LDA #$00
0982A 85 E8                     	STA byte_RAM_E8
0982C 85 E6                     	STA byte_RAM_E6
0982E 60                        	RTS
0982F                           
0982F                           
0982F                           loc_BANK6_9712:
0982F A9 00                     	LDA #$00
09831 8D 40 05                  	STA byte_RAM_540
09834 85 0E                     	STA byte_RAM_E
09836 60                        	RTS
09837                           
09837                           
09837                           SetAreaPointerNoOp:
09837 60                        	RTS
09838                           
09838                           IFDEF INVERSE_LEVEL
09838                           SetGroundTypeCustom:
09838 A4 0F                     	LDY byte_RAM_F
0983A A9 01                     	LDA #$01
0983C 8D D0 7D                      STA StartCustomGroundType
0983F C8                        	INY
09840 B1 05                     	LDA (byte_RAM_5), Y
09842 8D D1 7D                      STA StartCustomGroundType + 1
09845 C8                        	INY
09846 B1 05                     	LDA (byte_RAM_5), Y
09848 8D D2 7D                      STA StartCustomGroundType + 2
0984B C8                        	INY
0984C B1 05                     	LDA (byte_RAM_5), Y
0984E 8D D3 7D                      STA StartCustomGroundType + 3
09851 C8                        	INY
09852 B1 05                     	LDA (byte_RAM_5), Y
09854 8D D4 7D                      STA StartCustomGroundType + 4
09857 60                        	RTS
09858                           ENDIF
09858                           
09858                           
09858                           SetGroundType:
09858 A4 0F                     	LDY byte_RAM_F
0985A C8                        	INY
0985B B1 05                     	LDA (byte_RAM_5), Y
0985D 29 0F                     	AND #%00001111
0985F 0A                        	ASL A
09860 0A                        	ASL A
09861 8D 5E 05                  	STA GroundType ;; adds with last 2 bits as 00 as to add 0-3 later
09864                           IFDEF INVERSE_LEVEL
09864 A9 00                         LDA #0
09866 8D D0 7D                      STA StartCustomGroundType
09869                           ENDIF
09869 60                        	RTS
0986A                           
0986A                           ; =============== S U B R O U T I N E =======================================
0986A                           
0986A                           ; used for the first object of a level?
0986A                           sub_BANK6_9728:
0986A A9 00                     	LDA #$00
0986C 8D 40 05                  	STA byte_RAM_540
0986F                           
0986F                           loc_BANK6_972D:
0986F A9 00                     	LDA #$00
09871 85 09                     	STA byte_RAM_9
09873                           
09873                           loc_BANK6_9731:
09873 B1 05                     	LDA (byte_RAM_5), Y
09875 C9 FF                     	CMP #$FF
09877 D0 0F                     	BNE loc_BANK6_9746
09879                           
09879                           	; end of level data
09879 A9 0A                     	LDA #$0A
0987B 8D 40 05                  	STA byte_RAM_540
0987E EE 40 05                  	INC byte_RAM_540
09881 A9 00                     	LDA #$00
09883 85 0E                     	STA byte_RAM_E
09885 4C EE 98                  	JMP loc_BANK6_978C
09888                           
09888                           ; ---------------------------------------------------------------------------
09888                           
09888                           loc_BANK6_9746:
09888 B1 05                     	LDA (byte_RAM_5), Y
0988A 29 F0                     	AND #$F0
0988C F0 43                     	BEQ loc_BANK6_976F
0988E                           
0988E C9 F0                     	CMP #$F0
09890 D0 44                     	BNE loc_BANK6_9774
09892                           
09892                           	; a special object
09892 B1 05                     	LDA (byte_RAM_5), Y
09894 29 0F                     	AND #$0F
09896 84 0F                     	STY byte_RAM_F
09898 20 F0 96                  	JSR ProcessSpecialObjectB
0989B                           
0989B A4 0F                     	LDY byte_RAM_F
0989D B1 05                     	LDA (byte_RAM_5), Y
0989F 29 0F                     	AND #$0F
098A1 C9 02                     	CMP #$02
098A3 90 49                     	BCC loc_BANK6_978C
098A5                           IFDEF INVERSE_LEVEL
098A5 C9 07                     	CMP #$07
098A7 F0 45                     	BEQ loc_BANK6_978C
098A9 C9 08                     	CMP #$08
098AB F0 41                     	BEQ loc_BANK6_978C
098AD C9 09                     	CMP #$09
098AF D0 06                     	BNE +
098B1 20 1F 97                      JSR EatLevelObjectXByte
098B4 4C 73 98                      JMP loc_BANK6_9731
098B7                           +
098B7 C9 0A                     	CMP #$0a
098B9 D0 0A                         BNE +
098BB C8                            INY
098BC C8                            INY
098BD C8                            INY
098BE C8                            INY
098BF C8                            INY
098C0 84 0F                         STY byte_RAM_F
098C2 4C 73 98                      JMP loc_BANK6_9731
098C5                           +
098C5                           ENDIF
098C5 C9 05                     	CMP #$05
098C7 D0 04                     	BNE loc_BANK6_976B
098C9                           
098C9 C8                        	INY
098CA 4C D1 98                  	JMP loc_BANK6_976F
098CD                           
098CD                           ; ---------------------------------------------------------------------------
098CD                           
098CD                           loc_BANK6_976B:
098CD C9 06                     	CMP #$06
098CF D0 01                     	BNE loc_BANK6_9770
098D1                           
098D1                           loc_BANK6_976F:
098D1 C8                        	INY
098D2                           
098D2                           loc_BANK6_9770:
098D2 C8                        	INY
098D3 4C 73 98                  	JMP loc_BANK6_9731
098D6                           
098D6                           ; ---------------------------------------------------------------------------
098D6                           
098D6                           ; not a special object
098D6                           loc_BANK6_9774:
098D6 18                        	CLC
098D7 65 09                     	ADC byte_RAM_9
098D9 90 05                     	BCC loc_BANK6_977E
098DB                           
098DB 69 0F                     	ADC #$0F
098DD 4C E6 98                  	JMP loc_BANK6_9784
098E0                           
098E0                           ; ---------------------------------------------------------------------------
098E0                           
098E0                           loc_BANK6_977E:
098E0 C9 F0                     	CMP #$F0
098E2 D0 05                     	BNE loc_BANK6_9787
098E4                           
098E4 A9 00                     	LDA #$00
098E6                           
098E6                           loc_BANK6_9784:
098E6 EE 40 05                  	INC byte_RAM_540
098E9                           
098E9                           loc_BANK6_9787:
098E9 85 09                     	STA byte_RAM_9
098EB 4C D1 98                  	JMP loc_BANK6_976F
098EE                           
098EE                           ; ---------------------------------------------------------------------------
098EE                           
098EE                           loc_BANK6_978C:
098EE 20 3B 9A                  	JSR SetTileOffsetAndAreaPageAddr_Bank6
098F1                           
098F1 20 44 99                  	JSR LoadGroundSetData
098F4                           
098F4 A5 EC                     	LDA IsHorizontalLevel
098F6 F0 11                     	BEQ loc_BANK6_97A7
098F8                           
098F8 E6 E5                     	INC byte_RAM_E5
098FA A5 E5                     	LDA byte_RAM_E5
098FC C9 10                     	CMP #$10
098FE D0 0E                     	BNE loc_BANK6_97AC
09900                           
09900 E6 E8                     	INC byte_RAM_E8
09902 A9 00                     	LDA #$00
09904 85 E5                     	STA byte_RAM_E5
09906 4C 0E 99                  	JMP loc_BANK6_97AC
09909                           
09909                           ; ---------------------------------------------------------------------------
09909                           
09909                           loc_BANK6_97A7:
09909 A9 10                     	LDA #$10
0990B 20 C2 96                  	JSR UpdateAreaYOffset
0990E                           
0990E                           loc_BANK6_97AC:
0990E A5 E8                     	LDA byte_RAM_E8
09910 CD 40 05                  	CMP byte_RAM_540
09913 D0 D9                     	BNE loc_BANK6_978C
09915                           
09915 A5 EC                     	LDA IsHorizontalLevel
09917 F0 08                     	BEQ loc_BANK6_97BF
09919                           
09919 A5 E5                     	LDA byte_RAM_E5
0991B C5 0E                     	CMP byte_RAM_E
0991D 90 CF                     	BCC loc_BANK6_978C
0991F                           
0991F B0 06                     	BCS loc_BANK6_97C5
09921                           
09921                           loc_BANK6_97BF:
09921 A5 E6                     	LDA byte_RAM_E6
09923 C5 0E                     	CMP byte_RAM_E
09925 90 C7                     	BCC loc_BANK6_978C
09927                           
09927                           loc_BANK6_97C5:
09927 B1 05                     	LDA (byte_RAM_5), Y
09929 C9 FF                     	CMP #$FF
0992B F0 16                     	BEQ ReadGroundSetByte_Exit
0992D                           
0992D C8                        	INY
0992E B1 05                     	LDA (byte_RAM_5), Y
09930 29 1F                     	AND #$1F
09932 8D 41 05                  	STA GroundSetting
09935 4C D2 98                  	JMP loc_BANK6_9770
09938                           
09938                           ; End of function sub_BANK6_9728
09938                           
09938                           ; =============== S U B R O U T I N E =======================================
09938                           
09938                           ; Input
09938                           ;   X = Ground set offset
09938                           ReadGroundSetByte:
09938 A5 EC                     	LDA IsHorizontalLevel
0993A D0 04                     	BNE ReadGroundSetByte_Vertical
0993C                           
0993C BD 7C 92                  	LDA VerticalGroundSetData, X
0993F 60                        	RTS
09940                           
09940                           ReadGroundSetByte_Vertical:
09940 BD 00 92                  	LDA HorizontalGroundSetData, X
09943                           
09943                           ReadGroundSetByte_Exit:
09943 60                        	RTS
09944                           
09944                           ; End of function ReadGroundSetByte
09944                           
09944                           ; =============== S U B R O U T I N E =======================================
09944                           
09944                           LoadGroundSetData:
09944 84 04                     	STY byte_RAM_4
09946 AD 41 05                  	LDA GroundSetting
09949 0A                        	ASL A
0994A 0A                        	ASL A
0994B AA                            TAX
0994C                           IFDEF INVERSE_LEVEL
0994C AD FE 06                      LDA InvertGroundSetting
0994F F0 05                         BEQ +
09951 8A                            TXA
09952 18                            CLC
09953 69 03                         ADC #$3
09955 AA                            TAX
09956 8A                        +   TXA
09957                           ENDIF
09957 A4 E7                     	LDY byte_RAM_E7
09959                           
09959                           LoadGroundSetData_Loop:
09959                           IFDEF INVERSE_LEVEL
09959 AD FE 06                      LDA InvertGroundSetting
0995C F0 1B                         BEQ LoadGroundSetData_Loop_Real
0995E                           
0995E 20 38 99                  	JSR ReadGroundSetByte 
09961                           
09961 20 B7 99                  	JSR WriteGroundSetTiles4 
09964                           
09964 20 38 99                  	JSR ReadGroundSetByte 
09967                           
09967 20 B5 99                  	JSR WriteGroundSetTiles3 
0996A                           
0996A 20 38 99                  	JSR ReadGroundSetByte 
0996D                           
0996D 20 B3 99                  	JSR WriteGroundSetTiles2 
09970                           
09970 20 38 99                  	JSR ReadGroundSetByte 
09973                           
09973 20 B1 99                  	JSR WriteGroundSetTiles1 
09976                           
09976 4C 91 99                      JMP LoadGroundSetData_EndLine 
09979                           LoadGroundSetData_Loop_Real:
09979                           ENDIF
09979                           
09979 20 38 99                  	JSR ReadGroundSetByte
0997C                           
0997C 20 B1 99                  	JSR WriteGroundSetTiles1
0997F                           
0997F 20 38 99                  	JSR ReadGroundSetByte
09982                           
09982 20 B3 99                  	JSR WriteGroundSetTiles2
09985                           
09985 20 38 99                  	JSR ReadGroundSetByte
09988                           
09988 20 B5 99                  	JSR WriteGroundSetTiles3
0998B                           
0998B 20 38 99                  	JSR ReadGroundSetByte
0998E                           
0998E 20 B7 99                  	JSR WriteGroundSetTiles4
09991                           
09991                           LoadGroundSetData_EndLine:
09991 A5 EC                     	LDA IsHorizontalLevel
09993 F0 0C                     	BEQ LoadGroundSetData_Horizontal
09995                           IFDEF INVERSE_LEVEL
09995 AD FE 06                      LDA InvertGroundSetting
09998 F0 02                         BEQ +
0999A CA                            DEX
0999B CA                            DEX
0999C                           +
0999C                           ENDIF
0999C E8                            INX
0999D B0 0F                     	BCS LoadGroundSetData_Exit
0999F                           
0999F 90 B8                     	BCC LoadGroundSetData_Loop
099A1                           
099A1                           LoadGroundSetData_Horizontal:
099A1                           IFDEF INVERSE_LEVEL
099A1 AD FE 06                      LDA InvertGroundSetting
099A4 F0 02                         BEQ +
099A6 CA                            DEX
099A7 CA                            DEX
099A8                           +
099A8                           ENDIF
099A8 E8                            INX
099A9 98                        	TYA
099AA 29 0F                     	AND #$0F
099AC D0 AB                     	BNE LoadGroundSetData_Loop
099AE                           
099AE                           LoadGroundSetData_Exit:
099AE A4 04                     	LDY byte_RAM_4
099B0 60                        	RTS
099B1                           
099B1                           ;
099B1                           ; Draws current ground set tiles
099B1                           ;
099B1                           IFDEF INVERSE_LEVEL
099B1                               StartCustomGroundType = $7DD0
099B1                               StartCustomExterior = $7DD4
099B1                           ENDIF
099B1                           WriteGroundSetTiles:
099B1                           WriteGroundSetTiles1:
099B1 4A                        	LSR A
099B2 4A                        	LSR A
099B3                           
099B3                           WriteGroundSetTiles2:
099B3 4A                        	LSR A
099B4 4A                        	LSR A
099B5                           
099B5                           WriteGroundSetTiles3:
099B5 4A                        	LSR A
099B6 4A                        	LSR A
099B7                           
099B7                           WriteGroundSetTiles4:
099B7 29 03                     	AND #$03
099B9 86 03                     	STX byte_RAM_3
099BB                           	; This BEQ is what effectively ignores the first index of the groundset tiles lookup tables.
099BB F0 14                     	BEQ WriteGroundSetTiles_AfterWriteTile
099BD                           
099BD 18                        	CLC
099BE 6D 5E 05                  	ADC GroundType
099C1 AA                        	TAX
099C2 A5 EC                     	LDA IsHorizontalLevel
099C4 D0 06                     	BNE WriteGroundSetTiles_Horizontal
099C6                           
099C6 20 0D 9A                  	JSR ReadGroundTileVertical
099C9                           
099C9 4C CF 99                  	JMP WriteGroundSetTiles_WriteTile
099CC                           
099CC                           WriteGroundSetTiles_Horizontal:
099CC 20 DF 99                  	JSR ReadGroundTileHorizontal
099CF                           
099CF                           WriteGroundSetTiles_WriteTile:
099CF 91 01                     	STA (byte_RAM_1), Y
099D1                           
099D1                           WriteGroundSetTiles_AfterWriteTile:
099D1 A6 03                     	LDX byte_RAM_3
099D3 A5 EC                     	LDA IsHorizontalLevel
099D5 D0 02                     	BNE WriteGroundSetTiles_IncrementYOffset
099D7                           
099D7 C8                        	INY
099D8 60                        	RTS
099D9                           
099D9                           WriteGroundSetTiles_IncrementYOffset:
099D9 98                        	TYA
099DA 18                        	CLC
099DB 69 10                     	ADC #$10
099DD A8                        	TAY
099DE 60                        	RTS
099DF                           
099DF                           
099DF                           ReadGroundTileHorizontal:
099DF 86 0C                     	STX byte_RAM_C
099E1 84 0D                     	STY byte_RAM_D
099E3                           IFDEF INVERSE_LEVEL
099E3 AD D0 7D                      LDA StartCustomGroundType
099E6 F0 0F                         BEQ +
099E8 A5 0C                         LDA byte_RAM_C
099EA 38                            SEC
099EB ED 5E 05                      SBC GroundType
099EE A8                            TAY
099EF B9 D0 7D                  	LDA StartCustomGroundType, Y
099F2 A6 0C                     	LDX byte_RAM_C
099F4 A4 0D                     	LDY byte_RAM_D
099F6 60                            RTS
099F7                           +
099F7                           ENDIF
099F7 AE 34 06                  	LDX CurrentWorldTileset
099FA BD 28 84                  	LDA GroundTilesHorizontalLo, X
099FD 85 07                     	STA byte_RAM_7
099FF BD 36 84                  	LDA GroundTilesHorizontalHi, X
09A02 85 08                     	STA byte_RAM_8
09A04 A4 0C                     	LDY byte_RAM_C
09A06 B1 07                     	LDA (byte_RAM_7), Y
09A08 A6 0C                     	LDX byte_RAM_C
09A0A A4 0D                     	LDY byte_RAM_D
09A0C 60                        	RTS
09A0D                           
09A0D                           
09A0D                           
09A0D                           ReadGroundTileVertical:
09A0D 86 0C                     	STX byte_RAM_C
09A0F 84 0D                     	STY byte_RAM_D
09A11                           IFDEF INVERSE_LEVEL
09A11 AD D0 7D                      LDA StartCustomGroundType
09A14 F0 0F                         BEQ +
09A16 A5 0C                         LDA byte_RAM_C
09A18 38                            SEC
09A19 ED 5E 05                      SBC GroundType
09A1C A8                            TAY
09A1D B9 D0 7D                  	LDA StartCustomGroundType, Y
09A20 A6 0C                     	LDX byte_RAM_C
09A22 A4 0D                     	LDY byte_RAM_D
09A24 60                            RTS
09A25                           +
09A25                           ENDIF
09A25 AE 34 06                  	LDX CurrentWorldTileset
09A28 BD 2F 84                  	LDA GroundTilesVerticalLo, X
09A2B 85 07                     	STA byte_RAM_7
09A2D BD 3D 84                  	LDA GroundTilesVerticalHi, X
09A30 85 08                     	STA byte_RAM_8
09A32 A4 0C                     	LDY byte_RAM_C
09A34 B1 07                     	LDA (byte_RAM_7), Y
09A36 A6 0C                     	LDX byte_RAM_C
09A38 A4 0D                     	LDY byte_RAM_D
09A3A 60                        	RTS
09A3B                           
09A3B                           
09A3B                           ;
09A3B                           ; Updates the area page and tile placement offset
09A3B                           ;
09A3B                           ; Input
09A3B                           ;   byte_RAM_E8 = area page
09A3B                           ;   byte_RAM_E5 = tile placement offset shift
09A3B                           ;   byte_RAM_E6 = previous tile placement offset
09A3B                           ; Output
09A3B                           ;   RAM_1 = low byte of decoded level data RAM
09A3B                           ;   RAM_2 = low byte of decoded level data RAM
09A3B                           ;   byte_RAM_E7 = target tile placement offset
09A3B                           ;
09A3B                           SetTileOffsetAndAreaPageAddr_Bank6:
09A3B A6 E8                     	LDX byte_RAM_E8
09A3D 20 48 9A                  	JSR SetAreaPageAddr_Bank6
09A40                           
09A40 A5 E6                     	LDA byte_RAM_E6
09A42 18                        	CLC
09A43 65 E5                     	ADC byte_RAM_E5
09A45 85 E7                     	STA byte_RAM_E7
09A47 60                        	RTS
09A48                           
09A48                           ;
09A48                           ; Updates the area page that we're drawing tiles to
09A48                           ;
09A48                           ; Input
09A48                           ;   X = area page
09A48                           ; Output
09A48                           ;   byte_RAM_1 = low byte of decoded level data RAM
09A48                           ;   byte_RAM_2 = low byte of decoded level data RAM
09A48                           ;
09A48                           SetAreaPageAddr_Bank6:
09A48 BD F8 92                  	LDA DecodedLevelPageStartLo_Bank6, X
09A4B 85 01                     	STA byte_RAM_1
09A4D BD 03 93                  	LDA DecodedLevelPageStartHi_Bank6, X
09A50 85 02                     	STA byte_RAM_2
09A52 60                        	RTS
09A53                           
09A53                           
09A53                           IncrementAreaXOffset:
09A53 C8                        	INY
09A54 98                        	TYA
09A55 29 0F                     	AND #$0F
09A57 D0 11                     	BNE IncrementAreaXOffset_Exit
09A59                           
09A59 98                        	TYA
09A5A 38                        	SEC
09A5B E9 10                     	SBC #$10
09A5D A8                        	TAY
09A5E 86 0B                     	STX byte_RAM_B
09A60 A6 E8                     	LDX byte_RAM_E8
09A62 E8                        	INX
09A63 86 0D                     	STX byte_RAM_D
09A65 20 48 9A                  	JSR SetAreaPageAddr_Bank6
09A68 A6 0B                     	LDX byte_RAM_B
09A6A                           
09A6A                           IncrementAreaXOffset_Exit:
09A6A 60                        	RTS
09A6B                           
09A6B                           
09A6B                           ; Moves one row down and increments the page, if necessary
09A6B                           IncrementAreaYOffset:
09A6B 98                        	TYA
09A6C 18                        	CLC
09A6D 69 10                     	ADC #$10
09A6F A8                        	TAY
09A70 C9 F0                     	CMP #$F0
09A72 90 0A                     	BCC IncrementAreaYOffset_Exit
09A74                           
09A74                           	; increment the area page
09A74 A6 E8                     	LDX byte_RAM_E8
09A76 E8                        	INX
09A77 20 48 9A                  	JSR SetAreaPageAddr_Bank6
09A7A                           
09A7A 98                        	TYA
09A7B 29 0F                     	AND #$0F
09A7D A8                        	TAY
09A7E                           
09A7E                           IncrementAreaYOffset_Exit:
09A7E 60                        	RTS
09A7F                           
09A7F                           IFNDEF DISABLE_DOOR_POINTERS
09A7F                           LevelParser_EatDoorPointer:
09A7F                           	LDY byte_RAM_4
09A7F                           	INY
09A7F                           	LDA (byte_RAM_5), Y
09A7F                           	STA byte_RAM_7
09A7F                           	INY
09A7F                           	LDA (byte_RAM_5), Y
09A7F                           	STA byte_RAM_8
09A7F                           	STY byte_RAM_4
09A7F                           	LDA byte_RAM_E8
09A7F                           	ASL A
09A7F                           	TAY
09A7F                           	LDA byte_RAM_7
09A7F                           	STA AreaPointersByPage, Y
09A7F                           	INY
09A7F                           	LDA byte_RAM_8
09A7F                           	STA AreaPointersByPage, Y
09A7F                           	RTS
09A7F                           ENDIF
09A7F                           
09A7F                           ; ---------------------------------------------------------------------------
09A7F                           unk_BANK6_98DA:
09A7F 28                        	.db $28
09A80 24                        	.db $24
09A81                           ; =============== S U B R O U T I N E =======================================
09A81                           
09A81                           sub_BANK6_98DC:
09A81 4A                        	LSR A
09A82 B0 0B                     	BCS loc_BANK6_98EA
09A84                           
09A84 A9 01                     	LDA #$01
09A86 85 C9                     	STA byte_RAM_C9
09A88 0A                        	ASL A
09A89 85 C8                     	STA byte_RAM_C8
09A8B A9 20                     	LDA #$20
09A8D D0 09                     	BNE loc_BANK6_98F3
09A8F                           
09A8F                           loc_BANK6_98EA:
09A8F A9 00                     	LDA #$00
09A91 85 C9                     	STA byte_RAM_C9
09A93 85 C8                     	STA byte_RAM_C8
09A95 B9 7F 9A                  	LDA unk_BANK6_98DA, Y
09A98                           
09A98                           loc_BANK6_98F3:
09A98 8D 06 05                  	STA byte_RAM_506
09A9B 60                        	RTS
09A9C                           
09A9C                           ; End of function sub_BANK6_98DC
09A9C                           
09A9C                           ; =============== S U B R O U T I N E =======================================
09A9C                           
09A9C                           CreateMushroomObject:
09A9C                           IFDEF PLAYER_STUFF
09A9C 8A                        	TXA
09A9D 48                        	PHA
09A9E 98                            TYA
09A9F AA                            TAX
09AA0                           IFDEF PLAYER_STUFF_LOOP_MUSH
09AA0                           -   LDA EnemyState, X
09AA0                               CMP #EnemyState_Alive
09AA0                               BEQ +
09AA0                           	INX
09AA0                               JMP -
09AA0                           +  
09AA0                           ENDIF
09AA0 86 12                         STX byte_RAM_12
09AA2 A5 07                     	LDA byte_RAM_7
09AA4 29 F0                     	AND #$F0
09AA6 95 33                     	STA ObjectYLo, X
09AA8 A5 07                     	LDA byte_RAM_7
09AAA 0A                        	ASL A
09AAB 0A                        	ASL A
09AAC 0A                        	ASL A
09AAD 0A                        	ASL A
09AAE 95 29                     	STA ObjectXLo, X
09AB0 A9 0A                     	LDA #$0A
09AB2 95 15                     	STA ObjectXHi, X
09AB4 A9 00                         LDA #$00
09AB6 95 1F                     	STA ObjectYHi, X
09AB8 A9 3F                     	LDA #Enemy_Mushroom
09ABA 95 90                     	STA ObjectType, X
09ABC A9 01                     	LDA #$01
09ABE 95 51                     	STA EnemyState, X
09AC0 94 79                     	STY EnemyVariable, X
09AC2 B9 00 76                      LDA PlayerLevelPowerup_1, Y
09AC5 9D 20 76                      STA MushroomEffect, X
09AC8                           ENDIF
09AC8                           IFNDEF PLAYER_STUFF
09AC8                           	TXA
09AC8                           	PHA
09AC8                           	AND #$F0
09AC8                           	STA ObjectYLo
09AC8                           	TXA
09AC8                           	ASL A
09AC8                           	ASL A
09AC8                           	ASL A
09AC8                           	ASL A
09AC8                           	STA ObjectXLo
09AC8                           	LDA #$0A
09AC8                           	STA ObjectXHi
09AC8                           	LDX #$00
09AC8                           	STX byte_RAM_12
09AC8                           	STX ObjectYHi
09AC8                           	LDA #Enemy_Mushroom
09AC8                           	STA ObjectType
09AC8                           	LDA #$01
09AC8                           	STA EnemyState
09AC8                           	STY EnemyVariable
09AC8                           ENDIF
09AC8 A9 00                     	LDA #$00
09ACA 95 86                     	STA EnemyTimer, X
09ACC 95 B1                     	STA EnemyArray_B1, X
09ACE 95 A8                     	STA ObjectBeingCarriedTimer, X
09AD0 95 9F                     	STA ObjectAnimationTimer, X
09AD2 9D 4A 04                  	STA ObjectShakeTimer, X
09AD5 95 5B                     	STA EnemyCollision, X
09AD7 9D 38 04                  	STA EnemyArray_438, X
09ADA 9D 53 04                  	STA EnemyArray_453, X
09ADD 9D 5C 04                  	STA EnemyArray_45C, X
09AE0 95 47                     	STA ObjectYVelocity, X
09AE2 95 3D                     	STA ObjectXVelocity, X
09AE4                           IFDEF PLAYER_STUFF
09AE4 20 F3 EC                      JSR ProcessCustomPowerup    
09AE7                           ENDIF
09AE7                           IFNDEF PLAYER_STUFF
09AE7                           	LDY ObjectType, X
09AE7                           	LDA ObjectAttributeTable, Y
09AE7                           	AND #$7F
09AE7                           	STA ObjectAttributes, X
09AE7                           	LDA EnemyArray_46E_Data, Y
09AE7                           	STA EnemyArray_46E, X
09AE7                           	LDA EnemyArray_489_Data, Y
09AE7                           	STA EnemyArray_489, X
09AE7                           	LDA EnemyArray_492_Data, Y
09AE7                           	STA EnemyArray_492, X
09AE7                           	LDA #$FF
09AE7                           	STA unk_RAM_441, X
09AE7                           ENDIF
09AE7 68                        	PLA
09AE8 AA                        	TAX
09AE9 60                        	RTS
09AEA                           
09AEA FF FF FF FF FF FF FF FF.. .pad $c000, $ff
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; Bank 8 and 9. Entirely level data.
0C000                           ; Some more unused space as usual.
0C000                           .base $8000
08000                           .include "src/prg-8-9.asm"
08000                           ;
08000                           ; Bank 8 & Bank 9
08000                           ; ===============
08000                           ;
08000                           ; What's inside:
08000                           ;
08000                           ;   - Level and enemy data pointer tables
08000                           ;   - Level data
08000                           ;   - Enemy data
08000                           ;
08000                           
08000                           ;
08000                           ; Table to determine what "total" index a given
08000                           ; level + area is. Get the starting area from this
08000                           ; table (based on CurrentLevel) and add the area to it
08000                           ;
08000                           LevelAreaStartIndexes:
08000 00                        	.db $00 ; Level 1-1
08001 0A                        	.db $0A ; Level 1-2
08002 14                        	.db $14 ; Level 1-3
08003 1E                        	.db $1E ; Level 2-1
08004 28                        	.db $28 ; Level 2-2
08005 32                        	.db $32 ; Level 2-3
08006 3C                        	.db $3C ; Level 3-1
08007 46                        	.db $46 ; Level 3-2
08008 50                        	.db $50 ; Level 3-3
08009 5A                        	.db $5A ; Level 4-1
0800A 64                        	.db $64 ; Level 4-2
0800B 6E                        	.db $6E ; Level 4-3
0800C 78                        	.db $78 ; Level 5-1
0800D 82                        	.db $82 ; Level 5-2
0800E 8C                        	.db $8C ; Level 5-3
0800F 96                        	.db $96 ; Level 6-1
08010 A0                        	.db $A0 ; Level 6-2
08011 AA                        	.db $AA ; Level 6-3
08012 B4                        	.db $B4 ; Level 7-1
08013 BE                        	.db $BE ; Level 7-2
08014 C8                        	.db $C8 ; Level 7-3 (unused)
08015                           
08015                           
08015                           ; Pointers to level data
08015                           include "src/levels/level-data-pointers.asm"
08015                           LevelDataPointersLo:
08015                           	; Level 1-1
08015 B9                        	.db <LevelData_1_1_Area0
08016 D9                        	.db <LevelData_1_1_Area1
08017 29                        	.db <LevelData_1_1_Area2
08018 D5                        	.db <LevelData_1_1_Area3
08019 09                        	.db <LevelData_1_1_Area4
0801A 2A                        	.db <LevelData_1_1_Area5
0801B 2A                        	.db <LevelData_1_1_Area5
0801C 2A                        	.db <LevelData_1_1_Area5
0801D 2A                        	.db <LevelData_1_1_Area5
0801E 2A                        	.db <LevelData_1_1_Area5
0801F                           	; Level 1-2
0801F 68                        	.db <LevelData_1_2_Area0
08020 EA                        	.db <LevelData_1_2_Area1
08021 3F                        	.db <LevelData_1_2_Area2
08022 87                        	.db <LevelData_1_2_Area3
08023 AB                        	.db <LevelData_1_2_Area4
08024 CC                        	.db <LevelData_1_3_Area0
08025 CC                        	.db <LevelData_1_3_Area0
08026 CC                        	.db <LevelData_1_3_Area0
08027 CC                        	.db <LevelData_1_3_Area0
08028 CC                        	.db <LevelData_1_3_Area0
08029                           	; Level 1-3
08029 CC                        	.db <LevelData_1_3_Area0
0802A 7E                        	.db <LevelData_1_3_Area1
0802B 96                        	.db <LevelData_1_3_Area2
0802C 1E                        	.db <LevelData_1_3_Area3
0802D 94                        	.db <LevelData_1_3_Area4
0802E 94                        	.db <LevelData_1_3_Area4
0802F 94                        	.db <LevelData_1_3_Area4
08030 94                        	.db <LevelData_1_3_Area4
08031 94                        	.db <LevelData_1_3_Area4
08032 94                        	.db <LevelData_1_3_Area4
08033                           	; Level 2-1
08033 BE                        	.db <LevelData_2_1_Area0
08034 4D                        	.db <LevelData_2_1_Area1
08035 79                        	.db <LevelData_2_1_Area2
08036 79                        	.db <LevelData_2_1_Area2
08037 9E                        	.db <LevelData_2_1_Area4
08038 79                        	.db <LevelData_2_1_Area2
08039 79                        	.db <LevelData_2_1_Area2
0803A 79                        	.db <LevelData_2_1_Area2
0803B 79                        	.db <LevelData_2_1_Area2
0803C 79                        	.db <LevelData_2_1_Area2
0803D                           	; Level 2-2
0803D C7                        	.db <LevelData_2_2_Area0
0803E DF                        	.db <LevelData_2_2_Area1
0803F 7E                        	.db <LevelData_2_2_Area2
08040 C4                        	.db <LevelData_2_2_Area3
08041 10                        	.db <LevelData_2_2_Area4
08042 39                        	.db <LevelData_2_2_Area5
08043 39                        	.db <LevelData_2_2_Area5
08044 39                        	.db <LevelData_2_2_Area5
08045 39                        	.db <LevelData_2_2_Area5
08046 39                        	.db <LevelData_2_2_Area5
08047                           	; Level 2-3
08047 65                        	.db <LevelData_2_3_Area0
08048 77                        	.db <LevelData_2_3_Area1
08049 30                        	.db <LevelData_2_3_Area2
0804A 49                        	.db <LevelData_2_3_Area3
0804B A1                        	.db <LevelData_2_3_Area4
0804C C8                        	.db <LevelData_2_3_Area5
0804D 2D                        	.db <LevelData_2_3_Area6
0804E 59                        	.db <LevelData_2_3_Area7
0804F 59                        	.db <LevelData_2_3_Area7
08050 59                        	.db <LevelData_2_3_Area7
08051                           	; Level 3-1
08051 75                        	.db <LevelData_3_1_Area0
08052 97                        	.db <LevelData_3_1_Area1
08053 EF                        	.db <LevelData_3_1_Area2
08054 0C                        	.db <LevelData_3_1_Area3
08055 83                        	.db <LevelData_3_1_Area4
08056 B7                        	.db <LevelData_3_2_Area0
08057 B7                        	.db <LevelData_3_2_Area0
08058 B7                        	.db <LevelData_3_2_Area0
08059 B7                        	.db <LevelData_3_2_Area0
0805A B7                        	.db <LevelData_3_2_Area0
0805B                           	; Level 3-2
0805B B7                        	.db <LevelData_3_2_Area0
0805C 5D                        	.db <LevelData_3_2_Area1
0805D 07                        	.db <LevelData_3_2_Area2
0805E 2E                        	.db <LevelData_3_3_Area0
0805F 2E                        	.db <LevelData_3_3_Area0
08060 2E                        	.db <LevelData_3_3_Area0
08061 2E                        	.db <LevelData_3_3_Area0
08062 2E                        	.db <LevelData_3_3_Area0
08063 2E                        	.db <LevelData_3_3_Area0
08064 2E                        	.db <LevelData_3_3_Area0
08065                           	; Level 3-3
08065 2E                        	.db <LevelData_3_3_Area0
08066 45                        	.db <LevelData_3_3_Area1
08067 76                        	.db <LevelData_3_3_Area2
08068 C0                        	.db <LevelData_3_3_Area3
08069 91                        	.db <LevelData_3_3_Area4
0806A F1                        	.db <LevelData_3_3_Area5
0806B 52                        	.db <LevelData_3_3_Area6
0806C 66                        	.db <LevelData_3_3_Area7
0806D AA                        	.db <LevelData_3_3_Area8
0806E AA                        	.db <LevelData_3_3_Area8
0806F                           	; Level 4-1
0806F C5                        	.db <LevelData_4_1_Area0
08070 32                        	.db <LevelData_4_1_Area1
08071 B1                        	.db <LevelData_4_2_Area0
08072 B1                        	.db <LevelData_4_2_Area0
08073 B1                        	.db <LevelData_4_2_Area0
08074 B1                        	.db <LevelData_4_2_Area0
08075 B1                        	.db <LevelData_4_2_Area0
08076 B1                        	.db <LevelData_4_2_Area0
08077 B1                        	.db <LevelData_4_2_Area0
08078 B1                        	.db <LevelData_4_2_Area0
08079                           	; Level 4-2
08079 B1                        	.db <LevelData_4_2_Area0
0807A C3                        	.db <LevelData_4_2_Area1
0807B 24                        	.db <LevelData_4_2_Area2
0807C B5                        	.db <LevelData_4_2_Area3
0807D E9                        	.db <LevelData_4_2_Area4
0807E E9                        	.db <LevelData_4_2_Area4
0807F E9                        	.db <LevelData_4_2_Area4
08080 E9                        	.db <LevelData_4_2_Area4
08081 E9                        	.db <LevelData_4_2_Area4
08082 E9                        	.db <LevelData_4_2_Area4
08083                           	; Level 4-3
08083 12                        	.db <LevelData_4_3_Area0
08084 26                        	.db <LevelData_4_3_Area1
08085 9C                        	.db <LevelData_4_3_Area2
08086 1B                        	.db <LevelData_4_3_Area3
08087 71                        	.db <LevelData_4_3_Area4
08088 AA                        	.db <LevelData_4_3_Area5
08089 BE                        	.db <LevelData_4_3_Area6
0808A E3                        	.db <LevelData_4_3_Area7
0808B 1D                        	.db <LevelData_5_1_Area0
0808C 1D                        	.db <LevelData_5_1_Area0
0808D                           	; Level 5-1
0808D 1D                        	.db <LevelData_5_1_Area0
0808E 66                        	.db <LevelData_5_1_Area1
0808F 04                        	.db <LevelData_5_1_Area2
08090 1B                        	.db <LevelData_5_2_Area0
08091 1B                        	.db <LevelData_5_2_Area0
08092 1B                        	.db <LevelData_5_2_Area0
08093 1B                        	.db <LevelData_5_2_Area0
08094 1B                        	.db <LevelData_5_2_Area0
08095 1B                        	.db <LevelData_5_2_Area0
08096 1B                        	.db <LevelData_5_2_Area0
08097                           	; Level 5-2
08097 1B                        	.db <LevelData_5_2_Area0
08098 2C                        	.db <LevelData_5_2_Area1
08099 D3                        	.db <LevelData_5_2_Area2
0809A 1C                        	.db <LevelData_5_2_Area3
0809B 8B                        	.db <LevelData_5_2_Area4
0809C C1                        	.db <LevelData_5_2_Area5
0809D EC                        	.db <LevelData_5_3_Area0
0809E EC                        	.db <LevelData_5_3_Area0
0809F EC                        	.db <LevelData_5_3_Area0
080A0 EC                        	.db <LevelData_5_3_Area0
080A1                           	; Level 5-3
080A1 EC                        	.db <LevelData_5_3_Area0
080A2 FD                        	.db <LevelData_5_3_Area1
080A3 A7                        	.db <LevelData_5_3_Area2
080A4 F5                        	.db <LevelData_5_3_Area3
080A5 9A                        	.db <LevelData_5_3_Area4
080A6 FF                        	.db <LevelData_5_3_Area5
080A7 FF                        	.db <LevelData_5_3_Area5
080A8 FF                        	.db <LevelData_5_3_Area5
080A9 FF                        	.db <LevelData_5_3_Area5
080AA FF                        	.db <LevelData_5_3_Area5
080AB                           	; Level 6-1
080AB 26                        	.db <LevelData_6_1_Area0
080AC C7                        	.db <LevelData_6_1_Area1
080AD 2E                        	.db <LevelData_6_1_Area2
080AE 52                        	.db <LevelData_6_1_Area3
080AF 7B                        	.db <LevelData_6_1_Area4
080B0 9A                        	.db <LevelData_6_1_Area5
080B1 D2                        	.db <LevelData_6_1_Area6
080B2 D2                        	.db <LevelData_6_1_Area6
080B3 D2                        	.db <LevelData_6_1_Area6
080B4 D2                        	.db <LevelData_6_1_Area6
080B5                           	; Level 6-2
080B5 F6                        	.db <LevelData_6_2_Area0
080B6 09                        	.db <LevelData_6_2_Area1
080B7 4A                        	.db <LevelData_6_2_Area2
080B8 4A                        	.db <LevelData_6_2_Area2
080B9 4A                        	.db <LevelData_6_2_Area2
080BA 4A                        	.db <LevelData_6_2_Area2
080BB 4A                        	.db <LevelData_6_2_Area2
080BC 4A                        	.db <LevelData_6_2_Area2
080BD 4A                        	.db <LevelData_6_2_Area2
080BE 4A                        	.db <LevelData_6_2_Area2
080BF                           	; Level 6-3
080BF 76                        	.db <LevelData_6_3_Area0
080C0 84                        	.db <LevelData_6_3_Area1
080C1 FA                        	.db <LevelData_6_3_Area2
080C2 B7                        	.db <LevelData_6_3_Area3
080C3 91                        	.db <LevelData_6_3_Area4
080C4 DA                        	.db <LevelData_6_3_Area5
080C5 F7                        	.db <LevelData_6_3_Area6
080C6 F7                        	.db <LevelData_6_3_Area6
080C7 F7                        	.db <LevelData_6_3_Area6
080C8 F7                        	.db <LevelData_6_3_Area6
080C9                           	; Level 7-1
080C9 26                        	.db <LevelData_7_1_Area0
080CA 3C                        	.db <LevelData_7_1_Area1
080CB B4                        	.db <LevelData_7_1_Area2
080CC FD                        	.db <LevelData_7_1_Area3
080CD 65                        	.db <LevelData_7_1_Area4
080CE 87                        	.db <LevelData_7_1_Area5
080CF 87                        	.db <LevelData_7_1_Area5
080D0 87                        	.db <LevelData_7_1_Area5
080D1 87                        	.db <LevelData_7_1_Area5
080D2 87                        	.db <LevelData_7_1_Area5
080D3                           	; Level 7-2
080D3 A9                        	.db <LevelData_7_2_Area0
080D4 E3                        	.db <LevelData_7_2_Area1
080D5 45                        	.db <LevelData_7_2_Area2
080D6 FA                        	.db <LevelData_7_2_Area3
080D7 32                        	.db <LevelData_7_2_Area4
080D8 A9                        	.db <LevelData_7_2_Area5
080D9 E4                        	.db <LevelData_7_2_Area6
080DA 6D                        	.db <LevelData_7_2_Area7
080DB B6                        	.db <LevelData_7_2_Area8
080DC 3B                        	.db <LevelData_7_2_Area9
080DD                           	; Level 7-3
080DD 8A                        	.db <LevelData_7_3_Area0
080DE 8A                        	.db <LevelData_7_3_Area0
080DF 8A                        	.db <LevelData_7_3_Area0
080E0 8A                        	.db <LevelData_7_3_Area0
080E1 8A                        	.db <LevelData_7_3_Area0
080E2 8A                        	.db <LevelData_7_3_Area0
080E3 8A                        	.db <LevelData_7_3_Area0
080E4 8A                        	.db <LevelData_7_3_Area0
080E5 8A                        	.db <LevelData_7_3_Area0
080E6 8A                        	.db <LevelData_7_3_Area0
080E7                           
080E7                           LevelDataPointersHi:
080E7                           	; Level 1-1
080E7 81                        	.db >LevelData_1_1_Area0
080E8 81                        	.db >LevelData_1_1_Area1
080E9 82                        	.db >LevelData_1_1_Area2
080EA 82                        	.db >LevelData_1_1_Area3
080EB 83                        	.db >LevelData_1_1_Area4
080EC 83                        	.db >LevelData_1_1_Area5
080ED 83                        	.db >LevelData_1_1_Area5
080EE 83                        	.db >LevelData_1_1_Area5
080EF 83                        	.db >LevelData_1_1_Area5
080F0 83                        	.db >LevelData_1_1_Area5
080F1                           	; Level 1-2
080F1 83                        	.db >LevelData_1_2_Area0
080F2 83                        	.db >LevelData_1_2_Area1
080F3 84                        	.db >LevelData_1_2_Area2
080F4 84                        	.db >LevelData_1_2_Area3
080F5 84                        	.db >LevelData_1_2_Area4
080F6 84                        	.db >LevelData_1_3_Area0
080F7 84                        	.db >LevelData_1_3_Area0
080F8 84                        	.db >LevelData_1_3_Area0
080F9 84                        	.db >LevelData_1_3_Area0
080FA 84                        	.db >LevelData_1_3_Area0
080FB                           	; Level 1-3
080FB 84                        	.db >LevelData_1_3_Area0
080FC 85                        	.db >LevelData_1_3_Area1
080FD 85                        	.db >LevelData_1_3_Area2
080FE 86                        	.db >LevelData_1_3_Area3
080FF 86                        	.db >LevelData_1_3_Area4
08100 86                        	.db >LevelData_1_3_Area4
08101 86                        	.db >LevelData_1_3_Area4
08102 86                        	.db >LevelData_1_3_Area4
08103 86                        	.db >LevelData_1_3_Area4
08104 86                        	.db >LevelData_1_3_Area4
08105                           	; Level 2-1
08105 86                        	.db >LevelData_2_1_Area0
08106 87                        	.db >LevelData_2_1_Area1
08107 87                        	.db >LevelData_2_1_Area2
08108 87                        	.db >LevelData_2_1_Area2
08109 87                        	.db >LevelData_2_1_Area4
0810A 87                        	.db >LevelData_2_1_Area2
0810B 87                        	.db >LevelData_2_1_Area2
0810C 87                        	.db >LevelData_2_1_Area2
0810D 87                        	.db >LevelData_2_1_Area2
0810E 87                        	.db >LevelData_2_1_Area2
0810F                           	; Level 2-2
0810F 87                        	.db >LevelData_2_2_Area0
08110 87                        	.db >LevelData_2_2_Area1
08111 88                        	.db >LevelData_2_2_Area2
08112 88                        	.db >LevelData_2_2_Area3
08113 89                        	.db >LevelData_2_2_Area4
08114 89                        	.db >LevelData_2_2_Area5
08115 89                        	.db >LevelData_2_2_Area5
08116 89                        	.db >LevelData_2_2_Area5
08117 89                        	.db >LevelData_2_2_Area5
08118 89                        	.db >LevelData_2_2_Area5
08119                           	; Level 2-3
08119 89                        	.db >LevelData_2_3_Area0
0811A 89                        	.db >LevelData_2_3_Area1
0811B 8A                        	.db >LevelData_2_3_Area2
0811C 8A                        	.db >LevelData_2_3_Area3
0811D 8A                        	.db >LevelData_2_3_Area4
0811E 8A                        	.db >LevelData_2_3_Area5
0811F 8B                        	.db >LevelData_2_3_Area6
08120 8B                        	.db >LevelData_2_3_Area7
08121 8B                        	.db >LevelData_2_3_Area7
08122 8B                        	.db >LevelData_2_3_Area7
08123                           	; Level 3-1
08123 8B                        	.db >LevelData_3_1_Area0
08124 8B                        	.db >LevelData_3_1_Area1
08125 8B                        	.db >LevelData_3_1_Area2
08126 8C                        	.db >LevelData_3_1_Area3
08127 8C                        	.db >LevelData_3_1_Area4
08128 8C                        	.db >LevelData_3_2_Area0
08129 8C                        	.db >LevelData_3_2_Area0
0812A 8C                        	.db >LevelData_3_2_Area0
0812B 8C                        	.db >LevelData_3_2_Area0
0812C 8C                        	.db >LevelData_3_2_Area0
0812D                           	; Level 3-2
0812D 8C                        	.db >LevelData_3_2_Area0
0812E 8D                        	.db >LevelData_3_2_Area1
0812F 8E                        	.db >LevelData_3_2_Area2
08130 8E                        	.db >LevelData_3_3_Area0
08131 8E                        	.db >LevelData_3_3_Area0
08132 8E                        	.db >LevelData_3_3_Area0
08133 8E                        	.db >LevelData_3_3_Area0
08134 8E                        	.db >LevelData_3_3_Area0
08135 8E                        	.db >LevelData_3_3_Area0
08136 8E                        	.db >LevelData_3_3_Area0
08137                           	; Level 3-3
08137 8E                        	.db >LevelData_3_3_Area0
08138 8E                        	.db >LevelData_3_3_Area1
08139 8E                        	.db >LevelData_3_3_Area2
0813A 8E                        	.db >LevelData_3_3_Area3
0813B 8F                        	.db >LevelData_3_3_Area4
0813C 8F                        	.db >LevelData_3_3_Area5
0813D 90                        	.db >LevelData_3_3_Area6
0813E 90                        	.db >LevelData_3_3_Area7
0813F 90                        	.db >LevelData_3_3_Area8
08140 90                        	.db >LevelData_3_3_Area8
08141                           	; Level 4-1
08141 90                        	.db >LevelData_4_1_Area0
08142 91                        	.db >LevelData_4_1_Area1
08143 91                        	.db >LevelData_4_2_Area0
08144 91                        	.db >LevelData_4_2_Area0
08145 91                        	.db >LevelData_4_2_Area0
08146 91                        	.db >LevelData_4_2_Area0
08147 91                        	.db >LevelData_4_2_Area0
08148 91                        	.db >LevelData_4_2_Area0
08149 91                        	.db >LevelData_4_2_Area0
0814A 91                        	.db >LevelData_4_2_Area0
0814B                           	; Level 4-2
0814B 91                        	.db >LevelData_4_2_Area0
0814C 91                        	.db >LevelData_4_2_Area1
0814D 92                        	.db >LevelData_4_2_Area2
0814E 92                        	.db >LevelData_4_2_Area3
0814F 92                        	.db >LevelData_4_2_Area4
08150 92                        	.db >LevelData_4_2_Area4
08151 92                        	.db >LevelData_4_2_Area4
08152 92                        	.db >LevelData_4_2_Area4
08153 92                        	.db >LevelData_4_2_Area4
08154 92                        	.db >LevelData_4_2_Area4
08155                           	; Level 4-3
08155 93                        	.db >LevelData_4_3_Area0
08156 93                        	.db >LevelData_4_3_Area1
08157 93                        	.db >LevelData_4_3_Area2
08158 94                        	.db >LevelData_4_3_Area3
08159 94                        	.db >LevelData_4_3_Area4
0815A 94                        	.db >LevelData_4_3_Area5
0815B 94                        	.db >LevelData_4_3_Area6
0815C 94                        	.db >LevelData_4_3_Area7
0815D 95                        	.db >LevelData_5_1_Area0
0815E 95                        	.db >LevelData_5_1_Area0
0815F                           	; Level 5-1
0815F 95                        	.db >LevelData_5_1_Area0
08160 95                        	.db >LevelData_5_1_Area1
08161 96                        	.db >LevelData_5_1_Area2
08162 96                        	.db >LevelData_5_2_Area0
08163 96                        	.db >LevelData_5_2_Area0
08164 96                        	.db >LevelData_5_2_Area0
08165 96                        	.db >LevelData_5_2_Area0
08166 96                        	.db >LevelData_5_2_Area0
08167 96                        	.db >LevelData_5_2_Area0
08168 96                        	.db >LevelData_5_2_Area0
08169                           	; Level 5-2
08169 96                        	.db >LevelData_5_2_Area0
0816A 96                        	.db >LevelData_5_2_Area1
0816B 96                        	.db >LevelData_5_2_Area2
0816C 97                        	.db >LevelData_5_2_Area3
0816D 97                        	.db >LevelData_5_2_Area4
0816E 97                        	.db >LevelData_5_2_Area5
0816F 97                        	.db >LevelData_5_3_Area0
08170 97                        	.db >LevelData_5_3_Area0
08171 97                        	.db >LevelData_5_3_Area0
08172 97                        	.db >LevelData_5_3_Area0
08173                           	; Level 5-3
08173 97                        	.db >LevelData_5_3_Area0
08174 97                        	.db >LevelData_5_3_Area1
08175 98                        	.db >LevelData_5_3_Area2
08176 98                        	.db >LevelData_5_3_Area3
08177 99                        	.db >LevelData_5_3_Area4
08178 99                        	.db >LevelData_5_3_Area5
08179 99                        	.db >LevelData_5_3_Area5
0817A 99                        	.db >LevelData_5_3_Area5
0817B 99                        	.db >LevelData_5_3_Area5
0817C 99                        	.db >LevelData_5_3_Area5
0817D                           	; Level 6-1
0817D 9A                        	.db >LevelData_6_1_Area0
0817E 9A                        	.db >LevelData_6_1_Area1
0817F 9B                        	.db >LevelData_6_1_Area2
08180 9B                        	.db >LevelData_6_1_Area3
08181 9B                        	.db >LevelData_6_1_Area4
08182 9B                        	.db >LevelData_6_1_Area5
08183 9B                        	.db >LevelData_6_1_Area6
08184 9B                        	.db >LevelData_6_1_Area6
08185 9B                        	.db >LevelData_6_1_Area6
08186 9B                        	.db >LevelData_6_1_Area6
08187                           	; Level 6-2
08187 9B                        	.db >LevelData_6_2_Area0
08188 9C                        	.db >LevelData_6_2_Area1
08189 9C                        	.db >LevelData_6_2_Area2
0818A 9C                        	.db >LevelData_6_2_Area2
0818B 9C                        	.db >LevelData_6_2_Area2
0818C 9C                        	.db >LevelData_6_2_Area2
0818D 9C                        	.db >LevelData_6_2_Area2
0818E 9C                        	.db >LevelData_6_2_Area2
0818F 9C                        	.db >LevelData_6_2_Area2
08190 9C                        	.db >LevelData_6_2_Area2
08191                           	; Level 6-3
08191 9C                        	.db >LevelData_6_3_Area0
08192 9C                        	.db >LevelData_6_3_Area1
08193 9C                        	.db >LevelData_6_3_Area2
08194 9D                        	.db >LevelData_6_3_Area3
08195 9E                        	.db >LevelData_6_3_Area4
08196 9E                        	.db >LevelData_6_3_Area5
08197 9E                        	.db >LevelData_6_3_Area6
08198 9E                        	.db >LevelData_6_3_Area6
08199 9E                        	.db >LevelData_6_3_Area6
0819A 9E                        	.db >LevelData_6_3_Area6
0819B                           	; Level 7-1
0819B 9F                        	.db >LevelData_7_1_Area0
0819C 9F                        	.db >LevelData_7_1_Area1
0819D 9F                        	.db >LevelData_7_1_Area2
0819E 9F                        	.db >LevelData_7_1_Area3
0819F A0                        	.db >LevelData_7_1_Area4
081A0 A0                        	.db >LevelData_7_1_Area5
081A1 A0                        	.db >LevelData_7_1_Area5
081A2 A0                        	.db >LevelData_7_1_Area5
081A3 A0                        	.db >LevelData_7_1_Area5
081A4 A0                        	.db >LevelData_7_1_Area5
081A5                           	; Level 7-2
081A5 A0                        	.db >LevelData_7_2_Area0
081A6 A0                        	.db >LevelData_7_2_Area1
081A7 A1                        	.db >LevelData_7_2_Area2
081A8 A1                        	.db >LevelData_7_2_Area3
081A9 A2                        	.db >LevelData_7_2_Area4
081AA A2                        	.db >LevelData_7_2_Area5
081AB A2                        	.db >LevelData_7_2_Area6
081AC A3                        	.db >LevelData_7_2_Area7
081AD A3                        	.db >LevelData_7_2_Area8
081AE A4                        	.db >LevelData_7_2_Area9
081AF                           	; Level 7-3
081AF A4                        	.db >LevelData_7_3_Area0
081B0 A4                        	.db >LevelData_7_3_Area0
081B1 A4                        	.db >LevelData_7_3_Area0
081B2 A4                        	.db >LevelData_7_3_Area0
081B3 A4                        	.db >LevelData_7_3_Area0
081B4 A4                        	.db >LevelData_7_3_Area0
081B5 A4                        	.db >LevelData_7_3_Area0
081B6 A4                        	.db >LevelData_7_3_Area0
081B7 A4                        	.db >LevelData_7_3_Area0
081B8 A4                        	.db >LevelData_7_3_Area0
081B9                           
081B9                           
081B9                           ; Include level data;
081B9                           ; see src/levels/level-data.asm for level format details
081B9                           include "src/levels/level-data.asm"
081B9                           ;
081B9                           ; Level Data
081B9                           ; ==========
081B9                           ;
081B9                           ; Levels are broken down by area. The first four bytes are a level header,
081B9                           ; specifying things like palettes, music, size, scrolling, and ground type.
081B9                           ; The rest is level objects. Levels are ended by the $FF special object.
081B9                           ;
081B9                           ; Each "page" of level data is 16x15 tiles.
081B9                           ;
081B9                           ; Level header (4 bytes):
081B9                           ;
081B9                           ;   Byte 1: HxBBBxSS
081B9                           ;   H: horizontal level flag (0 = vertical, 1 = horizontal)
081B9                           ;   B: background palette (0-7)
081B9                           ;   S: sprite palette (0-3)
081B9                           ;
081B9                           ;   Byte 2: xxxGGGGG
081B9                           ;   G: ground setting (0-31)
081B9                           ;
081B9                           ;   Byte 3: PPPPOOOO
081B9                           ;   P: number of pages minus 1 (0 = 1 page, 1 = 2 pages, etc.)
081B9                           ;   O: object type (xxOO for 3X-9X, OOxx for AX-FX)
081B9                           ;
081B9                           ;   Byte 4: xxTTTxMM
081B9                           ;   T: ground type (0-7)
081B9                           ;   M: music (0 = overworld, 1 = underground, 2 = boss, 3 = Wart)
081B9                           ;
081B9                           ; Regular object (2 bytes):
081B9                           ;   $YX - position
081B9                           ;   $TT - type
081B9                           ;
081B9                           ; Special objects (1-3 bytes):
081B9                           ;   $F0 - ground setting; byte 1: oooGGGGG, where o is offset and G is ground setting
081B9                           ;   $F1 - ground setting; byte 1: oooGGGGG, where o+8 is offset and G is ground setting
081B9                           ;   $F2 - skip forward one page; no parameters
081B9                           ;   $F3 - skip forward two pages; no parameters
081B9                           ;   $F4 - new object layer; next object will be positioned relative to (0, 0) of the first page; no parameters
081B9                           ;   $F5 - area pointer; byte 1: world/level offset, byte 2: $AP, where A is the area and P is the page offset within the area
081B9                           ;   $F6 - ground type; byte 1: ground type
081B9                           ;   $F7-$FE - seemingly unused
081B9                           ;   $FF - end of the data for the current level; no parameters
081B9                           ;
081B9                           ; Door pointer (2 bytes):
081B9                           ;   In worlds 1-5, the object immediately following a door acts as an area pointer
081B9                           ;
081B9                           
081B9                           ; -------------------------------
081B9                           ; World 1
081B9                           
081B9                           ; World 1-1
081B9                           include "src/levels/1/1-1/1-1-area0.asm"
081B9                           ; Level 1-1, Area 0
081B9                           
081B9                           LevelData_1_1_Area0:
081B9                           	; Level Header
081B9                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
081B9                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
081B9                           	levelHeader 3, LevelDirection_Vertical, 1, 1, LevelMusic_Overworld, 0, 0, $13, $0
081B9 09                        	.db LevelDirection_Vertical << 7 | 1 << 3 | 1
081BA F3                        	.db %11100000 | $13
081BB 30                        	.db 3 << 4 | 0 << 2 | 0
081BC                           	IFNDEF LEVEL_ENGINE_UPGRADES
081BC 00                        		.db $0 << 3 | LevelMusic_Overworld
081BD                           	ENDIF
081BD                           	IFDEF LEVEL_ENGINE_UPGRADES
081BD                           		.db $0 << 4 | LevelMusic_Overworld
081BD                           	ENDIF
081BD                           
081BD B7 0A                     	.db $B7, $0A
081BF                           IFNDEF DISABLE_DOOR_POINTERS
081BF                           	.db $00, $00
081BF                           ENDIF
081BF 56 10                     	.db $56, $10
081C1 1A 10                     	.db $1A, $10
081C3 D6 C2                     	.db $D6, $C2
081C5 29 10                     	.db $29, $10
081C7 75 C4                     	.db $75, $C4
081C9 5A 21                     	.db $5A, $21
081CB 12 C9                     	.db $12, $C9
081CD 75 C7                     	.db $75, $C7
081CF 1E C1                     	.db $1E, $C1
081D1 3E 0A                     	.db $3E, $0A
081D3                           IFNDEF DISABLE_DOOR_POINTERS
081D3                           	.db $00, $20
081D3                           ENDIF
081D3                           IFDEF DISABLE_DOOR_POINTERS
081D3 F5 00 20                  	.db $F5, $00, $20
081D6                           ENDIF
081D6 20 CF                     	.db $20, $CF
081D8 FF                        	.db $FF
081D9                           include "src/levels/1/1-1/1-1-area1.asm"
081D9                           ; Level 1-1, Area 1
081D9                           
081D9                           LevelData_1_1_Area1:
081D9                           	; Level Header
081D9                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
081D9                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
081D9                           	levelHeader 3, LevelDirection_Vertical, 0, 0, LevelMusic_Overworld, 0, 0, $13, $0
081D9 00                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 0
081DA F3                        	.db %11100000 | $13
081DB 30                        	.db 3 << 4 | 0 << 2 | 0
081DC                           	IFNDEF LEVEL_ENGINE_UPGRADES
081DC 00                        		.db $0 << 3 | LevelMusic_Overworld
081DD                           	ENDIF
081DD                           	IFDEF LEVEL_ENGINE_UPGRADES
081DD                           		.db $0 << 4 | LevelMusic_Overworld
081DD                           	ENDIF
081DD                           
081DD F5 00 50                  	.db $F5, $00, $50
081E0 34 E1                     	.db $34, $E1
081E2 19 E2                     	.db $19, $E2
081E4 B5 12                     	.db $B5, $12
081E6 0A 12                     	.db $0A, $12
081E8 17 12                     	.db $17, $12
081EA 16 E5                     	.db $16, $E5
081EC 32 E1                     	.db $32, $E1
081EE 26 E3                     	.db $26, $E3
081F0 57 E5                     	.db $57, $E5
081F2 38 C2                     	.db $38, $C2
081F4 27 22                     	.db $27, $22
081F6 0C E2                     	.db $0C, $E2
081F8 17 C1                     	.db $17, $C1
081FA 11 E2                     	.db $11, $E2
081FC 16 22                     	.db $16, $22
081FE 16 C3                     	.db $16, $C3
08200 2B 21                     	.db $2B, $21
08202 18 C4                     	.db $18, $C4
08204 37 C2                     	.db $37, $C2
08206 36 C7                     	.db $36, $C7
08208 12 E2                     	.db $12, $E2
0820A 35 C8                     	.db $35, $C8
0820C 3B C3                     	.db $3B, $C3
0820E 24 22                     	.db $24, $22
08210 12 0C                     	.db $12, $0C
08212 F5 00 29                  	.db $F5, $00, $29
08215 04 C4                     	.db $04, $C4
08217 30 E1                     	.db $30, $E1
08219 02 03                     	.db $02, $03
0821B 03 EC                     	.db $03, $EC
0821D F4                        	.db $F4
0821E 07 0D                     	.db $07, $0D
08220 45 0D                     	.db $45, $0D
08222 1A 0D                     	.db $1A, $0D
08224 26 E3                     	.db $26, $E3
08226 BA 0C                     	.db $BA, $0C
08228 FF                        	.db $FF
08229                           include "src/levels/1/1-1/1-1-area2.asm"
08229                           ; Level 1-1, Area 2
08229                           
08229                           LevelData_1_1_Area2:
08229                           	; Level Header
08229                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08229                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08229                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 2, $00, $0
08229 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
0822A E0                        	.db %11100000 | $00
0822B 92                        	.db 9 << 4 | 0 << 2 | 2
0822C                           	IFNDEF LEVEL_ENGINE_UPGRADES
0822C 00                        		.db $0 << 3 | LevelMusic_Overworld
0822D                           	ENDIF
0822D                           	IFDEF LEVEL_ENGINE_UPGRADES
0822D                           		.db $0 << 4 | LevelMusic_Overworld
0822D                           	ENDIF
0822D                           
0822D 79 16                     	.db $79, $16
0822F 10 C2                     	.db $10, $C2
08231 07 16                     	.db $07, $16
08233 31 0A                     	.db $31, $0A
08235                           IFNDEF DISABLE_DOOR_POINTERS
08235                           	.db $00, $03
08235                           ENDIF
08235                           IFDEF DISABLE_DOOR_POINTERS
08235 F5 00 03                  	.db $F5, $00, $03
08238                           ENDIF
08238 15 21                     	.db $15, $21
0823A 08 22                     	.db $08, $22
0823C 0F 22                     	.db $0F, $22
0823E 8A 2B                     	.db $8A, $2B
08240 0B 52                     	.db $0B, $52
08242 0E 26                     	.db $0E, $26
08244 10 10                     	.db $10, $10
08246 0A C5                     	.db $0A, $C5
08248 63 21                     	.db $63, $21
0824A 60 0C                     	.db $60, $0C
0824C 44 29                     	.db $44, $29
0824E 3E 0F                     	.db $3E, $0F
08250 14 0F                     	.db $14, $0F
08252 09 01                     	.db $09, $01
08254 19 0F                     	.db $19, $0F
08256 78 51                     	.db $78, $51
08258 17 DC                     	.db $17, $DC
0825A 15 C2                     	.db $15, $C2
0825C 14 22                     	.db $14, $22
0825E 10 29                     	.db $10, $29
08260 03 C2                     	.db $03, $C2
08262 18 FA                     	.db $18, $FA
08264 15 C3                     	.db $15, $C3
08266 21 22                     	.db $21, $22
08268 F0 C8                     	.db $F0, $C8
0826A 5A 10                     	.db $5A, $10
0826C 1E 10                     	.db $1E, $10
0826E 33 C2                     	.db $33, $C2
08270 16 F9                     	.db $16, $F9
08272 B8 27                     	.db $B8, $27
08274 0A 01                     	.db $0A, $01
08276 17 C3                     	.db $17, $C3
08278 11 22                     	.db $11, $22
0827A 0F 29                     	.db $0F, $29
0827C 10 C2                     	.db $10, $C2
0827E 17 C5                     	.db $17, $C5
08280 33 22                     	.db $33, $22
08282 07 C6                     	.db $07, $C6
08284 11 C3                     	.db $11, $C3
08286 1F 25                     	.db $1F, $25
08288 F0 E0                     	.db $F0, $E0
0828A 8D 21                     	.db $8D, $21
0828C 0F 27                     	.db $0F, $27
0828E 43 C1                     	.db $43, $C1
08290 06 29                     	.db $06, $29
08292 0A 29                     	.db $0A, $29
08294 31 24                     	.db $31, $24
08296 06 21                     	.db $06, $21
08298 0A 51                     	.db $0A, $51
0829A 51 CF                     	.db $51, $CF
0829C 06 F3                     	.db $06, $F3
0829E 30 22                     	.db $30, $22
082A0 75 D5                     	.db $75, $D5
082A2 51 CB                     	.db $51, $CB
082A4 28 0B                     	.db $28, $0B
082A6                           IFNDEF DISABLE_DOOR_POINTERS
082A6                           	.db $00, $32
082A6                           ENDIF
082A6                           IFDEF DISABLE_DOOR_POINTERS
082A6 F5 00 32                  	.db $F5, $00, $32
082A9                           ENDIF
082A9 1E 26                     	.db $1E, $26
082AB 1A CD                     	.db $1A, $CD
082AD 9F C0                     	.db $9F, $C0
082AF 50 21                     	.db $50, $21
082B1 01 21                     	.db $01, $21
082B3 03 2D                     	.db $03, $2D
082B5 08 54                     	.db $08, $54
082B7 0D 12                     	.db $0D, $12
082B9 F5 00 13                  	.db $F5, $00, $13
082BC 18 C6                     	.db $18, $C6
082BE F4                        	.db $F4
082BF F3                        	.db $F3
082C0 F3                        	.db $F3
082C1 DF C6                     	.db $DF, $C6
082C3 F3                        	.db $F3
082C4 6D C8                     	.db $6D, $C8
082C6 F2                        	.db $F2
082C7 6A CF                     	.db $6A, $CF
082C9 5E 0B                     	.db $5E, $0B
082CB                           IFNDEF DISABLE_DOOR_POINTERS
082CB                           	.db $00, $41
082CB                           ENDIF
082CB                           IFDEF DISABLE_DOOR_POINTERS
082CB F5 00 41                  	.db $F5, $00, $41
082CE                           ENDIF
082CE F4                        	.db $F4
082CF F3                        	.db $F3
082D0 F3                        	.db $F3
082D1 F3                        	.db $F3
082D2 2E 16                     	.db $2E, $16
082D4 FF                        	.db $FF
082D5                           include "src/levels/1/1-1/1-1-area3.asm"
082D5                           ; Level 1-1, Area 3
082D5                           
082D5                           LevelData_1_1_Area3:
082D5                           	; Level Header
082D5                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
082D5                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
082D5                           	levelHeader 2, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 2, $0a, $2
082D5 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
082D6 EA                        	.db %11100000 | $0a
082D7 22                        	.db 2 << 4 | 0 << 2 | 2
082D8                           	IFNDEF LEVEL_ENGINE_UPGRADES
082D8 11                        		.db $2 << 3 | LevelMusic_Underground
082D9                           	ENDIF
082D9                           	IFDEF LEVEL_ENGINE_UPGRADES
082D9                           		.db $2 << 4 | LevelMusic_Underground
082D9                           	ENDIF
082D9                           
082D9 47 A8                     	.db $47, $A8
082DB 19 25                     	.db $19, $25
082DD 0B 25                     	.db $0B, $25
082DF 16 83                     	.db $16, $83
082E1 24 0A                     	.db $24, $0A
082E3                           IFNDEF DISABLE_DOOR_POINTERS
082E3                           	.db $00, $54
082E3                           ENDIF
082E3                           IFDEF DISABLE_DOOR_POINTERS
082E3 F5 00 54                  	.db $F5, $00, $54
082E6                           ENDIF
082E6 13 25                     	.db $13, $25
082E8 F0 71                     	.db $F0, $71
082EA F0 FC                     	.db $F0, $FC
082EC F0 0E                     	.db $F0, $0E
082EE F1 8F                     	.db $F1, $8F
082F0 F1 B1                     	.db $F1, $B1
082F2 F1 F4                     	.db $F1, $F4
082F4 64 F3                     	.db $64, $F3
082F6 98 0C                     	.db $98, $0C
082F8 F5 00 40                  	.db $F5, $00, $40
082FB 48 03                     	.db $48, $03
082FD 18 03                     	.db $18, $03
082FF C7 13                     	.db $C7, $13
08301                           IFNDEF DISABLE_DOOR_POINTERS
08301                           	.db $00, $28
08301                           ENDIF
08301                           IFDEF DISABLE_DOOR_POINTERS
08301 F5 00 28                  	.db $F5, $00, $28
08304                           ENDIF
08304 F0 B2                     	.db $F0, $B2
08306 F1 4A                     	.db $F1, $4A
08308 FF                        	.db $FF
08309                           include "src/levels/1/1-1/1-1-area4.asm"
08309                           ; Level 1-1, Area 4
08309                           
08309                           LevelData_1_1_Area4:
08309                           	; Level Header
08309                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08309                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08309                           	levelHeader 2, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 2, $0a, $2
08309 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
0830A EA                        	.db %11100000 | $0a
0830B 22                        	.db 2 << 4 | 0 << 2 | 2
0830C                           	IFNDEF LEVEL_ENGINE_UPGRADES
0830C 11                        		.db $2 << 3 | LevelMusic_Underground
0830D                           	ENDIF
0830D                           	IFDEF LEVEL_ENGINE_UPGRADES
0830D                           		.db $2 << 4 | LevelMusic_Underground
0830D                           	ENDIF
0830D                           
0830D 03 F3                     	.db $03, $F3
0830F 97 12                     	.db $97, $12
08311 F5 00 31                  	.db $F5, $00, $31
08314 34 80                     	.db $34, $80
08316 05 80                     	.db $05, $80
08318 0E 21                     	.db $0E, $21
0831A 0F 21                     	.db $0F, $21
0831C F0 EC                     	.db $F0, $EC
0831E F1 0F                     	.db $F1, $0F
08320 F1 50                     	.db $F1, $50
08322 E1 13                     	.db $E1, $13
08324                           IFNDEF DISABLE_DOOR_POINTERS
08324                           	.db $00, $27
08324                           ENDIF
08324                           IFDEF DISABLE_DOOR_POINTERS
08324 F5 00 27                  	.db $F5, $00, $27
08327                           ENDIF
08327 F0 8A                     	.db $F0, $8A
08329 FF                        	.db $FF
0832A                           include "src/levels/1/1-1/1-1-area5.asm"
0832A                           ; Level 1-1, Area 5
0832A                           
0832A                           LevelData_1_1_Area5:
0832A                           	; Level Header
0832A                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0832A                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0832A                           	levelHeader 4, LevelDirection_Horizontal, 0, 0, LevelMusic_Boss, 0, 0, $08, $2
0832A 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
0832B E8                        	.db %11100000 | $08
0832C 40                        	.db 4 << 4 | 0 << 2 | 0
0832D                           	IFNDEF LEVEL_ENGINE_UPGRADES
0832D 12                        		.db $2 << 3 | LevelMusic_Boss
0832E                           	ENDIF
0832E                           	IFDEF LEVEL_ENGINE_UPGRADES
0832E                           		.db $2 << 4 | LevelMusic_Boss
0832E                           	ENDIF
0832E                           
0832E 7C 10                     	.db $7C, $10
08330 18 0C                     	.db $18, $0C
08332 F5 00 10                  	.db $F5, $00, $10
08335 12 10                     	.db $12, $10
08337 15 11                     	.db $15, $11
08339 30 E7                     	.db $30, $E7
0833B 08 03                     	.db $08, $03
0833D 09 E6                     	.db $09, $E6
0833F 9C 10                     	.db $9C, $10
08341 1F 11                     	.db $1F, $11
08343 50 E7                     	.db $50, $E7
08345 0A 91                     	.db $0A, $91
08347 F1 60                     	.db $F1, $60
08349 7E 10                     	.db $7E, $10
0834B 43 48                     	.db $43, $48
0834D F5 01 00                  	.db $F5, $01, $00
08350 F0 4C                     	.db $F0, $4C
08352 F1 EB                     	.db $F1, $EB
08354 F2                        	.db $F2
08355 F0 2A                     	.db $F0, $2A
08357 F2                        	.db $F2
08358 24 83                     	.db $24, $83
0835A 25 81                     	.db $25, $81
0835C 4B 0B                     	.db $4B, $0B
0835E                           IFNDEF DISABLE_DOOR_POINTERS
0835E                           	.db $00, $30
0835E                           ENDIF
0835E                           IFDEF DISABLE_DOOR_POINTERS
0835E F5 00 30                  	.db $F5, $00, $30
08361                           ENDIF
08361 F0 8B                     	.db $F0, $8B
08363 F1 8C                     	.db $F1, $8C
08365 F1 CA                     	.db $F1, $CA
08367 FF                        	.db $FF
08368                           
08368                           ; World 1-2
08368                           include "src/levels/1/1-2/1-2-area0.asm"
08368                           ; Level 1-2, Area 0
08368                           
08368                           LevelData_1_2_Area0:
08368                           	; Level Header
08368                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08368                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08368                           	levelHeader 7, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0a, $2
08368 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
08369 EA                        	.db %11100000 | $0a
0836A 70                        	.db 7 << 4 | 0 << 2 | 0
0836B                           	IFNDEF LEVEL_ENGINE_UPGRADES
0836B 10                        		.db $2 << 3 | LevelMusic_Overworld
0836C                           	ENDIF
0836C                           	IFDEF LEVEL_ENGINE_UPGRADES
0836C                           		.db $2 << 4 | LevelMusic_Overworld
0836C                           	ENDIF
0836C                           
0836C 8E C3                     	.db $8E, $C3
0836E 3B C1                     	.db $3B, $C1
08370 F0 CD                     	.db $F0, $CD
08372 F1 48                     	.db $F1, $48
08374 DD 10                     	.db $DD, $10
08376 13 C2                     	.db $13, $C2
08378 EB 10                     	.db $EB, $10
0837A 10 11                     	.db $10, $11
0837C 06 10                     	.db $06, $10
0837E 0E 11                     	.db $0E, $11
08380 2E C1                     	.db $2E, $C1
08382 7F 29                     	.db $7F, $29
08384 5D 16                     	.db $5D, $16
08386 0E 16                     	.db $0E, $16
08388 2A 07                     	.db $2A, $07
0838A 0F 06                     	.db $0F, $06
0838C F5 01 30                  	.db $F5, $01, $30
0838F 18 26                     	.db $18, $26
08391 0C 2B                     	.db $0C, $2B
08393 12 C2                     	.db $12, $C2
08395 F0 E0                     	.db $F0, $E0
08397 F6 00                     	.db $F6, $00
08399 43 10                     	.db $43, $10
0839B 15 11                     	.db $15, $11
0839D 1A CD                     	.db $1A, $CD
0839F 35 16                     	.db $35, $16
083A1 31 16                     	.db $31, $16
083A3 08 29                     	.db $08, $29
083A5 1D 09                     	.db $1D, $09
083A7                           IFNDEF DISABLE_DOOR_POINTERS
083A7                           	.db $01, $10
083A7                           ENDIF
083A7                           IFDEF DISABLE_DOOR_POINTERS
083A7 F5 01 10                  	.db $F5, $01, $10
083AA                           ENDIF
083AA 10 22                     	.db $10, $22
083AC 02 51                     	.db $02, $51
083AE 40 29                     	.db $40, $29
083B0 0B 10                     	.db $0B, $10
083B2 1C 11                     	.db $1C, $11
083B4 12 26                     	.db $12, $26
083B6 18 CC                     	.db $18, $CC
083B8 F0 08                     	.db $F0, $08
083BA F1 C2                     	.db $F1, $C2
083BC F2                        	.db $F2
083BD 3C 16                     	.db $3C, $16
083BF 1D 16                     	.db $1D, $16
083C1 13 0B                     	.db $13, $0B
083C3                           IFNDEF DISABLE_DOOR_POINTERS
083C3                           	.db $01, $13
083C3                           ENDIF
083C3                           IFDEF DISABLE_DOOR_POINTERS
083C3 F5 01 13                  	.db $F5, $01, $13
083C6                           ENDIF
083C6 15 56                     	.db $15, $56
083C8 0E 51                     	.db $0E, $51
083CA 9C 8C                     	.db $9C, $8C
083CC 0D 8C                     	.db $0D, $8C
083CE 0E 8C                     	.db $0E, $8C
083D0 0F 8C                     	.db $0F, $8C
083D2 27 10                     	.db $27, $10
083D4 15 11                     	.db $15, $11
083D6 4A 16                     	.db $4A, $16
083D8 14 16                     	.db $14, $16
083DA 0C 0B                     	.db $0C, $0B
083DC                           IFNDEF DISABLE_DOOR_POINTERS
083DC                           	.db $01, $20
083DC                           ENDIF
083DC                           IFDEF DISABLE_DOOR_POINTERS
083DC F5 01 20                  	.db $F5, $01, $20
083DF                           ENDIF
083DF 26 16                     	.db $26, $16
083E1 09 82                     	.db $09, $82
083E3 0A 82                     	.db $0A, $82
083E5 0B 82                     	.db $0B, $82
083E7 F0 00                     	.db $F0, $00
083E9 FF                        	.db $FF
083EA                           include "src/levels/1/1-2/1-2-area1.asm"
083EA                           ; Level 1-2, Area 1
083EA                           
083EA                           LevelData_1_2_Area1:
083EA                           	; Level Header
083EA                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
083EA                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
083EA                           	levelHeader 3, LevelDirection_Horizontal, 1, 1, LevelMusic_Underground, 0, 2, $0a, $2
083EA 89                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
083EB EA                        	.db %11100000 | $0a
083EC 32                        	.db 3 << 4 | 0 << 2 | 2
083ED                           	IFNDEF LEVEL_ENGINE_UPGRADES
083ED 11                        		.db $2 << 3 | LevelMusic_Underground
083EE                           	ENDIF
083EE                           	IFDEF LEVEL_ENGINE_UPGRADES
083EE                           		.db $2 << 4 | LevelMusic_Underground
083EE                           	ENDIF
083EE                           
083EE 99 29                     	.db $99, $29
083F0 16 29                     	.db $16, $29
083F2 0C 29                     	.db $0C, $29
083F4 12 13                     	.db $12, $13
083F6                           IFNDEF DISABLE_DOOR_POINTERS
083F6                           	.db $01, $04
083F6                           ENDIF
083F6                           IFDEF DISABLE_DOOR_POINTERS
083F6 F5 01 04                  	.db $F5, $01, $04
083F9                           ENDIF
083F9 1A 25                     	.db $1A, $25
083FB 0C 21                     	.db $0C, $21
083FD 0E 21                     	.db $0E, $21
083FF F0 30                     	.db $F0, $30
08401 F1 F7                     	.db $F1, $F7
08403 7D A8                     	.db $7D, $A8
08405 1C 25                     	.db $1C, $25
08407 0E 26                     	.db $0E, $26
08409 1D 05                     	.db $1D, $05
0840B 3A 83                     	.db $3A, $83
0840D 32 25                     	.db $32, $25
0840F 03 25                     	.db $03, $25
08411 06 25                     	.db $06, $25
08413 07 25                     	.db $07, $25
08415 09 80                     	.db $09, $80
08417 0F 21                     	.db $0F, $21
08419 F0 30                     	.db $F0, $30
0841B F0 97                     	.db $F0, $97
0841D F0 D0                     	.db $F0, $D0
0841F F1 35                     	.db $F1, $35
08421 80 25                     	.db $80, $25
08423 02 25                     	.db $02, $25
08425 17 82                     	.db $17, $82
08427 1E 29                     	.db $1E, $29
08429 24 83                     	.db $24, $83
0842B 37 2D                     	.db $37, $2D
0842D F0 F0                     	.db $F0, $F0
0842F F1 1B                     	.db $F1, $1B
08431 F1 51                     	.db $F1, $51
08433 7C 14                     	.db $7C, $14
08435                           IFNDEF DISABLE_DOOR_POINTERS
08435                           	.db $01, $06
08435                           ENDIF
08435                           IFDEF DISABLE_DOOR_POINTERS
08435 F5 01 06                  	.db $F5, $01, $06
08438                           ENDIF
08438 F0 0F                     	.db $F0, $0F
0843A F1 4E                     	.db $F1, $4E
0843C F1 CA                     	.db $F1, $CA
0843E FF                        	.db $FF
0843F                           include "src/levels/1/1-2/1-2-area2.asm"
0843F                           ; Level 1-2, Area 2
0843F                           
0843F                           LevelData_1_2_Area2:
0843F                           	; Level Header
0843F                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0843F                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0843F                           	levelHeader 2, LevelDirection_Horizontal, 0, 0, LevelMusic_Boss, 0, 0, $00, $0
0843F 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
08440 E0                        	.db %11100000 | $00
08441 20                        	.db 2 << 4 | 0 << 2 | 0
08442                           	IFNDEF LEVEL_ENGINE_UPGRADES
08442 02                        		.db $0 << 3 | LevelMusic_Boss
08443                           	ENDIF
08443                           	IFDEF LEVEL_ENGINE_UPGRADES
08443                           		.db $0 << 4 | LevelMusic_Boss
08443                           	ENDIF
08443                           
08443 00 8C                     	.db $00, $8C
08445 01 8C                     	.db $01, $8C
08447 02 8C                     	.db $02, $8C
08449 03 8C                     	.db $03, $8C
0844B 28 10                     	.db $28, $10
0844D 1B 11                     	.db $1B, $11
0844F 53 0B                     	.db $53, $0B
08451                           IFNDEF DISABLE_DOOR_POINTERS
08451                           	.db $01, $07
08451                           ENDIF
08451                           IFDEF DISABLE_DOOR_POINTERS
08451 F5 01 07                  	.db $F5, $01, $07
08454                           ENDIF
08454 1F 16                     	.db $1F, $16
08456 14 82                     	.db $14, $82
08458 05 82                     	.db $05, $82
0845A 0D 16                     	.db $0D, $16
0845C 79 11                     	.db $79, $11
0845E 16 10                     	.db $16, $10
08460 36 16                     	.db $36, $16
08462 31 16                     	.db $31, $16
08464 04 48                     	.db $04, $48
08466 13 82                     	.db $13, $82
08468 04 82                     	.db $04, $82
0846A 05 82                     	.db $05, $82
0846C 06 82                     	.db $06, $82
0846E 07 82                     	.db $07, $82
08470 08 82                     	.db $08, $82
08472 09 82                     	.db $09, $82
08474 0A 82                     	.db $0A, $82
08476 0B 82                     	.db $0B, $82
08478 0C 82                     	.db $0C, $82
0847A F2                        	.db $F2
0847B F0 01                     	.db $F0, $01
0847D F6 02                     	.db $F6, $02
0847F F0 59                     	.db $F0, $59
08481 F0 8A                     	.db $F0, $8A
08483 F5 02 00                  	.db $F5, $02, $00
08486 FF                        	.db $FF
08487                           include "src/levels/1/1-2/1-2-area3.asm"
08487                           ; Level 1-2, Area 3
08487                           
08487                           LevelData_1_2_Area3:
08487                           	; Level Header
08487                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08487                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08487                           	levelHeader 0, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
08487 18                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
08488 E3                        	.db %11100000 | $03
08489 01                        	.db 0 << 4 | 0 << 2 | 1
0848A                           	IFNDEF LEVEL_ENGINE_UPGRADES
0848A 01                        		.db $0 << 3 | LevelMusic_Underground
0848B                           	ENDIF
0848B                           	IFDEF LEVEL_ENGINE_UPGRADES
0848B                           		.db $0 << 4 | LevelMusic_Underground
0848B                           	ENDIF
0848B                           
0848B 64 32                     	.db $64, $32
0848D 09 32                     	.db $09, $32
0848F 32 32                     	.db $32, $32
08491 0B 32                     	.db $0B, $32
08493 14 2C                     	.db $14, $2C
08495 06 32                     	.db $06, $32
08497 0A 2C                     	.db $0A, $2C
08499 F0 44                     	.db $F0, $44
0849B F0 65                     	.db $F0, $65
0849D F0 86                     	.db $F0, $86
0849F F0 A7                     	.db $F0, $A7
084A1 F1 66                     	.db $F1, $66
084A3 F1 83                     	.db $F1, $83
084A5 F1 A0                     	.db $F1, $A0
084A7 F5 01 03                  	.db $F5, $01, $03
084AA FF                        	.db $FF
084AB                           include "src/levels/1/1-2/1-2-area4.asm"
084AB                           ; Level 1-2, Area 4
084AB                           
084AB                           LevelData_1_2_Area4:
084AB                           	; Level Header
084AB                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
084AB                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
084AB                           	levelHeader 0, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
084AB 18                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
084AC E3                        	.db %11100000 | $03
084AD 01                        	.db 0 << 4 | 0 << 2 | 1
084AE                           	IFNDEF LEVEL_ENGINE_UPGRADES
084AE 01                        		.db $0 << 3 | LevelMusic_Underground
084AF                           	ENDIF
084AF                           	IFDEF LEVEL_ENGINE_UPGRADES
084AF                           		.db $0 << 4 | LevelMusic_Underground
084AF                           	ENDIF
084AF                           
084AF 64 32                     	.db $64, $32
084B1 09 32                     	.db $09, $32
084B3 32 32                     	.db $32, $32
084B5 0B 32                     	.db $0B, $32
084B7 24 31                     	.db $24, $31
084B9 0A 31                     	.db $0A, $31
084BB 17 27                     	.db $17, $27
084BD F0 44                     	.db $F0, $44
084BF F0 65                     	.db $F0, $65
084C1 F0 86                     	.db $F0, $86
084C3 F0 A7                     	.db $F0, $A7
084C5 F1 86                     	.db $F1, $86
084C7 F1 A8                     	.db $F1, $A8
084C9 F1 C4                     	.db $F1, $C4
084CB FF                        	.db $FF
084CC                           
084CC                           ; World 1-3
084CC                           include "src/levels/1/1-3/1-3-area0.asm"
084CC                           ; Level 1-3, Area 0
084CC                           
084CC                           LevelData_1_3_Area0:
084CC                           	; Level Header
084CC                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
084CC                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
084CC                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $01, $0
084CC 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
084CD E1                        	.db %11100000 | $01
084CE 90                        	.db 9 << 4 | 0 << 2 | 0
084CF                           	IFNDEF LEVEL_ENGINE_UPGRADES
084CF 00                        		.db $0 << 3 | LevelMusic_Overworld
084D0                           	ENDIF
084D0                           	IFDEF LEVEL_ENGINE_UPGRADES
084D0                           		.db $0 << 4 | LevelMusic_Overworld
084D0                           	ENDIF
084D0                           
084D0 00 8A                     	.db $00, $8A
084D2 01 8A                     	.db $01, $8A
084D4 02 8A                     	.db $02, $8A
084D6 2D 29                     	.db $2D, $29
084D8 1A 29                     	.db $1A, $29
084DA 28 C5                     	.db $28, $C5
084DC 2E F2                     	.db $2E, $F2
084DE F1 C8                     	.db $F1, $C8
084E0 A6 29                     	.db $A6, $29
084E2 0E 10                     	.db $0E, $10
084E4 13 29                     	.db $13, $29
084E6 21 C2                     	.db $21, $C2
084E8 07 C5                     	.db $07, $C5
084EA 24 F2                     	.db $24, $F2
084EC 0D F2                     	.db $0D, $F2
084EE 26 C7                     	.db $26, $C7
084F0 20 C4                     	.db $20, $C4
084F2 79 29                     	.db $79, $29
084F4 0B 29                     	.db $0B, $29
084F6 18 2B                     	.db $18, $2B
084F8 11 22                     	.db $11, $22
084FA 02 26                     	.db $02, $26
084FC 03 DB                     	.db $03, $DB
084FE 10 C3                     	.db $10, $C3
08500 0E C1                     	.db $0E, $C1
08502 14 F9                     	.db $14, $F9
08504 3E C4                     	.db $3E, $C4
08506 1A C3                     	.db $1A, $C3
08508 10 C6                     	.db $10, $C6
0850A 56 10                     	.db $56, $10
0850C 1A 11                     	.db $1A, $11
0850E 4C D3                     	.db $4C, $D3
08510 15 D3                     	.db $15, $D3
08512 0D C1                     	.db $0D, $C1
08514 16 C1                     	.db $16, $C1
08516 0F F3                     	.db $0F, $F3
08518 18 F4                     	.db $18, $F4
0851A 13 F2                     	.db $13, $F2
0851C 64 10                     	.db $64, $10
0851E 28 D3                     	.db $28, $D3
08520 19 C1                     	.db $19, $C1
08522 12 D3                     	.db $12, $D3
08524 0B FE                     	.db $0B, $FE
08526 13 C1                     	.db $13, $C1
08528 15 F3                     	.db $15, $F3
0852A A7 11                     	.db $A7, $11
0852C 11 29                     	.db $11, $29
0852E 05 29                     	.db $05, $29
08530 0B 21                     	.db $0B, $21
08532 0C 21                     	.db $0C, $21
08534 0D 21                     	.db $0D, $21
08536 0E 21                     	.db $0E, $21
08538 0F 21                     	.db $0F, $21
0853A 1A C6                     	.db $1A, $C6
0853C 60 C1                     	.db $60, $C1
0853E 04 C1                     	.db $04, $C1
08540 08 CA                     	.db $08, $CA
08542 80 2D                     	.db $80, $2D
08544 0A 10                     	.db $0A, $10
08546 42 29                     	.db $42, $29
08548 43 F9                     	.db $43, $F9
0854A F1 A1                     	.db $F1, $A1
0854C 3E 18                     	.db $3E, $18
0854E 23 11                     	.db $23, $11
08550 18 10                     	.db $18, $10
08552 16 29                     	.db $16, $29
08554 24 22                     	.db $24, $22
08556 06 21                     	.db $06, $21
08558 08 22                     	.db $08, $22
0855A 13 D5                     	.db $13, $D5
0855C 12 C1                     	.db $12, $C1
0855E 08 C1                     	.db $08, $C1
08560 24 26                     	.db $24, $26
08562 06 22                     	.db $06, $22
08564 2B F1                     	.db $2B, $F1
08566 F1 68                     	.db $F1, $68
08568 F1 A1                     	.db $F1, $A1
0856A 34 18                     	.db $34, $18
0856C 0A 18                     	.db $0A, $18
0856E 9C 0A                     	.db $9C, $0A
08570                           IFNDEF DISABLE_DOOR_POINTERS
08570                           	.db $02, $23
08570                           ENDIF
08570                           IFDEF DISABLE_DOOR_POINTERS
08570 F5 02 23                  	.db $F5, $02, $23
08573                           ENDIF
08573 98 10                     	.db $98, $10
08575 55 C1                     	.db $55, $C1
08577 12 08                     	.db $12, $08
08579 10 51                     	.db $10, $51
0857B F0 E8                     	.db $F0, $E8
0857D FF                        	.db $FF
0857E                           include "src/levels/1/1-3/1-3-area1.asm"
0857E                           ; Level 1-3, Area 1
0857E                           
0857E                           LevelData_1_3_Area1:
0857E                           	; Level Header
0857E                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0857E                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0857E                           	levelHeader 0, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 0, 3, $00, $3
0857E 20                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
0857F E0                        	.db %11100000 | $00
08580 03                        	.db 0 << 4 | 0 << 2 | 3
08581                           	IFNDEF LEVEL_ENGINE_UPGRADES
08581 19                        		.db $3 << 3 | LevelMusic_Underground
08582                           	ENDIF
08582                           	IFDEF LEVEL_ENGINE_UPGRADES
08582                           		.db $3 << 4 | LevelMusic_Underground
08582                           	ENDIF
08582                           
08582 55 2C                     	.db $55, $2C
08584 0B 2C                     	.db $0B, $2C
08586 33 2C                     	.db $33, $2C
08588 0D 2C                     	.db $0D, $2C
0858A 16 34                     	.db $16, $34
0858C 27 0A                     	.db $27, $0A
0858E                           IFNDEF DISABLE_DOOR_POINTERS
0858E                           	.db $02, $20
0858E                           ENDIF
0858E                           IFDEF DISABLE_DOOR_POINTERS
0858E F5 02 20                  	.db $F5, $02, $20
08591                           ENDIF
08591 F0 54                     	.db $F0, $54
08593 F1 A0                     	.db $F1, $A0
08595 FF                        	.db $FF
08596                           include "src/levels/1/1-3/1-3-area2.asm"
08596                           ; Level 1-3, Area 2
08596                           
08596                           LevelData_1_3_Area2:
08596                           	; Level Header
08596                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08596                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08596                           	levelHeader 6, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 1, 3, $00, $3
08596 20                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
08597 E0                        	.db %11100000 | $00
08598 67                        	.db 6 << 4 | 1 << 2 | 3
08599                           	IFNDEF LEVEL_ENGINE_UPGRADES
08599 19                        		.db $3 << 3 | LevelMusic_Underground
0859A                           	ENDIF
0859A                           	IFDEF LEVEL_ENGINE_UPGRADES
0859A                           		.db $3 << 4 | LevelMusic_Underground
0859A                           	ENDIF
0859A                           
0859A 58 0A                     	.db $58, $0A
0859C                           IFNDEF DISABLE_DOOR_POINTERS
0859C                           	.db $02, $10
0859C                           ENDIF
0859C                           IFDEF DISABLE_DOOR_POINTERS
0859C F5 02 10                  	.db $F5, $02, $10
0859F                           ENDIF
0859F 23 39                     	.db $23, $39
085A1 32 32                     	.db $32, $32
085A3 0B 32                     	.db $0B, $32
085A5 35 33                     	.db $35, $33
085A7 0A 30                     	.db $0A, $30
085A9 1A AF                     	.db $1A, $AF
085AB F0 54                     	.db $F0, $54
085AD 34 31                     	.db $34, $31
085AF 0C 30                     	.db $0C, $30
085B1 1C AC                     	.db $1C, $AC
085B3 12 31                     	.db $12, $31
085B5 34 31                     	.db $34, $31
085B7 32 31                     	.db $32, $31
085B9 34 31                     	.db $34, $31
085BB F0 5C                     	.db $F0, $5C
085BD 32 31                     	.db $32, $31
085BF 0C 30                     	.db $0C, $30
085C1 34 37                     	.db $34, $37
085C3 62 37                     	.db $62, $37
085C5 18 A9                     	.db $18, $A9
085C7 0D 00                     	.db $0D, $00
085C9 0E 00                     	.db $0E, $00
085CB 1D 00                     	.db $1D, $00
085CD 0E 00                     	.db $0E, $00
085CF 14 31                     	.db $14, $31
085D1 09 35                     	.db $09, $35
085D3 F0 14                     	.db $F0, $14
085D5 6A 33                     	.db $6A, $33
085D7 3C 31                     	.db $3C, $31
085D9 13 13                     	.db $13, $13
085DB                           IFNDEF DISABLE_DOOR_POINTERS
085DB                           	.db $02, $08
085DB                           ENDIF
085DB                           IFDEF DISABLE_DOOR_POINTERS
085DB F5 02 08                  	.db $F5, $02, $08
085DE                           ENDIF
085DE 2C 31                     	.db $2C, $31
085E0 27 32                     	.db $27, $32
085E2 F1 5B                     	.db $F1, $5B
085E4 F1 74                     	.db $F1, $74
085E6 44 35                     	.db $44, $35
085E8 36 35                     	.db $36, $35
085EA 34 35                     	.db $34, $35
085EC 19 A6                     	.db $19, $A6
085EE 27 31                     	.db $27, $31
085F0 0A 31                     	.db $0A, $31
085F2 17 AF                     	.db $17, $AF
085F4 08 AD                     	.db $08, $AD
085F6 F0 16                     	.db $F0, $16
085F8 49 AE                     	.db $49, $AE
085FA 65 A9                     	.db $65, $A9
085FC 0B AB                     	.db $0B, $AB
085FE 51 33                     	.db $51, $33
08600 0C 32                     	.db $0C, $32
08602 12 AC                     	.db $12, $AC
08604 0D A8                     	.db $0D, $A8
08606 F0 17                     	.db $F0, $17
08608 F0 D4                     	.db $F0, $D4
0860A 63 31                     	.db $63, $31
0860C 14 A7                     	.db $14, $A7
0860E 2C 09                     	.db $2C, $09
08610                           IFNDEF DISABLE_DOOR_POINTERS
08610                           	.db $02, $30
08610                           ENDIF
08610                           IFDEF DISABLE_DOOR_POINTERS
08610 F5 02 30                  	.db $F5, $02, $30
08613                           ENDIF
08613 26 31                     	.db $26, $31
08615 51 73                     	.db $51, $73
08617 06 73                     	.db $06, $73
08619 F1 18                     	.db $F1, $18
0861B F1 C0                     	.db $F1, $C0
0861D FF                        	.db $FF
0861E                           include "src/levels/1/1-3/1-3-area3.asm"
0861E                           ; Level 1-3, Area 3
0861E                           
0861E                           LevelData_1_3_Area3:
0861E                           	; Level Header
0861E                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0861E                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0861E                           	levelHeader 5, LevelDirection_Horizontal, 4, 0, LevelMusic_Underground, 1, 3, $0a, $3
0861E A0                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 0
0861F EA                        	.db %11100000 | $0a
08620 57                        	.db 5 << 4 | 1 << 2 | 3
08621                           	IFNDEF LEVEL_ENGINE_UPGRADES
08621 19                        		.db $3 << 3 | LevelMusic_Underground
08622                           	ENDIF
08622                           	IFDEF LEVEL_ENGINE_UPGRADES
08622                           		.db $3 << 4 | LevelMusic_Underground
08622                           	ENDIF
08622                           
08622 39 29                     	.db $39, $29
08624 13 13                     	.db $13, $13
08626                           IFNDEF DISABLE_DOOR_POINTERS
08626                           	.db $02, $26
08626                           ENDIF
08626                           IFDEF DISABLE_DOOR_POINTERS
08626 F5 02 26                  	.db $F5, $02, $26
08629                           ENDIF
08629 6B 32                     	.db $6B, $32
0862B 28 77                     	.db $28, $77
0862D F0 4B                     	.db $F0, $4B
0862F F1 0D                     	.db $F1, $0D
08631 7F 30                     	.db $7F, $30
08633 16 31                     	.db $16, $31
08635 0A 32                     	.db $0A, $32
08637 23 31                     	.db $23, $31
08639 0F 30                     	.db $0F, $30
0863B 20 31                     	.db $20, $31
0863D 1F 30                     	.db $1F, $30
0863F F0 08                     	.db $F0, $08
08641 90 66                     	.db $90, $66
08643 07 31                     	.db $07, $31
08645 17 31                     	.db $17, $31
08647 09 66                     	.db $09, $66
08649 20 66                     	.db $20, $66
0864B 07 30                     	.db $07, $30
0864D 08 01                     	.db $08, $01
0864F 17 31                     	.db $17, $31
08651 09 66                     	.db $09, $66
08653 20 66                     	.db $20, $66
08655 07 31                     	.db $07, $31
08657 17 31                     	.db $17, $31
08659 09 66                     	.db $09, $66
0865B 80 29                     	.db $80, $29
0865D 10 30                     	.db $10, $30
0865F 0A 29                     	.db $0A, $29
08661 20 29                     	.db $20, $29
08663 10 30                     	.db $10, $30
08665 09 82                     	.db $09, $82
08667 0A 82                     	.db $0A, $82
08669 0B 82                     	.db $0B, $82
0866B 0E 82                     	.db $0E, $82
0866D 0F 82                     	.db $0F, $82
0866F 20 29                     	.db $20, $29
08671 10 30                     	.db $10, $30
08673 F0 4D                     	.db $F0, $4D
08675 F0 A8                     	.db $F0, $A8
08677 F0 CC                     	.db $F0, $CC
08679 F1 08                     	.db $F1, $08
0867B 93 29                     	.db $93, $29
0867D 32 81                     	.db $32, $81
0867F 03 81                     	.db $03, $81
08681 06 81                     	.db $06, $81
08683 F0 B0                     	.db $F0, $B0
08685 F1 0F                     	.db $F1, $0F
08687 F0 31                     	.db $F0, $31
08689 F2                        	.db $F2
0868A 99 42                     	.db $99, $42
0868C F1 0F                     	.db $F1, $0F
0868E F1 CA                     	.db $F1, $CA
08690 F5 02 40                  	.db $F5, $02, $40
08693 FF                        	.db $FF
08694                           include "src/levels/1/1-3/1-3-area4.asm"
08694                           ; Level 1-3, Area 4
08694                           
08694                           LevelData_1_3_Area4:
08694                           	; Level Header
08694                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08694                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08694                           	levelHeader 1, LevelDirection_Horizontal, 5, 2, LevelMusic_Boss, 1, 2, $18, $4
08694 AA                        	.db LevelDirection_Horizontal << 7 | 5 << 3 | 2
08695 F8                        	.db %11100000 | $18
08696 16                        	.db 1 << 4 | 1 << 2 | 2
08697                           	IFNDEF LEVEL_ENGINE_UPGRADES
08697 22                        		.db $4 << 3 | LevelMusic_Boss
08698                           	ENDIF
08698                           	IFDEF LEVEL_ENGINE_UPGRADES
08698                           		.db $4 << 4 | LevelMusic_Boss
08698                           	ENDIF
08698                           
08698 6E 25                     	.db $6E, $25
0869A 0F 25                     	.db $0F, $25
0869C 1E 32                     	.db $1E, $32
0869E 3F 25                     	.db $3F, $25
086A0 F0 50                     	.db $F0, $50
086A2 F0 BD                     	.db $F0, $BD
086A4 F1 5B                     	.db $F1, $5B
086A6 F1 9A                     	.db $F1, $9A
086A8 B0 25                     	.db $B0, $25
086AA 04 84                     	.db $04, $84
086AC 33 81                     	.db $33, $81
086AE 0A 33                     	.db $0A, $33
086B0 11 25                     	.db $11, $25
086B2 05 80                     	.db $05, $80
086B4                           IFDEF EXTENDED_PTR_CONTINUE:
086B4 F5 83 00                      .db $F5, $83, $00
086B7                           ENDIF
086B7 F0 99                     	.db $F0, $99
086B9 F0 DC                     	.db $F0, $DC
086BB F1 F8                     	.db $F1, $F8
086BD FF                        	.db $FF
086BE                           ; -------------------------------
086BE                           
086BE                           
086BE                           ; -------------------------------
086BE                           ; World 2
086BE                           
086BE                           ; World 2-1
086BE                           include "src/levels/2/2-1/2-1-area0.asm"
086BE                           ; Level 2-1, Area 0
086BE                           
086BE                           LevelData_2_1_Area0:
086BE                           	; Level Header
086BE                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
086BE                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
086BE                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0c, $0
086BE 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
086BF EC                        	.db %11100000 | $0c
086C0 90                        	.db 9 << 4 | 0 << 2 | 0
086C1                           	IFNDEF LEVEL_ENGINE_UPGRADES
086C1 00                        		.db $0 << 3 | LevelMusic_Overworld
086C2                           	ENDIF
086C2                           	IFDEF LEVEL_ENGINE_UPGRADES
086C2                           		.db $0 << 4 | LevelMusic_Overworld
086C2                           	ENDIF
086C2                           
086C2 00 0E                     	.db $00, $0E
086C4 14 11                     	.db $14, $11
086C6 12 10                     	.db $12, $10
086C8 1C 10                     	.db $1C, $10
086CA 4A 17                     	.db $4A, $17
086CC 12 17                     	.db $12, $17
086CE 8A 10                     	.db $8A, $10
086D0 27 17                     	.db $27, $17
086D2 E2 10                     	.db $E2, $10
086D4 14 11                     	.db $14, $11
086D6 4A 07                     	.db $4A, $07
086D8 0F D3                     	.db $0F, $D3
086DA 11 D5                     	.db $11, $D5
086DC 0E D1                     	.db $0E, $D1
086DE 10 D1                     	.db $10, $D1
086E0 06 D1                     	.db $06, $D1
086E2 0D D1                     	.db $0D, $D1
086E4 77 10                     	.db $77, $10
086E6 19 11                     	.db $19, $11
086E8 48 29                     	.db $48, $29
086EA 1C D3                     	.db $1C, $D3
086EC 12 D1                     	.db $12, $D1
086EE 0B D1                     	.db $0B, $D1
086F0 0F D1                     	.db $0F, $D1
086F2 13 D1                     	.db $13, $D1
086F4 0A D1                     	.db $0A, $D1
086F6 B8 26                     	.db $B8, $26
086F8 0A 22                     	.db $0A, $22
086FA 0B 2B                     	.db $0B, $2B
086FC 0C 22                     	.db $0C, $22
086FE 0D 22                     	.db $0D, $22
08700 17 36                     	.db $17, $36
08702 14 07                     	.db $14, $07
08704 08 34                     	.db $08, $34
08706 17 36                     	.db $17, $36
08708 10 D1                     	.db $10, $D1
0870A 08 34                     	.db $08, $34
0870C 8E 10                     	.db $8E, $10
0870E 39 29                     	.db $39, $29
08710 37 0F                     	.db $37, $0F
08712 0A 0F                     	.db $0A, $0F
08714 1D D2                     	.db $1D, $D2
08716 F0 0C                     	.db $F0, $0C
08718 F6 01                     	.db $F6, $01
0871A 93 11                     	.db $93, $11
0871C 47 0F                     	.db $47, $0F
0871E 0F 37                     	.db $0F, $37
08720 1E 39                     	.db $1E, $39
08722 1D 3B                     	.db $1D, $3B
08724 F1 8C                     	.db $F1, $8C
08726 F6 00                     	.db $F6, $00
08728 89 10                     	.db $89, $10
0872A 10 29                     	.db $10, $29
0872C 05 29                     	.db $05, $29
0872E 1F 29                     	.db $1F, $29
08730 11 33                     	.db $11, $33
08732 10 35                     	.db $10, $35
08734 1C 0F                     	.db $1C, $0F
08736 F2                        	.db $F2
08737 7D 0F                     	.db $7D, $0F
08739 F0 0C                     	.db $F0, $0C
0873B F6 01                     	.db $F6, $01
0873D F1 8C                     	.db $F1, $8C
0873F F6 00                     	.db $F6, $00
08741 A3 10                     	.db $A3, $10
08743 11 11                     	.db $11, $11
08745 07 17                     	.db $07, $17
08747 59 0B                     	.db $59, $0B
08749                           IFNDEF DISABLE_DOOR_POINTERS
08749                           	.db $03, $10
08749                           ENDIF
08749                           IFDEF DISABLE_DOOR_POINTERS
08749 F5 03 10                  	.db $F5, $03, $10
0874C                           ENDIF
0874C FF                        	.db $FF
0874D                           include "src/levels/2/2-1/2-1-area1.asm"
0874D                           ; Level 2-1, Area 1
0874D                           
0874D                           LevelData_2_1_Area1:
0874D                           	; Level Header
0874D                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0874D                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0874D                           	levelHeader 3, LevelDirection_Vertical, 1, 1, LevelMusic_Underground, 0, 1, $16, $1
0874D 09                        	.db LevelDirection_Vertical << 7 | 1 << 3 | 1
0874E F6                        	.db %11100000 | $16
0874F 31                        	.db 3 << 4 | 0 << 2 | 1
08750                           	IFNDEF LEVEL_ENGINE_UPGRADES
08750 09                        		.db $1 << 3 | LevelMusic_Underground
08751                           	ENDIF
08751                           	IFDEF LEVEL_ENGINE_UPGRADES
08751                           		.db $1 << 4 | LevelMusic_Underground
08751                           	ENDIF
08751                           
08751 66 13                     	.db $66, $13
08753                           IFNDEF DISABLE_DOOR_POINTERS
08753                           	.db $03, $09
08753                           ENDIF
08753                           IFDEF DISABLE_DOOR_POINTERS
08753 F5 03 09                  	.db $F5, $03, $09
08756                           ENDIF
08756 7D 29                     	.db $7D, $29
08758 F0 55                     	.db $F0, $55
0875A F1 1C                     	.db $F1, $1C
0875C F1 4D                     	.db $F1, $4D
0875E 83 29                     	.db $83, $29
08760 F2                        	.db $F2
08761 72 29                     	.db $72, $29
08763 1D 29                     	.db $1D, $29
08765 32 A3                     	.db $32, $A3
08767 32 05                     	.db $32, $05
08769 F1 C0                     	.db $F1, $C0
0876B 12 AA                     	.db $12, $AA
0876D AC 0A                     	.db $AC, $0A
0876F                           IFNDEF DISABLE_DOOR_POINTERS
0876F                           	.db $03, $20
0876F                           ENDIF
0876F                           IFDEF DISABLE_DOOR_POINTERS
0876F F5 03 20                  	.db $F5, $03, $20
08772                           ENDIF
08772 F0 F4                     	.db $F0, $F4
08774 F1 98                     	.db $F1, $98
08776 F1 A0                     	.db $F1, $A0
08778 FF                        	.db $FF
08779                           include "src/levels/2/2-1/2-1-area2.asm"
08779                           ; Level 2-1, Area 2
08779                           
08779                           LevelData_2_1_Area2:
08779                           	; Level Header
08779                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08779                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08779                           	levelHeader 2, LevelDirection_Horizontal, 2, 1, LevelMusic_Boss, 0, 0, $0a, $3
08779 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
0877A EA                        	.db %11100000 | $0a
0877B 20                        	.db 2 << 4 | 0 << 2 | 0
0877C                           	IFNDEF LEVEL_ENGINE_UPGRADES
0877C 1A                        		.db $3 << 3 | LevelMusic_Boss
0877D                           	ENDIF
0877D                           	IFDEF LEVEL_ENGINE_UPGRADES
0877D                           		.db $3 << 4 | LevelMusic_Boss
0877D                           	ENDIF
0877D                           
0877D 97 80                     	.db $97, $80
0877F 23 0A                     	.db $23, $0A
08781                           IFNDEF DISABLE_DOOR_POINTERS
08781                           	.db $03, $13
08781                           ENDIF
08781                           IFDEF DISABLE_DOOR_POINTERS
08781 F5 03 13                  	.db $F5, $03, $13
08784                           ENDIF
08784 F0 4D                     	.db $F0, $4D
08786 F0 CC                     	.db $F0, $CC
08788 F1 02                     	.db $F1, $02
0878A F2                        	.db $F2
0878B F0 48                     	.db $F0, $48
0878D F0 8C                     	.db $F0, $8C
0878F F2                        	.db $F2
08790 84 86                     	.db $84, $86
08792 05 86                     	.db $05, $86
08794 F0 48                     	.db $F0, $48
08796 F1 0B                     	.db $F1, $0B
08798 F1 CA                     	.db $F1, $CA
0879A F5 04 00                  	.db $F5, $04, $00
0879D FF                        	.db $FF
0879E                           include "src/levels/2/2-1/2-1-area4.asm"
0879E                           ; Level 2-1, Area 4
0879E                           
0879E                           LevelData_2_1_Area4:
0879E                           	; Level Header
0879E                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0879E                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0879E                           	levelHeader 0, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
0879E 18                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
0879F E3                        	.db %11100000 | $03
087A0 01                        	.db 0 << 4 | 0 << 2 | 1
087A1                           	IFNDEF LEVEL_ENGINE_UPGRADES
087A1 01                        		.db $0 << 3 | LevelMusic_Underground
087A2                           	ENDIF
087A2                           	IFDEF LEVEL_ENGINE_UPGRADES
087A2                           		.db $0 << 4 | LevelMusic_Underground
087A2                           	ENDIF
087A2                           
087A2 54 32                     	.db $54, $32
087A4 09 32                     	.db $09, $32
087A6 15 30                     	.db $15, $30
087A8 0A 30                     	.db $0A, $30
087AA 27 31                     	.db $27, $31
087AC 24 31                     	.db $24, $31
087AE 0A 31                     	.db $0A, $31
087B0 15 31                     	.db $15, $31
087B2 09 31                     	.db $09, $31
087B4 16 33                     	.db $16, $33
087B6 1B 24                     	.db $1B, $24
087B8 F0 44                     	.db $F0, $44
087BA F0 65                     	.db $F0, $65
087BC F0 86                     	.db $F0, $86
087BE F0 A7                     	.db $F0, $A7
087C0 F1 86                     	.db $F1, $86
087C2 F1 A3                     	.db $F1, $A3
087C4 F1 C8                     	.db $F1, $C8
087C6 FF                        	.db $FF
087C7                           
087C7                           ; World 2-2
087C7                           include "src/levels/2/2-2/2-2-area0.asm"
087C7                           ; Level 2-2, Area 0
087C7                           
087C7                           LevelData_2_2_Area0:
087C7                           	; Level Header
087C7                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
087C7                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
087C7                           	levelHeader 1, LevelDirection_Horizontal, 1, 1, LevelMusic_Underground, 0, 0, $0a, $3
087C7 89                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
087C8 EA                        	.db %11100000 | $0a
087C9 10                        	.db 1 << 4 | 0 << 2 | 0
087CA                           	IFNDEF LEVEL_ENGINE_UPGRADES
087CA 19                        		.db $3 << 3 | LevelMusic_Underground
087CB                           	ENDIF
087CB                           	IFDEF LEVEL_ENGINE_UPGRADES
087CB                           		.db $3 << 4 | LevelMusic_Underground
087CB                           	ENDIF
087CB                           
087CB 8E 81                     	.db $8E, $81
087CD 0F 81                     	.db $0F, $81
087CF F0 B0                     	.db $F0, $B0
087D1 F1 6F                     	.db $F1, $6F
087D3 BD 14                     	.db $BD, $14
087D5                           IFNDEF DISABLE_DOOR_POINTERS
087D5                           	.db $04, $10
087D5                           ENDIF
087D5                           IFDEF DISABLE_DOOR_POINTERS
087D5 F5 04 10                  	.db $F5, $04, $10
087D8                           ENDIF
087D8 40 81                     	.db $40, $81
087DA F0 2E                     	.db $F0, $2E
087DC F1 CA                     	.db $F1, $CA
087DE FF                        	.db $FF
087DF                           include "src/levels/2/2-2/2-2-area1.asm"
087DF                           ; Level 2-2, Area 1
087DF                           
087DF                           LevelData_2_2_Area1:
087DF                           	; Level Header
087DF                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
087DF                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
087DF                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0a, $3
087DF 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
087E0 EA                        	.db %11100000 | $0a
087E1 90                        	.db 9 << 4 | 0 << 2 | 0
087E2                           	IFNDEF LEVEL_ENGINE_UPGRADES
087E2 18                        		.db $3 << 3 | LevelMusic_Overworld
087E3                           	ENDIF
087E3                           	IFDEF LEVEL_ENGINE_UPGRADES
087E3                           		.db $3 << 4 | LevelMusic_Overworld
087E3                           	ENDIF
087E3                           
087E3 2D 10                     	.db $2D, $10
087E5 1B 11                     	.db $1B, $11
087E7 56 16                     	.db $56, $16
087E9 0D 16                     	.db $0D, $16
087EB 32 0B                     	.db $32, $0B
087ED                           IFNDEF DISABLE_DOOR_POINTERS
087ED                           	.db $04, $01
087ED                           ENDIF
087ED                           IFDEF DISABLE_DOOR_POINTERS
087ED F5 04 01                  	.db $F5, $04, $01
087F0                           ENDIF
087F0 F0 6D                     	.db $F0, $6D
087F2 F0 8D                     	.db $F0, $8D
087F4 F6 00                     	.db $F6, $00
087F6 7C 10                     	.db $7C, $10
087F8 8F 0F                     	.db $8F, $0F
087FA 11 D1                     	.db $11, $D1
087FC 0C 0F                     	.db $0C, $0F
087FE F0 8D                     	.db $F0, $8D
08800 F6 01                     	.db $F6, $01
08802 5A 10                     	.db $5A, $10
08804 26 11                     	.db $26, $11
08806 33 29                     	.db $33, $29
08808 10 29                     	.db $10, $29
0880A 22 0F                     	.db $22, $0F
0880C 0F 07                     	.db $0F, $07
0880E F0 8D                     	.db $F0, $8D
08810 F6 00                     	.db $F6, $00
08812 74 10                     	.db $74, $10
08814 45 29                     	.db $45, $29
08816 09 29                     	.db $09, $29
08818 34 26                     	.db $34, $26
0881A 08 21                     	.db $08, $21
0881C 0C 21                     	.db $0C, $21
0881E 0D 2B                     	.db $0D, $2B
08820 F0 0C                     	.db $F0, $0C
08822 AC 0F                     	.db $AC, $0F
08824 17 0F                     	.db $17, $0F
08826 19 0F                     	.db $19, $0F
08828 13 07                     	.db $13, $07
0882A 04 97                     	.db $04, $97
0882C 30 07                     	.db $30, $07
0882E F0 0D                     	.db $F0, $0D
08830 F0 A2                     	.db $F0, $A2
08832 F6 01                     	.db $F6, $01
08834 68 10                     	.db $68, $10
08836 41 07                     	.db $41, $07
08838 3F 0B                     	.db $3F, $0B
0883A                           IFNDEF DISABLE_DOOR_POINTERS
0883A                           	.db $04, $22
0883A                           ENDIF
0883A                           IFDEF DISABLE_DOOR_POINTERS
0883A F5 04 22                  	.db $F5, $04, $22
0883D                           ENDIF
0883D F0 A2                     	.db $F0, $A2
0883F F6 02                     	.db $F6, $02
08841 F1 C2                     	.db $F1, $C2
08843 F6 03                     	.db $F6, $03
08845 F2                        	.db $F2
08846 7E 07                     	.db $7E, $07
08848 15 07                     	.db $15, $07
0884A 0A 07                     	.db $0A, $07
0884C F0 0C                     	.db $F0, $0C
0884E                           IFNDEF PLAYER_STUFF
0884E                           	.db $F5, $04, $22
0884E                           ENDIF
0884E F6 00                     	.db $F6, $00
08850 83 11                     	.db $83, $11
08852 10 10                     	.db $10, $10
08854 4D 0F                     	.db $4D, $0F
08856 15 07                     	.db $15, $07
08858 09 07                     	.db $09, $07
0885A 12 07                     	.db $12, $07
0885C 86 11                     	.db $86, $11
0885E 12 10                     	.db $12, $10
08860 4A 37                     	.db $4A, $37
08862 19 39                     	.db $19, $39
08864 18 3B                     	.db $18, $3B
08866 17 3D                     	.db $17, $3D
08868 9D 0C                     	.db $9D, $0C
0886A F5 04 30                  	.db $F5, $04, $30
0886D 4A 87                     	.db $4A, $87
0886F 0B 87                     	.db $0B, $87
08871 0C 87                     	.db $0C, $87
08873 0D 03                     	.db $0D, $03
08875 0E 87                     	.db $0E, $87
08877 0F 87                     	.db $0F, $87
08879 7D 03                     	.db $7D, $03
0887B F1 48                     	.db $F1, $48
0887D FF                        	.db $FF
0887E                           include "src/levels/2/2-2/2-2-area2.asm"
0887E                           ; Level 2-2, Area 2
0887E                           
0887E                           LevelData_2_2_Area2:
0887E                           	; Level Header
0887E                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0887E                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0887E                           	levelHeader 2, LevelDirection_Horizontal, 1, 1, LevelMusic_Underground, 0, 0, $0a, $3
0887E 89                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
0887F EA                        	.db %11100000 | $0a
08880 20                        	.db 2 << 4 | 0 << 2 | 0
08881                           	IFNDEF LEVEL_ENGINE_UPGRADES
08881 19                        		.db $3 << 3 | LevelMusic_Underground
08882                           	ENDIF
08882                           	IFDEF LEVEL_ENGINE_UPGRADES
08882                           		.db $3 << 4 | LevelMusic_Underground
08882                           	ENDIF
08882                           
08882 8B 28                     	.db $8B, $28
08884 0D 26                     	.db $0D, $26
08886 0E 2D                     	.db $0E, $2D
08888 0F 22                     	.db $0F, $22
0888A 1A 36                     	.db $1A, $36
0888C 19 21                     	.db $19, $21
0888E 0A 36                     	.db $0A, $36
08890 19 38                     	.db $19, $38
08892 18 3A                     	.db $18, $3A
08894 F0 B7                     	.db $F0, $B7
08896 F0 F0                     	.db $F0, $F0
08898 5D 02                     	.db $5D, $02
0889A 1D 02                     	.db $1D, $02
0889C 1D 02                     	.db $1D, $02
0889E 1D 02                     	.db $1D, $02
088A0 3C 02                     	.db $3C, $02
088A2 1C 02                     	.db $1C, $02
088A4 11 22                     	.db $11, $22
088A6 F0 97                     	.db $F0, $97
088A8 F0 D0                     	.db $F0, $D0
088AA F1 4F                     	.db $F1, $4F
088AC F1 AE                     	.db $F1, $AE
088AE                           IFNDEF PLAYER_STUFF
088AE                           	.db $F5, $04, $15
088AE                           ENDIF
088AE 90 13                     	.db $90, $13
088B0                           IFNDEF DISABLE_DOOR_POINTERS
088B0                           	.db $04, $15
088B0                           ENDIF
088B0                           IFDEF DISABLE_DOOR_POINTERS
088B0 F5 04 15                  	.db $F5, $04, $15
088B3                           ENDIF
088B3 24 29                     	.db $24, $29
088B5 33 25                     	.db $33, $25
088B7 04 25                     	.db $04, $25
088B9 05 25                     	.db $05, $25
088BB 37 27 F0 6F               	.db $37, $27, $F0, $6F
088BF F0 D4                     	.db $F0, $D4
088C1 F1 4A                     	.db $F1, $4A
088C3 FF                        	.db $FF
088C4                           include "src/levels/2/2-2/2-2-area3.asm"
088C4                           ; Level 2-2, Area 3
088C4                           
088C4                           LevelData_2_2_Area3:
088C4                           	; Level Header
088C4                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
088C4                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
088C4                           	levelHeader 3, LevelDirection_Vertical, 1, 1, LevelMusic_Underground, 0, 1, $12, $1
088C4 09                        	.db LevelDirection_Vertical << 7 | 1 << 3 | 1
088C5 F2                        	.db %11100000 | $12
088C6 31                        	.db 3 << 4 | 0 << 2 | 1
088C7                           	IFNDEF LEVEL_ENGINE_UPGRADES
088C7 09                        		.db $1 << 3 | LevelMusic_Underground
088C8                           	ENDIF
088C8                           	IFDEF LEVEL_ENGINE_UPGRADES
088C8                           		.db $1 << 4 | LevelMusic_Underground
088C8                           	ENDIF
088C8                           
088C8 02 8A                     	.db $02, $8A
088CA 03 8A                     	.db $03, $8A
088CC 04 8A                     	.db $04, $8A
088CE 05 8A                     	.db $05, $8A
088D0 06 8A                     	.db $06, $8A
088D2 07 8A                     	.db $07, $8A
088D4 08 8A                     	.db $08, $8A
088D6 09 8A                     	.db $09, $8A
088D8 62 12                     	.db $62, $12
088DA 77 80                     	.db $77, $80
088DC 07 29                     	.db $07, $29
088DE F5 04 19                  	.db $F5, $04, $19
088E1 AC 80                     	.db $AC, $80
088E3 0C 29                     	.db $0C, $29
088E5 54 80                     	.db $54, $80
088E7 04 29                     	.db $04, $29
088E9 F0 51                     	.db $F0, $51
088EB F1 6D                     	.db $F1, $6D
088ED 3B 80                     	.db $3B, $80
088EF 0B 29                     	.db $0B, $29
088F1 52 82                     	.db $52, $82
088F3 03 82                     	.db $03, $82
088F5 04 82                     	.db $04, $82
088F7 05 82                     	.db $05, $82
088F9 23 29                     	.db $23, $29
088FB F1 6E                     	.db $F1, $6E
088FD F2                        	.db $F2
088FE 9A 83                     	.db $9A, $83
08900 0B 83                     	.db $0B, $83
08902 0C 83                     	.db $0C, $83
08904 0D 83                     	.db $0D, $83
08906 0E 83                     	.db $0E, $83
08908 2C 0A                     	.db $2C, $0A
0890A                           IFNDEF DISABLE_DOOR_POINTERS
0890A                           	.db $04, $50
0890A                           ENDIF
0890A                           IFDEF DISABLE_DOOR_POINTERS
0890A F5 04 50                  	.db $F5, $04, $50
0890D                           ENDIF
0890D F1 A0                     	.db $F1, $A0
0890F FF                        	.db $FF
08910                           include "src/levels/2/2-2/2-2-area4.asm"
08910                           ; Level 2-2, Area 4
08910                           
08910                           LevelData_2_2_Area4:
08910                           	; Level Header
08910                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08910                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08910                           	levelHeader 0, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
08910 18                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
08911 E3                        	.db %11100000 | $03
08912 01                        	.db 0 << 4 | 0 << 2 | 1
08913                           	IFNDEF LEVEL_ENGINE_UPGRADES
08913 01                        		.db $0 << 3 | LevelMusic_Underground
08914                           	ENDIF
08914                           	IFDEF LEVEL_ENGINE_UPGRADES
08914                           		.db $0 << 4 | LevelMusic_Underground
08914                           	ENDIF
08914                           
08914 54 32                     	.db $54, $32
08916 09 32                     	.db $09, $32
08918 15 30                     	.db $15, $30
0891A 0A 30                     	.db $0A, $30
0891C 27 31                     	.db $27, $31
0891E 24 31                     	.db $24, $31
08920 0A 31                     	.db $0A, $31
08922 15 31                     	.db $15, $31
08924 09 31                     	.db $09, $31
08926 16 33                     	.db $16, $33
08928 1B 24                     	.db $1B, $24
0892A F0 44                     	.db $F0, $44
0892C F0 65                     	.db $F0, $65
0892E F0 86                     	.db $F0, $86
08930 F0 A7                     	.db $F0, $A7
08932 F1 86                     	.db $F1, $86
08934 F1 A3                     	.db $F1, $A3
08936 F1 C8                     	.db $F1, $C8
08938 FF                        	.db $FF
08939                           include "src/levels/2/2-2/2-2-area5.asm"
08939                           ; Level 2-2, Area 5
08939                           
08939                           LevelData_2_2_Area5:
08939                           	; Level Header
08939                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08939                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08939                           	levelHeader 2, LevelDirection_Horizontal, 1, 1, LevelMusic_Boss, 0, 2, $0a, $3
08939 89                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
0893A EA                        	.db %11100000 | $0a
0893B 22                        	.db 2 << 4 | 0 << 2 | 2
0893C                           	IFNDEF LEVEL_ENGINE_UPGRADES
0893C 1A                        		.db $3 << 3 | LevelMusic_Boss
0893D                           	ENDIF
0893D                           	IFDEF LEVEL_ENGINE_UPGRADES
0893D                           		.db $3 << 4 | LevelMusic_Boss
0893D                           	ENDIF
0893D                           
0893D 43 0A                     	.db $43, $0A
0893F                           IFNDEF DISABLE_DOOR_POINTERS
0893F                           	.db $04, $33
0893F                           ENDIF
0893F                           IFDEF DISABLE_DOOR_POINTERS
0893F F5 04 33                  	.db $F5, $04, $33
08942                           ENDIF
08942 F0 4E                     	.db $F0, $4E
08944 F1 4F                     	.db $F1, $4F
08946 F1 BC                     	.db $F1, $BC
08948 F2                        	.db $F2
08949 64 4E                     	.db $64, $4E
0894B 64 00                     	.db $64, $00
0894D 07 00                     	.db $07, $00
0894F 08 00                     	.db $08, $00
08951 F0 13                     	.db $F0, $13
08953 F0 8D                     	.db $F0, $8D
08955 70 46                     	.db $70, $46
08957 10 42                     	.db $10, $42
08959 F0 88 F0 EC               	.db $F0, $88, $F0, $EC
0895D F1 2B                     	.db $F1, $2B
0895F F1 8A                     	.db $F1, $8A
08961 F5 05 00                  	.db $F5, $05, $00
08964 FF                        	.db $FF
08965                           
08965                           ; World 2-3
08965                           include "src/levels/2/2-3/2-3-area0.asm"
08965                           ; Level 2-3, Area 0
08965                           
08965                           LevelData_2_3_Area0:
08965                           	; Level Header
08965                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08965                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08965                           	levelHeader 0, LevelDirection_Horizontal, 1, 1, LevelMusic_Underground, 0, 0, $0a, $0
08965 89                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
08966 EA                        	.db %11100000 | $0a
08967 00                        	.db 0 << 4 | 0 << 2 | 0
08968                           	IFNDEF LEVEL_ENGINE_UPGRADES
08968 01                        		.db $0 << 3 | LevelMusic_Underground
08969                           	ENDIF
08969                           	IFDEF LEVEL_ENGINE_UPGRADES
08969                           		.db $0 << 4 | LevelMusic_Underground
08969                           	ENDIF
08969                           
08969 09 A9                     	.db $09, $A9
0896B F5 05 11                  	.db $F5, $05, $11
0896E F0 2F                     	.db $F0, $2F
08970 F0 CC                     	.db $F0, $CC
08972 F1 8F                     	.db $F1, $8F
08974 F1 EA                     	.db $F1, $EA
08976 FF                        	.db $FF
08977                           include "src/levels/2/2-3/2-3-area1.asm"
08977                           ; Level 2-3, Area 1
08977                           
08977                           LevelData_2_3_Area1:
08977                           	; Level Header
08977                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08977                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08977                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0c, $0
08977 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
08978 EC                        	.db %11100000 | $0c
08979 90                        	.db 9 << 4 | 0 << 2 | 0
0897A                           	IFNDEF LEVEL_ENGINE_UPGRADES
0897A 00                        		.db $0 << 3 | LevelMusic_Overworld
0897B                           	ENDIF
0897B                           	IFDEF LEVEL_ENGINE_UPGRADES
0897B                           		.db $0 << 4 | LevelMusic_Overworld
0897B                           	ENDIF
0897B                           
0897B 00 89                     	.db $00, $89
0897D 01 89                     	.db $01, $89
0897F 02 89                     	.db $02, $89
08981 03 89                     	.db $03, $89
08983 25 29                     	.db $25, $29
08985 1C 29                     	.db $1C, $29
08987 18 2B                     	.db $18, $2B
08989 16 C4                     	.db $16, $C4
0898B 2B 21                     	.db $2B, $21
0898D 1A C2                     	.db $1A, $C2
0898F 95 11                     	.db $95, $11
08991 08 10                     	.db $08, $10
08993 66 A6                     	.db $66, $A6
08995 F5 05 00                  	.db $F5, $05, $00
08998 12 32                     	.db $12, $32
0899A 09 32                     	.db $09, $32
0899C 0D 26                     	.db $0D, $26
0899E 0E 21                     	.db $0E, $21
089A0 0F 21                     	.db $0F, $21
089A2 14 31                     	.db $14, $31
089A4 06 05                     	.db $06, $05
089A6 07 32                     	.db $07, $32
089A8 14 31                     	.db $14, $31
089AA 07 32                     	.db $07, $32
089AC 14 31                     	.db $14, $31
089AE 07 32                     	.db $07, $32
089B0 14 31                     	.db $14, $31
089B2 07 32                     	.db $07, $32
089B4 14 31                     	.db $14, $31
089B6 06 05                     	.db $06, $05
089B8 07 32                     	.db $07, $32
089BA 53 29                     	.db $53, $29
089BC 31 0F                     	.db $31, $0F
089BE 0F 29                     	.db $0F, $29
089C0 23 21                     	.db $23, $21
089C2 05 21                     	.db $05, $21
089C4 71 C2                     	.db $71, $C2
089C6 1E 29                     	.db $1E, $29
089C8 02 0B                     	.db $02, $0B
089CA                           IFNDEF DISABLE_DOOR_POINTERS
089CA                           	.db $05, $20
089CA                           ENDIF
089CA                           IFDEF DISABLE_DOOR_POINTERS
089CA F5 05 20                  	.db $F5, $05, $20
089CD                           ENDIF
089CD 16 22                     	.db $16, $22
089CF 09 22                     	.db $09, $22
089D1 11 C2                     	.db $11, $C2
089D3 05 C3                     	.db $05, $C3
089D5 09 C2                     	.db $09, $C2
089D7 0E C3                     	.db $0E, $C3
089D9 DD 11                     	.db $DD, $11
089DB 5D 0F                     	.db $5D, $0F
089DD C3 29                     	.db $C3, $29
089DF 39 0F                     	.db $39, $0F
089E1 13 0F                     	.db $13, $0F
089E3 0E 0F                     	.db $0E, $0F
089E5 F1 4C                     	.db $F1, $4C
089E7 F6 01                     	.db $F6, $01
089E9 F1 CC                     	.db $F1, $CC
089EB F6 00                     	.db $F6, $00
089ED 90 10                     	.db $90, $10
089EF 0E 10                     	.db $0E, $10
089F1 12 11                     	.db $12, $11
089F3 52 0F                     	.db $52, $0F
089F5 06 0F                     	.db $06, $0F
089F7 0A 0F                     	.db $0A, $0F
089F9 1E D1                     	.db $1E, $D1
089FB F0 6C                     	.db $F0, $6C
089FD F6 01                     	.db $F6, $01
089FF F0 CC                     	.db $F0, $CC
08A01 F6 00                     	.db $F6, $00
08A03 86 11                     	.db $86, $11
08A05 31 29                     	.db $31, $29
08A07 08 29                     	.db $08, $29
08A09 43 D2                     	.db $43, $D2
08A0B 0A D1                     	.db $0A, $D1
08A0D F0 0C                     	.db $F0, $0C
08A0F F6 02                     	.db $F6, $02
08A11 F0 6C                     	.db $F0, $6C
08A13 F6 00                     	.db $F6, $00
08A15 F0 CC                     	.db $F0, $CC
08A17 F6 02                     	.db $F6, $02
08A19 F1 4C                     	.db $F1, $4C
08A1B F6 00                     	.db $F6, $00
08A1D 84 10                     	.db $84, $10
08A1F 52 0F                     	.db $52, $0F
08A21 0E 0F                     	.db $0E, $0F
08A23 C8 17                     	.db $C8, $17
08A25 47 0B                     	.db $47, $0B
08A27                           IFNDEF DISABLE_DOOR_POINTERS
08A27                           	.db $05, $30
08A27                           ENDIF
08A27                           IFDEF DISABLE_DOOR_POINTERS
08A27 F5 05 30                  	.db $F5, $05, $30
08A2A                           ENDIF
08A2A F4                        	.db $F4
08A2B 26 16                     	.db $26, $16
08A2D 09 16                     	.db $09, $16
08A2F FF                        	.db $FF
08A30                           include "src/levels/2/2-3/2-3-area2.asm"
08A30                           ; Level 2-3, Area 2
08A30                           
08A30                           LevelData_2_3_Area2:
08A30                           	; Level Header
08A30                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08A30                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08A30                           	levelHeader 1, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 0, $0a, $3
08A30 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
08A31 EA                        	.db %11100000 | $0a
08A32 10                        	.db 1 << 4 | 0 << 2 | 0
08A33                           	IFNDEF LEVEL_ENGINE_UPGRADES
08A33 19                        		.db $3 << 3 | LevelMusic_Underground
08A34                           	ENDIF
08A34                           	IFDEF LEVEL_ENGINE_UPGRADES
08A34                           		.db $3 << 4 | LevelMusic_Underground
08A34                           	ENDIF
08A34                           
08A34 8A 2D                     	.db $8A, $2D
08A36 0D 13                     	.db $0D, $13
08A38                           IFNDEF DISABLE_DOOR_POINTERS
08A38                           	.db $05, $13
08A38                           ENDIF
08A38                           IFDEF DISABLE_DOOR_POINTERS
08A38 F5 05 13                  	.db $F5, $05, $13
08A3B                           ENDIF
08A3B 18 54                     	.db $18, $54
08A3D 0B 21                     	.db $0B, $21
08A3F F1 0F                     	.db $F1, $0F
08A41 F2                        	.db $F2
08A42 90 26                     	.db $90, $26
08A44 01 52                     	.db $01, $52
08A46 F0 8A                     	.db $F0, $8A
08A48 FF                        	.db $FF
08A49                           include "src/levels/2/2-3/2-3-area3.asm"
08A49                           ; Level 2-3, Area 3
08A49                           
08A49                           LevelData_2_3_Area3:
08A49                           	; Level Header
08A49                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08A49                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08A49                           	levelHeader 6, LevelDirection_Vertical, 1, 1, LevelMusic_Underground, 0, 1, $01, $1
08A49 09                        	.db LevelDirection_Vertical << 7 | 1 << 3 | 1
08A4A E1                        	.db %11100000 | $01
08A4B 61                        	.db 6 << 4 | 0 << 2 | 1
08A4C                           	IFNDEF LEVEL_ENGINE_UPGRADES
08A4C 09                        		.db $1 << 3 | LevelMusic_Underground
08A4D                           	ENDIF
08A4D                           	IFDEF LEVEL_ENGINE_UPGRADES
08A4D                           		.db $1 << 4 | LevelMusic_Underground
08A4D                           	ENDIF
08A4D                           
08A4D 68 14                     	.db $68, $14
08A4F                           IFNDEF DISABLE_DOOR_POINTERS
08A4F                           	.db $05, $19
08A4F                           ENDIF
08A4F                           IFDEF DISABLE_DOOR_POINTERS
08A4F F5 05 19                  	.db $F5, $05, $19
08A52                           ENDIF
08A52 5C 31                     	.db $5C, $31
08A54 13 31                     	.db $13, $31
08A56 F0 35                     	.db $F0, $35
08A58 F1 1C                     	.db $F1, $1C
08A5A 6B 29                     	.db $6B, $29
08A5C 9D 29                     	.db $9D, $29
08A5E A8 28                     	.db $A8, $28
08A60 3A 34                     	.db $3A, $34
08A62 F0 75                     	.db $F0, $75
08A64 F1 1C                     	.db $F1, $1C
08A66 F1 75                     	.db $F1, $75
08A68 82 2C                     	.db $82, $2C
08A6A 06 2C                     	.db $06, $2C
08A6C 09 2C                     	.db $09, $2C
08A6E 0D 2C                     	.db $0D, $2C
08A70 24 2C                     	.db $24, $2C
08A72 0B 2C                     	.db $0B, $2C
08A74 5C 09                     	.db $5C, $09
08A76                           IFNDEF DISABLE_DOOR_POINTERS
08A76                           	.db $05, $50
08A76                           ENDIF
08A76                           IFDEF DISABLE_DOOR_POINTERS
08A76 F5 05 50                  	.db $F5, $05, $50
08A79                           ENDIF
08A79 F1 33                     	.db $F1, $33
08A7B F1 92                     	.db $F1, $92
08A7D BB 29                     	.db $BB, $29
08A7F 54 29                     	.db $54, $29
08A81 F0 6F                     	.db $F0, $6F
08A83 92 29                     	.db $92, $29
08A85 5D 29                     	.db $5D, $29
08A87 F0 0D                     	.db $F0, $0D
08A89 B6 83                     	.db $B6, $83
08A8B 07 83                     	.db $07, $83
08A8D 08 83                     	.db $08, $83
08A8F 09 83                     	.db $09, $83
08A91 28 0A                     	.db $28, $0A
08A93                           IFNDEF DISABLE_DOOR_POINTERS
08A93                           	.db $05, $70
08A93                           ENDIF
08A93                           IFDEF DISABLE_DOOR_POINTERS
08A93 F5 05 70                  	.db $F5, $05, $70
08A96                           ENDIF
08A96 1B 29                     	.db $1B, $29
08A98 F0 0E                     	.db $F0, $0E
08A9A F0 CD                     	.db $F0, $CD
08A9C F1 4E                     	.db $F1, $4E
08A9E F1 A0                     	.db $F1, $A0
08AA0 FF                        	.db $FF
08AA1                           include "src/levels/2/2-3/2-3-area4.asm"
08AA1                           ; Level 2-3, Area 4
08AA1                           
08AA1                           LevelData_2_3_Area4:
08AA1                           	; Level Header
08AA1                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08AA1                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08AA1                           	levelHeader 0, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
08AA1 18                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
08AA2 E3                        	.db %11100000 | $03
08AA3 01                        	.db 0 << 4 | 0 << 2 | 1
08AA4                           	IFNDEF LEVEL_ENGINE_UPGRADES
08AA4 01                        		.db $0 << 3 | LevelMusic_Underground
08AA5                           	ENDIF
08AA5                           	IFDEF LEVEL_ENGINE_UPGRADES
08AA5                           		.db $0 << 4 | LevelMusic_Underground
08AA5                           	ENDIF
08AA5                           
08AA5 54 31                     	.db $54, $31
08AA7 0A 31                     	.db $0A, $31
08AA9 15 31                     	.db $15, $31
08AAB 09 31                     	.db $09, $31
08AAD 26 33                     	.db $26, $33
08AAF 15 31                     	.db $15, $31
08AB1 09 31                     	.db $09, $31
08AB3 14 30                     	.db $14, $30
08AB5 0B 30                     	.db $0B, $30
08AB7 28 28                     	.db $28, $28
08AB9 F0 44                     	.db $F0, $44
08ABB F0 65                     	.db $F0, $65
08ABD F0 86                     	.db $F0, $86
08ABF F0 A7                     	.db $F0, $A7
08AC1 F1 66                     	.db $F1, $66
08AC3 F1 84                     	.db $F1, $84
08AC5 F1 A0                     	.db $F1, $A0
08AC7 FF                        	.db $FF
08AC8                           include "src/levels/2/2-3/2-3-area5.asm"
08AC8                           ; Level 2-3, Area 5
08AC8                           
08AC8                           LevelData_2_3_Area5:
08AC8                           	; Level Header
08AC8                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08AC8                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08AC8                           	levelHeader 6, LevelDirection_Horizontal, 1, 1, LevelMusic_Boss, 0, 2, $0a, $3
08AC8 89                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
08AC9 EA                        	.db %11100000 | $0a
08ACA 62                        	.db 6 << 4 | 0 << 2 | 2
08ACB                           	IFNDEF LEVEL_ENGINE_UPGRADES
08ACB 1A                        		.db $3 << 3 | LevelMusic_Boss
08ACC                           	ENDIF
08ACC                           	IFDEF LEVEL_ENGINE_UPGRADES
08ACC                           		.db $3 << 4 | LevelMusic_Boss
08ACC                           	ENDIF
08ACC                           
08ACC 43 0A                     	.db $43, $0A
08ACE                           IFNDEF DISABLE_DOOR_POINTERS
08ACE                           	.db $05, $33
08ACE                           ENDIF
08ACE                           IFDEF DISABLE_DOOR_POINTERS
08ACE F5 05 33                  	.db $F5, $05, $33
08AD1                           ENDIF
08AD1 2C 35                     	.db $2C, $35
08AD3 1C 35                     	.db $1C, $35
08AD5 1C 35                     	.db $1C, $35
08AD7 1C 35                     	.db $1C, $35
08AD9 0D 29                     	.db $0D, $29
08ADB F0 4E                     	.db $F0, $4E
08ADD F1 8F                     	.db $F1, $8F
08ADF C2 3F                     	.db $C2, $3F
08AE1 12 3F                     	.db $12, $3F
08AE3 12 3F                     	.db $12, $3F
08AE5 0B 29                     	.db $0B, $29
08AE7 12 3F                     	.db $12, $3F
08AE9 10 3F                     	.db $10, $3F
08AEB 03 29                     	.db $03, $29
08AED 10 3F                     	.db $10, $3F
08AEF 10 3F                     	.db $10, $3F
08AF1 08 29                     	.db $08, $29
08AF3 F0 1C                     	.db $F0, $1C
08AF5 62 29                     	.db $62, $29
08AF7 2F 34                     	.db $2F, $34
08AF9 1F 34                     	.db $1F, $34
08AFB 1F 34                     	.db $1F, $34
08AFD 1E 36                     	.db $1E, $36
08AFF 1D 38                     	.db $1D, $38
08B01 1C 3A                     	.db $1C, $3A
08B03 1B 3C                     	.db $1B, $3C
08B05 1A 3E                     	.db $1A, $3E
08B07 F0 0F                     	.db $F0, $0F
08B09 F0 4E                     	.db $F0, $4E
08B0B F0 CF                     	.db $F0, $CF
08B0D F1 0D                     	.db $F1, $0D
08B0F F2                        	.db $F2
08B10 F1 CC                     	.db $F1, $CC
08B12 F2 73                     	.db $F2, $73
08B14 0F 06                     	.db $0F, $06
08B16 07 11                     	.db $07, $11
08B18 0F F1                     	.db $0F, $F1
08B1A 2D F2                     	.db $2D, $F2
08B1C A0 07                     	.db $A0, $07
08B1E 06 07                     	.db $06, $07
08B20 22 42                     	.db $22, $42
08B22 F0 10                     	.db $F0, $10
08B24 F2                        	.db $F2
08B25 F0 CF                     	.db $F0, $CF
08B27 F1 4A                     	.db $F1, $4A
08B29 F5 05 60                  	.db $F5, $05, $60
08B2C FF                        	.db $FF
08B2D                           include "src/levels/2/2-3/2-3-area6.asm"
08B2D                           ; Level 2-3, Area 6
08B2D                           
08B2D                           LevelData_2_3_Area6:
08B2D                           	; Level Header
08B2D                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08B2D                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08B2D                           	levelHeader 1, LevelDirection_Horizontal, 5, 2, LevelMusic_Boss, 0, 3, $0a, $5
08B2D AA                        	.db LevelDirection_Horizontal << 7 | 5 << 3 | 2
08B2E EA                        	.db %11100000 | $0a
08B2F 13                        	.db 1 << 4 | 0 << 2 | 3
08B30                           	IFNDEF LEVEL_ENGINE_UPGRADES
08B30 2A                        		.db $5 << 3 | LevelMusic_Boss
08B31                           	ENDIF
08B31                           	IFDEF LEVEL_ENGINE_UPGRADES
08B31                           		.db $5 << 4 | LevelMusic_Boss
08B31                           	ENDIF
08B31                           
08B31 8E 30                     	.db $8E, $30
08B33 F0 CD                     	.db $F0, $CD
08B35 F1 52                     	.db $F1, $52
08B37 F1 CD                     	.db $F1, $CD
08B39 E4 32                     	.db $E4, $32
08B3B 1A 33                     	.db $1A, $33
08B3D 1C 83                     	.db $1C, $83
08B3F 0D 83                     	.db $0D, $83
08B41 10 00                     	.db $10, $00
08B43 01 00                     	.db $01, $00
08B45 02 00                     	.db $02, $00
08B47 03 33                     	.db $03, $33
08B49 10 00                     	.db $10, $00
08B4B 01 00                     	.db $01, $00
08B4D 02 00                     	.db $02, $00
08B4F                           IFDEF EXTENDED_PTR_CONTINUE:
08B4F F5 86 00                      .db $F5, $86, $00 
08B52                           ENDIF
08B52 F0 16                     	.db $F0, $16
08B54 F0 6D                     	.db $F0, $6D
08B56 F1 CA                     	.db $F1, $CA
08B58 FF                        	.db $FF
08B59                           include "src/levels/2/2-3/2-3-area7.asm"
08B59                           ; Level 2-3, Area 7
08B59                           
08B59                           LevelData_2_3_Area7:
08B59                           	; Level Header
08B59                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08B59                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08B59                           	levelHeader 0, LevelDirection_Vertical, 1, 1, LevelMusic_Underground, 0, 3, $00, $2
08B59 09                        	.db LevelDirection_Vertical << 7 | 1 << 3 | 1
08B5A E0                        	.db %11100000 | $00
08B5B 03                        	.db 0 << 4 | 0 << 2 | 3
08B5C                           	IFNDEF LEVEL_ENGINE_UPGRADES
08B5C 11                        		.db $2 << 3 | LevelMusic_Underground
08B5D                           	ENDIF
08B5D                           	IFDEF LEVEL_ENGINE_UPGRADES
08B5D                           		.db $2 << 4 | LevelMusic_Underground
08B5D                           	ENDIF
08B5D                           
08B5D 32 2C                     	.db $32, $2C
08B5F 0D 2C                     	.db $0D, $2C
08B61 22 2C                     	.db $22, $2C
08B63 0D 2C                     	.db $0D, $2C
08B65 22 2C                     	.db $22, $2C
08B67 0D 2C                     	.db $0D, $2C
08B69 15 35                     	.db $15, $35
08B6B 27 0A                     	.db $27, $0A
08B6D                           IFNDEF DISABLE_DOOR_POINTERS
08B6D                           	.db $05, $36
08B6D                           ENDIF
08B6D                           IFDEF DISABLE_DOOR_POINTERS
08B6D F5 05 36                  	.db $F5, $05, $36
08B70                           ENDIF
08B70 F0 41                     	.db $F0, $41
08B72 F1 80                     	.db $F1, $80
08B74 FF                        	.db $FF
08B75                           ; -------------------------------
08B75                           
08B75                           
08B75                           ; -------------------------------
08B75                           ; World 3
08B75                           
08B75                           ; World 3-1
08B75                           include "src/levels/3/3-1/3-1-area0.asm"
08B75                           ; Level 3-1, Area 0
08B75                           
08B75                           LevelData_3_1_Area0:
08B75                           	; Level Header
08B75                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08B75                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08B75                           	levelHeader 1, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0a, $2
08B75 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
08B76 EA                        	.db %11100000 | $0a
08B77 10                        	.db 1 << 4 | 0 << 2 | 0
08B78                           	IFNDEF LEVEL_ENGINE_UPGRADES
08B78 10                        		.db $2 << 3 | LevelMusic_Overworld
08B79                           	ENDIF
08B79                           	IFDEF LEVEL_ENGINE_UPGRADES
08B79                           		.db $2 << 4 | LevelMusic_Overworld
08B79                           	ENDIF
08B79                           
08B79 13 10                     	.db $13, $10
08B7B 14 11                     	.db $14, $11
08B7D 1A 16                     	.db $1A, $16
08B7F 0B 16                     	.db $0B, $16
08B81 F0 42                     	.db $F0, $42
08B83 EA C2                     	.db $EA, $C2
08B85 16 C1                     	.db $16, $C1
08B87 18 F1                     	.db $18, $F1
08B89 0C C3                     	.db $0C, $C3
08B8B 14 C4                     	.db $14, $C4
08B8D 0D 0B                     	.db $0D, $0B
08B8F                           IFNDEF DISABLE_DOOR_POINTERS
08B8F                           	.db $06, $16
08B8F                           ENDIF
08B8F                           IFDEF DISABLE_DOOR_POINTERS
08B8F F5 06 16                  	.db $F5, $06, $16
08B92                           ENDIF
08B92 F1 28                     	.db $F1, $28
08B94 F1 42                     	.db $F1, $42
08B96 FF                        	.db $FF
08B97                           include "src/levels/3/3-1/3-1-area1.asm"
08B97                           ; Level 3-1, Area 1
08B97                           
08B97                           LevelData_3_1_Area1:
08B97                           	; Level Header
08B97                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08B97                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08B97                           	levelHeader 9, LevelDirection_Vertical, 0, 0, LevelMusic_Overworld, 0, 0, $13, $1
08B97 00                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 0
08B98 F3                        	.db %11100000 | $13
08B99 90                        	.db 9 << 4 | 0 << 2 | 0
08B9A                           	IFNDEF LEVEL_ENGINE_UPGRADES
08B9A 08                        		.db $1 << 3 | LevelMusic_Overworld
08B9B                           	ENDIF
08B9B                           	IFDEF LEVEL_ENGINE_UPGRADES
08B9B                           		.db $1 << 4 | LevelMusic_Overworld
08B9B                           	ENDIF
08B9B                           
08B9B 6C 10                     	.db $6C, $10
08B9D 52 10                     	.db $52, $10
08B9F 18 12                     	.db $18, $12
08BA1 F5 06 31                  	.db $F5, $06, $31
08BA4 C3 10                     	.db $C3, $10
08BA6 46 10                     	.db $46, $10
08BA8 9C 10                     	.db $9C, $10
08BAA 34 10                     	.db $34, $10
08BAC 70 FF                     	.db $70, $FF
08BAE B4 E2                     	.db $B4, $E2
08BB0 F0 6C                     	.db $F0, $6C
08BB2 34 E2                     	.db $34, $E2
08BB4 38 E1                     	.db $38, $E1
08BB6 3A E1                     	.db $3A, $E1
08BB8 3C E2                     	.db $3C, $E2
08BBA 3A E1                     	.db $3A, $E1
08BBC 38 E1                     	.db $38, $E1
08BBE 35 E1                     	.db $35, $E1
08BC0 32 E3                     	.db $32, $E3
08BC2 37 E1                     	.db $37, $E1
08BC4 37 E4                     	.db $37, $E4
08BC6 3B E2                     	.db $3B, $E2
08BC8 10 C2                     	.db $10, $C2
08BCA 2B E2                     	.db $2B, $E2
08BCC 20 C3                     	.db $20, $C3
08BCE 1B E2                     	.db $1B, $E2
08BD0 20 C4                     	.db $20, $C4
08BD2 12 0B                     	.db $12, $0B
08BD4                           IFNDEF DISABLE_DOOR_POINTERS
08BD4                           	.db $06, $01
08BD4                           ENDIF
08BD4                           IFDEF DISABLE_DOOR_POINTERS
08BD4 F5 06 01                  	.db $F5, $06, $01
08BD7                           ENDIF
08BD7 08 E3                     	.db $08, $E3
08BD9 F1 91                     	.db $F1, $91
08BDB F2                        	.db $F2
08BDC F1 8A                     	.db $F1, $8A
08BDE F3                        	.db $F3
08BDF 76 C1                     	.db $76, $C1
08BE1 27 C2                     	.db $27, $C2
08BE3 18 0B                     	.db $18, $0B
08BE5                           IFNDEF DISABLE_DOOR_POINTERS
08BE5                           	.db $06, $20
08BE5                           ENDIF
08BE5                           IFDEF DISABLE_DOOR_POINTERS
08BE5 F5 06 20                  	.db $F5, $06, $20
08BE8                           ENDIF
08BE8 F1 8B                     	.db $F1, $8B
08BEA F1 AB                     	.db $F1, $AB
08BEC F6 07                     	.db $F6, $07
08BEE FF                        	.db $FF
08BEF                           include "src/levels/3/3-1/3-1-area2.asm"
08BEF                           ; Level 3-1, Area 2
08BEF                           
08BEF                           LevelData_3_1_Area2:
08BEF                           	; Level Header
08BEF                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08BEF                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08BEF                           	levelHeader 2, LevelDirection_Horizontal, 1, 1, LevelMusic_Underground, 0, 0, $0a, $2
08BEF 89                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
08BF0 EA                        	.db %11100000 | $0a
08BF1 20                        	.db 2 << 4 | 0 << 2 | 0
08BF2                           	IFNDEF LEVEL_ENGINE_UPGRADES
08BF2 11                        		.db $2 << 3 | LevelMusic_Underground
08BF3                           	ENDIF
08BF3                           	IFDEF LEVEL_ENGINE_UPGRADES
08BF3                           		.db $2 << 4 | LevelMusic_Underground
08BF3                           	ENDIF
08BF3                           
08BF3 87 13                     	.db $87, $13
08BF5                           IFNDEF DISABLE_DOOR_POINTERS
08BF5                           	.db $06, $19
08BF5                           ENDIF
08BF5                           IFDEF DISABLE_DOOR_POINTERS
08BF5 F5 06 19                  	.db $F5, $06, $19
08BF8                           ENDIF
08BF8 F0 D1                     	.db $F0, $D1
08BFA F2                        	.db $F2
08BFB 94 5E                     	.db $94, $5E
08BFD 0D 26                     	.db $0D, $26
08BFF F2                        	.db $F2
08C00 BB 08                     	.db $BB, $08
08C02 0D 0A                     	.db $0D, $0A
08C04                           IFNDEF DISABLE_DOOR_POINTERS
08C04                           	.db $06, $16
08C04                           ENDIF
08C04                           IFDEF DISABLE_DOOR_POINTERS
08C04 F5 06 16                  	.db $F5, $06, $16
08C07                           ENDIF
08C07 F1 10                     	.db $F1, $10
08C09 F1 CA                     	.db $F1, $CA
08C0B FF                        	.db $FF
08C0C                           include "src/levels/3/3-1/3-1-area3.asm"
08C0C                           ; Level 3-1, Area 3
08C0C                           
08C0C                           LevelData_3_1_Area3:
08C0C                           	; Level Header
08C0C                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08C0C                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08C0C                           	levelHeader 5, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 3, $08, $2
08C0C 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
08C0D E8                        	.db %11100000 | $08
08C0E 53                        	.db 5 << 4 | 0 << 2 | 3
08C0F                           	IFNDEF LEVEL_ENGINE_UPGRADES
08C0F 10                        		.db $2 << 3 | LevelMusic_Overworld
08C10                           	ENDIF
08C10                           	IFDEF LEVEL_ENGINE_UPGRADES
08C10                           		.db $2 << 4 | LevelMusic_Overworld
08C10                           	ENDIF
08C10                           
08C10 56 10                     	.db $56, $10
08C12 2A 11                     	.db $2A, $11
08C14 2E 10                     	.db $2E, $10
08C16 12 0A                     	.db $12, $0A
08C18                           IFNDEF DISABLE_DOOR_POINTERS
08C18                           	.db $06, $43
08C18                           ENDIF
08C18                           IFDEF DISABLE_DOOR_POINTERS
08C18 F5 06 43                  	.db $F5, $06, $43
08C1B                           ENDIF
08C1B 17 11                     	.db $17, $11
08C1D 10 E4                     	.db $10, $E4
08C1F 08 10                     	.db $08, $10
08C21 1C 10                     	.db $1C, $10
08C23 7C 00                     	.db $7C, $00
08C25 1C E2                     	.db $1C, $E2
08C27 27 0C                     	.db $27, $0C
08C29 F5 06 10                  	.db $F5, $06, $10
08C2C 1F E2                     	.db $1F, $E2
08C2E 2F 00                     	.db $2F, $00
08C30 10 E6                     	.db $10, $E6
08C32 07 03                     	.db $07, $03
08C34 08 EA                     	.db $08, $EA
08C36 60 E2                     	.db $60, $E2
08C38 26 E2                     	.db $26, $E2
08C3A 12 2B                     	.db $12, $2B
08C3C 26 26                     	.db $26, $26
08C3E 07 22                     	.db $07, $22
08C40 0D E2                     	.db $0D, $E2
08C42 16 C1                     	.db $16, $C1
08C44 20 00                     	.db $20, $00
08C46 01 00                     	.db $01, $00
08C48 0A E3                     	.db $0A, $E3
08C4A 79 E3                     	.db $79, $E3
08C4C 22 00                     	.db $22, $00
08C4E 10 E3                     	.db $10, $E3
08C50 07 E3                     	.db $07, $E3
08C52 36 E2                     	.db $36, $E2
08C54 34 C1                     	.db $34, $C1
08C56 0A E2                     	.db $0A, $E2
08C58 50 2D                     	.db $50, $2D
08C5A 29 A8                     	.db $29, $A8
08C5C 18 21                     	.db $18, $21
08C5E 19 05                     	.db $19, $05
08C60 31 21                     	.db $31, $21
08C62 3D 26                     	.db $3D, $26
08C64 0E 21                     	.db $0E, $21
08C66 0F 21                     	.db $0F, $21
08C68 F0 0C                     	.db $F0, $0C
08C6A F0 4B                     	.db $F0, $4B
08C6C F0 95                     	.db $F0, $95
08C6E F2                        	.db $F2
08C6F 4E 0B                     	.db $4E, $0B
08C71                           IFNDEF DISABLE_DOOR_POINTERS
08C71                           	.db $06, $40
08C71                           ENDIF
08C71                           IFDEF DISABLE_DOOR_POINTERS
08C71 F5 06 40                  	.db $F5, $06, $40
08C74                           ENDIF
08C74 80 21                     	.db $80, $21
08C76 01 21                     	.db $01, $21
08C78 02 21                     	.db $02, $21
08C7A F0 8B                     	.db $F0, $8B
08C7C F1 28                     	.db $F1, $28
08C7E F1 8B                     	.db $F1, $8B
08C80 F1 CA                     	.db $F1, $CA
08C82 FF                        	.db $FF
08C83                           include "src/levels/3/3-1/3-1-area4.asm"
08C83                           ; Level 3-1, Area 4
08C83                           
08C83                           LevelData_3_1_Area4:
08C83                           	; Level Header
08C83                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08C83                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08C83                           	levelHeader 3, LevelDirection_Horizontal, 2, 1, LevelMusic_Boss, 0, 2, $0a, $2
08C83 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
08C84 EA                        	.db %11100000 | $0a
08C85 32                        	.db 3 << 4 | 0 << 2 | 2
08C86                           	IFNDEF LEVEL_ENGINE_UPGRADES
08C86 12                        		.db $2 << 3 | LevelMusic_Boss
08C87                           	ENDIF
08C87                           	IFDEF LEVEL_ENGINE_UPGRADES
08C87                           		.db $2 << 4 | LevelMusic_Boss
08C87                           	ENDIF
08C87                           
08C87 41 13                     	.db $41, $13
08C89                           IFNDEF DISABLE_DOOR_POINTERS
08C89                           	.db $06, $35
08C89                           ENDIF
08C89                           IFDEF DISABLE_DOOR_POINTERS
08C89 F5 06 35                  	.db $F5, $06, $35
08C8C                           ENDIF
08C8C F0 2E                     	.db $F0, $2E
08C8E F2                        	.db $F2
08C8F 67 36                     	.db $67, $36
08C91 3D 00                     	.db $3D, $00
08C93 1D 00                     	.db $1D, $00
08C95 14 35                     	.db $14, $35
08C97 10 31                     	.db $10, $31
08C99 F0 08                     	.db $F0, $08
08C9B F1 59                     	.db $F1, $59
08C9D F1 CA                     	.db $F1, $CA
08C9F F5 07 00                  	.db $F5, $07, $00
08CA2 F3                        	.db $F3
08CA3 26 83                     	.db $26, $83
08CA5 20 81                     	.db $20, $81
08CA7 0D 14                     	.db $0D, $14
08CA9                           IFNDEF DISABLE_DOOR_POINTERS
08CA9                           	.db $06, $30
08CA9                           ENDIF
08CA9                           IFDEF DISABLE_DOOR_POINTERS
08CA9 F5 06 30                  	.db $F5, $06, $30
08CAC                           ENDIF
08CAC 18 25                     	.db $18, $25
08CAE 09 25                     	.db $09, $25
08CB0 F0 0B                     	.db $F0, $0B
08CB2 F0 4E                     	.db $F0, $4E
08CB4 F1 EA                     	.db $F1, $EA
08CB6 FF                        	.db $FF
08CB7                           
08CB7                           ; World 3-2
08CB7                           include "src/levels/3/3-2/3-2-area0.asm"
08CB7                           ; Level 3-2, Area 0
08CB7                           
08CB7                           LevelData_3_2_Area0:
08CB7                           	; Level Header
08CB7                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08CB7                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08CB7                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 2, 0, $0a, $2
08CB7 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
08CB8 EA                        	.db %11100000 | $0a
08CB9 98                        	.db 9 << 4 | 2 << 2 | 0
08CBA                           	IFNDEF LEVEL_ENGINE_UPGRADES
08CBA 10                        		.db $2 << 3 | LevelMusic_Overworld
08CBB                           	ENDIF
08CBB                           	IFDEF LEVEL_ENGINE_UPGRADES
08CBB                           		.db $2 << 4 | LevelMusic_Overworld
08CBB                           	ENDIF
08CBB                           
08CBB 2F 16                     	.db $2F, $16
08CBD 9C 0A                     	.db $9C, $0A
08CBF                           IFNDEF DISABLE_DOOR_POINTERS
08CBF                           	.db $07, $23
08CBF                           ENDIF
08CBF                           IFDEF DISABLE_DOOR_POINTERS
08CBF F5 07 23                  	.db $F5, $07, $23
08CC2                           ENDIF
08CC2 F0 82                     	.db $F0, $82
08CC4 F6 00                     	.db $F6, $00
08CC6 F1 04                     	.db $F1, $04
08CC8 66 16                     	.db $66, $16
08CCA 0D 16                     	.db $0D, $16
08CCC 2A 0F                     	.db $2A, $0F
08CCE 17 0F                     	.db $17, $0F
08CD0 53 A4                     	.db $53, $A4
08CD2 33 05                     	.db $33, $05
08CD4 F5 07 11                  	.db $F5, $07, $11
08CD7 F0 62                     	.db $F0, $62
08CD9 44 16                     	.db $44, $16
08CDB 1C CD                     	.db $1C, $CD
08CDD 11 0F                     	.db $11, $0F
08CDF 16 0F                     	.db $16, $0F
08CE1 09 C4                     	.db $09, $C4
08CE3 52 A4                     	.db $52, $A4
08CE5 32 05                     	.db $32, $05
08CE7 F5 07 12                  	.db $F5, $07, $12
08CEA F0 64                     	.db $F0, $64
08CEC 7C 0F                     	.db $7C, $0F
08CEE 1E 51                     	.db $1E, $51
08CF0 42 A4                     	.db $42, $A4
08CF2 32 05                     	.db $32, $05
08CF4 F5 07 13                  	.db $F5, $07, $13
08CF7 F0 42                     	.db $F0, $42
08CF9 46 16                     	.db $46, $16
08CFB 0B 16                     	.db $0B, $16
08CFD 31 0F                     	.db $31, $0F
08CFF 52 A4                     	.db $52, $A4
08D01 32 05                     	.db $32, $05
08D03 F5 07 14                  	.db $F5, $07, $14
08D06 F0 64                     	.db $F0, $64
08D08 40 16                     	.db $40, $16
08D0A 05 16                     	.db $05, $16
08D0C 92 A3                     	.db $92, $A3
08D0E 22 05                     	.db $22, $05
08D10 F5 07 15                  	.db $F5, $07, $15
08D13 F0 C6                     	.db $F0, $C6
08D15 F2                        	.db $F2
08D16 2A 16                     	.db $2A, $16
08D18 1D 16                     	.db $1D, $16
08D1A 44 01                     	.db $44, $01
08D1C 05 01                     	.db $05, $01
08D1E F0 04                     	.db $F0, $04
08D20 F0 85                     	.db $F0, $85
08D22 F0 C4                     	.db $F0, $C4
08D24 F1 03                     	.db $F1, $03
08D26 F1 44                     	.db $F1, $44
08D28 A3 16                     	.db $A3, $16
08D2A 0C 16                     	.db $0C, $16
08D2C 26 0F                     	.db $26, $0F
08D2E 11 0F                     	.db $11, $0F
08D30 0A 0F                     	.db $0A, $0F
08D32 F1 83                     	.db $F1, $83
08D34 F1 C4                     	.db $F1, $C4
08D36 F2                        	.db $F2
08D37 25 16                     	.db $25, $16
08D39 17 16                     	.db $17, $16
08D3B 3E 25                     	.db $3E, $25
08D3D 52 A3                     	.db $52, $A3
08D3F 22 05                     	.db $22, $05
08D41 F5 07 17                  	.db $F5, $07, $17
08D44 57 26                     	.db $57, $26
08D46 09 22                     	.db $09, $22
08D48 0B 22                     	.db $0B, $22
08D4A 0C 2B                     	.db $0C, $2B
08D4C 16 C6                     	.db $16, $C6
08D4E 20 25                     	.db $20, $25
08D50 12 02                     	.db $12, $02
08D52 03 02                     	.db $03, $02
08D54 F0 45                     	.db $F0, $45
08D56 F0 82                     	.db $F0, $82
08D58 F1 AA                     	.db $F1, $AA
08D5A F6 02                     	.db $F6, $02
08D5C FF                        	.db $FF
08D5D                           include "src/levels/3/3-2/3-2-area1.asm"
08D5D                           ; Level 3-2, Area 1
08D5D                           
08D5D                           LevelData_3_2_Area1:
08D5D                           	; Level Header
08D5D                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08D5D                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08D5D                           	levelHeader 7, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 2, $0a, $2
08D5D 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
08D5E EA                        	.db %11100000 | $0a
08D5F 72                        	.db 7 << 4 | 0 << 2 | 2
08D60                           	IFNDEF LEVEL_ENGINE_UPGRADES
08D60 11                        		.db $2 << 3 | LevelMusic_Underground
08D61                           	ENDIF
08D61                           	IFDEF LEVEL_ENGINE_UPGRADES
08D61                           		.db $2 << 4 | LevelMusic_Underground
08D61                           	ENDIF
08D61                           
08D61 97 25                     	.db $97, $25
08D63 09 21                     	.db $09, $21
08D65 0B 21                     	.db $0B, $21
08D67 0D 26                     	.db $0D, $26
08D69 13 02                     	.db $13, $02
08D6B 04 02                     	.db $04, $02
08D6D 05 02                     	.db $05, $02
08D6F 06 02                     	.db $06, $02
08D71 0E 02                     	.db $0E, $02
08D73 0F 02                     	.db $0F, $02
08D75 2F 2D                     	.db $2F, $2D
08D77 F0 70                     	.db $F0, $70
08D79 F0 EF                     	.db $F0, $EF
08D7B F1 D0                     	.db $F1, $D0
08D7D 3C AC                     	.db $3C, $AC
08D7F F5 07 01                  	.db $F5, $07, $01
08D82 6C 05                     	.db $6C, $05
08D84 40 02                     	.db $40, $02
08D86 01 02                     	.db $01, $02
08D88 0C 05                     	.db $0C, $05
08D8A F0 4F                     	.db $F0, $4F
08D8C F0 8E                     	.db $F0, $8E
08D8E F1 B1                     	.db $F1, $B1
08D90 5D AC                     	.db $5D, $AC
08D92 F5 07 02                  	.db $F5, $07, $02
08D95 56 25                     	.db $56, $25
08D97 08 25                     	.db $08, $25
08D99 0A 25                     	.db $0A, $25
08D9B 14 83                     	.db $14, $83
08D9D 0D 05                     	.db $0D, $05
08D9F F0 BC                     	.db $F0, $BC
08DA1 F0 D5                     	.db $F0, $D5
08DA3 9D A9                     	.db $9D, $A9
08DA5 F5 07 03                  	.db $F5, $07, $03
08DA8 F0 17                     	.db $F0, $17
08DAA F1 8F                     	.db $F1, $8F
08DAC F1 F7                     	.db $F1, $F7
08DAE F2                        	.db $F2
08DAF 0D A9                     	.db $0D, $A9
08DB1 F5 07 04                  	.db $F5, $07, $04
08DB4 86 41                     	.db $86, $41
08DB6 16 41                     	.db $16, $41
08DB8 F0 2F                     	.db $F0, $2F
08DBA F0 97                     	.db $F0, $97
08DBC F0 CF                     	.db $F0, $CF
08DBE F1 17                     	.db $F1, $17
08DC0 F1 4F                     	.db $F1, $4F
08DC2 F1 CA                     	.db $F1, $CA
08DC4 6D A5                     	.db $6D, $A5
08DC6 F5 07 05                  	.db $F5, $07, $05
08DC9 65 32                     	.db $65, $32
08DCB 3F 83                     	.db $3F, $83
08DCD F0 4F                     	.db $F0, $4F
08DCF F0 BC                     	.db $F0, $BC
08DD1 F1 15                     	.db $F1, $15
08DD3 F1 D3                     	.db $F1, $D3
08DD5 89 83                     	.db $89, $83
08DD7 23 A8                     	.db $23, $A8
08DD9 0E A8                     	.db $0E, $A8
08DDB 11 01                     	.db $11, $01
08DDD 05 25                     	.db $05, $25
08DDF 06 25                     	.db $06, $25
08DE1 0C 25                     	.db $0C, $25
08DE3 0D 25                     	.db $0D, $25
08DE5 13 05                     	.db $13, $05
08DE7 0E 05                     	.db $0E, $05
08DE9 32 83                     	.db $32, $83
08DEB 05 83                     	.db $05, $83
08DED 0D 83                     	.db $0D, $83
08DEF 37 25                     	.db $37, $25
08DF1 09 25                     	.db $09, $25
08DF3 F0 15                     	.db $F0, $15
08DF5 3D A5                     	.db $3D, $A5
08DF7 50 25                     	.db $50, $25
08DF9 F5 07 08                  	.db $F5, $07, $08
08DFC F0 7C                     	.db $F0, $7C
08DFE F0 88                     	.db $F0, $88
08E00 F0 CC                     	.db $F0, $CC
08E02 F1 0E                     	.db $F1, $0E
08E04 F1 CA                     	.db $F1, $CA
08E06 FF                        	.db $FF
08E07                           include "src/levels/3/3-2/3-2-area2.asm"
08E07                           ; Level 3-2, Area 2
08E07                           
08E07                           LevelData_3_2_Area2:
08E07                           	; Level Header
08E07                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08E07                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08E07                           	levelHeader 3, LevelDirection_Horizontal, 2, 1, LevelMusic_Boss, 0, 0, $0a, $2
08E07 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
08E08 EA                        	.db %11100000 | $0a
08E09 30                        	.db 3 << 4 | 0 << 2 | 0
08E0A                           	IFNDEF LEVEL_ENGINE_UPGRADES
08E0A 12                        		.db $2 << 3 | LevelMusic_Boss
08E0B                           	ENDIF
08E0B                           	IFDEF LEVEL_ENGINE_UPGRADES
08E0B                           		.db $2 << 4 | LevelMusic_Boss
08E0B                           	ENDIF
08E0B                           
08E0B 83 00                     	.db $83, $00
08E0D 04 00                     	.db $04, $00
08E0F 05 00                     	.db $05, $00
08E11 06 00                     	.db $06, $00
08E13 07 00                     	.db $07, $00
08E15 08 49                     	.db $08, $49
08E17 F0 7C                     	.db $F0, $7C
08E19 D8 47                     	.db $D8, $47
08E1B F0 55                     	.db $F0, $55
08E1D F1 1C                     	.db $F1, $1C
08E1F F5 08 00                  	.db $F5, $08, $00
08E22 F2                        	.db $F2
08E23 F0 0E                     	.db $F0, $0E
08E25 F2                        	.db $F2
08E26 43 0A                     	.db $43, $0A
08E28                           IFNDEF DISABLE_DOOR_POINTERS
08E28                           	.db $07, $00
08E28                           ENDIF
08E28                           IFDEF DISABLE_DOOR_POINTERS
08E28 F5 07 00                  	.db $F5, $07, $00
08E2B                           ENDIF
08E2B F0 CA                     	.db $F0, $CA
08E2D FF                        	.db $FF
08E2E                           
08E2E                           ; World 3-3
08E2E                           include "src/levels/3/3-3/3-3-area0.asm"
08E2E                           ; Level 3-3, Area 0
08E2E                           
08E2E                           LevelData_3_3_Area0:
08E2E                           	; Level Header
08E2E                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08E2E                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08E2E                           	levelHeader 1, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 0, $0a, $2
08E2E 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
08E2F EA                        	.db %11100000 | $0a
08E30 10                        	.db 1 << 4 | 0 << 2 | 0
08E31                           	IFNDEF LEVEL_ENGINE_UPGRADES
08E31 11                        		.db $2 << 3 | LevelMusic_Underground
08E32                           	ENDIF
08E32                           	IFDEF LEVEL_ENGINE_UPGRADES
08E32                           		.db $2 << 4 | LevelMusic_Underground
08E32                           	ENDIF
08E32                           
08E32 F0 94                     	.db $F0, $94
08E34 F2                        	.db $F2
08E35 48 13                     	.db $48, $13
08E37                           IFNDEF DISABLE_DOOR_POINTERS
08E37                           	.db $08, $10
08E37                           ENDIF
08E37                           IFDEF DISABLE_DOOR_POINTERS
08E37 F5 08 10                  	.db $F5, $08, $10
08E3A                           ENDIF
08E3A 54 83                     	.db $54, $83
08E3C 13 82                     	.db $13, $82
08E3E F0 50                     	.db $F0, $50
08E40 F0 AE                     	.db $F0, $AE
08E42 F1 8A                     	.db $F1, $8A
08E44 FF                        	.db $FF
08E45                           include "src/levels/3/3-3/3-3-area1.asm"
08E45                           ; Level 3-3, Area 1
08E45                           
08E45                           LevelData_3_3_Area1:
08E45                           	; Level Header
08E45                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08E45                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08E45                           	levelHeader 3, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $01, $0
08E45 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
08E46 E1                        	.db %11100000 | $01
08E47 30                        	.db 3 << 4 | 0 << 2 | 0
08E48                           	IFNDEF LEVEL_ENGINE_UPGRADES
08E48 00                        		.db $0 << 3 | LevelMusic_Overworld
08E49                           	ENDIF
08E49                           	IFDEF LEVEL_ENGINE_UPGRADES
08E49                           		.db $0 << 4 | LevelMusic_Overworld
08E49                           	ENDIF
08E49                           
08E49 35 10                     	.db $35, $10
08E4B 29 11                     	.db $29, $11
08E4D 36 C2                     	.db $36, $C2
08E4F 17 0B                     	.db $17, $0B
08E51                           IFNDEF DISABLE_DOOR_POINTERS
08E51                           	.db $08, $01
08E51                           ENDIF
08E51                           IFDEF DISABLE_DOOR_POINTERS
08E51 F5 08 01                  	.db $F5, $08, $01
08E54                           ENDIF
08E54 1E 0F                     	.db $1E, $0F
08E56 8B 11                     	.db $8B, $11
08E58 17 10                     	.db $17, $10
08E5A 32 2B                     	.db $32, $2B
08E5C 12 0F                     	.db $12, $0F
08E5E 10 0F                     	.db $10, $0F
08E60 13 01                     	.db $13, $01
08E62 05 52                     	.db $05, $52
08E64 08 26                     	.db $08, $26
08E66 5C 18                     	.db $5C, $18
08E68 45 10                     	.db $45, $10
08E6A 49 0F                     	.db $49, $0F
08E6C 72 18                     	.db $72, $18
08E6E 08 18                     	.db $08, $18
08E70 96 0A                     	.db $96, $0A
08E72                           IFNDEF DISABLE_DOOR_POINTERS
08E72                           	.db $08, $23
08E72                           ENDIF
08E72                           IFDEF DISABLE_DOOR_POINTERS
08E72 F5 08 23                  	.db $F5, $08, $23
08E75                           ENDIF
08E75 FF                        	.db $FF
08E76                           include "src/levels/3/3-3/3-3-area2.asm"
08E76                           ; Level 3-3, Area 2
08E76                           
08E76                           LevelData_3_3_Area2:
08E76                           	; Level Header
08E76                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08E76                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08E76                           	levelHeader 3, LevelDirection_Horizontal, 4, 0, LevelMusic_Underground, 0, 3, $0a, $3
08E76 A0                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 0
08E77 EA                        	.db %11100000 | $0a
08E78 33                        	.db 3 << 4 | 0 << 2 | 3
08E79                           	IFNDEF LEVEL_ENGINE_UPGRADES
08E79 19                        		.db $3 << 3 | LevelMusic_Underground
08E7A                           	ENDIF
08E7A                           	IFDEF LEVEL_ENGINE_UPGRADES
08E7A                           		.db $3 << 4 | LevelMusic_Underground
08E7A                           	ENDIF
08E7A                           
08E7A 55 01                     	.db $55, $01
08E7C 0B 2D                     	.db $0B, $2D
08E7E 6C 09                     	.db $6C, $09
08E80                           IFNDEF DISABLE_DOOR_POINTERS
08E80                           	.db $08, $39
08E80                           ENDIF
08E80                           IFDEF DISABLE_DOOR_POINTERS
08E80 F5 08 39                  	.db $F5, $08, $39
08E83                           ENDIF
08E83 F0 5C                     	.db $F0, $5C
08E85 F0 75                     	.db $F0, $75
08E87 F1 1C                     	.db $F1, $1C
08E89 F1 55                     	.db $F1, $55
08E8B 82 A8                     	.db $82, $A8
08E8D 22 05                     	.db $22, $05
08E8F 55 0A                     	.db $55, $0A
08E91                           IFNDEF DISABLE_DOOR_POINTERS
08E91                           	.db $08, $46
08E91                           ENDIF
08E91                           IFDEF DISABLE_DOOR_POINTERS
08E91 F5 08 46                  	.db $F5, $08, $46
08E94                           ENDIF
08E94 F1 9C                     	.db $F1, $9C
08E96 F1 D5                     	.db $F1, $D5
08E98 AC 0A                     	.db $AC, $0A
08E9A                           IFNDEF DISABLE_DOOR_POINTERS
08E9A                           	.db $08, $53
08E9A                           ENDIF
08E9A                           IFDEF DISABLE_DOOR_POINTERS
08E9A F5 08 53                  	.db $F5, $08, $53
08E9D                           ENDIF
08E9D 0D 82                     	.db $0D, $82
08E9F 19 81                     	.db $19, $81
08EA1 1A 80                     	.db $1A, $80
08EA3 0B 80                     	.db $0B, $80
08EA5 0C 80                     	.db $0C, $80
08EA7 F0 5C                     	.db $F0, $5C
08EA9 F0 95                     	.db $F0, $95
08EAB F0 FC                     	.db $F0, $FC
08EAD F2                        	.db $F2
08EAE B9 14                     	.db $B9, $14
08EB0                           IFNDEF DISABLE_DOOR_POINTERS
08EB0                           	.db $08, $13
08EB0                           ENDIF
08EB0                           IFDEF DISABLE_DOOR_POINTERS
08EB0 F5 08 13                  	.db $F5, $08, $13
08EB3                           ENDIF
08EB3 11 2A                     	.db $11, $2A
08EB5 03 26                     	.db $03, $26
08EB7 05 24                     	.db $05, $24
08EB9 0C 28                     	.db $0C, $28
08EBB F0 14                     	.db $F0, $14
08EBD F1 CA                     	.db $F1, $CA
08EBF FF                        	.db $FF
08EC0                           include "src/levels/3/3-3/3-3-area3.asm"
08EC0                           ; Level 3-3, Area 3
08EC0                           
08EC0                           LevelData_3_3_Area3:
08EC0                           	; Level Header
08EC0                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08EC0                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08EC0                           	levelHeader 9, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 0, 3, $00, $3
08EC0 20                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
08EC1 E0                        	.db %11100000 | $00
08EC2 93                        	.db 9 << 4 | 0 << 2 | 3
08EC3                           	IFNDEF LEVEL_ENGINE_UPGRADES
08EC3 19                        		.db $3 << 3 | LevelMusic_Underground
08EC4                           	ENDIF
08EC4                           	IFDEF LEVEL_ENGINE_UPGRADES
08EC4                           		.db $3 << 4 | LevelMusic_Underground
08EC4                           	ENDIF
08EC4                           
08EC4 15 AB                     	.db $15, $AB
08EC6 18 0A                     	.db $18, $0A
08EC8                           IFNDEF DISABLE_DOOR_POINTERS
08EC8                           	.db $08, $70
08EC8                           ENDIF
08EC8                           IFDEF DISABLE_DOOR_POINTERS
08EC8 F5 08 70                  	.db $F5, $08, $70
08ECB                           ENDIF
08ECB 26 80                     	.db $26, $80
08ECD 07 80                     	.db $07, $80
08ECF 08 80                     	.db $08, $80
08ED1 09 80                     	.db $09, $80
08ED3 0A 80                     	.db $0A, $80
08ED5 F0 35                     	.db $F0, $35
08ED7 C4 31                     	.db $C4, $31
08ED9 36 33                     	.db $36, $33
08EDB 3A 32                     	.db $3A, $32
08EDD 34 29                     	.db $34, $29
08EDF 16 33                     	.db $16, $33
08EE1 33 32                     	.db $33, $32
08EE3 36 33                     	.db $36, $33
08EE5 3A 33                     	.db $3A, $33
08EE7 36 33                     	.db $36, $33
08EE9 42 34                     	.db $42, $34
08EEB 12 30                     	.db $12, $30
08EED 03 29                     	.db $03, $29
08EEF 05 29                     	.db $05, $29
08EF1 06 30                     	.db $06, $30
08EF3 0D 29                     	.db $0D, $29
08EF5 12 30                     	.db $12, $30
08EF7 F0 14                     	.db $F0, $14
08EF9 12 30                     	.db $12, $30
08EFB 04 28                     	.db $04, $28
08EFD 09 32                     	.db $09, $32
08EFF 12 34                     	.db $12, $34
08F01 1A 29                     	.db $1A, $29
08F03 16 29                     	.db $16, $29
08F05 0C 84                     	.db $0C, $84
08F07 0D 84                     	.db $0D, $84
08F09 28 83                     	.db $28, $83
08F0B 09 83                     	.db $09, $83
08F0D 24 81                     	.db $24, $81
08F0F 05 81                     	.db $05, $81
08F11 42 38                     	.db $42, $38
08F13 0D 0A                     	.db $0D, $0A
08F15                           IFNDEF DISABLE_DOOR_POINTERS
08F15                           	.db $08, $40
08F15                           ENDIF
08F15                           IFDEF DISABLE_DOOR_POINTERS
08F15 F5 08 40                  	.db $F5, $08, $40
08F18                           ENDIF
08F18 0E A8                     	.db $0E, $A8
08F1A 2E 05                     	.db $2E, $05
08F1C F1 B7                     	.db $F1, $B7
08F1E 87 2C                     	.db $87, $2C
08F20 69 AF                     	.db $69, $AF
08F22 F0 54                     	.db $F0, $54
08F24 F1 D6                     	.db $F1, $D6
08F26 76 AE                     	.db $76, $AE
08F28 99 A5                     	.db $99, $A5
08F2A F0 57                     	.db $F0, $57
08F2C 83 00                     	.db $83, $00
08F2E 0C 00                     	.db $0C, $00
08F30 17 31                     	.db $17, $31
08F32 16 33                     	.db $16, $33
08F34 15 35                     	.db $15, $35
08F36 16 33                     	.db $16, $33
08F38 1D 0A                     	.db $1D, $0A
08F3A                           IFNDEF DISABLE_DOOR_POINTERS
08F3A                           	.db $08, $43
08F3A                           ENDIF
08F3A                           IFDEF DISABLE_DOOR_POINTERS
08F3A F5 08 43                  	.db $F5, $08, $43
08F3D                           ENDIF
08F3D 3D AC                     	.db $3D, $AC
08F3F F0 56                     	.db $F0, $56
08F41 F0 94                     	.db $F0, $94
08F43 F1 B6                     	.db $F1, $B6
08F45 F1 D5                     	.db $F1, $D5
08F47 16 33                     	.db $16, $33
08F49 45 35                     	.db $45, $35
08F4B 15 30                     	.db $15, $30
08F4D 0A 30                     	.db $0A, $30
08F4F 15 30                     	.db $15, $30
08F51 0A 30                     	.db $0A, $30
08F53 15 35                     	.db $15, $35
08F55 46 33                     	.db $46, $33
08F57 38 82                     	.db $38, $82
08F59 11 A9                     	.db $11, $A9
08F5B 07 80                     	.db $07, $80
08F5D 09 80                     	.db $09, $80
08F5F 3B 84                     	.db $3B, $84
08F61 29 80                     	.db $29, $80
08F63 0A 80                     	.db $0A, $80
08F65 0C 80                     	.db $0C, $80
08F67 0D 80                     	.db $0D, $80
08F69 37 84                     	.db $37, $84
08F6B 25 80                     	.db $25, $80
08F6D 06 80                     	.db $06, $80
08F6F 08 80                     	.db $08, $80
08F71 09 80                     	.db $09, $80
08F73 32 31                     	.db $32, $31
08F75 F0 14                     	.db $F0, $14
08F77 3C 82                     	.db $3C, $82
08F79 1B 80                     	.db $1B, $80
08F7B 0D 80                     	.db $0D, $80
08F7D 3D 31                     	.db $3D, $31
08F7F 3C 82                     	.db $3C, $82
08F81 1B 80                     	.db $1B, $80
08F83 0D 80                     	.db $0D, $80
08F85 23 0A                     	.db $23, $0A
08F87                           IFNDEF DISABLE_DOOR_POINTERS
08F87                           	.db $08, $20
08F87                           ENDIF
08F87                           IFDEF DISABLE_DOOR_POINTERS
08F87 F5 08 20                  	.db $F5, $08, $20
08F8A                           ENDIF
08F8A F0 1A                     	.db $F0, $1A
08F8C F1 74                     	.db $F1, $74
08F8E F1 A0                     	.db $F1, $A0
08F90 FF                        	.db $FF
08F91                           include "src/levels/3/3-3/3-3-area4.asm"
08F91                           ; Level 3-3, Area 4
08F91                           
08F91                           LevelData_3_3_Area4:
08F91                           	; Level Header
08F91                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08F91                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08F91                           	levelHeader 6, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 1, 3, $00, $3
08F91 20                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
08F92 E0                        	.db %11100000 | $00
08F93 67                        	.db 6 << 4 | 1 << 2 | 3
08F94                           	IFNDEF LEVEL_ENGINE_UPGRADES
08F94 19                        		.db $3 << 3 | LevelMusic_Underground
08F95                           	ENDIF
08F95                           	IFDEF LEVEL_ENGINE_UPGRADES
08F95                           		.db $3 << 4 | LevelMusic_Underground
08F95                           	ENDIF
08F95                           
08F95 AE 30                     	.db $AE, $30
08F97 12 0A                     	.db $12, $0A
08F99                           IFNDEF DISABLE_DOOR_POINTERS
08F99                           	.db $08, $33
08F99                           ENDIF
08F99                           IFDEF DISABLE_DOOR_POINTERS
08F99 F5 08 33                  	.db $F5, $08, $33
08F9C                           ENDIF
08F9C 0E AE                     	.db $0E, $AE
08F9E 2A 87                     	.db $2A, $87
08FA0 0B 87                     	.db $0B, $87
08FA2 F0 94                     	.db $F0, $94
08FA4 F1 BA                     	.db $F1, $BA
08FA6 2C 31                     	.db $2C, $31
08FA8 1C A9                     	.db $1C, $A9
08FAA 52 AF                     	.db $52, $AF
08FAC 04 A4                     	.db $04, $A4
08FAE 06 A4                     	.db $06, $A4
08FB0 08 A4                     	.db $08, $A4
08FB2 0A A4                     	.db $0A, $A4
08FB4 F0 D4                     	.db $F0, $D4
08FB6 93 3B                     	.db $93, $3B
08FB8 AA 31                     	.db $AA, $31
08FBA 3A 32                     	.db $3A, $32
08FBC F1 5A                     	.db $F1, $5A
08FBE 3C 32                     	.db $3C, $32
08FC0 68 31                     	.db $68, $31
08FC2 36 33                     	.db $36, $33
08FC4 12 0A                     	.db $12, $0A
08FC6                           IFNDEF DISABLE_DOOR_POINTERS
08FC6                           	.db $08, $36
08FC6                           ENDIF
08FC6                           IFDEF DISABLE_DOOR_POINTERS
08FC6 F5 08 36                  	.db $F5, $08, $36
08FC9                           ENDIF
08FC9 F0 1B                     	.db $F0, $1B
08FCB F0 98                     	.db $F0, $98
08FCD F1 BB                     	.db $F1, $BB
08FCF A6 31                     	.db $A6, $31
08FD1 48 31                     	.db $48, $31
08FD3 36 33                     	.db $36, $33
08FD5 F0 F8                     	.db $F0, $F8
08FD7 66 31                     	.db $66, $31
08FD9 36 33                     	.db $36, $33
08FDB 68 31                     	.db $68, $31
08FDD F0 3B                     	.db $F0, $3B
08FDF F1 58                     	.db $F1, $58
08FE1 36 33                     	.db $36, $33
08FE3 66 31                     	.db $66, $31
08FE5 36 33                     	.db $36, $33
08FE7 1A 0A                     	.db $1A, $0A
08FE9                           IFNDEF DISABLE_DOOR_POINTERS
08FE9                           	.db $08, $21
08FE9                           ENDIF
08FE9                           IFDEF DISABLE_DOOR_POINTERS
08FE9 F5 08 21                  	.db $F5, $08, $21
08FEC                           ENDIF
08FEC F0 9B                     	.db $F0, $9B
08FEE F1 A0                     	.db $F1, $A0
08FF0 FF                        	.db $FF
08FF1                           include "src/levels/3/3-3/3-3-area5.asm"
08FF1                           ; Level 3-3, Area 5
08FF1                           
08FF1                           LevelData_3_3_Area5:
08FF1                           	; Level Header
08FF1                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
08FF1                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
08FF1                           	levelHeader 3, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 1, 3, $00, $3
08FF1 20                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
08FF2 E0                        	.db %11100000 | $00
08FF3 37                        	.db 3 << 4 | 1 << 2 | 3
08FF4                           	IFNDEF LEVEL_ENGINE_UPGRADES
08FF4 19                        		.db $3 << 3 | LevelMusic_Underground
08FF5                           	ENDIF
08FF5                           	IFDEF LEVEL_ENGINE_UPGRADES
08FF5                           		.db $3 << 4 | LevelMusic_Underground
08FF5                           	ENDIF
08FF5                           
08FF5 A0 37                     	.db $A0, $37
08FF7 1B 0A                     	.db $1B, $0A
08FF9                           IFNDEF DISABLE_DOOR_POINTERS
08FF9                           	.db $08, $60
08FF9                           ENDIF
08FF9                           IFDEF DISABLE_DOOR_POINTERS
08FF9 F5 08 60                  	.db $F5, $08, $60
08FFC                           ENDIF
08FFC 27 38                     	.db $27, $38
08FFE F0 9E                     	.db $F0, $9E
09000 F0 F3                     	.db $F0, $F3
09002 F1 5E                     	.db $F1, $5E
09004 F1 D3                     	.db $F1, $D3
09006 26 04                     	.db $26, $04
09008 10 37                     	.db $10, $37
0900A 37 38                     	.db $37, $38
0900C 26 04                     	.db $26, $04
0900E 10 37                     	.db $10, $37
09010 37 38                     	.db $37, $38
09012 26 04                     	.db $26, $04
09014 10 37                     	.db $10, $37
09016 F0 3E                     	.db $F0, $3E
09018 F0 B3                     	.db $F0, $B3
0901A F0 FE                     	.db $F0, $FE
0901C F1 73                     	.db $F1, $73
0901E F1 BE                     	.db $F1, $BE
09020 37 38                     	.db $37, $38
09022 26 04                     	.db $26, $04
09024 10 37                     	.db $10, $37
09026 37 38                     	.db $37, $38
09028 26 04                     	.db $26, $04
0902A 10 37                     	.db $10, $37
0902C 37 38                     	.db $37, $38
0902E F0 53                     	.db $F0, $53
09030 F0 9E                     	.db $F0, $9E
09032 F1 13                     	.db $F1, $13
09034 F1 5E                     	.db $F1, $5E
09036 F1 D3                     	.db $F1, $D3
09038 26 04                     	.db $26, $04
0903A 10 37                     	.db $10, $37
0903C 37 38                     	.db $37, $38
0903E 26 04                     	.db $26, $04
09040 10 37                     	.db $10, $37
09042 43 0A                     	.db $43, $0A
09044                           IFNDEF DISABLE_DOOR_POINTERS
09044                           	.db $08, $22
09044                           ENDIF
09044                           IFDEF DISABLE_DOOR_POINTERS
09044 F5 08 22                  	.db $F5, $08, $22
09047                           ENDIF
09047 F0 3E                     	.db $F0, $3E
09049 F0 B3                     	.db $F0, $B3
0904B F0 FE                     	.db $F0, $FE
0904D F1 59                     	.db $F1, $59
0904F F1 A0                     	.db $F1, $A0
09051 FF                        	.db $FF
09052                           include "src/levels/3/3-3/3-3-area6.asm"
09052                           ; Level 3-3, Area 6
09052                           
09052                           LevelData_3_3_Area6:
09052                           	; Level Header
09052                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09052                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09052                           	levelHeader 0, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 1, 3, $00, $3
09052 20                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
09053 E0                        	.db %11100000 | $00
09054 07                        	.db 0 << 4 | 1 << 2 | 3
09055                           	IFNDEF LEVEL_ENGINE_UPGRADES
09055 19                        		.db $3 << 3 | LevelMusic_Underground
09056                           	ENDIF
09056                           	IFDEF LEVEL_ENGINE_UPGRADES
09056                           		.db $3 << 4 | LevelMusic_Underground
09056                           	ENDIF
09056                           
09056 54 2C                     	.db $54, $2C
09058 0C 2C                     	.db $0C, $2C
0905A 57 32                     	.db $57, $32
0905C 14 0A                     	.db $14, $0A
0905E                           IFNDEF DISABLE_DOOR_POINTERS
0905E                           	.db $08, $50
0905E                           ENDIF
0905E                           IFDEF DISABLE_DOOR_POINTERS
0905E F5 08 50                  	.db $F5, $08, $50
09061                           ENDIF
09061 F0 41                     	.db $F0, $41
09063 F1 A0                     	.db $F1, $A0
09065 FF                        	.db $FF
09066                           include "src/levels/3/3-3/3-3-area7.asm"
09066                           ; Level 3-3, Area 7
09066                           
09066                           LevelData_3_3_Area7:
09066                           	; Level Header
09066                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09066                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09066                           	levelHeader 4, LevelDirection_Horizontal, 0, 0, LevelMusic_Boss, 0, 0, $1d, $3
09066 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09067 FD                        	.db %11100000 | $1d
09068 40                        	.db 4 << 4 | 0 << 2 | 0
09069                           	IFNDEF LEVEL_ENGINE_UPGRADES
09069 1A                        		.db $3 << 3 | LevelMusic_Boss
0906A                           	ENDIF
0906A                           	IFDEF LEVEL_ENGINE_UPGRADES
0906A                           		.db $3 << 4 | LevelMusic_Boss
0906A                           	ENDIF
0906A                           
0906A 3A 10                     	.db $3A, $10
0906C 27 11                     	.db $27, $11
0906E 35 34                     	.db $35, $34
09070 15 34                     	.db $15, $34
09072 15 34                     	.db $15, $34
09074 15 34                     	.db $15, $34
09076 07 0A                     	.db $07, $0A
09078                           IFNDEF DISABLE_DOOR_POINTERS
09078                           	.db $08, $30
09078                           ENDIF
09078                           IFDEF DISABLE_DOOR_POINTERS
09078 F5 08 30                  	.db $F5, $08, $30
0907B                           ENDIF
0907B 15 31                     	.db $15, $31
0907D 08 31                     	.db $08, $31
0907F 0E 24                     	.db $0E, $24
09081 6A 10                     	.db $6A, $10
09083 25 11                     	.db $25, $11
09085 54 40                     	.db $54, $40
09087 05 6B                     	.db $05, $6B
09089 8A 10                     	.db $8A, $10
0908B 2E 11                     	.db $2E, $11
0908D 50 6F                     	.db $50, $6F
0908F F0 08                     	.db $F0, $08
09091 98 10                     	.db $98, $10
09093 60 63                     	.db $60, $63
09095 06 68                     	.db $06, $68
09097 0F 40                     	.db $0F, $40
09099 F2                        	.db $F2
0909A 29 10                     	.db $29, $10
0909C 14 10                     	.db $14, $10
0909E 95 42                     	.db $95, $42
090A0 F0 4D                     	.db $F0, $4D
090A2 F1 6B                     	.db $F1, $6B
090A4 F1 E8                     	.db $F1, $E8
090A6 F5 08 80                  	.db $F5, $08, $80
090A9 FF                        	.db $FF
090AA                           include "src/levels/3/3-3/3-3-area8.asm"
090AA                           ; Level 3-3, Area 8
090AA                           
090AA                           LevelData_3_3_Area8:
090AA                           	; Level Header
090AA                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
090AA                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
090AA                           	levelHeader 1, LevelDirection_Horizontal, 5, 2, LevelMusic_Boss, 1, 3, $18, $4
090AA AA                        	.db LevelDirection_Horizontal << 7 | 5 << 3 | 2
090AB F8                        	.db %11100000 | $18
090AC 17                        	.db 1 << 4 | 1 << 2 | 3
090AD                           	IFNDEF LEVEL_ENGINE_UPGRADES
090AD 22                        		.db $4 << 3 | LevelMusic_Boss
090AE                           	ENDIF
090AE                           	IFDEF LEVEL_ENGINE_UPGRADES
090AE                           		.db $4 << 4 | LevelMusic_Boss
090AE                           	ENDIF
090AE                           
090AE 6E A4                     	.db $6E, $A4
090B0 F0 5C                     	.db $F0, $5C
090B2 F0 DD                     	.db $F0, $DD
090B4 F1 5C                     	.db $F1, $5C
090B6 F1 D9                     	.db $F1, $D9
090B8 F2                        	.db $F2
090B9 65 A4                     	.db $65, $A4
090BB 2A 33                     	.db $2A, $33
090BD                           IFDEF EXTENDED_PTR_CONTINUE:
090BD F5 89 00                      .db $F5, $89, $00 
090C0                           ENDIF
090C0 F0 DC                     	.db $F0, $DC
090C2 F1 F8                     	.db $F1, $F8
090C4 FF                        	.db $FF
090C5                           ; -------------------------------
090C5                           
090C5                           
090C5                           ; -------------------------------
090C5                           ; World 4
090C5                           
090C5                           ; World 4-1
090C5                           include "src/levels/4/4-1/4-1-area0.asm"
090C5                           ; Level 4-1, Area 0
090C5                           
090C5                           LevelData_4_1_Area0:
090C5                           	; Level Header
090C5                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
090C5                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
090C5                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0a, $2
090C5 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
090C6 EA                        	.db %11100000 | $0a
090C7 90                        	.db 9 << 4 | 0 << 2 | 0
090C8                           	IFNDEF LEVEL_ENGINE_UPGRADES
090C8 10                        		.db $2 << 3 | LevelMusic_Overworld
090C9                           	ENDIF
090C9                           	IFDEF LEVEL_ENGINE_UPGRADES
090C9                           		.db $2 << 4 | LevelMusic_Overworld
090C9                           	ENDIF
090C9                           
090C9 2C 10                     	.db $2C, $10
090CB 1E 11                     	.db $1E, $11
090CD 44 39                     	.db $44, $39
090CF 0E 3F                     	.db $0E, $3F
090D1 F0 82                     	.db $F0, $82
090D3 F1 D6                     	.db $F1, $D6
090D5 F6 05                     	.db $F6, $05
090D7 9A 10                     	.db $9A, $10
090D9 6E 32                     	.db $6E, $32
090DB A8 11                     	.db $A8, $11
090DD 1B 10                     	.db $1B, $10
090DF 43 34                     	.db $43, $34
090E1 31 32                     	.db $31, $32
090E3 08 3F                     	.db $08, $3F
090E5 6B 11                     	.db $6B, $11
090E7 68 3F                     	.db $68, $3F
090E9 38 36                     	.db $38, $36
090EB 7C 11                     	.db $7C, $11
090ED 4E 2D                     	.db $4E, $2D
090EF 1E 37                     	.db $1E, $37
090F1 2A 3C                     	.db $2A, $3C
090F3 F2                        	.db $F2
090F4 84 26                     	.db $84, $26
090F6 0A 54                     	.db $0A, $54
090F8 18 39                     	.db $18, $39
090FA 72 10                     	.db $72, $10
090FC 16 11                     	.db $16, $11
090FE 45 3A                     	.db $45, $3A
09100 0A 3B                     	.db $0A, $3B
09102 32 3F                     	.db $32, $3F
09104 78 10                     	.db $78, $10
09106 57 3F                     	.db $57, $3F
09108 CE 10                     	.db $CE, $10
0910A 37 33                     	.db $37, $33
0910C 1A 31                     	.db $1A, $31
0910E 1B 31                     	.db $1B, $31
09110 1B 32                     	.db $1B, $32
09112 1B 33                     	.db $1B, $33
09114 5E 8B                     	.db $5E, $8B
09116 0F 8B                     	.db $0F, $8B
09118 21 11                     	.db $21, $11
0911A 27 26                     	.db $27, $26
0911C 08 21                     	.db $08, $21
0911E 16 F3                     	.db $16, $F3
09120 0A 32                     	.db $0A, $32
09122 24 21                     	.db $24, $21
09124 11 2B                     	.db $11, $2B
09126 03 F6                     	.db $03, $F6
09128 10 32                     	.db $10, $32
0912A 0B 23                     	.db $0B, $23
0912C F5 09 10                  	.db $F5, $09, $10
0912F 1A F2                     	.db $1A, $F2
09131 FF                        	.db $FF09132                           include "src/levels/4/4-1/4-1-area1.asm"
09132                           ; Level 4-1, Area 1
09132                           
09132                           LevelData_4_1_Area1:
09132                           	; Level Header
09132                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09132                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09132                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Boss, 0, 0, $08, $2
09132 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09133 E8                        	.db %11100000 | $08
09134 90                        	.db 9 << 4 | 0 << 2 | 0
09135                           	IFNDEF LEVEL_ENGINE_UPGRADES
09135 12                        		.db $2 << 3 | LevelMusic_Boss
09136                           	ENDIF
09136                           	IFDEF LEVEL_ENGINE_UPGRADES
09136                           		.db $2 << 4 | LevelMusic_Boss
09136                           	ENDIF
09136                           
09136 22 10                     	.db $22, $10
09138 17 11                     	.db $17, $11
0913A 52 39                     	.db $52, $39
0913C F1 82                     	.db $F1, $82
0913E B8 10                     	.db $B8, $10
09140 2C 11                     	.db $2C, $11
09142 F0 C1                     	.db $F0, $C1
09144 F6 01                     	.db $F6, $01
09146 E1 10                     	.db $E1, $10
09148 3B 0F                     	.db $3B, $0F
0914A F1 A2                     	.db $F1, $A2
0914C F6 02                     	.db $F6, $02
0914E A3 10                     	.db $A3, $10
09150 1A 11                     	.db $1A, $11
09152 1E 0F                     	.db $1E, $0F
09154 2A 0F                     	.db $2A, $0F
09156 18 0F                     	.db $18, $0F
09158 0D 0F                     	.db $0D, $0F
0915A 26 0F                     	.db $26, $0F
0915C F0 81                     	.db $F0, $81
0915E F6 01                     	.db $F6, $01
09160 99 10                     	.db $99, $10
09162 1E 11                     	.db $1E, $11
09164 3E 0F                     	.db $3E, $0F
09166 B0 10                     	.db $B0, $10
09168 1A 10                     	.db $1A, $10
0916A 4A 0F                     	.db $4A, $0F
0916C 28 0F                     	.db $28, $0F
0916E F0 80                     	.db $F0, $80
09170 83 11                     	.db $83, $11
09172 17 10                     	.db $17, $10
09174 4D 83                     	.db $4D, $83
09176 0E 83                     	.db $0E, $83
09178 0F 83                     	.db $0F, $83
0917A 1C 82                     	.db $1C, $82
0917C 1B 81                     	.db $1B, $81
0917E 1A 80                     	.db $1A, $80
09180 F1 4D                     	.db $F1, $4D
09182 F6 02                     	.db $F6, $02
09184 6B 10                     	.db $6B, $10
09186 F0 02                     	.db $F0, $02
09188 F1 40                     	.db $F1, $40
0918A F6 01                     	.db $F6, $01
0918C F2                        	.db $F2
0918D 47 10                     	.db $47, $10
0918F 1A 11                     	.db $1A, $11
09191 4E 80                     	.db $4E, $80
09193 0F 80                     	.db $0F, $80
09195 35 80                     	.db $35, $80
09197 06 80                     	.db $06, $80
09199 07 80                     	.db $07, $80
0919B F0 A0                     	.db $F0, $A0
0919D F6 02                     	.db $F6, $02
0919F F1 01                     	.db $F1, $01
091A1 F1 6C                     	.db $F1, $6C
091A3 65 11                     	.db $65, $11
091A5 37 42                     	.db $37, $42
091A7 30 80                     	.db $30, $80
091A9 F0 22                     	.db $F0, $22
091AB F1 CA                     	.db $F1, $CA
091AD F5 0A 00                  	.db $F5, $0A, $00
091B0 FF                        	.db $FF091B1                           
091B1                           ; World 4-2
091B1                           include "src/levels/4/4-2/4-2-area0.asm"
091B1                           ; Level 4-2, Area 0
091B1                           
091B1                           LevelData_4_2_Area0:
091B1                           	; Level Header
091B1                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
091B1                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
091B1                           	levelHeader 1, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0a, $2
091B1 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
091B2 EA                        	.db %11100000 | $0a
091B3 10                        	.db 1 << 4 | 0 << 2 | 0
091B4                           	IFNDEF LEVEL_ENGINE_UPGRADES
091B4 10                        		.db $2 << 3 | LevelMusic_Overworld
091B5                           	ENDIF
091B5                           	IFDEF LEVEL_ENGINE_UPGRADES
091B5                           		.db $2 << 4 | LevelMusic_Overworld
091B5                           	ENDIF
091B5                           
091B5 AC 3C                     	.db $AC, $3C
091B7 F0 8C                     	.db $F0, $8C
091B9 F1 88                     	.db $F1, $88
091BB C8 12                     	.db $C8, $12
091BD F5 0A 10                  	.db $F5, $0A, $10
091C0 F1 2A                     	.db $F1, $2A
091C2 FF                        	.db $FF
091C3                           include "src/levels/4/4-2/4-2-area1.asm"
091C3                           ; Level 4-2, Area 1
091C3                           
091C3                           LevelData_4_2_Area1:
091C3                           	; Level Header
091C3                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
091C3                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
091C3                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $08, $2
091C3 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
091C4 E8                        	.db %11100000 | $08
091C5 90                        	.db 9 << 4 | 0 << 2 | 0
091C6                           	IFNDEF LEVEL_ENGINE_UPGRADES
091C6 10                        		.db $2 << 3 | LevelMusic_Overworld
091C7                           	ENDIF
091C7                           	IFDEF LEVEL_ENGINE_UPGRADES
091C7                           		.db $2 << 4 | LevelMusic_Overworld
091C7                           	ENDIF
091C7                           
091C7 32 10                     	.db $32, $10
091C9 14 11                     	.db $14, $11
091CB 17 0C                     	.db $17, $0C
091CD F5 0A 01                  	.db $F5, $0A, $01
091D0 0C 10                     	.db $0C, $10
091D2 4F 38                     	.db $4F, $38
091D4 2B 34                     	.db $2B, $34
091D6 23 33                     	.db $23, $33
091D8 07 03                     	.db $07, $03
091DA 08 33                     	.db $08, $33
091DC 4C 10                     	.db $4C, $10
091DE 78 3F                     	.db $78, $3F
091E0 22 10                     	.db $22, $10
091E2 0A 11                     	.db $0A, $11
091E4 7C 10                     	.db $7C, $10
091E6 68 3F                     	.db $68, $3F
091E8 A0 11                     	.db $A0, $11
091EA 58 3F                     	.db $58, $3F
091EC 26 10                     	.db $26, $10
091EE 74 10                     	.db $74, $10
091F0 12 11                     	.db $12, $11
091F2 58 3F                     	.db $58, $3F
091F4 2C 10                     	.db $2C, $10
091F6 76 10                     	.db $76, $10
091F8 3E 10                     	.db $3E, $10
091FA 38 3F                     	.db $38, $3F
091FC 88 10                     	.db $88, $10
091FE 1A 11                     	.db $1A, $11
09200 96 3F                     	.db $96, $3F
09202 74 10                     	.db $74, $10
09204 52 3F                     	.db $52, $3F
09206 3C 10                     	.db $3C, $10
09208 54 10                     	.db $54, $10
0920A 17 11                     	.db $17, $11
0920C 62 3A                     	.db $62, $3A
0920E 19 34                     	.db $19, $34
09210 1A 34                     	.db $1A, $34
09212 1B 35                     	.db $1B, $35
09214 62 10                     	.db $62, $10
09216 0B 10                     	.db $0B, $10
09218 1A 11                     	.db $1A, $11
0921A 27 0A                     	.db $27, $0A
0921C                           IFNDEF DISABLE_DOOR_POINTERS
0921C                           	.db $0A, $21
0921C                           ENDIF
0921C                           IFDEF DISABLE_DOOR_POINTERS
0921C F5 0A 21                  	.db $F5, $0A, $21
0921F                           ENDIF
0921F 26 E2                     	.db $26, $E2
09221 33 37                     	.db $33, $37
09223 FF                        	.db $FF
09224                           include "src/levels/4/4-2/4-2-area2.asm"
09224                           ; Level 4-2, Area 2
09224                           
09224                           LevelData_4_2_Area2:
09224                           	; Level Header
09224                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09224                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09224                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $16, $5
09224 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09225 F6                        	.db %11100000 | $16
09226 90                        	.db 9 << 4 | 0 << 2 | 0
09227                           	IFNDEF LEVEL_ENGINE_UPGRADES
09227 28                        		.db $5 << 3 | LevelMusic_Overworld
09228                           	ENDIF
09228                           	IFDEF LEVEL_ENGINE_UPGRADES
09228                           		.db $5 << 4 | LevelMusic_Overworld
09228                           	ENDIF
09228                           
09228 4C 10                     	.db $4C, $10
0922A 1E 11                     	.db $1E, $11
0922C 49 26                     	.db $49, $26
0922E 0A 21                     	.db $0A, $21
09230 0B 21                     	.db $0B, $21
09232 18 B5                     	.db $18, $B5
09234 0F 2B                     	.db $0F, $2B
09236 19 2E                     	.db $19, $2E
09238 78 0A                     	.db $78, $0A
0923A                           IFNDEF DISABLE_DOOR_POINTERS
0923A                           	.db $0A, $19
0923A                           ENDIF
0923A                           IFDEF DISABLE_DOOR_POINTERS
0923A F5 0A 19                  	.db $F5, $0A, $19
0923D                           ENDIF
0923D 26 E4                     	.db $26, $E4
0923F 1F 34                     	.db $1F, $34
09241 42 BD                     	.db $42, $BD
09243 15 2E                     	.db $15, $2E
09245 67 29                     	.db $67, $29
09247 0B 29                     	.db $0B, $29
09249 2A 32                     	.db $2A, $32
0924B 20 33                     	.db $20, $33
0924D 45 B4                     	.db $45, $B4
0924F 0D B4                     	.db $0D, $B4
09251 16 2E                     	.db $16, $2E
09253 0E 2E                     	.db $0E, $2E
09255 63 29                     	.db $63, $29
09257 22 33                     	.db $22, $33
09259 3B 52                     	.db $3B, $52
0925B 16 52                     	.db $16, $52
0925D 0B F2                     	.db $0B, $F2
0925F 16 F2                     	.db $16, $F2
09261 9D 29                     	.db $9D, $29
09263 12 26                     	.db $12, $26
09265 10 F2                     	.db $10, $F2
09267 14 30                     	.db $14, $30
09269 14 31                     	.db $14, $31
0926B 15 31                     	.db $15, $31
0926D 27 31                     	.db $27, $31
0926F 0B B4                     	.db $0B, $B4
09271 1C 2E                     	.db $1C, $2E
09273 56 29                     	.db $56, $29
09275 12 10                     	.db $12, $10
09277 0E 10                     	.db $0E, $10
09279 18 11                     	.db $18, $11
0927B 19 34                     	.db $19, $34
0927D 54 B6                     	.db $54, $B6
0927F 25 2E                     	.db $25, $2E
09281 6F 11                     	.db $6F, $11
09283 1B 29                     	.db $1B, $29
09285 0C 10                     	.db $0C, $10
09287 70 B4                     	.db $70, $B4
09289 09 B5                     	.db $09, $B5
0928B 11 2E                     	.db $11, $2E
0928D 0A 2E                     	.db $0A, $2E
0928F 65 34                     	.db $65, $34
09291 2C 33                     	.db $2C, $33
09293 52 B8                     	.db $52, $B8
09295 25 2E                     	.db $25, $2E
09297 80 3F                     	.db $80, $3F
09299 43 08                     	.db $43, $08
0929B 18 B5                     	.db $18, $B5
0929D 12 F3                     	.db $12, $F3
0929F 19 2E                     	.db $19, $2E
092A1 75 10                     	.db $75, $10
092A3 2C 10                     	.db $2C, $10
092A5 18 23                     	.db $18, $23
092A7 F5 0A 30                  	.db $F5, $0A, $30
092AA 0B 11                     	.db $0B, $11
092AC 10 31                     	.db $10, $31
092AE 07 42                     	.db $07, $42
092B0 15 46                     	.db $15, $46
092B2 15 F6                     	.db $15, $F6
092B4 FF                        	.db $FF
092B5                           include "src/levels/4/4-2/4-2-area3.asm"
092B5                           ; Level 4-2, Area 3
092B5                           
092B5                           LevelData_4_2_Area3:
092B5                           	; Level Header
092B5                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
092B5                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
092B5                           	levelHeader 3, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $08, $6
092B5 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
092B6 E8                        	.db %11100000 | $08
092B7 30                        	.db 3 << 4 | 0 << 2 | 0
092B8                           	IFNDEF LEVEL_ENGINE_UPGRADES
092B8 30                        		.db $6 << 3 | LevelMusic_Overworld
092B9                           	ENDIF
092B9                           	IFDEF LEVEL_ENGINE_UPGRADES
092B9                           		.db $6 << 4 | LevelMusic_Overworld
092B9                           	ENDIF
092B9                           
092B9 28 10                     	.db $28, $10
092BB 1C 11                     	.db $1C, $11
092BD 52 39                     	.db $52, $39
092BF F1 87                     	.db $F1, $87
092C1 A6 10                     	.db $A6, $10
092C3 53 0F                     	.db $53, $0F
092C5 12 29                     	.db $12, $29
092C7 0D 26                     	.db $0D, $26
092C9 3E 7F                     	.db $3E, $7F
092CB F0 4C                     	.db $F0, $4C
092CD F1 CD                     	.db $F1, $CD
092CF C3 29                     	.db $C3, $29
092D1 06 29                     	.db $06, $29
092D3 09 29                     	.db $09, $29
092D5 0C 29                     	.db $0C, $29
092D7 3E 77                     	.db $3E, $77
092D9 F0 33                     	.db $F0, $33
092DB BE 0B                     	.db $BE, $0B
092DD                           IFNDEF DISABLE_DOOR_POINTERS
092DD                           	.db $0A, $40
092DD                           ENDIF
092DD                           IFDEF DISABLE_DOOR_POINTERS
092DD F5 0A 40                  	.db $F5, $0A, $40
092E0                           ENDIF
092E0 18 2D                     	.db $18, $2D
092E2 F0 5B                     	.db $F0, $5B
092E4 F0 D1                     	.db $F0, $D1
092E6 F1 CA                     	.db $F1, $CA
092E8 FF                        	.db $FF
092E9                           include "src/levels/4/4-2/4-2-area4.asm"
092E9                           ; Level 4-2, Area 4
092E9                           
092E9                           LevelData_4_2_Area4:
092E9                           	; Level Header
092E9                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
092E9                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
092E9                           	levelHeader 2, LevelDirection_Horizontal, 2, 1, LevelMusic_Boss, 0, 0, $0a, $6
092E9 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
092EA EA                        	.db %11100000 | $0a
092EB 20                        	.db 2 << 4 | 0 << 2 | 0
092EC                           	IFNDEF LEVEL_ENGINE_UPGRADES
092EC 32                        		.db $6 << 3 | LevelMusic_Boss
092ED                           	ENDIF
092ED                           	IFDEF LEVEL_ENGINE_UPGRADES
092ED                           		.db $6 << 4 | LevelMusic_Boss
092ED                           	ENDIF
092ED                           
092ED 81 13                     	.db $81, $13
092EF                           IFNDEF DISABLE_DOOR_POINTERS
092EF                           	.db $0A, $33
092EF                           ENDIF
092EF                           IFDEF DISABLE_DOOR_POINTERS
092EF F5 0A 33                  	.db $F5, $0A, $33
092F2                           ENDIF
092F2 F0 4C                     	.db $F0, $4C
092F4 F0 AB                     	.db $F0, $AB
092F6 F1 E8                     	.db $F1, $E8
092F8 F2                        	.db $F2
092F9 A3 3B                     	.db $A3, $3B
092FB F0 0D                     	.db $F0, $0D
092FD F0 48                     	.db $F0, $48
092FF F0 70                     	.db $F0, $70
09301 F1 F7                     	.db $F1, $F7
09303 F2                        	.db $F2
09304 F0 30                     	.db $F0, $30
09306 F0 77                     	.db $F0, $77
09308 F0 8F                     	.db $F0, $8F
0930A F1 10                     	.db $F1, $10
0930C F1 8A                     	.db $F1, $8A
0930E F5 0B 00                  	.db $F5, $0B, $00
09311 FF                        	.db $FF
09312                           
09312                           ; World 4-3
09312                           include "src/levels/4/4-3/4-3-area0.asm"
09312                           ; Level 4-3, Area 0
09312                           
09312                           LevelData_4_3_Area0:
09312                           	; Level Header
09312                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09312                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09312                           	levelHeader 0, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 2, $0a, $2
09312 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
09313 EA                        	.db %11100000 | $0a
09314 02                        	.db 0 << 4 | 0 << 2 | 2
09315                           	IFNDEF LEVEL_ENGINE_UPGRADES
09315 11                        		.db $2 << 3 | LevelMusic_Underground
09316                           	ENDIF
09316                           	IFDEF LEVEL_ENGINE_UPGRADES
09316                           		.db $2 << 4 | LevelMusic_Underground
09316                           	ENDIF
09316                           
09316 4B 14                     	.db $4B, $14
09318                           IFNDEF DISABLE_DOOR_POINTERS
09318                           	.db $0B, $11
09318                           ENDIF
09318                           IFDEF DISABLE_DOOR_POINTERS
09318 F5 0B 11                  	.db $F5, $0B, $11
0931B                           ENDIF
0931B 0D A8                     	.db $0D, $A8
0931D F0 54                     	.db $F0, $54
0931F F0 D3                     	.db $F0, $D3
09321 F1 15                     	.db $F1, $15
09323 F1 CA                     	.db $F1, $CA
09325 FF                        	.db $FF
09326                           include "src/levels/4/4-3/4-3-area1.asm"
09326                           ; Level 4-3, Area 1
09326                           
09326                           LevelData_4_3_Area1:
09326                           	; Level Header
09326                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09326                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09326                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 1, $01, $0
09326 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09327 E1                        	.db %11100000 | $01
09328 91                        	.db 9 << 4 | 0 << 2 | 1
09329                           	IFNDEF LEVEL_ENGINE_UPGRADES
09329 00                        		.db $0 << 3 | LevelMusic_Overworld
0932A                           	ENDIF
0932A                           	IFDEF LEVEL_ENGINE_UPGRADES
0932A                           		.db $0 << 4 | LevelMusic_Overworld
0932A                           	ENDIF
0932A                           
0932A 00 8A                     	.db $00, $8A
0932C 2A 10                     	.db $2A, $10
0932E 1D 11                     	.db $1D, $11
09330 14 2B                     	.db $14, $2B
09332 14 0F                     	.db $14, $0F
09334 33 0F                     	.db $33, $0F
09336 05 0F                     	.db $05, $0F
09338 AA CB                     	.db $AA, $CB
0933A 27 21                     	.db $27, $21
0933C 16 C8                     	.db $16, $C8
0933E 12 26                     	.db $12, $26
09340 04 21                     	.db $04, $21
09342 11 C6                     	.db $11, $C6
09344 14 0B                     	.db $14, $0B
09346                           IFNDEF DISABLE_DOOR_POINTERS
09346                           	.db $0B, $00
09346                           ENDIF
09346                           IFDEF DISABLE_DOOR_POINTERS
09346 F5 0B 00                  	.db $F5, $0B, $00
09349                           ENDIF
09349 AC 10                     	.db $AC, $10
0934B F1 16                     	.db $F1, $16
0934D F6 05                     	.db $F6, $05
0934F E0 11                     	.db $E0, $11
09351 25 10                     	.db $25, $10
09353 D4 10                     	.db $D4, $10
09355 0C 10                     	.db $0C, $10
09357 18 11                     	.db $18, $11
09359 F2                        	.db $F2
0935A 57 51                     	.db $57, $51
0935C 0A 50                     	.db $0A, $50
0935E 16 F4                     	.db $16, $F4
09360 14 51                     	.db $14, $51
09362 14 F1                     	.db $14, $F1
09364 13 50                     	.db $13, $50
09366 12 F1                     	.db $12, $F1
09368 0E 64                     	.db $0E, $64
0936A 53 18                     	.db $53, $18
0936C 09 18                     	.db $09, $18
0936E 8B 0A                     	.db $8B, $0A
09370                           IFNDEF DISABLE_DOOR_POINTERS
09370                           	.db $0B, $26
09370                           ENDIF
09370                           IFDEF DISABLE_DOOR_POINTERS
09370 F5 0B 26                  	.db $F5, $0B, $26
09373                           ENDIF
09373 23 69                     	.db $23, $69
09375 F0 68                     	.db $F0, $68
09377 F1 F6                     	.db $F1, $F6
09379 54 18                     	.db $54, $18
0937B 0A 18                     	.db $0A, $18
0937D 89 0A                     	.db $89, $0A
0937F                           IFNDEF DISABLE_DOOR_POINTERS
0937F                           	.db $0B, $36
0937F                           ENDIF
0937F                           IFDEF DISABLE_DOOR_POINTERS
0937F F5 0B 36                  	.db $F5, $0B, $36
09382                           ENDIF
09382 28 6C                     	.db $28, $6C
09384 F0 88                     	.db $F0, $88
09386 55 18                     	.db $55, $18
09388 0B 18                     	.db $0B, $18
0938A 89 0A                     	.db $89, $0A
0938C                           IFNDEF DISABLE_DOOR_POINTERS
0938C                           	.db $0B, $60
0938C                           ENDIF
0938C                           IFDEF DISABLE_DOOR_POINTERS
0938C F5 0B 60                  	.db $F5, $0B, $60
0938F                           ENDIF
0938F 25 6B                     	.db $25, $6B
09391 F0 16                     	.db $F0, $16
09393 F0 A8                     	.db $F0, $A8
09395 51 18                     	.db $51, $18
09397 A1 62                     	.db $A1, $62
09399 F0 D6                     	.db $F0, $D6
0939B FF                        	.db $FF
0939C                           include "src/levels/4/4-3/4-3-area2.asm"
0939C                           ; Level 4-3, Area 2
0939C                           
0939C                           LevelData_4_3_Area2:
0939C                           	; Level Header
0939C                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0939C                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0939C                           	levelHeader 6, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 0, 0, $00, $1
0939C 20                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
0939D E0                        	.db %11100000 | $00
0939E 60                        	.db 6 << 4 | 0 << 2 | 0
0939F                           	IFNDEF LEVEL_ENGINE_UPGRADES
0939F 09                        		.db $1 << 3 | LevelMusic_Underground
093A0                           	ENDIF
093A0                           	IFDEF LEVEL_ENGINE_UPGRADES
093A0                           		.db $1 << 4 | LevelMusic_Underground
093A0                           	ENDIF
093A0                           
093A0 44 0A                     	.db $44, $0A
093A2                           IFNDEF DISABLE_DOOR_POINTERS
093A2                           	.db $0B, $41
093A2                           ENDIF
093A2                           IFDEF DISABLE_DOOR_POINTERS
093A2 F5 0B 41                  	.db $F5, $0B, $41
093A5                           ENDIF
093A5 21 34                     	.db $21, $34
093A7 0A 34                     	.db $0A, $34
093A9 27 31                     	.db $27, $31
093AB 31 35                     	.db $31, $35
093AD 08 36                     	.db $08, $36
093AF 21 33                     	.db $21, $33
093B1 06 32                     	.db $06, $32
093B3 0A 34                     	.db $0A, $34
093B5 F0 54                     	.db $F0, $54
093B7 24 3A                     	.db $24, $3A
093B9 31 3A                     	.db $31, $3A
093BB 25 35                     	.db $25, $35
093BD 2B 33                     	.db $2B, $33
093BF 37 33                     	.db $37, $33
093C1 34 34                     	.db $34, $34
093C3 31 34                     	.db $31, $34
093C5 08 36                     	.db $08, $36
093C7 2A 34                     	.db $2A, $34
093C9 11 32                     	.db $11, $32
093CB 1C 32                     	.db $1C, $32
093CD 12 33                     	.db $12, $33
093CF 23 34                     	.db $23, $34
093D1 31 39                     	.db $31, $39
093D3 2C 32                     	.db $2C, $32
093D5 39 32                     	.db $39, $32
093D7 34 32                     	.db $34, $32
093D9 31 33                     	.db $31, $33
093DB 0B 33                     	.db $0B, $33
093DD 37 31                     	.db $37, $31
093DF 0D 31                     	.db $0D, $31
093E1 21 78                     	.db $21, $78
093E3 1D 31                     	.db $1D, $31
093E5 F1 BA                     	.db $F1, $BA
093E7 F1 D4                     	.db $F1, $D4
093E9 36 35                     	.db $36, $35
093EB 31 3A                     	.db $31, $3A
093ED 34 3A                     	.db $34, $3A
093EF 31 33                     	.db $31, $33
093F1 33 33                     	.db $33, $33
093F3 1D 31                     	.db $1D, $31
093F5 25 33                     	.db $25, $33
093F7 0C 32                     	.db $0C, $32
093F9 38 33                     	.db $38, $33
093FB 35 33                     	.db $35, $33
093FD 33 32                     	.db $33, $32
093FF 0D 31                     	.db $0D, $31
09401 21 36                     	.db $21, $36
09403 2A 32                     	.db $2A, $32
09405 35 32                     	.db $35, $32
09407 0C 31                     	.db $0C, $31
09409 23 32                     	.db $23, $32
0940B 21 31                     	.db $21, $31
0940D 09 33                     	.db $09, $33
0940F 14 0A                     	.db $14, $0A
09411                           IFNDEF DISABLE_DOOR_POINTERS
09411                           	.db $0B, $16
09411                           ENDIF
09411                           IFDEF DISABLE_DOOR_POINTERS
09411 F5 0B 16                  	.db $F5, $0B, $16
09414                           ENDIF
09414 66 78                     	.db $66, $78
09416 F1 3B                     	.db $F1, $3B
09418 F1 C0                     	.db $F1, $C0
0941A FF                        	.db $FF
0941B                           include "src/levels/4/4-3/4-3-area3.asm"
0941B                           ; Level 4-3, Area 3
0941B                           
0941B                           LevelData_4_3_Area3:
0941B                           	; Level Header
0941B                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0941B                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0941B                           	levelHeader 6, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 0, 2, $00, $1
0941B 20                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
0941C E0                        	.db %11100000 | $00
0941D 62                        	.db 6 << 4 | 0 << 2 | 2
0941E                           	IFNDEF LEVEL_ENGINE_UPGRADES
0941E 09                        		.db $1 << 3 | LevelMusic_Underground
0941F                           	ENDIF
0941F                           	IFDEF LEVEL_ENGINE_UPGRADES
0941F                           		.db $1 << 4 | LevelMusic_Underground
0941F                           	ENDIF
0941F                           
0941F 37 0A                     	.db $37, $0A
09421                           IFNDEF DISABLE_DOOR_POINTERS
09421                           	.db $0B, $42
09421                           ENDIF
09421                           IFDEF DISABLE_DOOR_POINTERS
09421 F5 0B 42                  	.db $F5, $0B, $42
09424                           ENDIF
09424 26 33                     	.db $26, $33
09426 44 3A                     	.db $44, $3A
09428 31 78                     	.db $31, $78
0942A F0 41                     	.db $F0, $41
0942C F1 BA                     	.db $F1, $BA
0942E F1 C1                     	.db $F1, $C1
09430 5A 74                     	.db $5A, $74
09432 37 29                     	.db $37, $29
09434 99 29                     	.db $99, $29
09436 F0 77                     	.db $F0, $77
09438 68 29                     	.db $68, $29
0943A D9 29                     	.db $D9, $29
0943C 88 0A                     	.db $88, $0A
0943E                           IFNDEF DISABLE_DOOR_POINTERS
0943E                           	.db $0B, $50
0943E                           ENDIF
0943E                           IFDEF DISABLE_DOOR_POINTERS
0943E F5 0B 50                  	.db $F5, $0B, $50
09441                           ENDIF
09441 12 29                     	.db $12, $29
09443 15 35                     	.db $15, $35
09445 F0 D3                     	.db $F0, $D3
09447 20 35                     	.db $20, $35
09449 0A 35                     	.db $0A, $35
0944B 45 35                     	.db $45, $35
0944D 32 3B                     	.db $32, $3B
0944F 41 3A                     	.db $41, $3A
09451 F0 21                     	.db $F0, $21
09453 44 3A                     	.db $44, $3A
09455 41 3A                     	.db $41, $3A
09457 34 3A                     	.db $34, $3A
09459 31 3A                     	.db $31, $3A
0945B 3C 32                     	.db $3C, $32
0945D 38 33                     	.db $38, $33
0945F 34 33                     	.db $34, $33
09461 31 32                     	.db $31, $32
09463 16 09                     	.db $16, $09
09465                           IFNDEF DISABLE_DOOR_POINTERS
09465                           	.db $0B, $17
09465                           ENDIF
09465                           IFDEF DISABLE_DOOR_POINTERS
09465 F5 0B 17                  	.db $F5, $0B, $17
09468                           ENDIF
09468 0B 33                     	.db $0B, $33
0946A 21 38                     	.db $21, $38
0946C F1 7A                     	.db $F1, $7A
0946E F1 C0                     	.db $F1, $C0
09470 FF                        	.db $FF
09471                           include "src/levels/4/4-3/4-3-area4.asm"
09471                           ; Level 4-3, Area 4
09471                           
09471                           LevelData_4_3_Area4:
09471                           	; Level Header
09471                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09471                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09471                           	levelHeader 3, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 2, $08, $3
09471 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09472 E8                        	.db %11100000 | $08
09473 32                        	.db 3 << 4 | 0 << 2 | 2
09474                           	IFNDEF LEVEL_ENGINE_UPGRADES
09474 18                        		.db $3 << 3 | LevelMusic_Overworld
09475                           	ENDIF
09475                           	IFDEF LEVEL_ENGINE_UPGRADES
09475                           		.db $3 << 4 | LevelMusic_Overworld
09475                           	ENDIF
09475                           
09475 5D E2                     	.db $5D, $E2
09477 4F E1                     	.db $4F, $E1
09479 91 41                     	.db $91, $41
0947B 04 41                     	.db $04, $41
0947D 07 41                     	.db $07, $41
0947F 0A 41                     	.db $0A, $41
09481 0D 41                     	.db $0D, $41
09483 12 18                     	.db $12, $18
09485 08 18                     	.db $08, $18
09487 5B 0A                     	.db $5B, $0A
09489                           IFNDEF DISABLE_DOOR_POINTERS
09489                           	.db $0B, $20
09489                           ENDIF
09489                           IFDEF DISABLE_DOOR_POINTERS
09489 F5 0B 20                  	.db $F5, $0B, $20
0948C                           ENDIF
0948C 1F 26                     	.db $1F, $26
0948E 13 6C                     	.db $13, $6C
09490 6F 2D                     	.db $6F, $2D
09492 12 41                     	.db $12, $41
09494 05 41                     	.db $05, $41
09496 08 41                     	.db $08, $41
09498 0B 41                     	.db $0B, $41
0949A 0E 41                     	.db $0E, $41
0949C 13 18                     	.db $13, $18
0949E 09 18                     	.db $09, $18
094A0 58 0A                     	.db $58, $0A
094A2                           IFNDEF DISABLE_DOOR_POINTERS
094A2                           	.db $0B, $30
094A2                           ENDIF
094A2                           IFDEF DISABLE_DOOR_POINTERS
094A2 F5 0B 30                  	.db $F5, $0B, $30
094A5                           ENDIF
094A5 11 22                     	.db $11, $22
094A7 10 6C                     	.db $10, $6C
094A9 FF                        	.db $FF
094AA                           include "src/levels/4/4-3/4-3-area5.asm"
094AA                           ; Level 4-3, Area 5
094AA                           
094AA                           LevelData_4_3_Area5:
094AA                           	; Level Header
094AA                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
094AA                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
094AA                           	levelHeader 0, LevelDirection_Vertical, 4, 0, LevelMusic_Underground, 0, 2, $00, $1
094AA 20                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 0
094AB E0                        	.db %11100000 | $00
094AC 02                        	.db 0 << 4 | 0 << 2 | 2
094AD                           	IFNDEF LEVEL_ENGINE_UPGRADES
094AD 09                        		.db $1 << 3 | LevelMusic_Underground
094AE                           	ENDIF
094AE                           	IFDEF LEVEL_ENGINE_UPGRADES
094AE                           		.db $1 << 4 | LevelMusic_Underground
094AE                           	ENDIF
094AE                           
094AE 56 32                     	.db $56, $32
094B0 34 36                     	.db $34, $36
094B2 27 0A                     	.db $27, $0A
094B4                           IFNDEF DISABLE_DOOR_POINTERS
094B4                           	.db $0B, $33
094B4                           ENDIF
094B4                           IFDEF DISABLE_DOOR_POINTERS
094B4 F5 0B 33                  	.db $F5, $0B, $33
094B7                           ENDIF
094B7 21 3D                     	.db $21, $3D
094B9 F0 21                     	.db $F0, $21
094BB F1 A0                     	.db $F1, $A0
094BD FF                        	.db $FF
094BE                           include "src/levels/4/4-3/4-3-area6.asm"
094BE                           ; Level 4-3, Area 6
094BE                           
094BE                           LevelData_4_3_Area6:
094BE                           	; Level Header
094BE                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
094BE                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
094BE                           	levelHeader 1, LevelDirection_Horizontal, 4, 0, LevelMusic_Boss, 0, 0, $0a, $3
094BE A0                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 0
094BF EA                        	.db %11100000 | $0a
094C0 10                        	.db 1 << 4 | 0 << 2 | 0
094C1                           	IFNDEF LEVEL_ENGINE_UPGRADES
094C1 1A                        		.db $3 << 3 | LevelMusic_Boss
094C2                           	ENDIF
094C2                           	IFDEF LEVEL_ENGINE_UPGRADES
094C2                           		.db $3 << 4 | LevelMusic_Boss
094C2                           	ENDIF
094C2                           
094C2 62 3D                     	.db $62, $3D
094C4 46 0A                     	.db $46, $0A
094C6                           IFNDEF DISABLE_DOOR_POINTERS
094C6                           	.db $0B, $18
094C6                           ENDIF
094C6                           IFDEF DISABLE_DOOR_POINTERS
094C6 F5 0B 18                  	.db $F5, $0B, $18
094C9                           ENDIF
094C9 22 3D                     	.db $22, $3D
094CB F0 50                     	.db $F0, $50
094CD 90 34                     	.db $90, $34
094CF 51 42                     	.db $51, $42
094D1 10 34                     	.db $10, $34
094D3 F0 B7                     	.db $F0, $B7
094D5 F0 EF                     	.db $F0, $EF
094D7 F1 2E                     	.db $F1, $2E
094D9 F1 6F                     	.db $F1, $6F
094DB F1 97                     	.db $F1, $97
094DD F1 CA                     	.db $F1, $CA
094DF F5 0B 70                  	.db $F5, $0B, $70
094E2 FF                        	.db $FF
094E3                           include "src/levels/4/4-3/4-3-area7.asm"
094E3                           ; Level 4-3, Area 7
094E3                           
094E3                           LevelData_4_3_Area7:
094E3                           	; Level Header
094E3                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
094E3                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
094E3                           	levelHeader 0, LevelDirection_Vertical, 5, 2, LevelMusic_Boss, 3, 3, $15, $2
094E3 2A                        	.db LevelDirection_Vertical << 7 | 5 << 3 | 2
094E4 F5                        	.db %11100000 | $15
094E5 0F                        	.db 0 << 4 | 3 << 2 | 3
094E6                           	IFNDEF LEVEL_ENGINE_UPGRADES
094E6 12                        		.db $2 << 3 | LevelMusic_Boss
094E7                           	ENDIF
094E7                           	IFDEF LEVEL_ENGINE_UPGRADES
094E7                           		.db $2 << 4 | LevelMusic_Boss
094E7                           	ENDIF
094E7                           
094E7 54 32                     	.db $54, $32
094E9 09 32                     	.db $09, $32
094EB 07 00                     	.db $07, $00
094ED 08 00                     	.db $08, $00
094EF 43 31                     	.db $43, $31
094F1 0B 31                     	.db $0B, $31
094F3 32 40                     	.db $32, $40
094F5 07 00                     	.db $07, $00
094F7 08 00                     	.db $08, $00
094F9 09 00                     	.db $09, $00
094FB 0D 40                     	.db $0D, $40
094FD                           IFDEF EXTENDED_PTR_CONTINUE:
094FD F5 8C 00                      .db $F5, $8C, $00 
09500                           ENDIF
09500 F0 35                     	.db $F0, $35
09502 F6 04                     	.db $F6, $04
09504 F0 53                     	.db $F0, $53
09506 F0 D5                     	.db $F0, $D5
09508 F6 02                     	.db $F6, $02
0950A F0 F5                     	.db $F0, $F5
0950C F6 04                     	.db $F6, $04
0950E F1 13                     	.db $F1, $13
09510 F1 95                     	.db $F1, $95
09512 F6 05                     	.db $F6, $05
09514 F1 A0                     	.db $F1, $A0
09516 F6 02                     	.db $F6, $02
09518 F1 C0                     	.db $F1, $C0
0951A F6 04                     	.db $F6, $04
0951C FF                        	.db $FF
0951D                           ; -------------------------------
0951D                           
0951D                           
0951D                           ; -------------------------------
0951D                           ; World 5
0951D                           
0951D                           ; World 5-1
0951D                           include "src/levels/5/5-1/5-1-area0.asm"
0951D                           ; Level 5-1, Area 0
0951D                           
0951D                           LevelData_5_1_Area0:
0951D                           	; Level Header
0951D                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0951D                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0951D                           	levelHeader 2, LevelDirection_Horizontal, 0, 1, LevelMusic_Overworld, 0, 0, $02, $0
0951D 81                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 1
0951E E2                        	.db %11100000 | $02
0951F 20                        	.db 2 << 4 | 0 << 2 | 0
09520                           	IFNDEF LEVEL_ENGINE_UPGRADES
09520 00                        		.db $0 << 3 | LevelMusic_Overworld
09521                           	ENDIF
09521                           	IFDEF LEVEL_ENGINE_UPGRADES
09521                           		.db $0 << 4 | LevelMusic_Overworld
09521                           	ENDIF
09521                           
09521 00 86                     	.db $00, $86
09523 01 86                     	.db $01, $86
09525 02 86                     	.db $02, $86
09527 1B 10                     	.db $1B, $10
09529 25 16                     	.db $25, $16
0952B 1C C5                     	.db $1C, $C5
0952D E8 16                     	.db $E8, $16
0952F 4A C8                     	.db $4A, $C8
09531 3C 0B                     	.db $3C, $0B
09533                           IFNDEF DISABLE_DOOR_POINTERS
09533                           	.db $0C, $10
09533                           ENDIF
09533                           IFDEF DISABLE_DOOR_POINTERS
09533 F5 0C 10                  	.db $F5, $0C, $10
09536                           ENDIF
09536 2B 82                     	.db $2B, $82
09538 0C 82                     	.db $0C, $82
0953A 0D 82                     	.db $0D, $82
0953C 0E 82                     	.db $0E, $82
0953E 0F 82                     	.db $0F, $82
09540 F1 48                     	.db $F1, $48
09542 41 10                     	.db $41, $10
09544 0E 10                     	.db $0E, $10
09546 13 11                     	.db $13, $11
09548 53 C8                     	.db $53, $C8
0954A 50 82                     	.db $50, $82
0954C 01 82                     	.db $01, $82
0954E 04 82                     	.db $04, $82
09550 05 82                     	.db $05, $82
09552 06 82                     	.db $06, $82
09554 09 82                     	.db $09, $82
09556 0A 82                     	.db $0A, $82
09558 0B 82                     	.db $0B, $82
0955A 0C 82                     	.db $0C, $82
0955C 0D 82                     	.db $0D, $82
0955E F4                        	.db $F4
0955F F2 3C                     	.db $F2, $3C
09561 16 F2                     	.db $16, $F2
09563 37 16                     	.db $37, $16
09565 FF                        	.db $FF
09566                           include "src/levels/5/5-1/5-1-area1.asm"
09566                           ; Level 5-1, Area 1
09566                           
09566                           LevelData_5_1_Area1:
09566                           	; Level Header
09566                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09566                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09566                           	levelHeader 8, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 0, $0a, $2
09566 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
09567 EA                        	.db %11100000 | $0a
09568 80                        	.db 8 << 4 | 0 << 2 | 0
09569                           	IFNDEF LEVEL_ENGINE_UPGRADES
09569 11                        		.db $2 << 3 | LevelMusic_Underground
0956A                           	ENDIF
0956A                           	IFDEF LEVEL_ENGINE_UPGRADES
0956A                           		.db $2 << 4 | LevelMusic_Underground
0956A                           	ENDIF
0956A                           
0956A 83 13                     	.db $83, $13
0956C                           IFNDEF DISABLE_DOOR_POINTERS
0956C                           	.db $0C, $01
0956C                           ENDIF
0956C                           IFDEF DISABLE_DOOR_POINTERS
0956C F5 0C 01                  	.db $F5, $0C, $01
0956F                           ENDIF
0956F 1B 2A                     	.db $1B, $2A
09571 0D 26                     	.db $0D, $26
09573 3E 54                     	.db $3E, $54
09575 F0 71                     	.db $F0, $71
09577 F1 D4                     	.db $F1, $D4
09579 73 FC                     	.db $73, $FC
0957B 38 87                     	.db $38, $87
0957D 09 87                     	.db $09, $87
0957F 0A 87                     	.db $0A, $87
09581 35 84                     	.db $35, $84
09583 06 84                     	.db $06, $84
09585 07 84                     	.db $07, $84
09587 F0 68                     	.db $F0, $68
09589 90 FF                     	.db $90, $FF
0958B F2                        	.db $F2
0958C 40 FF                     	.db $40, $FF
0958E 62 84                     	.db $62, $84
09590 03 84                     	.db $03, $84
09592 04 84                     	.db $04, $84
09594 05 84                     	.db $05, $84
09596 06 84                     	.db $06, $84
09598 07 84                     	.db $07, $84
0959A 90 FF                     	.db $90, $FF
0959C 2D 88                     	.db $2D, $88
0959E 0E 88                     	.db $0E, $88
095A0 0F 88                     	.db $0F, $88
095A2 24 86                     	.db $24, $86
095A4 05 86                     	.db $05, $86
095A6 06 86                     	.db $06, $86
095A8 07 86                     	.db $07, $86
095AA B0 FF                     	.db $B0, $FF
095AC 20 88                     	.db $20, $88
095AE 01 88                     	.db $01, $88
095B0 4F 84                     	.db $4F, $84
095B2 79 2B                     	.db $79, $2B
095B4 11 27                     	.db $11, $27
095B6 02 26                     	.db $02, $26
095B8 10 FF                     	.db $10, $FF
095BA 00 81                     	.db $00, $81
095BC 01 81                     	.db $01, $81
095BE 02 81                     	.db $02, $81
095C0 2D 88                     	.db $2D, $88
095C2 0E 88                     	.db $0E, $88
095C4 0F 88                     	.db $0F, $88
095C6 40 84                     	.db $40, $84
095C8 01 84                     	.db $01, $84
095CA 02 84                     	.db $02, $84
095CC 03 84                     	.db $03, $84
095CE 26 82                     	.db $26, $82
095D0 07 82                     	.db $07, $82
095D2 08 82                     	.db $08, $82
095D4 09 82                     	.db $09, $82
095D6 70 FF                     	.db $70, $FF
095D8 23 88                     	.db $23, $88
095DA 04 88                     	.db $04, $88
095DC 05 88                     	.db $05, $88
095DE 9A 2D                     	.db $9A, $2D
095E0 36 00                     	.db $36, $00
095E2 0A 00                     	.db $0A, $00
095E4 10 F0                     	.db $10, $F0
095E6 32 80                     	.db $32, $80
095E8 03 82                     	.db $03, $82
095EA 04 80                     	.db $04, $80
095EC 08 81                     	.db $08, $81
095EE 4E 0B                     	.db $4E, $0B
095F0                           IFNDEF DISABLE_DOOR_POINTERS
095F0                           	.db $0C, $20
095F0                           ENDIF
095F0                           IFDEF DISABLE_DOOR_POINTERS
095F0 F5 0C 20                  	.db $F5, $0C, $20
095F3                           ENDIF
095F3 14 26                     	.db $14, $26
095F5 06 53                     	.db $06, $53
095F7 F0 34                     	.db $F0, $34
095F9 F0 CD                     	.db $F0, $CD
095FB F0 F4                     	.db $F0, $F4
095FD F1 4D                     	.db $F1, $4D
095FF F1 74                     	.db $F1, $74
09601 F1 92                     	.db $F1, $92
09603 FF                        	.db $FF
09604                           include "src/levels/5/5-1/5-1-area2.asm"
09604                           ; Level 5-1, Area 2
09604                           
09604                           LevelData_5_1_Area2:
09604                           	; Level Header
09604                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09604                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09604                           	levelHeader 1, LevelDirection_Horizontal, 2, 1, LevelMusic_Boss, 0, 3, $10, $2
09604 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
09605 F0                        	.db %11100000 | $10
09606 13                        	.db 1 << 4 | 0 << 2 | 3
09607                           	IFNDEF LEVEL_ENGINE_UPGRADES
09607 12                        		.db $2 << 3 | LevelMusic_Boss
09608                           	ENDIF
09608                           	IFDEF LEVEL_ENGINE_UPGRADES
09608                           		.db $2 << 4 | LevelMusic_Boss
09608                           	ENDIF
09608                           
09608 6B 32                     	.db $6B, $32
0960A 51 0B                     	.db $51, $0B
0960C                           IFNDEF DISABLE_DOOR_POINTERS
0960C                           	.db $0C, $18
0960C                           ENDIF
0960C                           IFDEF DISABLE_DOOR_POINTERS
0960C F5 0C 18                  	.db $F5, $0C, $18
0960F                           ENDIF
0960F D1 00                     	.db $D1, $00
09611 F0 0F                     	.db $F0, $0F
09613 F0 B0                     	.db $F0, $B0
09615 F1 AA                     	.db $F1, $AA
09617 F5 0D 00                  	.db $F5, $0D, $00
0961A FF                        	.db $FF
0961B                           
0961B                           ; World 5-2
0961B                           include "src/levels/5/5-2/5-2-area0.asm"
0961B                           ; Level 5-2, Area 0
0961B                           
0961B                           LevelData_5_2_Area0:
0961B                           	; Level Header
0961B                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0961B                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0961B                           	levelHeader 1, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 0, $0a, $2
0961B 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
0961C EA                        	.db %11100000 | $0a
0961D 10                        	.db 1 << 4 | 0 << 2 | 0
0961E                           	IFNDEF LEVEL_ENGINE_UPGRADES
0961E 11                        		.db $2 << 3 | LevelMusic_Underground
0961F                           	ENDIF
0961F                           	IFDEF LEVEL_ENGINE_UPGRADES
0961F                           		.db $2 << 4 | LevelMusic_Underground
0961F                           	ENDIF
0961F                           
0961F F0 5B                     	.db $F0, $5B
09621 F2                        	.db $F2
09622 F0 11                     	.db $F0, $11
09624 F1 AA                     	.db $F1, $AA
09626 0C A9                     	.db $0C, $A9
09628 F5 0D 10                  	.db $F5, $0D, $10
0962B FF                        	.db $FF
0962C                           include "src/levels/5/5-2/5-2-area1.asm"
0962C                           ; Level 5-2, Area 1
0962C                           
0962C                           LevelData_5_2_Area1:
0962C                           	; Level Header
0962C                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0962C                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0962C                           	levelHeader 9, LevelDirection_Horizontal, 0, 1, LevelMusic_Overworld, 0, 0, $00, $0
0962C 81                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 1
0962D E0                        	.db %11100000 | $00
0962E 90                        	.db 9 << 4 | 0 << 2 | 0
0962F                           	IFNDEF LEVEL_ENGINE_UPGRADES
0962F 00                        		.db $0 << 3 | LevelMusic_Overworld
09630                           	ENDIF
09630                           	IFDEF LEVEL_ENGINE_UPGRADES
09630                           		.db $0 << 4 | LevelMusic_Overworld
09630                           	ENDIF
09630                           
09630 24 10                     	.db $24, $10
09632 17 11                     	.db $17, $11
09634 59 2A                     	.db $59, $2A
09636 0A 52                     	.db $0A, $52
09638 18 C5                     	.db $18, $C5
0963A 13 A4                     	.db $13, $A4
0963C 33 05                     	.db $33, $05
0963E F5 0D 01                  	.db $F5, $0D, $01
09641 52 10                     	.db $52, $10
09643 09 16                     	.db $09, $16
09645 27 16                     	.db $27, $16
09647 08 16                     	.db $08, $16
09649 1B 16                     	.db $1B, $16
0964B F1 21                     	.db $F1, $21
0964D AD 16                     	.db $AD, $16
0964F 0F 16                     	.db $0F, $16
09651 15 10                     	.db $15, $10
09653 0E 16                     	.db $0E, $16
09655 88 21                     	.db $88, $21
09657 F1 A2                     	.db $F1, $A2
09659 5D 2B                     	.db $5D, $2B
0965B 3C 10                     	.db $3C, $10
0965D 1F 11                     	.db $1F, $11
0965F 17 06                     	.db $17, $06
09661 F5 0D 40                  	.db $F5, $0D, $40
09664 15 2A                     	.db $15, $2A
09666 08 22                     	.db $08, $22
09668 09 22                     	.db $09, $22
0966A 0A 21                     	.db $0A, $21
0966C F1 88                     	.db $F1, $88
0966E F1 A0                     	.db $F1, $A0
09670 C7 11                     	.db $C7, $11
09672 0B 10                     	.db $0B, $10
09674 1A 10                     	.db $1A, $10
09676 F2                        	.db $F2
09677 18 16                     	.db $18, $16
09679 1B 16                     	.db $1B, $16
0967B 2F 11                     	.db $2F, $11
0967D 22 16                     	.db $22, $16
0967F 14 16                     	.db $14, $16
09681 5C 2A                     	.db $5C, $2A
09683 F0 01                     	.db $F0, $01
09685 F1 28                     	.db $F1, $28
09687 F1 60                     	.db $F1, $60
09689 F1 A8                     	.db $F1, $A8
0968B F1 E2                     	.db $F1, $E2
0968D 49 16                     	.db $49, $16
0968F 22 10                     	.db $22, $10
09691 05 16                     	.db $05, $16
09693 5F 86                     	.db $5F, $86
09695 55 81                     	.db $55, $81
09697 09 81                     	.db $09, $81
09699 F0 48                     	.db $F0, $48
0969B F1 62                     	.db $F1, $62
0969D F1 C8                     	.db $F1, $C8
0969F 3C 10                     	.db $3C, $10
096A1 1F 11                     	.db $1F, $11
096A3 21 16                     	.db $21, $16
096A5 05 16                     	.db $05, $16
096A7 0B 21                     	.db $0B, $21
096A9 0C 2A                     	.db $0C, $2A
096AB 0D 21                     	.db $0D, $21
096AD 0E 2D                     	.db $0E, $2D
096AF 1A C4                     	.db $1A, $C4
096B1 43 85                     	.db $43, $85
096B3 15 84                     	.db $15, $84
096B5 21 82                     	.db $21, $82
096B7 F0 E2                     	.db $F0, $E2
096B9 95 22                     	.db $95, $22
096BB 06 28                     	.db $06, $28
096BD F1 88                     	.db $F1, $88
096BF 9D 8A                     	.db $9D, $8A
096C1 0E 8A                     	.db $0E, $8A
096C3 0F 8A                     	.db $0F, $8A
096C5 22 10                     	.db $22, $10
096C7 25 11                     	.db $25, $11
096C9 1B 16                     	.db $1B, $16
096CB 27 12                     	.db $27, $12
096CD F5 0D 23                  	.db $F5, $0D, $23
096D0 F0 01                     	.db $F0, $01
096D2 FF                        	.db $FF
096D3                           include "src/levels/5/5-2/5-2-area2.asm"
096D3                           ; Level 5-2, Area 2
096D3                           
096D3                           LevelData_5_2_Area2:
096D3                           	; Level Header
096D3                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
096D3                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
096D3                           	levelHeader 3, LevelDirection_Vertical, 0, 1, LevelMusic_Overworld, 0, 0, $13, $5
096D3 01                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 1
096D4 F3                        	.db %11100000 | $13
096D5 30                        	.db 3 << 4 | 0 << 2 | 0
096D6                           	IFNDEF LEVEL_ENGINE_UPGRADES
096D6 28                        		.db $5 << 3 | LevelMusic_Overworld
096D7                           	ENDIF
096D7                           	IFDEF LEVEL_ENGINE_UPGRADES
096D7                           		.db $5 << 4 | LevelMusic_Overworld
096D7                           	ENDIF
096D7                           
096D7 0F 85                     	.db $0F, $85
096D9 48 0C                     	.db $48, $0C
096DB 4E 0B                     	.db $4E, $0B
096DD                           IFNDEF DISABLE_DOOR_POINTERS
096DD                           	.db $0D, $30
096DD                           ENDIF
096DD                           IFDEF DISABLE_DOOR_POINTERS
096DD F5 0D 30                  	.db $F5, $0D, $30
096E0                           ENDIF
096E0 29 E2                     	.db $29, $E2
096E2 0C 84                     	.db $0C, $84
096E4 0D 84                     	.db $0D, $84
096E6 32 10                     	.db $32, $10
096E8 F0 DE                     	.db $F0, $DE
096EA 24 11                     	.db $24, $11
096EC 2F 85                     	.db $2F, $85
096EE 1A 10                     	.db $1A, $10
096F0 52 E1                     	.db $52, $E1
096F2 F0 53                     	.db $F0, $53
096F4 F1 1E                     	.db $F1, $1E
096F6 78 0D                     	.db $78, $0D
096F8 1D 8C                     	.db $1D, $8C
096FA 23 10                     	.db $23, $10
096FC 24 11                     	.db $24, $11
096FE 39 10                     	.db $39, $10
09700 0C 83                     	.db $0C, $83
09702 12 E1                     	.db $12, $E1
09704 55 E1                     	.db $55, $E1
09706 52 10                     	.db $52, $10
09708 6A 10                     	.db $6A, $10
0970A 25 11                     	.db $25, $11
0970C 10 E7                     	.db $10, $E7
0970E 08 03                     	.db $08, $03
09710 09 E4                     	.db $09, $E4
09712 F5 0D 19                  	.db $F5, $0D, $19
09715 F4                        	.db $F4
09716 46 0C                     	.db $46, $0C
09718 F3                        	.db $F3
09719 06 0D                     	.db $06, $0D
0971B FF                        	.db $FF
0971C                           include "src/levels/5/5-2/5-2-area3.asm"
0971C                           ; Level 5-2, Area 3
0971C                           
0971C                           LevelData_5_2_Area3:
0971C                           	; Level Header
0971C                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0971C                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0971C                           	levelHeader 6, LevelDirection_Vertical, 0, 1, LevelMusic_Underground, 0, 0, $15, $5
0971C 01                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 1
0971D F5                        	.db %11100000 | $15
0971E 60                        	.db 6 << 4 | 0 << 2 | 0
0971F                           	IFNDEF LEVEL_ENGINE_UPGRADES
0971F 29                        		.db $5 << 3 | LevelMusic_Underground
09720                           	ENDIF
09720                           	IFDEF LEVEL_ENGINE_UPGRADES
09720                           		.db $5 << 4 | LevelMusic_Underground
09720                           	ENDIF
09720                           
09720 14 10                     	.db $14, $10
09722 2C 11                     	.db $2C, $11
09724 11 0B                     	.db $11, $0B
09726                           IFNDEF DISABLE_DOOR_POINTERS
09726                           	.db $0D, $20
09726                           ENDIF
09726                           IFDEF DISABLE_DOOR_POINTERS
09726 F5 0D 20                  	.db $F5, $0D, $20
09729                           ENDIF
09729 22 6B                     	.db $22, $6B
0972B 07 01                     	.db $07, $01
0972D 36 10                     	.db $36, $10
0972F 29 11                     	.db $29, $11
09731 32 70                     	.db $32, $70
09733 0D 70                     	.db $0D, $70
09735 12 8E                     	.db $12, $8E
09737 0D 8E                     	.db $0D, $8E
09739 E3 70                     	.db $E3, $70
0973B 0C 70                     	.db $0C, $70
0973D 2B 70                     	.db $2B, $70
0973F 1B 83                     	.db $1B, $83
09741 4B 8F                     	.db $4B, $8F
09743 17 70                     	.db $17, $70
09745 17 86                     	.db $17, $86
09747 18 70                     	.db $18, $70
09749 18 87                     	.db $18, $87
0974B 04 70                     	.db $04, $70
0974D 14 81                     	.db $14, $81
0974F 3A 70                     	.db $3A, $70
09751 F0 16                     	.db $F0, $16
09753 1A 89                     	.db $1A, $89
09755 74 70                     	.db $74, $70
09757 0B 82                     	.db $0B, $82
09759 14 81                     	.db $14, $81
0975B 15 70                     	.db $15, $70
0975D 36 70                     	.db $36, $70
0975F 16 85                     	.db $16, $85
09761 F1 57                     	.db $F1, $57
09763 99 70                     	.db $99, $70
09765 19 88                     	.db $19, $88
09767 48 70                     	.db $48, $70
09769 18 83                     	.db $18, $83
0976B F2                        	.db $F2
0976C F0 96                     	.db $F0, $96
0976E F0 D5                     	.db $F0, $D5
09770 F1 14                     	.db $F1, $14
09772 F2                        	.db $F2
09773 3E 70                     	.db $3E, $70
09775 1E 85                     	.db $1E, $85
09777 2D 81                     	.db $2D, $81
09779 2D 0B                     	.db $2D, $0B
0977B                           IFNDEF DISABLE_DOOR_POINTERS
0977B                           	.db $0D, $50
0977B                           ENDIF
0977B                           IFDEF DISABLE_DOOR_POINTERS
0977B F5 0D 50                  	.db $F5, $0D, $50
0977E                           ENDIF
0977E 11 70                     	.db $11, $70
09780 14 60                     	.db $14, $60
09782 07 60                     	.db $07, $60
09784 0A 60                     	.db $0A, $60
09786 24 F7                     	.db $24, $F7
09788 F1 56                     	.db $F1, $56
0978A FF                        	.db $FF
0978B                           include "src/levels/5/5-2/5-2-area4.asm"
0978B                           ; Level 5-2, Area 4
0978B                           
0978B                           LevelData_5_2_Area4:
0978B                           	; Level Header
0978B                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0978B                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0978B                           	levelHeader 1, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
0978B 18                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
0978C E3                        	.db %11100000 | $03
0978D 11                        	.db 1 << 4 | 0 << 2 | 1
0978E                           	IFNDEF LEVEL_ENGINE_UPGRADES
0978E 01                        		.db $0 << 3 | LevelMusic_Underground
0978F                           	ENDIF
0978F                           	IFDEF LEVEL_ENGINE_UPGRADES
0978F                           		.db $0 << 4 | LevelMusic_Underground
0978F                           	ENDIF
0978F                           
0978F F5 0D 13                  	.db $F5, $0D, $13
09792 64 31                     	.db $64, $31
09794 0A 31                     	.db $0A, $31
09796 13 30                     	.db $13, $30
09798 06 30                     	.db $06, $30
0979A 09 30                     	.db $09, $30
0979C 0C 30                     	.db $0C, $30
0979E 35 35                     	.db $35, $35
097A0 28 25                     	.db $28, $25
097A2 F0 44                     	.db $F0, $44
097A4 F0 65                     	.db $F0, $65
097A6 F0 86                     	.db $F0, $86
097A8 F0 A7                     	.db $F0, $A7
097AA F1 86                     	.db $F1, $86
097AC F1 A8                     	.db $F1, $A8
097AE F1 C4                     	.db $F1, $C4
097B0 45 35                     	.db $45, $35
097B2 23 32                     	.db $23, $32
097B4 0A 32                     	.db $0A, $32
097B6 25 21                     	.db $25, $21
097B8 08 26                     	.db $08, $26
097BA F0 02                     	.db $F0, $02
097BC F0 21                     	.db $F0, $21
097BE F0 C0                     	.db $F0, $C0
097C0 FF                        	.db $FF
097C1                           include "src/levels/5/5-2/5-2-area5.asm"
097C1                           ; Level 5-2, Area 5
097C1                           
097C1                           LevelData_5_2_Area5:
097C1                           	; Level Header
097C1                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
097C1                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
097C1                           	levelHeader 2, LevelDirection_Horizontal, 0, 1, LevelMusic_Boss, 0, 0, $0a, $2
097C1 81                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 1
097C2 EA                        	.db %11100000 | $0a
097C3 20                        	.db 2 << 4 | 0 << 2 | 0
097C4                           	IFNDEF LEVEL_ENGINE_UPGRADES
097C4 12                        		.db $2 << 3 | LevelMusic_Boss
097C5                           	ENDIF
097C5                           	IFDEF LEVEL_ENGINE_UPGRADES
097C5                           		.db $2 << 4 | LevelMusic_Boss
097C5                           	ENDIF
097C5                           
097C5 82 0B                     	.db $82, $0B
097C7                           IFNDEF DISABLE_DOOR_POINTERS
097C7                           	.db $0D, $36
097C7                           ENDIF
097C7                           IFDEF DISABLE_DOOR_POINTERS
097C7 F5 0D 36                  	.db $F5, $0D, $36
097CA                           ENDIF
097CA 2A 67                     	.db $2A, $67
097CC 2A FF                     	.db $2A, $FF
097CE F0 6C                     	.db $F0, $6C
097D0 F1 48                     	.db $F1, $48
097D2 53 10                     	.db $53, $10
097D4 26 11                     	.db $26, $11
097D6 3E 6D                     	.db $3E, $6D
097D8 34 69                     	.db $34, $69
097DA 2A F3                     	.db $2A, $F3
097DC F1 CC                     	.db $F1, $CC
097DE 55 10                     	.db $55, $10
097E0 A0 F9                     	.db $A0, $F9
097E2 F0 08                     	.db $F0, $08
097E4 F1 4C                     	.db $F1, $4C
097E6 F1 8A                     	.db $F1, $8A
097E8 F5 0E 00                  	.db $F5, $0E, $00
097EB FF                        	.db $FF
097EC                           
097EC                           ; World 5-3
097EC                           include "src/levels/5/5-3/5-3-area0.asm"
097EC                           ; Level 5-3, Area 0
097EC                           
097EC                           LevelData_5_3_Area0:
097EC                           	; Level Header
097EC                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
097EC                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
097EC                           	levelHeader 1, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 0, $0a, $2
097EC 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
097ED EA                        	.db %11100000 | $0a
097EE 10                        	.db 1 << 4 | 0 << 2 | 0
097EF                           	IFNDEF LEVEL_ENGINE_UPGRADES
097EF 11                        		.db $2 << 3 | LevelMusic_Underground
097F0                           	ENDIF
097F0                           	IFDEF LEVEL_ENGINE_UPGRADES
097F0                           		.db $2 << 4 | LevelMusic_Underground
097F0                           	ENDIF
097F0                           
097F0 F0 70                     	.db $F0, $70
097F2 F2                        	.db $F2
097F3 09 A9                     	.db $09, $A9
097F5 F5 0E 10                  	.db $F5, $0E, $10
097F8 F0 0F                     	.db $F0, $0F
097FA F1 8A                     	.db $F1, $8A
097FC FF                        	.db $FF
097FD                           include "src/levels/5/5-3/5-3-area1.asm"
097FD                           ; Level 5-3, Area 1
097FD                           
097FD                           LevelData_5_3_Area1:
097FD                           	; Level Header
097FD                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
097FD                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
097FD                           	levelHeader 9, LevelDirection_Horizontal, 0, 1, LevelMusic_Overworld, 0, 2, $08, $0
097FD 81                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 1
097FE E8                        	.db %11100000 | $08
097FF 92                        	.db 9 << 4 | 0 << 2 | 2
09800                           	IFNDEF LEVEL_ENGINE_UPGRADES
09800 00                        		.db $0 << 3 | LevelMusic_Overworld
09801                           	ENDIF
09801                           	IFDEF LEVEL_ENGINE_UPGRADES
09801                           		.db $0 << 4 | LevelMusic_Overworld
09801                           	ENDIF
09801                           
09801 22 10                     	.db $22, $10
09803 16 11                     	.db $16, $11
09805 28 08                     	.db $28, $08
09807 15 21                     	.db $15, $21
09809 06 21                     	.db $06, $21
0980B 0B 26                     	.db $0B, $26
0980D 46 A4                     	.db $46, $A4
0980F F5 0E 01                  	.db $F5, $0E, $01
09812 26 05                     	.db $26, $05
09814 F0 82                     	.db $F0, $82
09816 F0 C3                     	.db $F0, $C3
09818 F1 84                     	.db $F1, $84
0981A F1 C0                     	.db $F1, $C0
0981C 7D 11                     	.db $7D, $11
0981E 3F 29                     	.db $3F, $29
09820 1D 29                     	.db $1D, $29
09822 13 16                     	.db $13, $16
09824 04 16                     	.db $04, $16
09826 18 29                     	.db $18, $29
09828 0C 82                     	.db $0C, $82
0982A 0D 82                     	.db $0D, $82
0982C 27 26                     	.db $27, $26
0982E 08 21                     	.db $08, $21
09830 09 21                     	.db $09, $21
09832 52 10                     	.db $52, $10
09834 16 11                     	.db $16, $11
09836 55 29                     	.db $55, $29
09838 21 82                     	.db $21, $82
0983A 04 82                     	.db $04, $82
0983C 0A 82                     	.db $0A, $82
0983E 0C 29                     	.db $0C, $29
09840 0F 26                     	.db $0F, $26
09842 17 81                     	.db $17, $81
09844 09 29                     	.db $09, $29
09846 1C 2B                     	.db $1C, $2B
09848 F1 C1                     	.db $F1, $C1
0984A 58 10                     	.db $58, $10
0984C 1B 11                     	.db $1B, $11
0984E 1C 10                     	.db $1C, $10
09850 60 21                     	.db $60, $21
09852 01 21                     	.db $01, $21
09854 02 21                     	.db $02, $21
09856 03 21                     	.db $03, $21
09858 0C D2                     	.db $0C, $D2
0985A 17 29                     	.db $17, $29
0985C 0D 0F                     	.db $0D, $0F
0985E F0 C0                     	.db $F0, $C0
09860 44 1F                     	.db $44, $1F
09862 9C D5                     	.db $9C, $D5
09864 6C 1F                     	.db $6C, $1F
09866 32 10                     	.db $32, $10
09868 18 11                     	.db $18, $11
0986A 3B 21                     	.db $3B, $21
0986C 11 21                     	.db $11, $21
0986E 0A D3                     	.db $0A, $D3
09870 25 C2                     	.db $25, $C2
09872 F0 88                     	.db $F0, $88
09874 F1 20                     	.db $F1, $20
09876 F2                        	.db $F2
09877 9A 16                     	.db $9A, $16
09879 0B 16                     	.db $0B, $16
0987B 90 10                     	.db $90, $10
0987D 13 11                     	.db $13, $11
0987F 08 10                     	.db $08, $10
09881 5D 83                     	.db $5D, $83
09883 3F 25                     	.db $3F, $25
09885 F1 C4                     	.db $F1, $C4
09887 3C 1F                     	.db $3C, $1F
09889 63 2A                     	.db $63, $2A
0988B 05 26                     	.db $05, $26
0988D 07 2A                     	.db $07, $2A
0988F 34 83                     	.db $34, $83
09891 0C DC                     	.db $0C, $DC
09893 28 A3                     	.db $28, $A3
09895 F5 0E 24                  	.db $F5, $0E, $24
09898 11 2D                     	.db $11, $2D
0989A 18 05                     	.db $18, $05
0989C F1 80                     	.db $F1, $80
0989E 5B 10                     	.db $5B, $10
098A0 1E 11                     	.db $1E, $11
098A2 5A 16                     	.db $5A, $16
098A4 F1 88                     	.db $F1, $88
098A6 FF                        	.db $FF
098A7                           include "src/levels/5/5-3/5-3-area2.asm"
098A7                           ; Level 5-3, Area 2
098A7                           
098A7                           LevelData_5_3_Area2:
098A7                           	; Level Header
098A7                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
098A7                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
098A7                           	levelHeader 4, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 2, $0a, $2
098A7 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
098A8 EA                        	.db %11100000 | $0a
098A9 42                        	.db 4 << 4 | 0 << 2 | 2
098AA                           	IFNDEF LEVEL_ENGINE_UPGRADES
098AA 11                        		.db $2 << 3 | LevelMusic_Underground
098AB                           	ENDIF
098AB                           	IFDEF LEVEL_ENGINE_UPGRADES
098AB                           		.db $2 << 4 | LevelMusic_Underground
098AB                           	ENDIF
098AB                           
098AB 04 1F                     	.db $04, $1F
098AD 7E D7                     	.db $7E, $D7
098AF 18 0B                     	.db $18, $0B
098B1                           IFNDEF DISABLE_DOOR_POINTERS
098B1                           	.db $0E, $33
098B1                           ENDIF
098B1                           IFDEF DISABLE_DOOR_POINTERS
098B1 F5 0E 33                  	.db $F5, $0E, $33
098B4                           ENDIF
098B4 F0 4C                     	.db $F0, $4C
098B6 7C 1F                     	.db $7C, $1F
098B8 6A 21                     	.db $6A, $21
098BA 18 DB                     	.db $18, $DB
098BC F0 88                     	.db $F0, $88
098BE F1 2C                     	.db $F1, $2C
098C0 F2                        	.db $F2
098C1 7D 32                     	.db $7D, $32
098C3 12 D2                     	.db $12, $D2
098C5 13 D2                     	.db $13, $D2
098C7 09 21                     	.db $09, $21
098C9 3E 24                     	.db $3E, $24
098CB F1 68                     	.db $F1, $68
098CD F1 8D                     	.db $F1, $8D
098CF C2 83                     	.db $C2, $83
098D1 35 25                     	.db $35, $25
098D3 08 21                     	.db $08, $21
098D5 0A 21                     	.db $0A, $21
098D7 0C 21                     	.db $0C, $21
098D9 0E 21                     	.db $0E, $21
098DB F0 15                     	.db $F0, $15
098DD 37 A5                     	.db $37, $A5
098DF F5 0E 18                  	.db $F5, $0E, $18
098E2 4A 00                     	.db $4A, $00
098E4 1A 04                     	.db $1A, $04
098E6 12 80                     	.db $12, $80
098E8 03 80                     	.db $03, $80
098EA 60 26                     	.db $60, $26
098EC F0 5A                     	.db $F0, $5A
098EE F0 95                     	.db $F0, $95
098F0 F0 EE                     	.db $F0, $EE
098F2 F1 CA                     	.db $F1, $CA
098F4 FF                        	.db $FF
098F5                           include "src/levels/5/5-3/5-3-area3.asm"
098F5                           ; Level 5-3, Area 3
098F5                           
098F5                           LevelData_5_3_Area3:
098F5                           	; Level Header
098F5                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
098F5                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
098F5                           	levelHeader 6, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $00, $2
098F5 18                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
098F6 E0                        	.db %11100000 | $00
098F7 61                        	.db 6 << 4 | 0 << 2 | 1
098F8                           	IFNDEF LEVEL_ENGINE_UPGRADES
098F8 11                        		.db $2 << 3 | LevelMusic_Underground
098F9                           	ENDIF
098F9                           	IFDEF LEVEL_ENGINE_UPGRADES
098F9                           		.db $2 << 4 | LevelMusic_Underground
098F9                           	ENDIF
098F9                           
098F9 68 13                     	.db $68, $13
098FB                           IFNDEF DISABLE_DOOR_POINTERS
098FB                           	.db $0E, $40
098FB                           ENDIF
098FB                           IFDEF DISABLE_DOOR_POINTERS
098FB F5 0E 40                  	.db $F5, $0E, $40
098FE                           ENDIF
098FE 28 33                     	.db $28, $33
09900 12 31                     	.db $12, $31
09902 24 31                     	.db $24, $31
09904 26 31                     	.db $26, $31
09906 F0 8A                     	.db $F0, $8A
09908 F0 B3                     	.db $F0, $B3
0990A F1 2A                     	.db $F1, $2A
0990C F1 D3                     	.db $F1, $D3
0990E 29 31                     	.db $29, $31
09910 2C 31                     	.db $2C, $31
09912 12 31                     	.db $12, $31
09914 25 31                     	.db $25, $31
09916 27 32                     	.db $27, $32
09918 22 32                     	.db $22, $32
0991A 0C 31                     	.db $0C, $31
0991C 35 31                     	.db $35, $31
0991E 28 32                     	.db $28, $32
09920 F0 4A                     	.db $F0, $4A
09922 F0 D3                     	.db $F0, $D3
09924 F1 2A                     	.db $F1, $2A
09926 F1 B3                     	.db $F1, $B3
09928 2C 31                     	.db $2C, $31
0992A 12 32                     	.db $12, $32
0992C 25 32                     	.db $25, $32
0992E 38 32                     	.db $38, $32
09930 3B 32                     	.db $3B, $32
09932 14 34                     	.db $14, $34
09934 F0 2A                     	.db $F0, $2A
09936 F0 F3                     	.db $F0, $F3
09938 F1 4A                     	.db $F1, $4A
0993A 4C 00                     	.db $4C, $00
0993C 0D 00                     	.db $0D, $00
0993E 1A 33                     	.db $1A, $33
09940 33 31                     	.db $33, $31
09942 26 81                     	.db $26, $81
09944 07 13                     	.db $07, $13
09946                           IFNDEF DISABLE_DOOR_POINTERS
09946                           	.db $0E, $20
09946                           ENDIF
09946                           IFDEF DISABLE_DOOR_POINTERS
09946 F5 0E 20                  	.db $F5, $0E, $20
09949                           ENDIF
09949 23 32                     	.db $23, $32
0994B 23 32                     	.db $23, $32
0994D 33 32                     	.db $33, $32
0994F 0A 33                     	.db $0A, $33
09951 0D 00                     	.db $0D, $00
09953 16 85                     	.db $16, $85
09955 07 85                     	.db $07, $85
09957 F0 99                     	.db $F0, $99
09959 F0 CA                     	.db $F0, $CA
0995B F1 0B                     	.db $F1, $0B
0995D F1 D5                     	.db $F1, $D5
0995F 23 32                     	.db $23, $32
09961 1B 32                     	.db $1B, $32
09963 23 31                     	.db $23, $31
09965 28 04                     	.db $28, $04
09967 14 38                     	.db $14, $38
09969 0D 00                     	.db $0D, $00
0996B 33 31                     	.db $33, $31
0996D 1A 00                     	.db $1A, $00
0996F 0B 32                     	.db $0B, $32
09971 23 31                     	.db $23, $31
09973 F1 0B                     	.db $F1, $0B
09975 33 31                     	.db $33, $31
09977 06 86                     	.db $06, $86
09979 07 86                     	.db $07, $86
0997B 08 34                     	.db $08, $34
0997D 0D 00                     	.db $0D, $00
0997F 33 31                     	.db $33, $31
09981 1B 32                     	.db $1B, $32
09983 23 31                     	.db $23, $31
09985 28 04                     	.db $28, $04
09987 14 39                     	.db $14, $39
09989 0B 00                     	.db $0B, $00
0998B 32 00                     	.db $32, $00
0998D 12 00                     	.db $12, $00
0998F F0 2A                     	.db $F0, $2A
09991 12 00                     	.db $12, $00
09993 16 33                     	.db $16, $33
09995 F0 36                     	.db $F0, $36
09997 F0 80                     	.db $F0, $80
09999 FF                        	.db $FF
0999A                           include "src/levels/5/5-3/5-3-area4.asm"
0999A                           ; Level 5-3, Area 4
0999A                           
0999A                           LevelData_5_3_Area4:
0999A                           	; Level Header
0999A                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0999A                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0999A                           	levelHeader 9, LevelDirection_Horizontal, 0, 1, LevelMusic_Boss, 0, 0, $08, $2
0999A 81                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 1
0999B E8                        	.db %11100000 | $08
0999C 90                        	.db 9 << 4 | 0 << 2 | 0
0999D                           	IFNDEF LEVEL_ENGINE_UPGRADES
0999D 12                        		.db $2 << 3 | LevelMusic_Boss
0999E                           	ENDIF
0999E                           	IFDEF LEVEL_ENGINE_UPGRADES
0999E                           		.db $2 << 4 | LevelMusic_Boss
0999E                           	ENDIF
0999E                           
0999E 02 1F                     	.db $02, $1F
099A0 67 0B                     	.db $67, $0B
099A2                           IFNDEF DISABLE_DOOR_POINTERS
099A2                           	.db $0E, $30
099A2                           ENDIF
099A2                           IFDEF DISABLE_DOOR_POINTERS
099A2 F5 0E 30                  	.db $F5, $0E, $30
099A5                           ENDIF
099A5 1F 21                     	.db $1F, $21
099A7 16 DF                     	.db $16, $DF
099A9 7A 1F                     	.db $7A, $1F
099AB 21 10                     	.db $21, $10
099AD 15 11                     	.db $15, $11
099AF 38 D9                     	.db $38, $D9
099B1 10 21                     	.db $10, $21
099B3 01 21                     	.db $01, $21
099B5 02 21                     	.db $02, $21
099B7 AD 10                     	.db $AD, $10
099B9 63 D6                     	.db $63, $D6
099BB E3 11                     	.db $E3, $11
099BD 50 10                     	.db $50, $10
099BF 0D 11                     	.db $0D, $11
099C1 3A 1F                     	.db $3A, $1F
099C3 B4 10                     	.db $B4, $10
099C5 C7 21                     	.db $C7, $21
099C7 09 21                     	.db $09, $21
099C9 0B 21                     	.db $0B, $21
099CB 14 D9                     	.db $14, $D9
099CD 98 E2                     	.db $98, $E2
099CF 49 E2                     	.db $49, $E2
099D1 13 E3                     	.db $13, $E3
099D3 0F E2                     	.db $0F, $E2
099D5 30 E1                     	.db $30, $E1
099D7 A4 E3                     	.db $A4, $E3
099D9 1A D3                     	.db $1A, $D3
099DB 1C 0F                     	.db $1C, $0F
099DD 38 10                     	.db $38, $10
099DF 0E D2                     	.db $0E, $D2
099E1 1F 0F                     	.db $1F, $0F
099E3 54 10                     	.db $54, $10
099E5 28 11                     	.db $28, $11
099E7 52 DE                     	.db $52, $DE
099E9 1A 0F                     	.db $1A, $0F
099EB 5C 89                     	.db $5C, $89
099ED 0D 89                     	.db $0D, $89
099EF 0E 89                     	.db $0E, $89
099F1 0F 89                     	.db $0F, $89
099F3 8A 81                     	.db $8A, $81
099F5 0B 81                     	.db $0B, $81
099F7 F0 8D                     	.db $F0, $8D
099F9 F1 0C                     	.db $F1, $0C
099FB F5 0E 50                  	.db $F5, $0E, $50
099FE FF                        	.db $FF
099FF                           include "src/levels/5/5-3/5-3-area5.asm"
099FF                           ; Level 5-3, Area 5
099FF                           
099FF                           LevelData_5_3_Area5:
099FF                           	; Level Header
099FF                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
099FF                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
099FF                           	levelHeader 1, LevelDirection_Horizontal, 5, 2, LevelMusic_Boss, 0, 2, $0a, $4
099FF AA                        	.db LevelDirection_Horizontal << 7 | 5 << 3 | 2
09A00 EA                        	.db %11100000 | $0a
09A01 12                        	.db 1 << 4 | 0 << 2 | 2
09A02                           	IFNDEF LEVEL_ENGINE_UPGRADES
09A02 22                        		.db $4 << 3 | LevelMusic_Boss
09A03                           	ENDIF
09A03                           	IFDEF LEVEL_ENGINE_UPGRADES
09A03                           		.db $4 << 4 | LevelMusic_Boss
09A03                           	ENDIF
09A03                           
09A03 F0 4F                     	.db $F0, $4F
09A05 F0 CC                     	.db $F0, $CC
09A07 F1 4F                     	.db $F1, $4F
09A09 F1 D7                     	.db $F1, $D7
09A0B F1 EF                     	.db $F1, $EF
09A0D F2                        	.db $F2
09A0E F0 16                     	.db $F0, $16
09A10 F0 88                     	.db $F0, $88
09A12 F0 B6                     	.db $F0, $B6
09A14 F0 C1                     	.db $F0, $C1
09A16 F0 EC                     	.db $F0, $EC
09A18 F1 EA                     	.db $F1, $EA
09A1A                           IFDEF EXTENDED_PTR_CONTINUE:
09A1A F5 8F 00                      .db $F5, $8F, $00 
09A1D                           ENDIF
09A1D 7D 91                     	.db $7D, $91
09A1F 0E 91                     	.db $0E, $91
09A21 1C 90                     	.db $1C, $90
09A23 18 37                     	.db $18, $37
09A25 FF                        	.db $FF
09A26                           ; -------------------------------
09A26                           
09A26                           
09A26                           ; -------------------------------
09A26                           ; World 6
09A26                           
09A26                           ; World 6-1
09A26                           include "src/levels/6/6-1/6-1-area0.asm"
09A26                           ; Level 6-1, Area 0
09A26                           
09A26                           LevelData_6_1_Area0:
09A26                           	; Level Header
09A26                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09A26                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09A26                           	levelHeader 9, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0d, $3
09A26 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09A27 ED                        	.db %11100000 | $0d
09A28 90                        	.db 9 << 4 | 0 << 2 | 0
09A29                           	IFNDEF LEVEL_ENGINE_UPGRADES
09A29 18                        		.db $3 << 3 | LevelMusic_Overworld
09A2A                           	ENDIF
09A2A                           	IFDEF LEVEL_ENGINE_UPGRADES
09A2A                           		.db $3 << 4 | LevelMusic_Overworld
09A2A                           	ENDIF
09A2A                           
09A2A 00 8C                     	.db $00, $8C
09A2C 01 8C                     	.db $01, $8C
09A2E 02 8C                     	.db $02, $8C
09A30 03 8C                     	.db $03, $8C
09A32 4C 10                     	.db $4C, $10
09A34 59 16                     	.db $59, $16
09A36 F1 6D                     	.db $F1, $6D
09A38 F6 01                     	.db $F6, $01
09A3A AD 10                     	.db $AD, $10
09A3C 2C 11                     	.db $2C, $11
09A3E 64 D1                     	.db $64, $D1
09A40 09 D1                     	.db $09, $D1
09A42 68 2B                     	.db $68, $2B
09A44 2A 10                     	.db $2A, $10
09A46 55 06                     	.db $55, $06
09A48 2A D1                     	.db $2A, $D1
09A4A F5 0F 60                  	.db $F5, $0F, $60
09A4D F1 CD                     	.db $F1, $CD
09A4F F6 00                     	.db $F6, $00
09A51 66 10                     	.db $66, $10
09A53 79 0F                     	.db $79, $0F
09A55 10 0F                     	.db $10, $0F
09A57 11 0F                     	.db $11, $0F
09A59 07 0F                     	.db $07, $0F
09A5B F1 8D                     	.db $F1, $8D
09A5D F6 02                     	.db $F6, $02
09A5F 64 11                     	.db $64, $11
09A61 6F 16                     	.db $6F, $16
09A63 32 D1                     	.db $32, $D1
09A65 07 D1                     	.db $07, $D1
09A67 F1 CD                     	.db $F1, $CD
09A69 F6 00                     	.db $F6, $00
09A6B 68 10                     	.db $68, $10
09A6D 7E 07                     	.db $7E, $07
09A6F 2A D1                     	.db $2A, $D1
09A71 F0 4D                     	.db $F0, $4D
09A73 F6 01                     	.db $F6, $01
09A75 72 11                     	.db $72, $11
09A77 14 10                     	.db $14, $10
09A79 51 07                     	.db $51, $07
09A7B 0E 94                     	.db $0E, $94
09A7D 26 D1                     	.db $26, $D1
09A7F F0 0D                     	.db $F0, $0D
09A81 F6 00                     	.db $F6, $00
09A83 F1 EC                     	.db $F1, $EC
09A85 F6 03                     	.db $F6, $03
09A87 56 10                     	.db $56, $10
09A89 43 0F                     	.db $43, $0F
09A8B 09 0F                     	.db $09, $0F
09A8D 16 0F                     	.db $16, $0F
09A8F 11 0F                     	.db $11, $0F
09A91 07 0F                     	.db $07, $0F
09A93 14 21                     	.db $14, $21
09A95 08 26                     	.db $08, $26
09A97 05 0F                     	.db $05, $0F
09A99 0A 0F                     	.db $0A, $0F
09A9B F0 0C                     	.db $F0, $0C
09A9D F6 00                     	.db $F6, $00
09A9F 94 10                     	.db $94, $10
09AA1 2D 0F                     	.db $2D, $0F
09AA3 2F 0F                     	.db $2F, $0F
09AA5 17 0F                     	.db $17, $0F
09AA7 0B 0F                     	.db $0B, $0F
09AA9 7C 89                     	.db $7C, $89
09AAB 0D 89                     	.db $0D, $89
09AAD 0E 89                     	.db $0E, $89
09AAF 0F 89                     	.db $0F, $89
09AB1 44 10                     	.db $44, $10
09AB3 17 54                     	.db $17, $54
09AB5 09 2D                     	.db $09, $2D
09AB7 17 34                     	.db $17, $34
09AB9 18 33                     	.db $18, $33
09ABB 17 34                     	.db $17, $34
09ABD 09 0B                     	.db $09, $0B
09ABF F5 0F 10                  	.db $F5, $0F, $10
09AC2 16 32                     	.db $16, $32
09AC4 0A 31                     	.db $0A, $31
09AC6 FF                        	.db $FF
09AC7                           include "src/levels/6/6-1/6-1-area1.asm"
09AC7                           ; Level 6-1, Area 1
09AC7                           
09AC7                           LevelData_6_1_Area1:
09AC7                           	; Level Header
09AC7                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09AC7                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09AC7                           	levelHeader 3, LevelDirection_Horizontal, 1, 1, LevelMusic_Underground, 0, 0, $0a, $3
09AC7 89                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
09AC8 EA                        	.db %11100000 | $0a
09AC9 30                        	.db 3 << 4 | 0 << 2 | 0
09ACA                           	IFNDEF LEVEL_ENGINE_UPGRADES
09ACA 19                        		.db $3 << 3 | LevelMusic_Underground
09ACB                           	ENDIF
09ACB                           	IFDEF LEVEL_ENGINE_UPGRADES
09ACB                           		.db $3 << 4 | LevelMusic_Underground
09ACB                           	ENDIF
09ACB                           
09ACB 46 13                     	.db $46, $13
09ACD F5 0F 09                  	.db $F5, $0F, $09
09AD0 2D 81                     	.db $2D, $81
09AD2 0E 81                     	.db $0E, $81
09AD4 0F 80                     	.db $0F, $80
09AD6 3B 81                     	.db $3B, $81
09AD8 F0 4E                     	.db $F0, $4E
09ADA F1 75                     	.db $F1, $75
09ADC F1 BC                     	.db $F1, $BC
09ADE C0 80                     	.db $C0, $80
09AE0 01 80                     	.db $01, $80
09AE2 44 00                     	.db $44, $00
09AE4 09 06                     	.db $09, $06
09AE6 0F 00                     	.db $0F, $00
09AE8 10 07                     	.db $10, $07
09AEA 02 07                     	.db $02, $07
09AEC 04 06                     	.db $04, $06
09AEE 05 08                     	.db $05, $08
09AF0 06 08                     	.db $06, $08
09AF2 07 07                     	.db $07, $07
09AF4 0A 07                     	.db $0A, $07
09AF6 0B 08                     	.db $0B, $08
09AF8 0C 06                     	.db $0C, $06
09AFA 0D 07                     	.db $0D, $07
09AFC 0E 07                     	.db $0E, $07
09AFE 0F 08                     	.db $0F, $08
09B00 F5 0F 50                  	.db $F5, $0F, $50
09B03 E7 00                     	.db $E7, $00
09B05 10 07                     	.db $10, $07
09B07 01 07                     	.db $01, $07
09B09 02 08                     	.db $02, $08
09B0B 03 06                     	.db $03, $06
09B0D 04 07                     	.db $04, $07
09B0F 05 07                     	.db $05, $07
09B11 06 08                     	.db $06, $08
09B13 07 08                     	.db $07, $08
09B15 F5 0F 30                  	.db $F5, $0F, $30
09B18 F1 71                     	.db $F1, $71
09B1A AB 32                     	.db $AB, $32
09B1C 1B 32                     	.db $1B, $32
09B1E 1B 32                     	.db $1B, $32
09B20 0C 09                     	.db $0C, $09
09B22 F5 0F 20                  	.db $F5, $0F, $20
09B25 1B 30                     	.db $1B, $30
09B27 0D 30                     	.db $0D, $30
09B29 F1 4F                     	.db $F1, $4F
09B2B F1 CA                     	.db $F1, $CA
09B2D FF                        	.db $FF
09B2E                           include "src/levels/6/6-1/6-1-area2.asm"
09B2E                           ; Level 6-1, Area 2
09B2E                           
09B2E                           LevelData_6_1_Area2:
09B2E                           	; Level Header
09B2E                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09B2E                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09B2E                           	levelHeader 2, LevelDirection_Horizontal, 1, 1, LevelMusic_Boss, 0, 0, $0a, $3
09B2E 89                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
09B2F EA                        	.db %11100000 | $0a
09B30 20                        	.db 2 << 4 | 0 << 2 | 0
09B31                           	IFNDEF LEVEL_ENGINE_UPGRADES
09B31 1A                        		.db $3 << 3 | LevelMusic_Boss
09B32                           	ENDIF
09B32                           	IFDEF LEVEL_ENGINE_UPGRADES
09B32                           		.db $3 << 4 | LevelMusic_Boss
09B32                           	ENDIF
09B32                           
09B32 83 13                     	.db $83, $13
09B34 F5 0F 13                  	.db $F5, $0F, $13
09B37 F0 51                     	.db $F0, $51
09B39 B7 83                     	.db $B7, $83
09B3B 26 81                     	.db $26, $81
09B3D 25 32                     	.db $25, $32
09B3F 12 00                     	.db $12, $00
09B41 03 00                     	.db $03, $00
09B43 04 00                     	.db $04, $00
09B45 05 32                     	.db $05, $32
09B47 F0 0C                     	.db $F0, $0C
09B49 F2                        	.db $F2
09B4A F0 0F                     	.db $F0, $0F
09B4C F0 6A                     	.db $F0, $6A
09B4E F5 10 00                  	.db $F5, $10, $00
09B51 FF                        	.db $FF
09B52                           include "src/levels/6/6-1/6-1-area3.asm"
09B52                           ; Level 6-1, Area 3
09B52                           
09B52                           LevelData_6_1_Area3:
09B52                           	; Level Header
09B52                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09B52                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09B52                           	levelHeader 2, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $3
09B52 18                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
09B53 E3                        	.db %11100000 | $03
09B54 21                        	.db 2 << 4 | 0 << 2 | 1
09B55                           	IFNDEF LEVEL_ENGINE_UPGRADES
09B55 19                        		.db $3 << 3 | LevelMusic_Underground
09B56                           	ENDIF
09B56                           	IFDEF LEVEL_ENGINE_UPGRADES
09B56                           		.db $3 << 4 | LevelMusic_Underground
09B56                           	ENDIF
09B56                           
09B56 F5 0F 12                  	.db $F5, $0F, $12
09B59 65 31                     	.db $65, $31
09B5B 09 31                     	.db $09, $31
09B5D 36 33                     	.db $36, $33
09B5F 24 31                     	.db $24, $31
09B61 0A 31                     	.db $0A, $31
09B63 F0 44                     	.db $F0, $44
09B65 F0 65                     	.db $F0, $65
09B67 F0 86                     	.db $F0, $86
09B69 F0 A7                     	.db $F0, $A7
09B6B F1 86                     	.db $F1, $86
09B6D F1 A8                     	.db $F1, $A8
09B6F F1 CF                     	.db $F1, $CF
09B71 F2                        	.db $F2
09B72 F0 4A                     	.db $F0, $4A
09B74 F0 CD                     	.db $F0, $CD
09B76 F1 6B                     	.db $F1, $6B
09B78 F1 A0                     	.db $F1, $A0
09B7A FF                        	.db $FF
09B7B                           include "src/levels/6/6-1/6-1-area4.asm"
09B7B                           ; Level 6-1, Area 4
09B7B                           
09B7B                           LevelData_6_1_Area4:
09B7B                           	; Level Header
09B7B                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09B7B                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09B7B                           	levelHeader 0, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
09B7B 18                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
09B7C E3                        	.db %11100000 | $03
09B7D 01                        	.db 0 << 4 | 0 << 2 | 1
09B7E                           	IFNDEF LEVEL_ENGINE_UPGRADES
09B7E 01                        		.db $0 << 3 | LevelMusic_Underground
09B7F                           	ENDIF
09B7F                           	IFDEF LEVEL_ENGINE_UPGRADES
09B7F                           		.db $0 << 4 | LevelMusic_Underground
09B7F                           	ENDIF
09B7F                           
09B7F 64 32                     	.db $64, $32
09B81 09 32                     	.db $09, $32
09B83 34 30                     	.db $34, $30
09B85 0B 30                     	.db $0B, $30
09B87 15 35                     	.db $15, $35
09B89 28 24                     	.db $28, $24
09B8B F0 44                     	.db $F0, $44
09B8D F0 65                     	.db $F0, $65
09B8F F0 86                     	.db $F0, $86
09B91 F0 A7                     	.db $F0, $A7
09B93 F1 66                     	.db $F1, $66
09B95 F1 83                     	.db $F1, $83
09B97 F1 A0                     	.db $F1, $A0
09B99 FF                        	.db $FF
09B9A                           include "src/levels/6/6-1/6-1-area5.asm"
09B9A                           ; Level 6-1, Area 5
09B9A                           
09B9A                           LevelData_6_1_Area5:
09B9A                           	; Level Header
09B9A                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09B9A                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09B9A                           	levelHeader 2, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $3
09B9A 18                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
09B9B E3                        	.db %11100000 | $03
09B9C 21                        	.db 2 << 4 | 0 << 2 | 1
09B9D                           	IFNDEF LEVEL_ENGINE_UPGRADES
09B9D 19                        		.db $3 << 3 | LevelMusic_Underground
09B9E                           	ENDIF
09B9E                           	IFDEF LEVEL_ENGINE_UPGRADES
09B9E                           		.db $3 << 4 | LevelMusic_Underground
09B9E                           	ENDIF
09B9E                           
09B9E F5 0F 11                  	.db $F5, $0F, $11
09BA1 65 31                     	.db $65, $31
09BA3 09 31                     	.db $09, $31
09BA5 36 33                     	.db $36, $33
09BA7 24 31                     	.db $24, $31
09BA9 0A 31                     	.db $0A, $31
09BAB F0 44                     	.db $F0, $44
09BAD F0 65                     	.db $F0, $65
09BAF F0 86                     	.db $F0, $86
09BB1 F0 A7                     	.db $F0, $A7
09BB3 F1 86                     	.db $F1, $86
09BB5 F1 A8                     	.db $F1, $A8
09BB7 F1 CF                     	.db $F1, $CF
09BB9 C6 82                     	.db $C6, $82
09BBB 07 82                     	.db $07, $82
09BBD 08 82                     	.db $08, $82
09BBF 09 82                     	.db $09, $82
09BC1 26 27                     	.db $26, $27
09BC3 07 22                     	.db $07, $22
09BC5 08 22                     	.db $08, $22
09BC7 09 27                     	.db $09, $27
09BC9 F0 4A                     	.db $F0, $4A
09BCB F0 CD                     	.db $F0, $CD
09BCD F1 6B                     	.db $F1, $6B
09BCF F1 A0                     	.db $F1, $A0
09BD1 FF                        	.db $FF
09BD2                           include "src/levels/6/6-1/6-1-area6.asm"
09BD2                           ; Level 6-1, Area 6
09BD2                           
09BD2                           LevelData_6_1_Area6:
09BD2                           	; Level Header
09BD2                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09BD2                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09BD2                           	levelHeader 0, LevelDirection_Vertical, 3, 0, LevelMusic_Underground, 0, 1, $03, $0
09BD2 18                        	.db LevelDirection_Vertical << 7 | 3 << 3 | 0
09BD3 E3                        	.db %11100000 | $03
09BD4 01                        	.db 0 << 4 | 0 << 2 | 1
09BD5                           	IFNDEF LEVEL_ENGINE_UPGRADES
09BD5 01                        		.db $0 << 3 | LevelMusic_Underground
09BD6                           	ENDIF
09BD6                           	IFDEF LEVEL_ENGINE_UPGRADES
09BD6                           		.db $0 << 4 | LevelMusic_Underground
09BD6                           	ENDIF
09BD6                           
09BD6 65 31                     	.db $65, $31
09BD8 09 31                     	.db $09, $31
09BDA 33 31                     	.db $33, $31
09BDC 0B 31                     	.db $0B, $31
09BDE 17 31                     	.db $17, $31
09BE0 26 26                     	.db $26, $26
09BE2 F5 0F 02                  	.db $F5, $0F, $02
09BE5 F0 44                     	.db $F0, $44
09BE7 F0 65                     	.db $F0, $65
09BE9 F0 86                     	.db $F0, $86
09BEB F0 A7                     	.db $F0, $A7
09BED F1 86                     	.db $F1, $86
09BEF F1 A8                     	.db $F1, $A8
09BF1 F1 CF                     	.db $F1, $CF
09BF3 F6 04                     	.db $F6, $04
09BF5 FF                        	.db $FF
09BF6                           
09BF6                           ; World 6-2
09BF6                           include "src/levels/6/6-2/6-2-area0.asm"
09BF6                           ; Level 6-2, Area 0
09BF6                           
09BF6                           LevelData_6_2_Area0:
09BF6                           	; Level Header
09BF6                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09BF6                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09BF6                           	levelHeader 1, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 0, $0a, $3
09BF6 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
09BF7 EA                        	.db %11100000 | $0a
09BF8 10                        	.db 1 << 4 | 0 << 2 | 0
09BF9                           	IFNDEF LEVEL_ENGINE_UPGRADES
09BF9 19                        		.db $3 << 3 | LevelMusic_Underground
09BFA                           	ENDIF
09BFA                           	IFDEF LEVEL_ENGINE_UPGRADES
09BFA                           		.db $3 << 4 | LevelMusic_Underground
09BFA                           	ENDIF
09BFA                           
09BFA F0 54                     	.db $F0, $54
09BFC F1 8F                     	.db $F1, $8F
09BFE F2                        	.db $F2
09BFF 4C 14                     	.db $4C, $14
09C01 F5 10 10                  	.db $F5, $10, $10
09C04 F0 CE                     	.db $F0, $CE
09C06 F1 EA                     	.db $F1, $EA
09C08 FF                        	.db $FF
09C09                           include "src/levels/6/6-2/6-2-area1.asm"
09C09                           ; Level 6-2, Area 1
09C09                           
09C09                           LevelData_6_2_Area1:
09C09                           	; Level Header
09C09                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09C09                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09C09                           	levelHeader 9, LevelDirection_Horizontal, 2, 1, LevelMusic_Overworld, 0, 0, $0a, $3
09C09 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
09C0A EA                        	.db %11100000 | $0a
09C0B 90                        	.db 9 << 4 | 0 << 2 | 0
09C0C                           	IFNDEF LEVEL_ENGINE_UPGRADES
09C0C 18                        		.db $3 << 3 | LevelMusic_Overworld
09C0D                           	ENDIF
09C0D                           	IFDEF LEVEL_ENGINE_UPGRADES
09C0D                           		.db $3 << 4 | LevelMusic_Overworld
09C0D                           	ENDIF
09C0D                           
09C0D 00 0E                     	.db $00, $0E
09C0F 93 0B                     	.db $93, $0B
09C11 F5 10 01                  	.db $F5, $10, $01
09C14 19 21                     	.db $19, $21
09C16 F0 81                     	.db $F0, $81
09C18 F1 88                     	.db $F1, $88
09C1A F1 E0                     	.db $F1, $E0
09C1C F2                        	.db $F2
09C1D F0 88                     	.db $F0, $88
09C1F F2                        	.db $F2
09C20 C9 82                     	.db $C9, $82
09C22 0A 82                     	.db $0A, $82
09C24 0B 82                     	.db $0B, $82
09C26 F3                        	.db $F3
09C27 8F 86                     	.db $8F, $86
09C29 F2                        	.db $F2
09C2A 70 26                     	.db $70, $26
09C2C 01 21                     	.db $01, $21
09C2E 04 2B                     	.db $04, $2B
09C30 10 86                     	.db $10, $86
09C32 01 86                     	.db $01, $86
09C34 04 86                     	.db $04, $86
09C36 05 86                     	.db $05, $86
09C38 F3                        	.db $F3
09C39 F3                        	.db $F3
09C3A 4C 0B                     	.db $4C, $0B
09C3C F5 10 20                  	.db $F5, $10, $20
09C3F 40 21                     	.db $40, $21
09C41 10 85                     	.db $10, $85
09C43 01 85                     	.db $01, $85
09C45 F0 8B                     	.db $F0, $8B
09C47 F1 8A                     	.db $F1, $8A
09C49 FF                        	.db $FF
09C4A                           include "src/levels/6/6-2/6-2-area2.asm"
09C4A                           ; Level 6-2, Area 2
09C4A                           
09C4A                           LevelData_6_2_Area2:
09C4A                           	; Level Header
09C4A                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09C4A                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09C4A                           	levelHeader 2, LevelDirection_Horizontal, 2, 1, LevelMusic_Boss, 0, 0, $0a, $3
09C4A 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
09C4B EA                        	.db %11100000 | $0a
09C4C 20                        	.db 2 << 4 | 0 << 2 | 0
09C4D                           	IFNDEF LEVEL_ENGINE_UPGRADES
09C4D 1A                        		.db $3 << 3 | LevelMusic_Boss
09C4E                           	ENDIF
09C4E                           	IFDEF LEVEL_ENGINE_UPGRADES
09C4E                           		.db $3 << 4 | LevelMusic_Boss
09C4E                           	ENDIF
09C4E                           
09C4E 43 13                     	.db $43, $13
09C50 F5 10 19                  	.db $F5, $10, $19
09C53 F0 4E                     	.db $F0, $4E
09C55 F2                        	.db $F2
09C56 6A 00                     	.db $6A, $00
09C58 18 32                     	.db $18, $32
09C5A 0E 31                     	.db $0E, $31
09C5C 34 31                     	.db $34, $31
09C5E 28 00                     	.db $28, $00
09C60 09 44                     	.db $09, $44
09C62 F0 90                     	.db $F0, $90
09C64 AA 82                     	.db $AA, $82
09C66 0B 82                     	.db $0B, $82
09C68 0C 82                     	.db $0C, $82
09C6A 0D 82                     	.db $0D, $82
09C6C F5 11 00                  	.db $F5, $11, $00
09C6F F0 0E                     	.db $F0, $0E
09C71 F1 0F                     	.db $F1, $0F
09C73 F1 CA                     	.db $F1, $CA
09C75 FF                        	.db $FF
09C76                           
09C76                           ; World 6-3
09C76                           include "src/levels/6/6-3/6-3-area0.asm"
09C76                           ; Level 6-3, Area 0
09C76                           
09C76                           LevelData_6_3_Area0:
09C76                           	; Level Header
09C76                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09C76                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09C76                           	levelHeader 0, LevelDirection_Horizontal, 1, 1, LevelMusic_Underground, 0, 0, $0a, $0
09C76 89                        	.db LevelDirection_Horizontal << 7 | 1 << 3 | 1
09C77 EA                        	.db %11100000 | $0a
09C78 00                        	.db 0 << 4 | 0 << 2 | 0
09C79                           	IFNDEF LEVEL_ENGINE_UPGRADES
09C79 01                        		.db $0 << 3 | LevelMusic_Underground
09C7A                           	ENDIF
09C7A                           	IFDEF LEVEL_ENGINE_UPGRADES
09C7A                           		.db $0 << 4 | LevelMusic_Underground
09C7A                           	ENDIF
09C7A                           
09C7A 07 A9                     	.db $07, $A9
09C7C F5 11 11                  	.db $F5, $11, $11
09C7F F0 50                     	.db $F0, $50
09C81 F1 CA                     	.db $F1, $CA
09C83 FF                        	.db $FF
09C84                           include "src/levels/6/6-3/6-3-area1.asm"
09C84                           ; Level 6-3, Area 1
09C84                           
09C84                           LevelData_6_3_Area1:
09C84                           	; Level Header
09C84                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09C84                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09C84                           	levelHeader 4, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $0c, $0
09C84 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09C85 EC                        	.db %11100000 | $0c
09C86 40                        	.db 4 << 4 | 0 << 2 | 0
09C87                           	IFNDEF LEVEL_ENGINE_UPGRADES
09C87 00                        		.db $0 << 3 | LevelMusic_Overworld
09C88                           	ENDIF
09C88                           	IFDEF LEVEL_ENGINE_UPGRADES
09C88                           		.db $0 << 4 | LevelMusic_Overworld
09C88                           	ENDIF
09C88                           
09C88 00 89                     	.db $00, $89
09C8A 01 89                     	.db $01, $89
09C8C 0A 89                     	.db $0A, $89
09C8E 0B 89                     	.db $0B, $89
09C90 0C 89                     	.db $0C, $89
09C92 0D 89                     	.db $0D, $89
09C94 0E 89                     	.db $0E, $89
09C96 0F 89                     	.db $0F, $89
09C98 75 0A                     	.db $75, $0A
09C9A F5 11 44                  	.db $F5, $11, $44
09C9D 24 42                     	.db $24, $42
09C9F F1 0C                     	.db $F1, $0C
09CA1 F6 01                     	.db $F6, $01
09CA3 60 89                     	.db $60, $89
09CA5 01 89                     	.db $01, $89
09CA7 02 89                     	.db $02, $89
09CA9 03 89                     	.db $03, $89
09CAB 28 10                     	.db $28, $10
09CAD 1A 11                     	.db $1A, $11
09CAF 3E 0F                     	.db $3E, $0F
09CB1 28 A6                     	.db $28, $A6
09CB3 0C 0F                     	.db $0C, $0F
09CB5 0F 0F                     	.db $0F, $0F
09CB7 F5 11 00                  	.db $F5, $11, $00
09CBA 1A 26                     	.db $1A, $26
09CBC 18 05                     	.db $18, $05
09CBE 38 05                     	.db $38, $05
09CC0 F0 CC                     	.db $F0, $CC
09CC2 F6 00                     	.db $F6, $00
09CC4 48 11                     	.db $48, $11
09CC6 1D 11                     	.db $1D, $11
09CC8 14 10                     	.db $14, $10
09CCA 54 D1                     	.db $54, $D1
09CCC 08 D1                     	.db $08, $D1
09CCE 0D 0F                     	.db $0D, $0F
09CD0 F0 4C                     	.db $F0, $4C
09CD2 F6 02                     	.db $F6, $02
09CD4 8A 10                     	.db $8A, $10
09CD6 14 10                     	.db $14, $10
09CD8 0D 11                     	.db $0D, $11
09CDA 50 2B                     	.db $50, $2B
09CDC 10 0F                     	.db $10, $0F
09CDE 04 D1                     	.db $04, $D1
09CE0 0B D1                     	.db $0B, $D1
09CE2 0F 2A                     	.db $0F, $2A
09CE4 F1 CC                     	.db $F1, $CC
09CE6 F6 00                     	.db $F6, $00
09CE8 6B 89                     	.db $6B, $89
09CEA 0C 89                     	.db $0C, $89
09CEC 0D 89                     	.db $0D, $89
09CEE 0E 89                     	.db $0E, $89
09CF0 0F 89                     	.db $0F, $89
09CF2 0A 97                     	.db $0A, $97
09CF4 19 1E                     	.db $19, $1E
09CF6 F5 11 20                  	.db $F5, $11, $20
09CF9 FF                        	.db $FF
09CFA                           include "src/levels/6/6-3/6-3-area2.asm"
09CFA                           ; Level 6-3, Area 2
09CFA                           
09CFA                           LevelData_6_3_Area2:
09CFA                           	; Level Header
09CFA                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09CFA                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09CFA                           	levelHeader 7, LevelDirection_Horizontal, 2, 1, LevelMusic_Underground, 0, 2, $0a, $3
09CFA 91                        	.db LevelDirection_Horizontal << 7 | 2 << 3 | 1
09CFB EA                        	.db %11100000 | $0a
09CFC 72                        	.db 7 << 4 | 0 << 2 | 2
09CFD                           	IFNDEF LEVEL_ENGINE_UPGRADES
09CFD 19                        		.db $3 << 3 | LevelMusic_Underground
09CFE                           	ENDIF
09CFE                           	IFDEF LEVEL_ENGINE_UPGRADES
09CFE                           		.db $3 << 4 | LevelMusic_Underground
09CFE                           	ENDIF
09CFE                           
09CFE 65 15                     	.db $65, $15
09D00 06 13                     	.db $06, $13
09D02 F5 11 14                  	.db $F5, $11, $14
09D05 F0 8F                     	.db $F0, $8F
09D07 C4 A4                     	.db $C4, $A4
09D09 13 29                     	.db $13, $29
09D0B 05 29                     	.db $05, $29
09D0D 2D A1                     	.db $2D, $A1
09D0F 34 04                     	.db $34, $04
09D11 0F 04                     	.db $0F, $04
09D13 1A 39                     	.db $1A, $39
09D15 1A 39                     	.db $1A, $39
09D17 1A 39                     	.db $1A, $39
09D19 F1 5B                     	.db $F1, $5B
09D1B 95 A1                     	.db $95, $A1
09D1D 0A A1                     	.db $0A, $A1
09D1F 3C 04                     	.db $3C, $04
09D21 18 36                     	.db $18, $36
09D23 18 36                     	.db $18, $36
09D25 18 36                     	.db $18, $36
09D27 02 29                     	.db $02, $29
09D29 0E 29                     	.db $0E, $29
09D2B F0 91                     	.db $F0, $91
09D2D F1 1B                     	.db $F1, $1B
09D2F F1 F1                     	.db $F1, $F1
09D31 5D 83                     	.db $5D, $83
09D33 36 25                     	.db $36, $25
09D35 07 25                     	.db $07, $25
09D37 12 31                     	.db $12, $31
09D39 12 31                     	.db $12, $31
09D3B 12 31                     	.db $12, $31
09D3D 10 41                     	.db $10, $41
09D3F 02 31                     	.db $02, $31
09D41 04 83                     	.db $04, $83
09D43 12 31                     	.db $12, $31
09D45 07 29                     	.db $07, $29
09D47 12 31                     	.db $12, $31
09D49 05 3A                     	.db $05, $3A
09D4B 12 31                     	.db $12, $31
09D4D 05 3A                     	.db $05, $3A
09D4F F0 5C                     	.db $F0, $5C
09D51 F0 95                     	.db $F0, $95
09D53 90 37                     	.db $90, $37
09D55 10 37                     	.db $10, $37
09D57 10 37                     	.db $10, $37
09D59 10 37                     	.db $10, $37
09D5B 08 83                     	.db $08, $83
09D5D 09 83                     	.db $09, $83
09D5F 0F 83                     	.db $0F, $83
09D61 10 37                     	.db $10, $37
09D63 10 37                     	.db $10, $37
09D65 1A 54                     	.db $1A, $54
09D67 00 37                     	.db $00, $37
09D69 F0 1C                     	.db $F0, $1C
09D6B F1 15                     	.db $F1, $15
09D6D 34 88                     	.db $34, $88
09D6F 0D 88                     	.db $0D, $88
09D71 50 25                     	.db $50, $25
09D73 02 25                     	.db $02, $25
09D75 06 26                     	.db $06, $26
09D77 0A 25                     	.db $0A, $25
09D79 0C 25                     	.db $0C, $25
09D7B 0E 25                     	.db $0E, $25
09D7D 38 80                     	.db $38, $80
09D7F 19 83                     	.db $19, $83
09D81 0A 83                     	.db $0A, $83
09D83 32 25                     	.db $32, $25
09D85 0F 25                     	.db $0F, $25
09D87 F0 88                     	.db $F0, $88
09D89 F0 B5                     	.db $F0, $B5
09D8B F1 1C                     	.db $F1, $1C
09D8D F1 35                     	.db $F1, $35
09D8F F1 A8                     	.db $F1, $A8
09D91 F1 D5                     	.db $F1, $D5
09D93 7D A8                     	.db $7D, $A8
09D95 17 25                     	.db $17, $25
09D97 1D 05                     	.db $1D, $05
09D99 12 81                     	.db $12, $81
09D9B 23 83                     	.db $23, $83
09D9D 31 25                     	.db $31, $25
09D9F 00 2D                     	.db $00, $2D
09DA1 04 52                     	.db $04, $52
09DA3 08 52                     	.db $08, $52
09DA5 F0 5C                     	.db $F0, $5C
09DA7 F0 75                     	.db $F0, $75
09DA9 F1 BC                     	.db $F1, $BC
09DAB F1 D1                     	.db $F1, $D1
09DAD B8 12                     	.db $B8, $12
09DAF F1 0C                     	.db $F1, $0C
09DB1 F1 2A                     	.db $F1, $2A
09DB3 F5 11 39                  	.db $F5, $11, $39
09DB6 FF                        	.db $FF
09DB7                           include "src/levels/6/6-3/6-3-area3.asm"
09DB7                           ; Level 6-3, Area 3
09DB7                           
09DB7                           LevelData_6_3_Area3:
09DB7                           	; Level Header
09DB7                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09DB7                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09DB7                           	levelHeader 9, LevelDirection_Vertical, 0, 0, LevelMusic_Overworld, 0, 0, $13, $1
09DB7 00                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 0
09DB8 F3                        	.db %11100000 | $13
09DB9 90                        	.db 9 << 4 | 0 << 2 | 0
09DBA                           	IFNDEF LEVEL_ENGINE_UPGRADES
09DBA 08                        		.db $1 << 3 | LevelMusic_Overworld
09DBB                           	ENDIF
09DBB                           	IFDEF LEVEL_ENGINE_UPGRADES
09DBB                           		.db $1 << 4 | LevelMusic_Overworld
09DBB                           	ENDIF
09DBB                           
09DBB 34 E1                     	.db $34, $E1
09DBD 48 E1                     	.db $48, $E1
09DBF 67 12                     	.db $67, $12
09DC1 F5 11 40                  	.db $F5, $11, $40
09DC4 32 E1                     	.db $32, $E1
09DC6 09 E4                     	.db $09, $E4
09DC8 54 12                     	.db $54, $12
09DCA 18 12                     	.db $18, $12
09DCC 09 12                     	.db $09, $12
09DCE 0A 12                     	.db $0A, $12
09DD0 0B 12                     	.db $0B, $12
09DD2 0C 12                     	.db $0C, $12
09DD4 84 E1                     	.db $84, $E1
09DD6 3A E2                     	.db $3A, $E2
09DD8 22 12                     	.db $22, $12
09DDA 1D 12                     	.db $1D, $12
09DDC 16 E1                     	.db $16, $E1
09DDE 54 12                     	.db $54, $12
09DE0 3C 12                     	.db $3C, $12
09DE2 2B 12                     	.db $2B, $12
09DE4 26 12                     	.db $26, $12
09DE6 0A 12                     	.db $0A, $12
09DE8 44 E7                     	.db $44, $E7
09DEA 34 12                     	.db $34, $12
09DEC 05 12                     	.db $05, $12
09DEE 16 12                     	.db $16, $12
09DF0 27 12                     	.db $27, $12
09DF2 08 12                     	.db $08, $12
09DF4 0C E1                     	.db $0C, $E1
09DF6 24 00                     	.db $24, $00
09DF8 0A 00                     	.db $0A, $00
09DFA 13 E1                     	.db $13, $E1
09DFC 0A E2                     	.db $0A, $E2
09DFE 55 E4                     	.db $55, $E4
09E00 36 E2                     	.db $36, $E2
09E02 21 E1                     	.db $21, $E1
09E04 4A 12                     	.db $4A, $12
09E06 0D 12                     	.db $0D, $12
09E08 34 12                     	.db $34, $12
09E0A 16 E2                     	.db $16, $E2
09E0C 52 12                     	.db $52, $12
09E0E 04 E1                     	.db $04, $E1
09E10 40 EB                     	.db $40, $EB
09E12 0C 03                     	.db $0C, $03
09E14 0D E2                     	.db $0D, $E2
09E16 51 EA                     	.db $51, $EA
09E18 0C 03                     	.db $0C, $03
09E1A 0D E1                     	.db $0D, $E1
09E1C 32 12                     	.db $32, $12
09E1E 03 12                     	.db $03, $12
09E20 04 12                     	.db $04, $12
09E22 05 12                     	.db $05, $12
09E24 08 12                     	.db $08, $12
09E26 09 12                     	.db $09, $12
09E28 0A 12                     	.db $0A, $12
09E2A 2C 12                     	.db $2C, $12
09E2C 17 12                     	.db $17, $12
09E2E 87 E1                     	.db $87, $E1
09E30 11 12                     	.db $11, $12
09E32 0D 12                     	.db $0D, $12
09E34 32 E2                     	.db $32, $E2
09E36 09 E2                     	.db $09, $E2
09E38 36 E1                     	.db $36, $E1
09E3A 18 12                     	.db $18, $12
09E3C 59 E1                     	.db $59, $E1
09E3E 55 12                     	.db $55, $12
09E40 46 12                     	.db $46, $12
09E42 29 12                     	.db $29, $12
09E44 F0 34                     	.db $F0, $34
09E46 F2                        	.db $F2
09E47 07 0C                     	.db $07, $0C
09E49 F5 11 27                  	.db $F5, $11, $27
09E4C F0 18                     	.db $F0, $18
09E4E F0 57                     	.db $F0, $57
09E50 F4                        	.db $F4
09E51 44 0D                     	.db $44, $0D
09E53 48 0D                     	.db $48, $0D
09E55 92 0D                     	.db $92, $0D
09E57 0D 0D                     	.db $0D, $0D
09E59 F2                        	.db $F2
09E5A 4A 0D                     	.db $4A, $0D
09E5C 0B 0D                     	.db $0B, $0D
09E5E 0C 0D                     	.db $0C, $0D
09E60 46 0D                     	.db $46, $0D
09E62 B3 0C                     	.db $B3, $0C
09E64 BD 0D                     	.db $BD, $0D
09E66 34 0D                     	.db $34, $0D
09E68 0A 0D                     	.db $0A, $0D
09E6A A2 0D                     	.db $A2, $0D
09E6C BC 0C                     	.db $BC, $0C
09E6E 6C 0D                     	.db $6C, $0D
09E70 51 0D                     	.db $51, $0D
09E72 0D 0D                     	.db $0D, $0D
09E74 B5 0C                     	.db $B5, $0C
09E76 19 0C                     	.db $19, $0C
09E78 0A 0C                     	.db $0A, $0C
09E7A 0B 0C                     	.db $0B, $0C
09E7C 96 0D                     	.db $96, $0D
09E7E CE 86                     	.db $CE, $86
09E80 2D 84                     	.db $2D, $84
09E82 2B 82                     	.db $2B, $82
09E84 0C 82                     	.db $0C, $82
09E86 59 8C                     	.db $59, $8C
09E88 26 8A                     	.db $26, $8A
09E8A 08 8A                     	.db $08, $8A
09E8C 97 03                     	.db $97, $03
09E8E 17 03                     	.db $17, $03
09E90 FF                        	.db $FF
09E91                           include "src/levels/6/6-3/6-3-area4.asm"
09E91                           ; Level 6-3, Area 4
09E91                           
09E91                           LevelData_6_3_Area4:
09E91                           	; Level Header
09E91                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09E91                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09E91                           	levelHeader 4, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $08, $0
09E91 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09E92 E8                        	.db %11100000 | $08
09E93 40                        	.db 4 << 4 | 0 << 2 | 0
09E94                           	IFNDEF LEVEL_ENGINE_UPGRADES
09E94 00                        		.db $0 << 3 | LevelMusic_Overworld
09E95                           	ENDIF
09E95                           	IFDEF LEVEL_ENGINE_UPGRADES
09E95                           		.db $0 << 4 | LevelMusic_Overworld
09E95                           	ENDIF
09E95                           
09E95 24 10                     	.db $24, $10
09E97 28 0C                     	.db $28, $0C
09E99 F5 11 30                  	.db $F5, $11, $30
09E9C 0E 11                     	.db $0E, $11
09E9E 90 E7                     	.db $90, $E7
09EA0 08 03                     	.db $08, $03
09EA2 09 EF                     	.db $09, $EF
09EA4 50 10                     	.db $50, $10
09EA6 28 11                     	.db $28, $11
09EA8 6C 3F                     	.db $6C, $3F
09EAA 1A 3E                     	.db $1A, $3E
09EAC 1E 3F                     	.db $1E, $3F
09EAE 40 10                     	.db $40, $10
09EB0 22 11                     	.db $22, $11
09EB2 07 17                     	.db $07, $17
09EB4 59 0B                     	.db $59, $0B
09EB6 F5 11 50                  	.db $F5, $11, $50
09EB9 2C 37                     	.db $2C, $37
09EBB 19 3C                     	.db $19, $3C
09EBD 1E 33                     	.db $1E, $33
09EBF 13 39                     	.db $13, $39
09EC1 48 11                     	.db $48, $11
09EC3 19 E2                     	.db $19, $E2
09EC5 12 10                     	.db $12, $10
09EC7 F2                        	.db $F2
09EC8 2A 0A                     	.db $2A, $0A
09ECA F5 11 10                  	.db $F5, $11, $10
09ECD 20 E1                     	.db $20, $E1
09ECF 04 E1                     	.db $04, $E1
09ED1 09 E2                     	.db $09, $E2
09ED3 4D 11                     	.db $4D, $11
09ED5 13 10                     	.db $13, $10
09ED7 28 11                     	.db $28, $11
09ED9 FF                        	.db $FF
09EDA                           include "src/levels/6/6-3/6-3-area5.asm"
09EDA                           ; Level 6-3, Area 5
09EDA                           
09EDA                           LevelData_6_3_Area5:
09EDA                           	; Level Header
09EDA                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09EDA                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09EDA                           	levelHeader 1, LevelDirection_Horizontal, 4, 0, LevelMusic_Boss, 0, 3, $0a, $4
09EDA A0                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 0
09EDB EA                        	.db %11100000 | $0a
09EDC 13                        	.db 1 << 4 | 0 << 2 | 3
09EDD                           	IFNDEF LEVEL_ENGINE_UPGRADES
09EDD 22                        		.db $4 << 3 | LevelMusic_Boss
09EDE                           	ENDIF
09EDE                           	IFDEF LEVEL_ENGINE_UPGRADES
09EDE                           		.db $4 << 4 | LevelMusic_Boss
09EDE                           	ENDIF
09EDE                           
09EDE 86 13                     	.db $86, $13
09EE0 F5 11 42                  	.db $F5, $11, $42
09EE3 F0 AF                     	.db $F0, $AF
09EE5 C3 32                     	.db $C3, $32
09EE7 07 36                     	.db $07, $36
09EE9 46 00                     	.db $46, $00
09EEB F0 11                     	.db $F0, $11
09EED F0 6C                     	.db $F0, $6C
09EEF F1 4B                     	.db $F1, $4B
09EF1 F1 CA                     	.db $F1, $CA
09EF3 F5 11 60                  	.db $F5, $11, $60
09EF6 FF                        	.db $FF
09EF7                           include "src/levels/6/6-3/6-3-area6.asm"
09EF7                           ; Level 6-3, Area 6
09EF7                           
09EF7                           LevelData_6_3_Area6:
09EF7                           	; Level Header
09EF7                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09EF7                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09EF7                           	levelHeader 1, LevelDirection_Horizontal, 5, 2, LevelMusic_Boss, 0, 3, $18, $5
09EF7 AA                        	.db LevelDirection_Horizontal << 7 | 5 << 3 | 2
09EF8 F8                        	.db %11100000 | $18
09EF9 13                        	.db 1 << 4 | 0 << 2 | 3
09EFA                           	IFNDEF LEVEL_ENGINE_UPGRADES
09EFA 2A                        		.db $5 << 3 | LevelMusic_Boss
09EFB                           	ENDIF
09EFB                           	IFDEF LEVEL_ENGINE_UPGRADES
09EFB                           		.db $5 << 4 | LevelMusic_Boss
09EFB                           	ENDIF
09EFB                           
09EFB F0 50                     	.db $F0, $50
09EFD F0 CD                     	.db $F0, $CD
09EFF F1 0C                     	.db $F1, $0C
09F01 F1 4F                     	.db $F1, $4F
09F03 F1 8E                     	.db $F1, $8E
09F05 F2                        	.db $F2
09F06 8B 81                     	.db $8B, $81
09F08 15 32                     	.db $15, $32
09F0A 32 00                     	.db $32, $00
09F0C 03 00                     	.db $03, $00
09F0E 04 00                     	.db $04, $00
09F10 05 00                     	.db $05, $00
09F12 06 00                     	.db $06, $00
09F14 07 00                     	.db $07, $00
09F16 08 00                     	.db $08, $00
09F18                           IFDEF EXTENDED_PTR_CONTINUE:
09F18 F5 92 00                      .db $F5, $92, $00 
09F1B                           ENDIF
09F1B F0 50                     	.db $F0, $50
09F1D F1 37                     	.db $F1, $37
09F1F F1 6F                     	.db $F1, $6F
09F21 F1 97                     	.db $F1, $97
09F23 F1 CA                     	.db $F1, $CA
09F25 FF                        	.db $FF
09F26                           ; -------------------------------
09F26                           
09F26                           
09F26                           ; -------------------------------
09F26                           ; World 7
09F26                           
09F26                           ; World 7-1
09F26                           include "src/levels/7/7-1/7-1-area0.asm"
09F26                           ; Level 7-1, Area 0
09F26                           
09F26                           LevelData_7_1_Area0:
09F26                           	; Level Header
09F26                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09F26                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09F26                           	levelHeader 0, LevelDirection_Vertical, 0, 0, LevelMusic_Overworld, 0, 0, $13, $0
09F26 00                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 0
09F27 F3                        	.db %11100000 | $13
09F28 00                        	.db 0 << 4 | 0 << 2 | 0
09F29                           	IFNDEF LEVEL_ENGINE_UPGRADES
09F29 00                        		.db $0 << 3 | LevelMusic_Overworld
09F2A                           	ENDIF
09F2A                           	IFDEF LEVEL_ENGINE_UPGRADES
09F2A                           		.db $0 << 4 | LevelMusic_Overworld
09F2A                           	ENDIF
09F2A                           
09F2A 03 A3                     	.db $03, $A3
09F2C F5 12 12                  	.db $F5, $12, $12
09F2F 43 E5                     	.db $43, $E5
09F31 20 86                     	.db $20, $86
09F33 01 86                     	.db $01, $86
09F35 18 E3                     	.db $18, $E3
09F37 3A E3                     	.db $3A, $E3
09F39 30 EF                     	.db $30, $EF
09F3B FF                        	.db $FF
09F3C                           include "src/levels/7/7-1/7-1-area1.asm"
09F3C                           ; Level 7-1, Area 1
09F3C                           
09F3C                           LevelData_7_1_Area1:
09F3C                           	; Level Header
09F3C                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09F3C                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09F3C                           	levelHeader 6, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 3, $08, $0
09F3C 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09F3D E8                        	.db %11100000 | $08
09F3E 63                        	.db 6 << 4 | 0 << 2 | 3
09F3F                           	IFNDEF LEVEL_ENGINE_UPGRADES
09F3F 00                        		.db $0 << 3 | LevelMusic_Overworld
09F40                           	ENDIF
09F40                           	IFDEF LEVEL_ENGINE_UPGRADES
09F40                           		.db $0 << 4 | LevelMusic_Overworld
09F40                           	ENDIF
09F40                           
09F40 27 A9                     	.db $27, $A9
09F42 74 23                     	.db $74, $23
09F44 F5 12 20                  	.db $F5, $12, $20
09F47 13 81                     	.db $13, $81
09F49 04 81                     	.db $04, $81
09F4B 05 81                     	.db $05, $81
09F4D 0A E3                     	.db $0A, $E3
09F4F 22 E9                     	.db $22, $E9
09F51 64 E3                     	.db $64, $E3
09F53 B6 80                     	.db $B6, $80
09F55 0C 80                     	.db $0C, $80
09F57 3E 11                     	.db $3E, $11
09F59 6C A6                     	.db $6C, $A6
09F5B F5 12 00                  	.db $F5, $12, $00
09F5E 2D E2                     	.db $2D, $E2
09F60 36 E5                     	.db $36, $E5
09F62 0C 05                     	.db $0C, $05
09F64 0D E4                     	.db $0D, $E4
09F66 41 10                     	.db $41, $10
09F68 7E 01                     	.db $7E, $01
09F6A 31 3C                     	.db $31, $3C
09F6C 0F 33                     	.db $0F, $33
09F6E 2E 80                     	.db $2E, $80
09F70 34 10                     	.db $34, $10
09F72 17 11                     	.db $17, $11
09F74 76 52                     	.db $76, $52
09F76 07 2B                     	.db $07, $2B
09F78 0A 22                     	.db $0A, $22
09F7A 15 C6                     	.db $15, $C6
09F7C 1E 3A                     	.db $1E, $3A
09F7E 23 80                     	.db $23, $80
09F80 0D 80                     	.db $0D, $80
09F82 3D 10                     	.db $3D, $10
09F84 69 26                     	.db $69, $26
09F86 1D 00                     	.db $1D, $00
09F88 1C E7                     	.db $1C, $E7
09F8A 49 80                     	.db $49, $80
09F8C 57 21                     	.db $57, $21
09F8E 33 04                     	.db $33, $04
09F90 13 00                     	.db $13, $00
09F92 11 EE                     	.db $11, $EE
09F94 F4                        	.db $F4
09F95 42 0F                     	.db $42, $0F
09F97 06 0F                     	.db $06, $0F
09F99 DC 0F                     	.db $DC, $0F
09F9B 26 0F                     	.db $26, $0F
09F9D E7 0F                     	.db $E7, $0F
09F9F F2                        	.db $F2
09FA0 90 0F                     	.db $90, $0F
09FA2 1E 0F                     	.db $1E, $0F
09FA4 E3 0F                     	.db $E3, $0F
09FA6 1D 0F                     	.db $1D, $0F
09FA8 E9 0F                     	.db $E9, $0F
09FAA B6 C4                     	.db $B6, $C4
09FAC 1D 0F                     	.db $1D, $0F
09FAE 18 0A                     	.db $18, $0A
09FB0 F5 12 50                  	.db $F5, $12, $50
09FB3 FF                        	.db $FF
09FB4                           include "src/levels/7/7-1/7-1-area2.asm"
09FB4                           ; Level 7-1, Area 2
09FB4                           
09FB4                           LevelData_7_1_Area2:
09FB4                           	; Level Header
09FB4                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09FB4                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09FB4                           	levelHeader 3, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $08, $0
09FB4 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
09FB5 E8                        	.db %11100000 | $08
09FB6 30                        	.db 3 << 4 | 0 << 2 | 0
09FB7                           	IFNDEF LEVEL_ENGINE_UPGRADES
09FB7 00                        		.db $0 << 3 | LevelMusic_Overworld
09FB8                           	ENDIF
09FB8                           	IFDEF LEVEL_ENGINE_UPGRADES
09FB8                           		.db $0 << 4 | LevelMusic_Overworld
09FB8                           	ENDIF
09FB8                           
09FB8 3C 11                     	.db $3C, $11
09FBA 19 10                     	.db $19, $10
09FBC 5F EB                     	.db $5F, $EB
09FBE 34 E7                     	.db $34, $E7
09FC0 0C E9                     	.db $0C, $E9
09FC2 54 10                     	.db $54, $10
09FC4 1B 29                     	.db $1B, $29
09FC6 5C E6                     	.db $5C, $E6
09FC8 31 29                     	.db $31, $29
09FCA 02 E8                     	.db $02, $E8
09FCC 19 EA                     	.db $19, $EA
09FCE 5C 29                     	.db $5C, $29
09FD0 43 ED                     	.db $43, $ED
09FD2 23 04                     	.db $23, $04
09FD4 06 EA                     	.db $06, $EA
09FD6 10 EE                     	.db $10, $EE
09FD8 18 E7                     	.db $18, $E7
09FDA 12 EF                     	.db $12, $EF
09FDC 23 EC                     	.db $23, $EC
09FDE 2C A7                     	.db $2C, $A7
09FE0 F5 12 33                  	.db $F5, $12, $33
09FE3 71 29                     	.db $71, $29
09FE5 12 EB                     	.db $12, $EB
09FE7 20 29                     	.db $20, $29
09FE9 02 E5                     	.db $02, $E5
09FEB 28 E5                     	.db $28, $E5
09FED 10 E3                     	.db $10, $E3
09FEF F4                        	.db $F4
09FF0 95 0F                     	.db $95, $0F
09FF2 DB 0F                     	.db $DB, $0F
09FF4 CF 0F                     	.db $CF, $0F
09FF6 12 0F                     	.db $12, $0F
09FF8 AB 0F                     	.db $AB, $0F
09FFA 81 0F                     	.db $81, $0F
09FFC FF                        	.db $FF
09FFD                           include "src/levels/7/7-1/7-1-area3.asm"
09FFD                           ; Level 7-1, Area 3
09FFD                           
09FFD                           LevelData_7_1_Area3:
09FFD                           	; Level Header
09FFD                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
09FFD                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
09FFD                           	levelHeader 3, LevelDirection_Vertical, 0, 0, LevelMusic_Overworld, 0, 0, $13, $0
09FFD 00                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 0
09FFE F3                        	.db %11100000 | $13
09FFF 30                        	.db 3 << 4 | 0 << 2 | 0
0A000                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A000 00                        		.db $0 << 3 | LevelMusic_Overworld
0A001                           	ENDIF
0A001                           	IFDEF LEVEL_ENGINE_UPGRADES
0A001                           		.db $0 << 4 | LevelMusic_Overworld
0A001                           	ENDIF
0A001                           
0A001 64 A6                     	.db $64, $A6
0A003 0A A6                     	.db $0A, $A6
0A005 22 E1                     	.db $22, $E1
0A007 04 05                     	.db $04, $05
0A009 05 E4                     	.db $05, $E4
0A00B 0A 05                     	.db $0A, $05
0A00D 0B E1                     	.db $0B, $E1
0A00F 37 AA                     	.db $37, $AA
0A011 21 E5                     	.db $21, $E5
0A013 07 05                     	.db $07, $05
0A015 08 E5                     	.db $08, $E5
0A017 66 AB                     	.db $66, $AB
0A019 08 AB                     	.db $08, $AB
0A01B 14 AA                     	.db $14, $AA
0A01D 0A AA                     	.db $0A, $AA
0A01F 21 E2                     	.db $21, $E2
0A021 0B E2                     	.db $0B, $E2
0A023 80 EF                     	.db $80, $EF
0A025 76 00                     	.db $76, $00
0A027 07 00                     	.db $07, $00
0A029 08 00                     	.db $08, $00
0A02B 09 00                     	.db $09, $00
0A02D 12 A7                     	.db $12, $A7
0A02F 05 00                     	.db $05, $00
0A031 0A 00                     	.db $0A, $00
0A033 15 00                     	.db $15, $00
0A035 0A 00                     	.db $0A, $00
0A037 10 E1                     	.db $10, $E1
0A039 02 05                     	.db $02, $05
0A03B 03 EC                     	.db $03, $EC
0A03D 85 00                     	.db $85, $00
0A03F 0A 00                     	.db $0A, $00
0A041 0C 00                     	.db $0C, $00
0A043 10 EF                     	.db $10, $EF
0A045 30 EF                     	.db $30, $EF
0A047 3A E3                     	.db $3A, $E3
0A049 13 A3                     	.db $13, $A3
0A04B F5 12 23                  	.db $F5, $12, $23
0A04E 20 E2                     	.db $20, $E2
0A050 03 05                     	.db $03, $05
0A052 04 EB                     	.db $04, $EB
0A054 F4                        	.db $F4
0A055 35 C4                     	.db $35, $C4
0A057 23 0F                     	.db $23, $0F
0A059 0B 0F                     	.db $0B, $0F
0A05B 17 0A                     	.db $17, $0A
0A05D F5 12 40                  	.db $F5, $12, $40
0A060 C2 0F                     	.db $C2, $0F
0A062 0C 0F                     	.db $0C, $0F
0A064 FF                        	.db $FF
0A065                           include "src/levels/7/7-1/7-1-area4.asm"
0A065                           ; Level 7-1, Area 4
0A065                           
0A065                           LevelData_7_1_Area4:
0A065                           	; Level Header
0A065                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A065                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A065                           	levelHeader 1, LevelDirection_Horizontal, 4, 1, LevelMusic_Boss, 0, 0, $0a, $0
0A065 A1                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 1
0A066 EA                        	.db %11100000 | $0a
0A067 10                        	.db 1 << 4 | 0 << 2 | 0
0A068                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A068 02                        		.db $0 << 3 | LevelMusic_Boss
0A069                           	ENDIF
0A069                           	IFDEF LEVEL_ENGINE_UPGRADES
0A069                           		.db $0 << 4 | LevelMusic_Boss
0A069                           	ENDIF
0A069                           
0A069 48 0A                     	.db $48, $0A
0A06B F5 12 30                  	.db $F5, $12, $30
0A06E 0C 33                     	.db $0C, $33
0A070 F0 8B                     	.db $F0, $8B
0A072 F1 6C                     	.db $F1, $6C
0A074 F2                        	.db $F2
0A075 74 39                     	.db $74, $39
0A077 1A 43                     	.db $1A, $43
0A079 1A 43                     	.db $1A, $43
0A07B 00 00                     	.db $00, $00
0A07D F0 8D                     	.db $F0, $8D
0A07F F1 4C                     	.db $F1, $4C
0A081 F1 CA                     	.db $F1, $CA
0A083 F5 13 00                  	.db $F5, $13, $00
0A086 FF                        	.db $FF
0A087                           include "src/levels/7/7-1/7-1-area5.asm"
0A087                           ; Level 7-1, Area 5
0A087                           
0A087                           LevelData_7_1_Area5:
0A087                           	; Level Header
0A087                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A087                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A087                           	levelHeader 0, LevelDirection_Horizontal, 4, 1, LevelMusic_Underground, 0, 0, $0a, $0
0A087 A1                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 1
0A088 EA                        	.db %11100000 | $0a
0A089 00                        	.db 0 << 4 | 0 << 2 | 0
0A08A                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A08A 01                        		.db $0 << 3 | LevelMusic_Underground
0A08B                           	ENDIF
0A08B                           	IFDEF LEVEL_ENGINE_UPGRADES
0A08B                           		.db $0 << 4 | LevelMusic_Underground
0A08B                           	ENDIF
0A08B                           
0A08B 4C 00                     	.db $4C, $00
0A08D 21 2D                     	.db $21, $2D
0A08F 02 21                     	.db $02, $21
0A091 03 21                     	.db $03, $21
0A093 04 21                     	.db $04, $21
0A095 05 21                     	.db $05, $21
0A097 06 26                     	.db $06, $26
0A099 07 51                     	.db $07, $51
0A09B 11 38                     	.db $11, $38
0A09D 3A 32                     	.db $3A, $32
0A09F 17 0A                     	.db $17, $0A
0A0A1 F5 12 16                  	.db $F5, $12, $16
0A0A4 F0 3C                     	.db $F0, $3C
0A0A6 F1 EA                     	.db $F1, $EA
0A0A8 FF                        	.db $FF
0A0A9                           
0A0A9                           ; World 7-2
0A0A9                           include "src/levels/7/7-2/7-2-area0.asm"
0A0A9                           ; Level 7-2, Area 0
0A0A9                           
0A0A9                           LevelData_7_2_Area0:
0A0A9                           	; Level Header
0A0A9                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A0A9                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A0A9                           	levelHeader 2, LevelDirection_Horizontal, 0, 0, LevelMusic_Overworld, 0, 0, $1f, $0
0A0A9 80                        	.db LevelDirection_Horizontal << 7 | 0 << 3 | 0
0A0AA FF                        	.db %11100000 | $1f
0A0AB 20                        	.db 2 << 4 | 0 << 2 | 0
0A0AC                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A0AC 00                        		.db $0 << 3 | LevelMusic_Overworld
0A0AD                           	ENDIF
0A0AD                           	IFDEF LEVEL_ENGINE_UPGRADES
0A0AD                           		.db $0 << 4 | LevelMusic_Overworld
0A0AD                           	ENDIF
0A0AD                           
0A0AD 80 E5                     	.db $80, $E5
0A0AF 0D E5                     	.db $0D, $E5
0A0B1 2A E5                     	.db $2A, $E5
0A0B3 36 E5                     	.db $36, $E5
0A0B5 52 10                     	.db $52, $10
0A0B7 1A 10                     	.db $1A, $10
0A0B9 1C 10                     	.db $1C, $10
0A0BB 63 E6                     	.db $63, $E6
0A0BD 0B E6                     	.db $0B, $E6
0A0BF 62 10                     	.db $62, $10
0A0C1 47 B5                     	.db $47, $B5
0A0C3 52 65                     	.db $52, $65
0A0C5 27 E8                     	.db $27, $E8
0A0C7 F5 13 10                  	.db $F5, $13, $10
0A0CA F4                        	.db $F4
0A0CB 20 C4                     	.db $20, $C4
0A0CD 4F 0F                     	.db $4F, $0F
0A0CF F2                        	.db $F2
0A0D0 95 0F                     	.db $95, $0F
0A0D2 0E 0F                     	.db $0E, $0F
0A0D4 68 19                     	.db $68, $19
0A0D6 0E 19                     	.db $0E, $19
0A0D8 3B 1D                     	.db $3B, $1D
0A0DA 0E 1D                     	.db $0E, $1D
0A0DC 27 40                     	.db $27, $40
0A0DE 28 1C                     	.db $28, $1C
0A0E0 28 0B                     	.db $28, $0B
0A0E2 FF                        	.db $FF
0A0E3                           include "src/levels/7/7-2/7-2-area1.asm"
0A0E3                           ; Level 7-2, Area 1
0A0E3                           
0A0E3                           LevelData_7_2_Area1:
0A0E3                           	; Level Header
0A0E3                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A0E3                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A0E3                           	levelHeader 6, LevelDirection_Horizontal, 4, 1, LevelMusic_Underground, 1, 1, $0a, $0
0A0E3 A1                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 1
0A0E4 EA                        	.db %11100000 | $0a
0A0E5 65                        	.db 6 << 4 | 1 << 2 | 1
0A0E6                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A0E6 01                        		.db $0 << 3 | LevelMusic_Underground
0A0E7                           	ENDIF
0A0E7                           	IFDEF LEVEL_ENGINE_UPGRADES
0A0E7                           		.db $0 << 4 | LevelMusic_Underground
0A0E7                           	ENDIF
0A0E7                           
0A0E7 87 13                     	.db $87, $13
0A0E9 F5 13 02                  	.db $F5, $13, $02
0A0EC 22 3D                     	.db $22, $3D
0A0EE F0 50                     	.db $F0, $50
0A0F0 85 84                     	.db $85, $84
0A0F2 0B 84                     	.db $0B, $84
0A0F4 6F 04                     	.db $6F, $04
0A0F6 10 3E                     	.db $10, $3E
0A0F8 F0 34                     	.db $F0, $34
0A0FA F0 70                     	.db $F0, $70
0A0FC F1 14                     	.db $F1, $14
0A0FE F1 50                     	.db $F1, $50
0A100 F1 94                     	.db $F1, $94
0A102 F1 B0                     	.db $F1, $B0
0A104 F1 EF                     	.db $F1, $EF
0A106 D1 4E                     	.db $D1, $4E
0A108 42 7D                     	.db $42, $7D
0A10A F0 17                     	.db $F0, $17
0A10C F0 50                     	.db $F0, $50
0A10E CD 04                     	.db $CD, $04
0A110 10 4C                     	.db $10, $4C
0A112 0D 82                     	.db $0D, $82
0A114 0E 43                     	.db $0E, $43
0A116 20 7C                     	.db $20, $7C
0A118 0E 75                     	.db $0E, $75
0A11A F1 14                     	.db $F1, $14
0A11C F1 50                     	.db $F1, $50
0A11E A2 3D                     	.db $A2, $3D
0A120 27 80                     	.db $27, $80
0A122 17 A4                     	.db $17, $A4
0A124 F5 13 60                  	.db $F5, $13, $60
0A127 0E 4F                     	.db $0E, $4F
0A129 14 81                     	.db $14, $81
0A12B 27 03                     	.db $27, $03
0A12D 90 35                     	.db $90, $35
0A12F 3E 46                     	.db $3E, $46
0A131 24 76                     	.db $24, $76
0A133 0C 78                     	.db $0C, $78
0A135 38 A6                     	.db $38, $A6
0A137 F5 13 22                  	.db $F5, $13, $22
0A13A 86 84                     	.db $86, $84
0A13C 07 84                     	.db $07, $84
0A13E 08 84                     	.db $08, $84
0A140 45 80                     	.db $45, $80
0A142 F1 2A                     	.db $F1, $2A
0A144 FF                        	.db $FF
0A145                           include "src/levels/7/7-2/7-2-area2.asm"
0A145                           ; Level 7-2, Area 2
0A145                           
0A145                           LevelData_7_2_Area2:
0A145                           	; Level Header
0A145                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A145                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A145                           	levelHeader 9, LevelDirection_Horizontal, 4, 1, LevelMusic_Underground, 1, 1, $0a, $0
0A145 A1                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 1
0A146 EA                        	.db %11100000 | $0a
0A147 95                        	.db 9 << 4 | 1 << 2 | 1
0A148                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A148 01                        		.db $0 << 3 | LevelMusic_Underground
0A149                           	ENDIF
0A149                           	IFDEF LEVEL_ENGINE_UPGRADES
0A149                           		.db $0 << 4 | LevelMusic_Underground
0A149                           	ENDIF
0A149                           
0A149 88 0A                     	.db $88, $0A
0A14B F5 13 93                  	.db $F5, $13, $93
0A14E 13 2B                     	.db $13, $2B
0A150 05 0F                     	.db $05, $0F
0A152 0B 0F                     	.db $0B, $0F
0A154 13 0F                     	.db $13, $0F
0A156 0D 0F                     	.db $0D, $0F
0A158 24 2A                     	.db $24, $2A
0A15A 0C 26                     	.db $0C, $26
0A15C F0 50                     	.db $F0, $50
0A15E F0 EF                     	.db $F0, $EF
0A160 F1 50                     	.db $F1, $50
0A162 F1 EA                     	.db $F1, $EA
0A164 38 A9                     	.db $38, $A9
0A166 F5 13 86                  	.db $F5, $13, $86
0A169 3C 81                     	.db $3C, $81
0A16B 0D 80                     	.db $0D, $80
0A16D 3A A3                     	.db $3A, $A3
0A16F 5C 81                     	.db $5C, $81
0A171 1D 80                     	.db $1D, $80
0A173 F0 10                     	.db $F0, $10
0A175 F0 91                     	.db $F0, $91
0A177 F1 90                     	.db $F1, $90
0A179 62 80                     	.db $62, $80
0A17B 03 81                     	.db $03, $81
0A17D 35 A3                     	.db $35, $A3
0A17F 07 A8                     	.db $07, $A8
0A181 F5 13 16                  	.db $F5, $13, $16
0A184 47 03                     	.db $47, $03
0A186 13 81                     	.db $13, $81
0A188 12 80                     	.db $12, $80
0A18A 17 03                     	.db $17, $03
0A18C F0 91                     	.db $F0, $91
0A18E F1 0A                     	.db $F1, $0A
0A190 28 A9                     	.db $28, $A9
0A192 F5 13 73                  	.db $F5, $13, $73
0A195 3C 81                     	.db $3C, $81
0A197 0D 80                     	.db $0D, $80
0A199 3A A3                     	.db $3A, $A3
0A19B 5C 81                     	.db $5C, $81
0A19D 1D 80                     	.db $1D, $80
0A19F F1 11                     	.db $F1, $11
0A1A1 F1 90                     	.db $F1, $90
0A1A3 62 80                     	.db $62, $80
0A1A5 03 81                     	.db $03, $81
0A1A7 35 A3                     	.db $35, $A3
0A1A9 53 81                     	.db $53, $81
0A1AB 08 0A                     	.db $08, $0A
0A1AD F5 13 66                  	.db $F5, $13, $66
0A1B0 12 80                     	.db $12, $80
0A1B2 F0 91                     	.db $F0, $91
0A1B4 F0 FB                     	.db $F0, $FB
0A1B6 F1 4A                     	.db $F1, $4A
0A1B8 38 A7                     	.db $38, $A7
0A1BA F5 13 41                  	.db $F5, $13, $41
0A1BD 98 4E                     	.db $98, $4E
0A1BF F1 11                     	.db $F1, $11
0A1C1 F1 CF                     	.db $F1, $CF
0A1C3 97 AB                     	.db $97, $AB
0A1C5 F5 13 70                  	.db $F5, $13, $70
0A1C8 A7 03                     	.db $A7, $03
0A1CA F0 F0                     	.db $F0, $F0
0A1CC F1 CA                     	.db $F1, $CA
0A1CE 98 0A                     	.db $98, $0A
0A1D0 F5 13 43                  	.db $F5, $13, $43
0A1D3 25 3D                     	.db $25, $3D
0A1D5 F0 AF                     	.db $F0, $AF
0A1D7 62 A7                     	.db $62, $A7
0A1D9 F5 13 44                  	.db $F5, $13, $44
0A1DC 86 2D                     	.db $86, $2D
0A1DE 16 0F                     	.db $16, $0F
0A1E0 19 0F                     	.db $19, $0F
0A1E2 0F 0F                     	.db $0F, $0F
0A1E4 1C 0F                     	.db $1C, $0F
0A1E6 1B 26                     	.db $1B, $26
0A1E8 0D 2A                     	.db $0D, $2A
0A1EA F0 6A                     	.db $F0, $6A
0A1EC F0 DC                     	.db $F0, $DC
0A1EE 7C 0A                     	.db $7C, $0A
0A1F0 F5 13 32                  	.db $F5, $13, $32
0A1F3 52 0F                     	.db $52, $0F
0A1F5 F0 6E                     	.db $F0, $6E
0A1F7 F1 CA                     	.db $F1, $CA
0A1F9 FF                        	.db $FF
0A1FA                           include "src/levels/7/7-2/7-2-area3.asm"
0A1FA                           ; Level 7-2, Area 3
0A1FA                           
0A1FA                           LevelData_7_2_Area3:
0A1FA                           	; Level Header
0A1FA                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A1FA                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A1FA                           	levelHeader 3, LevelDirection_Horizontal, 4, 1, LevelMusic_Underground, 1, 0, $0a, $0
0A1FA A1                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 1
0A1FB EA                        	.db %11100000 | $0a
0A1FC 34                        	.db 3 << 4 | 1 << 2 | 0
0A1FD                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A1FD 01                        		.db $0 << 3 | LevelMusic_Underground
0A1FE                           	ENDIF
0A1FE                           	IFDEF LEVEL_ENGINE_UPGRADES
0A1FE                           		.db $0 << 4 | LevelMusic_Underground
0A1FE                           	ENDIF
0A1FE                           
0A1FE 5C 40                     	.db $5C, $40
0A200 1C A4                     	.db $1C, $A4
0A202 25 0A                     	.db $25, $0A
0A204 F5 13 63                  	.db $F5, $13, $63
0A207 24 33                     	.db $24, $33
0A209 F0 50                     	.db $F0, $50
0A20B 80 4F                     	.db $80, $4F
0A20D 10 A7                     	.db $10, $A7
0A20F 05 A7                     	.db $05, $A7
0A211 0C A7                     	.db $0C, $A7
0A213 80 4F                     	.db $80, $4F
0A215 60 4F                     	.db $60, $4F
0A217 10 4F                     	.db $10, $4F
0A219 10 A5                     	.db $10, $A5
0A21B 35 35                     	.db $35, $35
0A21D 13 0A                     	.db $13, $0A
0A21F F5 13 29                  	.db $F5, $13, $29
0A222 20 4F                     	.db $20, $4F
0A224 10 4F                     	.db $10, $4F
0A226 90 A3                     	.db $90, $A3
0A228 28 0A                     	.db $28, $0A
0A22A F5 13 69                  	.db $F5, $13, $69
0A22D F0 11                     	.db $F0, $11
0A22F F1 4A                     	.db $F1, $4A
0A231 FF                        	.db $FF
0A232                           include "src/levels/7/7-2/7-2-area4.asm"
0A232                           ; Level 7-2, Area 4
0A232                           
0A232                           LevelData_7_2_Area4:
0A232                           	; Level Header
0A232                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A232                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A232                           	levelHeader 9, LevelDirection_Horizontal, 4, 1, LevelMusic_Boss, 1, 1, $0a, $0
0A232 A1                        	.db LevelDirection_Horizontal << 7 | 4 << 3 | 1
0A233 EA                        	.db %11100000 | $0a
0A234 95                        	.db 9 << 4 | 1 << 2 | 1
0A235                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A235 02                        		.db $0 << 3 | LevelMusic_Boss
0A236                           	ENDIF
0A236                           	IFDEF LEVEL_ENGINE_UPGRADES
0A236                           		.db $0 << 4 | LevelMusic_Boss
0A236                           	ENDIF
0A236                           
0A236 3F A7                     	.db $3F, $A7
0A238 36 80                     	.db $36, $80
0A23A 16 A3                     	.db $16, $A3
0A23C 43 0A                     	.db $43, $0A
0A23E F5 13 80                  	.db $F5, $13, $80
0A241 19 01                     	.db $19, $01
0A243 F0 50                     	.db $F0, $50
0A245 80 87                     	.db $80, $87
0A247 01 87                     	.db $01, $87
0A249 02 3D                     	.db $02, $3D
0A24B 47 80                     	.db $47, $80
0A24D 0B 81                     	.db $0B, $81
0A24F 0E 81                     	.db $0E, $81
0A251 0F 81                     	.db $0F, $81
0A253 17 A4                     	.db $17, $A4
0A255 F5 13 25                  	.db $F5, $13, $25
0A258 37 03                     	.db $37, $03
0A25A 70 3F                     	.db $70, $3F
0A25C 55 0F                     	.db $55, $0F
0A25E 0B 0F                     	.db $0B, $0F
0A260 14 0F                     	.db $14, $0F
0A262 08 09                     	.db $08, $09
0A264 F5 13 47                  	.db $F5, $13, $47
0A267 0C 0F                     	.db $0C, $0F
0A269 90 3F                     	.db $90, $3F
0A26B 52 80                     	.db $52, $80
0A26D 05 80                     	.db $05, $80
0A26F 17 0A                     	.db $17, $0A
0A271 F5 13 27                  	.db $F5, $13, $27
0A274 7A A6                     	.db $7A, $A6
0A276 0D AB                     	.db $0D, $AB
0A278 20 37                     	.db $20, $37
0A27A 08 87                     	.db $08, $87
0A27C 09 87                     	.db $09, $87
0A27E 8D 03                     	.db $8D, $03
0A280 F5 13 28                  	.db $F5, $13, $28
0A283 F1 CA                     	.db $F1, $CA
0A285 F3                        	.db $F3
0A286 F2                        	.db $F2
0A287 B7 0A                     	.db $B7, $0A
0A289 F5 13 42                  	.db $F5, $13, $42
0A28C F0 50                     	.db $F0, $50
0A28E E3 00                     	.db $E3, $00
0A290 08 00                     	.db $08, $00
0A292 13 0F                     	.db $13, $0F
0A294 08 0F                     	.db $08, $0F
0A296 F2                        	.db $F2
0A297 A4 0F                     	.db $A4, $0F
0A299 12 0F                     	.db $12, $0F
0A29B 03 0F                     	.db $03, $0F
0A29D 05 0F                     	.db $05, $0F
0A29F 06 0F                     	.db $06, $0F
0A2A1 F1 4F                     	.db $F1, $4F
0A2A3 F1 8A                     	.db $F1, $8A
0A2A5 F5 13 50                  	.db $F5, $13, $50
0A2A8 FF                        	.db $FF
0A2A9                           include "src/levels/7/7-2/7-2-area5.asm"
0A2A9                           ; Level 7-2, Area 5
0A2A9                           
0A2A9                           LevelData_7_2_Area5:
0A2A9                           	; Level Header
0A2A9                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A2A9                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A2A9                           	levelHeader 2, LevelDirection_Horizontal, 5, 2, LevelMusic_Wart, 0, 2, $0a, $1
0A2A9 AA                        	.db LevelDirection_Horizontal << 7 | 5 << 3 | 2
0A2AA EA                        	.db %11100000 | $0a
0A2AB 22                        	.db 2 << 4 | 0 << 2 | 2
0A2AC                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A2AC 0B                        		.db $1 << 3 | LevelMusic_Wart
0A2AD                           	ENDIF
0A2AD                           	IFDEF LEVEL_ENGINE_UPGRADES
0A2AD                           		.db $1 << 4 | LevelMusic_Wart
0A2AD                           	ENDIF
0A2AD                           
0A2AD 3D 2C                     	.db $3D, $2C
0A2AF 62 48                     	.db $62, $48
0A2B1 F0 4F                     	.db $F0, $4F
0A2B3 F0 AC                     	.db $F0, $AC
0A2B5 F1 6E                     	.db $F1, $6E
0A2B7 90 2C                     	.db $90, $2C
0A2B9 03 2C                     	.db $03, $2C
0A2BB 06 2C                     	.db $06, $2C
0A2BD 1D 2C                     	.db $1D, $2C
0A2BF 4F 32                     	.db $4F, $32
0A2C1 29 44                     	.db $29, $44
0A2C3 F1 3A                     	.db $F1, $3A
0A2C5 F1 DC                     	.db $F1, $DC
0A2C7 90 2C                     	.db $90, $2C
0A2C9 03 2C                     	.db $03, $2C
0A2CB 06 2C                     	.db $06, $2C
0A2CD 09 2C                     	.db $09, $2C
0A2CF 34 32                     	.db $34, $32
0A2D1 22 1A                     	.db $22, $1A
0A2D3 10 1A                     	.db $10, $1A
0A2D5 04 1A                     	.db $04, $1A
0A2D7 08 0F                     	.db $08, $0F
0A2D9 09 44                     	.db $09, $44
0A2DB 12 41                     	.db $12, $41
0A2DD 10 45                     	.db $10, $45
0A2DF F1 7A                     	.db $F1, $7A
0A2E1 F1 D8                     	.db $F1, $D8
0A2E3 FF                        	.db $FF
0A2E4                           include "src/levels/7/7-2/7-2-area6.asm"
0A2E4                           ; Level 7-2, Area 6
0A2E4                           
0A2E4                           LevelData_7_2_Area6:
0A2E4                           	; Level Header
0A2E4                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A2E4                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A2E4                           	levelHeader 9, LevelDirection_Vertical, 4, 1, LevelMusic_Underground, 1, 3, $00, $0
0A2E4 21                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 1
0A2E5 E0                        	.db %11100000 | $00
0A2E6 97                        	.db 9 << 4 | 1 << 2 | 3
0A2E7                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A2E7 01                        		.db $0 << 3 | LevelMusic_Underground
0A2E8                           	ENDIF
0A2E8                           	IFDEF LEVEL_ENGINE_UPGRADES
0A2E8                           		.db $0 << 4 | LevelMusic_Underground
0A2E8                           	ENDIF
0A2E8                           
0A2E8 08 A5                     	.db $08, $A5
0A2EA F5 13 14                  	.db $F5, $13, $14
0A2ED 92 4B                     	.db $92, $4B
0A2EF 42 4B                     	.db $42, $4B
0A2F1 F0 55                     	.db $F0, $55
0A2F3 F1 DC                     	.db $F1, $DC
0A2F5 33 29                     	.db $33, $29
0A2F7 22 4B                     	.db $22, $4B
0A2F9 42 4B                     	.db $42, $4B
0A2FB 3C 29                     	.db $3C, $29
0A2FD 22 4B                     	.db $22, $4B
0A2FF F0 75                     	.db $F0, $75
0A301 F1 1C                     	.db $F1, $1C
0A303 F1 95                     	.db $F1, $95
0A305 42 4B                     	.db $42, $4B
0A307 3C 29                     	.db $3C, $29
0A309 22 4B                     	.db $22, $4B
0A30B 42 4B                     	.db $42, $4B
0A30D 33 29                     	.db $33, $29
0A30F F0 5C                     	.db $F0, $5C
0A311 F0 D5                     	.db $F0, $D5
0A313 F1 7C                     	.db $F1, $7C
0A315 22 4B                     	.db $22, $4B
0A317 37 29                     	.db $37, $29
0A319 12 4B                     	.db $12, $4B
0A31B 7A 0A                     	.db $7A, $0A
0A31D F5 13 30                  	.db $F5, $13, $30
0A320 F0 15                     	.db $F0, $15
0A322 F1 A0                     	.db $F1, $A0
0A324 F3                        	.db $F3
0A325 F2                        	.db $F2
0A326 48 AA                     	.db $48, $AA
0A328 27 0A                     	.db $27, $0A
0A32A F5 13 24                  	.db $F5, $13, $24
0A32D 28 03                     	.db $28, $03
0A32F F0 97                     	.db $F0, $97
0A331 F1 00                     	.db $F1, $00
0A333 78 AE                     	.db $78, $AE
0A335 5A 29                     	.db $5A, $29
0A337 15 29                     	.db $15, $29
0A339 38 03                     	.db $38, $03
0A33B 3A 29                     	.db $3A, $29
0A33D 16 29                     	.db $16, $29
0A33F F0 76                     	.db $F0, $76
0A341 F1 20                     	.db $F1, $20
0A343 F1 56                     	.db $F1, $56
0A345 28 A4                     	.db $28, $A4
0A347 18 03                     	.db $18, $03
0A349 3B 29                     	.db $3B, $29
0A34B 14 29                     	.db $14, $29
0A34D 18 A5                     	.db $18, $A5
0A34F 28 03                     	.db $28, $03
0A351 46 29                     	.db $46, $29
0A353 0A 29                     	.db $0A, $29
0A355 18 AB                     	.db $18, $AB
0A357 F0 20                     	.db $F0, $20
0A359 F0 56                     	.db $F0, $56
0A35B F1 00                     	.db $F1, $00
0A35D F1 36                     	.db $F1, $36
0A35F 28 03                     	.db $28, $03
0A361 B7 0A                     	.db $B7, $0A
0A363 F5 13 33                  	.db $F5, $13, $33
0A366 F0 00                     	.db $F0, $00
0A368 F1 17                     	.db $F1, $17
0A36A F1 A0                     	.db $F1, $A0
0A36C FF                        	.db $FF
0A36D                           include "src/levels/7/7-2/7-2-area7.asm"
0A36D                           ; Level 7-2, Area 7
0A36D                           
0A36D                           LevelData_7_2_Area7:
0A36D                           	; Level Header
0A36D                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A36D                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A36D                           	levelHeader 3, LevelDirection_Vertical, 4, 1, LevelMusic_Underground, 1, 1, $00, $0
0A36D 21                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 1
0A36E E0                        	.db %11100000 | $00
0A36F 35                        	.db 3 << 4 | 1 << 2 | 1
0A370                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A370 01                        		.db $0 << 3 | LevelMusic_Underground
0A371                           	ENDIF
0A371                           	IFDEF LEVEL_ENGINE_UPGRADES
0A371                           		.db $0 << 4 | LevelMusic_Underground
0A371                           	ENDIF
0A371                           
0A371 08 A4                     	.db $08, $A4
0A373 F5 13 26                  	.db $F5, $13, $26
0A376 76 33                     	.db $76, $33
0A378 34 37                     	.db $34, $37
0A37A 31 33                     	.db $31, $33
0A37C 0B 43                     	.db $0B, $43
0A37E F0 54                     	.db $F0, $54
0A380 35 36                     	.db $35, $36
0A382 15 46                     	.db $15, $46
0A384 25 46                     	.db $25, $46
0A386 15 36                     	.db $15, $36
0A388 22 42                     	.db $22, $42
0A38A 33 44                     	.db $33, $44
0A38C 38 33                     	.db $38, $33
0A38E F0 F5                     	.db $F0, $F5
0A390 3B 42                     	.db $3B, $42
0A392 26 73                     	.db $26, $73
0A394 0C 31                     	.db $0C, $31
0A396 46 35                     	.db $46, $35
0A398 33 39                     	.db $33, $39
0A39A 36 33                     	.db $36, $33
0A39C F0 9C                     	.db $F0, $9C
0A39E F0 B4                     	.db $F0, $B4
0A3A0 33 49                     	.db $33, $49
0A3A2 32 49                     	.db $32, $49
0A3A4 2C 42                     	.db $2C, $42
0A3A6 24 37                     	.db $24, $37
0A3A8 17 80                     	.db $17, $80
0A3AA 11 32                     	.db $11, $32
0A3AC 07 A4                     	.db $07, $A4
0A3AE F5 13 23                  	.db $F5, $13, $23
0A3B1 37 03                     	.db $37, $03
0A3B3 F1 A0                     	.db $F1, $A0
0A3B5 FF                        	.db $FF
0A3B6                           include "src/levels/7/7-2/7-2-area8.asm"
0A3B6                           ; Level 7-2, Area 8
0A3B6                           
0A3B6                           LevelData_7_2_Area8:
0A3B6                           	; Level Header
0A3B6                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A3B6                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A3B6                           	levelHeader 6, LevelDirection_Vertical, 4, 1, LevelMusic_Underground, 1, 0, $00, $0
0A3B6 21                        	.db LevelDirection_Vertical << 7 | 4 << 3 | 1
0A3B7 E0                        	.db %11100000 | $00
0A3B8 64                        	.db 6 << 4 | 1 << 2 | 0
0A3B9                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A3B9 01                        		.db $0 << 3 | LevelMusic_Underground
0A3BA                           	ENDIF
0A3BA                           	IFDEF LEVEL_ENGINE_UPGRADES
0A3BA                           		.db $0 << 4 | LevelMusic_Underground
0A3BA                           	ENDIF
0A3BA                           
0A3BA 28 A8                     	.db $28, $A8
0A3BC 2C 0A                     	.db $2C, $0A
0A3BE F5 13 40                  	.db $F5, $13, $40
0A3C1 29 45                     	.db $29, $45
0A3C3 F0 54                     	.db $F0, $54
0A3C5 95 35                     	.db $95, $35
0A3C7 52 32                     	.db $52, $32
0A3C9 45 33                     	.db $45, $33
0A3CB 48 34                     	.db $48, $34
0A3CD 34 37                     	.db $34, $37
0A3CF 32 33                     	.db $32, $33
0A3D1 2C 31                     	.db $2C, $31
0A3D3 46 32                     	.db $46, $32
0A3D5 38 33                     	.db $38, $33
0A3D7 F0 95                     	.db $F0, $95
0A3D9 35 35                     	.db $35, $35
0A3DB 52 33                     	.db $52, $33
0A3DD 15 AD                     	.db $15, $AD
0A3DF 07 33                     	.db $07, $33
0A3E1 12 0A                     	.db $12, $0A
0A3E3 F5 13 90                  	.db $F5, $13, $90
0A3E6 22 32                     	.db $22, $32
0A3E8 05 03                     	.db $05, $03
0A3EA 0A 31                     	.db $0A, $31
0A3EC 1A A9                     	.db $1A, $A9
0A3EE 2A 03                     	.db $2A, $03
0A3F0 0B 32                     	.db $0B, $32
0A3F2 F1 5C                     	.db $F1, $5C
0A3F4 81 86                     	.db $81, $86
0A3F6 14 30                     	.db $14, $30
0A3F8 06 33                     	.db $06, $33
0A3FA 0B 30                     	.db $0B, $30
0A3FC 34 36                     	.db $34, $36
0A3FE 31 AF                     	.db $31, $AF
0A400 04 36                     	.db $04, $36
0A402 F0 D4                     	.db $F0, $D4
0A404 31 03                     	.db $31, $03
0A406 74 A6                     	.db $74, $A6
0A408 06 A6                     	.db $06, $A6
0A40A 07 82                     	.db $07, $82
0A40C 08 A6                     	.db $08, $A6
0A40E 0A A6                     	.db $0A, $A6
0A410 0D AE                     	.db $0D, $AE
0A412 F0 20                     	.db $F0, $20
0A414 F1 14                     	.db $F1, $14
0A416 7D 03                     	.db $7D, $03
0A418 4E A8                     	.db $4E, $A8
0A41A 37 40                     	.db $37, $40
0A41C 17 A6                     	.db $17, $A6
0A41E F5 13 21                  	.db $F5, $13, $21
0A421 57 03                     	.db $57, $03
0A423 F0 00                     	.db $F0, $00
0A425 F0 94                     	.db $F0, $94
0A427 F1 A0                     	.db $F1, $A0
0A429 F4                        	.db $F4
0A42A D6 0F                     	.db $D6, $0F
0A42C 09 0F                     	.db $09, $0F
0A42E 53 0F                     	.db $53, $0F
0A430 46 0F                     	.db $46, $0F
0A432 3A 0F                     	.db $3A, $0F
0A434 B7 0F                     	.db $B7, $0F
0A436 2A 0F                     	.db $2A, $0F
0A438 B6 0F                     	.db $B6, $0F
0A43A FF                        	.db $FF
0A43B                           include "src/levels/7/7-2/7-2-area9.asm"
0A43B                           ; Level 7-2, Area 9
0A43B                           
0A43B                           LevelData_7_2_Area9:
0A43B                           	; Level Header
0A43B                           	;   pages (0-indexed), orientation, background palette, sprite palette, music,
0A43B                           	;   AX-FX type, 3X-9X type, ground setting (0-31), ground type (0-7)
0A43B                           	levelHeader 3, LevelDirection_Vertical, 0, 1, LevelMusic_Overworld, 0, 0, $1e, $0
0A43B 01                        	.db LevelDirection_Vertical << 7 | 0 << 3 | 1
0A43C FE                        	.db %11100000 | $1e
0A43D 30                        	.db 3 << 4 | 0 << 2 | 0
0A43E                           	IFNDEF LEVEL_ENGINE_UPGRADES
0A43E 00                        		.db $0 << 3 | LevelMusic_Overworld
0A43F                           	ENDIF
0A43F                           	IFDEF LEVEL_ENGINE_UPGRADES
0A43F                           		.db $0 << 4 | LevelMusic_Overworld
0A43F                           	ENDIF
0A43F                           
0A43F 28 10                     	.db $28, $10
0A441 4D 81                     	.db $4D, $81
0A443 2B AD                     	.db $2B, $AD
0A445 0D 0A                     	.db $0D, $0A
0A447 F5 13 83                  	.db $F5, $13, $83
0A44A 2B 05                     	.db $2B, $05
0A44C 0C 41                     	.db $0C, $41
0A44E 22 10                     	.db $22, $10
0A450 46 10                     	.db $46, $10
0A452 4C AA                     	.db $4C, $AA
0A454 2B 80                     	.db $2B, $80
0A456 0C 05                     	.db $0C, $05
0A458 11 10                     	.db $11, $10
0A45A 28 11                     	.db $28, $11
0A45C 4B AA                     	.db $4B, $AA
0A45E 15 10                     	.db $15, $10
0A460 1B 05                     	.db $1B, $05
0A462 0C 80                     	.db $0C, $80
0A464 7C AA                     	.db $7C, $AA
0A466 11 10                     	.db $11, $10
0A468 1B 80                     	.db $1B, $80
0A46A 0C 05                     	.db $0C, $05
0A46C 24 35                     	.db $24, $35
0A46E 14 35                     	.db $14, $35
0A470 14 35                     	.db $14, $35
0A472 14 35                     	.db $14, $35
0A474 14 33                     	.db $14, $33
0A476 08 AB                     	.db $08, $AB
0A478 14 33                     	.db $14, $33
0A47A 14 33                     	.db $14, $33
0A47C 18 05                     	.db $18, $05
0A47E 77 0A                     	.db $77, $0A
0A480 F5 13 20                  	.db $F5, $13, $20
0A483 F0 80                     	.db $F0, $80
0A485 F1 57                     	.db $F1, $57
0A487 F1 A0                     	.db $F1, $A0
0A489 FF                        	.db $FF
0A48A                           
0A48A                           ; World 7-3
0A48A                           include "src/levels/7/7-3/7-3-area0.asm"
0A48A                           ; Level 7-3, Area 0
0A48A                           
0A48A                           LevelData_7_3_Area0:
0A48A FF                        	.db $FF
0A48B                           ; -------------------------------
0A48B                           
0A48B                           
0A48B                           ; Pad out any remaining space
0A48B                           ; @TODO Verify that this is OK if unused space is reclaimed
0A48B                           LevelData_Unused:
0A48B                           unusedSpace $A500,$FF
0A48B                           	IFDEF PRESERVE_UNUSED_SPACE
0A48B                           		.pad $A500, $FF
0A48B                           	ENDIF
0A48B                           
0A48B                           IFDEF PLAYER_STUFF
0A48B FF FF FF FF FF FF FF FF.. .pad $A500, $FF
0A500                           ENDIF
0A500                           
0A500                           
0A500                           ; Pointers to enemy data
0A500                           include "src/levels/enemy-data-pointers.asm"
0A500                           ;
0A500                           ; Pointers to pointers to pointers...
0A500                           ; I'm not entirely certain what the point of
0A500                           ; having pointer-pointers was, when level data
0A500                           ; appears to use standard split pointers just fine,
0A500                           ; but that's what they did here in any case
0A500                           ;
0A500                           
0A500                           ; -------------------------------------
0A500                           ; Pointers to pointers to enemy data here
0A500                           
0A500                           EnemyPointersByLevel_HiHi:
0A500 A5                        	.db >EnemyPointers_Level_1_1_Hi
0A501 A5                        	.db >EnemyPointers_Level_1_2_Hi
0A502 A5                        	.db >EnemyPointers_Level_1_3_Hi
0A503 A5                        	.db >EnemyPointers_Level_2_1_Hi
0A504 A5                        	.db >EnemyPointers_Level_2_2_Hi
0A505 A5                        	.db >EnemyPointers_Level_2_3_Hi
0A506 A5                        	.db >EnemyPointers_Level_3_1_Hi
0A507 A5                        	.db >EnemyPointers_Level_3_2_Hi
0A508 A5                        	.db >EnemyPointers_Level_3_3_Hi
0A509 A6                        	.db >EnemyPointers_Level_4_1_Hi
0A50A A6                        	.db >EnemyPointers_Level_4_2_Hi
0A50B A6                        	.db >EnemyPointers_Level_4_3_Hi
0A50C A6                        	.db >EnemyPointers_Level_5_1_Hi
0A50D A6                        	.db >EnemyPointers_Level_5_2_Hi
0A50E A6                        	.db >EnemyPointers_Level_5_3_Hi
0A50F A6                        	.db >EnemyPointers_Level_6_1_Hi
0A510 A6                        	.db >EnemyPointers_Level_6_2_Hi
0A511 A6                        	.db >EnemyPointers_Level_6_3_Hi
0A512 A6                        	.db >EnemyPointers_Level_7_1_Hi
0A513 A6                        	.db >EnemyPointers_Level_7_2_Hi
0A514 A6                        	.db >EnemyPointers_Level_7_3_Hi
0A515                           
0A515                           EnemyPointersByLevel_HiLo:
0A515 54                        	.db <EnemyPointers_Level_1_1_Hi
0A516 68                        	.db <EnemyPointers_Level_1_2_Hi
0A517 7C                        	.db <EnemyPointers_Level_1_3_Hi
0A518 90                        	.db <EnemyPointers_Level_2_1_Hi
0A519 A4                        	.db <EnemyPointers_Level_2_2_Hi
0A51A B8                        	.db <EnemyPointers_Level_2_3_Hi
0A51B CC                        	.db <EnemyPointers_Level_3_1_Hi
0A51C E0                        	.db <EnemyPointers_Level_3_2_Hi
0A51D F4                        	.db <EnemyPointers_Level_3_3_Hi
0A51E 08                        	.db <EnemyPointers_Level_4_1_Hi
0A51F 1C                        	.db <EnemyPointers_Level_4_2_Hi
0A520 30                        	.db <EnemyPointers_Level_4_3_Hi
0A521 44                        	.db <EnemyPointers_Level_5_1_Hi
0A522 58                        	.db <EnemyPointers_Level_5_2_Hi
0A523 6C                        	.db <EnemyPointers_Level_5_3_Hi
0A524 80                        	.db <EnemyPointers_Level_6_1_Hi
0A525 94                        	.db <EnemyPointers_Level_6_2_Hi
0A526 A8                        	.db <EnemyPointers_Level_6_3_Hi
0A527 BC                        	.db <EnemyPointers_Level_7_1_Hi
0A528 D0                        	.db <EnemyPointers_Level_7_2_Hi
0A529 E4                        	.db <EnemyPointers_Level_7_3_Hi
0A52A                           
0A52A                           EnemyPointersByLevel_LoHi:
0A52A A5                        	.db >EnemyPointers_Level_1_1_Lo
0A52B A5                        	.db >EnemyPointers_Level_1_2_Lo
0A52C A5                        	.db >EnemyPointers_Level_1_3_Lo
0A52D A5                        	.db >EnemyPointers_Level_2_1_Lo
0A52E A5                        	.db >EnemyPointers_Level_2_2_Lo
0A52F A5                        	.db >EnemyPointers_Level_2_3_Lo
0A530 A5                        	.db >EnemyPointers_Level_3_1_Lo
0A531 A5                        	.db >EnemyPointers_Level_3_2_Lo
0A532 A5                        	.db >EnemyPointers_Level_3_3_Lo
0A533 A6                        	.db >EnemyPointers_Level_4_1_Lo
0A534 A6                        	.db >EnemyPointers_Level_4_2_Lo
0A535 A6                        	.db >EnemyPointers_Level_4_3_Lo
0A536 A6                        	.db >EnemyPointers_Level_5_1_Lo
0A537 A6                        	.db >EnemyPointers_Level_5_2_Lo
0A538 A6                        	.db >EnemyPointers_Level_5_3_Lo
0A539 A6                        	.db >EnemyPointers_Level_6_1_Lo
0A53A A6                        	.db >EnemyPointers_Level_6_2_Lo
0A53B A6                        	.db >EnemyPointers_Level_6_3_Lo
0A53C A6                        	.db >EnemyPointers_Level_7_1_Lo
0A53D A6                        	.db >EnemyPointers_Level_7_2_Lo
0A53E A6                        	.db >EnemyPointers_Level_7_3_Lo
0A53F                           
0A53F                           EnemyPointersByLevel_LoLo:
0A53F 5E                        	.db <EnemyPointers_Level_1_1_Lo
0A540 72                        	.db <EnemyPointers_Level_1_2_Lo
0A541 86                        	.db <EnemyPointers_Level_1_3_Lo
0A542 9A                        	.db <EnemyPointers_Level_2_1_Lo
0A543 AE                        	.db <EnemyPointers_Level_2_2_Lo
0A544 C2                        	.db <EnemyPointers_Level_2_3_Lo
0A545 D6                        	.db <EnemyPointers_Level_3_1_Lo
0A546 EA                        	.db <EnemyPointers_Level_3_2_Lo
0A547 FE                        	.db <EnemyPointers_Level_3_3_Lo
0A548 12                        	.db <EnemyPointers_Level_4_1_Lo
0A549 26                        	.db <EnemyPointers_Level_4_2_Lo
0A54A 3A                        	.db <EnemyPointers_Level_4_3_Lo
0A54B 4E                        	.db <EnemyPointers_Level_5_1_Lo
0A54C 62                        	.db <EnemyPointers_Level_5_2_Lo
0A54D 76                        	.db <EnemyPointers_Level_5_3_Lo
0A54E 8A                        	.db <EnemyPointers_Level_6_1_Lo
0A54F 9E                        	.db <EnemyPointers_Level_6_2_Lo
0A550 B2                        	.db <EnemyPointers_Level_6_3_Lo
0A551 C6                        	.db <EnemyPointers_Level_7_1_Lo
0A552 DA                        	.db <EnemyPointers_Level_7_2_Lo
0A553 EE                        	.db <EnemyPointers_Level_7_3_Lo
0A554                           
0A554                           ; ----------------------------------------
0A554                           ; Actual pointers to enemy data here
0A554                           
0A554                           EnemyPointers_Level_1_1_Hi:
0A554 A6                        	.db >EnemyData_Level_1_1_Area0
0A555 A7                        	.db >EnemyData_Level_1_1_Area1
0A556 A7                        	.db >EnemyData_Level_1_1_Area2
0A557 A7                        	.db >EnemyData_Level_1_1_Area3
0A558 A7                        	.db >EnemyData_Level_1_1_Area4
0A559 A7                        	.db >EnemyData_Level_1_1_Area5
0A55A A7                        	.db >EnemyData_Level_1_1_Area5
0A55B A7                        	.db >EnemyData_Level_1_1_Area5
0A55C A7                        	.db >EnemyData_Level_1_1_Area5
0A55D A7                        	.db >EnemyData_Level_1_1_Area5
0A55E                           
0A55E                           EnemyPointers_Level_1_1_Lo:
0A55E F8                        	.db <EnemyData_Level_1_1_Area0
0A55F 01                        	.db <EnemyData_Level_1_1_Area1
0A560 16                        	.db <EnemyData_Level_1_1_Area2
0A561 53                        	.db <EnemyData_Level_1_1_Area3
0A562 59                        	.db <EnemyData_Level_1_1_Area4
0A563 5E                        	.db <EnemyData_Level_1_1_Area5
0A564 5E                        	.db <EnemyData_Level_1_1_Area5
0A565 5E                        	.db <EnemyData_Level_1_1_Area5
0A566 5E                        	.db <EnemyData_Level_1_1_Area5
0A567 5E                        	.db <EnemyData_Level_1_1_Area5
0A568                           
0A568                           EnemyPointers_Level_1_2_Hi:
0A568 A7                        	.db >EnemyData_Level_1_2_Area0
0A569 A7                        	.db >EnemyData_Level_1_2_Area1
0A56A A7                        	.db >EnemyData_Level_1_2_Area2
0A56B A7                        	.db >EnemyData_Level_1_2_Area3
0A56C A7                        	.db >EnemyData_Level_1_2_Area4
0A56D A7                        	.db >EnemyData_Level_1_2_Area5
0A56E A7                        	.db >EnemyData_Level_1_2_Area5
0A56F A7                        	.db >EnemyData_Level_1_2_Area5
0A570 A7                        	.db >EnemyData_Level_1_2_Area5
0A571 A7                        	.db >EnemyData_Level_1_2_Area5
0A572                           
0A572                           EnemyPointers_Level_1_2_Lo:
0A572 6A                        	.db <EnemyData_Level_1_2_Area0
0A573 8A                        	.db <EnemyData_Level_1_2_Area1
0A574 99                        	.db <EnemyData_Level_1_2_Area2
0A575 A3                        	.db <EnemyData_Level_1_2_Area3
0A576 A9                        	.db <EnemyData_Level_1_2_Area4
0A577 B6                        	.db <EnemyData_Level_1_2_Area5
0A578 B6                        	.db <EnemyData_Level_1_2_Area5
0A579 B6                        	.db <EnemyData_Level_1_2_Area5
0A57A B6                        	.db <EnemyData_Level_1_2_Area5
0A57B B6                        	.db <EnemyData_Level_1_2_Area5
0A57C                           
0A57C                           EnemyPointers_Level_1_3_Hi:
0A57C A7                        	.db >EnemyData_Level_1_3_Area0
0A57D A7                        	.db >EnemyData_Level_1_3_Area1
0A57E A7                        	.db >EnemyData_Level_1_3_Area2
0A57F A8                        	.db >EnemyData_Level_1_3_Area3
0A580 A8                        	.db >EnemyData_Level_1_3_Area4
0A581 A8                        	.db >EnemyData_Level_1_3_Area4
0A582 A8                        	.db >EnemyData_Level_1_3_Area4
0A583 A8                        	.db >EnemyData_Level_1_3_Area4
0A584 A8                        	.db >EnemyData_Level_1_3_Area4
0A585 A8                        	.db >EnemyData_Level_1_3_Area4
0A586                           
0A586                           EnemyPointers_Level_1_3_Lo:
0A586 B9                        	.db <EnemyData_Level_1_3_Area0
0A587 EE                        	.db <EnemyData_Level_1_3_Area1
0A588 F6                        	.db <EnemyData_Level_1_3_Area2
0A589 10                        	.db <EnemyData_Level_1_3_Area3
0A58A 33                        	.db <EnemyData_Level_1_3_Area4
0A58B 33                        	.db <EnemyData_Level_1_3_Area4
0A58C 33                        	.db <EnemyData_Level_1_3_Area4
0A58D 33                        	.db <EnemyData_Level_1_3_Area4
0A58E 33                        	.db <EnemyData_Level_1_3_Area4
0A58F 33                        	.db <EnemyData_Level_1_3_Area4
0A590                           
0A590                           EnemyPointers_Level_2_1_Hi:
0A590 A8                        	.db >EnemyData_Level_2_1_Area0
0A591 A8                        	.db >EnemyData_Level_2_1_Area1
0A592 A8                        	.db >EnemyData_Level_2_1_Area2
0A593 A8                        	.db >EnemyData_Level_2_1_Area2
0A594 A8                        	.db >EnemyData_Level_2_1_Area4
0A595 A8                        	.db >EnemyData_Level_2_1_Area2
0A596 A8                        	.db >EnemyData_Level_2_1_Area2
0A597 A8                        	.db >EnemyData_Level_2_1_Area2
0A598 A8                        	.db >EnemyData_Level_2_1_Area2
0A599 A8                        	.db >EnemyData_Level_2_1_Area2
0A59A                           
0A59A                           EnemyPointers_Level_2_1_Lo:
0A59A 3A                        	.db <EnemyData_Level_2_1_Area0
0A59B 59                        	.db <EnemyData_Level_2_1_Area1
0A59C 6A                        	.db <EnemyData_Level_2_1_Area2
0A59D 6A                        	.db <EnemyData_Level_2_1_Area2
0A59E 74                        	.db <EnemyData_Level_2_1_Area4
0A59F 6A                        	.db <EnemyData_Level_2_1_Area2
0A5A0 6A                        	.db <EnemyData_Level_2_1_Area2
0A5A1 6A                        	.db <EnemyData_Level_2_1_Area2
0A5A2 6A                        	.db <EnemyData_Level_2_1_Area2
0A5A3 6A                        	.db <EnemyData_Level_2_1_Area2
0A5A4                           
0A5A4                           EnemyPointers_Level_2_2_Hi:
0A5A4 A8                        	.db >EnemyData_Level_2_2_Area0
0A5A5 A8                        	.db >EnemyData_Level_2_2_Area1
0A5A6 A8                        	.db >EnemyData_Level_2_2_Area2
0A5A7 A8                        	.db >EnemyData_Level_2_2_Area3
0A5A8 A8                        	.db >EnemyData_Level_2_2_Area4
0A5A9 A8                        	.db >EnemyData_Level_2_2_Area5
0A5AA A8                        	.db >EnemyData_Level_2_2_Area5
0A5AB A8                        	.db >EnemyData_Level_2_2_Area5
0A5AC A8                        	.db >EnemyData_Level_2_2_Area5
0A5AD A8                        	.db >EnemyData_Level_2_2_Area5
0A5AE                           
0A5AE                           EnemyPointers_Level_2_2_Lo:
0A5AE 81                        	.db <EnemyData_Level_2_2_Area0
0A5AF 8C                        	.db <EnemyData_Level_2_2_Area1
0A5B0 BB                        	.db <EnemyData_Level_2_2_Area2
0A5B1 CA                        	.db <EnemyData_Level_2_2_Area3
0A5B2 DD                        	.db <EnemyData_Level_2_2_Area4
0A5B3 EA                        	.db <EnemyData_Level_2_2_Area5
0A5B4 EA                        	.db <EnemyData_Level_2_2_Area5
0A5B5 EA                        	.db <EnemyData_Level_2_2_Area5
0A5B6 EA                        	.db <EnemyData_Level_2_2_Area5
0A5B7 EA                        	.db <EnemyData_Level_2_2_Area5
0A5B8                           
0A5B8                           EnemyPointers_Level_2_3_Hi:
0A5B8 A8                        	.db >EnemyData_Level_2_3_Area0
0A5B9 A8                        	.db >EnemyData_Level_2_3_Area1
0A5BA A9                        	.db >EnemyData_Level_2_3_Area2
0A5BB A9                        	.db >EnemyData_Level_2_3_Area3
0A5BC A9                        	.db >EnemyData_Level_2_3_Area4
0A5BD A9                        	.db >EnemyData_Level_2_3_Area5
0A5BE A9                        	.db >EnemyData_Level_2_3_Area6
0A5BF A9                        	.db >EnemyData_Level_2_3_Area7
0A5C0 A9                        	.db >EnemyData_Level_2_3_Area7
0A5C1 A9                        	.db >EnemyData_Level_2_3_Area7
0A5C2                           
0A5C2                           EnemyPointers_Level_2_3_Lo:
0A5C2 F4                        	.db <EnemyData_Level_2_3_Area0
0A5C3 F8                        	.db <EnemyData_Level_2_3_Area1
0A5C4 13                        	.db <EnemyData_Level_2_3_Area2
0A5C5 16                        	.db <EnemyData_Level_2_3_Area3
0A5C6 38                        	.db <EnemyData_Level_2_3_Area4
0A5C7 45                        	.db <EnemyData_Level_2_3_Area5
0A5C8 65                        	.db <EnemyData_Level_2_3_Area6
0A5C9 6C                        	.db <EnemyData_Level_2_3_Area7
0A5CA 6C                        	.db <EnemyData_Level_2_3_Area7
0A5CB 6C                        	.db <EnemyData_Level_2_3_Area7
0A5CC                           
0A5CC                           EnemyPointers_Level_3_1_Hi:
0A5CC A9                        	.db >EnemyData_Level_3_1_Area0
0A5CD A9                        	.db >EnemyData_Level_3_1_Area1
0A5CE A9                        	.db >EnemyData_Level_3_1_Area2
0A5CF A9                        	.db >EnemyData_Level_3_1_Area3
0A5D0 A9                        	.db >EnemyData_Level_3_1_Area4
0A5D1 A9                        	.db >EnemyData_Level_3_2_Area0
0A5D2 A9                        	.db >EnemyData_Level_3_2_Area0
0A5D3 A9                        	.db >EnemyData_Level_3_2_Area0
0A5D4 A9                        	.db >EnemyData_Level_3_2_Area0
0A5D5 A9                        	.db >EnemyData_Level_3_2_Area0
0A5D6                           
0A5D6                           EnemyPointers_Level_3_1_Lo:
0A5D6 75                        	.db <EnemyData_Level_3_1_Area0
0A5D7 78                        	.db <EnemyData_Level_3_1_Area1
0A5D8 93                        	.db <EnemyData_Level_3_1_Area2
0A5D9 97                        	.db <EnemyData_Level_3_1_Area3
0A5DA A8                        	.db <EnemyData_Level_3_1_Area4
0A5DB B3                        	.db <EnemyData_Level_3_2_Area0
0A5DC B3                        	.db <EnemyData_Level_3_2_Area0
0A5DD B3                        	.db <EnemyData_Level_3_2_Area0
0A5DE B3                        	.db <EnemyData_Level_3_2_Area0
0A5DF B3                        	.db <EnemyData_Level_3_2_Area0
0A5E0                           
0A5E0                           EnemyPointers_Level_3_2_Hi:
0A5E0 A9                        	.db >EnemyData_Level_3_2_Area0
0A5E1 A9                        	.db >EnemyData_Level_3_2_Area1
0A5E2 A9                        	.db >EnemyData_Level_3_2_Area2
0A5E3 A9                        	.db >EnemyData_Level_3_2_Area3 ; Unused? Boss-flag Birdo
0A5E4 A9                        	.db >EnemyData_Level_3_3_Area0
0A5E5 A9                        	.db >EnemyData_Level_3_3_Area0
0A5E6 A9                        	.db >EnemyData_Level_3_3_Area0
0A5E7 A9                        	.db >EnemyData_Level_3_3_Area0
0A5E8 A9                        	.db >EnemyData_Level_3_3_Area0
0A5E9 A9                        	.db >EnemyData_Level_3_3_Area0
0A5EA                           
0A5EA                           EnemyPointers_Level_3_2_Lo:
0A5EA B3                        	.db <EnemyData_Level_3_2_Area0
0A5EB D6                        	.db <EnemyData_Level_3_2_Area1
0A5EC EF                        	.db <EnemyData_Level_3_2_Area2
0A5ED FA                        	.db <EnemyData_Level_3_2_Area3 ; Unused? Boss-flag Birdo
0A5EE FF                        	.db <EnemyData_Level_3_3_Area0
0A5EF FF                        	.db <EnemyData_Level_3_3_Area0
0A5F0 FF                        	.db <EnemyData_Level_3_3_Area0
0A5F1 FF                        	.db <EnemyData_Level_3_3_Area0
0A5F2 FF                        	.db <EnemyData_Level_3_3_Area0
0A5F3 FF                        	.db <EnemyData_Level_3_3_Area0
0A5F4                           
0A5F4                           EnemyPointers_Level_3_3_Hi:
0A5F4 A9                        	.db >EnemyData_Level_3_3_Area0
0A5F5 AA                        	.db >EnemyData_Level_3_3_Area1
0A5F6 AA                        	.db >EnemyData_Level_3_3_Area2
0A5F7 AA                        	.db >EnemyData_Level_3_3_Area3
0A5F8 AA                        	.db >EnemyData_Level_3_3_Area4
0A5F9 AA                        	.db >EnemyData_Level_3_3_Area5
0A5FA AA                        	.db >EnemyData_Level_3_3_Area6
0A5FB AA                        	.db >EnemyData_Level_3_3_Area7
0A5FC AA                        	.db >EnemyData_Level_3_3_Area8
0A5FD AA                        	.db >EnemyData_Level_3_3_Area8
0A5FE                           
0A5FE                           EnemyPointers_Level_3_3_Lo:
0A5FE FF                        	.db <EnemyData_Level_3_3_Area0
0A5FF 04                        	.db <EnemyData_Level_3_3_Area1
0A600 13                        	.db <EnemyData_Level_3_3_Area2
0A601 26                        	.db <EnemyData_Level_3_3_Area3
0A602 59                        	.db <EnemyData_Level_3_3_Area4
0A603 75                        	.db <EnemyData_Level_3_3_Area5
0A604 82                        	.db <EnemyData_Level_3_3_Area6
0A605 8E                        	.db <EnemyData_Level_3_3_Area7
0A606 A2                        	.db <EnemyData_Level_3_3_Area8
0A607 A2                        	.db <EnemyData_Level_3_3_Area8
0A608                           
0A608                           EnemyPointers_Level_4_1_Hi:
0A608 AA                        	.db >EnemyData_Level_4_1_Area0
0A609 AA                        	.db >EnemyData_Level_4_1_Area1
0A60A AA                        	.db >EnemyData_Level_4_1_Area2 ; ??? Unused area with another Boss Birdo.
0A60B AA                        	.db >EnemyData_Level_4_1_Area2
0A60C AA                        	.db >EnemyData_Level_4_1_Area2
0A60D AA                        	.db >EnemyData_Level_4_1_Area2
0A60E AA                        	.db >EnemyData_Level_4_1_Area2
0A60F AA                        	.db >EnemyData_Level_4_1_Area2
0A610 AA                        	.db >EnemyData_Level_4_1_Area2
0A611 AA                        	.db >EnemyData_Level_4_1_Area2
0A612                           
0A612                           EnemyPointers_Level_4_1_Lo:
0A612 AC                        	.db <EnemyData_Level_4_1_Area0
0A613 DB                        	.db <EnemyData_Level_4_1_Area1
0A614 FC                        	.db <EnemyData_Level_4_1_Area2
0A615 FC                        	.db <EnemyData_Level_4_1_Area2
0A616 FC                        	.db <EnemyData_Level_4_1_Area2
0A617 FC                        	.db <EnemyData_Level_4_1_Area2
0A618 FC                        	.db <EnemyData_Level_4_1_Area2
0A619 FC                        	.db <EnemyData_Level_4_1_Area2
0A61A FC                        	.db <EnemyData_Level_4_1_Area2
0A61B FC                        	.db <EnemyData_Level_4_1_Area2
0A61C                           
0A61C                           EnemyPointers_Level_4_2_Hi:
0A61C AB                        	.db >EnemyData_Level_4_2_Area0
0A61D AB                        	.db >EnemyData_Level_4_2_Area1
0A61E AB                        	.db >EnemyData_Level_4_2_Area2
0A61F AB                        	.db >EnemyData_Level_4_2_Area3
0A620 AB                        	.db >EnemyData_Level_4_2_Area4
0A621 AB                        	.db >EnemyData_Level_4_2_Area4
0A622 AB                        	.db >EnemyData_Level_4_2_Area4
0A623 AB                        	.db >EnemyData_Level_4_2_Area4
0A624 AB                        	.db >EnemyData_Level_4_2_Area4
0A625 AB                        	.db >EnemyData_Level_4_2_Area4
0A626                           
0A626                           EnemyPointers_Level_4_2_Lo:
0A626 2A                        	.db <EnemyData_Level_4_2_Area0
0A627 2F                        	.db <EnemyData_Level_4_2_Area1
0A628 76                        	.db <EnemyData_Level_4_2_Area2
0A629 9D                        	.db <EnemyData_Level_4_2_Area3
0A62A A8                        	.db <EnemyData_Level_4_2_Area4
0A62B A8                        	.db <EnemyData_Level_4_2_Area4
0A62C A8                        	.db <EnemyData_Level_4_2_Area4
0A62D A8                        	.db <EnemyData_Level_4_2_Area4
0A62E A8                        	.db <EnemyData_Level_4_2_Area4
0A62F A8                        	.db <EnemyData_Level_4_2_Area4
0A630                           
0A630                           EnemyPointers_Level_4_3_Hi:
0A630 AB                        	.db >EnemyData_Level_4_3_Area0
0A631 AB                        	.db >EnemyData_Level_4_3_Area1
0A632 AB                        	.db >EnemyData_Level_4_3_Area2
0A633 AB                        	.db >EnemyData_Level_4_3_Area3
0A634 AC                        	.db >EnemyData_Level_4_3_Area4
0A635 AC                        	.db >EnemyData_Level_4_3_Area5
0A636 AC                        	.db >EnemyData_Level_4_3_Area6
0A637 AC                        	.db >EnemyData_Level_4_3_Area7
0A638 AC                        	.db >EnemyData_Level_4_3_Area8
0A639 AC                        	.db >EnemyData_Level_4_3_Area9
0A63A                           
0A63A                           EnemyPointers_Level_4_3_Lo:
0A63A B7                        	.db <EnemyData_Level_4_3_Area0
0A63B BB                        	.db <EnemyData_Level_4_3_Area1
0A63C CA                        	.db <EnemyData_Level_4_3_Area2
0A63D F1                        	.db <EnemyData_Level_4_3_Area3
0A63E 0A                        	.db <EnemyData_Level_4_3_Area4
0A63F 15                        	.db <EnemyData_Level_4_3_Area5
0A640 28                        	.db <EnemyData_Level_4_3_Area6
0A641 3B                        	.db <EnemyData_Level_4_3_Area7
0A642 48                        	.db <EnemyData_Level_4_3_Area8
0A643 53                        	.db <EnemyData_Level_4_3_Area9
0A644                           
0A644                           EnemyPointers_Level_5_1_Hi:
0A644 AC                        	.db >EnemyData_Level_5_1_Area0
0A645 AC                        	.db >EnemyData_Level_5_1_Area1
0A646 AC                        	.db >EnemyData_Level_5_1_Area2
0A647 AC                        	.db >EnemyData_Level_5_2_Area0
0A648 AC                        	.db >EnemyData_Level_5_2_Area0
0A649 AC                        	.db >EnemyData_Level_5_2_Area0
0A64A AC                        	.db >EnemyData_Level_5_2_Area0
0A64B AC                        	.db >EnemyData_Level_5_2_Area0
0A64C AC                        	.db >EnemyData_Level_5_2_Area0
0A64D AC                        	.db >EnemyData_Level_5_2_Area0
0A64E                           
0A64E                           EnemyPointers_Level_5_1_Lo:
0A64E 5E                        	.db <EnemyData_Level_5_1_Area0
0A64F 68                        	.db <EnemyData_Level_5_1_Area1
0A650 91                        	.db <EnemyData_Level_5_1_Area2
0A651 9A                        	.db <EnemyData_Level_5_2_Area0
0A652 9A                        	.db <EnemyData_Level_5_2_Area0
0A653 9A                        	.db <EnemyData_Level_5_2_Area0
0A654 9A                        	.db <EnemyData_Level_5_2_Area0
0A655 9A                        	.db <EnemyData_Level_5_2_Area0
0A656 9A                        	.db <EnemyData_Level_5_2_Area0
0A657 9A                        	.db <EnemyData_Level_5_2_Area0
0A658                           
0A658                           EnemyPointers_Level_5_2_Hi:
0A658 AC                        	.db >EnemyData_Level_5_2_Area0
0A659 AC                        	.db >EnemyData_Level_5_2_Area1
0A65A AC                        	.db >EnemyData_Level_5_2_Area2
0A65B AC                        	.db >EnemyData_Level_5_2_Area3
0A65C AC                        	.db >EnemyData_Level_5_2_Area4
0A65D AD                        	.db >EnemyData_Level_5_2_Area5
0A65E AD                        	.db >EnemyData_Level_5_3_Area0
0A65F AD                        	.db >EnemyData_Level_5_3_Area0
0A660 AD                        	.db >EnemyData_Level_5_3_Area0
0A661 AD                        	.db >EnemyData_Level_5_3_Area0
0A662                           
0A662                           EnemyPointers_Level_5_2_Lo:
0A662 9A                        	.db <EnemyData_Level_5_2_Area0
0A663 9F                        	.db <EnemyData_Level_5_2_Area1
0A664 D6                        	.db <EnemyData_Level_5_2_Area2
0A665 EF                        	.db <EnemyData_Level_5_2_Area3
0A666 FB                        	.db <EnemyData_Level_5_2_Area4
0A667 04                        	.db <EnemyData_Level_5_2_Area5
0A668 10                        	.db <EnemyData_Level_5_3_Area0
0A669 10                        	.db <EnemyData_Level_5_3_Area0
0A66A 10                        	.db <EnemyData_Level_5_3_Area0
0A66B 10                        	.db <EnemyData_Level_5_3_Area0
0A66C                           
0A66C                           EnemyPointers_Level_5_3_Hi:
0A66C AD                        	.db >EnemyData_Level_5_3_Area0
0A66D AD                        	.db >EnemyData_Level_5_3_Area1
0A66E AD                        	.db >EnemyData_Level_5_3_Area2
0A66F AD                        	.db >EnemyData_Level_5_3_Area3
0A670 AD                        	.db >EnemyData_Level_5_3_Area4
0A671 AD                        	.db >EnemyData_Level_5_3_Area5
0A672 AD                        	.db >EnemyData_Level_5_3_Area5
0A673 AD                        	.db >EnemyData_Level_5_3_Area5
0A674 AD                        	.db >EnemyData_Level_5_3_Area5
0A675 AD                        	.db >EnemyData_Level_5_3_Area5
0A676                           
0A676                           EnemyPointers_Level_5_3_Lo:
0A676 10                        	.db <EnemyData_Level_5_3_Area0
0A677 15                        	.db <EnemyData_Level_5_3_Area1
0A678 34                        	.db <EnemyData_Level_5_3_Area2
0A679 46                        	.db <EnemyData_Level_5_3_Area3
0A67A 64                        	.db <EnemyData_Level_5_3_Area4
0A67B 85                        	.db <EnemyData_Level_5_3_Area5
0A67C 85                        	.db <EnemyData_Level_5_3_Area5
0A67D 85                        	.db <EnemyData_Level_5_3_Area5
0A67E 85                        	.db <EnemyData_Level_5_3_Area5
0A67F 85                        	.db <EnemyData_Level_5_3_Area5
0A680                           
0A680                           EnemyPointers_Level_6_1_Hi:
0A680 AD                        	.db >EnemyData_Level_6_1_Area0
0A681 AD                        	.db >EnemyData_Level_6_1_Area1
0A682 AD                        	.db >EnemyData_Level_6_1_Area2
0A683 AD                        	.db >EnemyData_Level_6_1_Area3
0A684 AD                        	.db >EnemyData_Level_6_1_Area4
0A685 AD                        	.db >EnemyData_Level_6_1_Area5
0A686 AD                        	.db >EnemyData_Level_6_1_Area6
0A687 AD                        	.db >EnemyData_Level_6_1_Area6
0A688 AD                        	.db >EnemyData_Level_6_1_Area6
0A689 AD                        	.db >EnemyData_Level_6_1_Area6
0A68A                           
0A68A                           EnemyPointers_Level_6_1_Lo:
0A68A 8A                        	.db <EnemyData_Level_6_1_Area0
0A68B B5                        	.db <EnemyData_Level_6_1_Area1
0A68C C4                        	.db <EnemyData_Level_6_1_Area2
0A68D CE                        	.db <EnemyData_Level_6_1_Area3
0A68E DB                        	.db <EnemyData_Level_6_1_Area4
0A68F EA                        	.db <EnemyData_Level_6_1_Area5
0A690 F3                        	.db <EnemyData_Level_6_1_Area6
0A691 F3                        	.db <EnemyData_Level_6_1_Area6
0A692 F3                        	.db <EnemyData_Level_6_1_Area6
0A693 F3                        	.db <EnemyData_Level_6_1_Area6
0A694                           
0A694                           EnemyPointers_Level_6_2_Hi:
0A694 AD                        	.db >EnemyData_Level_6_2_Area0
0A695 AD                        	.db >EnemyData_Level_6_2_Area1
0A696 AE                        	.db >EnemyData_Level_6_2_Area2
0A697 AE                        	.db >EnemyData_Level_6_2_Area2
0A698 AE                        	.db >EnemyData_Level_6_2_Area2
0A699 AE                        	.db >EnemyData_Level_6_2_Area2
0A69A AE                        	.db >EnemyData_Level_6_2_Area2
0A69B AE                        	.db >EnemyData_Level_6_2_Area2
0A69C AE                        	.db >EnemyData_Level_6_2_Area2
0A69D AE                        	.db >EnemyData_Level_6_2_Area2
0A69E                           
0A69E                           EnemyPointers_Level_6_2_Lo:
0A69E F7                        	.db <EnemyData_Level_6_2_Area0
0A69F FC                        	.db <EnemyData_Level_6_2_Area1
0A6A0 31                        	.db <EnemyData_Level_6_2_Area2
0A6A1 31                        	.db <EnemyData_Level_6_2_Area2
0A6A2 31                        	.db <EnemyData_Level_6_2_Area2
0A6A3 31                        	.db <EnemyData_Level_6_2_Area2
0A6A4 31                        	.db <EnemyData_Level_6_2_Area2
0A6A5 31                        	.db <EnemyData_Level_6_2_Area2
0A6A6 31                        	.db <EnemyData_Level_6_2_Area2
0A6A7 31                        	.db <EnemyData_Level_6_2_Area2
0A6A8                           
0A6A8                           EnemyPointers_Level_6_3_Hi:
0A6A8 AE                        	.db >EnemyData_Level_6_3_Area0
0A6A9 AE                        	.db >EnemyData_Level_6_3_Area1
0A6AA AE                        	.db >EnemyData_Level_6_3_Area2
0A6AB AE                        	.db >EnemyData_Level_6_3_Area3
0A6AC AE                        	.db >EnemyData_Level_6_3_Area4
0A6AD AE                        	.db >EnemyData_Level_6_3_Area5
0A6AE AE                        	.db >EnemyData_Level_6_3_Area6
0A6AF AE                        	.db >EnemyData_Level_6_3_Area6
0A6B0 AE                        	.db >EnemyData_Level_6_3_Area6
0A6B1 AE                        	.db >EnemyData_Level_6_3_Area6
0A6B2                           
0A6B2                           EnemyPointers_Level_6_3_Lo:
0A6B2 3B                        	.db <EnemyData_Level_6_3_Area0
0A6B3 3F                        	.db <EnemyData_Level_6_3_Area1
0A6B4 4D                        	.db <EnemyData_Level_6_3_Area2
0A6B5 68                        	.db <EnemyData_Level_6_3_Area3
0A6B6 95                        	.db <EnemyData_Level_6_3_Area4
0A6B7 9A                        	.db <EnemyData_Level_6_3_Area5
0A6B8 A3                        	.db <EnemyData_Level_6_3_Area6
0A6B9 A3                        	.db <EnemyData_Level_6_3_Area6
0A6BA A3                        	.db <EnemyData_Level_6_3_Area6
0A6BB A3                        	.db <EnemyData_Level_6_3_Area6
0A6BC                           
0A6BC                           EnemyPointers_Level_7_1_Hi:
0A6BC AE                        	.db >EnemyData_Level_7_1_Area0
0A6BD AE                        	.db >EnemyData_Level_7_1_Area1
0A6BE AE                        	.db >EnemyData_Level_7_1_Area2
0A6BF AE                        	.db >EnemyData_Level_7_1_Area3
0A6C0 AF                        	.db >EnemyData_Level_7_1_Area4
0A6C1 AF                        	.db >EnemyData_Level_7_1_Area5
0A6C2 AF                        	.db >EnemyData_Level_7_1_Area5
0A6C3 AF                        	.db >EnemyData_Level_7_1_Area5
0A6C4 AF                        	.db >EnemyData_Level_7_1_Area5
0A6C5 AF                        	.db >EnemyData_Level_7_1_Area5
0A6C6                           
0A6C6                           EnemyPointers_Level_7_1_Lo:
0A6C6 A8                        	.db <EnemyData_Level_7_1_Area0
0A6C7 AC                        	.db <EnemyData_Level_7_1_Area1
0A6C8 D8                        	.db <EnemyData_Level_7_1_Area2
0A6C9 ED                        	.db <EnemyData_Level_7_1_Area3
0A6CA 02                        	.db <EnemyData_Level_7_1_Area4
0A6CB 0B                        	.db <EnemyData_Level_7_1_Area5
0A6CC 0B                        	.db <EnemyData_Level_7_1_Area5
0A6CD 0B                        	.db <EnemyData_Level_7_1_Area5
0A6CE 0B                        	.db <EnemyData_Level_7_1_Area5
0A6CF 0B                        	.db <EnemyData_Level_7_1_Area5
0A6D0                           
0A6D0                           EnemyPointers_Level_7_2_Hi:
0A6D0 AF                        	.db >EnemyData_Level_7_2_Area0
0A6D1 AF                        	.db >EnemyData_Level_7_2_Area1
0A6D2 AF                        	.db >EnemyData_Level_7_2_Area2
0A6D3 AF                        	.db >EnemyData_Level_7_2_Area3
0A6D4 AF                        	.db >EnemyData_Level_7_2_Area4
0A6D5 AF                        	.db >EnemyData_Level_7_2_Area5
0A6D6 AF                        	.db >EnemyData_Level_7_2_Area6
0A6D7 AF                        	.db >EnemyData_Level_7_2_Area7
0A6D8 AF                        	.db >EnemyData_Level_7_2_Area8
0A6D9 B0                        	.db >EnemyData_Level_7_2_Area9
0A6DA                           
0A6DA                           EnemyPointers_Level_7_2_Lo:
0A6DA 11                        	.db <EnemyData_Level_7_2_Area0
0A6DB 1D                        	.db <EnemyData_Level_7_2_Area1
0A6DC 39                        	.db <EnemyData_Level_7_2_Area2
0A6DD 5A                        	.db <EnemyData_Level_7_2_Area3
0A6DE 73                        	.db <EnemyData_Level_7_2_Area4
0A6DF 98                        	.db <EnemyData_Level_7_2_Area5
0A6E0 A0                        	.db <EnemyData_Level_7_2_Area6
0A6E1 CB                        	.db <EnemyData_Level_7_2_Area7
0A6E2 EA                        	.db <EnemyData_Level_7_2_Area8
0A6E3 10                        	.db <EnemyData_Level_7_2_Area9
0A6E4                           
0A6E4                           ; Normally totally unused (game ends at 7-2)
0A6E4                           ; Interestingly, the first 4 areas are unique
0A6E4                           ; though completely empty
0A6E4                           ; Wonder if they intended on having a full 7-3
0A6E4                           ; at some point...
0A6E4                           EnemyPointers_Level_7_3_Hi:
0A6E4 B0                        	.db >EnemyData_Level_7_3_Area0
0A6E5 B0                        	.db >EnemyData_Level_7_3_Area1
0A6E6 B0                        	.db >EnemyData_Level_7_3_Area2
0A6E7 B0                        	.db >EnemyData_Level_7_3_Area3
0A6E8 B0                        	.db >EnemyData_Level_7_3_Area4
0A6E9 B0                        	.db >EnemyData_Level_7_3_Area4
0A6EA B0                        	.db >EnemyData_Level_7_3_Area4
0A6EB B0                        	.db >EnemyData_Level_7_3_Area4
0A6EC B0                        	.db >EnemyData_Level_7_3_Area4
0A6ED B0                        	.db >EnemyData_Level_7_3_Area4
0A6EE                           
0A6EE                           EnemyPointers_Level_7_3_Lo:
0A6EE 1B                        	.db <EnemyData_Level_7_3_Area0
0A6EF 1C                        	.db <EnemyData_Level_7_3_Area1
0A6F0 1D                        	.db <EnemyData_Level_7_3_Area2
0A6F1 1E                        	.db <EnemyData_Level_7_3_Area3
0A6F2 1F                        	.db <EnemyData_Level_7_3_Area4
0A6F3 1F                        	.db <EnemyData_Level_7_3_Area4
0A6F4 1F                        	.db <EnemyData_Level_7_3_Area4
0A6F5 1F                        	.db <EnemyData_Level_7_3_Area4
0A6F6 1F                        	.db <EnemyData_Level_7_3_Area4
0A6F7 1F                        	.db <EnemyData_Level_7_3_Area4
0A6F8                           
0A6F8                           
0A6F8                           ; Include enemy data;
0A6F8                           ; see src/levels/enemy-data.asm for enemy format details
0A6F8                           include "src/levels/enemy-data.asm"
0A6F8                           ;
0A6F8                           ; Enemy Data
0A6F8                           ; ==========
0A6F8                           ;
0A6F8                           ; This data is broken down by page (ie. screen), where the first byte indicates
0A6F8                           ; the number of bytes for this page. Each enemy is two bytes, where the first
0A6F8                           ; byte is the enemy, and the second byte is XY position.
0A6F8                           ;
0A6F8                           ; Each "page" of enemy data is 16x16 tiles.
0A6F8                           ;
0A6F8                           ; Note that this is one tile GREATER than level data. Consequently, level and
0A6F8                           ; enemy data becomes increasingly misaligned in vertical areas.
0A6F8                           ;
0A6F8                           ; Examples:
0A6F8                           ;   $01 - an empty page
0A6F8                           ;   $03,$01,$47 - a page with a single pink shyguy ($01) at X=4, Y=7
0A6F8                           ;
0A6F8                           
0A6F8                           ; -------------------------------
0A6F8                           ; World 1
0A6F8                           
0A6F8                           ; World 1-1
0A6F8                           include "src/levels/1/1-1/1-1-area0-enemies.asm"
0A6F8                           ; Level 1-1, Area 0
0A6F8                           
0A6F8                           EnemyData_Level_1_1_Area0:
0A6F8                           
0A6F8                           ; Page 0
0A6F8                           	distTo + ; $01 (0 enemies)
0A6F8 01                        	.db (+ - $)
0A6F9                           
0A6F9                           ; Page 1
0A6F9                           +	distTo + ; $01 (0 enemies)
0A6F9 01                        	.db (+ - $)
0A6FA                           
0A6FA                           ; Page 2
0A6FA                           +	distTo + ; $05 (2 enemies)
0A6FA 05                        	.db (+ - $)
0A6FB                           	enemy $7, $6, Enemy_ShyguyPink
0A6FB 03 76                     	.db Enemy_ShyguyPink, $7 << 4 | $6
0A6FD                           	enemy $6, $C, Enemy_ShyguyPink
0A6FD 03 6C                     	.db Enemy_ShyguyPink, $6 << 4 | $C
0A6FF                           
0A6FF                           ; Page 3
0A6FF                           +	distTo + ; $01 (0 enemies)
0A6FF 01                        	.db (+ - $)
0A700                           
0A700                           ; Page 4
0A700                           +	distTo + ; $01 (0 enemies)
0A700 01                        	.db (+ - $)
0A701                           
0A701                           ; End of enemy data
0A701                           +
0A701                           include "src/levels/1/1-1/1-1-area1-enemies.asm"
0A701                           ; Level 1-1, Area 1
0A701                           
0A701                           EnemyData_Level_1_1_Area1:
0A701                           
0A701                           ; Page 0
0A701                           	distTo + ; $05 (2 enemies)
0A701 05                        	.db (+ - $)
0A702                           	enemy $5, $6, Enemy_Hoopstar
0A702 14 56                     	.db Enemy_Hoopstar, $5 << 4 | $6
0A704                           	enemy $A, $D, Enemy_Hoopstar
0A704 14 AD                     	.db Enemy_Hoopstar, $A << 4 | $D
0A706                           
0A706                           ; Page 1
0A706                           +	distTo + ; $03 (1 enemy)
0A706 03                        	.db (+ - $)
0A707                           	enemy $9, $D, Enemy_ShyguyPink
0A707 03 9D                     	.db Enemy_ShyguyPink, $9 << 4 | $D
0A709                           
0A709                           ; Page 2
0A709                           +	distTo + ; $07 (3 enemies)
0A709 07                        	.db (+ - $)
0A70A                           	enemy $8, $3, Enemy_NinjiJumping
0A70A 0E 83                     	.db Enemy_NinjiJumping, $8 << 4 | $3
0A70C                           	enemy $7, $9, Enemy_NinjiJumping
0A70C 0E 79                     	.db Enemy_NinjiJumping, $7 << 4 | $9
0A70E                           	enemy $B, $C, Enemy_ShyguyPink
0A70E 03 BC                     	.db Enemy_ShyguyPink, $B << 4 | $C
0A710                           
0A710                           ; Page 3
0A710                           +	distTo + ; $05 (2 enemies)
0A710 05                        	.db (+ - $)
0A711                           	enemy $9, $0, Enemy_NinjiJumping
0A711 0E 90                     	.db Enemy_NinjiJumping, $9 << 4 | $0
0A713                           	enemy $7, $5, Enemy_NinjiJumping
0A713 0E 75                     	.db Enemy_NinjiJumping, $7 << 4 | $5
0A715                           
0A715                           ; Page 4
0A715                           +	distTo + ; $01 (0 enemies)
0A715 01                        	.db (+ - $)
0A716                           
0A716                           ; End of enemy data
0A716                           +
0A716                           include "src/levels/1/1-1/1-1-area2-enemies.asm"
0A716                           ; Level 1-1, Area 2
0A716                           
0A716                           EnemyData_Level_1_1_Area2:
0A716                           
0A716                           ; Page 0
0A716                           	distTo + ; $03 (1 enemy)
0A716 03                        	.db (+ - $)
0A717                           	enemy $E, $C, Enemy_ShyguyRed
0A717 01 EC                     	.db Enemy_ShyguyRed, $E << 4 | $C
0A719                           
0A719                           ; Page 1
0A719                           +	distTo + ; $07 (3 enemies)
0A719 07                        	.db (+ - $)
0A71A                           	enemy $1, $C, Enemy_ShyguyRed
0A71A 01 1C                     	.db Enemy_ShyguyRed, $1 << 4 | $C
0A71C                           	enemy $5, $C, Enemy_Tweeter
0A71C 02 5C                     	.db Enemy_Tweeter, $5 << 4 | $C
0A71E                           	enemy $E, $5, Enemy_ShyguyPink
0A71E 03 E5                     	.db Enemy_ShyguyPink, $E << 4 | $5
0A720                           
0A720                           ; Page 2
0A720                           +	distTo + ; $07 (3 enemies)
0A720 07                        	.db (+ - $)
0A721                           	enemy $6, $C, Enemy_ShyguyRed
0A721 01 6C                     	.db Enemy_ShyguyRed, $6 << 4 | $C
0A723                           	enemy $8, $C, Enemy_Tweeter
0A723 02 8C                     	.db Enemy_Tweeter, $8 << 4 | $C
0A725                           	enemy $C, $C, Enemy_ShyguyRed
0A725 01 CC                     	.db Enemy_ShyguyRed, $C << 4 | $C
0A727                           
0A727                           ; Page 3
0A727                           +	distTo + ; $05 (2 enemies)
0A727 05                        	.db (+ - $)
0A728                           	enemy $7, $9, Enemy_ShyguyPink
0A728 03 79                     	.db Enemy_ShyguyPink, $7 << 4 | $9
0A72A                           	enemy $D, $4, Enemy_ShyguyRed
0A72A 01 D4                     	.db Enemy_ShyguyRed, $D << 4 | $4
0A72C                           
0A72C                           ; Page 4
0A72C                           +	distTo + ; $09 (4 enemies)
0A72C 09                        	.db (+ - $)
0A72D                           	enemy $0, $4, Enemy_ShyguyRed
0A72D 01 04                     	.db Enemy_ShyguyRed, $0 << 4 | $4
0A72F                           	enemy $3, $4, Enemy_Tweeter
0A72F 02 34                     	.db Enemy_Tweeter, $3 << 4 | $4
0A731                           	enemy $8, $7, Enemy_FallingLogs
0A731 3B 87                     	.db Enemy_FallingLogs, $8 << 4 | $7
0A733                           	enemy $C, $7, Enemy_FallingLogs
0A733 3B C7                     	.db Enemy_FallingLogs, $C << 4 | $7
0A735                           
0A735                           ; Page 5
0A735                           +	distTo + ; $07 (3 enemies)
0A735 07                        	.db (+ - $)
0A736                           	enemy $A, $9, Enemy_ShyguyPink
0A736 03 A9                     	.db Enemy_ShyguyPink, $A << 4 | $9
0A738                           	enemy $B, $C, Enemy_ShyguyPink
0A738 03 BC                     	.db Enemy_ShyguyPink, $B << 4 | $C
0A73A                           	enemy $C, $6, Enemy_ShyguyPink
0A73A 03 C6                     	.db Enemy_ShyguyPink, $C << 4 | $6
0A73C                           
0A73C                           ; Page 6
0A73C                           +	distTo + ; $05 (2 enemies)
0A73C 05                        	.db (+ - $)
0A73D                           	enemy $9, $C, Enemy_ShyguyRed
0A73D 01 9C                     	.db Enemy_ShyguyRed, $9 << 4 | $C
0A73F                           	enemy $E, $5, Enemy_ShyguyPink
0A73F 03 E5                     	.db Enemy_ShyguyPink, $E << 4 | $5
0A741                           
0A741                           ; Page 7
0A741                           +	distTo + ; $05 (2 enemies)
0A741 05                        	.db (+ - $)
0A742                           	enemy $2, $C, Enemy_ShyguyRed
0A742 01 2C                     	.db Enemy_ShyguyRed, $2 << 4 | $C
0A744                           	enemy $4, $C, Enemy_Tweeter
0A744 02 4C                     	.db Enemy_Tweeter, $4 << 4 | $C
0A746                           
0A746                           ; Page 8
0A746                           +	distTo + ; $07 (3 enemies)
0A746 07                        	.db (+ - $)
0A747                           	enemy $1, $C, Enemy_ShyguyRed
0A747 01 1C                     	.db Enemy_ShyguyRed, $1 << 4 | $C
0A749                           	enemy $4, $5, Enemy_ShyguyPink
0A749 03 45                     	.db Enemy_ShyguyPink, $4 << 4 | $5
0A74B                           	enemy $4, $C, Enemy_Tweeter
0A74B 02 4C                     	.db Enemy_Tweeter, $4 << 4 | $C
0A74D                           
0A74D                           ; Page 9
0A74D                           +	distTo + ; $05 (2 enemies)
0A74D 05                        	.db (+ - $)
0A74E                           	enemy $9, $5, Enemy_ShyguyRed
0A74E 01 95                     	.db Enemy_ShyguyRed, $9 << 4 | $5
0A750                           	enemy $D, $1, Enemy_Hoopstar
0A750 14 D1                     	.db Enemy_Hoopstar, $D << 4 | $1
0A752                           
0A752                           ; Page A
0A752                           +	distTo + ; $01 (0 enemies)
0A752 01                        	.db (+ - $)
0A753                           
0A753                           ; End of enemy data
0A753                           +
0A753                           include "src/levels/1/1-1/1-1-area3-enemies.asm"
0A753                           ; Level 1-1, Area 3
0A753                           
0A753                           EnemyData_Level_1_1_Area3:
0A753                           
0A753                           ; Page 0
0A753                           	distTo + ; $03 (1 enemy)
0A753 03                        	.db (+ - $)
0A754                           	enemy $8, $5, Enemy_ShyguyPink
0A754 03 85                     	.db Enemy_ShyguyPink, $8 << 4 | $5
0A756                           
0A756                           ; Page 1
0A756                           +	distTo + ; $01 (0 enemies)
0A756 01                        	.db (+ - $)
0A757                           
0A757                           ; Page 2
0A757                           +	distTo + ; $01 (0 enemies)
0A757 01                        	.db (+ - $)
0A758                           
0A758                           ; Page 3
0A758                           +	distTo + ; $01 (0 enemies)
0A758 01                        	.db (+ - $)
0A759                           
0A759                           ; End of enemy data
0A759                           +
0A759                           include "src/levels/1/1-1/1-1-area4-enemies.asm"
0A759                           ; Level 1-1, Area 4
0A759                           
0A759                           EnemyData_Level_1_1_Area4:
0A759                           
0A759                           ; Page 0
0A759                           	distTo + ; $03 (1 enemy)
0A759 03                        	.db (+ - $)
0A75A                           	enemy $B, $C, Enemy_NinjiJumping
0A75A 0E BC                     	.db Enemy_NinjiJumping, $B << 4 | $C
0A75C                           
0A75C                           ; Page 1
0A75C                           +	distTo + ; $01 (0 enemies)
0A75C 01                        	.db (+ - $)
0A75D                           
0A75D                           ; Page 2
0A75D                           +	distTo + ; $01 (0 enemies)
0A75D 01                        	.db (+ - $)
0A75E                           
0A75E                           ; End of enemy data
0A75E                           +
0A75E                           include "src/levels/1/1-1/1-1-area5-enemies.asm"
0A75E                           ; Level 1-1, Area 5
0A75E                           
0A75E                           EnemyData_Level_1_1_Area5:
0A75E                           
0A75E                           ; Page 0
0A75E                           	distTo + ; $01 (0 enemies)
0A75E 01                        	.db (+ - $)
0A75F                           
0A75F                           ; Page 1
0A75F                           +	distTo + ; $01 (0 enemies)
0A75F 01                        	.db (+ - $)
0A760                           
0A760                           ; Page 2
0A760                           +	distTo + ; $07 (3 enemies)
0A760 07                        	.db (+ - $)
0A761                           	enemy $A, $7, Enemy_Birdo
0A761 1C A7                     	.db Enemy_Birdo, $A << 4 | $7
0A763                           	enemy $A, $8, Enemy_CrystalBall
0A763 44 A8                     	.db Enemy_CrystalBall, $A << 4 | $8
0A765                           	enemy $E, $7, Enemy_HawkmouthLeft
0A765 43 E7                     	.db Enemy_HawkmouthLeft, $E << 4 | $7
0A767                           
0A767                           ; Page 3
0A767                           +	distTo + ; $01 (0 enemies)
0A767 01                        	.db (+ - $)
0A768                           
0A768                           ; Page 4
0A768                           +	distTo + ; $01 (0 enemies)
0A768 01                        	.db (+ - $)
0A769                           
0A769                           ; Page 5
0A769                           +	distTo + ; $01 (0 enemies)
0A769 01                        	.db (+ - $)
0A76A                           
0A76A                           ; End of enemy data
0A76A                           +
0A76A                           
0A76A                           ; World 1-2
0A76A                           include "src/levels/1/1-2/1-2-area0-enemies.asm"
0A76A                           ; Level 1-2, Area 0
0A76A                           
0A76A                           EnemyData_Level_1_2_Area0:
0A76A                           
0A76A                           ; Page 0
0A76A                           	distTo + ; $03 (1 enemy)
0A76A 03                        	.db (+ - $)
0A76B                           	enemy $6, $A, Enemy_HawkmouthRight
0A76B 42 6A                     	.db Enemy_HawkmouthRight, $6 << 4 | $A
0A76D                           
0A76D                           ; Page 1
0A76D                           +	distTo + ; $03 (1 enemy)
0A76D 03                        	.db (+ - $)
0A76E                           	enemy $2, $2, Enemy_Pidgit
0A76E 12 22                     	.db Enemy_Pidgit, $2 << 4 | $2
0A770                           
0A770                           ; Page 2
0A770                           +	distTo + ; $09 (4 enemies)
0A770 09                        	.db (+ - $)
0A771                           	enemy $0, $0, Enemy_BeezoDiving
0A771 0F 00                     	.db Enemy_BeezoDiving, $0 << 4 | $0
0A773                           	enemy $4, $0, Enemy_BeezoDiving
0A773 0F 40                     	.db Enemy_BeezoDiving, $4 << 4 | $0
0A775                           	enemy $9, $0, Enemy_BeezoDiving
0A775 0F 90                     	.db Enemy_BeezoDiving, $9 << 4 | $0
0A777                           	enemy $E, $0, Enemy_BeezoDiving
0A777 0F E0                     	.db Enemy_BeezoDiving, $E << 4 | $0
0A779                           
0A779                           ; Page 3
0A779                           +	distTo + ; $01 (0 enemies)
0A779 01                        	.db (+ - $)
0A77A                           
0A77A                           ; Page 4
0A77A                           +	distTo + ; $05 (2 enemies)
0A77A 05                        	.db (+ - $)
0A77B                           	enemy $3, $C, Enemy_NinjiJumping
0A77B 0E 3C                     	.db Enemy_NinjiJumping, $3 << 4 | $C
0A77D                           	enemy $6, $C, Enemy_NinjiJumping
0A77D 0E 6C                     	.db Enemy_NinjiJumping, $6 << 4 | $C
0A77F                           
0A77F                           ; Page 5
0A77F                           +	distTo + ; $05 (2 enemies)
0A77F 05                        	.db (+ - $)
0A780                           	enemy $5, $3, Enemy_SnifitGray
0A780 06 53                     	.db Enemy_SnifitGray, $5 << 4 | $3
0A782                           	enemy $8, $3, Enemy_NinjiRunning
0A782 0D 83                     	.db Enemy_NinjiRunning, $8 << 4 | $3
0A784                           
0A784                           ; Page 6
0A784                           +	distTo + ; $05 (2 enemies)
0A784 05                        	.db (+ - $)
0A785                           	enemy $B, $6, Enemy_ShyguyRed
0A785 01 B6                     	.db Enemy_ShyguyRed, $B << 4 | $6
0A787                           	enemy $F, $6, Enemy_ShyguyRed
0A787 01 F6                     	.db Enemy_ShyguyRed, $F << 4 | $6
0A789                           
0A789                           ; Page 7
0A789                           +	distTo + ; $01 (0 enemies)
0A789 01                        	.db (+ - $)
0A78A                           
0A78A                           ; End of enemy data
0A78A                           +
0A78A                           include "src/levels/1/1-2/1-2-area1-enemies.asm"
0A78A                           ; Level 1-2, Area 1
0A78A                           
0A78A                           EnemyData_Level_1_2_Area1:
0A78A                           
0A78A                           ; Page 0
0A78A                           	distTo + ; $03 (1 enemy)
0A78A 03                        	.db (+ - $)
0A78B                           	enemy $D, $C, Enemy_ShyguyRed
0A78B 01 DC                     	.db Enemy_ShyguyRed, $D << 4 | $C
0A78D                           
0A78D                           ; Page 1
0A78D                           +	distTo + ; $03 (1 enemy)
0A78D 03                        	.db (+ - $)
0A78E                           	enemy $3, $C, Enemy_SnifitPink
0A78E 07 3C                     	.db Enemy_SnifitPink, $3 << 4 | $C
0A790                           
0A790                           ; Page 2
0A790                           +	distTo + ; $03 (1 enemy)
0A790 03                        	.db (+ - $)
0A791                           	enemy $2, $C, Enemy_SnifitGray
0A791 06 2C                     	.db Enemy_SnifitGray, $2 << 4 | $C
0A793                           
0A793                           ; Page 3
0A793                           +	distTo + ; $05 (2 enemies)
0A793 05                        	.db (+ - $)
0A794                           	enemy $7, $9, Enemy_NinjiRunning
0A794 0D 79                     	.db Enemy_NinjiRunning, $7 << 4 | $9
0A796                           	enemy $8, $9, Enemy_NinjiRunning
0A796 0D 89                     	.db Enemy_NinjiRunning, $8 << 4 | $9
0A798                           
0A798                           ; Page 4
0A798                           +	distTo + ; $01 (0 enemies)
0A798 01                        	.db (+ - $)
0A799                           
0A799                           ; End of enemy data
0A799                           +
0A799                           include "src/levels/1/1-2/1-2-area2-enemies.asm"
0A799                           ; Level 1-2, Area 2
0A799                           
0A799                           EnemyData_Level_1_2_Area2:
0A799                           
0A799                           ; Page 0
0A799                           	distTo + ; $01 (0 enemies)
0A799 01                        	.db (+ - $)
0A79A                           
0A79A                           ; Page 1
0A79A                           +	distTo + ; $05 (2 enemies)
0A79A 05                        	.db (+ - $)
0A79B                           	enemy $A, $7, Enemy_Birdo
0A79B 1C A7                     	.db Enemy_Birdo, $A << 4 | $7
0A79D                           	enemy $A, $8, Enemy_CrystalBall
0A79D 44 A8                     	.db Enemy_CrystalBall, $A << 4 | $8
0A79F                           
0A79F                           ; Page 2
0A79F                           +	distTo + ; $03 (1 enemy)
0A79F 03                        	.db (+ - $)
0A7A0                           	enemy $3, $8, Enemy_HawkmouthLeft
0A7A0 43 38                     	.db Enemy_HawkmouthLeft, $3 << 4 | $8
0A7A2                           
0A7A2                           ; Page 3
0A7A2                           +	distTo + ; $01 (0 enemies)
0A7A2 01                        	.db (+ - $)
0A7A3                           
0A7A3                           ; End of enemy data
0A7A3                           +
0A7A3                           include "src/levels/1/1-2/1-2-area3-enemies.asm"
0A7A3                           ; Level 1-2, Area 3
0A7A3                           
0A7A3                           EnemyData_Level_1_2_Area3:
0A7A3                           
0A7A3                           ; Page 0
0A7A3                           	distTo + ; $05 (2 enemies)
0A7A3 05                        	.db (+ - $)
0A7A4                           	enemy $7, $9, Enemy_Key
0A7A4 3D 79                     	.db Enemy_Key, $7 << 4 | $9
0A7A6                           	enemy $7, $7, Enemy_Phanto
0A7A6 17 77                     	.db Enemy_Phanto, $7 << 4 | $7
0A7A8                           
0A7A8                           ; Page 1
0A7A8                           +	distTo + ; $01 (0 enemies)
0A7A8 01                        	.db (+ - $)
0A7A9                           
0A7A9                           ; End of enemy data
0A7A9                           +
0A7A9                           include "src/levels/1/1-2/1-2-area4-enemies.asm"
0A7A9                           ; Level 1-2, Area 4
0A7A9                           
0A7A9                           EnemyData_Level_1_2_Area4:
0A7A9                           
0A7A9                           ; Page 0
0A7A9                           	distTo + ; $01 (0 enemies)
0A7A9 01                        	.db (+ - $)
0A7AA                           
0A7AA                           ; Page 1
0A7AA                           +	distTo + ; $01 (0 enemies)
0A7AA 01                        	.db (+ - $)
0A7AB                           
0A7AB                           ; Page 2
0A7AB                           +	distTo + ; $01 (0 enemies)
0A7AB 01                        	.db (+ - $)
0A7AC                           
0A7AC                           ; Page 3
0A7AC                           +	distTo + ; $01 (0 enemies)
0A7AC 01                        	.db (+ - $)
0A7AD                           
0A7AD                           ; Page 4
0A7AD                           +	distTo + ; $01 (0 enemies)
0A7AD 01                        	.db (+ - $)
0A7AE                           
0A7AE                           ; Page 5
0A7AE                           +	distTo + ; $01 (0 enemies)
0A7AE 01                        	.db (+ - $)
0A7AF                           
0A7AF                           ; Page 6
0A7AF                           +	distTo + ; $01 (0 enemies)
0A7AF 01                        	.db (+ - $)
0A7B0                           
0A7B0                           ; Page 7
0A7B0                           +	distTo + ; $01 (0 enemies)
0A7B0 01                        	.db (+ - $)
0A7B1                           
0A7B1                           ; Page 8
0A7B1                           +	distTo + ; $01 (0 enemies)
0A7B1 01                        	.db (+ - $)
0A7B2                           
0A7B2                           ; Page 9
0A7B2                           +	distTo + ; $01 (0 enemies)
0A7B2 01                        	.db (+ - $)
0A7B3                           
0A7B3                           ; Page A
0A7B3                           +	distTo + ; $03 (1 enemy)
0A7B3 03                        	.db (+ - $)
0A7B4                           	enemy $2, $8, Enemy_Tweeter
0A7B4 02 28                     	.db Enemy_Tweeter, $2 << 4 | $8
0A7B6                           
0A7B6                           ; End of enemy data
0A7B6                           +
0A7B6                           include "src/levels/1/1-2/1-2-area5-enemies.asm"
0A7B6                           ; Level 1-2, Area 5
0A7B6                           
0A7B6                           EnemyData_Level_1_2_Area5:
0A7B6                           
0A7B6                           ; Page 0
0A7B6                           	distTo + ; $01 (0 enemies)
0A7B6 01                        	.db (+ - $)
0A7B7                           
0A7B7                           ; Page 1
0A7B7                           +	distTo + ; $01 (0 enemies)
0A7B7 01                        	.db (+ - $)
0A7B8                           
0A7B8                           ; Page 2
0A7B8                           +	distTo + ; $01 (0 enemies)
0A7B8 01                        	.db (+ - $)
0A7B9                           
0A7B9                           ; End of enemy data
0A7B9                           +
0A7B9                           
0A7B9                           ; World 1-3
0A7B9                           include "src/levels/1/1-3/1-3-area0-enemies.asm"
0A7B9                           ; Level 1-3, Area 0
0A7B9                           
0A7B9                           EnemyData_Level_1_3_Area0:
0A7B9                           
0A7B9                           ; Page 0
0A7B9                           	distTo + ; $03 (1 enemy)
0A7B9 03                        	.db (+ - $)
0A7BA                           	enemy $3, $8, Enemy_HawkmouthRight
0A7BA 42 38                     	.db Enemy_HawkmouthRight, $3 << 4 | $8
0A7BC                           
0A7BC                           ; Page 1
0A7BC                           +	distTo + ; $05 (2 enemies)
0A7BC 05                        	.db (+ - $)
0A7BD                           	enemy $9, $4, Enemy_SnifitPink
0A7BD 07 94                     	.db Enemy_SnifitPink, $9 << 4 | $4
0A7BF                           	enemy $B, $4, Enemy_SnifitPink
0A7BF 07 B4                     	.db Enemy_SnifitPink, $B << 4 | $4
0A7C1                           
0A7C1                           ; Page 2
0A7C1                           +	distTo + ; $03 (1 enemy)
0A7C1 03                        	.db (+ - $)
0A7C2                           	enemy $7, $4, Enemy_ShyguyRed
0A7C2 01 74                     	.db Enemy_ShyguyRed, $7 << 4 | $4
0A7C4                           
0A7C4                           ; Page 3
0A7C4                           +	distTo + ; $05 (2 enemies)
0A7C4 05                        	.db (+ - $)
0A7C5                           	enemy $3, $4, Enemy_Trouter
0A7C5 13 34                     	.db Enemy_Trouter, $3 << 4 | $4
0A7C7                           	enemy $A, $4, Enemy_Trouter
0A7C7 13 A4                     	.db Enemy_Trouter, $A << 4 | $4
0A7C9                           
0A7C9                           ; Page 4
0A7C9                           +	distTo + ; $07 (3 enemies)
0A7C9 07                        	.db (+ - $)
0A7CA                           	enemy $0, $2, Enemy_Trouter
0A7CA 13 02                     	.db Enemy_Trouter, $0 << 4 | $2
0A7CC                           	enemy $6, $2, Enemy_Trouter
0A7CC 13 62                     	.db Enemy_Trouter, $6 << 4 | $2
0A7CE                           	enemy $E, $6, Enemy_FallingLogs
0A7CE 3B E6                     	.db Enemy_FallingLogs, $E << 4 | $6
0A7D0                           
0A7D0                           ; Page 5
0A7D0                           +	distTo + ; $05 (2 enemies)
0A7D0 05                        	.db (+ - $)
0A7D1                           	enemy $2, $6, Enemy_FallingLogs
0A7D1 3B 26                     	.db Enemy_FallingLogs, $2 << 4 | $6
0A7D3                           	enemy $6, $6, Enemy_FallingLogs
0A7D3 3B 66                     	.db Enemy_FallingLogs, $6 << 4 | $6
0A7D5                           
0A7D5                           ; Page 6
0A7D5                           +	distTo + ; $09 (4 enemies)
0A7D5 09                        	.db (+ - $)
0A7D6                           	enemy $4, $A, Enemy_Trouter
0A7D6 13 4A                     	.db Enemy_Trouter, $4 << 4 | $A
0A7D8                           	enemy $5, $C, Enemy_FallingLogs
0A7D8 3B 5C                     	.db Enemy_FallingLogs, $5 << 4 | $C
0A7DA                           	enemy $8, $A, Enemy_Trouter
0A7DA 13 8A                     	.db Enemy_Trouter, $8 << 4 | $A
0A7DC                           	enemy $9, $C, Enemy_FallingLogs
0A7DC 3B 9C                     	.db Enemy_FallingLogs, $9 << 4 | $C
0A7DE                           
0A7DE                           ; Page 7
0A7DE                           +	distTo + ; $05 (2 enemies)
0A7DE 05                        	.db (+ - $)
0A7DF                           	enemy $2, $A, Enemy_ShyguyPink
0A7DF 03 2A                     	.db Enemy_ShyguyPink, $2 << 4 | $A
0A7E1                           	enemy $7, $A, Enemy_ShyguyPink
0A7E1 03 7A                     	.db Enemy_ShyguyPink, $7 << 4 | $A
0A7E3                           
0A7E3                           ; Page 8
0A7E3                           +	distTo + ; $09 (4 enemies)
0A7E3 09                        	.db (+ - $)
0A7E4                           	enemy $2, $9, Enemy_NinjiRunning
0A7E4 0D 29                     	.db Enemy_NinjiRunning, $2 << 4 | $9
0A7E6                           	enemy $4, $9, Enemy_NinjiRunning
0A7E6 0D 49                     	.db Enemy_NinjiRunning, $4 << 4 | $9
0A7E8                           	enemy $7, $A, Enemy_Tweeter
0A7E8 02 7A                     	.db Enemy_Tweeter, $7 << 4 | $A
0A7EA                           	enemy $9, $A, Enemy_Tweeter
0A7EA 02 9A                     	.db Enemy_Tweeter, $9 << 4 | $A
0A7EC                           
0A7EC                           ; Page 9
0A7EC                           +	distTo + ; $01 (0 enemies)
0A7EC 01                        	.db (+ - $)
0A7ED                           
0A7ED                           ; Page A
0A7ED                           +	distTo + ; $01 (0 enemies)
0A7ED 01                        	.db (+ - $)
0A7EE                           
0A7EE                           ; End of enemy data
0A7EE                           +
0A7EE                           include "src/levels/1/1-3/1-3-area1-enemies.asm"
0A7EE                           ; Level 1-3, Area 1
0A7EE                           
0A7EE                           EnemyData_Level_1_3_Area1:
0A7EE                           
0A7EE                           ; Page 0
0A7EE                           	distTo + ; $07 (3 enemies)
0A7EE 07                        	.db (+ - $)
0A7EF                           	enemy $8, $3, Enemy_Phanto
0A7EF 17 83                     	.db Enemy_Phanto, $8 << 4 | $3
0A7F1                           	enemy $8, $8, Enemy_Key
0A7F1 3D 88                     	.db Enemy_Key, $8 << 4 | $8
0A7F3                           	enemy $8, $A, Enemy_Spark1
0A7F3 2E 8A                     	.db Enemy_Spark1, $8 << 4 | $A
0A7F5                           
0A7F5                           ; Page 1
0A7F5                           +	distTo + ; $01 (0 enemies)
0A7F5 01                        	.db (+ - $)
0A7F6                           
0A7F6                           ; End of enemy data
0A7F6                           +
0A7F6                           include "src/levels/1/1-3/1-3-area2-enemies.asm"
0A7F6                           ; Level 1-3, Area 2
0A7F6                           
0A7F6                           EnemyData_Level_1_3_Area2:
0A7F6                           
0A7F6                           ; Page 0
0A7F6                           	distTo + ; $07 (3 enemies)
0A7F6 07                        	.db (+ - $)
0A7F7                           	enemy $4, $B, Enemy_Spark1
0A7F7 2E 4B                     	.db Enemy_Spark1, $4 << 4 | $B
0A7F9                           	enemy $7, $C, Enemy_Spark3
0A7F9 30 7C                     	.db Enemy_Spark3, $7 << 4 | $C
0A7FB                           	enemy $C, $9, Enemy_Spark3
0A7FB 30 C9                     	.db Enemy_Spark3, $C << 4 | $9
0A7FD                           
0A7FD                           ; Page 1
0A7FD                           +	distTo + ; $01 (0 enemies)
0A7FD 01                        	.db (+ - $)
0A7FE                           
0A7FE                           ; Page 2
0A7FE                           +	distTo + ; $07 (3 enemies)
0A7FE 07                        	.db (+ - $)
0A7FF                           	enemy $6, $1, Enemy_Spark3
0A7FF 30 61                     	.db Enemy_Spark3, $6 << 4 | $1
0A801                           	enemy $5, $A, Enemy_Spark4
0A801 31 5A                     	.db Enemy_Spark4, $5 << 4 | $A
0A803                           	enemy $B, $A, Enemy_ShyguyPink
0A803 03 BA                     	.db Enemy_ShyguyPink, $B << 4 | $A
0A805                           
0A805                           ; Page 3
0A805                           +	distTo + ; $03 (1 enemy)
0A805 03                        	.db (+ - $)
0A806                           	enemy $D, $B, Enemy_ShyguyRed
0A806 01 DB                     	.db Enemy_ShyguyRed, $D << 4 | $B
0A808                           
0A808                           ; Page 4
0A808                           +	distTo + ; $03 (1 enemy)
0A808 03                        	.db (+ - $)
0A809                           	enemy $4, $A, Enemy_SnifitGray
0A809 06 4A                     	.db Enemy_SnifitGray, $4 << 4 | $A
0A80B                           
0A80B                           ; Page 5
0A80B                           +	distTo + ; $03 (1 enemy)
0A80B 03                        	.db (+ - $)
0A80C                           	enemy $3, $5, Enemy_ShyguyPink
0A80C 03 35                     	.db Enemy_ShyguyPink, $3 << 4 | $5
0A80E                           
0A80E                           ; Page 6
0A80E                           +	distTo + ; $01 (0 enemies)
0A80E 01                        	.db (+ - $)
0A80F                           
0A80F                           ; Page 7
0A80F                           +	distTo + ; $01 (0 enemies)
0A80F 01                        	.db (+ - $)
0A810                           
0A810                           ; End of enemy data
0A810                           +
0A810                           include "src/levels/1/1-3/1-3-area3-enemies.asm"
0A810                           ; Level 1-3, Area 3
0A810                           
0A810                           EnemyData_Level_1_3_Area3:
0A810                           
0A810                           ; Page 0
0A810                           	distTo + ; $03 (1 enemy)
0A810 03                        	.db (+ - $)
0A811                           	enemy $C, $9, Enemy_Spark4
0A811 31 C9                     	.db Enemy_Spark4, $C << 4 | $9
0A813                           
0A813                           ; Page 1
0A813                           +	distTo + ; $03 (1 enemy)
0A813 03                        	.db (+ - $)
0A814                           	enemy $C, $6, Enemy_Spark2
0A814 2F C6                     	.db Enemy_Spark2, $C << 4 | $6
0A816                           
0A816                           ; Page 2
0A816                           +	distTo + ; $09 (4 enemies)
0A816 09                        	.db (+ - $)
0A817                           	enemy $5, $6, Enemy_Tweeter
0A817 02 56                     	.db Enemy_Tweeter, $5 << 4 | $6
0A819                           	enemy $D, $4, Enemy_SnifitPink
0A819 07 D4                     	.db Enemy_SnifitPink, $D << 4 | $4
0A81B                           	enemy $D, $7, Enemy_SnifitPink
0A81B 07 D7                     	.db Enemy_SnifitPink, $D << 4 | $7
0A81D                           	enemy $D, $A, Enemy_SnifitPink
0A81D 07 DA                     	.db Enemy_SnifitPink, $D << 4 | $A
0A81F                           
0A81F                           ; Page 3
0A81F                           +	distTo + ; $05 (2 enemies)
0A81F 05                        	.db (+ - $)
0A820                           	enemy $A, $7, Enemy_Spark3
0A820 30 A7                     	.db Enemy_Spark3, $A << 4 | $7
0A822                           	enemy $F, $7, Enemy_Spark3
0A822 30 F7                     	.db Enemy_Spark3, $F << 4 | $7
0A824                           
0A824                           ; Page 4
0A824                           +	distTo + ; $05 (2 enemies)
0A824 05                        	.db (+ - $)
0A825                           	enemy $3, $A, Enemy_Spark1
0A825 2E 3A                     	.db Enemy_Spark1, $3 << 4 | $A
0A827                           	enemy $6, $A, Enemy_Spark1
0A827 2E 6A                     	.db Enemy_Spark1, $6 << 4 | $A
0A829                           
0A829                           ; Page 5
0A829                           +	distTo + ; $09 (4 enemies)
0A829 09                        	.db (+ - $)
0A82A                           	enemy $0, $9, Enemy_NinjiRunning
0A82A 0D 09                     	.db Enemy_NinjiRunning, $0 << 4 | $9
0A82C                           	enemy $2, $9, Enemy_NinjiRunning
0A82C 0D 29                     	.db Enemy_NinjiRunning, $2 << 4 | $9
0A82E                           	enemy $A, $8, Enemy_CrystalBall
0A82E 44 A8                     	.db Enemy_CrystalBall, $A << 4 | $8
0A830                           	enemy $D, $7, Enemy_HawkmouthLeft
0A830 43 D7                     	.db Enemy_HawkmouthLeft, $D << 4 | $7
0A832                           
0A832                           ; Page 6
0A832                           +	distTo + ; $01 (0 enemies)
0A832 01                        	.db (+ - $)
0A833                           
0A833                           ; End of enemy data
0A833                           +
0A833                           include "src/levels/1/1-3/1-3-area4-enemies.asm"
0A833                           ; Level 1-3, Area 4
0A833                           
0A833                           EnemyData_Level_1_3_Area4:
0A833                           
0A833                           ; Page 0
0A833                           	distTo + ; $03 (1 enemy)
0A833 03                        	.db (+ - $)
0A834                           	enemy $F, $6, Enemy_Spark3
0A834 30 F6                     	.db Enemy_Spark3, $F << 4 | $6
0A836                           
0A836                           ; Page 1
0A836                           +	distTo + ; $03 (1 enemy)
0A836 03                        	.db (+ - $)
0A837                           	enemy $D, $7, Enemy_BossMouser
0A837 5D D7                     	.db Enemy_BossMouser, $D << 4 | $7
0A839                           
0A839                           ; Page 2
0A839                           +	distTo + ; $01 (0 enemies)
0A839 01                        	.db (+ - $)
0A83A                           
0A83A                           ; End of enemy data
0A83A                           +
0A83A                           ; -------------------------------
0A83A                           
0A83A                           
0A83A                           ; -------------------------------
0A83A                           ; World 2
0A83A                           
0A83A                           ; World 2-1
0A83A                           include "src/levels/2/2-1/2-1-area0-enemies.asm"
0A83A                           ; Level 2-1, Area 0
0A83A                           
0A83A                           EnemyData_Level_2_1_Area0:
0A83A                           
0A83A                           ; Page 0
0A83A                           	distTo + ; $01 (0 enemies)
0A83A 01                        	.db (+ - $)
0A83B                           
0A83B                           ; Page 1
0A83B                           +	distTo + ; $03 (1 enemy)
0A83B 03                        	.db (+ - $)
0A83C                           	enemy $F, $A, Enemy_CobratSand
0A83C 19 FA                     	.db Enemy_CobratSand, $F << 4 | $A
0A83E                           
0A83E                           ; Page 2
0A83E                           +	distTo + ; $03 (1 enemy)
0A83E 03                        	.db (+ - $)
0A83F                           	enemy $A, $7, Enemy_CobratJar
0A83F 18 A7                     	.db Enemy_CobratJar, $A << 4 | $7
0A841                           
0A841                           ; Page 3
0A841                           +	distTo + ; $05 (2 enemies)
0A841 05                        	.db (+ - $)
0A842                           	enemy $6, $9, Enemy_ShyguyRed
0A842 01 69                     	.db Enemy_ShyguyRed, $6 << 4 | $9
0A844                           	enemy $9, $9, Enemy_ShyguyPink
0A844 03 99                     	.db Enemy_ShyguyPink, $9 << 4 | $9
0A846                           
0A846                           ; Page 4
0A846                           +	distTo + ; $03 (1 enemy)
0A846 03                        	.db (+ - $)
0A847                           	enemy $4, $7, Enemy_CobratJar
0A847 18 47                     	.db Enemy_CobratJar, $4 << 4 | $7
0A849                           
0A849                           ; Page 5
0A849                           +	distTo + ; $03 (1 enemy)
0A849 03                        	.db (+ - $)
0A84A                           	enemy $F, $8, Enemy_ShyguyPink
0A84A 03 F8                     	.db Enemy_ShyguyPink, $F << 4 | $8
0A84C                           
0A84C                           ; Page 6
0A84C                           +	distTo + ; $01 (0 enemies)
0A84C 01                        	.db (+ - $)
0A84D                           
0A84D                           ; Page 7
0A84D                           +	distTo + ; $07 (3 enemies)
0A84D 07                        	.db (+ - $)
0A84E                           	enemy $2, $4, Enemy_PanserStationaryFiresAngled
0A84E 23 24                     	.db Enemy_PanserStationaryFiresAngled, $2 << 4 | $4
0A850                           	enemy $2, $7, Enemy_ShyguyRed
0A850 01 27                     	.db Enemy_ShyguyRed, $2 << 4 | $7
0A852                           	enemy $4, $9, Enemy_ShyguyRed
0A852 01 49                     	.db Enemy_ShyguyRed, $4 << 4 | $9
0A854                           
0A854                           ; Page 8
0A854                           +	distTo + ; $03 (1 enemy)
0A854 03                        	.db (+ - $)
0A855                           	enemy $4, $A, Enemy_CobratSand
0A855 19 4A                     	.db Enemy_CobratSand, $4 << 4 | $A
0A857                           
0A857                           ; Page 9
0A857                           +	distTo + ; $01 (0 enemies)
0A857 01                        	.db (+ - $)
0A858                           
0A858                           ; Page A
0A858                           +	distTo + ; $01 (0 enemies)
0A858 01                        	.db (+ - $)
0A859                           
0A859                           ; End of enemy data
0A859                           +
0A859                           include "src/levels/2/2-1/2-1-area1-enemies.asm"
0A859                           ; Level 2-1, Area 1
0A859                           
0A859                           EnemyData_Level_2_1_Area1:
0A859                           
0A859                           ; Page 0
0A859                           	distTo + ; $05 (2 enemies)
0A859 05                        	.db (+ - $)
0A85A                           	enemy $4, $9, Enemy_ShyguyRed
0A85A 01 49                     	.db Enemy_ShyguyRed, $4 << 4 | $9
0A85C                           	enemy $6, $D, Enemy_ShyguyRed
0A85C 01 6D                     	.db Enemy_ShyguyRed, $6 << 4 | $D
0A85E                           
0A85E                           ; Page 1
0A85E                           +	distTo + ; $03 (1 enemy)
0A85E 03                        	.db (+ - $)
0A85F                           	enemy $D, $3, Enemy_ShyguyRed
0A85F 01 D3                     	.db Enemy_ShyguyRed, $D << 4 | $3
0A861                           
0A861                           ; Page 2
0A861                           +	distTo + ; $07 (3 enemies)
0A861 07                        	.db (+ - $)
0A862                           	enemy $4, $0, Enemy_ShyguyRed
0A862 01 40                     	.db Enemy_ShyguyRed, $4 << 4 | $0
0A864                           	enemy $1, $6, Enemy_SnifitGray
0A864 06 16                     	.db Enemy_SnifitGray, $1 << 4 | $6
0A866                           	enemy $C, $8, Enemy_ShyguyRed
0A866 01 C8                     	.db Enemy_ShyguyRed, $C << 4 | $8
0A868                           
0A868                           ; Page 3
0A868                           +	distTo + ; $01 (0 enemies)
0A868 01                        	.db (+ - $)
0A869                           
0A869                           ; Page 4
0A869                           +	distTo + ; $01 (0 enemies)
0A869 01                        	.db (+ - $)
0A86A                           
0A86A                           ; End of enemy data
0A86A                           +
0A86A                           include "src/levels/2/2-1/2-1-area2-enemies.asm"
0A86A                           ; Level 2-1, Area 2
0A86A                           
0A86A                           EnemyData_Level_2_1_Area2:
0A86A                           
0A86A                           ; Page 0
0A86A                           	distTo + ; $01 (0 enemies)
0A86A 01                        	.db (+ - $)
0A86B                           
0A86B                           ; Page 1
0A86B                           +	distTo + ; $05 (2 enemies)
0A86B 05                        	.db (+ - $)
0A86C                           	enemy $A, $8, Enemy_Birdo
0A86C 1C A8                     	.db Enemy_Birdo, $A << 4 | $8
0A86E                           	enemy $A, $9, Enemy_CrystalBall
0A86E 44 A9                     	.db Enemy_CrystalBall, $A << 4 | $9
0A870                           
0A870                           ; Page 2
0A870                           +	distTo + ; $03 (1 enemy)
0A870 03                        	.db (+ - $)
0A871                           	enemy $D, $3, Enemy_HawkmouthLeft
0A871 43 D3                     	.db Enemy_HawkmouthLeft, $D << 4 | $3
0A873                           
0A873                           ; Page 3
0A873                           +	distTo + ; $01 (0 enemies)
0A873 01                        	.db (+ - $)
0A874                           
0A874                           ; End of enemy data
0A874                           +
0A874                           include "src/levels/2/2-1/2-1-area4-enemies.asm"
0A874                           ; Level 2-1, Area 4
0A874                           
0A874                           EnemyData_Level_2_1_Area4:
0A874                           
0A874                           ; Page 0
0A874                           	distTo + ; $01 (0 enemies)
0A874 01                        	.db (+ - $)
0A875                           
0A875                           ; Page 1
0A875                           +	distTo + ; $01 (0 enemies)
0A875 01                        	.db (+ - $)
0A876                           
0A876                           ; Page 2
0A876                           +	distTo + ; $01 (0 enemies)
0A876 01                        	.db (+ - $)
0A877                           
0A877                           ; Page 3
0A877                           +	distTo + ; $01 (0 enemies)
0A877 01                        	.db (+ - $)
0A878                           
0A878                           ; Page 4
0A878                           +	distTo + ; $01 (0 enemies)
0A878 01                        	.db (+ - $)
0A879                           
0A879                           ; Page 5
0A879                           +	distTo + ; $01 (0 enemies)
0A879 01                        	.db (+ - $)
0A87A                           
0A87A                           ; Page 6
0A87A                           +	distTo + ; $01 (0 enemies)
0A87A 01                        	.db (+ - $)
0A87B                           
0A87B                           ; Page 7
0A87B                           +	distTo + ; $01 (0 enemies)
0A87B 01                        	.db (+ - $)
0A87C                           
0A87C                           ; Page 8
0A87C                           +	distTo + ; $01 (0 enemies)
0A87C 01                        	.db (+ - $)
0A87D                           
0A87D                           ; Page 9
0A87D                           +	distTo + ; $01 (0 enemies)
0A87D 01                        	.db (+ - $)
0A87E                           
0A87E                           ; Page A
0A87E                           +	distTo + ; $03 (1 enemy)
0A87E 03                        	.db (+ - $)
0A87F                           	enemy $6, $C, Enemy_SnifitGray
0A87F 06 6C                     	.db Enemy_SnifitGray, $6 << 4 | $C
0A881                           
0A881                           ; End of enemy data
0A881                           +
0A881                           
0A881                           ; World 2-2
0A881                           include "src/levels/2/2-2/2-2-area0-enemies.asm"
0A881                           ; Level 2-2, Area 0
0A881                           
0A881                           EnemyData_Level_2_2_Area0:
0A881                           
0A881                           ; Page 0
0A881                           	distTo + ; $03 (1 enemy)
0A881 03                        	.db (+ - $)
0A882                           	enemy $5, $A, Enemy_HawkmouthRight
0A882 42 5A                     	.db Enemy_HawkmouthRight, $5 << 4 | $A
0A884                           
0A884                           ; Page 1
0A884                           +	distTo + ; $01 (0 enemies)
0A884 01                        	.db (+ - $)
0A885                           
0A885                           ; Page 2
0A885                           +	distTo + ; $01 (0 enemies)
0A885 01                        	.db (+ - $)
0A886                           
0A886                           ; Page 3
0A886                           +	distTo + ; $01 (0 enemies)
0A886 01                        	.db (+ - $)
0A887                           
0A887                           ; Page 4
0A887                           +	distTo + ; $01 (0 enemies)
0A887 01                        	.db (+ - $)
0A888                           
0A888                           ; Page 5
0A888                           +	distTo + ; $01 (0 enemies)
0A888 01                        	.db (+ - $)
0A889                           
0A889                           ; Page 6
0A889                           +	distTo + ; $01 (0 enemies)
0A889 01                        	.db (+ - $)
0A88A                           
0A88A                           ; Page 7
0A88A                           +	distTo + ; $01 (0 enemies)
0A88A 01                        	.db (+ - $)
0A88B                           
0A88B                           ; Page 8
0A88B                           +	distTo + ; $01 (0 enemies)
0A88B 01                        	.db (+ - $)
0A88C                           
0A88C                           ; End of enemy data
0A88C                           +
0A88C                           include "src/levels/2/2-2/2-2-area1-enemies.asm"
0A88C                           ; Level 2-2, Area 1
0A88C                           
0A88C                           EnemyData_Level_2_2_Area1:
0A88C                           
0A88C                           ; Page 0
0A88C                           	distTo + ; $01 (0 enemies)
0A88C 01                        	.db (+ - $)
0A88D                           
0A88D                           ; Page 1
0A88D                           +	distTo + ; $03 (1 enemy)
0A88D 03                        	.db (+ - $)
0A88E                           	enemy $8, $D, Enemy_CobratSand
0A88E 19 8D                     	.db Enemy_CobratSand, $8 << 4 | $D
0A890                           
0A890                           ; Page 2
0A890                           +	distTo + ; $05 (2 enemies)
0A890 05                        	.db (+ - $)
0A891                           	enemy $5, $0, Enemy_BeezoDiving
0A891 0F 50                     	.db Enemy_BeezoDiving, $5 << 4 | $0
0A893                           	enemy $F, $A, Enemy_CobratJar
0A893 18 FA                     	.db Enemy_CobratJar, $F << 4 | $A
0A895                           
0A895                           ; Page 3
0A895                           +	distTo + ; $03 (1 enemy)
0A895 03                        	.db (+ - $)
0A896                           	enemy $9, $9, Enemy_ShyguyRed
0A896 01 99                     	.db Enemy_ShyguyRed, $9 << 4 | $9
0A898                           
0A898                           ; Page 4
0A898                           +	distTo + ; $05 (2 enemies)
0A898 05                        	.db (+ - $)
0A899                           	enemy $0, $A, Enemy_CobratJar
0A899 18 0A                     	.db Enemy_CobratJar, $0 << 4 | $A
0A89B                           	enemy $3, $7, Enemy_CobratJar
0A89B 18 37                     	.db Enemy_CobratJar, $3 << 4 | $7
0A89D                           
0A89D                           ; Page 5
0A89D                           +	distTo + ; $07 (3 enemies)
0A89D 07                        	.db (+ - $)
0A89E                           	enemy $1, $0, Enemy_BeezoDiving
0A89E 0F 10                     	.db Enemy_BeezoDiving, $1 << 4 | $0
0A8A0                           	enemy $1, $5, Enemy_CobratJar
0A8A0 18 15                     	.db Enemy_CobratJar, $1 << 4 | $5
0A8A2                           	enemy $9, $7, Enemy_FallingLogs
0A8A2 3B 97                     	.db Enemy_FallingLogs, $9 << 4 | $7
0A8A4                           
0A8A4                           ; Page 6
0A8A4                           +	distTo + ; $07 (3 enemies)
0A8A4 07                        	.db (+ - $)
0A8A5                           	enemy $5, $8, Enemy_CobratJar
0A8A5 18 58                     	.db Enemy_CobratJar, $5 << 4 | $8
0A8A7                           	enemy $A, $8, Enemy_CobratJar
0A8A7 18 A8                     	.db Enemy_CobratJar, $A << 4 | $8
0A8A9                           	enemy $E, $7, Enemy_CobratJar
0A8A9 18 E7                     	.db Enemy_CobratJar, $E << 4 | $7
0A8AB                           
0A8AB                           ; Page 7
0A8AB                           +	distTo + ; $09 (4 enemies)
0A8AB 09                        	.db (+ - $)
0A8AC                           	enemy $2, $8, Enemy_CobratJar
0A8AC 18 28                     	.db Enemy_CobratJar, $2 << 4 | $8
0A8AE                           	enemy $5, $7, Enemy_CobratJar
0A8AE 18 57                     	.db Enemy_CobratJar, $5 << 4 | $7
0A8B0                           	enemy $8, $6, Enemy_Pokey
0A8B0 1A 86                     	.db Enemy_Pokey, $8 << 4 | $6
0A8B2                           	enemy $9, $7, Enemy_CobratJar
0A8B2 18 97                     	.db Enemy_CobratJar, $9 << 4 | $7
0A8B4                           
0A8B4                           ; Page 8
0A8B4                           +	distTo + ; $03 (1 enemy)
0A8B4 03                        	.db (+ - $)
0A8B5                           	enemy $B, $5, Enemy_PanserStationaryFiresAngled
0A8B5 23 B5                     	.db Enemy_PanserStationaryFiresAngled, $B << 4 | $5
0A8B7                           
0A8B7                           ; Page 9
0A8B7                           +	distTo + ; $03 (1 enemy)
0A8B7 03                        	.db (+ - $)
0A8B8                           	enemy $0, $5, Enemy_PanserStationaryFiresAngled
0A8B8 23 05                     	.db Enemy_PanserStationaryFiresAngled, $0 << 4 | $5
0A8BA                           
0A8BA                           ; Page A
0A8BA                           +	distTo + ; $01 (0 enemies)
0A8BA 01                        	.db (+ - $)
0A8BB                           
0A8BB                           ; End of enemy data
0A8BB                           +
0A8BB                           include "src/levels/2/2-2/2-2-area2-enemies.asm"
0A8BB                           ; Level 2-2, Area 2
0A8BB                           
0A8BB                           EnemyData_Level_2_2_Area2:
0A8BB                           
0A8BB                           ; ??? This area only has 3 pages, so this should stop here
0A8BB                           ; But for some reason it continues for several more pages
0A8BB                           
0A8BB                           ; Page 0
0A8BB                           	distTo + ; $07 (3 enemies)
0A8BB 07                        	.db (+ - $)
0A8BC                           	enemy $B, $8, Enemy_ShyguyPink
0A8BC 03 B8                     	.db Enemy_ShyguyPink, $B << 4 | $8
0A8BE                           	enemy $F, $8, Enemy_ShyguyPink
0A8BE 03 F8                     	.db Enemy_ShyguyPink, $F << 4 | $8
0A8C0                           	enemy $F, $B, Enemy_ShyguyPink
0A8C0 03 FB                     	.db Enemy_ShyguyPink, $F << 4 | $B
0A8C2                           
0A8C2                           ; Page 1
0A8C2                           +	distTo + ; $01 (0 enemies)
0A8C2 01                        	.db (+ - $)
0A8C3                           
0A8C3                           ; Page 2
0A8C3                           +	distTo + ; $01 (0 enemies)
0A8C3 01                        	.db (+ - $)
0A8C4                           
0A8C4                           ; Page 3
0A8C4                           +	distTo + ; $01 (0 enemies)
0A8C4 01                        	.db (+ - $)
0A8C5                           
0A8C5                           ; Page 4
0A8C5                           +	distTo + ; $01 (0 enemies)
0A8C5 01                        	.db (+ - $)
0A8C6                           
0A8C6                           ; Page 5
0A8C6                           +	distTo + ; $01 (0 enemies)
0A8C6 01                        	.db (+ - $)
0A8C7                           
0A8C7                           ; Page 6
0A8C7                           +	distTo + ; $01 (0 enemies)
0A8C7 01                        	.db (+ - $)
0A8C8                           
0A8C8                           ; Page 7
0A8C8                           +	distTo + ; $01 (0 enemies)
0A8C8 01                        	.db (+ - $)
0A8C9                           
0A8C9                           ; Page 8
0A8C9                           +	distTo + ; $01 (0 enemies)
0A8C9 01                        	.db (+ - $)
0A8CA                           
0A8CA                           ; End of enemy data
0A8CA                           +
0A8CA                           include "src/levels/2/2-2/2-2-area3-enemies.asm"
0A8CA                           ; Level 2-2, Area 3
0A8CA                           
0A8CA                           EnemyData_Level_2_2_Area3:
0A8CA                           
0A8CA                           ; Page 0
0A8CA                           	distTo + ; $03 (1 enemy)
0A8CA 03                        	.db (+ - $)
0A8CB                           	enemy $8, $A, Enemy_ShyguyRed
0A8CB 01 8A                     	.db Enemy_ShyguyRed, $8 << 4 | $A
0A8CD                           
0A8CD                           ; Page 1
0A8CD                           +	distTo + ; $05 (2 enemies)
0A8CD 05                        	.db (+ - $)
0A8CE                           	enemy $C, $2, Enemy_ShyguyRed
0A8CE 01 C2                     	.db Enemy_ShyguyRed, $C << 4 | $2
0A8D0                           	enemy $6, $7, Enemy_ShyguyRed
0A8D0 01 67                     	.db Enemy_ShyguyRed, $6 << 4 | $7
0A8D2                           
0A8D2                           ; Page 2
0A8D2                           +	distTo + ; $07 (3 enemies)
0A8D2 07                        	.db (+ - $)
0A8D3                           	enemy $A, $0, Enemy_NinjiJumping
0A8D3 0E A0                     	.db Enemy_NinjiJumping, $A << 4 | $0
0A8D5                           	enemy $7, $8, Enemy_ShyguyRed
0A8D5 01 78                     	.db Enemy_ShyguyRed, $7 << 4 | $8
0A8D7                           	enemy $B, $D, Enemy_ShyguyRed
0A8D7 01 BD                     	.db Enemy_ShyguyRed, $B << 4 | $D
0A8D9                           
0A8D9                           ; Page 3
0A8D9                           +	distTo + ; $03 (1 enemy)
0A8D9 03                        	.db (+ - $)
0A8DA                           	enemy $E, $2, Enemy_SnifitGray
0A8DA 06 E2                     	.db Enemy_SnifitGray, $E << 4 | $2
0A8DC                           
0A8DC                           ; Page 4
0A8DC                           +	distTo + ; $01 (0 enemies)
0A8DC 01                        	.db (+ - $)
0A8DD                           
0A8DD                           ; End of enemy data
0A8DD                           +
0A8DD                           include "src/levels/2/2-2/2-2-area4-enemies.asm"
0A8DD                           ; Level 2-2, Area 4
0A8DD                           
0A8DD                           EnemyData_Level_2_2_Area4:
0A8DD                           
0A8DD                           ; Page 0
0A8DD                           	distTo + ; $01 (0 enemies)
0A8DD 01                        	.db (+ - $)
0A8DE                           
0A8DE                           ; Page 1
0A8DE                           +	distTo + ; $01 (0 enemies)
0A8DE 01                        	.db (+ - $)
0A8DF                           
0A8DF                           ; Page 2
0A8DF                           +	distTo + ; $01 (0 enemies)
0A8DF 01                        	.db (+ - $)
0A8E0                           
0A8E0                           ; Page 3
0A8E0                           +	distTo + ; $01 (0 enemies)
0A8E0 01                        	.db (+ - $)
0A8E1                           
0A8E1                           ; Page 4
0A8E1                           +	distTo + ; $01 (0 enemies)
0A8E1 01                        	.db (+ - $)
0A8E2                           
0A8E2                           ; Page 5
0A8E2                           +	distTo + ; $01 (0 enemies)
0A8E2 01                        	.db (+ - $)
0A8E3                           
0A8E3                           ; Page 6
0A8E3                           +	distTo + ; $01 (0 enemies)
0A8E3 01                        	.db (+ - $)
0A8E4                           
0A8E4                           ; Page 7
0A8E4                           +	distTo + ; $01 (0 enemies)
0A8E4 01                        	.db (+ - $)
0A8E5                           
0A8E5                           ; Page 8
0A8E5                           +	distTo + ; $01 (0 enemies)
0A8E5 01                        	.db (+ - $)
0A8E6                           
0A8E6                           ; Page 9
0A8E6                           +	distTo + ; $01 (0 enemies)
0A8E6 01                        	.db (+ - $)
0A8E7                           
0A8E7                           ; Page A
0A8E7                           +	distTo + ; $03 (1 enemy)
0A8E7 03                        	.db (+ - $)
0A8E8                           	enemy $B, $9, Enemy_ShyguyRed
0A8E8 01 B9                     	.db Enemy_ShyguyRed, $B << 4 | $9
0A8EA                           
0A8EA                           ; End of enemy data
0A8EA                           +
0A8EA                           include "src/levels/2/2-2/2-2-area5-enemies.asm"
0A8EA                           ; Level 2-2, Area 5
0A8EA                           
0A8EA                           EnemyData_Level_2_2_Area5:
0A8EA                           
0A8EA                           ; Page 0
0A8EA                           	distTo + ; $01 (0 enemies)
0A8EA 01                        	.db (+ - $)
0A8EB                           
0A8EB                           ; Page 1
0A8EB                           +	distTo + ; $05 (2 enemies)
0A8EB 05                        	.db (+ - $)
0A8EC                           	enemy $B, $4, Enemy_Birdo
0A8EC 1C B4                     	.db Enemy_Birdo, $B << 4 | $4
0A8EE                           	enemy $B, $4, Enemy_CrystalBall
0A8EE 44 B4                     	.db Enemy_CrystalBall, $B << 4 | $4
0A8F0                           
0A8F0                           ; Page 2
0A8F0                           +	distTo + ; $03 (1 enemy)
0A8F0 03                        	.db (+ - $)
0A8F1                           	enemy $B, $3, Enemy_HawkmouthLeft
0A8F1 43 B3                     	.db Enemy_HawkmouthLeft, $B << 4 | $3
0A8F3                           
0A8F3                           ; Page 3
0A8F3                           +	distTo + ; $01 (0 enemies)
0A8F3 01                        	.db (+ - $)
0A8F4                           
0A8F4                           ; End of enemy data
0A8F4                           +
0A8F4                           
0A8F4                           ; World 2-3
0A8F4                           include "src/levels/2/2-3/2-3-area0-enemies.asm"
0A8F4                           ; Level 2-3, Area 0
0A8F4                           
0A8F4                           EnemyData_Level_2_3_Area0:
0A8F4                           
0A8F4                           ; Page 0
0A8F4                           	distTo + ; $03 (1 enemy)
0A8F4 03                        	.db (+ - $)
0A8F5                           	enemy $1, $7, Enemy_HawkmouthRight
0A8F5 42 17                     	.db Enemy_HawkmouthRight, $1 << 4 | $7
0A8F7                           
0A8F7                           ; Page 1
0A8F7                           +	distTo + ; $01 (0 enemies)
0A8F7 01                        	.db (+ - $)
0A8F8                           
0A8F8                           ; End of enemy data
0A8F8                           +
0A8F8                           include "src/levels/2/2-3/2-3-area1-enemies.asm"
0A8F8                           ; Level 2-3, Area 1
0A8F8                           
0A8F8                           EnemyData_Level_2_3_Area1:
0A8F8                           
0A8F8                           ; Page 0
0A8F8                           	distTo + ; $03 (1 enemy)
0A8F8 03                        	.db (+ - $)
0A8F9                           	enemy $C, $7, Enemy_ShyguyPink
0A8F9 03 C7                     	.db Enemy_ShyguyPink, $C << 4 | $7
0A8FB                           
0A8FB                           ; Page 1
0A8FB                           +	distTo + ; $03 (1 enemy)
0A8FB 03                        	.db (+ - $)
0A8FC                           	enemy $2, $0, Enemy_StopAttack
0A8FC 49 20                     	.db Enemy_StopAttack, $2 << 4 | $0
0A8FE                           
0A8FE                           ; Page 2
0A8FE                           +	distTo + ; $05 (2 enemies)
0A8FE 05                        	.db (+ - $)
0A8FF                           	enemy $2, $0, Enemy_BeezoDiving
0A8FF 0F 20                     	.db Enemy_BeezoDiving, $2 << 4 | $0
0A901                           	enemy $A, $0, Enemy_AttackBeezo
0A901 48 A0                     	.db Enemy_AttackBeezo, $A << 4 | $0
0A903                           
0A903                           ; Page 3
0A903                           +	distTo + ; $01 (0 enemies)
0A903 01                        	.db (+ - $)
0A904                           
0A904                           ; Page 4
0A904                           +	distTo + ; $01 (0 enemies)
0A904 01                        	.db (+ - $)
0A905                           
0A905                           ; Page 5
0A905                           +	distTo + ; $03 (1 enemy)
0A905 03                        	.db (+ - $)
0A906                           	enemy $8, $0, Enemy_AttackBeezo
0A906 48 80                     	.db Enemy_AttackBeezo, $8 << 4 | $0
0A908                           
0A908                           ; Page 6
0A908                           +	distTo + ; $01 (0 enemies)
0A908 01                        	.db (+ - $)
0A909                           
0A909                           ; Page 7
0A909                           +	distTo + ; $03 (1 enemy)
0A909 03                        	.db (+ - $)
0A90A                           	enemy $0, $0, Enemy_StopAttack
0A90A 49 00                     	.db Enemy_StopAttack, $0 << 4 | $0
0A90C                           
0A90C                           ; Page 8
0A90C                           +	distTo + ; $05 (2 enemies)
0A90C 05                        	.db (+ - $)
0A90D                           	enemy $7, $A, Enemy_CobratSand
0A90D 19 7A                     	.db Enemy_CobratSand, $7 << 4 | $A
0A90F                           	enemy $D, $6, Enemy_Pokey
0A90F 1A D6                     	.db Enemy_Pokey, $D << 4 | $6
0A911                           
0A911                           ; Page 9
0A911                           +	distTo + ; $01 (0 enemies)
0A911 01                        	.db (+ - $)
0A912                           
0A912                           ; Page A
0A912                           +	distTo + ; $01 (0 enemies)
0A912 01                        	.db (+ - $)
0A913                           
0A913                           ; End of enemy data
0A913                           +
0A913                           include "src/levels/2/2-3/2-3-area2-enemies.asm"
0A913                           ; Level 2-3, Area 2
0A913                           
0A913                           EnemyData_Level_2_3_Area2:
0A913                           
0A913                           ; Page 0
0A913                           	distTo + ; $01 (0 enemies)
0A913 01                        	.db (+ - $)
0A914                           
0A914                           ; Page 1
0A914                           +	distTo + ; $01 (0 enemies)
0A914 01                        	.db (+ - $)
0A915                           
0A915                           ; Page 2
0A915                           +	distTo + ; $01 (0 enemies)
0A915 01                        	.db (+ - $)
0A916                           
0A916                           ; End of enemy data
0A916                           +
0A916                           include "src/levels/2/2-3/2-3-area3-enemies.asm"
0A916                           ; Level 2-3, Area 3
0A916                           
0A916                           EnemyData_Level_2_3_Area3:
0A916                           
0A916                           ; Page 0
0A916                           	distTo + ; $03 (1 enemy)
0A916 03                        	.db (+ - $)
0A917                           	enemy $4, $B, Enemy_ShyguyPink
0A917 03 4B                     	.db Enemy_ShyguyPink, $4 << 4 | $B
0A919                           
0A919                           ; Page 1
0A919                           +	distTo + ; $05 (2 enemies)
0A919 05                        	.db (+ - $)
0A91A                           	enemy $D, $5, Enemy_ShyguyRed
0A91A 01 D5                     	.db Enemy_ShyguyRed, $D << 4 | $5
0A91C                           	enemy $A, $A, Enemy_ShyguyRed
0A91C 01 AA                     	.db Enemy_ShyguyRed, $A << 4 | $A
0A91E                           
0A91E                           ; Page 2
0A91E                           +	distTo + ; $05 (2 enemies)
0A91E 05                        	.db (+ - $)
0A91F                           	enemy $D, $2, Enemy_ShyguyPink
0A91F 03 D2                     	.db Enemy_ShyguyPink, $D << 4 | $2
0A921                           	enemy $D, $5, Enemy_ShyguyRed
0A921 01 D5                     	.db Enemy_ShyguyRed, $D << 4 | $5
0A923                           
0A923                           ; Page 3
0A923                           +	distTo + ; $03 (1 enemy)
0A923 03                        	.db (+ - $)
0A924                           	enemy $8, $8, Enemy_Tweeter
0A924 02 88                     	.db Enemy_Tweeter, $8 << 4 | $8
0A926                           
0A926                           ; Page 4
0A926                           +	distTo + ; $07 (3 enemies)
0A926 07                        	.db (+ - $)
0A927                           	enemy $8, $3, Enemy_ShyguyRed
0A927 01 83                     	.db Enemy_ShyguyRed, $8 << 4 | $3
0A929                           	enemy $A, $9, Enemy_ShyguyRed
0A929 01 A9                     	.db Enemy_ShyguyRed, $A << 4 | $9
0A92B                           	enemy $1, $D, Enemy_ShyguyRed
0A92B 01 1D                     	.db Enemy_ShyguyRed, $1 << 4 | $D
0A92D                           
0A92D                           ; Page 5
0A92D                           +	distTo + ; $07 (3 enemies)
0A92D 07                        	.db (+ - $)
0A92E                           	enemy $B, $1, Enemy_ShyguyRed
0A92E 01 B1                     	.db Enemy_ShyguyRed, $B << 4 | $1
0A930                           	enemy $8, $9, Enemy_ShyguyRed
0A930 01 89                     	.db Enemy_ShyguyRed, $8 << 4 | $9
0A932                           	enemy $3, $D, Enemy_ShyguyRed
0A932 01 3D                     	.db Enemy_ShyguyRed, $3 << 4 | $D
0A934                           
0A934                           ; Page 6
0A934                           +	distTo + ; $03 (1 enemy)
0A934 03                        	.db (+ - $)
0A935                           	enemy $E, $3, Enemy_ShyguyRed
0A935 01 E3                     	.db Enemy_ShyguyRed, $E << 4 | $3
0A937                           
0A937                           ; Page 7
0A937                           +	distTo + ; $01 (0 enemies)
0A937 01                        	.db (+ - $)
0A938                           
0A938                           ; End of enemy data
0A938                           +
0A938                           include "src/levels/2/2-3/2-3-area4-enemies.asm"
0A938                           ; Level 2-3, Area 4
0A938                           
0A938                           EnemyData_Level_2_3_Area4:
0A938                           
0A938                           ; Page 0
0A938                           	distTo + ; $01 (0 enemies)
0A938 01                        	.db (+ - $)
0A939                           
0A939                           ; Page 1
0A939                           +	distTo + ; $01 (0 enemies)
0A939 01                        	.db (+ - $)
0A93A                           
0A93A                           ; Page 2
0A93A                           +	distTo + ; $01 (0 enemies)
0A93A 01                        	.db (+ - $)
0A93B                           
0A93B                           ; Page 3
0A93B                           +	distTo + ; $01 (0 enemies)
0A93B 01                        	.db (+ - $)
0A93C                           
0A93C                           ; Page 4
0A93C                           +	distTo + ; $01 (0 enemies)
0A93C 01                        	.db (+ - $)
0A93D                           
0A93D                           ; Page 5
0A93D                           +	distTo + ; $01 (0 enemies)
0A93D 01                        	.db (+ - $)
0A93E                           
0A93E                           ; Page 6
0A93E                           +	distTo + ; $01 (0 enemies)
0A93E 01                        	.db (+ - $)
0A93F                           
0A93F                           ; Page 7
0A93F                           +	distTo + ; $01 (0 enemies)
0A93F 01                        	.db (+ - $)
0A940                           
0A940                           ; Page 8
0A940                           +	distTo + ; $01 (0 enemies)
0A940 01                        	.db (+ - $)
0A941                           
0A941                           ; Page 9
0A941                           +	distTo + ; $01 (0 enemies)
0A941 01                        	.db (+ - $)
0A942                           
0A942                           ; Page A
0A942                           +	distTo + ; $03 (1 enemy)
0A942 03                        	.db (+ - $)
0A943                           	enemy $B, $9, Enemy_ShyguyRed
0A943 01 B9                     	.db Enemy_ShyguyRed, $B << 4 | $9
0A945                           
0A945                           ; End of enemy data
0A945                           +
0A945                           include "src/levels/2/2-3/2-3-area5-enemies.asm"
0A945                           ; Level 2-3, Area 5
0A945                           
0A945                           EnemyData_Level_2_3_Area5:
0A945                           
0A945                           ; Page 0
0A945                           	distTo + ; $01 (0 enemies)
0A945 01                        	.db (+ - $)
0A946                           
0A946                           ; Page 1
0A946                           +	distTo + ; $09 (4 enemies)
0A946 09                        	.db (+ - $)
0A947                           	enemy $1, $5, Enemy_ShyguyRed
0A947 01 15                     	.db Enemy_ShyguyRed, $1 << 4 | $5
0A949                           	enemy $0, $8, Enemy_ShyguyRed
0A949 01 08                     	.db Enemy_ShyguyRed, $0 << 4 | $8
0A94B                           	enemy $F, $8, Enemy_ShyguyRed
0A94B 01 F8                     	.db Enemy_ShyguyRed, $F << 4 | $8
0A94D                           	enemy $C, $B, Enemy_ShyguyRed
0A94D 01 CB                     	.db Enemy_ShyguyRed, $C << 4 | $B
0A94F                           
0A94F                           ; Page 2
0A94F                           +	distTo + ; $01 (0 enemies)
0A94F 01                        	.db (+ - $)
0A950                           
0A950                           ; Page 3
0A950                           +	distTo + ; $07 (3 enemies)
0A950 07                        	.db (+ - $)
0A951                           	enemy $1, $4, Enemy_PanserStationaryFiresAngled
0A951 23 14                     	.db Enemy_PanserStationaryFiresAngled, $1 << 4 | $4
0A953                           	enemy $3, $9, Enemy_ShyguyPink
0A953 03 39                     	.db Enemy_ShyguyPink, $3 << 4 | $9
0A955                           	enemy $7, $B, Enemy_ShyguyPink
0A955 03 7B                     	.db Enemy_ShyguyPink, $7 << 4 | $B
0A957                           
0A957                           ; Page 4
0A957                           +	distTo + ; $03 (1 enemy)
0A957 03                        	.db (+ - $)
0A958                           	enemy $6, $7, Enemy_CobratJar
0A958 18 67                     	.db Enemy_CobratJar, $6 << 4 | $7
0A95A                           
0A95A                           ; Page 5
0A95A                           +	distTo + ; $07 (3 enemies)
0A95A 07                        	.db (+ - $)
0A95B                           	enemy $0, $A, Enemy_CobratJar
0A95B 18 0A                     	.db Enemy_CobratJar, $0 << 4 | $A
0A95D                           	enemy $3, $B, Enemy_CrystalBall
0A95D 44 3B                     	.db Enemy_CrystalBall, $3 << 4 | $B
0A95F                           	enemy $6, $A, Enemy_CobratJar
0A95F 18 6A                     	.db Enemy_CobratJar, $6 << 4 | $A
0A961                           
0A961                           ; Page 6
0A961                           +	distTo + ; $03 (1 enemy)
0A961 03                        	.db (+ - $)
0A962                           	enemy $9, $7, Enemy_HawkmouthLeft
0A962 43 97                     	.db Enemy_HawkmouthLeft, $9 << 4 | $7
0A964                           
0A964                           ; Page 7
0A964                           +	distTo + ; $01 (0 enemies)
0A964 01                        	.db (+ - $)
0A965                           
0A965                           ; End of enemy data
0A965                           +
0A965                           include "src/levels/2/2-3/2-3-area6-enemies.asm"
0A965                           ; Level 2-3, Area 6
0A965                           
0A965                           EnemyData_Level_2_3_Area6:
0A965                           
0A965                           ; Page 0
0A965                           	distTo + ; $01 (0 enemies)
0A965 01                        	.db (+ - $)
0A966                           
0A966                           ; Page 1
0A966                           +	distTo + ; $05 (2 enemies)
0A966 05                        	.db (+ - $)
0A967                           	enemy $C, $5, Enemy_BossTryclyde
0A967 5F C5                     	.db Enemy_BossTryclyde, $C << 4 | $5
0A969                           	enemy $D, $0, Enemy_Tweeter
0A969 02 D0                     	.db Enemy_Tweeter, $D << 4 | $0
0A96B                           
0A96B                           ; Page 2
0A96B                           +	distTo + ; $01 (0 enemies)
0A96B 01                        	.db (+ - $)
0A96C                           
0A96C                           ; End of enemy data
0A96C                           +
0A96C                           include "src/levels/2/2-3/2-3-area7-enemies.asm"
0A96C                           ; Level 2-3, Area 7
0A96C                           
0A96C                           EnemyData_Level_2_3_Area7:
0A96C                           
0A96C                           ; Page 0
0A96C                           	distTo + ; $07 (3 enemies)
0A96C 07                        	.db (+ - $)
0A96D                           	enemy $8, $3, Enemy_Phanto
0A96D 17 83                     	.db Enemy_Phanto, $8 << 4 | $3
0A96F                           	enemy $8, $7, Enemy_Key
0A96F 3D 87                     	.db Enemy_Key, $8 << 4 | $7
0A971                           	enemy $A, $9, Enemy_Spark2
0A971 2F A9                     	.db Enemy_Spark2, $A << 4 | $9
0A973                           
0A973                           ; Page 1
0A973                           +	distTo + ; $01 (0 enemies)
0A973 01                        	.db (+ - $)
0A974                           
0A974                           ; Page 2
0A974                           +	distTo + ; $01 (0 enemies)
0A974 01                        	.db (+ - $)
0A975                           
0A975                           ; End of enemy data
0A975                           +
0A975                           ; -------------------------------
0A975                           
0A975                           
0A975                           ; -------------------------------
0A975                           ; World 3
0A975                           
0A975                           ; World 3-1
0A975                           include "src/levels/3/3-1/3-1-area0-enemies.asm"
0A975                           ; Level 3-1, Area 0
0A975                           
0A975                           EnemyData_Level_3_1_Area0:
0A975                           
0A975                           ; Page 0
0A975                           	distTo + ; $01 (0 enemies)
0A975 01                        	.db (+ - $)
0A976                           
0A976                           ; Page 1
0A976                           +	distTo + ; $01 (0 enemies)
0A976 01                        	.db (+ - $)
0A977                           
0A977                           ; Page 2
0A977                           +	distTo + ; $01 (0 enemies)
0A977 01                        	.db (+ - $)
0A978                           
0A978                           ; End of enemy data
0A978                           +
0A978                           include "src/levels/3/3-1/3-1-area1-enemies.asm"
0A978                           ; Level 3-1, Area 1
0A978                           
0A978                           EnemyData_Level_3_1_Area1:
0A978                           
0A978                           ; Page 0
0A978                           	distTo + ; $03 (1 enemy)
0A978 03                        	.db (+ - $)
0A979                           	enemy $0, $8, Enemy_StopAttack
0A979 49 08                     	.db Enemy_StopAttack, $0 << 4 | $8
0A97B                           
0A97B                           ; Page 1
0A97B                           +	distTo + ; $03 (1 enemy)
0A97B 03                        	.db (+ - $)
0A97C                           	enemy $0, $E, Enemy_AttackBeezo
0A97C 48 0E                     	.db Enemy_AttackBeezo, $0 << 4 | $E
0A97E                           
0A97E                           ; Page 2
0A97E                           +	distTo + ; $03 (1 enemy)
0A97E 03                        	.db (+ - $)
0A97F                           	enemy $0, $2, Enemy_AttackBeezo
0A97F 48 02                     	.db Enemy_AttackBeezo, $0 << 4 | $2
0A981                           
0A981                           ; Page 3
0A981                           +	distTo + ; $05 (2 enemies)
0A981 05                        	.db (+ - $)
0A982                           	enemy $9, $2, Enemy_Pidgit
0A982 12 92                     	.db Enemy_Pidgit, $9 << 4 | $2
0A984                           	enemy $0, $9, Enemy_StopAttack
0A984 49 09                     	.db Enemy_StopAttack, $0 << 4 | $9
0A986                           
0A986                           ; Page 4
0A986                           +	distTo + ; $03 (1 enemy)
0A986 03                        	.db (+ - $)
0A987                           	enemy $E, $5, Enemy_ShyguyPink
0A987 03 E5                     	.db Enemy_ShyguyPink, $E << 4 | $5
0A989                           
0A989                           ; Page 5
0A989                           +	distTo + ; $05 (2 enemies)
0A989 05                        	.db (+ - $)
0A98A                           	enemy $2, $1, Enemy_ShyguyPink
0A98A 03 21                     	.db Enemy_ShyguyPink, $2 << 4 | $1
0A98C                           	enemy $8, $7, Enemy_ShyguyPink
0A98C 03 87                     	.db Enemy_ShyguyPink, $8 << 4 | $7
0A98E                           
0A98E                           ; Page 6
0A98E                           +	distTo + ; $01 (0 enemies)
0A98E 01                        	.db (+ - $)
0A98F                           
0A98F                           ; Page 7
0A98F                           +	distTo + ; $01 (0 enemies)
0A98F 01                        	.db (+ - $)
0A990                           
0A990                           ; Page 8
0A990                           +	distTo + ; $01 (0 enemies)
0A990 01                        	.db (+ - $)
0A991                           
0A991                           ; Page 9
0A991                           +	distTo + ; $01 (0 enemies)
0A991 01                        	.db (+ - $)
0A992                           
0A992                           ; Page A
0A992                           +	distTo + ; $01 (0 enemies)
0A992 01                        	.db (+ - $)
0A993                           
0A993                           ; End of enemy data
0A993                           +
0A993                           include "src/levels/3/3-1/3-1-area2-enemies.asm"
0A993                           ; Level 3-1, Area 2
0A993                           
0A993                           EnemyData_Level_3_1_Area2:
0A993                           
0A993                           ; Page 0
0A993                           	distTo + ; $01 (0 enemies)
0A993 01                        	.db (+ - $)
0A994                           
0A994                           ; Page 1
0A994                           +	distTo + ; $01 (0 enemies)
0A994 01                        	.db (+ - $)
0A995                           
0A995                           ; Page 2
0A995                           +	distTo + ; $01 (0 enemies)
0A995 01                        	.db (+ - $)
0A996                           
0A996                           ; Page 3
0A996                           +	distTo + ; $01 (0 enemies)
0A996 01                        	.db (+ - $)
0A997                           
0A997                           ; End of enemy data
0A997                           +
0A997                           include "src/levels/3/3-1/3-1-area3-enemies.asm"
0A997                           ; Level 3-1, Area 3
0A997                           
0A997                           EnemyData_Level_3_1_Area3:
0A997                           
0A997                           ; Page 0
0A997                           	distTo + ; $01 (0 enemies)
0A997 01                        	.db (+ - $)
0A998                           
0A998                           ; Page 1
0A998                           +	distTo + ; $03 (1 enemy)
0A998 03                        	.db (+ - $)
0A999                           	enemy $2, $B, Enemy_ShyguyPink
0A999 03 2B                     	.db Enemy_ShyguyPink, $2 << 4 | $B
0A99B                           
0A99B                           ; Page 2
0A99B                           +	distTo + ; $03 (1 enemy)
0A99B 03                        	.db (+ - $)
0A99C                           	enemy $1, $2, Enemy_PanserStationaryFiresUp
0A99C 25 12                     	.db Enemy_PanserStationaryFiresUp, $1 << 4 | $2
0A99E                           
0A99E                           ; Page 3
0A99E                           +	distTo + ; $03 (1 enemy)
0A99E 03                        	.db (+ - $)
0A99F                           	enemy $9, $5, Enemy_PanserStationaryFiresAngled
0A99F 23 95                     	.db Enemy_PanserStationaryFiresAngled, $9 << 4 | $5
0A9A1                           
0A9A1                           ; Page 4
0A9A1                           +	distTo + ; $03 (1 enemy)
0A9A1 03                        	.db (+ - $)
0A9A2                           	enemy $6, $5, Enemy_ShyguyPink
0A9A2 03 65                     	.db Enemy_ShyguyPink, $6 << 4 | $5
0A9A4                           
0A9A4                           ; Page 5
0A9A4                           +	distTo + ; $03 (1 enemy)
0A9A4 03                        	.db (+ - $)
0A9A5                           	enemy $0, $5, Enemy_PanserWalking
0A9A5 24 05                     	.db Enemy_PanserWalking, $0 << 4 | $5
0A9A7                           
0A9A7                           ; Page 6
0A9A7                           +	distTo + ; $01 (0 enemies)
0A9A7 01                        	.db (+ - $)
0A9A8                           
0A9A8                           ; End of enemy data
0A9A8                           +
0A9A8                           include "src/levels/3/3-1/3-1-area4-enemies.asm"
0A9A8                           ; Level 3-1, Area 4
0A9A8                           
0A9A8                           EnemyData_Level_3_1_Area4:
0A9A8                           
0A9A8                           ; Page 0
0A9A8                           	distTo + ; $01 (0 enemies)
0A9A8 01                        	.db (+ - $)
0A9A9                           
0A9A9                           ; Page 1
0A9A9                           +	distTo + ; $07 (3 enemies)
0A9A9 07                        	.db (+ - $)
0A9AA                           	enemy $9, $3, Enemy_HawkmouthLeft
0A9AA 43 93                     	.db Enemy_HawkmouthLeft, $9 << 4 | $3
0A9AC                           	enemy $B, $9, Enemy_Birdo
0A9AC 1C B9                     	.db Enemy_Birdo, $B << 4 | $9
0A9AE                           	enemy $B, $A, Enemy_CrystalBall
0A9AE 44 BA                     	.db Enemy_CrystalBall, $B << 4 | $A
0A9B0                           
0A9B0                           ; Page 2
0A9B0                           +	distTo + ; $01 (0 enemies)
0A9B0 01                        	.db (+ - $)
0A9B1                           
0A9B1                           ; Page 3
0A9B1                           +	distTo + ; $01 (0 enemies)
0A9B1 01                        	.db (+ - $)
0A9B2                           
0A9B2                           ; Page 4
0A9B2                           +	distTo + ; $01 (0 enemies)
0A9B2 01                        	.db (+ - $)
0A9B3                           
0A9B3                           ; End of enemy data
0A9B3                           +
0A9B3                           
0A9B3                           ; World 3-2
0A9B3                           include "src/levels/3/3-2/3-2-area0-enemies.asm"
0A9B3                           ; Level 3-2, Area 0
0A9B3                           
0A9B3                           EnemyData_Level_3_2_Area0:
0A9B3                           
0A9B3                           ; Page 0
0A9B3                           	distTo + ; $05 (2 enemies)
0A9B3 05                        	.db (+ - $)
0A9B4                           	enemy $4, $2, Enemy_HawkmouthRight
0A9B4 42 42                     	.db Enemy_HawkmouthRight, $4 << 4 | $2
0A9B6                           	enemy $4, $0, Enemy_StopAttack
0A9B6 49 40                     	.db Enemy_StopAttack, $4 << 4 | $0
0A9B8                           
0A9B8                           ; Page 1
0A9B8                           +	distTo + ; $05 (2 enemies)
0A9B8 05                        	.db (+ - $)
0A9B9                           	enemy $2, $5, Enemy_Ostro
0A9B9 08 25                     	.db Enemy_Ostro, $2 << 4 | $5
0A9BB                           	enemy $C, $0, Enemy_AttackBeezo
0A9BB 48 C0                     	.db Enemy_AttackBeezo, $C << 4 | $0
0A9BD                           
0A9BD                           ; Page 2
0A9BD                           +	distTo + ; $01 (0 enemies)
0A9BD 01                        	.db (+ - $)
0A9BE                           
0A9BE                           ; Page 3
0A9BE                           +	distTo + ; $03 (1 enemy)
0A9BE 03                        	.db (+ - $)
0A9BF                           	enemy $0, $0, Enemy_AttackBeezo
0A9BF 48 00                     	.db Enemy_AttackBeezo, $0 << 4 | $0
0A9C1                           
0A9C1                           ; Page 4
0A9C1                           +	distTo + ; $05 (2 enemies)
0A9C1 05                        	.db (+ - $)
0A9C2                           	enemy $E, $6, Enemy_PanserStationaryFiresUp
0A9C2 25 E6                     	.db Enemy_PanserStationaryFiresUp, $E << 4 | $6
0A9C4                           	enemy $8, $0, Enemy_StopAttack
0A9C4 49 80                     	.db Enemy_StopAttack, $8 << 4 | $0
0A9C6                           
0A9C6                           ; Page 5
0A9C6                           +	distTo + ; $01 (0 enemies)
0A9C6 01                        	.db (+ - $)
0A9C7                           
0A9C7                           ; Page 6
0A9C7                           +	distTo + ; $05 (2 enemies)
0A9C7 05                        	.db (+ - $)
0A9C8                           	enemy $3, $5, Enemy_Ostro
0A9C8 08 35                     	.db Enemy_Ostro, $3 << 4 | $5
0A9CA                           	enemy $5, $5, Enemy_Ostro
0A9CA 08 55                     	.db Enemy_Ostro, $5 << 4 | $5
0A9CC                           
0A9CC                           ; Page 7
0A9CC                           +	distTo + ; $05 (2 enemies)
0A9CC 05                        	.db (+ - $)
0A9CD                           	enemy $A, $4, Enemy_SnifitGray
0A9CD 06 A4                     	.db Enemy_SnifitGray, $A << 4 | $4
0A9CF                           	enemy $C, $B, Enemy_SnifitGray
0A9CF 06 CB                     	.db Enemy_SnifitGray, $C << 4 | $B
0A9D1                           
0A9D1                           ; Page 8
0A9D1                           +	distTo + ; $01 (0 enemies)
0A9D1 01                        	.db (+ - $)
0A9D2                           
0A9D2                           ; Page 9
0A9D2                           +	distTo + ; $03 (1 enemy)
0A9D2 03                        	.db (+ - $)
0A9D3                           	enemy $9, $6, Enemy_SnifitGray
0A9D3 06 96                     	.db Enemy_SnifitGray, $9 << 4 | $6
0A9D5                           
0A9D5                           ; Page A
0A9D5                           +	distTo + ; $01 (0 enemies)
0A9D5 01                        	.db (+ - $)
0A9D6                           
0A9D6                           ; End of enemy data
0A9D6                           +
0A9D6                           include "src/levels/3/3-2/3-2-area1-enemies.asm"
0A9D6                           ; Level 3-2, Area 1
0A9D6                           
0A9D6                           EnemyData_Level_3_2_Area1:
0A9D6                           
0A9D6                           ; Page 0
0A9D6                           	distTo + ; $07 (3 enemies)
0A9D6 07                        	.db (+ - $)
0A9D7                           	enemy $3, $C, Enemy_Porcupo
0A9D7 04 3C                     	.db Enemy_Porcupo, $3 << 4 | $C
0A9D9                           	enemy $6, $C, Enemy_Porcupo
0A9D9 04 6C                     	.db Enemy_Porcupo, $6 << 4 | $C
0A9DB                           	enemy $E, $C, Enemy_Porcupo
0A9DB 04 EC                     	.db Enemy_Porcupo, $E << 4 | $C
0A9DD                           
0A9DD                           ; Page 1
0A9DD                           +	distTo + ; $03 (1 enemy)
0A9DD 03                        	.db (+ - $)
0A9DE                           	enemy $1, $C, Enemy_Porcupo
0A9DE 04 1C                     	.db Enemy_Porcupo, $1 << 4 | $C
0A9E0                           
0A9E0                           ; Page 2
0A9E0                           +	distTo + ; $01 (0 enemies)
0A9E0 01                        	.db (+ - $)
0A9E1                           
0A9E1                           ; Page 3
0A9E1                           +	distTo + ; $01 (0 enemies)
0A9E1 01                        	.db (+ - $)
0A9E2                           
0A9E2                           ; Page 4
0A9E2                           +	distTo + ; $03 (1 enemy)
0A9E2 03                        	.db (+ - $)
0A9E3                           	enemy $2, $9, Enemy_ShyguyPink
0A9E3 03 29                     	.db Enemy_ShyguyPink, $2 << 4 | $9
0A9E5                           
0A9E5                           ; Page 5
0A9E5                           +	distTo + ; $07 (3 enemies)
0A9E5 07                        	.db (+ - $)
0A9E6                           	enemy $2, $9, Enemy_Tweeter
0A9E6 02 29                     	.db Enemy_Tweeter, $2 << 4 | $9
0A9E8                           	enemy $4, $9, Enemy_Tweeter
0A9E8 02 49                     	.db Enemy_Tweeter, $4 << 4 | $9
0A9EA                           	enemy $6, $C, Enemy_Tweeter
0A9EA 02 6C                     	.db Enemy_Tweeter, $6 << 4 | $C
0A9EC                           
0A9EC                           ; Page 6
0A9EC                           +	distTo + ; $01 (0 enemies)
0A9EC 01                        	.db (+ - $)
0A9ED                           
0A9ED                           ; Page 7
0A9ED                           +	distTo + ; $01 (0 enemies)
0A9ED 01                        	.db (+ - $)
0A9EE                           
0A9EE                           ; Page 8
0A9EE                           +	distTo + ; $01 (0 enemies)
0A9EE 01                        	.db (+ - $)
0A9EF                           
0A9EF                           ; End of enemy data
0A9EF                           +
0A9EF                           include "src/levels/3/3-2/3-2-area2-enemies.asm"
0A9EF                           ; Level 3-2, Area 2
0A9EF                           
0A9EF                           EnemyData_Level_3_2_Area2:
0A9EF                           
0A9EF                           ; Page 0
0A9EF                           	distTo + ; $05 (2 enemies)
0A9EF 05                        	.db (+ - $)
0A9F0                           	enemy $B, $6, Enemy_Birdo
0A9F0 1C B6                     	.db Enemy_Birdo, $B << 4 | $6
0A9F2                           	enemy $B, $6, Enemy_CrystalBall
0A9F2 44 B6                     	.db Enemy_CrystalBall, $B << 4 | $6
0A9F4                           
0A9F4                           ; Page 1
0A9F4                           +	distTo + ; $03 (1 enemy)
0A9F4 03                        	.db (+ - $)
0A9F5                           	enemy $F, $A, Enemy_HawkmouthLeft
0A9F5 43 FA                     	.db Enemy_HawkmouthLeft, $F << 4 | $A
0A9F7                           
0A9F7                           ; Page 2
0A9F7                           +	distTo + ; $01 (0 enemies)
0A9F7 01                        	.db (+ - $)
0A9F8                           
0A9F8                           ; Page 3
0A9F8                           +	distTo + ; $01 (0 enemies)
0A9F8 01                        	.db (+ - $)
0A9F9                           
0A9F9                           ; Page 4
0A9F9                           +	distTo + ; $01 (0 enemies)
0A9F9 01                        	.db (+ - $)
0A9FA                           
0A9FA                           ; End of enemy data
0A9FA                           +
0A9FA                           include "src/levels/3/3-2/3-2-area3-enemies.asm"
0A9FA                           ; Level 3-2, Area 3
0A9FA                           
0A9FA                           EnemyData_Level_3_2_Area3:
0A9FA                           
0A9FA                           ; Page 0
0A9FA                           	distTo + ; $01 (0 enemies)
0A9FA 01                        	.db (+ - $)
0A9FB                           
0A9FB                           ; Page 1
0A9FB                           +	distTo + ; $03 (1 enemy)
0A9FB 03                        	.db (+ - $)
0A9FC                           	enemy $C, $7, Enemy_BossBirdo
0A9FC 5C C7                     	.db Enemy_BossBirdo, $C << 4 | $7
0A9FE                           
0A9FE                           ; Page 2
0A9FE                           +	distTo + ; $01 (0 enemies)
0A9FE 01                        	.db (+ - $)
0A9FF                           
0A9FF                           ; End of enemy data
0A9FF                           +
0A9FF                           
0A9FF                           ; World 3-3
0A9FF                           include "src/levels/3/3-3/3-3-area0-enemies.asm"
0A9FF                           ; Level 3-3, Area 0
0A9FF                           
0A9FF                           EnemyData_Level_3_3_Area0:
0A9FF                           
0A9FF                           ; Page 0
0A9FF                           	distTo + ; $03 (1 enemy)
0A9FF 03                        	.db (+ - $)
0AA00                           	enemy $4, $A, Enemy_HawkmouthRight
0AA00 42 4A                     	.db Enemy_HawkmouthRight, $4 << 4 | $A
0AA02                           
0AA02                           ; Page 1
0AA02                           +	distTo + ; $01 (0 enemies)
0AA02 01                        	.db (+ - $)
0AA03                           
0AA03                           ; Page 2
0AA03                           +	distTo + ; $01 (0 enemies)
0AA03 01                        	.db (+ - $)
0AA04                           
0AA04                           ; End of enemy data
0AA04                           +
0AA04                           include "src/levels/3/3-3/3-3-area1-enemies.asm"
0AA04                           ; Level 3-3, Area 1
0AA04                           
0AA04                           EnemyData_Level_3_3_Area1:
0AA04                           
0AA04                           ; Page 0
0AA04                           	distTo + ; $01 (0 enemies)
0AA04 01                        	.db (+ - $)
0AA05                           
0AA05                           ; Page 1
0AA05                           +	distTo + ; $01 (0 enemies)
0AA05 01                        	.db (+ - $)
0AA06                           
0AA06                           ; Page 2
0AA06                           +	distTo + ; $07 (3 enemies)
0AA06 07                        	.db (+ - $)
0AA07                           	enemy $1, $4, Enemy_AlbatossCarryingBobOmb
0AA07 0A 14                     	.db Enemy_AlbatossCarryingBobOmb, $1 << 4 | $4
0AA09                           	enemy $5, $8, Enemy_Ostro
0AA09 08 58                     	.db Enemy_Ostro, $5 << 4 | $8
0AA0B                           	enemy $8, $4, Enemy_AlbatossCarryingBobOmb
0AA0B 0A 84                     	.db Enemy_AlbatossCarryingBobOmb, $8 << 4 | $4
0AA0D                           
0AA0D                           ; Page 3
0AA0D                           +	distTo + ; $01 (0 enemies)
0AA0D 01                        	.db (+ - $)
0AA0E                           
0AA0E                           ; Page 4
0AA0E                           +	distTo + ; $01 (0 enemies)
0AA0E 01                        	.db (+ - $)
0AA0F                           
0AA0F                           ; Page 5
0AA0F                           +	distTo + ; $01 (0 enemies)
0AA0F 01                        	.db (+ - $)
0AA10                           
0AA10                           ; Page 6
0AA10                           +	distTo + ; $01 (0 enemies)
0AA10 01                        	.db (+ - $)
0AA11                           
0AA11                           ; Page 7
0AA11                           +	distTo + ; $01 (0 enemies)
0AA11 01                        	.db (+ - $)
0AA12                           
0AA12                           ; Page 8
0AA12                           +	distTo + ; $01 (0 enemies)
0AA12 01                        	.db (+ - $)
0AA13                           
0AA13                           ; End of enemy data
0AA13                           +
0AA13                           include "src/levels/3/3-3/3-3-area2-enemies.asm"
0AA13                           ; Level 3-3, Area 2
0AA13                           
0AA13                           EnemyData_Level_3_3_Area2:
0AA13                           
0AA13                           ; Page 0
0AA13                           	distTo + ; $03 (1 enemy)
0AA13 03                        	.db (+ - $)
0AA14                           	enemy $6, $5, Enemy_Spark4
0AA14 31 65                     	.db Enemy_Spark4, $6 << 4 | $5
0AA16                           
0AA16                           ; Page 1
0AA16                           +	distTo + ; $05 (2 enemies)
0AA16 05                        	.db (+ - $)
0AA17                           	enemy $7, $5, Enemy_NinjiJumping
0AA17 0E 75                     	.db Enemy_NinjiJumping, $7 << 4 | $5
0AA19                           	enemy $9, $5, Enemy_NinjiJumping
0AA19 0E 95                     	.db Enemy_NinjiJumping, $9 << 4 | $5
0AA1B                           
0AA1B                           ; Page 2
0AA1B                           +	distTo + ; $09 (4 enemies)
0AA1B 09                        	.db (+ - $)
0AA1C                           	enemy $0, $5, Enemy_Spark3
0AA1C 30 05                     	.db Enemy_Spark3, $0 << 4 | $5
0AA1E                           	enemy $5, $5, Enemy_Spark4
0AA1E 31 55                     	.db Enemy_Spark4, $5 << 4 | $5
0AA20                           	enemy $A, $C, Enemy_NinjiRunning
0AA20 0D AC                     	.db Enemy_NinjiRunning, $A << 4 | $C
0AA22                           	enemy $C, $C, Enemy_NinjiRunning
0AA22 0D CC                     	.db Enemy_NinjiRunning, $C << 4 | $C
0AA24                           
0AA24                           ; Page 3
0AA24                           +	distTo + ; $01 (0 enemies)
0AA24 01                        	.db (+ - $)
0AA25                           
0AA25                           ; Page 4
0AA25                           +	distTo + ; $01 (0 enemies)
0AA25 01                        	.db (+ - $)
0AA26                           
0AA26                           ; End of enemy data
0AA26                           +
0AA26                           include "src/levels/3/3-3/3-3-area3-enemies.asm"
0AA26                           ; Level 3-3, Area 3
0AA26                           
0AA26                           EnemyData_Level_3_3_Area3:
0AA26                           
0AA26                           ; Page 0
0AA26                           	distTo + ; $01 (0 enemies)
0AA26 01                        	.db (+ - $)
0AA27                           
0AA27                           ; Page 1
0AA27                           +	distTo + ; $09 (4 enemies)
0AA27 09                        	.db (+ - $)
0AA28                           	enemy $7, $2, Enemy_Spark4
0AA28 31 72                     	.db Enemy_Spark4, $7 << 4 | $2
0AA2A                           	enemy $8, $4, Enemy_Spark1
0AA2A 2E 84                     	.db Enemy_Spark1, $8 << 4 | $4
0AA2C                           	enemy $B, $7, Enemy_Spark1
0AA2C 2E B7                     	.db Enemy_Spark1, $B << 4 | $7
0AA2E                           	enemy $4, $C, Enemy_Spark3
0AA2E 30 4C                     	.db Enemy_Spark3, $4 << 4 | $C
0AA30                           
0AA30                           ; Page 2
0AA30                           +	distTo + ; $07 (3 enemies)
0AA30 07                        	.db (+ - $)
0AA31                           	enemy $8, $1, Enemy_Spark1
0AA31 2E 81                     	.db Enemy_Spark1, $8 << 4 | $1
0AA33                           	enemy $1, $A, Enemy_Spark2
0AA33 2F 1A                     	.db Enemy_Spark2, $1 << 4 | $A
0AA35                           	enemy $D, $F, Enemy_Spark4
0AA35 31 DF                     	.db Enemy_Spark4, $D << 4 | $F
0AA37                           
0AA37                           ; Page 3
0AA37                           +	distTo + ; $07 (3 enemies)
0AA37 07                        	.db (+ - $)
0AA38                           	enemy $3, $5, Enemy_Spark1
0AA38 2E 35                     	.db Enemy_Spark1, $3 << 4 | $5
0AA3A                           	enemy $9, $6, Enemy_Spark1
0AA3A 2E 96                     	.db Enemy_Spark1, $9 << 4 | $6
0AA3C                           	enemy $1, $8, Enemy_Spark1
0AA3C 2E 18                     	.db Enemy_Spark1, $1 << 4 | $8
0AA3E                           
0AA3E                           ; Page 4
0AA3E                           +	distTo + ; $03 (1 enemy)
0AA3E 03                        	.db (+ - $)
0AA3F                           	enemy $7, $1, Enemy_Spark4
0AA3F 31 71                     	.db Enemy_Spark4, $7 << 4 | $1
0AA41                           
0AA41                           ; Page 5
0AA41                           +	distTo + ; $03 (1 enemy)
0AA41 03                        	.db (+ - $)
0AA42                           	enemy $C, $F, Enemy_Spark4
0AA42 31 CF                     	.db Enemy_Spark4, $C << 4 | $F
0AA44                           
0AA44                           ; Page 6
0AA44                           +	distTo + ; $07 (3 enemies)
0AA44 07                        	.db (+ - $)
0AA45                           	enemy $2, $0, Enemy_Spark2
0AA45 2F 20                     	.db Enemy_Spark2, $2 << 4 | $0
0AA47                           	enemy $7, $0, Enemy_Spark4
0AA47 31 70                     	.db Enemy_Spark4, $7 << 4 | $0
0AA49                           	enemy $7, $E, Enemy_Spark1
0AA49 2E 7E                     	.db Enemy_Spark1, $7 << 4 | $E
0AA4B                           
0AA4B                           ; Page 7
0AA4B                           +	distTo + ; $07 (3 enemies)
0AA4B 07                        	.db (+ - $)
0AA4C                           	enemy $7, $1, Enemy_Spark2
0AA4C 2F 71                     	.db Enemy_Spark2, $7 << 4 | $1
0AA4E                           	enemy $8, $D, Enemy_Spark3
0AA4E 30 8D                     	.db Enemy_Spark3, $8 << 4 | $D
0AA50                           	enemy $7, $F, Enemy_Spark4
0AA50 31 7F                     	.db Enemy_Spark4, $7 << 4 | $F
0AA52                           
0AA52                           ; Page 8
0AA52                           +	distTo + ; $05 (2 enemies)
0AA52 05                        	.db (+ - $)
0AA53                           	enemy $3, $4, Enemy_Spark3
0AA53 30 34                     	.db Enemy_Spark3, $3 << 4 | $4
0AA55                           	enemy $C, $7, Enemy_Spark3
0AA55 30 C7                     	.db Enemy_Spark3, $C << 4 | $7
0AA57                           
0AA57                           ; Page 9
0AA57                           +	distTo + ; $01 (0 enemies)
0AA57 01                        	.db (+ - $)
0AA58                           
0AA58                           ; Page A
0AA58                           +	distTo + ; $01 (0 enemies)
0AA58 01                        	.db (+ - $)
0AA59                           
0AA59                           ; End of enemy data
0AA59                           +
0AA59                           include "src/levels/3/3-3/3-3-area4-enemies.asm"
0AA59                           ; Level 3-3, Area 4
0AA59                           
0AA59                           EnemyData_Level_3_3_Area4:
0AA59                           
0AA59                           ; Page 0
0AA59                           	distTo + ; $03 (1 enemy)
0AA59 03                        	.db (+ - $)
0AA5A                           	enemy $6, $C, Enemy_SnifitGray
0AA5A 06 6C                     	.db Enemy_SnifitGray, $6 << 4 | $C
0AA5C                           
0AA5C                           ; Page 1
0AA5C                           +	distTo + ; $05 (2 enemies)
0AA5C 05                        	.db (+ - $)
0AA5D                           	enemy $8, $D, Enemy_PanserStationaryFiresAngled
0AA5D 23 8D                     	.db Enemy_PanserStationaryFiresAngled, $8 << 4 | $D
0AA5F                           	enemy $C, $D, Enemy_PanserStationaryFiresAngled
0AA5F 23 CD                     	.db Enemy_PanserStationaryFiresAngled, $C << 4 | $D
0AA61                           
0AA61                           ; Page 2
0AA61                           +	distTo + ; $05 (2 enemies)
0AA61 05                        	.db (+ - $)
0AA62                           	enemy $5, $7, Enemy_Tweeter
0AA62 02 57                     	.db Enemy_Tweeter, $5 << 4 | $7
0AA64                           	enemy $E, $D, Enemy_Tweeter
0AA64 02 ED                     	.db Enemy_Tweeter, $E << 4 | $D
0AA66                           
0AA66                           ; Page 3
0AA66                           +	distTo + ; $01 (0 enemies)
0AA66 01                        	.db (+ - $)
0AA67                           
0AA67                           ; Page 4
0AA67                           +	distTo + ; $05 (2 enemies)
0AA67 05                        	.db (+ - $)
0AA68                           	enemy $C, $2, Enemy_SnifitRed
0AA68 05 C2                     	.db Enemy_SnifitRed, $C << 4 | $2
0AA6A                           	enemy $3, $B, Enemy_SnifitPink
0AA6A 07 3B                     	.db Enemy_SnifitPink, $3 << 4 | $B
0AA6C                           
0AA6C                           ; Page 5
0AA6C                           +	distTo + ; $05 (2 enemies)
0AA6C 05                        	.db (+ - $)
0AA6D                           	enemy $C, $4, Enemy_SnifitPink
0AA6D 07 C4                     	.db Enemy_SnifitPink, $C << 4 | $4
0AA6F                           	enemy $3, $D, Enemy_ShyguyPink
0AA6F 03 3D                     	.db Enemy_ShyguyPink, $3 << 4 | $D
0AA71                           
0AA71                           ; Page 6
0AA71                           +	distTo + ; $03 (1 enemy)
0AA71 03                        	.db (+ - $)
0AA72                           	enemy $D, $6, Enemy_NinjiJumping
0AA72 0E D6                     	.db Enemy_NinjiJumping, $D << 4 | $6
0AA74                           
0AA74                           ; Page 7
0AA74                           +	distTo + ; $01 (0 enemies)
0AA74 01                        	.db (+ - $)
0AA75                           
0AA75                           ; End of enemy data
0AA75                           +
0AA75                           include "src/levels/3/3-3/3-3-area5-enemies.asm"
0AA75                           ; Level 3-3, Area 5
0AA75                           
0AA75                           EnemyData_Level_3_3_Area5:
0AA75                           
0AA75                           ; Page 0
0AA75                           	distTo + ; $03 (1 enemy)
0AA75 03                        	.db (+ - $)
0AA76                           	enemy $6, $F, Enemy_JarGeneratorShyguy
0AA76 15 6F                     	.db Enemy_JarGeneratorShyguy, $6 << 4 | $F
0AA78                           
0AA78                           ; Page 1
0AA78                           +	distTo + ; $03 (1 enemy)
0AA78 03                        	.db (+ - $)
0AA79                           	enemy $6, $B, Enemy_JarGeneratorShyguy
0AA79 15 6B                     	.db Enemy_JarGeneratorShyguy, $6 << 4 | $B
0AA7B                           
0AA7B                           ; Page 2
0AA7B                           +	distTo + ; $03 (1 enemy)
0AA7B 03                        	.db (+ - $)
0AA7C                           	enemy $6, $7, Enemy_JarGeneratorShyguy
0AA7C 15 67                     	.db Enemy_JarGeneratorShyguy, $6 << 4 | $7
0AA7E                           
0AA7E                           ; Page 3
0AA7E                           +	distTo + ; $03 (1 enemy)
0AA7E 03                        	.db (+ - $)
0AA7F                           	enemy $6, $3, Enemy_JarGeneratorShyguy
0AA7F 15 63                     	.db Enemy_JarGeneratorShyguy, $6 << 4 | $3
0AA81                           
0AA81                           ; Page 4
0AA81                           +	distTo + ; $01 (0 enemies)
0AA81 01                        	.db (+ - $)
0AA82                           
0AA82                           ; End of enemy data
0AA82                           +
0AA82                           include "src/levels/3/3-3/3-3-area6-enemies.asm"
0AA82                           ; Level 3-3, Area 6
0AA82                           
0AA82                           EnemyData_Level_3_3_Area6:
0AA82                           
0AA82                           ; Page 0
0AA82                           	distTo + ; $0B (5 enemies)
0AA82 0B                        	.db (+ - $)
0AA83                           	enemy $7, $3, Enemy_Spark4
0AA83 31 73                     	.db Enemy_Spark4, $7 << 4 | $3
0AA85                           	enemy $8, $4, Enemy_Spark2
0AA85 2F 84                     	.db Enemy_Spark2, $8 << 4 | $4
0AA87                           	enemy $7, $9, Enemy_Spark4
0AA87 31 79                     	.db Enemy_Spark4, $7 << 4 | $9
0AA89                           	enemy $8, $7, Enemy_Phanto
0AA89 17 87                     	.db Enemy_Phanto, $8 << 4 | $7
0AA8B                           	enemy $8, $9, Enemy_Key
0AA8B 3D 89                     	.db Enemy_Key, $8 << 4 | $9
0AA8D                           
0AA8D                           ; Page 1
0AA8D                           +	distTo + ; $01 (0 enemies)
0AA8D 01                        	.db (+ - $)
0AA8E                           
0AA8E                           ; End of enemy data
0AA8E                           +
0AA8E                           include "src/levels/3/3-3/3-3-area7-enemies.asm"
0AA8E                           ; Level 3-3, Area 7
0AA8E                           
0AA8E                           EnemyData_Level_3_3_Area7:
0AA8E                           
0AA8E                           ; Page 0
0AA8E                           	distTo + ; $01 (0 enemies)
0AA8E 01                        	.db (+ - $)
0AA8F                           
0AA8F                           ; Page 1
0AA8F                           +	distTo + ; $05 (2 enemies)
0AA8F 05                        	.db (+ - $)
0AA90                           	enemy $C, $9, Enemy_NinjiJumping
0AA90 0E C9                     	.db Enemy_NinjiJumping, $C << 4 | $9
0AA92                           	enemy $E, $9, Enemy_NinjiJumping
0AA92 0E E9                     	.db Enemy_NinjiJumping, $E << 4 | $9
0AA94                           
0AA94                           ; Page 2
0AA94                           +	distTo + ; $03 (1 enemy)
0AA94 03                        	.db (+ - $)
0AA95                           	enemy $E, $9, Enemy_NinjiRunning
0AA95 0D E9                     	.db Enemy_NinjiRunning, $E << 4 | $9
0AA97                           
0AA97                           ; Page 3
0AA97                           +	distTo + ; $05 (2 enemies)
0AA97 05                        	.db (+ - $)
0AA98                           	enemy $0, $9, Enemy_NinjiRunning
0AA98 0D 09                     	.db Enemy_NinjiRunning, $0 << 4 | $9
0AA9A                           	enemy $2, $9, Enemy_NinjiRunning
0AA9A 0D 29                     	.db Enemy_NinjiRunning, $2 << 4 | $9
0AA9C                           
0AA9C                           ; Page 4
0AA9C                           +	distTo + ; $05 (2 enemies)
0AA9C 05                        	.db (+ - $)
0AA9D                           	enemy $6, $B, Enemy_CrystalBall
0AA9D 44 6B                     	.db Enemy_CrystalBall, $6 << 4 | $B
0AA9F                           	enemy $A, $A, Enemy_HawkmouthLeft
0AA9F 43 AA                     	.db Enemy_HawkmouthLeft, $A << 4 | $A
0AAA1                           
0AAA1                           ; Page 5
0AAA1                           +	distTo + ; $01 (0 enemies)
0AAA1 01                        	.db (+ - $)
0AAA2                           
0AAA2                           ; End of enemy data
0AAA2                           +
0AAA2                           include "src/levels/3/3-3/3-3-area8-enemies.asm"
0AAA2                           ; Level 3-3, Area 8
0AAA2                           
0AAA2                           EnemyData_Level_3_3_Area8:
0AAA2                           
0AAA2                           ; Page 0
0AAA2                           	distTo + ; $03 (1 enemy)
0AAA2 03                        	.db (+ - $)
0AAA3                           	enemy $2, $2, Enemy_Spark2
0AAA3 2F 22                     	.db Enemy_Spark2, $2 << 4 | $2
0AAA5                           
0AAA5                           ; Page 1
0AAA5                           +	distTo + ; $05 (2 enemies)
0AAA5 05                        	.db (+ - $)
0AAA6                           	enemy $6, $2, Enemy_Spark2
0AAA6 2F 62                     	.db Enemy_Spark2, $6 << 4 | $2
0AAA8                           	enemy $D, $6, Enemy_BossMouser
0AAA8 5D D6                     	.db Enemy_BossMouser, $D << 4 | $6
0AAAA                           
0AAAA                           ; Page 2
0AAAA                           +	distTo + ; $01 (0 enemies)
0AAAA 01                        	.db (+ - $)
0AAAB                           
0AAAB                           ; Page 3
0AAAB                           +	distTo + ; $01 (0 enemies)
0AAAB 01                        	.db (+ - $)
0AAAC                           
0AAAC                           ; End of enemy data
0AAAC                           +
0AAAC                           ; -------------------------------
0AAAC                           
0AAAC                           
0AAAC                           ; -------------------------------
0AAAC                           ; World 4
0AAAC                           
0AAAC                           ; World 4-1
0AAAC                           include "src/levels/4/4-1/4-1-area0-enemies.asm"
0AAAC                           ; Level 4-1, Area 0
0AAAC                           
0AAAC                           EnemyData_Level_4_1_Area0:
0AAAC                           
0AAAC                           ; Page 0
0AAAC                           	distTo + ; $01 (0 enemies)
0AAAC 01                        	.db (+ - $)
0AAAD                           
0AAAD                           ; Page 1
0AAAD                           +	distTo + ; $05 (2 enemies)
0AAAD 05                        	.db (+ - $)
0AAAE                           	enemy $9, $6, Enemy_Flurry
0AAAE 29 96                     	.db Enemy_Flurry, $9 << 4 | $6
0AAB0                           	enemy $B, $2, Enemy_Trouter
0AAB0 13 B2                     	.db Enemy_Trouter, $B << 4 | $2
0AAB2                           
0AAB2                           ; Page 2
0AAB2                           +	distTo + ; $03 (1 enemy)
0AAB2 03                        	.db (+ - $)
0AAB3                           	enemy $2, $2, Enemy_Trouter
0AAB3 13 22                     	.db Enemy_Trouter, $2 << 4 | $2
0AAB5                           
0AAB5                           ; Page 3
0AAB5                           +	distTo + ; $0B (5 enemies)
0AAB5 0B                        	.db (+ - $)
0AAB6                           	enemy $0, $9, Enemy_Flurry
0AAB6 29 09                     	.db Enemy_Flurry, $0 << 4 | $9
0AAB8                           	enemy $2, $9, Enemy_Flurry
0AAB8 29 29                     	.db Enemy_Flurry, $2 << 4 | $9
0AABA                           	enemy $3, $5, Enemy_Trouter
0AABA 13 35                     	.db Enemy_Trouter, $3 << 4 | $5
0AABC                           	enemy $D, $9, Enemy_Flurry
0AABC 29 D9                     	.db Enemy_Flurry, $D << 4 | $9
0AABE                           	enemy $F, $6, Enemy_Flurry
0AABE 29 F6                     	.db Enemy_Flurry, $F << 4 | $6
0AAC0                           
0AAC0                           ; Page 4
0AAC0                           +	distTo + ; $01 (0 enemies)
0AAC0 01                        	.db (+ - $)
0AAC1                           
0AAC1                           ; Page 5
0AAC1                           +	distTo + ; $09 (4 enemies)
0AAC1 09                        	.db (+ - $)
0AAC2                           	enemy $4, $6, Enemy_Flurry
0AAC2 29 46                     	.db Enemy_Flurry, $4 << 4 | $6
0AAC4                           	enemy $9, $8, Enemy_Flurry
0AAC4 29 98                     	.db Enemy_Flurry, $9 << 4 | $8
0AAC6                           	enemy $A, $6, Enemy_Flurry
0AAC6 29 A6                     	.db Enemy_Flurry, $A << 4 | $6
0AAC8                           	enemy $F, $8, Enemy_Flurry
0AAC8 29 F8                     	.db Enemy_Flurry, $F << 4 | $8
0AACA                           
0AACA                           ; Page 6
0AACA                           +	distTo + ; $05 (2 enemies)
0AACA 05                        	.db (+ - $)
0AACB                           	enemy $1, $3, Enemy_Trouter
0AACB 13 13                     	.db Enemy_Trouter, $1 << 4 | $3
0AACD                           	enemy $B, $8, Enemy_Flurry
0AACD 29 B8                     	.db Enemy_Flurry, $B << 4 | $8
0AACF                           
0AACF                           ; Page 7
0AACF                           +	distTo + ; $05 (2 enemies)
0AACF 05                        	.db (+ - $)
0AAD0                           	enemy $0, $8, Enemy_Flurry
0AAD0 29 08                     	.db Enemy_Flurry, $0 << 4 | $8
0AAD2                           	enemy $B, $5, Enemy_Flurry
0AAD2 29 B5                     	.db Enemy_Flurry, $B << 4 | $5
0AAD4                           
0AAD4                           ; Page 8
0AAD4                           +	distTo + ; $05 (2 enemies)
0AAD4 05                        	.db (+ - $)
0AAD5                           	enemy $3, $5, Enemy_Flurry
0AAD5 29 35                     	.db Enemy_Flurry, $3 << 4 | $5
0AAD7                           	enemy $4, $1, Enemy_Trouter
0AAD7 13 41                     	.db Enemy_Trouter, $4 << 4 | $1
0AAD9                           
0AAD9                           ; Page 9
0AAD9                           +	distTo + ; $01 (0 enemies)
0AAD9 01                        	.db (+ - $)
0AADA                           
0AADA                           ; Page A
0AADA                           +	distTo + ; $01 (0 enemies)
0AADA 01                        	.db (+ - $)
0AADB                           
0AADB                           ; End of enemy data
0AADB                           +
0AADB                           include "src/levels/4/4-1/4-1-area1-enemies.asm"
0AADB                           ; Level 4-1, Area 1
0AADB                           
0AADB                           EnemyData_Level_4_1_Area1:
0AADB                           
0AADB                           ; Page 0
0AADB                           	distTo + ; $01 (0 enemies)
0AADB 01                        	.db (+ - $)
0AADC                           
0AADC                           ; Page 1
0AADC                           +	distTo + ; $01 (0 enemies)
0AADC 01                        	.db (+ - $)
0AADD                           
0AADD                           ; Page 2
0AADD                           +	distTo + ; $03 (1 enemy)
0AADD 03                        	.db (+ - $)
0AADE                           	enemy $5, $8, Enemy_Autobomb
0AADE 26 58                     	.db Enemy_Autobomb, $5 << 4 | $8
0AAE0                           
0AAE0                           ; Page 3
0AAE0                           +	distTo + ; $01 (0 enemies)
0AAE0 01                        	.db (+ - $)
0AAE1                           
0AAE1                           ; Page 4
0AAE1                           +	distTo + ; $07 (3 enemies)
0AAE1 07                        	.db (+ - $)
0AAE2                           	enemy $0, $A, Enemy_Flurry
0AAE2 29 0A                     	.db Enemy_Flurry, $0 << 4 | $A
0AAE4                           	enemy $5, $8, Enemy_Autobomb
0AAE4 26 58                     	.db Enemy_Autobomb, $5 << 4 | $8
0AAE6                           	enemy $9, $A, Enemy_Flurry
0AAE6 29 9A                     	.db Enemy_Flurry, $9 << 4 | $A
0AAE8                           
0AAE8                           ; Page 5
0AAE8                           +	distTo + ; $05 (2 enemies)
0AAE8 05                        	.db (+ - $)
0AAE9                           	enemy $3, $A, Enemy_Flurry
0AAE9 29 3A                     	.db Enemy_Flurry, $3 << 4 | $A
0AAEB                           	enemy $D, $C, Enemy_Flurry
0AAEB 29 DC                     	.db Enemy_Flurry, $D << 4 | $C
0AAED                           
0AAED                           ; Page 6
0AAED                           +	distTo + ; $03 (1 enemy)
0AAED 03                        	.db (+ - $)
0AAEE                           	enemy $F, $6, Enemy_Autobomb
0AAEE 26 F6                     	.db Enemy_Autobomb, $F << 4 | $6
0AAF0                           
0AAF0                           ; Page 7
0AAF0                           +	distTo + ; $01 (0 enemies)
0AAF0 01                        	.db (+ - $)
0AAF1                           
0AAF1                           ; Page 8
0AAF1                           +	distTo + ; $05 (2 enemies)
0AAF1 05                        	.db (+ - $)
0AAF2                           	enemy $3, $C, Enemy_Flurry
0AAF2 29 3C                     	.db Enemy_Flurry, $3 << 4 | $C
0AAF4                           	enemy $D, $7, Enemy_Autobomb
0AAF4 26 D7                     	.db Enemy_Autobomb, $D << 4 | $7
0AAF6                           
0AAF6                           ; Page 9
0AAF6                           +	distTo + ; $05 (2 enemies)
0AAF6 05                        	.db (+ - $)
0AAF7                           	enemy $8, $5, Enemy_CrystalBall
0AAF7 44 85                     	.db Enemy_CrystalBall, $8 << 4 | $5
0AAF9                           	enemy $D, $4, Enemy_HawkmouthLeft
0AAF9 43 D4                     	.db Enemy_HawkmouthLeft, $D << 4 | $4
0AAFB                           
0AAFB                           ; Page A
0AAFB                           +	distTo + ; $01 (0 enemies)
0AAFB 01                        	.db (+ - $)
0AAFC                           
0AAFC                           ; End of enemy data
0AAFC                           +
0AAFC                           include "src/levels/4/4-1/4-1-area2-enemies.asm"
0AAFC                           ; Level 4-1, Area 2
0AAFC                           
0AAFC                           EnemyData_Level_4_1_Area2:
0AAFC                           
0AAFC                           ; This area is unused...
0AAFC                           ; it has another lonely Boss Birdo...
0AAFC                           ; and a fucking billion empty pages.
0AAFC                           ; Nintendo, what were you on???
0AAFC                           
0AAFC                           ; Page 0
0AAFC                           	distTo + ; $01 (0 enemies)
0AAFC 01                        	.db (+ - $)
0AAFD                           
0AAFD                           ; Page 1
0AAFD                           +	distTo + ; $03 (1 enemy)
0AAFD 03                        	.db (+ - $)
0AAFE                           	enemy $B, $8, Enemy_BossBirdo
0AAFE 5C B8                     	.db Enemy_BossBirdo, $B << 4 | $8
0AB00                           
0AB00                           ; Page 2
0AB00                           +	distTo + ; $01 (0 enemies)
0AB00 01                        	.db (+ - $)
0AB01                           
0AB01                           ; Page 3
0AB01                           +	distTo + ; $01 (0 enemies)
0AB01 01                        	.db (+ - $)
0AB02                           
0AB02                           ; Page 4
0AB02                           +	distTo + ; $01 (0 enemies)
0AB02 01                        	.db (+ - $)
0AB03                           
0AB03                           ; Page 5
0AB03                           +	distTo + ; $01 (0 enemies)
0AB03 01                        	.db (+ - $)
0AB04                           
0AB04                           ; Page 6
0AB04                           +	distTo + ; $01 (0 enemies)
0AB04 01                        	.db (+ - $)
0AB05                           
0AB05                           ; Page 7
0AB05                           +	distTo + ; $01 (0 enemies)
0AB05 01                        	.db (+ - $)
0AB06                           
0AB06                           ; Page 8
0AB06                           +	distTo + ; $01 (0 enemies)
0AB06 01                        	.db (+ - $)
0AB07                           
0AB07                           ; Page 9
0AB07                           +	distTo + ; $01 (0 enemies)
0AB07 01                        	.db (+ - $)
0AB08                           
0AB08                           ; Page A
0AB08                           +	distTo + ; $01 (0 enemies)
0AB08 01                        	.db (+ - $)
0AB09                           
0AB09                           ; Page B
0AB09                           +	distTo + ; $01 (0 enemies)
0AB09 01                        	.db (+ - $)
0AB0A                           
0AB0A                           ; Page C
0AB0A                           +	distTo + ; $01 (0 enemies)
0AB0A 01                        	.db (+ - $)
0AB0B                           
0AB0B                           ; Page D
0AB0B                           +	distTo + ; $01 (0 enemies)
0AB0B 01                        	.db (+ - $)
0AB0C                           
0AB0C                           ; Page E
0AB0C                           +	distTo + ; $01 (0 enemies)
0AB0C 01                        	.db (+ - $)
0AB0D                           
0AB0D                           ; Page F
0AB0D                           +	distTo + ; $01 (0 enemies)
0AB0D 01                        	.db (+ - $)
0AB0E                           
0AB0E                           ; Page 10
0AB0E                           +	distTo + ; $01 (0 enemies)
0AB0E 01                        	.db (+ - $)
0AB0F                           
0AB0F                           ; Page 11
0AB0F                           +	distTo + ; $01 (0 enemies)
0AB0F 01                        	.db (+ - $)
0AB10                           
0AB10                           ; Page 12
0AB10                           +	distTo + ; $01 (0 enemies)
0AB10 01                        	.db (+ - $)
0AB11                           
0AB11                           ; Page 13
0AB11                           +	distTo + ; $01 (0 enemies)
0AB11 01                        	.db (+ - $)
0AB12                           
0AB12                           ; Page 14
0AB12                           +	distTo + ; $01 (0 enemies)
0AB12 01                        	.db (+ - $)
0AB13                           
0AB13                           ; Page 15
0AB13                           +	distTo + ; $01 (0 enemies)
0AB13 01                        	.db (+ - $)
0AB14                           
0AB14                           ; Page 16
0AB14                           +	distTo + ; $01 (0 enemies)
0AB14 01                        	.db (+ - $)
0AB15                           
0AB15                           ; Page 17
0AB15                           +	distTo + ; $01 (0 enemies)
0AB15 01                        	.db (+ - $)
0AB16                           
0AB16                           ; Page 18
0AB16                           +	distTo + ; $01 (0 enemies)
0AB16 01                        	.db (+ - $)
0AB17                           
0AB17                           ; Page 19
0AB17                           +	distTo + ; $01 (0 enemies)
0AB17 01                        	.db (+ - $)
0AB18                           
0AB18                           ; Page 1A
0AB18                           +	distTo + ; $01 (0 enemies)
0AB18 01                        	.db (+ - $)
0AB19                           
0AB19                           ; Page 1B
0AB19                           +	distTo + ; $01 (0 enemies)
0AB19 01                        	.db (+ - $)
0AB1A                           
0AB1A                           ; Page 1C
0AB1A                           +	distTo + ; $01 (0 enemies)
0AB1A 01                        	.db (+ - $)
0AB1B                           
0AB1B                           ; Page 1D
0AB1B                           +	distTo + ; $01 (0 enemies)
0AB1B 01                        	.db (+ - $)
0AB1C                           
0AB1C                           ; Page 1E
0AB1C                           +	distTo + ; $01 (0 enemies)
0AB1C 01                        	.db (+ - $)
0AB1D                           
0AB1D                           ; Page 1F
0AB1D                           +	distTo + ; $01 (0 enemies)
0AB1D 01                        	.db (+ - $)
0AB1E                           
0AB1E                           ; Page 20
0AB1E                           +	distTo + ; $01 (0 enemies)
0AB1E 01                        	.db (+ - $)
0AB1F                           
0AB1F                           ; Page 21
0AB1F                           +	distTo + ; $01 (0 enemies)
0AB1F 01                        	.db (+ - $)
0AB20                           
0AB20                           ; Page 22
0AB20                           +	distTo + ; $01 (0 enemies)
0AB20 01                        	.db (+ - $)
0AB21                           
0AB21                           ; Page 23
0AB21                           +	distTo + ; $01 (0 enemies)
0AB21 01                        	.db (+ - $)
0AB22                           
0AB22                           ; Page 24
0AB22                           +	distTo + ; $01 (0 enemies)
0AB22 01                        	.db (+ - $)
0AB23                           
0AB23                           ; Page 25
0AB23                           +	distTo + ; $01 (0 enemies)
0AB23 01                        	.db (+ - $)
0AB24                           
0AB24                           ; Page 26
0AB24                           +	distTo + ; $01 (0 enemies)
0AB24 01                        	.db (+ - $)
0AB25                           
0AB25                           ; Page 27
0AB25                           +	distTo + ; $01 (0 enemies)
0AB25 01                        	.db (+ - $)
0AB26                           
0AB26                           ; Page 28
0AB26                           +	distTo + ; $01 (0 enemies)
0AB26 01                        	.db (+ - $)
0AB27                           
0AB27                           ; Page 29
0AB27                           +	distTo + ; $01 (0 enemies)
0AB27 01                        	.db (+ - $)
0AB28                           
0AB28                           ; Page 2A
0AB28                           +	distTo + ; $01 (0 enemies)
0AB28 01                        	.db (+ - $)
0AB29                           
0AB29                           ; Page 2B
0AB29                           +	distTo + ; $01 (0 enemies)
0AB29 01                        	.db (+ - $)
0AB2A                           
0AB2A                           ; End of enemy data
0AB2A                           +
0AB2A                           
0AB2A                           ; World 4-2
0AB2A                           include "src/levels/4/4-2/4-2-area0-enemies.asm"
0AB2A                           ; Level 4-2, Area 0
0AB2A                           
0AB2A                           EnemyData_Level_4_2_Area0:
0AB2A                           
0AB2A                           ; Page 0
0AB2A                           	distTo + ; $03 (1 enemy)
0AB2A 03                        	.db (+ - $)
0AB2B                           	enemy $4, $7, Enemy_HawkmouthRight
0AB2B 42 47                     	.db Enemy_HawkmouthRight, $4 << 4 | $7
0AB2D                           
0AB2D                           ; Page 1
0AB2D                           +	distTo + ; $01 (0 enemies)
0AB2D 01                        	.db (+ - $)
0AB2E                           
0AB2E                           ; Page 2
0AB2E                           +	distTo + ; $01 (0 enemies)
0AB2E 01                        	.db (+ - $)
0AB2F                           
0AB2F                           ; End of enemy data
0AB2F                           +
0AB2F                           include "src/levels/4/4-2/4-2-area1-enemies.asm"
0AB2F                           ; Level 4-2, Area 1
0AB2F                           
0AB2F                           EnemyData_Level_4_2_Area1:
0AB2F                           
0AB2F                           ; Page 0
0AB2F                           	distTo + ; $05 (2 enemies)
0AB2F 05                        	.db (+ - $)
0AB30                           	enemy $D, $3, Enemy_BeezoStraight
0AB30 10 D3                     	.db Enemy_BeezoStraight, $D << 4 | $3
0AB32                           	enemy $F, $5, Enemy_BeezoStraight
0AB32 10 F5                     	.db Enemy_BeezoStraight, $F << 4 | $5
0AB34                           
0AB34                           ; Page 1
0AB34                           +	distTo + ; $03 (1 enemy)
0AB34 03                        	.db (+ - $)
0AB35                           	enemy $D, $8, Enemy_BeezoStraight
0AB35 10 D8                     	.db Enemy_BeezoStraight, $D << 4 | $8
0AB37                           
0AB37                           ; Page 2
0AB37                           +	distTo + ; $09 (4 enemies)
0AB37 09                        	.db (+ - $)
0AB38                           	enemy $1, $6, Enemy_BeezoStraight
0AB38 10 16                     	.db Enemy_BeezoStraight, $1 << 4 | $6
0AB3A                           	enemy $3, $7, Enemy_BeezoStraight
0AB3A 10 37                     	.db Enemy_BeezoStraight, $3 << 4 | $7
0AB3C                           	enemy $4, $4, Enemy_BeezoStraight
0AB3C 10 44                     	.db Enemy_BeezoStraight, $4 << 4 | $4
0AB3E                           	enemy $7, $8, Enemy_BeezoStraight
0AB3E 10 78                     	.db Enemy_BeezoStraight, $7 << 4 | $8
0AB40                           
0AB40                           ; Page 3
0AB40                           +	distTo + ; $0B (5 enemies)
0AB40 0B                        	.db (+ - $)
0AB41                           	enemy $6, $7, Enemy_BeezoStraight
0AB41 10 67                     	.db Enemy_BeezoStraight, $6 << 4 | $7
0AB43                           	enemy $9, $8, Enemy_BeezoStraight
0AB43 10 98                     	.db Enemy_BeezoStraight, $9 << 4 | $8
0AB45                           	enemy $C, $7, Enemy_BeezoStraight
0AB45 10 C7                     	.db Enemy_BeezoStraight, $C << 4 | $7
0AB47                           	enemy $E, $4, Enemy_BeezoStraight
0AB47 10 E4                     	.db Enemy_BeezoStraight, $E << 4 | $4
0AB49                           	enemy $F, $8, Enemy_BeezoStraight
0AB49 10 F8                     	.db Enemy_BeezoStraight, $F << 4 | $8
0AB4B                           
0AB4B                           ; Page 4
0AB4B                           +	distTo + ; $07 (3 enemies)
0AB4B 07                        	.db (+ - $)
0AB4C                           	enemy $C, $8, Enemy_Flurry
0AB4C 29 C8                     	.db Enemy_Flurry, $C << 4 | $8
0AB4E                           	enemy $E, $8, Enemy_Flurry
0AB4E 29 E8                     	.db Enemy_Flurry, $E << 4 | $8
0AB50                           	enemy $F, $3, Enemy_BeezoStraight
0AB50 10 F3                     	.db Enemy_BeezoStraight, $F << 4 | $3
0AB52                           
0AB52                           ; Page 5
0AB52                           +	distTo + ; $05 (2 enemies)
0AB52 05                        	.db (+ - $)
0AB53                           	enemy $A, $6, Enemy_BeezoStraight
0AB53 10 A6                     	.db Enemy_BeezoStraight, $A << 4 | $6
0AB55                           	enemy $D, $8, Enemy_BeezoStraight
0AB55 10 D8                     	.db Enemy_BeezoStraight, $D << 4 | $8
0AB57                           
0AB57                           ; Page 6
0AB57                           +	distTo + ; $0B (5 enemies)
0AB57 0B                        	.db (+ - $)
0AB58                           	enemy $3, $7, Enemy_BeezoStraight
0AB58 10 37                     	.db Enemy_BeezoStraight, $3 << 4 | $7
0AB5A                           	enemy $5, $3, Enemy_BeezoStraight
0AB5A 10 53                     	.db Enemy_BeezoStraight, $5 << 4 | $3
0AB5C                           	enemy $9, $5, Enemy_BeezoStraight
0AB5C 10 95                     	.db Enemy_BeezoStraight, $9 << 4 | $5
0AB5E                           	enemy $D, $8, Enemy_BeezoStraight
0AB5E 10 D8                     	.db Enemy_BeezoStraight, $D << 4 | $8
0AB60                           	enemy $F, $4, Enemy_BeezoStraight
0AB60 10 F4                     	.db Enemy_BeezoStraight, $F << 4 | $4
0AB62                           
0AB62                           ; Page 7
0AB62                           +	distTo + ; $0B (5 enemies)
0AB62 0B                        	.db (+ - $)
0AB63                           	enemy $3, $A, Enemy_BeezoStraight
0AB63 10 3A                     	.db Enemy_BeezoStraight, $3 << 4 | $A
0AB65                           	enemy $5, $6, Enemy_BeezoStraight
0AB65 10 56                     	.db Enemy_BeezoStraight, $5 << 4 | $6
0AB67                           	enemy $7, $B, Enemy_BeezoStraight
0AB67 10 7B                     	.db Enemy_BeezoStraight, $7 << 4 | $B
0AB69                           	enemy $8, $4, Enemy_BeezoStraight
0AB69 10 84                     	.db Enemy_BeezoStraight, $8 << 4 | $4
0AB6B                           	enemy $F, $7, Enemy_BeezoStraight
0AB6B 10 F7                     	.db Enemy_BeezoStraight, $F << 4 | $7
0AB6D                           
0AB6D                           ; Page 8
0AB6D                           +	distTo + ; $07 (3 enemies)
0AB6D 07                        	.db (+ - $)
0AB6E                           	enemy $2, $3, Enemy_BeezoStraight
0AB6E 10 23                     	.db Enemy_BeezoStraight, $2 << 4 | $3
0AB70                           	enemy $6, $6, Enemy_BeezoStraight
0AB70 10 66                     	.db Enemy_BeezoStraight, $6 << 4 | $6
0AB72                           	enemy $B, $8, Enemy_Flurry
0AB72 29 B8                     	.db Enemy_Flurry, $B << 4 | $8
0AB74                           
0AB74                           ; Page 9
0AB74                           +	distTo + ; $01 (0 enemies)
0AB74 01                        	.db (+ - $)
0AB75                           
0AB75                           ; Page A
0AB75                           +	distTo + ; $01 (0 enemies)
0AB75 01                        	.db (+ - $)
0AB76                           
0AB76                           ; End of enemy data
0AB76                           +
0AB76                           include "src/levels/4/4-2/4-2-area2-enemies.asm"
0AB76                           ; Level 4-2, Area 2
0AB76                           
0AB76                           EnemyData_Level_4_2_Area2:
0AB76                           
0AB76                           ; Page 0
0AB76                           	distTo + ; $01 (0 enemies)
0AB76 01                        	.db (+ - $)
0AB77                           
0AB77                           ; Page 1
0AB77                           +	distTo + ; $03 (1 enemy)
0AB77 03                        	.db (+ - $)
0AB78                           	enemy $6, $A, Enemy_WhaleSpout
0AB78 28 6A                     	.db Enemy_WhaleSpout, $6 << 4 | $A
0AB7A                           
0AB7A                           ; Page 2
0AB7A                           +	distTo + ; $05 (2 enemies)
0AB7A 05                        	.db (+ - $)
0AB7B                           	enemy $7, $A, Enemy_WhaleSpout
0AB7B 28 7A                     	.db Enemy_WhaleSpout, $7 << 4 | $A
0AB7D                           	enemy $F, $A, Enemy_WhaleSpout
0AB7D 28 FA                     	.db Enemy_WhaleSpout, $F << 4 | $A
0AB7F                           
0AB7F                           ; Page 3
0AB7F                           +	distTo + ; $01 (0 enemies)
0AB7F 01                        	.db (+ - $)
0AB80                           
0AB80                           ; Page 4
0AB80                           +	distTo + ; $03 (1 enemy)
0AB80 03                        	.db (+ - $)
0AB81                           	enemy $D, $A, Enemy_WhaleSpout
0AB81 28 DA                     	.db Enemy_WhaleSpout, $D << 4 | $A
0AB83                           
0AB83                           ; Page 5
0AB83                           +	distTo + ; $05 (2 enemies)
0AB83 05                        	.db (+ - $)
0AB84                           	enemy $6, $9, Enemy_WhaleSpout
0AB84 28 69                     	.db Enemy_WhaleSpout, $6 << 4 | $9
0AB86                           	enemy $9, $8, Enemy_SnifitPink
0AB86 07 98                     	.db Enemy_SnifitPink, $9 << 4 | $8
0AB88                           
0AB88                           ; Page 6
0AB88                           +	distTo + ; $09 (4 enemies)
0AB88 09                        	.db (+ - $)
0AB89                           	enemy $2, $A, Enemy_WhaleSpout
0AB89 28 2A                     	.db Enemy_WhaleSpout, $2 << 4 | $A
0AB8B                           	enemy $3, $9, Enemy_ShyguyPink
0AB8B 03 39                     	.db Enemy_ShyguyPink, $3 << 4 | $9
0AB8D                           	enemy $B, $A, Enemy_WhaleSpout
0AB8D 28 BA                     	.db Enemy_WhaleSpout, $B << 4 | $A
0AB8F                           	enemy $C, $9, Enemy_ShyguyPink
0AB8F 03 C9                     	.db Enemy_ShyguyPink, $C << 4 | $9
0AB91                           
0AB91                           ; Page 7
0AB91                           +	distTo + ; $05 (2 enemies)
0AB91 05                        	.db (+ - $)
0AB92                           	enemy $6, $9, Enemy_WhaleSpout
0AB92 28 69                     	.db Enemy_WhaleSpout, $6 << 4 | $9
0AB94                           	enemy $8, $8, Enemy_ShyguyPink
0AB94 03 88                     	.db Enemy_ShyguyPink, $8 << 4 | $8
0AB96                           
0AB96                           ; Page 8
0AB96                           +	distTo + ; $05 (2 enemies)
0AB96 05                        	.db (+ - $)
0AB97                           	enemy $A, $9, Enemy_WhaleSpout
0AB97 28 A9                     	.db Enemy_WhaleSpout, $A << 4 | $9
0AB99                           	enemy $D, $3, Enemy_Flurry
0AB99 29 D3                     	.db Enemy_Flurry, $D << 4 | $3
0AB9B                           
0AB9B                           ; Page 9
0AB9B                           +	distTo + ; $01 (0 enemies)
0AB9B 01                        	.db (+ - $)
0AB9C                           
0AB9C                           ; Page A
0AB9C                           +	distTo + ; $01 (0 enemies)
0AB9C 01                        	.db (+ - $)
0AB9D                           
0AB9D                           ; End of enemy data
0AB9D                           +
0AB9D                           include "src/levels/4/4-2/4-2-area3-enemies.asm"
0AB9D                           ; Level 4-2, Area 3
0AB9D                           
0AB9D                           EnemyData_Level_4_2_Area3:
0AB9D                           
0AB9D                           ; Page 0
0AB9D                           	distTo + ; $01 (0 enemies)
0AB9D 01                        	.db (+ - $)
0AB9E                           
0AB9E                           ; Page 1
0AB9E                           +	distTo + ; $03 (1 enemy)
0AB9E 03                        	.db (+ - $)
0AB9F                           	enemy $C, $7, Enemy_Autobomb
0AB9F 26 C7                     	.db Enemy_Autobomb, $C << 4 | $7
0ABA1                           
0ABA1                           ; Page 2
0ABA1                           +	distTo + ; $01 (0 enemies)
0ABA1 01                        	.db (+ - $)
0ABA2                           
0ABA2                           ; Page 3
0ABA2                           +	distTo + ; $05 (2 enemies)
0ABA2 05                        	.db (+ - $)
0ABA3                           	enemy $9, $9, Enemy_Porcupo
0ABA3 04 99                     	.db Enemy_Porcupo, $9 << 4 | $9
0ABA5                           	enemy $C, $9, Enemy_Porcupo
0ABA5 04 C9                     	.db Enemy_Porcupo, $C << 4 | $9
0ABA7                           
0ABA7                           ; Page 4
0ABA7                           +	distTo + ; $01 (0 enemies)
0ABA7 01                        	.db (+ - $)
0ABA8                           
0ABA8                           ; End of enemy data
0ABA8                           +
0ABA8                           include "src/levels/4/4-2/4-2-area4-enemies.asm"
0ABA8                           ; Level 4-2, Area 4
0ABA8                           
0ABA8                           EnemyData_Level_4_2_Area4:
0ABA8                           
0ABA8                           ; Page 0
0ABA8                           	distTo + ; $01 (0 enemies)
0ABA8 01                        	.db (+ - $)
0ABA9                           
0ABA9                           ; Page 1
0ABA9                           +	distTo + ; $05 (2 enemies)
0ABA9 05                        	.db (+ - $)
0ABAA                           	enemy $B, $8, Enemy_Birdo
0ABAA 1C B8                     	.db Enemy_Birdo, $B << 4 | $8
0ABAC                           	enemy $B, $9, Enemy_CrystalBall
0ABAC 44 B9                     	.db Enemy_CrystalBall, $B << 4 | $9
0ABAE                           
0ABAE                           ; Page 2
0ABAE                           +	distTo + ; $03 (1 enemy)
0ABAE 03                        	.db (+ - $)
0ABAF                           	enemy $B, $A, Enemy_HawkmouthLeft
0ABAF 43 BA                     	.db Enemy_HawkmouthLeft, $B << 4 | $A
0ABB1                           
0ABB1                           ; Page 3
0ABB1                           +	distTo + ; $01 (0 enemies)
0ABB1 01                        	.db (+ - $)
0ABB2                           
0ABB2                           ; Page 4
0ABB2                           +	distTo + ; $01 (0 enemies)
0ABB2 01                        	.db (+ - $)
0ABB3                           
0ABB3                           ; Page 5
0ABB3                           +	distTo + ; $01 (0 enemies)
0ABB3 01                        	.db (+ - $)
0ABB4                           
0ABB4                           ; Page 6
0ABB4                           +	distTo + ; $01 (0 enemies)
0ABB4 01                        	.db (+ - $)
0ABB5                           
0ABB5                           ; Page 7
0ABB5                           +	distTo + ; $01 (0 enemies)
0ABB5 01                        	.db (+ - $)
0ABB6                           
0ABB6                           ; Page 8
0ABB6                           +	distTo + ; $01 (0 enemies)
0ABB6 01                        	.db (+ - $)
0ABB7                           
0ABB7                           ; End of enemy data
0ABB7                           +
0ABB7                           
0ABB7                           ; World 4-3
0ABB7                           include "src/levels/4/4-3/4-3-area0-enemies.asm"
0ABB7                           ; Level 4-3, Area 0
0ABB7                           
0ABB7                           EnemyData_Level_4_3_Area0:
0ABB7                           
0ABB7                           ; Page 0
0ABB7                           	distTo + ; $03 (1 enemy)
0ABB7 03                        	.db (+ - $)
0ABB8                           	enemy $2, $A, Enemy_HawkmouthRight
0ABB8 42 2A                     	.db Enemy_HawkmouthRight, $2 << 4 | $A
0ABBA                           
0ABBA                           ; Page 1
0ABBA                           +	distTo + ; $01 (0 enemies)
0ABBA 01                        	.db (+ - $)
0ABBB                           
0ABBB                           ; End of enemy data
0ABBB                           +
0ABBB                           include "src/levels/4/4-3/4-3-area1-enemies.asm"
0ABBB                           ; Level 4-3, Area 1
0ABBB                           
0ABBB                           EnemyData_Level_4_3_Area1:
0ABBB                           
0ABBB                           ; Page 0
0ABBB                           	distTo + ; $01 (0 enemies)
0ABBB 01                        	.db (+ - $)
0ABBC                           
0ABBC                           ; Page 1
0ABBC                           +	distTo + ; $03 (1 enemy)
0ABBC 03                        	.db (+ - $)
0ABBD                           	enemy $A, $9, Enemy_Birdo
0ABBD 1C A9                     	.db Enemy_Birdo, $A << 4 | $9
0ABBF                           
0ABBF                           ; Page 2
0ABBF                           +	distTo + ; $01 (0 enemies)
0ABBF 01                        	.db (+ - $)
0ABC0                           
0ABC0                           ; Page 3
0ABC0                           +	distTo + ; $01 (0 enemies)
0ABC0 01                        	.db (+ - $)
0ABC1                           
0ABC1                           ; Page 4
0ABC1                           +	distTo + ; $01 (0 enemies)
0ABC1 01                        	.db (+ - $)
0ABC2                           
0ABC2                           ; Page 5
0ABC2                           +	distTo + ; $01 (0 enemies)
0ABC2 01                        	.db (+ - $)
0ABC3                           
0ABC3                           ; Page 6
0ABC3                           +	distTo + ; $01 (0 enemies)
0ABC3 01                        	.db (+ - $)
0ABC4                           
0ABC4                           ; Page 7
0ABC4                           +	distTo + ; $01 (0 enemies)
0ABC4 01                        	.db (+ - $)
0ABC5                           
0ABC5                           ; Page 8
0ABC5                           +	distTo + ; $01 (0 enemies)
0ABC5 01                        	.db (+ - $)
0ABC6                           
0ABC6                           ; Page 9
0ABC6                           +	distTo + ; $03 (1 enemy)
0ABC6 03                        	.db (+ - $)
0ABC7                           	enemy $1, $8, Enemy_BeezoStraight
0ABC7 10 18                     	.db Enemy_BeezoStraight, $1 << 4 | $8
0ABC9                           
0ABC9                           ; Page A
0ABC9                           +	distTo + ; $01 (0 enemies)
0ABC9 01                        	.db (+ - $)
0ABCA                           
0ABCA                           ; End of enemy data
0ABCA                           +
0ABCA                           include "src/levels/4/4-3/4-3-area2-enemies.asm"
0ABCA                           ; Level 4-3, Area 2
0ABCA                           
0ABCA                           EnemyData_Level_4_3_Area2:
0ABCA                           
0ABCA                           ; Page 0
0ABCA                           	distTo + ; $09 (4 enemies)
0ABCA 09                        	.db (+ - $)
0ABCB                           	enemy $E, $A, Enemy_Flurry
0ABCB 29 EA                     	.db Enemy_Flurry, $E << 4 | $A
0ABCD                           	enemy $E, $C, Enemy_Flurry
0ABCD 29 EC                     	.db Enemy_Flurry, $E << 4 | $C
0ABCF                           	enemy $D, $E, Enemy_Flurry
0ABCF 29 DE                     	.db Enemy_Flurry, $D << 4 | $E
0ABD1                           	enemy $E, $E, Enemy_Flurry
0ABD1 29 EE                     	.db Enemy_Flurry, $E << 4 | $E
0ABD3                           
0ABD3                           ; Page 1
0ABD3                           +	distTo + ; $03 (1 enemy)
0ABD3 03                        	.db (+ - $)
0ABD4                           	enemy $E, $E, Enemy_Flurry
0ABD4 29 EE                     	.db Enemy_Flurry, $E << 4 | $E
0ABD6                           
0ABD6                           ; Page 2
0ABD6                           +	distTo + ; $05 (2 enemies)
0ABD6 05                        	.db (+ - $)
0ABD7                           	enemy $E, $0, Enemy_Flurry
0ABD7 29 E0                     	.db Enemy_Flurry, $E << 4 | $0
0ABD9                           	enemy $E, $2, Enemy_Flurry
0ABD9 29 E2                     	.db Enemy_Flurry, $E << 4 | $2
0ABDB                           
0ABDB                           ; Page 3
0ABDB                           +	distTo + ; $03 (1 enemy)
0ABDB 03                        	.db (+ - $)
0ABDC                           	enemy $8, $C, Enemy_Flurry
0ABDC 29 8C                     	.db Enemy_Flurry, $8 << 4 | $C
0ABDE                           
0ABDE                           ; Page 4
0ABDE                           +	distTo + ; $09 (4 enemies)
0ABDE 09                        	.db (+ - $)
0ABDF                           	enemy $9, $2, Enemy_Flurry
0ABDF 29 92                     	.db Enemy_Flurry, $9 << 4 | $2
0ABE1                           	enemy $B, $2, Enemy_Flurry
0ABE1 29 B2                     	.db Enemy_Flurry, $B << 4 | $2
0ABE3                           	enemy $E, $9, Enemy_Flurry
0ABE3 29 E9                     	.db Enemy_Flurry, $E << 4 | $9
0ABE5                           	enemy $E, $B, Enemy_Flurry
0ABE5 29 EB                     	.db Enemy_Flurry, $E << 4 | $B
0ABE7                           
0ABE7                           ; Page 5
0ABE7                           +	distTo + ; $05 (2 enemies)
0ABE7 05                        	.db (+ - $)
0ABE8                           	enemy $7, $1, Enemy_Flurry
0ABE8 29 71                     	.db Enemy_Flurry, $7 << 4 | $1
0ABEA                           	enemy $E, $4, Enemy_Flurry
0ABEA 29 E4                     	.db Enemy_Flurry, $E << 4 | $4
0ABEC                           
0ABEC                           ; Page 6
0ABEC                           +	distTo + ; $01 (0 enemies)
0ABEC 01                        	.db (+ - $)
0ABED                           
0ABED                           ; Page 7
0ABED                           +	distTo + ; $01 (0 enemies)
0ABED 01                        	.db (+ - $)
0ABEE                           
0ABEE                           ; Page 8
0ABEE                           +	distTo + ; $01 (0 enemies)
0ABEE 01                        	.db (+ - $)
0ABEF                           
0ABEF                           ; Page 9
0ABEF                           +	distTo + ; $01 (0 enemies)
0ABEF 01                        	.db (+ - $)
0ABF0                           
0ABF0                           ; Page A
0ABF0                           +	distTo + ; $01 (0 enemies)
0ABF0 01                        	.db (+ - $)
0ABF1                           
0ABF1                           ; End of enemy data
0ABF1                           +
0ABF1                           include "src/levels/4/4-3/4-3-area3-enemies.asm"
0ABF1                           ; Level 4-3, Area 3
0ABF1                           
0ABF1                           EnemyData_Level_4_3_Area3:
0ABF1                           
0ABF1                           ; Page 0
0ABF1                           	distTo + ; $07 (3 enemies)
0ABF1 07                        	.db (+ - $)
0ABF2                           	enemy $C, $8, Enemy_ShyguyRed
0ABF2 01 C8                     	.db Enemy_ShyguyRed, $C << 4 | $8
0ABF4                           	enemy $D, $8, Enemy_ShyguyPink
0ABF4 03 D8                     	.db Enemy_ShyguyPink, $D << 4 | $8
0ABF6                           	enemy $E, $8, Enemy_Tweeter
0ABF6 02 E8                     	.db Enemy_Tweeter, $E << 4 | $8
0ABF8                           
0ABF8                           ; Page 1
0ABF8                           +	distTo + ; $01 (0 enemies)
0ABF8 01                        	.db (+ - $)
0ABF9                           
0ABF9                           ; Page 2
0ABF9                           +	distTo + ; $01 (0 enemies)
0ABF9 01                        	.db (+ - $)
0ABFA                           
0ABFA                           ; Page 3
0ABFA                           +	distTo + ; $01 (0 enemies)
0ABFA 01                        	.db (+ - $)
0ABFB                           
0ABFB                           ; Page 4
0ABFB                           +	distTo + ; $07 (3 enemies)
0ABFB 07                        	.db (+ - $)
0ABFC                           	enemy $7, $2, Enemy_Flurry
0ABFC 29 72                     	.db Enemy_Flurry, $7 << 4 | $2
0ABFE                           	enemy $8, $2, Enemy_Flurry
0ABFE 29 82                     	.db Enemy_Flurry, $8 << 4 | $2
0AC00                           	enemy $7, $E, Enemy_Flurry
0AC00 29 7E                     	.db Enemy_Flurry, $7 << 4 | $E
0AC02                           
0AC02                           ; Page 5
0AC02                           +	distTo + ; $01 (0 enemies)
0AC02 01                        	.db (+ - $)
0AC03                           
0AC03                           ; Page 6
0AC03                           +	distTo + ; $03 (1 enemy)
0AC03 03                        	.db (+ - $)
0AC04                           	enemy $C, $1, Enemy_Flurry
0AC04 29 C1                     	.db Enemy_Flurry, $C << 4 | $1
0AC06                           
0AC06                           ; Page 7
0AC06                           +	distTo + ; $01 (0 enemies)
0AC06 01                        	.db (+ - $)
0AC07                           
0AC07                           ; Page 8
0AC07                           +	distTo + ; $01 (0 enemies)
0AC07 01                        	.db (+ - $)
0AC08                           
0AC08                           ; Page 9
0AC08                           +	distTo + ; $01 (0 enemies)
0AC08 01                        	.db (+ - $)
0AC09                           
0AC09                           ; Page A
0AC09                           +	distTo + ; $01 (0 enemies)
0AC09 01                        	.db (+ - $)
0AC0A                           
0AC0A                           ; End of enemy data
0AC0A                           +
0AC0A                           include "src/levels/4/4-3/4-3-area4-enemies.asm"
0AC0A                           ; Level 4-3, Area 4
0AC0A                           
0AC0A                           EnemyData_Level_4_3_Area4:
0AC0A                           
0AC0A                           ; Page 0
0AC0A                           	distTo + ; $01 (0 enemies)
0AC0A 01                        	.db (+ - $)
0AC0B                           
0AC0B                           ; Page 1
0AC0B                           +	distTo + ; $01 (0 enemies)
0AC0B 01                        	.db (+ - $)
0AC0C                           
0AC0C                           ; Page 2
0AC0C                           +	distTo + ; $01 (0 enemies)
0AC0C 01                        	.db (+ - $)
0AC0D                           
0AC0D                           ; Page 3
0AC0D                           +	distTo + ; $01 (0 enemies)
0AC0D 01                        	.db (+ - $)
0AC0E                           
0AC0E                           ; Page 4
0AC0E                           +	distTo + ; $01 (0 enemies)
0AC0E 01                        	.db (+ - $)
0AC0F                           
0AC0F                           ; Page 5
0AC0F                           +	distTo + ; $01 (0 enemies)
0AC0F 01                        	.db (+ - $)
0AC10                           
0AC10                           ; Page 6
0AC10                           +	distTo + ; $01 (0 enemies)
0AC10 01                        	.db (+ - $)
0AC11                           
0AC11                           ; Page 7
0AC11                           +	distTo + ; $01 (0 enemies)
0AC11 01                        	.db (+ - $)
0AC12                           
0AC12                           ; Page 8
0AC12                           +	distTo + ; $01 (0 enemies)
0AC12 01                        	.db (+ - $)
0AC13                           
0AC13                           ; Page 9
0AC13                           +	distTo + ; $01 (0 enemies)
0AC13 01                        	.db (+ - $)
0AC14                           
0AC14                           ; Page A
0AC14                           +	distTo + ; $01 (0 enemies)
0AC14 01                        	.db (+ - $)
0AC15                           
0AC15                           ; End of enemy data
0AC15                           +
0AC15                           include "src/levels/4/4-3/4-3-area5-enemies.asm"
0AC15                           ; Level 4-3, Area 5
0AC15                           
0AC15                           EnemyData_Level_4_3_Area5:
0AC15                           
0AC15                           ; Page 0
0AC15                           	distTo + ; $09 (4 enemies)
0AC15 09                        	.db (+ - $)
0AC16                           	enemy $7, $2, Enemy_Phanto
0AC16 17 72                     	.db Enemy_Phanto, $7 << 4 | $2
0AC18                           	enemy $7, $4, Enemy_Key
0AC18 3D 74                     	.db Enemy_Key, $7 << 4 | $4
0AC1A                           	enemy $5, $7, Enemy_Flurry
0AC1A 29 57                     	.db Enemy_Flurry, $5 << 4 | $7
0AC1C                           	enemy $9, $7, Enemy_Flurry
0AC1C 29 97                     	.db Enemy_Flurry, $9 << 4 | $7
0AC1E                           
0AC1E                           ; Page 1
0AC1E                           +	distTo + ; $01 (0 enemies)
0AC1E 01                        	.db (+ - $)
0AC1F                           
0AC1F                           ; Page 2
0AC1F                           +	distTo + ; $01 (0 enemies)
0AC1F 01                        	.db (+ - $)
0AC20                           
0AC20                           ; Page 3
0AC20                           +	distTo + ; $01 (0 enemies)
0AC20 01                        	.db (+ - $)
0AC21                           
0AC21                           ; Page 4
0AC21                           +	distTo + ; $01 (0 enemies)
0AC21 01                        	.db (+ - $)
0AC22                           
0AC22                           ; Page 5
0AC22                           +	distTo + ; $01 (0 enemies)
0AC22 01                        	.db (+ - $)
0AC23                           
0AC23                           ; Page 6
0AC23                           +	distTo + ; $01 (0 enemies)
0AC23 01                        	.db (+ - $)
0AC24                           
0AC24                           ; Page 7
0AC24                           +	distTo + ; $01 (0 enemies)
0AC24 01                        	.db (+ - $)
0AC25                           
0AC25                           ; Page 8
0AC25                           +	distTo + ; $01 (0 enemies)
0AC25 01                        	.db (+ - $)
0AC26                           
0AC26                           ; Page 9
0AC26                           +	distTo + ; $01 (0 enemies)
0AC26 01                        	.db (+ - $)
0AC27                           
0AC27                           ; Page A
0AC27                           +	distTo + ; $01 (0 enemies)
0AC27 01                        	.db (+ - $)
0AC28                           
0AC28                           ; End of enemy data
0AC28                           +
0AC28                           include "src/levels/4/4-3/4-3-area6-enemies.asm"
0AC28                           ; Level 4-3, Area 6
0AC28                           
0AC28                           EnemyData_Level_4_3_Area6:
0AC28                           
0AC28                           ; Page 0
0AC28                           	distTo + ; $05 (2 enemies)
0AC28 05                        	.db (+ - $)
0AC29                           	enemy $6, $5, Enemy_Flurry
0AC29 29 65                     	.db Enemy_Flurry, $6 << 4 | $5
0AC2B                           	enemy $9, $5, Enemy_Flurry
0AC2B 29 95                     	.db Enemy_Flurry, $9 << 4 | $5
0AC2D                           
0AC2D                           ; Page 1
0AC2D                           +	distTo + ; $05 (2 enemies)
0AC2D 05                        	.db (+ - $)
0AC2E                           	enemy $2, $A, Enemy_CrystalBall
0AC2E 44 2A                     	.db Enemy_CrystalBall, $2 << 4 | $A
0AC30                           	enemy $8, $7, Enemy_HawkmouthLeft
0AC30 43 87                     	.db Enemy_HawkmouthLeft, $8 << 4 | $7
0AC32                           
0AC32                           ; Page 2
0AC32                           +	distTo + ; $01 (0 enemies)
0AC32 01                        	.db (+ - $)
0AC33                           
0AC33                           ; Page 3
0AC33                           +	distTo + ; $01 (0 enemies)
0AC33 01                        	.db (+ - $)
0AC34                           
0AC34                           ; Page 4
0AC34                           +	distTo + ; $01 (0 enemies)
0AC34 01                        	.db (+ - $)
0AC35                           
0AC35                           ; Page 5
0AC35                           +	distTo + ; $01 (0 enemies)
0AC35 01                        	.db (+ - $)
0AC36                           
0AC36                           ; Page 6
0AC36                           +	distTo + ; $01 (0 enemies)
0AC36 01                        	.db (+ - $)
0AC37                           
0AC37                           ; Page 7
0AC37                           +	distTo + ; $01 (0 enemies)
0AC37 01                        	.db (+ - $)
0AC38                           
0AC38                           ; Page 8
0AC38                           +	distTo + ; $01 (0 enemies)
0AC38 01                        	.db (+ - $)
0AC39                           
0AC39                           ; Page 9
0AC39                           +	distTo + ; $01 (0 enemies)
0AC39 01                        	.db (+ - $)
0AC3A                           
0AC3A                           ; Page A
0AC3A                           +	distTo + ; $01 (0 enemies)
0AC3A 01                        	.db (+ - $)
0AC3B                           
0AC3B                           ; End of enemy data
0AC3B                           +
0AC3B                           include "src/levels/4/4-3/4-3-area7-enemies.asm"
0AC3B                           ; Level 4-3, Area 7
0AC3B                           
0AC3B                           EnemyData_Level_4_3_Area7:
0AC3B                           
0AC3B                           ; Page 0
0AC3B                           	distTo + ; $03 (1 enemy)
0AC3B 03                        	.db (+ - $)
0AC3C                           	enemy $2, $4, Enemy_BossFryguy
0AC3C 6A 24                     	.db Enemy_BossFryguy, $2 << 4 | $4
0AC3E                           
0AC3E                           ; Page 1
0AC3E                           +	distTo + ; $01 (0 enemies)
0AC3E 01                        	.db (+ - $)
0AC3F                           
0AC3F                           ; Page 2
0AC3F                           +	distTo + ; $01 (0 enemies)
0AC3F 01                        	.db (+ - $)
0AC40                           
0AC40                           ; Page 3
0AC40                           +	distTo + ; $01 (0 enemies)
0AC40 01                        	.db (+ - $)
0AC41                           
0AC41                           ; Page 4
0AC41                           +	distTo + ; $01 (0 enemies)
0AC41 01                        	.db (+ - $)
0AC42                           
0AC42                           ; Page 5
0AC42                           +	distTo + ; $01 (0 enemies)
0AC42 01                        	.db (+ - $)
0AC43                           
0AC43                           ; Page 6
0AC43                           +	distTo + ; $01 (0 enemies)
0AC43 01                        	.db (+ - $)
0AC44                           
0AC44                           ; Page 7
0AC44                           +	distTo + ; $01 (0 enemies)
0AC44 01                        	.db (+ - $)
0AC45                           
0AC45                           ; Page 8
0AC45                           +	distTo + ; $01 (0 enemies)
0AC45 01                        	.db (+ - $)
0AC46                           
0AC46                           ; Page 9
0AC46                           +	distTo + ; $01 (0 enemies)
0AC46 01                        	.db (+ - $)
0AC47                           
0AC47                           ; Page A
0AC47                           +	distTo + ; $01 (0 enemies)
0AC47 01                        	.db (+ - $)
0AC48                           
0AC48                           ; End of enemy data
0AC48                           +
0AC48                           include "src/levels/4/4-3/4-3-area8-enemies.asm"
0AC48                           ; Level 4-3, Area 8
0AC48                           
0AC48                           EnemyData_Level_4_3_Area8:
0AC48                           
0AC48                           ; Page 0
0AC48                           	distTo + ; $01 (0 enemies)
0AC48 01                        	.db (+ - $)
0AC49                           
0AC49                           ; Page 1
0AC49                           +	distTo + ; $01 (0 enemies)
0AC49 01                        	.db (+ - $)
0AC4A                           
0AC4A                           ; Page 2
0AC4A                           +	distTo + ; $01 (0 enemies)
0AC4A 01                        	.db (+ - $)
0AC4B                           
0AC4B                           ; Page 3
0AC4B                           +	distTo + ; $01 (0 enemies)
0AC4B 01                        	.db (+ - $)
0AC4C                           
0AC4C                           ; Page 4
0AC4C                           +	distTo + ; $01 (0 enemies)
0AC4C 01                        	.db (+ - $)
0AC4D                           
0AC4D                           ; Page 5
0AC4D                           +	distTo + ; $01 (0 enemies)
0AC4D 01                        	.db (+ - $)
0AC4E                           
0AC4E                           ; Page 6
0AC4E                           +	distTo + ; $01 (0 enemies)
0AC4E 01                        	.db (+ - $)
0AC4F                           
0AC4F                           ; Page 7
0AC4F                           +	distTo + ; $01 (0 enemies)
0AC4F 01                        	.db (+ - $)
0AC50                           
0AC50                           ; Page 8
0AC50                           +	distTo + ; $01 (0 enemies)
0AC50 01                        	.db (+ - $)
0AC51                           
0AC51                           ; Page 9
0AC51                           +	distTo + ; $01 (0 enemies)
0AC51 01                        	.db (+ - $)
0AC52                           
0AC52                           ; Page A
0AC52                           +	distTo + ; $01 (0 enemies)
0AC52 01                        	.db (+ - $)
0AC53                           
0AC53                           ; End of enemy data
0AC53                           +
0AC53                           include "src/levels/4/4-3/4-3-area9-enemies.asm"
0AC53                           ; Level 4-3, Area 9
0AC53                           
0AC53                           EnemyData_Level_4_3_Area9:
0AC53                           
0AC53                           ; Page 0
0AC53                           	distTo + ; $01 (0 enemies)
0AC53 01                        	.db (+ - $)
0AC54                           
0AC54                           ; Page 1
0AC54                           +	distTo + ; $01 (0 enemies)
0AC54 01                        	.db (+ - $)
0AC55                           
0AC55                           ; Page 2
0AC55                           +	distTo + ; $01 (0 enemies)
0AC55 01                        	.db (+ - $)
0AC56                           
0AC56                           ; Page 3
0AC56                           +	distTo + ; $01 (0 enemies)
0AC56 01                        	.db (+ - $)
0AC57                           
0AC57                           ; Page 4
0AC57                           +	distTo + ; $01 (0 enemies)
0AC57 01                        	.db (+ - $)
0AC58                           
0AC58                           ; Page 5
0AC58                           +	distTo + ; $01 (0 enemies)
0AC58 01                        	.db (+ - $)
0AC59                           
0AC59                           ; Page 6
0AC59                           +	distTo + ; $01 (0 enemies)
0AC59 01                        	.db (+ - $)
0AC5A                           
0AC5A                           ; Page 7
0AC5A                           +	distTo + ; $01 (0 enemies)
0AC5A 01                        	.db (+ - $)
0AC5B                           
0AC5B                           ; Page 8
0AC5B                           +	distTo + ; $01 (0 enemies)
0AC5B 01                        	.db (+ - $)
0AC5C                           
0AC5C                           ; Page 9
0AC5C                           +	distTo + ; $01 (0 enemies)
0AC5C 01                        	.db (+ - $)
0AC5D                           
0AC5D                           ; Page A
0AC5D                           +	distTo + ; $01 (0 enemies)
0AC5D 01                        	.db (+ - $)
0AC5E                           
0AC5E                           ; End of enemy data
0AC5E                           +
0AC5E                           ; -------------------------------
0AC5E                           
0AC5E                           
0AC5E                           ; -------------------------------
0AC5E                           ; World 5
0AC5E                           
0AC5E                           ; World 5-1
0AC5E                           include "src/levels/5/5-1/5-1-area0-enemies.asm"
0AC5E                           ; Level 5-1, Area 0
0AC5E                           
0AC5E                           EnemyData_Level_5_1_Area0:
0AC5E                           
0AC5E                           ; Page 0
0AC5E                           	distTo + ; $03 (1 enemy)
0AC5E 03                        	.db (+ - $)
0AC5F                           	enemy $3, $1, Enemy_HawkmouthRight
0AC5F 42 31                     	.db Enemy_HawkmouthRight, $3 << 4 | $1
0AC61                           
0AC61                           ; Page 1
0AC61                           +	distTo + ; $03 (1 enemy)
0AC61 03                        	.db (+ - $)
0AC62                           	enemy $4, $5, Enemy_Ostro
0AC62 08 45                     	.db Enemy_Ostro, $4 << 4 | $5
0AC64                           
0AC64                           ; Page 2
0AC64                           +	distTo + ; $03 (1 enemy)
0AC64 03                        	.db (+ - $)
0AC65                           	enemy $5, $6, Enemy_PanserStationaryFiresAngled
0AC65 23 56                     	.db Enemy_PanserStationaryFiresAngled, $5 << 4 | $6
0AC67                           
0AC67                           ; Page 3
0AC67                           +	distTo + ; $01 (0 enemies)
0AC67 01                        	.db (+ - $)
0AC68                           
0AC68                           ; End of enemy data
0AC68                           +
0AC68                           include "src/levels/5/5-1/5-1-area1-enemies.asm"
0AC68                           ; Level 5-1, Area 1
0AC68                           
0AC68                           EnemyData_Level_5_1_Area1:
0AC68                           
0AC68                           ; Page 0
0AC68                           	distTo + ; $01 (0 enemies)
0AC68 01                        	.db (+ - $)
0AC69                           
0AC69                           ; Page 1
0AC69                           +	distTo + ; $03 (1 enemy)
0AC69 03                        	.db (+ - $)
0AC6A                           	enemy $E, $4, Enemy_FallingLogs
0AC6A 3B E4                     	.db Enemy_FallingLogs, $E << 4 | $4
0AC6C                           
0AC6C                           ; Page 2
0AC6C                           +	distTo + ; $09 (4 enemies)
0AC6C 09                        	.db (+ - $)
0AC6D                           	enemy $3, $4, Enemy_FallingLogs
0AC6D 3B 34                     	.db Enemy_FallingLogs, $3 << 4 | $4
0AC6F                           	enemy $8, $4, Enemy_FallingLogs
0AC6F 3B 84                     	.db Enemy_FallingLogs, $8 << 4 | $4
0AC71                           	enemy $B, $2, Enemy_Trouter
0AC71 13 B2                     	.db Enemy_Trouter, $B << 4 | $2
0AC73                           	enemy $D, $4, Enemy_FallingLogs
0AC73 3B D4                     	.db Enemy_FallingLogs, $D << 4 | $4
0AC75                           
0AC75                           ; Page 3
0AC75                           +	distTo + ; $05 (2 enemies)
0AC75 05                        	.db (+ - $)
0AC76                           	enemy $8, $2, Enemy_Trouter
0AC76 13 82                     	.db Enemy_Trouter, $8 << 4 | $2
0AC78                           	enemy $C, $2, Enemy_Trouter
0AC78 13 C2                     	.db Enemy_Trouter, $C << 4 | $2
0AC7A                           
0AC7A                           ; Page 4
0AC7A                           +	distTo + ; $05 (2 enemies)
0AC7A 05                        	.db (+ - $)
0AC7B                           	enemy $0, $2, Enemy_Trouter
0AC7B 13 02                     	.db Enemy_Trouter, $0 << 4 | $2
0AC7D                           	enemy $A, $4, Enemy_FallingLogs
0AC7D 3B A4                     	.db Enemy_FallingLogs, $A << 4 | $4
0AC7F                           
0AC7F                           ; Page 5
0AC7F                           +	distTo + ; $07 (3 enemies)
0AC7F 07                        	.db (+ - $)
0AC80                           	enemy $4, $2, Enemy_Trouter
0AC80 13 42                     	.db Enemy_Trouter, $4 << 4 | $2
0AC82                           	enemy $8, $2, Enemy_Trouter
0AC82 13 82                     	.db Enemy_Trouter, $8 << 4 | $2
0AC84                           	enemy $C, $2, Enemy_Trouter
0AC84 13 C2                     	.db Enemy_Trouter, $C << 4 | $2
0AC86                           
0AC86                           ; Page 6
0AC86                           +	distTo + ; $03 (1 enemy)
0AC86 03                        	.db (+ - $)
0AC87                           	enemy $B, $2, Enemy_Trouter
0AC87 13 B2                     	.db Enemy_Trouter, $B << 4 | $2
0AC89                           
0AC89                           ; Page 7
0AC89                           +	distTo + ; $05 (2 enemies)
0AC89 05                        	.db (+ - $)
0AC8A                           	enemy $9, $4, Enemy_FallingLogs
0AC8A 3B 94                     	.db Enemy_FallingLogs, $9 << 4 | $4
0AC8C                           	enemy $E, $4, Enemy_FallingLogs
0AC8C 3B E4                     	.db Enemy_FallingLogs, $E << 4 | $4
0AC8E                           
0AC8E                           ; Page 8
0AC8E                           +	distTo + ; $01 (0 enemies)
0AC8E 01                        	.db (+ - $)
0AC8F                           
0AC8F                           ; Page 9
0AC8F                           +	distTo + ; $01 (0 enemies)
0AC8F 01                        	.db (+ - $)
0AC90                           
0AC90                           ; Page A
0AC90                           +	distTo + ; $01 (0 enemies)
0AC90 01                        	.db (+ - $)
0AC91                           
0AC91                           ; End of enemy data
0AC91                           +
0AC91                           include "src/levels/5/5-1/5-1-area2-enemies.asm"
0AC91                           ; Level 5-1, Area 2
0AC91                           
0AC91                           EnemyData_Level_5_1_Area2:
0AC91                           
0AC91                           ; Page 0
0AC91                           	distTo + ; $05 (2 enemies)
0AC91 05                        	.db (+ - $)
0AC92                           	enemy $C, $4, Enemy_Birdo
0AC92 1C C4                     	.db Enemy_Birdo, $C << 4 | $4
0AC94                           	enemy $C, $5, Enemy_CrystalBall
0AC94 44 C5                     	.db Enemy_CrystalBall, $C << 4 | $5
0AC96                           
0AC96                           ; Page 1
0AC96                           +	distTo + ; $03 (1 enemy)
0AC96 03                        	.db (+ - $)
0AC97                           	enemy $C, $A, Enemy_HawkmouthLeft
0AC97 43 CA                     	.db Enemy_HawkmouthLeft, $C << 4 | $A
0AC99                           
0AC99                           ; Page 2
0AC99                           +	distTo + ; $01 (0 enemies)
0AC99 01                        	.db (+ - $)
0AC9A                           
0AC9A                           ; End of enemy data
0AC9A                           +
0AC9A                           
0AC9A                           ; World 5-2
0AC9A                           include "src/levels/5/5-2/5-2-area0-enemies.asm"
0AC9A                           ; Level 5-2, Area 0
0AC9A                           
0AC9A                           EnemyData_Level_5_2_Area0:
0AC9A                           
0AC9A                           ; Page 0
0AC9A                           	distTo + ; $03 (1 enemy)
0AC9A 03                        	.db (+ - $)
0AC9B                           	enemy $2, $A, Enemy_HawkmouthRight
0AC9B 42 2A                     	.db Enemy_HawkmouthRight, $2 << 4 | $A
0AC9D                           
0AC9D                           ; Page 1
0AC9D                           +	distTo + ; $01 (0 enemies)
0AC9D 01                        	.db (+ - $)
0AC9E                           
0AC9E                           ; Page 2
0AC9E                           +	distTo + ; $01 (0 enemies)
0AC9E 01                        	.db (+ - $)
0AC9F                           
0AC9F                           ; End of enemy data
0AC9F                           +
0AC9F                           include "src/levels/5/5-2/5-2-area1-enemies.asm"
0AC9F                           ; Level 5-2, Area 1
0AC9F                           
0AC9F                           EnemyData_Level_5_2_Area1:
0AC9F                           
0AC9F                           ; Page 0
0AC9F                           	distTo + ; $01 (0 enemies)
0AC9F 01                        	.db (+ - $)
0ACA0                           
0ACA0                           ; Page 1
0ACA0                           +	distTo + ; $07 (3 enemies)
0ACA0 07                        	.db (+ - $)
0ACA1                           	enemy $7, $8, Enemy_Hoopstar
0ACA1 14 78                     	.db Enemy_Hoopstar, $7 << 4 | $8
0ACA3                           	enemy $9, $6, Enemy_Hoopstar
0ACA3 14 96                     	.db Enemy_Hoopstar, $9 << 4 | $6
0ACA5                           	enemy $B, $8, Enemy_Hoopstar
0ACA5 14 B8                     	.db Enemy_Hoopstar, $B << 4 | $8
0ACA7                           
0ACA7                           ; Page 2
0ACA7                           +	distTo + ; $09 (4 enemies)
0ACA7 09                        	.db (+ - $)
0ACA8                           	enemy $2, $9, Enemy_Ostro
0ACA8 08 29                     	.db Enemy_Ostro, $2 << 4 | $9
0ACAA                           	enemy $D, $6, Enemy_Hoopstar
0ACAA 14 D6                     	.db Enemy_Hoopstar, $D << 4 | $6
0ACAC                           	enemy $E, $6, Enemy_Hoopstar
0ACAC 14 E6                     	.db Enemy_Hoopstar, $E << 4 | $6
0ACAE                           	enemy $F, $6, Enemy_Hoopstar
0ACAE 14 F6                     	.db Enemy_Hoopstar, $F << 4 | $6
0ACB0                           
0ACB0                           ; Page 3
0ACB0                           +	distTo + ; $01 (0 enemies)
0ACB0 01                        	.db (+ - $)
0ACB1                           
0ACB1                           ; Page 4
0ACB1                           +	distTo + ; $09 (4 enemies)
0ACB1 09                        	.db (+ - $)
0ACB2                           	enemy $8, $C, Enemy_Porcupo
0ACB2 04 8C                     	.db Enemy_Porcupo, $8 << 4 | $C
0ACB4                           	enemy $9, $C, Enemy_Porcupo
0ACB4 04 9C                     	.db Enemy_Porcupo, $9 << 4 | $C
0ACB6                           	enemy $A, $B, Enemy_Ostro
0ACB6 08 AB                     	.db Enemy_Ostro, $A << 4 | $B
0ACB8                           	enemy $B, $C, Enemy_Porcupo
0ACB8 04 BC                     	.db Enemy_Porcupo, $B << 4 | $C
0ACBA                           
0ACBA                           ; Page 5
0ACBA                           +	distTo + ; $05 (2 enemies)
0ACBA 05                        	.db (+ - $)
0ACBB                           	enemy $8, $9, Enemy_Hoopstar
0ACBB 14 89                     	.db Enemy_Hoopstar, $8 << 4 | $9
0ACBD                           	enemy $B, $9, Enemy_Hoopstar
0ACBD 14 B9                     	.db Enemy_Hoopstar, $B << 4 | $9
0ACBF                           
0ACBF                           ; Page 6
0ACBF                           +	distTo + ; $05 (2 enemies)
0ACBF 05                        	.db (+ - $)
0ACC0                           	enemy $5, $5, Enemy_Hoopstar
0ACC0 14 55                     	.db Enemy_Hoopstar, $5 << 4 | $5
0ACC2                           	enemy $9, $5, Enemy_Hoopstar
0ACC2 14 95                     	.db Enemy_Hoopstar, $9 << 4 | $5
0ACC4                           
0ACC4                           ; Page 7
0ACC4                           +	distTo + ; $07 (3 enemies)
0ACC4 07                        	.db (+ - $)
0ACC5                           	enemy $1, $7, Enemy_Hoopstar
0ACC5 14 17                     	.db Enemy_Hoopstar, $1 << 4 | $7
0ACC7                           	enemy $3, $8, Enemy_PanserStationaryFiresUp
0ACC7 25 38                     	.db Enemy_PanserStationaryFiresUp, $3 << 4 | $8
0ACC9                           	enemy $5, $7, Enemy_Hoopstar
0ACC9 14 57                     	.db Enemy_Hoopstar, $5 << 4 | $7
0ACCB                           
0ACCB                           ; Page 8
0ACCB                           +	distTo + ; $05 (2 enemies)
0ACCB 05                        	.db (+ - $)
0ACCC                           	enemy $2, $6, Enemy_NinjiRunning
0ACCC 0D 26                     	.db Enemy_NinjiRunning, $2 << 4 | $6
0ACCE                           	enemy $4, $6, Enemy_NinjiRunning
0ACCE 0D 46                     	.db Enemy_NinjiRunning, $4 << 4 | $6
0ACD0                           
0ACD0                           ; Page 9
0ACD0                           +	distTo + ; $05 (2 enemies)
0ACD0 05                        	.db (+ - $)
0ACD1                           	enemy $6, $A, Enemy_Porcupo
0ACD1 04 6A                     	.db Enemy_Porcupo, $6 << 4 | $A
0ACD3                           	enemy $9, $9, Enemy_Ostro
0ACD3 08 99                     	.db Enemy_Ostro, $9 << 4 | $9
0ACD5                           
0ACD5                           ; Page A
0ACD5                           +	distTo + ; $01 (0 enemies)
0ACD5 01                        	.db (+ - $)
0ACD6                           
0ACD6                           ; End of enemy data
0ACD6                           +
0ACD6                           include "src/levels/5/5-2/5-2-area2-enemies.asm"
0ACD6                           ; Level 5-2, Area 2
0ACD6                           
0ACD6                           EnemyData_Level_5_2_Area2:
0ACD6                           
0ACD6                           ; Page 0
0ACD6                           	distTo + ; $03 (1 enemy)
0ACD6 03                        	.db (+ - $)
0ACD7                           	enemy $8, $B, Enemy_Hoopstar
0ACD7 14 8B                     	.db Enemy_Hoopstar, $8 << 4 | $B
0ACD9                           
0ACD9                           ; Page 1
0ACD9                           +	distTo + ; $09 (4 enemies)
0ACD9 09                        	.db (+ - $)
0ACDA                           	enemy $F, $2, Enemy_BeezoStraight
0ACDA 10 F2                     	.db Enemy_BeezoStraight, $F << 4 | $2
0ACDC                           	enemy $6, $8, Enemy_Hoopstar
0ACDC 14 68                     	.db Enemy_Hoopstar, $6 << 4 | $8
0ACDE                           	enemy $8, $E, Enemy_Hoopstar
0ACDE 14 8E                     	.db Enemy_Hoopstar, $8 << 4 | $E
0ACE0                           	enemy $D, $E, Enemy_SnifitGray
0ACE0 06 DE                     	.db Enemy_SnifitGray, $D << 4 | $E
0ACE2                           
0ACE2                           ; Page 2
0ACE2                           +	distTo + ; $0B (5 enemies)
0ACE2 0B                        	.db (+ - $)
0ACE3                           	enemy $0, $2, Enemy_BeezoStraight
0ACE3 10 02                     	.db Enemy_BeezoStraight, $0 << 4 | $2
0ACE5                           	enemy $C, $5, Enemy_SnifitGray
0ACE5 06 C5                     	.db Enemy_SnifitGray, $C << 4 | $5
0ACE7                           	enemy $3, $6, Enemy_SnifitGray
0ACE7 06 36                     	.db Enemy_SnifitGray, $3 << 4 | $6
0ACE9                           	enemy $8, $E, Enemy_BeezoStraight
0ACE9 10 8E                     	.db Enemy_BeezoStraight, $8 << 4 | $E
0ACEB                           	enemy $D, $E, Enemy_BeezoStraight
0ACEB 10 DE                     	.db Enemy_BeezoStraight, $D << 4 | $E
0ACED                           
0ACED                           ; Page 3
0ACED                           +	distTo + ; $01 (0 enemies)
0ACED 01                        	.db (+ - $)
0ACEE                           
0ACEE                           ; Page 4
0ACEE                           +	distTo + ; $01 (0 enemies)
0ACEE 01                        	.db (+ - $)
0ACEF                           
0ACEF                           ; End of enemy data
0ACEF                           +
0ACEF                           include "src/levels/5/5-2/5-2-area3-enemies.asm"
0ACEF                           ; Level 5-2, Area 3
0ACEF                           
0ACEF                           EnemyData_Level_5_2_Area3:
0ACEF                           
0ACEF                           ; Page 0
0ACEF                           	distTo + ; $01 (0 enemies)
0ACEF 01                        	.db (+ - $)
0ACF0                           
0ACF0                           ; Page 1
0ACF0                           +	distTo + ; $01 (0 enemies)
0ACF0 01                        	.db (+ - $)
0ACF1                           
0ACF1                           ; Page 2
0ACF1                           +	distTo + ; $01 (0 enemies)
0ACF1 01                        	.db (+ - $)
0ACF2                           
0ACF2                           ; Page 3
0ACF2                           +	distTo + ; $01 (0 enemies)
0ACF2 01                        	.db (+ - $)
0ACF3                           
0ACF3                           ; Page 4
0ACF3                           +	distTo + ; $01 (0 enemies)
0ACF3 01                        	.db (+ - $)
0ACF4                           
0ACF4                           ; Page 5
0ACF4                           +	distTo + ; $01 (0 enemies)
0ACF4 01                        	.db (+ - $)
0ACF5                           
0ACF5                           ; Page 6
0ACF5                           +	distTo + ; $05 (2 enemies)
0ACF5 05                        	.db (+ - $)
0ACF6                           	enemy $5, $5, Enemy_Trouter
0ACF6 13 55                     	.db Enemy_Trouter, $5 << 4 | $5
0ACF8                           	enemy $8, $5, Enemy_Trouter
0ACF8 13 85                     	.db Enemy_Trouter, $8 << 4 | $5
0ACFA                           
0ACFA                           ; Page 7
0ACFA                           +	distTo + ; $01 (0 enemies)
0ACFA 01                        	.db (+ - $)
0ACFB                           
0ACFB                           ; End of enemy data
0ACFB                           +
0ACFB                           include "src/levels/5/5-2/5-2-area4-enemies.asm"
0ACFB                           ; Level 5-2, Area 4
0ACFB                           
0ACFB                           EnemyData_Level_5_2_Area4:
0ACFB                           
0ACFB                           ; Page 0
0ACFB                           	distTo + ; $03 (1 enemy)
0ACFB 03                        	.db (+ - $)
0ACFC                           	enemy $2, $B, Enemy_ShyguyRed
0ACFC 01 2B                     	.db Enemy_ShyguyRed, $2 << 4 | $B
0ACFE                           
0ACFE                           ; Page 1
0ACFE                           +	distTo + ; $05 (2 enemies)
0ACFE 05                        	.db (+ - $)
0ACFF                           	enemy $2, $4, Enemy_Porcupo
0ACFF 04 24                     	.db Enemy_Porcupo, $2 << 4 | $4
0AD01                           	enemy $B, $4, Enemy_Porcupo
0AD01 04 B4                     	.db Enemy_Porcupo, $B << 4 | $4
0AD03                           
0AD03                           ; Page 2
0AD03                           +	distTo + ; $01 (0 enemies)
0AD03 01                        	.db (+ - $)
0AD04                           
0AD04                           ; End of enemy data
0AD04                           +
0AD04                           include "src/levels/5/5-2/5-2-area5-enemies.asm"
0AD04                           ; Level 5-2, Area 5
0AD04                           
0AD04                           EnemyData_Level_5_2_Area5:
0AD04                           
0AD04                           ; Page 0
0AD04                           	distTo + ; $01 (0 enemies)
0AD04 01                        	.db (+ - $)
0AD05                           
0AD05                           ; Page 1
0AD05                           +	distTo + ; $07 (3 enemies)
0AD05 07                        	.db (+ - $)
0AD06                           	enemy $7, $3, Enemy_Trouter
0AD06 13 73                     	.db Enemy_Trouter, $7 << 4 | $3
0AD08                           	enemy $B, $8, Enemy_Birdo
0AD08 1C B8                     	.db Enemy_Birdo, $B << 4 | $8
0AD0A                           	enemy $B, $9, Enemy_CrystalBall
0AD0A 44 B9                     	.db Enemy_CrystalBall, $B << 4 | $9
0AD0C                           
0AD0C                           ; Page 2
0AD0C                           +	distTo + ; $03 (1 enemy)
0AD0C 03                        	.db (+ - $)
0AD0D                           	enemy $B, $4, Enemy_HawkmouthLeft
0AD0D 43 B4                     	.db Enemy_HawkmouthLeft, $B << 4 | $4
0AD0F                           
0AD0F                           ; Page 3
0AD0F                           +	distTo + ; $01 (0 enemies)
0AD0F 01                        	.db (+ - $)
0AD10                           
0AD10                           ; End of enemy data
0AD10                           +
0AD10                           
0AD10                           ; World 5-3
0AD10                           include "src/levels/5/5-3/5-3-area0-enemies.asm"
0AD10                           ; Level 5-3, Area 0
0AD10                           
0AD10                           EnemyData_Level_5_3_Area0:
0AD10                           
0AD10                           ; Page 0
0AD10                           	distTo + ; $03 (1 enemy)
0AD10 03                        	.db (+ - $)
0AD11                           	enemy $3, $A, Enemy_HawkmouthRight
0AD11 42 3A                     	.db Enemy_HawkmouthRight, $3 << 4 | $A
0AD13                           
0AD13                           ; Page 1
0AD13                           +	distTo + ; $01 (0 enemies)
0AD13 01                        	.db (+ - $)
0AD14                           
0AD14                           ; Page 2
0AD14                           +	distTo + ; $01 (0 enemies)
0AD14 01                        	.db (+ - $)
0AD15                           
0AD15                           ; End of enemy data
0AD15                           +
0AD15                           include "src/levels/5/5-3/5-3-area1-enemies.asm"
0AD15                           ; Level 5-3, Area 1
0AD15                           
0AD15                           EnemyData_Level_5_3_Area1:
0AD15                           
0AD15                           ; Page 0
0AD15                           	distTo + ; $03 (1 enemy)
0AD15 03                        	.db (+ - $)
0AD16                           	enemy $8, $0, Enemy_StopAttack
0AD16 49 80                     	.db Enemy_StopAttack, $8 << 4 | $0
0AD18                           
0AD18                           ; Page 1
0AD18                           +	distTo + ; $01 (0 enemies)
0AD18 01                        	.db (+ - $)
0AD19                           
0AD19                           ; Page 2
0AD19                           +	distTo + ; $03 (1 enemy)
0AD19 03                        	.db (+ - $)
0AD1A                           	enemy $0, $0, Enemy_AttackAlbatossCarryingBobOmb
0AD1A 47 00                     	.db Enemy_AttackAlbatossCarryingBobOmb, $0 << 4 | $0
0AD1C                           
0AD1C                           ; Page 3
0AD1C                           +	distTo + ; $01 (0 enemies)
0AD1C 01                        	.db (+ - $)
0AD1D                           
0AD1D                           ; Page 4
0AD1D                           +	distTo + ; $03 (1 enemy)
0AD1D 03                        	.db (+ - $)
0AD1E                           	enemy $4, $0, Enemy_AttackAlbatossCarryingBobOmb
0AD1E 47 40                     	.db Enemy_AttackAlbatossCarryingBobOmb, $4 << 4 | $0
0AD20                           
0AD20                           ; Page 5
0AD20                           +	distTo + ; $03 (1 enemy)
0AD20 03                        	.db (+ - $)
0AD21                           	enemy $C, $0, Enemy_StopAttack
0AD21 49 C0                     	.db Enemy_StopAttack, $C << 4 | $0
0AD23                           
0AD23                           ; Page 6
0AD23                           +	distTo + ; $03 (1 enemy)
0AD23 03                        	.db (+ - $)
0AD24                           	enemy $C, $0, Enemy_StopAttack
0AD24 49 C0                     	.db Enemy_StopAttack, $C << 4 | $0
0AD26                           
0AD26                           ; Page 7
0AD26                           +	distTo + ; $07 (3 enemies)
0AD26 07                        	.db (+ - $)
0AD27                           	enemy $2, $C, Enemy_BobOmb
0AD27 09 2C                     	.db Enemy_BobOmb, $2 << 4 | $C
0AD29                           	enemy $7, $C, Enemy_BobOmb
0AD29 09 7C                     	.db Enemy_BobOmb, $7 << 4 | $C
0AD2B                           	enemy $A, $C, Enemy_BobOmb
0AD2B 09 AC                     	.db Enemy_BobOmb, $A << 4 | $C
0AD2D                           
0AD2D                           ; Page 8
0AD2D                           +	distTo + ; $01 (0 enemies)
0AD2D 01                        	.db (+ - $)
0AD2E                           
0AD2E                           ; Page 9
0AD2E                           +	distTo + ; $05 (2 enemies)
0AD2E 05                        	.db (+ - $)
0AD2F                           	enemy $5, $8, Enemy_BobOmb
0AD2F 09 58                     	.db Enemy_BobOmb, $5 << 4 | $8
0AD31                           	enemy $7, $8, Enemy_BobOmb
0AD31 09 78                     	.db Enemy_BobOmb, $7 << 4 | $8
0AD33                           
0AD33                           ; Page A
0AD33                           +	distTo + ; $01 (0 enemies)
0AD33 01                        	.db (+ - $)
0AD34                           
0AD34                           ; End of enemy data
0AD34                           +
0AD34                           include "src/levels/5/5-3/5-3-area2-enemies.asm"
0AD34                           ; Level 5-3, Area 2
0AD34                           
0AD34                           EnemyData_Level_5_3_Area2:
0AD34                           
0AD34                           ; Page 0
0AD34                           	distTo + ; $01 (0 enemies)
0AD34 01                        	.db (+ - $)
0AD35                           
0AD35                           ; Page 1
0AD35                           +	distTo + ; $05 (2 enemies)
0AD35 05                        	.db (+ - $)
0AD36                           	enemy $3, $6, Enemy_PanserStationaryFiresAngled
0AD36 23 36                     	.db Enemy_PanserStationaryFiresAngled, $3 << 4 | $6
0AD38                           	enemy $C, $6, Enemy_BobOmb
0AD38 09 C6                     	.db Enemy_BobOmb, $C << 4 | $6
0AD3A                           
0AD3A                           ; Page 2
0AD3A                           +	distTo + ; $03 (1 enemy)
0AD3A 03                        	.db (+ - $)
0AD3B                           	enemy $3, $6, Enemy_BobOmb
0AD3B 09 36                     	.db Enemy_BobOmb, $3 << 4 | $6
0AD3D                           
0AD3D                           ; Page 3
0AD3D                           +	distTo + ; $05 (2 enemies)
0AD3D 05                        	.db (+ - $)
0AD3E                           	enemy $2, $5, Enemy_BobOmb
0AD3E 09 25                     	.db Enemy_BobOmb, $2 << 4 | $5
0AD40                           	enemy $4, $5, Enemy_BobOmb
0AD40 09 45                     	.db Enemy_BobOmb, $4 << 4 | $5
0AD42                           
0AD42                           ; Page 4
0AD42                           +	distTo + ; $03 (1 enemy)
0AD42 03                        	.db (+ - $)
0AD43                           	enemy $A, $5, Enemy_JarGeneratorBobOmb
0AD43 16 A5                     	.db Enemy_JarGeneratorBobOmb, $A << 4 | $5
0AD45                           
0AD45                           ; Page 5
0AD45                           +	distTo + ; $01 (0 enemies)
0AD45 01                        	.db (+ - $)
0AD46                           
0AD46                           ; End of enemy data
0AD46                           +
0AD46                           include "src/levels/5/5-3/5-3-area3-enemies.asm"
0AD46                           ; Level 5-3, Area 3
0AD46                           
0AD46                           EnemyData_Level_5_3_Area3:
0AD46                           
0AD46                           ; Page 0
0AD46                           	distTo + ; $01 (0 enemies)
0AD46 01                        	.db (+ - $)
0AD47                           
0AD47                           ; Page 1
0AD47                           +	distTo + ; $05 (2 enemies)
0AD47 05                        	.db (+ - $)
0AD48                           	enemy $5, $2, Enemy_PanserWalking
0AD48 24 52                     	.db Enemy_PanserWalking, $5 << 4 | $2
0AD4A                           	enemy $3, $D, Enemy_PanserWalking
0AD4A 24 3D                     	.db Enemy_PanserWalking, $3 << 4 | $D
0AD4C                           
0AD4C                           ; Page 2
0AD4C                           +	distTo + ; $01 (0 enemies)
0AD4C 01                        	.db (+ - $)
0AD4D                           
0AD4D                           ; Page 3
0AD4D                           +	distTo + ; $09 (4 enemies)
0AD4D 09                        	.db (+ - $)
0AD4E                           	enemy $9, $0, Enemy_BobOmb
0AD4E 09 90                     	.db Enemy_BobOmb, $9 << 4 | $0
0AD50                           	enemy $B, $0, Enemy_BobOmb
0AD50 09 B0                     	.db Enemy_BobOmb, $B << 4 | $0
0AD52                           	enemy $D, $5, Enemy_Spark2
0AD52 2F D5                     	.db Enemy_Spark2, $D << 4 | $5
0AD54                           	enemy $4, $F, Enemy_Spark3
0AD54 30 4F                     	.db Enemy_Spark3, $4 << 4 | $F
0AD56                           
0AD56                           ; Page 4
0AD56                           +	distTo + ; $05 (2 enemies)
0AD56 05                        	.db (+ - $)
0AD57                           	enemy $8, $2, Enemy_JarGeneratorShyguy
0AD57 15 82                     	.db Enemy_JarGeneratorShyguy, $8 << 4 | $2
0AD59                           	enemy $A, $8, Enemy_Spark2
0AD59 2F A8                     	.db Enemy_Spark2, $A << 4 | $8
0AD5B                           
0AD5B                           ; Page 5
0AD5B                           +	distTo + ; $07 (3 enemies)
0AD5B 07                        	.db (+ - $)
0AD5C                           	enemy $4, $1, Enemy_Spark3
0AD5C 30 41                     	.db Enemy_Spark3, $4 << 4 | $1
0AD5E                           	enemy $8, $4, Enemy_JarGeneratorShyguy
0AD5E 15 84                     	.db Enemy_JarGeneratorShyguy, $8 << 4 | $4
0AD60                           	enemy $8, $A, Enemy_Spark4
0AD60 31 8A                     	.db Enemy_Spark4, $8 << 4 | $A
0AD62                           
0AD62                           ; Page 6
0AD62                           +	distTo + ; $01 (0 enemies)
0AD62 01                        	.db (+ - $)
0AD63                           
0AD63                           ; Page 7
0AD63                           +	distTo + ; $01 (0 enemies)
0AD63 01                        	.db (+ - $)
0AD64                           
0AD64                           ; End of enemy data
0AD64                           +
0AD64                           include "src/levels/5/5-3/5-3-area4-enemies.asm"
0AD64                           ; Level 5-3, Area 4
0AD64                           
0AD64                           EnemyData_Level_5_3_Area4:
0AD64                           
0AD64                           ; Page 0
0AD64                           	distTo + ; $01 (0 enemies)
0AD64 01                        	.db (+ - $)
0AD65                           
0AD65                           ; Page 1
0AD65                           +	distTo + ; $01 (0 enemies)
0AD65 01                        	.db (+ - $)
0AD66                           
0AD66                           ; Page 2
0AD66                           +	distTo + ; $05 (2 enemies)
0AD66 05                        	.db (+ - $)
0AD67                           	enemy $6, $7, Enemy_SnifitPink
0AD67 07 67                     	.db Enemy_SnifitPink, $6 << 4 | $7
0AD69                           	enemy $D, $2, Enemy_Pidgit
0AD69 12 D2                     	.db Enemy_Pidgit, $D << 4 | $2
0AD6B                           
0AD6B                           ; Page 3
0AD6B                           +	distTo + ; $01 (0 enemies)
0AD6B 01                        	.db (+ - $)
0AD6C                           
0AD6C                           ; Page 4
0AD6C                           +	distTo + ; $03 (1 enemy)
0AD6C 03                        	.db (+ - $)
0AD6D                           	enemy $F, $2, Enemy_Pidgit
0AD6D 12 F2                     	.db Enemy_Pidgit, $F << 4 | $2
0AD6F                           
0AD6F                           ; Page 5
0AD6F                           +	distTo + ; $01 (0 enemies)
0AD6F 01                        	.db (+ - $)
0AD70                           
0AD70                           ; Page 6
0AD70                           +	distTo + ; $07 (3 enemies)
0AD70 07                        	.db (+ - $)
0AD71                           	enemy $6, $0, Enemy_BeezoDiving
0AD71 0F 60                     	.db Enemy_BeezoDiving, $6 << 4 | $0
0AD73                           	enemy $9, $2, Enemy_ShyguyPink
0AD73 03 92                     	.db Enemy_ShyguyPink, $9 << 4 | $2
0AD75                           	enemy $A, $6, Enemy_ShyguyPink
0AD75 03 A6                     	.db Enemy_ShyguyPink, $A << 4 | $6
0AD77                           
0AD77                           ; Page 7
0AD77                           +	distTo + ; $05 (2 enemies)
0AD77 05                        	.db (+ - $)
0AD78                           	enemy $0, $7, Enemy_ShyguyPink
0AD78 03 07                     	.db Enemy_ShyguyPink, $0 << 4 | $7
0AD7A                           	enemy $5, $5, Enemy_ShyguyPink
0AD7A 03 55                     	.db Enemy_ShyguyPink, $5 << 4 | $5
0AD7C                           
0AD7C                           ; Page 8
0AD7C                           +	distTo + ; $05 (2 enemies)
0AD7C 05                        	.db (+ - $)
0AD7D                           	enemy $B, $7, Enemy_Birdo
0AD7D 1C B7                     	.db Enemy_Birdo, $B << 4 | $7
0AD7F                           	enemy $B, $8, Enemy_CrystalBall
0AD7F 44 B8                     	.db Enemy_CrystalBall, $B << 4 | $8
0AD81                           
0AD81                           ; Page 9
0AD81                           +	distTo + ; $03 (1 enemy)
0AD81 03                        	.db (+ - $)
0AD82                           	enemy $B, $5, Enemy_HawkmouthLeft
0AD82 43 B5                     	.db Enemy_HawkmouthLeft, $B << 4 | $5
0AD84                           
0AD84                           ; Page A
0AD84                           +	distTo + ; $01 (0 enemies)
0AD84 01                        	.db (+ - $)
0AD85                           
0AD85                           ; End of enemy data
0AD85                           +
0AD85                           include "src/levels/5/5-3/5-3-area5-enemies.asm"
0AD85                           ; Level 5-3, Area 5
0AD85                           
0AD85                           EnemyData_Level_5_3_Area5:
0AD85                           
0AD85                           ; Page 0
0AD85                           	distTo + ; $01 (0 enemies)
0AD85 01                        	.db (+ - $)
0AD86                           
0AD86                           ; Page 1
0AD86                           +	distTo + ; $03 (1 enemy)
0AD86 03                        	.db (+ - $)
0AD87                           	enemy $A, $7, Enemy_BossClawgrip
0AD87 61 A7                     	.db Enemy_BossClawgrip, $A << 4 | $7
0AD89                           
0AD89                           ; Page 2
0AD89                           +	distTo + ; $01 (0 enemies)
0AD89 01                        	.db (+ - $)
0AD8A                           
0AD8A                           ; End of enemy data
0AD8A                           +
0AD8A                           ; -------------------------------
0AD8A                           
0AD8A                           
0AD8A                           ; -------------------------------
0AD8A                           ; World 6
0AD8A                           
0AD8A                           ; World 6-1
0AD8A                           include "src/levels/6/6-1/6-1-area0-enemies.asm"
0AD8A                           ; Level 6-1, Area 0
0AD8A                           
0AD8A                           EnemyData_Level_6_1_Area0:
0AD8A                           
0AD8A                           ; Page 0
0AD8A                           	distTo + ; $03 (1 enemy)
0AD8A 03                        	.db (+ - $)
0AD8B                           	enemy $4, $A, Enemy_HawkmouthRight
0AD8B 42 4A                     	.db Enemy_HawkmouthRight, $4 << 4 | $A
0AD8D                           
0AD8D                           ; Page 1
0AD8D                           +	distTo + ; $07 (3 enemies)
0AD8D 07                        	.db (+ - $)
0AD8E                           	enemy $1, $D, Enemy_CobratSand
0AD8E 19 1D                     	.db Enemy_CobratSand, $1 << 4 | $D
0AD90                           	enemy $A, $B, Enemy_ShyguyPink
0AD90 03 AB                     	.db Enemy_ShyguyPink, $A << 4 | $B
0AD92                           	enemy $D, $D, Enemy_CobratSand
0AD92 19 DD                     	.db Enemy_CobratSand, $D << 4 | $D
0AD94                           
0AD94                           ; Page 2
0AD94                           +	distTo + ; $03 (1 enemy)
0AD94 03                        	.db (+ - $)
0AD95                           	enemy $5, $A, Enemy_CobratJar
0AD95 18 5A                     	.db Enemy_CobratJar, $5 << 4 | $A
0AD97                           
0AD97                           ; Page 3
0AD97                           +	distTo + ; $03 (1 enemy)
0AD97 03                        	.db (+ - $)
0AD98                           	enemy $4, $9, Enemy_Pokey
0AD98 1A 49                     	.db Enemy_Pokey, $4 << 4 | $9
0AD9A                           
0AD9A                           ; Page 4
0AD9A                           +	distTo + ; $07 (3 enemies)
0AD9A 07                        	.db (+ - $)
0AD9B                           	enemy $1, $D, Enemy_CobratSand
0AD9B 19 1D                     	.db Enemy_CobratSand, $1 << 4 | $D
0AD9D                           	enemy $5, $D, Enemy_CobratSand
0AD9D 19 5D                     	.db Enemy_CobratSand, $5 << 4 | $D
0AD9F                           	enemy $7, $B, Enemy_ShyguyPink
0AD9F 03 7B                     	.db Enemy_ShyguyPink, $7 << 4 | $B
0ADA1                           
0ADA1                           ; Page 5
0ADA1                           +	distTo + ; $03 (1 enemy)
0ADA1 03                        	.db (+ - $)
0ADA2                           	enemy $E, $A, Enemy_CobratJar
0ADA2 18 EA                     	.db Enemy_CobratJar, $E << 4 | $A
0ADA4                           
0ADA4                           ; Page 6
0ADA4                           +	distTo + ; $07 (3 enemies)
0ADA4 07                        	.db (+ - $)
0ADA5                           	enemy $1, $A, Enemy_CobratJar
0ADA5 18 1A                     	.db Enemy_CobratJar, $1 << 4 | $A
0ADA7                           	enemy $A, $D, Enemy_CobratSand
0ADA7 19 AD                     	.db Enemy_CobratSand, $A << 4 | $D
0ADA9                           	enemy $B, $D, Enemy_CobratSand
0ADA9 19 BD                     	.db Enemy_CobratSand, $B << 4 | $D
0ADAB                           
0ADAB                           ; Page 7
0ADAB                           +	distTo + ; $03 (1 enemy)
0ADAB 03                        	.db (+ - $)
0ADAC                           	enemy $E, $6, Enemy_Pokey
0ADAC 1A E6                     	.db Enemy_Pokey, $E << 4 | $6
0ADAE                           
0ADAE                           ; Page 8
0ADAE                           +	distTo + ; $05 (2 enemies)
0ADAE 05                        	.db (+ - $)
0ADAF                           	enemy $3, $6, Enemy_Pokey
0ADAF 1A 36                     	.db Enemy_Pokey, $3 << 4 | $6
0ADB1                           	enemy $9, $9, Enemy_PanserWalking
0ADB1 24 99                     	.db Enemy_PanserWalking, $9 << 4 | $9
0ADB3                           
0ADB3                           ; Page 9
0ADB3                           +	distTo + ; $01 (0 enemies)
0ADB3 01                        	.db (+ - $)
0ADB4                           
0ADB4                           ; Page A
0ADB4                           +	distTo + ; $01 (0 enemies)
0ADB4 01                        	.db (+ - $)
0ADB5                           
0ADB5                           ; End of enemy data
0ADB5                           +
0ADB5                           include "src/levels/6/6-1/6-1-area1-enemies.asm"
0ADB5                           ; Level 6-1, Area 1
0ADB5                           
0ADB5                           EnemyData_Level_6_1_Area1:
0ADB5                           
0ADB5                           ; Page 0
0ADB5                           	distTo + ; $01 (0 enemies)
0ADB5 01                        	.db (+ - $)
0ADB6                           
0ADB6                           ; Page 1
0ADB6                           +	distTo + ; $07 (3 enemies)
0ADB6 07                        	.db (+ - $)
0ADB7                           	enemy $4, $B, Enemy_CobratJar
0ADB7 18 4B                     	.db Enemy_CobratJar, $4 << 4 | $B
0ADB9                           	enemy $9, $A, Enemy_CobratJar
0ADB9 18 9A                     	.db Enemy_CobratJar, $9 << 4 | $A
0ADBB                           	enemy $F, $B, Enemy_JarGeneratorShyguy
0ADBB 15 FB                     	.db Enemy_JarGeneratorShyguy, $F << 4 | $B
0ADBD                           
0ADBD                           ; Page 2
0ADBD                           +	distTo + ; $05 (2 enemies)
0ADBD 05                        	.db (+ - $)
0ADBE                           	enemy $2, $B, Enemy_CobratJar
0ADBE 18 2B                     	.db Enemy_CobratJar, $2 << 4 | $B
0ADC0                           	enemy $7, $B, Enemy_CobratJar
0ADC0 18 7B                     	.db Enemy_CobratJar, $7 << 4 | $B
0ADC2                           
0ADC2                           ; Page 3
0ADC2                           +	distTo + ; $01 (0 enemies)
0ADC2 01                        	.db (+ - $)
0ADC3                           
0ADC3                           ; Page 4
0ADC3                           +	distTo + ; $01 (0 enemies)
0ADC3 01                        	.db (+ - $)
0ADC4                           
0ADC4                           ; End of enemy data
0ADC4                           +
0ADC4                           include "src/levels/6/6-1/6-1-area2-enemies.asm"
0ADC4                           ; Level 6-1, Area 2
0ADC4                           
0ADC4                           EnemyData_Level_6_1_Area2:
0ADC4                           
0ADC4                           ; Page 0
0ADC4                           	distTo + ; $01 (0 enemies)
0ADC4 01                        	.db (+ - $)
0ADC5                           
0ADC5                           ; Page 1
0ADC5                           +	distTo + ; $05 (2 enemies)
0ADC5 05                        	.db (+ - $)
0ADC6                           	enemy $C, $8, Enemy_Birdo
0ADC6 1C C8                     	.db Enemy_Birdo, $C << 4 | $8
0ADC8                           	enemy $C, $8, Enemy_CrystalBall
0ADC8 44 C8                     	.db Enemy_CrystalBall, $C << 4 | $8
0ADCA                           
0ADCA                           ; Page 2
0ADCA                           +	distTo + ; $03 (1 enemy)
0ADCA 03                        	.db (+ - $)
0ADCB                           	enemy $2, $7, Enemy_HawkmouthLeft
0ADCB 43 27                     	.db Enemy_HawkmouthLeft, $2 << 4 | $7
0ADCD                           
0ADCD                           ; Page 3
0ADCD                           +	distTo + ; $01 (0 enemies)
0ADCD 01                        	.db (+ - $)
0ADCE                           
0ADCE                           ; End of enemy data
0ADCE                           +
0ADCE                           include "src/levels/6/6-1/6-1-area3-enemies.asm"
0ADCE                           ; Level 6-1, Area 3
0ADCE                           
0ADCE                           EnemyData_Level_6_1_Area3:
0ADCE                           
0ADCE                           ; Page 0
0ADCE                           	distTo + ; $03 (1 enemy)
0ADCE 03                        	.db (+ - $)
0ADCF                           	enemy $5, $A, Enemy_ShyguyRed
0ADCF 01 5A                     	.db Enemy_ShyguyRed, $5 << 4 | $A
0ADD1                           
0ADD1                           ; Page 1
0ADD1                           +	distTo + ; $09 (4 enemies)
0ADD1 09                        	.db (+ - $)
0ADD2                           	enemy $4, $1, Enemy_ShyguyRed
0ADD2 01 41                     	.db Enemy_ShyguyRed, $4 << 4 | $1
0ADD4                           	enemy $B, $4, Enemy_ShyguyRed
0ADD4 01 B4                     	.db Enemy_ShyguyRed, $B << 4 | $4
0ADD6                           	enemy $8, $5, Enemy_Phanto
0ADD6 17 85                     	.db Enemy_Phanto, $8 << 4 | $5
0ADD8                           	enemy $6, $9, Enemy_Key
0ADD8 3D 69                     	.db Enemy_Key, $6 << 4 | $9
0ADDA                           
0ADDA                           ; Page 2
0ADDA                           +	distTo + ; $01 (0 enemies)
0ADDA 01                        	.db (+ - $)
0ADDB                           
0ADDB                           ; End of enemy data
0ADDB                           +
0ADDB                           include "src/levels/6/6-1/6-1-area4-enemies.asm"
0ADDB                           ; Level 6-1, Area 4
0ADDB                           
0ADDB                           EnemyData_Level_6_1_Area4:
0ADDB                           
0ADDB                           ; Page 0
0ADDB                           	distTo + ; $01 (0 enemies)
0ADDB 01                        	.db (+ - $)
0ADDC                           
0ADDC                           ; Page 1
0ADDC                           +	distTo + ; $01 (0 enemies)
0ADDC 01                        	.db (+ - $)
0ADDD                           
0ADDD                           ; Page 2
0ADDD                           +	distTo + ; $01 (0 enemies)
0ADDD 01                        	.db (+ - $)
0ADDE                           
0ADDE                           ; Page 3
0ADDE                           +	distTo + ; $01 (0 enemies)
0ADDE 01                        	.db (+ - $)
0ADDF                           
0ADDF                           ; Page 4
0ADDF                           +	distTo + ; $01 (0 enemies)
0ADDF 01                        	.db (+ - $)
0ADE0                           
0ADE0                           ; Page 5
0ADE0                           +	distTo + ; $01 (0 enemies)
0ADE0 01                        	.db (+ - $)
0ADE1                           
0ADE1                           ; Page 6
0ADE1                           +	distTo + ; $01 (0 enemies)
0ADE1 01                        	.db (+ - $)
0ADE2                           
0ADE2                           ; Page 7
0ADE2                           +	distTo + ; $01 (0 enemies)
0ADE2 01                        	.db (+ - $)
0ADE3                           
0ADE3                           ; Page 8
0ADE3                           +	distTo + ; $01 (0 enemies)
0ADE3 01                        	.db (+ - $)
0ADE4                           
0ADE4                           ; Page 9
0ADE4                           +	distTo + ; $01 (0 enemies)
0ADE4 01                        	.db (+ - $)
0ADE5                           
0ADE5                           ; Page A
0ADE5                           +	distTo + ; $05 (2 enemies)
0ADE5 05                        	.db (+ - $)
0ADE6                           	enemy $2, $A, Enemy_ShyguyRed
0ADE6 01 2A                     	.db Enemy_ShyguyRed, $2 << 4 | $A
0ADE8                           	enemy $D, $A, Enemy_ShyguyRed
0ADE8 01 DA                     	.db Enemy_ShyguyRed, $D << 4 | $A
0ADEA                           
0ADEA                           ; End of enemy data
0ADEA                           +
0ADEA                           include "src/levels/6/6-1/6-1-area5-enemies.asm"
0ADEA                           ; Level 6-1, Area 5
0ADEA                           
0ADEA                           EnemyData_Level_6_1_Area5:
0ADEA                           
0ADEA                           ; Page 0
0ADEA                           	distTo + ; $03 (1 enemy)
0ADEA 03                        	.db (+ - $)
0ADEB                           	enemy $5, $A, Enemy_ShyguyRed
0ADEB 01 5A                     	.db Enemy_ShyguyRed, $5 << 4 | $A
0ADED                           
0ADED                           ; Page 1
0ADED                           +	distTo + ; $05 (2 enemies)
0ADED 05                        	.db (+ - $)
0ADEE                           	enemy $4, $1, Enemy_ShyguyRed
0ADEE 01 41                     	.db Enemy_ShyguyRed, $4 << 4 | $1
0ADF0                           	enemy $B, $4, Enemy_ShyguyRed
0ADF0 01 B4                     	.db Enemy_ShyguyRed, $B << 4 | $4
0ADF2                           
0ADF2                           ; Page 2
0ADF2                           +	distTo + ; $01 (0 enemies)
0ADF2 01                        	.db (+ - $)
0ADF3                           
0ADF3                           ; End of enemy data
0ADF3                           +
0ADF3                           include "src/levels/6/6-1/6-1-area6-enemies.asm"
0ADF3                           ; Level 6-1, Area 6
0ADF3                           
0ADF3                           EnemyData_Level_6_1_Area6:
0ADF3                           
0ADF3                           ; Page 0
0ADF3                           	distTo + ; $03 (1 enemy)
0ADF3 03                        	.db (+ - $)
0ADF4                           	enemy $B, $8, Enemy_ShyguyRed
0ADF4 01 B8                     	.db Enemy_ShyguyRed, $B << 4 | $8
0ADF6                           
0ADF6                           ; Page 1
0ADF6                           +	distTo + ; $01 (0 enemies)
0ADF6 01                        	.db (+ - $)
0ADF7                           
0ADF7                           ; End of enemy data
0ADF7                           +
0ADF7                           
0ADF7                           ; World 6-2
0ADF7                           include "src/levels/6/6-2/6-2-area0-enemies.asm"
0ADF7                           ; Level 6-2, Area 0
0ADF7                           
0ADF7                           EnemyData_Level_6_2_Area0:
0ADF7                           
0ADF7                           ; Page 0
0ADF7                           	distTo + ; $03 (1 enemy)
0ADF7 03                        	.db (+ - $)
0ADF8                           	enemy $2, $A, Enemy_HawkmouthRight
0ADF8 42 2A                     	.db Enemy_HawkmouthRight, $2 << 4 | $A
0ADFA                           
0ADFA                           ; Page 1
0ADFA                           +	distTo + ; $01 (0 enemies)
0ADFA 01                        	.db (+ - $)
0ADFB                           
0ADFB                           ; Page 2
0ADFB                           +	distTo + ; $01 (0 enemies)
0ADFB 01                        	.db (+ - $)
0ADFC                           
0ADFC                           ; End of enemy data
0ADFC                           +
0ADFC                           include "src/levels/6/6-2/6-2-area1-enemies.asm"
0ADFC                           ; Level 6-2, Area 1
0ADFC                           
0ADFC                           EnemyData_Level_6_2_Area1:
0ADFC                           
0ADFC                           ; Page 0
0ADFC                           	distTo + ; $05 (2 enemies)
0ADFC 05                        	.db (+ - $)
0ADFD                           	enemy $0, $C, Enemy_AlbatossStartRight
0ADFD 0B 0C                     	.db Enemy_AlbatossStartRight, $0 << 4 | $C
0ADFF                           	enemy $2, $6, Enemy_AlbatossStartRight
0ADFF 0B 26                     	.db Enemy_AlbatossStartRight, $2 << 4 | $6
0AE01                           
0AE01                           ; Page 1
0AE01                           +	distTo + ; $07 (3 enemies)
0AE01 07                        	.db (+ - $)
0AE02                           	enemy $A, $B, Enemy_AlbatossStartLeft
0AE02 0C AB                     	.db Enemy_AlbatossStartLeft, $A << 4 | $B
0AE04                           	enemy $C, $9, Enemy_AlbatossStartLeft
0AE04 0C C9                     	.db Enemy_AlbatossStartLeft, $C << 4 | $9
0AE06                           	enemy $E, $7, Enemy_AlbatossStartLeft
0AE06 0C E7                     	.db Enemy_AlbatossStartLeft, $E << 4 | $7
0AE08                           
0AE08                           ; Page 2
0AE08                           +	distTo + ; $03 (1 enemy)
0AE08 03                        	.db (+ - $)
0AE09                           	enemy $A, $B, Enemy_PanserStationaryFiresUp
0AE09 25 AB                     	.db Enemy_PanserStationaryFiresUp, $A << 4 | $B
0AE0B                           
0AE0B                           ; Page 3
0AE0B                           +	distTo + ; $07 (3 enemies)
0AE0B 07                        	.db (+ - $)
0AE0C                           	enemy $5, $5, Enemy_BeezoStraight
0AE0C 10 55                     	.db Enemy_BeezoStraight, $5 << 4 | $5
0AE0E                           	enemy $8, $5, Enemy_BeezoStraight
0AE0E 10 85                     	.db Enemy_BeezoStraight, $8 << 4 | $5
0AE10                           	enemy $A, $5, Enemy_BeezoStraight
0AE10 10 A5                     	.db Enemy_BeezoStraight, $A << 4 | $5
0AE12                           
0AE12                           ; Page 4
0AE12                           +	distTo + ; $05 (2 enemies)
0AE12 05                        	.db (+ - $)
0AE13                           	enemy $9, $8, Enemy_AlbatossStartLeft
0AE13 0C 98                     	.db Enemy_AlbatossStartLeft, $9 << 4 | $8
0AE15                           	enemy $C, $8, Enemy_AlbatossStartLeft
0AE15 0C C8                     	.db Enemy_AlbatossStartLeft, $C << 4 | $8
0AE17                           
0AE17                           ; Page 5
0AE17                           +	distTo + ; $03 (1 enemy)
0AE17 03                        	.db (+ - $)
0AE18                           	enemy $A, $3, Enemy_BeezoStraight
0AE18 10 A3                     	.db Enemy_BeezoStraight, $A << 4 | $3
0AE1A                           
0AE1A                           ; Page 6
0AE1A                           +	distTo + ; $07 (3 enemies)
0AE1A 07                        	.db (+ - $)
0AE1B                           	enemy $6, $3, Enemy_AlbatossStartLeft
0AE1B 0C 63                     	.db Enemy_AlbatossStartLeft, $6 << 4 | $3
0AE1D                           	enemy $6, $5, Enemy_AlbatossStartLeft
0AE1D 0C 65                     	.db Enemy_AlbatossStartLeft, $6 << 4 | $5
0AE1F                           	enemy $6, $7, Enemy_AlbatossStartLeft
0AE1F 0C 67                     	.db Enemy_AlbatossStartLeft, $6 << 4 | $7
0AE21                           
0AE21                           ; Page 7
0AE21                           +	distTo + ; $07 (3 enemies)
0AE21 07                        	.db (+ - $)
0AE22                           	enemy $6, $5, Enemy_AlbatossStartLeft
0AE22 0C 65                     	.db Enemy_AlbatossStartLeft, $6 << 4 | $5
0AE24                           	enemy $9, $3, Enemy_AlbatossStartLeft
0AE24 0C 93                     	.db Enemy_AlbatossStartLeft, $9 << 4 | $3
0AE26                           	enemy $C, $4, Enemy_AlbatossStartLeft
0AE26 0C C4                     	.db Enemy_AlbatossStartLeft, $C << 4 | $4
0AE28                           
0AE28                           ; Page 8
0AE28                           +	distTo + ; $03 (1 enemy)
0AE28 03                        	.db (+ - $)
0AE29                           	enemy $E, $B, Enemy_AlbatossStartLeft
0AE29 0C EB                     	.db Enemy_AlbatossStartLeft, $E << 4 | $B
0AE2B                           
0AE2B                           ; Page 9
0AE2B                           +	distTo + ; $05 (2 enemies)
0AE2B 05                        	.db (+ - $)
0AE2C                           	enemy $2, $9, Enemy_AlbatossStartLeft
0AE2C 0C 29                     	.db Enemy_AlbatossStartLeft, $2 << 4 | $9
0AE2E                           	enemy $A, $9, Enemy_AlbatossStartLeft
0AE2E 0C A9                     	.db Enemy_AlbatossStartLeft, $A << 4 | $9
0AE30                           
0AE30                           ; Page A
0AE30                           +	distTo + ; $01 (0 enemies)
0AE30 01                        	.db (+ - $)
0AE31                           
0AE31                           ; End of enemy data
0AE31                           +
0AE31                           include "src/levels/6/6-2/6-2-area2-enemies.asm"
0AE31                           ; Level 6-2, Area 2
0AE31                           
0AE31                           EnemyData_Level_6_2_Area2:
0AE31                           
0AE31                           ; Page 0
0AE31                           	distTo + ; $01 (0 enemies)
0AE31 01                        	.db (+ - $)
0AE32                           
0AE32                           ; Page 1
0AE32                           +	distTo + ; $05 (2 enemies)
0AE32 05                        	.db (+ - $)
0AE33                           	enemy $C, $A, Enemy_Birdo
0AE33 1C CA                     	.db Enemy_Birdo, $C << 4 | $A
0AE35                           	enemy $C, $B, Enemy_CrystalBall
0AE35 44 CB                     	.db Enemy_CrystalBall, $C << 4 | $B
0AE37                           
0AE37                           ; Page 2
0AE37                           +	distTo + ; $03 (1 enemy)
0AE37 03                        	.db (+ - $)
0AE38                           	enemy $D, $4, Enemy_HawkmouthLeft
0AE38 43 D4                     	.db Enemy_HawkmouthLeft, $D << 4 | $4
0AE3A                           
0AE3A                           ; Page 3
0AE3A                           +	distTo + ; $01 (0 enemies)
0AE3A 01                        	.db (+ - $)
0AE3B                           
0AE3B                           ; End of enemy data
0AE3B                           +
0AE3B                           
0AE3B                           ; World 6-3
0AE3B                           include "src/levels/6/6-3/6-3-area0-enemies.asm"
0AE3B                           ; Level 6-3, Area 0
0AE3B                           
0AE3B                           EnemyData_Level_6_3_Area0:
0AE3B                           
0AE3B                           ; Page 0
0AE3B                           	distTo + ; $03 (1 enemy)
0AE3B 03                        	.db (+ - $)
0AE3C                           	enemy $2, $A, Enemy_HawkmouthRight
0AE3C 42 2A                     	.db Enemy_HawkmouthRight, $2 << 4 | $A
0AE3E                           
0AE3E                           ; Page 1
0AE3E                           +	distTo + ; $01 (0 enemies)
0AE3E 01                        	.db (+ - $)
0AE3F                           
0AE3F                           ; End of enemy data
0AE3F                           +
0AE3F                           include "src/levels/6/6-3/6-3-area1-enemies.asm"
0AE3F                           ; Level 6-3, Area 1
0AE3F                           
0AE3F                           EnemyData_Level_6_3_Area1:
0AE3F                           
0AE3F                           ; Page 0
0AE3F                           	distTo + ; $01 (0 enemies)
0AE3F 01                        	.db (+ - $)
0AE40                           
0AE40                           ; Page 1
0AE40                           +	distTo + ; $01 (0 enemies)
0AE40 01                        	.db (+ - $)
0AE41                           
0AE41                           ; Page 2
0AE41                           +	distTo + ; $03 (1 enemy)
0AE41 03                        	.db (+ - $)
0AE42                           	enemy $9, $8, Enemy_ShyguyPink
0AE42 03 98                     	.db Enemy_ShyguyPink, $9 << 4 | $8
0AE44                           
0AE44                           ; Page 3
0AE44                           +	distTo + ; $07 (3 enemies)
0AE44 07                        	.db (+ - $)
0AE45                           	enemy $4, $8, Enemy_ShyguyPink
0AE45 03 48                     	.db Enemy_ShyguyPink, $4 << 4 | $8
0AE47                           	enemy $6, $6, Enemy_Pokey
0AE47 1A 66                     	.db Enemy_Pokey, $6 << 4 | $6
0AE49                           	enemy $A, $A, Enemy_CobratSand
0AE49 19 AA                     	.db Enemy_CobratSand, $A << 4 | $A
0AE4B                           
0AE4B                           ; Page 4
0AE4B                           +	distTo + ; $01 (0 enemies)
0AE4B 01                        	.db (+ - $)
0AE4C                           
0AE4C                           ; Page 5
0AE4C                           +	distTo + ; $01 (0 enemies)
0AE4C 01                        	.db (+ - $)
0AE4D                           
0AE4D                           ; End of enemy data
0AE4D                           +
0AE4D                           include "src/levels/6/6-3/6-3-area2-enemies.asm"
0AE4D                           ; Level 6-3, Area 2
0AE4D                           
0AE4D                           EnemyData_Level_6_3_Area2:
0AE4D                           
0AE4D                           ; Page 0
0AE4D                           	distTo + ; $01 (0 enemies)
0AE4D 01                        	.db (+ - $)
0AE4E                           
0AE4E                           ; Page 1
0AE4E                           +	distTo + ; $05 (2 enemies)
0AE4E 05                        	.db (+ - $)
0AE4F                           	enemy $4, $9, Enemy_JarGeneratorBobOmb
0AE4F 16 49                     	.db Enemy_JarGeneratorBobOmb, $4 << 4 | $9
0AE51                           	enemy $F, $9, Enemy_JarGeneratorBobOmb
0AE51 16 F9                     	.db Enemy_JarGeneratorBobOmb, $F << 4 | $9
0AE53                           
0AE53                           ; Page 2
0AE53                           +	distTo + ; $05 (2 enemies)
0AE53 05                        	.db (+ - $)
0AE54                           	enemy $A, $9, Enemy_BobOmb
0AE54 09 A9                     	.db Enemy_BobOmb, $A << 4 | $9
0AE56                           	enemy $C, $9, Enemy_JarGeneratorBobOmb
0AE56 16 C9                     	.db Enemy_JarGeneratorBobOmb, $C << 4 | $9
0AE58                           
0AE58                           ; Page 3
0AE58                           +	distTo + ; $03 (1 enemy)
0AE58 03                        	.db (+ - $)
0AE59                           	enemy $F, $5, Enemy_NinjiRunning
0AE59 0D F5                     	.db Enemy_NinjiRunning, $F << 4 | $5
0AE5B                           
0AE5B                           ; Page 4
0AE5B                           +	distTo + ; $07 (3 enemies)
0AE5B 07                        	.db (+ - $)
0AE5C                           	enemy $2, $7, Enemy_NinjiRunning
0AE5C 0D 27                     	.db Enemy_NinjiRunning, $2 << 4 | $7
0AE5E                           	enemy $3, $8, Enemy_NinjiRunning
0AE5E 0D 38                     	.db Enemy_NinjiRunning, $3 << 4 | $8
0AE60                           	enemy $5, $6, Enemy_NinjiRunning
0AE60 0D 56                     	.db Enemy_NinjiRunning, $5 << 4 | $6
0AE62                           
0AE62                           ; Page 5
0AE62                           +	distTo + ; $01 (0 enemies)
0AE62 01                        	.db (+ - $)
0AE63                           
0AE63                           ; Page 6
0AE63                           +	distTo + ; $01 (0 enemies)
0AE63 01                        	.db (+ - $)
0AE64                           
0AE64                           ; Page 7
0AE64                           +	distTo + ; $01 (0 enemies)
0AE64 01                        	.db (+ - $)
0AE65                           
0AE65                           ; Page 8
0AE65                           +	distTo + ; $01 (0 enemies)
0AE65 01                        	.db (+ - $)
0AE66                           
0AE66                           ; Page 9
0AE66                           +	distTo + ; $01 (0 enemies)
0AE66 01                        	.db (+ - $)
0AE67                           
0AE67                           ; Page A
0AE67                           +	distTo + ; $01 (0 enemies)
0AE67 01                        	.db (+ - $)
0AE68                           
0AE68                           ; End of enemy data
0AE68                           +
0AE68                           include "src/levels/6/6-3/6-3-area3-enemies.asm"
0AE68                           ; Level 6-3, Area 3
0AE68                           
0AE68                           EnemyData_Level_6_3_Area3:
0AE68                           
0AE68                           ; Page 0
0AE68                           	distTo + ; $01 (0 enemies)
0AE68 01                        	.db (+ - $)
0AE69                           
0AE69                           ; Page 1
0AE69                           +	distTo + ; $09 (4 enemies)
0AE69 09                        	.db (+ - $)
0AE6A                           	enemy $9, $5, Enemy_Hoopstar
0AE6A 14 95                     	.db Enemy_Hoopstar, $9 << 4 | $5
0AE6C                           	enemy $A, $4, Enemy_Hoopstar
0AE6C 14 A4                     	.db Enemy_Hoopstar, $A << 4 | $4
0AE6E                           	enemy $B, $3, Enemy_Hoopstar
0AE6E 14 B3                     	.db Enemy_Hoopstar, $B << 4 | $3
0AE70                           	enemy $C, $2, Enemy_Hoopstar
0AE70 14 C2                     	.db Enemy_Hoopstar, $C << 4 | $2
0AE72                           
0AE72                           ; Page 2
0AE72                           +	distTo + ; $07 (3 enemies)
0AE72 07                        	.db (+ - $)
0AE73                           	enemy $A, $7, Enemy_Hoopstar
0AE73 14 A7                     	.db Enemy_Hoopstar, $A << 4 | $7
0AE75                           	enemy $B, $A, Enemy_Hoopstar
0AE75 14 BA                     	.db Enemy_Hoopstar, $B << 4 | $A
0AE77                           	enemy $C, $8, Enemy_Hoopstar
0AE77 14 C8                     	.db Enemy_Hoopstar, $C << 4 | $8
0AE79                           
0AE79                           ; Page 3
0AE79                           +	distTo + ; $03 (1 enemy)
0AE79 03                        	.db (+ - $)
0AE7A                           	enemy $3, $4, Enemy_Hoopstar
0AE7A 14 34                     	.db Enemy_Hoopstar, $3 << 4 | $4
0AE7C                           
0AE7C                           ; Page 4
0AE7C                           +	distTo + ; $07 (3 enemies)
0AE7C 07                        	.db (+ - $)
0AE7D                           	enemy $4, $A, Enemy_Hoopstar
0AE7D 14 4A                     	.db Enemy_Hoopstar, $4 << 4 | $A
0AE7F                           	enemy $7, $5, Enemy_SnifitGray
0AE7F 06 75                     	.db Enemy_SnifitGray, $7 << 4 | $5
0AE81                           	enemy $7, $E, Enemy_SnifitGray
0AE81 06 7E                     	.db Enemy_SnifitGray, $7 << 4 | $E
0AE83                           
0AE83                           ; Page 5
0AE83                           +	distTo + ; $03 (1 enemy)
0AE83 03                        	.db (+ - $)
0AE84                           	enemy $2, $8, Enemy_ShyguyRed
0AE84 01 28                     	.db Enemy_ShyguyRed, $2 << 4 | $8
0AE86                           
0AE86                           ; Page 6
0AE86                           +	distTo + ; $07 (3 enemies)
0AE86 07                        	.db (+ - $)
0AE87                           	enemy $9, $C, Enemy_Hoopstar
0AE87 14 9C                     	.db Enemy_Hoopstar, $9 << 4 | $C
0AE89                           	enemy $A, $D, Enemy_Hoopstar
0AE89 14 AD                     	.db Enemy_Hoopstar, $A << 4 | $D
0AE8B                           	enemy $B, $E, Enemy_Hoopstar
0AE8B 14 BE                     	.db Enemy_Hoopstar, $B << 4 | $E
0AE8D                           
0AE8D                           ; Page 7
0AE8D                           +	distTo + ; $03 (1 enemy)
0AE8D 03                        	.db (+ - $)
0AE8E                           	enemy $5, $C, Enemy_Hoopstar
0AE8E 14 5C                     	.db Enemy_Hoopstar, $5 << 4 | $C
0AE90                           
0AE90                           ; Page 8
0AE90                           +	distTo + ; $03 (1 enemy)
0AE90 03                        	.db (+ - $)
0AE91                           	enemy $9, $3, Enemy_Hoopstar
0AE91 14 93                     	.db Enemy_Hoopstar, $9 << 4 | $3
0AE93                           
0AE93                           ; Page 9
0AE93                           +	distTo + ; $01 (0 enemies)
0AE93 01                        	.db (+ - $)
0AE94                           
0AE94                           ; Page A
0AE94                           +	distTo + ; $01 (0 enemies)
0AE94 01                        	.db (+ - $)
0AE95                           
0AE95                           ; End of enemy data
0AE95                           +
0AE95                           include "src/levels/6/6-3/6-3-area4-enemies.asm"
0AE95                           ; Level 6-3, Area 4
0AE95                           
0AE95                           EnemyData_Level_6_3_Area4:
0AE95                           
0AE95                           ; Page 0
0AE95                           	distTo + ; $01 (0 enemies)
0AE95 01                        	.db (+ - $)
0AE96                           
0AE96                           ; Page 1
0AE96                           +	distTo + ; $01 (0 enemies)
0AE96 01                        	.db (+ - $)
0AE97                           
0AE97                           ; Page 2
0AE97                           +	distTo + ; $01 (0 enemies)
0AE97 01                        	.db (+ - $)
0AE98                           
0AE98                           ; Page 3
0AE98                           +	distTo + ; $01 (0 enemies)
0AE98 01                        	.db (+ - $)
0AE99                           
0AE99                           ; Page 4
0AE99                           +	distTo + ; $01 (0 enemies)
0AE99 01                        	.db (+ - $)
0AE9A                           
0AE9A                           ; End of enemy data
0AE9A                           +
0AE9A                           include "src/levels/6/6-3/6-3-area5-enemies.asm"
0AE9A                           ; Level 6-3, Area 5
0AE9A                           
0AE9A                           EnemyData_Level_6_3_Area5:
0AE9A                           
0AE9A                           ; Page 0
0AE9A                           	distTo + ; $01 (0 enemies)
0AE9A 01                        	.db (+ - $)
0AE9B                           
0AE9B                           ; Page 1
0AE9B                           +	distTo + ; $07 (3 enemies)
0AE9B 07                        	.db (+ - $)
0AE9C                           	enemy $9, $7, Enemy_HawkmouthLeft
0AE9C 43 97                     	.db Enemy_HawkmouthLeft, $9 << 4 | $7
0AE9E                           	enemy $B, $3, Enemy_Birdo
0AE9E 1C B3                     	.db Enemy_Birdo, $B << 4 | $3
0AEA0                           	enemy $B, $4, Enemy_CrystalBall
0AEA0 44 B4                     	.db Enemy_CrystalBall, $B << 4 | $4
0AEA2                           
0AEA2                           ; Page 2
0AEA2                           +	distTo + ; $01 (0 enemies)
0AEA2 01                        	.db (+ - $)
0AEA3                           
0AEA3                           ; End of enemy data
0AEA3                           +
0AEA3                           include "src/levels/6/6-3/6-3-area6-enemies.asm"
0AEA3                           ; Level 6-3, Area 6
0AEA3                           
0AEA3                           EnemyData_Level_6_3_Area6:
0AEA3                           
0AEA3                           ; Page 0
0AEA3                           	distTo + ; $01 (0 enemies)
0AEA3 01                        	.db (+ - $)
0AEA4                           
0AEA4                           ; Page 1
0AEA4                           +	distTo + ; $03 (1 enemy)
0AEA4 03                        	.db (+ - $)
0AEA5                           	enemy $B, $5, Enemy_BossTryclyde
0AEA5 5F B5                     	.db Enemy_BossTryclyde, $B << 4 | $5
0AEA7                           
0AEA7                           ; Page 2
0AEA7                           +	distTo + ; $01 (0 enemies)
0AEA7 01                        	.db (+ - $)
0AEA8                           
0AEA8                           ; End of enemy data
0AEA8                           +
0AEA8                           ; -------------------------------
0AEA8                           
0AEA8                           
0AEA8                           ; -------------------------------
0AEA8                           ; World 7
0AEA8                           
0AEA8                           ; World 7-1
0AEA8                           include "src/levels/7/7-1/7-1-area0-enemies.asm"
0AEA8                           ; Level 7-1, Area 0
0AEA8                           
0AEA8                           EnemyData_Level_7_1_Area0:
0AEA8                           
0AEA8                           ; Page 0
0AEA8                           	distTo + ; $03 (1 enemy)
0AEA8 03                        	.db (+ - $)
0AEA9                           	enemy $2, $A, Enemy_HawkmouthRight
0AEA9 42 2A                     	.db Enemy_HawkmouthRight, $2 << 4 | $A
0AEAB                           
0AEAB                           ; Page 1
0AEAB                           +	distTo + ; $01 (0 enemies)
0AEAB 01                        	.db (+ - $)
0AEAC                           
0AEAC                           ; End of enemy data
0AEAC                           +
0AEAC                           include "src/levels/7/7-1/7-1-area1-enemies.asm"
0AEAC                           ; Level 7-1, Area 1
0AEAC                           
0AEAC                           EnemyData_Level_7_1_Area1:
0AEAC                           
0AEAC                           ; Page 0
0AEAC                           	distTo + ; $01 (0 enemies)
0AEAC 01                        	.db (+ - $)
0AEAD                           
0AEAD                           ; Page 1
0AEAD                           +	distTo + ; $01 (0 enemies)
0AEAD 01                        	.db (+ - $)
0AEAE                           
0AEAE                           ; Page 2
0AEAE                           +	distTo + ; $01 (0 enemies)
0AEAE 01                        	.db (+ - $)
0AEAF                           
0AEAF                           ; Page 3
0AEAF                           +	distTo + ; $0D (6 enemies)
0AEAF 0D                        	.db (+ - $)
0AEB0                           	enemy $8, $B, Enemy_BobOmb
0AEB0 09 8B                     	.db Enemy_BobOmb, $8 << 4 | $B
0AEB2                           	enemy $9, $4, Enemy_AlbatossStartLeft
0AEB2 0C 94                     	.db Enemy_AlbatossStartLeft, $9 << 4 | $4
0AEB4                           	enemy $9, $4, Enemy_BobOmb
0AEB4 09 94                     	.db Enemy_BobOmb, $9 << 4 | $4
0AEB6                           	enemy $B, $8, Enemy_NinjiRunning
0AEB6 0D B8                     	.db Enemy_NinjiRunning, $B << 4 | $8
0AEB8                           	enemy $E, $4, Enemy_AlbatossStartLeft
0AEB8 0C E4                     	.db Enemy_AlbatossStartLeft, $E << 4 | $4
0AEBA                           	enemy $E, $4, Enemy_BobOmb
0AEBA 09 E4                     	.db Enemy_BobOmb, $E << 4 | $4
0AEBC                           
0AEBC                           ; Page 4
0AEBC                           +	distTo + ; $07 (3 enemies)
0AEBC 07                        	.db (+ - $)
0AEBD                           	enemy $2, $B, Enemy_BobOmb
0AEBD 09 2B                     	.db Enemy_BobOmb, $2 << 4 | $B
0AEBF                           	enemy $E, $4, Enemy_AlbatossStartLeft
0AEBF 0C E4                     	.db Enemy_AlbatossStartLeft, $E << 4 | $4
0AEC1                           	enemy $E, $4, Enemy_BobOmb
0AEC1 09 E4                     	.db Enemy_BobOmb, $E << 4 | $4
0AEC3                           
0AEC3                           ; Page 5
0AEC3                           +	distTo + ; $0D (6 enemies)
0AEC3 0D                        	.db (+ - $)
0AEC4                           	enemy $3, $B, Enemy_NinjiJumping
0AEC4 0E 3B                     	.db Enemy_NinjiJumping, $3 << 4 | $B
0AEC6                           	enemy $5, $4, Enemy_AlbatossStartLeft
0AEC6 0C 54                     	.db Enemy_AlbatossStartLeft, $5 << 4 | $4
0AEC8                           	enemy $5, $4, Enemy_BobOmb
0AEC8 09 54                     	.db Enemy_BobOmb, $5 << 4 | $4
0AECA                           	enemy $6, $B, Enemy_BobOmb
0AECA 09 6B                     	.db Enemy_BobOmb, $6 << 4 | $B
0AECC                           	enemy $9, $4, Enemy_AlbatossStartLeft
0AECC 0C 94                     	.db Enemy_AlbatossStartLeft, $9 << 4 | $4
0AECE                           	enemy $9, $4, Enemy_BobOmb
0AECE 09 94                     	.db Enemy_BobOmb, $9 << 4 | $4
0AED0                           
0AED0                           ; Page 6
0AED0                           +	distTo + ; $07 (3 enemies)
0AED0 07                        	.db (+ - $)
0AED1                           	enemy $3, $7, Enemy_JarGeneratorShyguy
0AED1 15 37                     	.db Enemy_JarGeneratorShyguy, $3 << 4 | $7
0AED3                           	enemy $F, $3, Enemy_AlbatossStartLeft
0AED3 0C F3                     	.db Enemy_AlbatossStartLeft, $F << 4 | $3
0AED5                           	enemy $F, $3, Enemy_BobOmb
0AED5 09 F3                     	.db Enemy_BobOmb, $F << 4 | $3
0AED7                           
0AED7                           ; Page 7
0AED7                           +	distTo + ; $01 (0 enemies)
0AED7 01                        	.db (+ - $)
0AED8                           
0AED8                           ; End of enemy data
0AED8                           +
0AED8                           include "src/levels/7/7-1/7-1-area2-enemies.asm"
0AED8                           ; Level 7-1, Area 2
0AED8                           
0AED8                           EnemyData_Level_7_1_Area2:
0AED8                           
0AED8                           ; Page 0
0AED8                           	distTo + ; $01 (0 enemies)
0AED8 01                        	.db (+ - $)
0AED9                           
0AED9                           ; Page 1
0AED9                           +	distTo + ; $07 (3 enemies)
0AED9 07                        	.db (+ - $)
0AEDA                           	enemy $A, $8, Enemy_Tweeter
0AEDA 02 A8                     	.db Enemy_Tweeter, $A << 4 | $8
0AEDC                           	enemy $B, $6, Enemy_SnifitGray
0AEDC 06 B6                     	.db Enemy_SnifitGray, $B << 4 | $6
0AEDE                           	enemy $C, $B, Enemy_SnifitGray
0AEDE 06 CB                     	.db Enemy_SnifitGray, $C << 4 | $B
0AEE0                           
0AEE0                           ; Page 2
0AEE0                           +	distTo + ; $07 (3 enemies)
0AEE0 07                        	.db (+ - $)
0AEE1                           	enemy $3, $8, Enemy_JarGeneratorShyguy
0AEE1 15 38                     	.db Enemy_JarGeneratorShyguy, $3 << 4 | $8
0AEE3                           	enemy $D, $C, Enemy_ShyguyPink
0AEE3 03 DC                     	.db Enemy_ShyguyPink, $D << 4 | $C
0AEE5                           	enemy $F, $3, Enemy_SnifitGray
0AEE5 06 F3                     	.db Enemy_SnifitGray, $F << 4 | $3
0AEE7                           
0AEE7                           ; Page 3
0AEE7                           +	distTo + ; $05 (2 enemies)
0AEE7 05                        	.db (+ - $)
0AEE8                           	enemy $5, $9, Enemy_NinjiRunning
0AEE8 0D 59                     	.db Enemy_NinjiRunning, $5 << 4 | $9
0AEEA                           	enemy $A, $B, Enemy_SnifitGray
0AEEA 06 AB                     	.db Enemy_SnifitGray, $A << 4 | $B
0AEEC                           
0AEEC                           ; Page 4
0AEEC                           +	distTo + ; $01 (0 enemies)
0AEEC 01                        	.db (+ - $)
0AEED                           
0AEED                           ; End of enemy data
0AEED                           +
0AEED                           include "src/levels/7/7-1/7-1-area3-enemies.asm"
0AEED                           ; Level 7-1, Area 3
0AEED                           
0AEED                           EnemyData_Level_7_1_Area3:
0AEED                           
0AEED                           ; Page 0
0AEED                           	distTo + ; $01 (0 enemies)
0AEED 01                        	.db (+ - $)
0AEEE                           
0AEEE                           ; Page 1
0AEEE                           +	distTo + ; $07 (3 enemies)
0AEEE 07                        	.db (+ - $)
0AEEF                           	enemy $2, $1, Enemy_SnifitGray
0AEEF 06 21                     	.db Enemy_SnifitGray, $2 << 4 | $1
0AEF1                           	enemy $6, $6, Enemy_Hoopstar
0AEF1 14 66                     	.db Enemy_Hoopstar, $6 << 4 | $6
0AEF3                           	enemy $8, $B, Enemy_Hoopstar
0AEF3 14 8B                     	.db Enemy_Hoopstar, $8 << 4 | $B
0AEF5                           
0AEF5                           ; Page 2
0AEF5                           +	distTo + ; $07 (3 enemies)
0AEF5 07                        	.db (+ - $)
0AEF6                           	enemy $8, $7, Enemy_Spark4
0AEF6 31 87                     	.db Enemy_Spark4, $8 << 4 | $7
0AEF8                           	enemy $D, $7, Enemy_Spark4
0AEF8 31 D7                     	.db Enemy_Spark4, $D << 4 | $7
0AEFA                           	enemy $D, $9, Enemy_Spark2
0AEFA 2F D9                     	.db Enemy_Spark2, $D << 4 | $9
0AEFC                           
0AEFC                           ; Page 3
0AEFC                           +	distTo + ; $05 (2 enemies)
0AEFC 05                        	.db (+ - $)
0AEFD                           	enemy $E, $0, Enemy_Spark4
0AEFD 31 E0                     	.db Enemy_Spark4, $E << 4 | $0
0AEFF                           	enemy $6, $3, Enemy_Spark4
0AEFF 31 63                     	.db Enemy_Spark4, $6 << 4 | $3
0AF01                           
0AF01                           ; Page 4
0AF01                           +	distTo + ; $01 (0 enemies)
0AF01 01                        	.db (+ - $)
0AF02                           
0AF02                           ; End of enemy data
0AF02                           +
0AF02                           include "src/levels/7/7-1/7-1-area4-enemies.asm"
0AF02                           ; Level 7-1, Area 4
0AF02                           
0AF02                           EnemyData_Level_7_1_Area4:
0AF02                           
0AF02                           ; Page 0
0AF02                           	distTo + ; $01 (0 enemies)
0AF02 01                        	.db (+ - $)
0AF03                           
0AF03                           ; Page 1
0AF03                           +	distTo + ; $07 (3 enemies)
0AF03 07                        	.db (+ - $)
0AF04                           	enemy $9, $A, Enemy_HawkmouthLeft
0AF04 43 9A                     	.db Enemy_HawkmouthLeft, $9 << 4 | $A
0AF06                           	enemy $C, $5, Enemy_Birdo
0AF06 1C C5                     	.db Enemy_Birdo, $C << 4 | $5
0AF08                           	enemy $C, $6, Enemy_CrystalBall
0AF08 44 C6                     	.db Enemy_CrystalBall, $C << 4 | $6
0AF0A                           
0AF0A                           ; Page 2
0AF0A                           +	distTo + ; $01 (0 enemies)
0AF0A 01                        	.db (+ - $)
0AF0B                           
0AF0B                           ; End of enemy data
0AF0B                           +
0AF0B                           include "src/levels/7/7-1/7-1-area5-enemies.asm"
0AF0B                           ; Level 7-1, Area 5
0AF0B                           
0AF0B                           EnemyData_Level_7_1_Area5:
0AF0B                           
0AF0B                           ; Page 0
0AF0B                           	distTo + ; $05 (2 enemies)
0AF0B 05                        	.db (+ - $)
0AF0C                           	enemy $B, $9, Enemy_Spark4
0AF0C 31 B9                     	.db Enemy_Spark4, $B << 4 | $9
0AF0E                           	enemy $C, $3, Enemy_Spark4
0AF0E 31 C3                     	.db Enemy_Spark4, $C << 4 | $3
0AF10                           
0AF10                           ; Page 1
0AF10                           +	distTo + ; $01 (0 enemies)
0AF10 01                        	.db (+ - $)
0AF11                           
0AF11                           ; End of enemy data
0AF11                           +
0AF11                           
0AF11                           ; World 7-2
0AF11                           include "src/levels/7/7-2/7-2-area0-enemies.asm"
0AF11                           ; Level 7-2, Area 0
0AF11                           
0AF11                           EnemyData_Level_7_2_Area0:
0AF11                           
0AF11                           ; Page 0
0AF11                           	distTo + ; $03 (1 enemy)
0AF11 03                        	.db (+ - $)
0AF12                           	enemy $F, $5, Enemy_SnifitGray
0AF12 06 F5                     	.db Enemy_SnifitGray, $F << 4 | $5
0AF14                           
0AF14                           ; Page 1
0AF14                           +	distTo + ; $05 (2 enemies)
0AF14 05                        	.db (+ - $)
0AF15                           	enemy $5, $8, Enemy_SnifitGray
0AF15 06 58                     	.db Enemy_SnifitGray, $5 << 4 | $8
0AF17                           	enemy $E, $8, Enemy_SnifitGray
0AF17 06 E8                     	.db Enemy_SnifitGray, $E << 4 | $8
0AF19                           
0AF19                           ; Page 2
0AF19                           +	distTo + ; $03 (1 enemy)
0AF19 03                        	.db (+ - $)
0AF1A                           	enemy $7, $4, Enemy_NinjiJumping
0AF1A 0E 74                     	.db Enemy_NinjiJumping, $7 << 4 | $4
0AF1C                           
0AF1C                           ; Page 3
0AF1C                           +	distTo + ; $01 (0 enemies)
0AF1C 01                        	.db (+ - $)
0AF1D                           
0AF1D                           ; End of enemy data
0AF1D                           +
0AF1D                           include "src/levels/7/7-2/7-2-area1-enemies.asm"
0AF1D                           ; Level 7-2, Area 1
0AF1D                           
0AF1D                           EnemyData_Level_7_2_Area1:
0AF1D                           
0AF1D                           ; Page 0
0AF1D                           	distTo + ; $01 (0 enemies)
0AF1D 01                        	.db (+ - $)
0AF1E                           
0AF1E                           ; Page 1
0AF1E                           +	distTo + ; $07 (3 enemies)
0AF1E 07                        	.db (+ - $)
0AF1F                           	enemy $9, $9, Enemy_ShyguyRed
0AF1F 01 99                     	.db Enemy_ShyguyRed, $9 << 4 | $9
0AF21                           	enemy $D, $9, Enemy_ShyguyRed
0AF21 01 D9                     	.db Enemy_ShyguyRed, $D << 4 | $9
0AF23                           	enemy $F, $9, Enemy_JarGeneratorShyguy
0AF23 15 F9                     	.db Enemy_JarGeneratorShyguy, $F << 4 | $9
0AF25                           
0AF25                           ; Page 2
0AF25                           +	distTo + ; $07 (3 enemies)
0AF25 07                        	.db (+ - $)
0AF26                           	enemy $7, $7, Enemy_NinjiJumping
0AF26 0E 77                     	.db Enemy_NinjiJumping, $7 << 4 | $7
0AF28                           	enemy $A, $7, Enemy_NinjiJumping
0AF28 0E A7                     	.db Enemy_NinjiJumping, $A << 4 | $7
0AF2A                           	enemy $C, $7, Enemy_NinjiJumping
0AF2A 0E C7                     	.db Enemy_NinjiJumping, $C << 4 | $7
0AF2C                           
0AF2C                           ; Page 3
0AF2C                           +	distTo + ; $03 (1 enemy)
0AF2C 03                        	.db (+ - $)
0AF2D                           	enemy $D, $9, Enemy_JarGeneratorBobOmb
0AF2D 16 D9                     	.db Enemy_JarGeneratorBobOmb, $D << 4 | $9
0AF2F                           
0AF2F                           ; Page 4
0AF2F                           +	distTo + ; $01 (0 enemies)
0AF2F 01                        	.db (+ - $)
0AF30                           
0AF30                           ; Page 5
0AF30                           +	distTo + ; $05 (2 enemies)
0AF30 05                        	.db (+ - $)
0AF31                           	enemy $1, $C, Enemy_PanserStationaryFiresUp
0AF31 25 1C                     	.db Enemy_PanserStationaryFiresUp, $1 << 4 | $C
0AF33                           	enemy $B, $C, Enemy_PanserStationaryFiresUp
0AF33 25 BC                     	.db Enemy_PanserStationaryFiresUp, $B << 4 | $C
0AF35                           
0AF35                           ; Page 6
0AF35                           +	distTo + ; $03 (1 enemy)
0AF35 03                        	.db (+ - $)
0AF36                           	enemy $5, $B, Enemy_PanserStationaryFiresUp
0AF36 25 5B                     	.db Enemy_PanserStationaryFiresUp, $5 << 4 | $B
0AF38                           
0AF38                           ; Page 7
0AF38                           +	distTo + ; $01 (0 enemies)
0AF38 01                        	.db (+ - $)
0AF39                           
0AF39                           ; End of enemy data
0AF39                           +
0AF39                           include "src/levels/7/7-2/7-2-area2-enemies.asm"
0AF39                           ; Level 7-2, Area 2
0AF39                           
0AF39                           EnemyData_Level_7_2_Area2:
0AF39                           
0AF39                           ; Page 0
0AF39                           	distTo + ; $01 (0 enemies)
0AF39 01                        	.db (+ - $)
0AF3A                           
0AF3A                           ; Page 1
0AF3A                           +	distTo + ; $05 (2 enemies)
0AF3A 05                        	.db (+ - $)
0AF3B                           	enemy $9, $9, Enemy_Spark4
0AF3B 31 99                     	.db Enemy_Spark4, $9 << 4 | $9
0AF3D                           	enemy $E, $C, Enemy_Spark4
0AF3D 31 EC                     	.db Enemy_Spark4, $E << 4 | $C
0AF3F                           
0AF3F                           ; Page 2
0AF3F                           +	distTo + ; $05 (2 enemies)
0AF3F 05                        	.db (+ - $)
0AF40                           	enemy $2, $4, Enemy_Spark4
0AF40 31 24                     	.db Enemy_Spark4, $2 << 4 | $4
0AF42                           	enemy $6, $9, Enemy_Spark4
0AF42 31 69                     	.db Enemy_Spark4, $6 << 4 | $9
0AF44                           
0AF44                           ; Page 3
0AF44                           +	distTo + ; $05 (2 enemies)
0AF44 05                        	.db (+ - $)
0AF45                           	enemy $9, $6, Enemy_Spark2
0AF45 2F 96                     	.db Enemy_Spark2, $9 << 4 | $6
0AF47                           	enemy $E, $3, Enemy_Spark2
0AF47 2F E3                     	.db Enemy_Spark2, $E << 4 | $3
0AF49                           
0AF49                           ; Page 4
0AF49                           +	distTo + ; $03 (1 enemy)
0AF49 03                        	.db (+ - $)
0AF4A                           	enemy $3, $A, Enemy_Spark2
0AF4A 2F 3A                     	.db Enemy_Spark2, $3 << 4 | $A
0AF4C                           
0AF4C                           ; Page 5
0AF4C                           +	distTo + ; $03 (1 enemy)
0AF4C 03                        	.db (+ - $)
0AF4D                           	enemy $B, $7, Enemy_Birdo
0AF4D 1C B7                     	.db Enemy_Birdo, $B << 4 | $7
0AF4F                           
0AF4F                           ; Page 6
0AF4F                           +	distTo + ; $01 (0 enemies)
0AF4F 01                        	.db (+ - $)
0AF50                           
0AF50                           ; Page 7
0AF50                           +	distTo + ; $07 (3 enemies)
0AF50 07                        	.db (+ - $)
0AF51                           	enemy $B, $7, Enemy_Birdo
0AF51 1C B7                     	.db Enemy_Birdo, $B << 4 | $7
0AF53                           	enemy $A, $4, Enemy_Phanto
0AF53 17 A4                     	.db Enemy_Phanto, $A << 4 | $4
0AF55                           	enemy $B, $8, Enemy_Key
0AF55 3D B8                     	.db Enemy_Key, $B << 4 | $8
0AF57                           
0AF57                           ; Page 8
0AF57                           +	distTo + ; $01 (0 enemies)
0AF57 01                        	.db (+ - $)
0AF58                           
0AF58                           ; Page 9
0AF58                           +	distTo + ; $01 (0 enemies)
0AF58 01                        	.db (+ - $)
0AF59                           
0AF59                           ; Page A
0AF59                           +	distTo + ; $01 (0 enemies)
0AF59 01                        	.db (+ - $)
0AF5A                           
0AF5A                           ; End of enemy data
0AF5A                           +
0AF5A                           include "src/levels/7/7-2/7-2-area3-enemies.asm"
0AF5A                           ; Level 7-2, Area 3
0AF5A                           
0AF5A                           EnemyData_Level_7_2_Area3:
0AF5A                           
0AF5A                           ; Page 0
0AF5A                           	distTo + ; $07 (3 enemies)
0AF5A 07                        	.db (+ - $)
0AF5B                           	enemy $B, $8, Enemy_Spark2
0AF5B 2F B8                     	.db Enemy_Spark2, $B << 4 | $8
0AF5D                           	enemy $F, $3, Enemy_Spark3
0AF5D 30 F3                     	.db Enemy_Spark3, $F << 4 | $3
0AF5F                           	enemy $F, $C, Enemy_Spark1
0AF5F 2E FC                     	.db Enemy_Spark1, $F << 4 | $C
0AF61                           
0AF61                           ; Page 1
0AF61                           +	distTo + ; $09 (4 enemies)
0AF61 09                        	.db (+ - $)
0AF62                           	enemy $3, $4, Enemy_Spark2
0AF62 2F 34                     	.db Enemy_Spark2, $3 << 4 | $4
0AF64                           	enemy $7, $4, Enemy_Spark2
0AF64 2F 74                     	.db Enemy_Spark2, $7 << 4 | $4
0AF66                           	enemy $A, $4, Enemy_Spark2
0AF66 2F A4                     	.db Enemy_Spark2, $A << 4 | $4
0AF68                           	enemy $A, $B, Enemy_Spark3
0AF68 30 AB                     	.db Enemy_Spark3, $A << 4 | $B
0AF6A                           
0AF6A                           ; Page 2
0AF6A                           +	distTo + ; $07 (3 enemies)
0AF6A 07                        	.db (+ - $)
0AF6B                           	enemy $1, $A, Enemy_Spark3
0AF6B 30 1A                     	.db Enemy_Spark3, $1 << 4 | $A
0AF6D                           	enemy $7, $9, Enemy_Spark2
0AF6D 2F 79                     	.db Enemy_Spark2, $7 << 4 | $9
0AF6F                           	enemy $F, $5, Enemy_Spark3
0AF6F 30 F5                     	.db Enemy_Spark3, $F << 4 | $5
0AF71                           
0AF71                           ; Page 3
0AF71                           +	distTo + ; $01 (0 enemies)
0AF71 01                        	.db (+ - $)
0AF72                           
0AF72                           ; Page 4
0AF72                           +	distTo + ; $01 (0 enemies)
0AF72 01                        	.db (+ - $)
0AF73                           
0AF73                           ; End of enemy data
0AF73                           +
0AF73                           include "src/levels/7/7-2/7-2-area4-enemies.asm"
0AF73                           ; Level 7-2, Area 4
0AF73                           
0AF73                           EnemyData_Level_7_2_Area4:
0AF73                           
0AF73                           ; Page 0
0AF73                           	distTo + ; $09 (4 enemies)
0AF73 09                        	.db (+ - $)
0AF74                           	enemy $2, $3, Enemy_Spark2
0AF74 2F 23                     	.db Enemy_Spark2, $2 << 4 | $3
0AF76                           	enemy $8, $3, Enemy_Spark2
0AF76 2F 83                     	.db Enemy_Spark2, $8 << 4 | $3
0AF78                           	enemy $E, $3, Enemy_Spark2
0AF78 2F E3                     	.db Enemy_Spark2, $E << 4 | $3
0AF7A                           	enemy $C, $C, Enemy_Spark4
0AF7A 31 CC                     	.db Enemy_Spark4, $C << 4 | $C
0AF7C                           
0AF7C                           ; Page 1
0AF7C                           +	distTo + ; $05 (2 enemies)
0AF7C 05                        	.db (+ - $)
0AF7D                           	enemy $B, $B, Enemy_Spark2
0AF7D 2F BB                     	.db Enemy_Spark2, $B << 4 | $B
0AF7F                           	enemy $F, $B, Enemy_Spark2
0AF7F 2F FB                     	.db Enemy_Spark2, $F << 4 | $B
0AF81                           
0AF81                           ; Page 2
0AF81                           +	distTo + ; $03 (1 enemy)
0AF81 03                        	.db (+ - $)
0AF82                           	enemy $5, $3, Enemy_Spark2
0AF82 2F 53                     	.db Enemy_Spark2, $5 << 4 | $3
0AF84                           
0AF84                           ; Page 3
0AF84                           +	distTo + ; $09 (4 enemies)
0AF84 09                        	.db (+ - $)
0AF85                           	enemy $2, $9, Enemy_Spark4
0AF85 31 29                     	.db Enemy_Spark4, $2 << 4 | $9
0AF87                           	enemy $4, $3, Enemy_Spark1
0AF87 2E 43                     	.db Enemy_Spark1, $4 << 4 | $3
0AF89                           	enemy $A, $3, Enemy_Spark2
0AF89 2F A3                     	.db Enemy_Spark2, $A << 4 | $3
0AF8B                           	enemy $5, $9, Enemy_Spark4
0AF8B 31 59                     	.db Enemy_Spark4, $5 << 4 | $9
0AF8D                           
0AF8D                           ; Page 4
0AF8D                           +	distTo + ; $01 (0 enemies)
0AF8D 01                        	.db (+ - $)
0AF8E                           
0AF8E                           ; Page 5
0AF8E                           +	distTo + ; $01 (0 enemies)
0AF8E 01                        	.db (+ - $)
0AF8F                           
0AF8F                           ; Page 6
0AF8F                           +	distTo + ; $01 (0 enemies)
0AF8F 01                        	.db (+ - $)
0AF90                           
0AF90                           ; Page 7
0AF90                           +	distTo + ; $01 (0 enemies)
0AF90 01                        	.db (+ - $)
0AF91                           
0AF91                           ; Page 8
0AF91                           +	distTo + ; $01 (0 enemies)
0AF91 01                        	.db (+ - $)
0AF92                           
0AF92                           ; Page 9
0AF92                           +	distTo + ; $05 (2 enemies)
0AF92 05                        	.db (+ - $)
0AF93                           	enemy $4, $9, Enemy_CrystalBall
0AF93 44 49                     	.db Enemy_CrystalBall, $4 << 4 | $9
0AF95                           	enemy $B, $7, Enemy_HawkmouthBoss
0AF95 2D B7                     	.db Enemy_HawkmouthBoss, $B << 4 | $7
0AF97                           
0AF97                           ; Page A
0AF97                           +	distTo + ; $01 (0 enemies)
0AF97 01                        	.db (+ - $)
0AF98                           
0AF98                           ; End of enemy data
0AF98                           +
0AF98                           include "src/levels/7/7-2/7-2-area5-enemies.asm"
0AF98                           ; Level 7-2, Area 5
0AF98                           
0AF98                           EnemyData_Level_7_2_Area5:
0AF98                           
0AF98                           ; Page 0
0AF98                           	distTo + ; $01 (0 enemies)
0AF98 01                        	.db (+ - $)
0AF99                           
0AF99                           ; Page 1
0AF99                           +	distTo + ; $01 (0 enemies)
0AF99 01                        	.db (+ - $)
0AF9A                           
0AF9A                           ; Page 2
0AF9A                           +	distTo + ; $05 (2 enemies)
0AF9A 05                        	.db (+ - $)
0AF9B                           	enemy $1, $A, Enemy_VegetableThrower
0AF9B 4A 1A                     	.db Enemy_VegetableThrower, $1 << 4 | $A
0AF9D                           	enemy $A, $7, Enemy_BossWart
0AF9D 6C A7                     	.db Enemy_BossWart, $A << 4 | $7
0AF9F                           
0AF9F                           ; Page 3
0AF9F                           +	distTo + ; $01 (0 enemies)
0AF9F 01                        	.db (+ - $)
0AFA0                           
0AFA0                           ; End of enemy data
0AFA0                           +
0AFA0                           include "src/levels/7/7-2/7-2-area6-enemies.asm"
0AFA0                           ; Level 7-2, Area 6
0AFA0                           
0AFA0                           EnemyData_Level_7_2_Area6:
0AFA0                           
0AFA0                           ; Page 0
0AFA0                           	distTo + ; $03 (1 enemy)
0AFA0 03                        	.db (+ - $)
0AFA1                           	enemy $8, $A, Enemy_Spark2
0AFA1 2F 8A                     	.db Enemy_Spark2, $8 << 4 | $A
0AFA3                           
0AFA3                           ; Page 1
0AFA3                           +	distTo + ; $07 (3 enemies)
0AFA3 07                        	.db (+ - $)
0AFA4                           	enemy $7, $3, Enemy_Spark1
0AFA4 2E 73                     	.db Enemy_Spark1, $7 << 4 | $3
0AFA6                           	enemy $8, $5, Enemy_Spark4
0AFA6 31 85                     	.db Enemy_Spark4, $8 << 4 | $5
0AFA8                           	enemy $8, $C, Enemy_Spark2
0AFA8 2F 8C                     	.db Enemy_Spark2, $8 << 4 | $C
0AFAA                           
0AFAA                           ; Page 2
0AFAA                           +	distTo + ; $05 (2 enemies)
0AFAA 05                        	.db (+ - $)
0AFAB                           	enemy $8, $7, Enemy_Spark4
0AFAB 31 87                     	.db Enemy_Spark4, $8 << 4 | $7
0AFAD                           	enemy $8, $E, Enemy_Spark2
0AFAD 2F 8E                     	.db Enemy_Spark2, $8 << 4 | $E
0AFAF                           
0AFAF                           ; Page 3
0AFAF                           +	distTo + ; $05 (2 enemies)
0AFAF 05                        	.db (+ - $)
0AFB0                           	enemy $5, $0, Enemy_Spark4
0AFB0 31 50                     	.db Enemy_Spark4, $5 << 4 | $0
0AFB2                           	enemy $A, $0, Enemy_Spark3
0AFB2 30 A0                     	.db Enemy_Spark3, $A << 4 | $0
0AFB4                           
0AFB4                           ; Page 4
0AFB4                           +	distTo + ; $01 (0 enemies)
0AFB4 01                        	.db (+ - $)
0AFB5                           
0AFB5                           ; Page 5
0AFB5                           +	distTo + ; $01 (0 enemies)
0AFB5 01                        	.db (+ - $)
0AFB6                           
0AFB6                           ; Page 6
0AFB6                           +	distTo + ; $01 (0 enemies)
0AFB6 01                        	.db (+ - $)
0AFB7                           
0AFB7                           ; Page 7
0AFB7                           +	distTo + ; $0D (6 enemies)
0AFB7 0D                        	.db (+ - $)
0AFB8                           	enemy $6, $1, Enemy_Spark4
0AFB8 31 61                     	.db Enemy_Spark4, $6 << 4 | $1
0AFBA                           	enemy $A, $1, Enemy_Spark4
0AFBA 31 A1                     	.db Enemy_Spark4, $A << 4 | $1
0AFBC                           	enemy $A, $3, Enemy_Spark2
0AFBC 2F A3                     	.db Enemy_Spark2, $A << 4 | $3
0AFBE                           	enemy $6, $8, Enemy_Spark4
0AFBE 31 68                     	.db Enemy_Spark4, $6 << 4 | $8
0AFC0                           	enemy $5, $A, Enemy_Spark2
0AFC0 2F 5A                     	.db Enemy_Spark2, $5 << 4 | $A
0AFC2                           	enemy $A, $A, Enemy_Spark2
0AFC2 2F AA                     	.db Enemy_Spark2, $A << 4 | $A
0AFC4                           
0AFC4                           ; Page 8
0AFC4                           +	distTo + ; $05 (2 enemies)
0AFC4 05                        	.db (+ - $)
0AFC5                           	enemy $6, $1, Enemy_Spark2
0AFC5 2F 61                     	.db Enemy_Spark2, $6 << 4 | $1
0AFC7                           	enemy $A, $1, Enemy_Spark2
0AFC7 2F A1                     	.db Enemy_Spark2, $A << 4 | $1
0AFC9                           
0AFC9                           ; Page 9
0AFC9                           +	distTo + ; $01 (0 enemies)
0AFC9 01                        	.db (+ - $)
0AFCA                           
0AFCA                           ; Page A
0AFCA                           +	distTo + ; $01 (0 enemies)
0AFCA 01                        	.db (+ - $)
0AFCB                           
0AFCB                           ; End of enemy data
0AFCB                           +
0AFCB                           include "src/levels/7/7-2/7-2-area7-enemies.asm"
0AFCB                           ; Level 7-2, Area 7
0AFCB                           
0AFCB                           EnemyData_Level_7_2_Area7:
0AFCB                           
0AFCB                           ; Page 0
0AFCB                           	distTo + ; $09 (4 enemies)
0AFCB 09                        	.db (+ - $)
0AFCC                           	enemy $7, $6, Enemy_ShyguyPink
0AFCC 03 76                     	.db Enemy_ShyguyPink, $7 << 4 | $6
0AFCE                           	enemy $6, $9, Enemy_SnifitPink
0AFCE 07 69                     	.db Enemy_SnifitPink, $6 << 4 | $9
0AFD0                           	enemy $9, $9, Enemy_SnifitPink
0AFD0 07 99                     	.db Enemy_SnifitPink, $9 << 4 | $9
0AFD2                           	enemy $8, $F, Enemy_Spark3
0AFD2 30 8F                     	.db Enemy_Spark3, $8 << 4 | $F
0AFD4                           
0AFD4                           ; Page 1
0AFD4                           +	distTo + ; $09 (4 enemies)
0AFD4 09                        	.db (+ - $)
0AFD5                           	enemy $A, $2, Enemy_Spark2
0AFD5 2F A2                     	.db Enemy_Spark2, $A << 4 | $2
0AFD7                           	enemy $7, $3, Enemy_Spark4
0AFD7 31 73                     	.db Enemy_Spark4, $7 << 4 | $3
0AFD9                           	enemy $6, $8, Enemy_Spark4
0AFD9 31 68                     	.db Enemy_Spark4, $6 << 4 | $8
0AFDB                           	enemy $A, $D, Enemy_Spark1
0AFDB 2E AD                     	.db Enemy_Spark1, $A << 4 | $D
0AFDD                           
0AFDD                           ; Page 2
0AFDD                           +	distTo + ; $07 (3 enemies)
0AFDD 07                        	.db (+ - $)
0AFDE                           	enemy $8, $0, Enemy_Spark4
0AFDE 31 80                     	.db Enemy_Spark4, $8 << 4 | $0
0AFE0                           	enemy $9, $7, Enemy_Spark4
0AFE0 31 97                     	.db Enemy_Spark4, $9 << 4 | $7
0AFE2                           	enemy $7, $F, Enemy_Spark1
0AFE2 2E 7F                     	.db Enemy_Spark1, $7 << 4 | $F
0AFE4                           
0AFE4                           ; Page 3
0AFE4                           +	distTo + ; $05 (2 enemies)
0AFE4 05                        	.db (+ - $)
0AFE5                           	enemy $8, $0, Enemy_SnifitPink
0AFE5 07 80                     	.db Enemy_SnifitPink, $8 << 4 | $0
0AFE7                           	enemy $8, $4, Enemy_ShyguyRed
0AFE7 01 84                     	.db Enemy_ShyguyRed, $8 << 4 | $4
0AFE9                           
0AFE9                           ; Page 4
0AFE9                           +	distTo + ; $01 (0 enemies)
0AFE9 01                        	.db (+ - $)
0AFEA                           
0AFEA                           ; End of enemy data
0AFEA                           +
0AFEA                           include "src/levels/7/7-2/7-2-area8-enemies.asm"
0AFEA                           ; Level 7-2, Area 8
0AFEA                           
0AFEA                           EnemyData_Level_7_2_Area8:
0AFEA                           
0AFEA                           ; Page 0
0AFEA                           	distTo + ; $05 (2 enemies)
0AFEA 05                        	.db (+ - $)
0AFEB                           	enemy $9, $C, Enemy_Spark4
0AFEB 31 9C                     	.db Enemy_Spark4, $9 << 4 | $C
0AFED                           	enemy $7, $E, Enemy_Spark3
0AFED 30 7E                     	.db Enemy_Spark3, $7 << 4 | $E
0AFEF                           
0AFEF                           ; Page 1
0AFEF                           +	distTo + ; $07 (3 enemies)
0AFEF 07                        	.db (+ - $)
0AFF0                           	enemy $3, $5, Enemy_Spark2
0AFF0 2F 35                     	.db Enemy_Spark2, $3 << 4 | $5
0AFF2                           	enemy $7, $7, Enemy_Spark3
0AFF2 30 77                     	.db Enemy_Spark3, $7 << 4 | $7
0AFF4                           	enemy $A, $8, Enemy_Spark4
0AFF4 31 A8                     	.db Enemy_Spark4, $A << 4 | $8
0AFF6                           
0AFF6                           ; Page 2
0AFF6                           +	distTo + ; $05 (2 enemies)
0AFF6 05                        	.db (+ - $)
0AFF7                           	enemy $6, $7, Enemy_Spark4
0AFF7 31 67                     	.db Enemy_Spark4, $6 << 4 | $7
0AFF9                           	enemy $B, $A, Enemy_Spark4
0AFF9 31 BA                     	.db Enemy_Spark4, $B << 4 | $A
0AFFB                           
0AFFB                           ; Page 3
0AFFB                           +	distTo + ; $01 (0 enemies)
0AFFB 01                        	.db (+ - $)
0AFFC                           
0AFFC                           ; Page 4
0AFFC                           +	distTo + ; $09 (4 enemies)
0AFFC 09                        	.db (+ - $)
0AFFD                           	enemy $4, $2, Enemy_Spark3
0AFFD 30 42                     	.db Enemy_Spark3, $4 << 4 | $2
0AFFF                           	enemy $8, $2, Enemy_Spark4
0AFFF 31 82                     	.db Enemy_Spark4, $8 << 4 | $2
0B001                           	enemy $B, $2, Enemy_Spark3
0B001 30 B2                     	.db Enemy_Spark3, $B << 4 | $2
0B003                           	enemy $7, $4, Enemy_Spark2
0B003 2F 74                     	.db Enemy_Spark2, $7 << 4 | $4
0B005                           
0B005                           ; Page 5
0B005                           +	distTo + ; $09 (4 enemies)
0B005 09                        	.db (+ - $)
0B006                           	enemy $5, $3, Enemy_Spark2
0B006 2F 53                     	.db Enemy_Spark2, $5 << 4 | $3
0B008                           	enemy $9, $3, Enemy_Spark2
0B008 2F 93                     	.db Enemy_Spark2, $9 << 4 | $3
0B00A                           	enemy $5, $4, Enemy_Spark3
0B00A 30 54                     	.db Enemy_Spark3, $5 << 4 | $4
0B00C                           	enemy $7, $6, Enemy_Spark2
0B00C 2F 76                     	.db Enemy_Spark2, $7 << 4 | $6
0B00E                           
0B00E                           ; Page 6
0B00E                           +	distTo + ; $01 (0 enemies)
0B00E 01                        	.db (+ - $)
0B00F                           
0B00F                           ; Page 7
0B00F                           +	distTo + ; $01 (0 enemies)
0B00F 01                        	.db (+ - $)
0B010                           
0B010                           ; End of enemy data
0B010                           +
0B010                           include "src/levels/7/7-2/7-2-area9-enemies.asm"
0B010                           ; Level 7-2, Area 9
0B010                           
0B010                           EnemyData_Level_7_2_Area9:
0B010                           
0B010                           ; Page 0
0B010                           	distTo + ; $01 (0 enemies)
0B010 01                        	.db (+ - $)
0B011                           
0B011                           ; Page 1
0B011                           +	distTo + ; $01 (0 enemies)
0B011 01                        	.db (+ - $)
0B012                           
0B012                           ; Page 2
0B012                           +	distTo + ; $03 (1 enemy)
0B012 03                        	.db (+ - $)
0B013                           	enemy $7, $9, Enemy_PanserStationaryFiresAngled
0B013 23 79                     	.db Enemy_PanserStationaryFiresAngled, $7 << 4 | $9
0B015                           
0B015                           ; Page 3
0B015                           +	distTo + ; $05 (2 enemies)
0B015 05                        	.db (+ - $)
0B016                           	enemy $2, $0, Enemy_Tweeter
0B016 02 20                     	.db Enemy_Tweeter, $2 << 4 | $0
0B018                           	enemy $D, $0, Enemy_Tweeter
0B018 02 D0                     	.db Enemy_Tweeter, $D << 4 | $0
0B01A                           
0B01A                           ; Page 4
0B01A                           +	distTo + ; $01 (0 enemies)
0B01A 01                        	.db (+ - $)
0B01B                           
0B01B                           ; End of enemy data
0B01B                           +
0B01B                           
0B01B                           ; World 7-3
0B01B                           include "src/levels/7/7-3/7-3-area0-enemies.asm"
0B01B                           ; Level 7-3, Area 0
0B01B                           
0B01B                           EnemyData_Level_7_3_Area0:
0B01B                           
0B01B                           ; Page 0
0B01B                           	distTo + ; $01 (0 enemies)
0B01B 01                        	.db (+ - $)
0B01C                           
0B01C                           ; End of enemy data
0B01C                           +
0B01C                           include "src/levels/7/7-3/7-3-area1-enemies.asm"
0B01C                           ; Level 7-3, Area 1
0B01C                           
0B01C                           EnemyData_Level_7_3_Area1:
0B01C                           
0B01C                           ; Page 0
0B01C                           	distTo + ; $01 (0 enemies)
0B01C 01                        	.db (+ - $)
0B01D                           
0B01D                           ; End of enemy data
0B01D                           +
0B01D                           include "src/levels/7/7-3/7-3-area2-enemies.asm"
0B01D                           ; Level 7-3, Area 2
0B01D                           
0B01D                           EnemyData_Level_7_3_Area2:
0B01D                           
0B01D                           ; Page 0
0B01D                           	distTo + ; $01 (0 enemies)
0B01D 01                        	.db (+ - $)
0B01E                           
0B01E                           ; End of enemy data
0B01E                           +
0B01E                           include "src/levels/7/7-3/7-3-area3-enemies.asm"
0B01E                           ; Level 7-3, Area 3
0B01E                           
0B01E                           EnemyData_Level_7_3_Area3:
0B01E                           
0B01E                           ; Page 0
0B01E                           	distTo + ; $01 (0 enemies)
0B01E 01                        	.db (+ - $)
0B01F                           
0B01F                           ; End of enemy data
0B01F                           +
0B01F                           include "src/levels/7/7-3/7-3-area4-enemies.asm"
0B01F                           ; Level 7-3, Area 4
0B01F                           
0B01F                           EnemyData_Level_7_3_Area4:
0B01F                           
0B01F                           ; Unused
0B01F                           
0B01F                           ; Page 0
0B01F                           	distTo + ; $01 (0 enemies)
0B01F 01                        	.db (+ - $)
0B020                           
0B020                           ; Page 1
0B020                           +	distTo + ; $01 (0 enemies)
0B020 01                        	.db (+ - $)
0B021                           
0B021                           ; Page 2
0B021                           +	distTo + ; $01 (0 enemies)
0B021 01                        	.db (+ - $)
0B022                           
0B022                           ; Page 3
0B022                           +	distTo + ; $01 (0 enemies)
0B022 01                        	.db (+ - $)
0B023                           
0B023                           ; Page 4
0B023                           +	distTo + ; $01 (0 enemies)
0B023 01                        	.db (+ - $)
0B024                           
0B024                           ; Page 5
0B024                           +	distTo + ; $01 (0 enemies)
0B024 01                        	.db (+ - $)
0B025                           
0B025                           ; End of enemy data
0B025                           +
0B025 FF FF FF FF FF FF FF FF.. .pad $c000, $ff
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; Banks A and B. Mostly bonus chance,
0C000                           ; character stats, and some PPU commands.
0C000                           ; Lots of empty space here too
0C000                           .base $8000
08000                           .include "src/prg-a-b.asm"
08000                           ;
08000                           ; Bank A & Bank B
08000                           ; ===============
08000                           ;
08000                           ; What's inside:
08000                           ;
08000                           ;   - Level title card background data and palettes
08000                           ;   - Bonus chance background data and palettes
08000                           ;   - Character select palettes
08000                           ;   - Character data (physics, palettes, etc.)
08000                           ;   - Character stats bootstrapping
08000                           ;
08000                           
08000                           ;
08000                           ; This title card is used for every world from 1 to 6.
08000                           ; The only difference is the loaded CHR banks.
08000                           ;
08000                           World1thru6TitleCard:
08000 FB FB B0 B2 FB FB FB FB.. 	.db $FB, $FB, $B0, $B2, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB
08010 FB FB B1 B3 FB FB FB FB.. 	.db $FB, $FB, $B1, $B3, $FB, $FB, $FB, $FB, $FB, $FB, $C0, $C1, $FB, $FB, $FB, $FB ; $10
08020 FB FB B4 B5 FB FB FB FB.. 	.db $FB, $FB, $B4, $B5, $FB, $FB, $FB, $FB, $B6, $B8, $BA, $B8, $BA, $BC, $FB, $FB ; $20
08030 FB FB B4 B5 FB FB FB FB.. 	.db $FB, $FB, $B4, $B5, $FB, $FB, $FB, $FB, $B7, $B9, $BB, $B9, $BB, $BD, $FB, $FB ; $30
08040 FB FB B4 B5 FB FB FB FB.. 	.db $FB, $FB, $B4, $B5, $FB, $FB, $FB, $FB, $B7, $B9, $BB, $B9, $BB, $BD, $FB, $FB ; $40
08050 FB FB B4 B5 C0 C1 FB FB.. 	.db $FB, $FB, $B4, $B5, $C0, $C1, $FB, $FB, $B7, $B9, $BB, $B9, $BB, $BD, $FB, $FB ; $50
08060 CA CC CA CC CA CC CA CC.. 	.db $CA, $CC, $CA, $CC, $CA, $CC, $CA, $CC, $CA, $CC, $CA, $CC, $CA, $CC, $CA, $CC ; $60
08070 CB CD CB CD CB CD CB CD.. 	.db $CB, $CD, $CB, $CD, $CB, $CD, $CB, $CD, $CB, $CD, $CB, $CD, $CB, $CD, $CB, $CD ; $70
08080 CE CF CE CF CE CF CE CF.. 	.db $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF ; $80
08090 CF CE CF CE CF CE CF CE.. 	.db $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE, $CF, $CE ; $90
080A0                           
080A0                           ;
080A0                           ; This one is the special one used for World 7
080A0                           ;
080A0                           World7TitleCard:
080A0 FB FB B0 B2 FB FB FB FB.. 	.db $FB, $FB, $B0, $B2, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB
080B0 FB FB B1 B3 FB FB FB FB.. 	.db $FB, $FB, $B1, $B3, $FB, $FB, $FB, $FB, $FB, $FB, $C0, $C1, $FB, $FB, $FB, $FB ; $10
080C0 FB FB B1 B3 FB FB FB FB.. 	.db $FB, $FB, $B1, $B3, $FB, $FB, $FB, $FB, $B6, $B8, $BA, $B8, $BA, $BC, $FB, $FB ; $20
080D0 FB FB B1 B3 FB FB FB FB.. 	.db $FB, $FB, $B1, $B3, $FB, $FB, $FB, $FB, $B7, $B9, $BB, $B9, $BB, $BD, $FB, $FB ; $30
080E0 FB FB B1 B3 FB FB FB FB.. 	.db $FB, $FB, $B1, $B3, $FB, $FB, $FB, $FB, $CA, $FC, $FC, $FC, $FC, $CC, $FB, $FB ; $40
080F0 FB FB B1 B3 C0 C1 FB FB.. 	.db $FB, $FB, $B1, $B3, $C0, $C1, $FB, $FB, $CA, $FC, $FC, $FC, $FC, $CC, $FB, $FB ; $50
08100 A8 AC AA AC AA AC AA AC.. 	.db $A8, $AC, $AA, $AC, $AA, $AC, $AA, $AC, $AA, $AC, $AA, $AC, $AA, $AC, $AA, $AE ; $60
08110 A9 AD AB AD AB AD AB AD.. 	.db $A9, $AD, $AB, $AD, $AB, $AD, $AB, $AD, $AB, $AD, $AB, $AD, $AB, $AD, $AB, $AF ; $70
08120 FB FB FB FB FB FB FB FB.. 	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB ; $80
08130 FB FB FB FB FB FB FB FB.. 	.db $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB ; $90
08140                           
08140                           BonusChanceLayout:
08140 20 00 60 FD               	.db $20, $00, $60, $FD
08144 20 20 60 FD               	.db $20, $20, $60, $FD
08148 20 40 60 FD               	.db $20, $40, $60, $FD
0814C 20 60 60 FD               	.db $20, $60, $60, $FD
08150 23 40 60 FD               	.db $23, $40, $60, $FD
08154 23 60 60 FD               	.db $23, $60, $60, $FD
08158 23 80 60 FD               	.db $23, $80, $60, $FD
0815C 23 A0 60 FD               	.db $23, $A0, $60, $FD
08160 20 80 D6 FD               	.db $20, $80, $D6, $FD
08164 20 81 D6 FD               	.db $20, $81, $D6, $FD
08168 20 82 D6 FD               	.db $20, $82, $D6, $FD
0816C 20 9D D6 FD               	.db $20, $9D, $D6, $FD
08170 20 9E D6 FD               	.db $20, $9E, $D6, $FD
08174 20 9F D6 FD               	.db $20, $9F, $D6, $FD
08178                           
08178 20 68 10                  	.db $20, $68, $10
0817B 48 4A 4C 4E 50 51 52 53.. 	.db $48, $4A, $4C, $4E, $50, $51, $52, $53, $54, $55, $56, $57, $58, $5A, $5C, $5E
0818B                           
0818B 20 83 09 FD FD 22 23 24.. 	.db $20, $83, $09, $FD, $FD, $22, $23, $24, $49, $4B, $4D, $4F
08197 20 94 09 59 5B 5D 5F 2E.. 	.db $20, $94, $09, $59, $5B, $5D, $5F, $2E, $2F, $30, $FD, $FD
081A3 20 A3 04 FD 25 26 27      	.db $20, $A3, $04, $FD, $25, $26, $27
081AA 20 B9 04 31 32 33 FD      	.db $20, $B9, $04, $31, $32, $33, $FD
081B1 20 C3 04 FD 28 29 2A      	.db $20, $C3, $04, $FD, $28, $29, $2A
081B8 20 D9 04 34 35 36 FD      	.db $20, $D9, $04, $34, $35, $36, $FD
081BF 20 E3 03 2B 2C 2D         	.db $20, $E3, $03, $2B, $2C, $2D
081C5 20 FA 03 37 38 39         	.db $20, $FA, $03, $37, $38, $39
081CB 21 03 02 3A 3B            	.db $21, $03, $02, $3A, $3B
081D0 21 1B 02 40 41            	.db $21, $1B, $02, $40, $41
081D5 21 23 D0 3C               	.db $21, $23, $D0, $3C
081D9 21 3C D0 42               	.db $21, $3C, $D0, $42
081DD 22 02 02 3E 3F            	.db $22, $02, $02, $3E, $3F
081E2 22 1C 02 61 62            	.db $22, $1C, $02, $61, $62
081E7 22 22 02 43 44            	.db $22, $22, $02, $43, $44
081EC 22 3C 02 63 64            	.db $22, $3C, $02, $63, $64
081F1 22 43 01 45               	.db $22, $43, $01, $45
081F5 22 5C 01 65               	.db $22, $5C, $01, $65
081F9 22 C4 02 A6 A8            	.db $22, $C4, $02, $A6, $A8
081FE 22 E4 02 A7 A9            	.db $22, $E4, $02, $A7, $A9
08203 22 FA 04 80 82 88 8A      	.db $22, $FA, $04, $80, $82, $88, $8A
0820A 23 04 02 90 92            	.db $23, $04, $02, $90, $92
0820F 23 14 02 9E A0            	.db $23, $14, $02, $9E, $A0
08214 23 1A 04 81 83 89 8B      	.db $23, $1A, $04, $81, $83, $89, $8B
0821B 23 23 03 46 91 93         	.db $23, $23, $03, $46, $91, $93
08221 23 2A 02 A2 A4            	.db $23, $2A, $02, $A2, $A4
08226                           
08226 23 2E 10                  	.db $23, $2E, $10
08229 67 6C 6E 70 72 69 9F A1.. 	.db $67, $6C, $6E, $70, $72, $69, $9F, $A1, $75, $98, $9A, $FB, $84, $86, $8C, $8E
08239                           
08239 23 43 1B                  	.db $23, $43, $1B
0823C 47 94 96 74 74 74 74 A3.. 	.db $47, $94, $96, $74, $74, $74, $74, $A3, $A5, $74, $66, $68, $6D, $6F, $71, $73
0824C 6A 6B 74 74 99 9B 74 85.. 	.db $6A, $6B, $74, $74, $99, $9B, $74, $85, $87, $8D, $8F
08257                           
08257 23 64 05 95 97 FD AA AB   	.db $23, $64, $05, $95, $97, $FD, $AA, $AB
0825F 23 77 05 9C 9D AA AB AB   	.db $23, $77, $05, $9C, $9D, $AA, $AB, $AB
08267 23 89 02 AA AB            	.db $23, $89, $02, $AA, $AB
0826C 20 C9 0E 78 AC B0 B4 B7.. 	.db $20, $C9, $0E, $78, $AC, $B0, $B4, $B7, $BA, $FB, $BC, $BE, $C1, $C4, $C7, $CB, $7C
0827D                           
0827D 20 E8 10                  	.db $20, $E8, $10
08280 1C 79 AD B1 B5 B8 BB FB.. 	.db $1C, $79, $AD, $B1, $B5, $B8, $BB, $FB, $BD, $BF, $C2, $C5, $C8, $CC, $7D, $1E
08290                           
08290 21 08 10                  	.db $21, $08, $10
08293 1D 7A AE B2 B6 B9 FB FB.. 	.db $1D, $7A, $AE, $B2, $B6, $B9, $FB, $FB, $FB, $C0, $C3, $C6, $C9, $CD, $7E, $1F
082A3                           
082A3 21 29 03 7B AF B3         	.db $21, $29, $03, $7B, $AF, $B3
082A9 21 34 03 CA CE 7F         	.db $21, $34, $03, $CA, $CE, $7F
082AF 21 6A 0C 14 10 10 16 14.. 	.db $21, $6A, $0C, $14, $10, $10, $16, $14, $10, $10, $16, $14, $10, $10, $16
082BE 21 8A 0C 11 FC FC 12 11.. 	.db $21, $8A, $0C, $11, $FC, $FC, $12, $11, $FC, $FC, $12, $11, $FC, $FC, $12
082CD 21 AA 0C 11 FC FC 12 11.. 	.db $21, $AA, $0C, $11, $FC, $FC, $12, $11, $FC, $FC, $12, $11, $FC, $FC, $12
082DC 21 CA 0C 15 13 13 17 15.. 	.db $21, $CA, $0C, $15, $13, $13, $17, $15, $13, $13, $17, $15, $13, $13, $17
082EB 22 0D 02 18 1A            	.db $22, $0D, $02, $18, $1A
082F0 22 2D 02 19 1B            	.db $22, $2D, $02, $19, $1B
082F5 23 D2 04 80 A0 A0 20      	.db $23, $D2, $04, $80, $A0, $A0, $20
082FC 23 DA 04 88 AA AA 22      	.db $23, $DA, $04, $88, $AA, $AA, $22
08303 23 E4 01 0A               	.db $23, $E4, $01, $0A
08307 23 EA 05 A0 A0 A0 A0 20   	.db $23, $EA, $05, $A0, $A0, $A0, $A0, $20
0830F 00                        	.db $00
08310                           
08310                           
08310                           ;
08310                           ; Copies the Bonus Chance PPU data
08310                           ;
08310                           ; This copies in two $100 byte chunks, the second of which includes extra data
08310                           ; that is never used because of the terminating $00
08310                           ;
08310                           CopyBonusChanceLayoutToRAM:
08310 A0 00                     	LDY #$00
08312                           CopyBonusChanceLayoutToRAM_Loop1:
08312 B9 40 81                  	LDA BonusChanceLayout, Y ; Blindly copy $100 bytes from $8140 to $7400
08315 99 00 74                  	STA BonusChanceLayoutRAM, Y
08318 88                        	DEY
08319 D0 F7                     	BNE CopyBonusChanceLayoutToRAM_Loop1
0831B                           
0831B A0 00                     	LDY #$00
0831D                           CopyBonusChanceLayoutToRAM_Loop2:
0831D                           	; Blindly copy $100 more bytes from $8240 to $7500
0831D                           	; That range includes this code! clap. clap.
0831D B9 40 82                  	LDA BonusChanceLayout + $100, Y
08320 99 00 75                  	STA BonusChanceLayoutRAM2, Y
08323 88                        	DEY
08324 D0 F7                     	BNE CopyBonusChanceLayoutToRAM_Loop2
08326                           
08326 60                        	RTS
08327                           
08327                           ; =============== S U B R O U T I N E =======================================
08327                           
08327                           DrawTitleCardWorldImage:
08327 AD 35 06                  	LDA CurrentWorld
0832A C9 06                     	CMP #6
0832C F0 64                     	BEQ loc_BANKA_8392 ; Special case for World 7's title card
0832E                           
0832E A9 25                     	LDA #$25
08330 85 00                     	STA byte_RAM_0
08332 A9 C8                     	LDA #$C8
08334 85 01                     	STA byte_RAM_1
08336 A0 00                     	LDY #0
08338                           
08338                           loc_BANKA_8338:
08338 A2 0F                     	LDX #$F
0833A AD 02 20                  	LDA PPUSTATUS
0833D A5 00                     	LDA byte_RAM_0
0833F 8D 06 20                  	STA PPUADDR
08342                           
08342                           loc_BANKA_8342:
08342 A5 01                     	LDA byte_RAM_1
08344 8D 06 20                  	STA PPUADDR
08347                           
08347                           loc_BANKA_8347:
08347 B9 00 80                  	LDA World1thru6TitleCard, Y
0834A 8D 07 20                  	STA PPUDATA
0834D C8                        	INY
0834E CA                        	DEX
0834F 10 F6                     	BPL loc_BANKA_8347
08351                           
08351 C0 A0                     	CPY #$A0
08353 B0 0F                     	BCS loc_BANKA_8364
08355                           
08355 A5 01                     	LDA byte_RAM_1
08357 69 20                     	ADC #$20
08359 85 01                     	STA byte_RAM_1
0835B A5 00                     	LDA byte_RAM_0
0835D 69 00                     	ADC #0
0835F 85 00                     	STA byte_RAM_0
08361 4C 38 83                  	JMP loc_BANKA_8338
08364                           
08364                           ; ---------------------------------------------------------------------------
08364                           
08364                           loc_BANKA_8364:
08364 AD 35 06                  	LDA CurrentWorld
08367 C9 01                     	CMP #1
08369 F0 06                     	BEQ loc_BANKA_8371
0836B                           
0836B C9 05                     	CMP #5
0836D F0 02                     	BEQ loc_BANKA_8371
0836F                           
0836F D0 18                     	BNE loc_BANKA_8389
08371                           
08371                           loc_BANKA_8371:
08371 29 80                     	AND #$80
08373 D0 14                     	BNE loc_BANKA_8389
08375                           
08375 A9 26                     	LDA #$26
08377 85 00                     	STA byte_RAM_0
08379 A9 88                     	LDA #$88
0837B 85 01                     	STA byte_RAM_1
0837D AD 35 06                  	LDA CurrentWorld
08380 09 80                     	ORA #$80
08382 8D 35 06                  	STA CurrentWorld
08385 A0 80                     	LDY #$80
08387 D0 AF                     	BNE loc_BANKA_8338
08389                           
08389                           loc_BANKA_8389:
08389 AD 35 06                  	LDA CurrentWorld
0838C 29 0F                     	AND #$F
0838E 8D 35 06                  	STA CurrentWorld
08391 60                        	RTS
08392                           
08392                           ; ---------------------------------------------------------------------------
08392                           
08392                           loc_BANKA_8392:
08392 A9 25                     	LDA #$25
08394 85 00                     	STA byte_RAM_0
08396 A9 C8                     	LDA #$C8
08398 85 01                     	STA byte_RAM_1
0839A A0 00                     	LDY #0
0839C                           
0839C                           loc_BANKA_839C:
0839C A2 0F                     	LDX #$F
0839E AD 02 20                  	LDA PPUSTATUS
083A1 A5 00                     	LDA byte_RAM_0
083A3 8D 06 20                  	STA PPUADDR
083A6 A5 01                     	LDA byte_RAM_1
083A8 8D 06 20                  	STA PPUADDR
083AB                           
083AB                           loc_BANKA_83AB:
083AB B9 A0 80                  	LDA World7TitleCard, Y
083AE 8D 07 20                  	STA PPUDATA
083B1 C8                        	INY
083B2 CA                        	DEX
083B3 10 F6                     	BPL loc_BANKA_83AB
083B5                           
083B5 C0 A0                     	CPY #$A0
083B7 B0 0F                     	BCS locret_BANKA_83C8
083B9                           
083B9 A5 01                     	LDA byte_RAM_1
083BB 69 20                     	ADC #$20
083BD 85 01                     	STA byte_RAM_1
083BF A5 00                     	LDA byte_RAM_0
083C1 69 00                     	ADC #0
083C3 85 00                     	STA byte_RAM_0
083C5 4C 9C 83                  	JMP loc_BANKA_839C
083C8                           
083C8                           ; ---------------------------------------------------------------------------
083C8                           
083C8                           locret_BANKA_83C8:
083C8 60                        	RTS
083C9                           
083C9                           ; End of function DrawTitleCardWorldImage
083C9                           
083C9                           StatOffsets:
083C9 00                        	.db (MarioStats - CharacterStats)
083CA 45                        	.db (PrincessStats - CharacterStats)
083CB 17                        	.db (ToadStats - CharacterStats)
083CC 2E                        	.db (LuigiStats - CharacterStats)
083CD                           
083CD                           CharacterStats:
083CD                           MarioStats:
083CD 00                        	.db $00 ; Pick-up Speed, frame 1/6 - pulling
083CE 04                        	.db $04 ; Pick-up Speed, frame 2/6 - pulling
083CF 02                        	.db $02 ; Pick-up Speed, frame 3/6 - ducking
083D0 01                        	.db $01 ; Pick-up Speed, frame 4/6 - ducking
083D1 04                        	.db $04 ; Pick-up Speed, frame 5/6 - ducking
083D2 07                        	.db $07 ; Pick-up Speed, frame 6/6 - ducking
083D3 B0                        	.db $B0 ; Jump Speed, still - no object
083D4 B0                        	.db $B0 ; Jump Speed, still - with object
083D5 98                        	.db $98 ; Jump Speed, charged - no object
083D6 98                        	.db $98 ; Jump Speed, charged - with object
083D7 A6                        	.db $A6 ; Jump Speed, running - no object
083D8 AA                        	.db $AA ; Jump Speed, running - with object
083D9 E0                        	.db $E0 ; Jump Speed - in quicksand
083DA 00                        	.db $00 ; Floating Time
083DB 07                        	.db $07 ; Gravity without Jump button pressed
083DC 04                        	.db $04 ; Gravity with Jump button pressed
083DD 08                        	.db $08 ; Gravity in quicksand
083DE 18                        	.db $18 ; Running Speed, right - no object
083DF 18                        	.db $18 ; Running Speed, right - with object
083E0 04                        	.db $04 ; Running Speed, right - in quicksand
083E1 E8                        	.db $E8 ; Running Speed, left - no object
083E2 E8                        	.db $E8 ; Running Speed, left - with object
083E3 FC                        	.db $FC ; Running Speed, left - in quicksand
083E4                           
083E4                           ToadStats:
083E4 00                        	.db $00 ; Pick-up Speed, frame 1/6 - pulling
083E5 01                        	.db $01 ; Pick-up Speed, frame 2/6 - pulling
083E6 01                        	.db $01 ; Pick-up Speed, frame 3/6 - ducking
083E7 01                        	.db $01 ; Pick-up Speed, frame 4/6 - ducking
083E8 01                        	.db $01 ; Pick-up Speed, frame 5/6 - ducking
083E9 02                        	.db $02 ; Pick-up Speed, frame 6/6 - ducking
083EA B2                        	.db $B2 ; Jump Speed, still - no object
083EB B2                        	.db $B2 ; Jump Speed, still - with object
083EC 98                        	.db $98 ; Jump Speed, charged - no object
083ED 98                        	.db $98 ; Jump Speed, charged - with object
083EE AD                        	.db $AD ; Jump Speed, running - no object
083EF AD                        	.db $AD ; Jump Speed, running - with object
083F0 E0                        	.db $E0 ; Jump Speed - in quicksand
083F1 00                        	.db $00 ; Floating Time
083F2 07                        	.db $07 ; Gravity without Jump button pressed
083F3 04                        	.db $04 ; Gravity with Jump button pressed
083F4 08                        	.db $08 ; Gravity in quicksand
083F5 18                        	.db $18 ; Running Speed, right - no object
083F6 1D                        	.db $1D ; Running Speed, right - with object
083F7 04                        	.db $04 ; Running Speed, right - in quicksand
083F8 E8                        	.db $E8 ; Running Speed, left - no object
083F9 E3                        	.db $E3 ; Running Speed, left - with object
083FA FC                        	.db $FC ; Running Speed, left - in quicksand
083FB                           
083FB                           LuigiStats:
083FB 00                        	.db $00 ; Pick-up Speed, frame 1/6 - pulling
083FC 04                        	.db $04 ; Pick-up Speed, frame 2/6 - pulling
083FD 02                        	.db $02 ; Pick-up Speed, frame 3/6 - ducking
083FE 01                        	.db $01 ; Pick-up Speed, frame 4/6 - ducking
083FF 04                        	.db $04 ; Pick-up Speed, frame 5/6 - ducking
08400 07                        	.db $07 ; Pick-up Speed, frame 6/6 - ducking
08401 D6                        	.db $D6 ; Jump Speed, still - no object
08402 D6                        	.db $D6 ; Jump Speed, still - with object
08403 C9                        	.db $C9 ; Jump Speed, charged - no object
08404 C9                        	.db $C9 ; Jump Speed, charged - with object
08405 D0                        	.db $D0 ; Jump Speed, running - no object
08406 D4                        	.db $D4 ; Jump Speed, running - with object
08407 E0                        	.db $E0 ; Jump Speed - in quicksand
08408 00                        	.db $00 ; Floating Time
08409 02                        	.db $02 ; Gravity without Jump button pressed
0840A 01                        	.db $01 ; Gravity with Jump button pressed
0840B 08                        	.db $08 ; Gravity in quicksand
0840C 18                        	.db $18 ; Running Speed, right - no object
0840D 16                        	.db $16 ; Running Speed, right - with object
0840E 04                        	.db $04 ; Running Speed, right - in quicksand
0840F E8                        	.db $E8 ; Running Speed, left - no object
08410 EA                        	.db $EA ; Running Speed, left - with object
08411 FC                        	.db $FC ; Running Speed, left - in quicksand
08412                           
08412                           PrincessStats:
08412 00                        	.db $00 ; Pick-up Speed, frame 1/6 - pulling
08413 06                        	.db $06 ; Pick-up Speed, frame 2/6 - pulling
08414 04                        	.db $04 ; Pick-up Speed, frame 3/6 - ducking
08415 02                        	.db $02 ; Pick-up Speed, frame 4/6 - ducking
08416 06                        	.db $06 ; Pick-up Speed, frame 5/6 - ducking
08417 0C                        	.db $0C ; Pick-up Speed, frame 6/6 - ducking
08418 B3                        	.db $B3 ; Jump Speed, still - no object
08419 B3                        	.db $B3 ; Jump Speed, still - with object
0841A 98                        	.db $98 ; Jump Speed, charged - no object
0841B 98                        	.db $98 ; Jump Speed, charged - with object
0841C AC                        	.db $AC ; Jump Speed, running - no object
0841D B3                        	.db $B3 ; Jump Speed, running - with object
0841E E0                        	.db $E0 ; Jump Speed - in quicksand
0841F 3C                        	.db $3C ; Floating Time
08420 07                        	.db $07 ; Gravity without Jump button pressed
08421 04                        	.db $04 ; Gravity with Jump button pressed
08422 08                        	.db $08 ; Gravity in quicksand
08423 18                        	.db $18 ; Running Speed, right - no object
08424 15                        	.db $15 ; Running Speed, right - with object
08425 04                        	.db $04 ; Running Speed, right - in quicksand
08426 E8                        	.db $E8 ; Running Speed, left - no object
08427 EB                        	.db $EB ; Running Speed, left - with object
08428 FC                        	.db $FC ; Running Speed, left - in quicksand
08429                           
08429                           CharacterPalette:
08429                           MarioPalette:
08429 0F 01 16 27               	.db $0F,$01,$16,$27
0842D                           PrincessPalette:
0842D 0F 06 25 36               	.db $0F,$06,$25,$36
08431                           ToadPalette:
08431 0F 01 30 27               	.db $0F,$01,$30,$27
08435                           LuigiPalette:
08435 0F 01 2A 36               	.db $0F,$01,$2A,$36
08439                           IFDEF PLAYER_STUFF
08439                           FirePalette:
08439 0F 02 16 27               	.db $0F,$02,$16,$27
0843D                           IcePalette:
0843D 0F 02 30 27               	.db $0F,$02,$30,$27
08441                           ENDIF
08441                           
08441                           MysteryData14439:
08441 DF                        	.db $DF
08442 EF                        	.db $EF
08443 F7                        	.db $F7
08444 FB                        	.db $FB
08445 00                        	.db $00
08446 FF                        	.db $FF
08447 FF                        	.db $FF
08448 FF                        	.db $FF
08449 AF                        	.db $AF
0844A D7                        	.db $D7
0844B EB                        	.db $EB
0844C F5                        	.db $F5
0844D FB                        	.db $FB
0844E F7                        	.db $F7
0844F EF                        	.db $EF
08450 DF                        	.db $DF
08451 00                        	.db $00
08452 FF                        	.db $FF
08453 FF                        	.db $FF
08454 FF                        	.db $FF
08455 F5                        	.db $F5
08456 EB                        	.db $EB
08457 D7                        	.db $D7
08458 AF                        	.db $AF
08459                           
08459                           IFDEF PLAYER_STUFF
08459                           PlayerSelectMarioSprites1:
08459 8F 00 00 48               	.db $8F, $00, $00, $48
0845D 8F 02 00 50               	.db $8F, $02, $00, $50
08461 9F 04 00 48               	.db $9F, $04, $00, $48
08465 9F 06 00 50               	.db $9F, $06, $00, $50
08469                           
08469                           PlayerSelectLuigiSprites1:
08469 8F 08 01 68               	.db $8F, $08, $01, $68
0846D 8F 0A 01 70               	.db $8F, $0a, $01, $70
08471 9F 0C 01 68               	.db $9F, $0c, $01, $68
08475 9F 0E 01 70               	.db $9F, $0e, $01, $70
08479                           
08479                           PlayerSelectToadSprites1:
08479 8F 10 02 88               	.db $8F, $10, $02, $88
0847D 8F 12 02 90               	.db $8F, $12, $02, $90
08481 9F 14 02 88               	.db $9F, $14, $02, $88
08485 9F 16 02 90               	.db $9F, $16, $02, $90
08489                           
08489                           PlayerSelectPrincessSprites1:
08489 8F 18 03 A8               	.db $8F, $18, $03, $A8
0848D 8F 1A 03 B0               	.db $8F, $1a, $03, $B0
08491 9F 1C 03 A8               	.db $9F, $1c, $03, $A8
08495 9F 1E 03 B0               	.db $9F, $1e, $03, $B0
08499                           
08499                           PlayerSelectMarioSprites2:
08499 8F 20 00 48               	.db $8F, $20, $00, $48
0849D 8F 22 00 50               	.db $8F, $22, $00, $50
084A1 9F 24 00 48               	.db $9F, $24, $00, $48
084A5 9F 26 00 50               	.db $9F, $26, $00, $50
084A9                           
084A9                           PlayerSelectLuigiSprites2:
084A9 8F 28 01 68               	.db $8F, $28, $01, $68
084AD 8F 2A 01 70               	.db $8F, $2A, $01, $70
084B1 9F 2C 01 68               	.db $9F, $2C, $01, $68
084B5 9F 2E 01 70               	.db $9F, $2E, $01, $70
084B9                           
084B9                           PlayerSelectToadSprites2:
084B9 8F 30 02 88               	.db $8F, $30, $02, $88
084BD 8F 32 02 90               	.db $8F, $32, $02, $90
084C1 9F 34 02 88               	.db $9F, $34, $02, $88
084C5 9F 36 02 90               	.db $9F, $36, $02, $90
084C9                           
084C9                           PlayerSelectPrincessSprites2:
084C9 8F 38 03 A8               	.db $8F, $38, $03, $A8
084CD 8F 3A 03 B0               	.db $8F, $3A, $03, $B0
084D1 9F 3C 03 A8               	.db $9F, $3C, $03, $A8
084D5 9F 3E 03 B0               	.db $9F, $3E, $03, $B0
084D9                           ENDIF
084D9                           
084D9                           
084D9                           ;
084D9                           ; This copies the selected character's stats
084D9                           ; into memory for use later, but also a bunch
084D9                           ; of other unrelated crap like the
084D9                           ; Bonus Chance slot reels (???) and
084D9                           ; god knows what else.
084D9                           ;
084D9                           CopyCharacterStatsAndStuff:
084D9                           IFDEF CONTROLLER_2_DEBUG
084D9                           	JSR CopyCharacterStats
084D9                           ENDIF
084D9                           
084D9 A6 8F                     	LDX CurrentCharacter
084DB BC C9 83                  	LDY StatOffsets, X
084DE A2 00                     	LDX #$00
084E0                           loc_BANKA_8458:
084E0 B9 CD 83                  	LDA CharacterStats, Y
084E3 9D 46 05                  	STA CharacterStatsRAM, X
084E6                           IFDEF PLAYER_STUFF_unused
084E6                               LDA PlayerModStats, Y
084E6                               BEQ +
084E6                               STA CharacterStatsRAM, X
084E6                           +
084E6                           ENDIF
084E6 C8                        	INY
084E7 E8                        	INX
084E8 E0 17                     	CPX #$17
084EA 90 F4                     	BCC loc_BANKA_8458
084EC                           
084EC A5 8F                     	LDA CurrentCharacter
084EE 0A                        	ASL A
084EF 0A                        	ASL A
084F0 A8                        	TAY
084F1 A2 00                     	LDX #$00
084F3                           loc_BANKA_846B:
084F3 B9 29 84                  	LDA CharacterPalette, Y
084F6 9D 37 06                  	STA RestorePlayerPalette0, X
084F9 C8                        	INY
084FA E8                        	INX
084FB E0 04                     	CPX #$04
084FD 90 F4                     	BCC loc_BANKA_846B
084FF                           
084FF A0 4C                     	LDY #$4C
08501                           loc_BANKA_8479:
08501 B9 74 85                  	LDA PlayerSelectPalettes, Y
08504 99 5F 05                  	STA PPUBuffer_55F, Y
08507 88                        	DEY
08508 C0 FF                     	CPY #$FF
0850A D0 F5                     	BNE loc_BANKA_8479
0850C                           
0850C A0 B6                     	LDY #$B6
0850E                           loc_BANKA_8486:
0850E B9 C1 85                  	LDA BonusChanceReel1Order, Y
08511 99 3B 06                  	STA SlotMachineReelOrder1RAM, Y
08514 88                        	DEY
08515 C0 FF                     	CPY #$FF
08517 D0 F5                     	BNE loc_BANKA_8486
08519                           
08519 A0 63                     	LDY #$63
0851B                           loc_BANKA_8493:
0851B B9 78 86                  	LDA Text_Unknown5, Y
0851E 99 68 71                  	STA PPUBuffer_7168, Y
08521 88                        	DEY
08522 C0 FF                     	CPY #$FF
08524 D0 F5                     	BNE loc_BANKA_8493
08526                           
08526 A0 17                     	LDY #$17
08528                           loc_BANKA_84A0:
08528 B9 41 84                  	LDA MysteryData14439, Y
0852B 99 50 71                  	STA unk_RAM_7150, Y
0852E 88                        	DEY
0852F 10 F7                     	BPL loc_BANKA_84A0
08531                           
08531 A0 4F                     	LDY #$4F
08533                           loc_BANKA_84AB:
08533 B9 EC F2                  	LDA byte_BANKF_F099, Y
08536 99 00 71                  	STA unk_RAM_7100, Y
08539 88                        	DEY
0853A 10 F7                     	BPL loc_BANKA_84AB
0853C                           
0853C A0 03                     	LDY #$03
0853E                           loc_BANKA_84B6:
0853E B9 69 85                  	LDA byte_BANKA_84E1, Y
08541 99 CC 71                  	STA byte_RAM_71CC, Y
08544 88                        	DEY
08545 10 F7                     	BPL loc_BANKA_84B6
08547                           
08547                           	; Collision data
08547 A0 49                     	LDY #$49
08549                           loc_BANKA_84C1:
08549 B9 35 F9                  	LDA byte_BANKF_F607, Y
0854C 99 D1 71                  	STA unk_RAM_71D1, Y
0854F 88                        	DEY
08550 10 F7                     	BPL loc_BANKA_84C1
08552                           
08552 A0 20                     	LDY #$20
08554                           loc_BANKA_84CC:
08554 B9 AE FB                  	LDA EndOfLevelDoor, Y
08557 99 1B 72                  	STA PPUBuffer_721B, Y
0855A 88                        	DEY
0855B 10 F7                     	BPL loc_BANKA_84CC
0855D                           
0855D A0 06                     	LDY #$06
0855F                           loc_BANKA_84D7:
0855F B9 6D 85                  	LDA byte_BANKA_84E5, Y
08562 99 65 72                  	STA unk_RAM_7265, Y
08565 88                        	DEY
08566 10 F7                     	BPL loc_BANKA_84D7
08568                           
08568 60                        	RTS
08569                           
08569                           ; End of function CopyCharacterStatsAndStuff
08569                           
08569                           ; ---------------------------------------------------------------------------
08569                           byte_BANKA_84E1:
08569 00                        	.db $00
0856A 01                        	.db $01
0856B FF                        	.db $FF
0856C 00                        	.db $00
0856D                           
0856D                           byte_BANKA_84E5:
0856D 00                        	.db $00
0856E E0                        	.db $E0
0856F FF                        	.db $FF
08570 D0                        	.db $D0
08571 00                        	.db $00
08572 E0                        	.db $E0
08573 FF                        	.db $FF
08574                           
08574                           PlayerSelectPalettes:
08574 3F 00 20                  	.db $3F, $00, $20
08577 0F 28 16 06               	.db $0F, $28, $16, $06
0857B 0F 30 12 16               	.db $0F, $30, $12, $16
0857F 0F 30 16 12               	.db $0F, $30, $16, $12
08583 0F 30 12 16               	.db $0F, $30, $12, $16
08587 0F 22 12 01               	.db $0F, $22, $12, $01
0858B 0F 22 12 01               	.db $0F, $22, $12, $01
0858F 0F 22 12 01               	.db $0F, $22, $12, $01
08593 0F 22 12 01               	.db $0F, $22, $12, $01
08597 00                        	.db $00
08598                           BonusChanceText_X_1:
08598 22 30 03 EA FB D1         	.db $22,$30,$03,$EA,$FB,$D1
0859E                           BonusChanceText_EXTRA_LIFE_1:
0859E 22 C9 0F DE F1 ED EB DA.. 	.db $22,$C9,$0F,$DE,$F1,$ED,$EB,$DA,$FB,$E5,$E2,$DF,$DE,$F9,$F9
085AD F9 FB D1 00               	.db $F9,$FB,$D1,$00 ; $0F
085B1                           BonusChanceBackgroundPalettes:
085B1 0F 27 17 07               	.db $0F,$27,$17,$07 ; $00
085B5 0F 37 16 12               	.db $0F,$37,$16,$12 ; $04
085B9 0F 30 10 00               	.db $0F,$30,$10,$00 ; $08
085BD 0F 21 12 01               	.db $0F,$21,$12,$01 ; $0C
085C1                           BonusChanceReel1Order:
085C1 18                        	.db Slot_Snifit ; $00
085C2 10                        	.db Slot_Turnip ; $01 ; Graphics exist for a mushroom (not used)
085C3 08                        	.db Slot_Star   ; $02
085C4 10                        	.db Slot_Turnip ; $03
085C5 18                        	.db Slot_Snifit ; $04
085C6 08                        	.db Slot_Star   ; $05
085C7 00                        	.db Slot_Cherry ; $06
085C8 10                        	.db Slot_Turnip ; $07
085C9                           BonusChanceReel2Order:
085C9 08                        	.db Slot_Star   ; $00
085CA 18                        	.db Slot_Snifit ; $01
085CB 00                        	.db Slot_Cherry ; $02
085CC 18                        	.db Slot_Snifit ; $03
085CD 10                        	.db Slot_Turnip ; $04
085CE 08                        	.db Slot_Star   ; $05
085CF 18                        	.db Slot_Snifit ; $06
085D0 10                        	.db Slot_Turnip ; $07
085D1                           BonusChanceReel3Order:
085D1 08                        	.db Slot_Star   ; $00
085D2 18                        	.db Slot_Snifit ; $01
085D3 08                        	.db Slot_Star   ; $02
085D4 10                        	.db Slot_Turnip ; $03
085D5 08                        	.db Slot_Star   ; $04
085D6 00                        	.db Slot_Cherry ; $05
085D7 10                        	.db Slot_Turnip ; $06
085D8 18                        	.db Slot_Snifit ; $07
085D9                           BonusChanceUnusedCoinSprite:
085D9 F8 19 01 60 F8 1B 01 68   	.db $F8,$19,$01,$60,$F8,$1B,$01,$68
085E1                           BonusChanceUnusedImajinHead:
085E1 CB B0 00 A0 CB B0 40 A8   	.db $CB,$B0,$00,$A0,$CB,$B0,$40,$A8
085E9                           BonusChanceUnusedLinaHead:
085E9 CB B2 00 A0 CB B2 40 A8   	.db $CB,$B2,$00,$A0,$CB,$B2,$40,$A8
085F1                           BonusChanceUnusedMamaHead:
085F1 CB B6 00 A0 CB B6 40 A8   	.db $CB,$B6,$00,$A0,$CB,$B6,$40,$A8
085F9                           BonusChanceUnusedPapaHead:
085F9 CB B4 00 A0 CB B4 40 A8   	.db $CB,$B4,$00,$A0,$CB,$B4,$40,$A8
08601                           BonusChanceUnused_Blank20C6:
08601 20 C6 14 FB FB FB FB FB.. 	.db $20,$C6,$14,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FB
08610 FB FB FB FB FB FB FB FB.. 	.db $FB,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$00 ; $0F
08619                           BonusChanceText_NO_BONUS:
08619 22 86 14 FB FB FB FB FB.. 	.db $22,$86,$14,$FB,$FB,$FB,$FB,$FB,$FB,$E7,$E8,$FB,$DB,$E8,$E7
08628 EE EC FB FB FB FB FB FB.. 	.db $EE,$EC,$FB,$FB,$FB,$FB,$FB,$FB,$00 ; $0F
08631                           IFNDEF PLAYER_STUFF
08631                           BonusChanceText_PUSH_A_BUTTON:
08631                           	.db $22,$89,$0E,$E9,$EE,$EC,$E1,$FB,$0E,$F,$FB,$DB,$EE,$ED,$ED,$E8
08631                           	.db $E7,$00 ; $10
08631                           ENDIF
08631                           IFDEF PLAYER_STUFF
08631                           BonusChanceText_PUSH_A_BUTTON:
08631 22 69 0E E9 EE EC E1 FB.. 	.db $22,$69,$0E,$E9,$EE,$EC,$E1,$FB,$0E,$F,$FB,$DB,$EE,$ED,$ED,$E8
08641 E7 00                     	.db $E7,$00 ; $10
08643                           ENDIF
08643                           BonusChanceText_PLAYER_1UP:
08643 22 8B 0B E9 E5 DA F2 DE.. 	.db $22,$8B,$0B,$E9,$E5,$DA,$F2,$DE,$EB,$FB,$FB,$D1,$EE,$E9,$00
08652                           Text_PAUSE:
08652 25 ED 05 E9 DA EE EC DE   	.db $25,$ED,$05,$E9,$DA,$EE,$EC,$DE
0865A                           Text_Unknown:
0865A 27 DB 02 AA AA 00         	.db $27,$DB,$02,$AA,$AA,$00
08660                           Text_Unknown2:
08660 22 86 54 FB 00            	.db $22,$86,$54,$FB,$00
08665                           Text_Unknown3:
08665 22 AA 4D FB 00            	.db $22,$AA,$4D,$FB,$00
0866A                           Text_Unknown4:
0866A 22 EB 4B FB 00            	.db $22,$EB,$4B,$FB,$00
0866F                           Text_PAUSE_Erase:
0866F 25 ED 05 FB FB FB FB FB.. 	.db $25,$ED,$05,$FB,$FB,$FB,$FB,$FB,$00
08678                           Text_Unknown5:
08678 25 0E 07 FB FB FB FB FB.. 	.db $25,$0E,$07,$FB,$FB,$FB,$FB,$FB,$FB,$FB ; This one is actually used, just not sure what for
08682                           Text_WORLD_1_1:
08682 24 CA 0B FB F0 E8 EB E5.. 	.db $24,$CA,$0B,$FB,$F0,$E8,$EB,$E5,$DD,$FB,$FB,$D1,$F3,$D1
08690                           Text_EXTRA_LIFE_0:
08690 23 48 10 DE F1 ED EB DA.. 	.db $23,$48,$10,$DE,$F1,$ED,$EB,$DA,$FB,$E5,$E2,$DF,$DE,$F9,$F9
0869F F9 FB FB D0 00            	.db $F9,$FB,$FB,$D0,$00 ; $0F
086A4                           Text_WARP:
086A4 21 8E 04 F0 DA EB E9      	.db $21,$8E,$04,$F0,$DA,$EB,$E9
086AB                           
086AB                           ; Doki Doki Panic pseudo-leftover
086AB                           ; This actually has extra spaces on either end:
086AB                           ; "-WORLD-" ... It originally said "CHAPTER"
086AB                           Text_WORLD_1:
086AB 22 0C 09 FB F0 E8 EB E5.. 	.db $22,$0C,$09,$FB,$F0,$E8,$EB,$E5,$DD,$FB,$FB,$D1,$00
086B8                           Text_Unknown6:
086B8 21 6A 01 FB               	.db $21,$6A,$01,$FB
086BC                           Text_Unknown7:
086BC 21 AA 01 FB 00            	.db $21,$AA,$01,$FB,$00
086C1                           Text_Unknown8:
086C1 21 97 C6 FB 00            	.db $21,$97,$C6,$FB,$00
086C6                           UnusedText_THANK_YOU:
086C6 21 0C 09 ED E1 3A E7 E4.. 	.db $21,$0C,$09,$ED,$E1,$3A,$E7,$E4,$FB,$F2,$E8,$EE
086D2                           UnusedText_Blank214D:
086D2 21 4D 06 FB FB FB FB FB.. 	.db $21,$4D,$06,$FB,$FB,$FB,$FB,$FB,$FB,$00
086DC                           
086DC                           IFDEF CONTROLLER_2_DEBUG
086DC                           ;
086DC                           ; Copies all character stats to RAM for hot-swapping the current character
086DC                           ;
086DC                           CopyCharacterStats:
086DC                           	LDX #(MysteryData14439 - StatOffsets - 1)
086DC                           CopyCharacterStats_Loop:
086DC                           	LDA StatOffsets, X
086DC                           	STA StatOffsetsRAM, X
086DC                           	DEX
086DC                           	BPL CopyCharacterStats_Loop
086DC                           
086DC                           	RTS
086DC                           ENDIF
086DC                           
086DC                           IFDEF PLAYER_STUFF_MOVE_CS
086DC                           loc_BANKF_E2E8:
086DC A5 F5                     	LDA Player1JoypadPress
086DE 29 03                     	AND #ControllerInput_Right | ControllerInput_Left
086E0 D0 03                     	BNE CharacterSelect_ChangeCharacter
086E2                           
086E2 4C C6 87                  	JMP CharacterSelectMenuLoop
086E5                           
086E5                           ; ---------------------------------------------------------------------------
086E5                           
086E5                           CharacterSelect_ChangeCharacter:
086E5 A5 F5                     	LDA Player1JoypadPress
086E7 29 01                     	AND #ControllerInput_Right
086E9 F0 07                     	BEQ loc_BANKF_E2FE
086EB                           
086EB C6 8F                     	DEC CurrentCharacter
086ED A9 04                     	LDA #SoundEffect1_CherryGet
086EF 8D 02 06                  	STA SoundEffectQueue1
086F2                           
086F2                           loc_BANKF_E2FE:
086F2 A5 F5                     	LDA Player1JoypadPress
086F4 29 02                     	AND #ControllerInput_Left
086F6 F0 07                     	BEQ loc_BANKF_E30B
086F8                           
086F8 E6 8F                     	INC CurrentCharacter
086FA A9 04                     	LDA #SoundEffect1_CherryGet
086FC 8D 02 06                  	STA SoundEffectQueue1
086FF                           
086FF                           loc_BANKF_E30B:
086FF A5 8F                     	LDA CurrentCharacter
08701 29 03                     	AND #$03
08703 85 8F                     	STA CurrentCharacter
08705                           IFDEF PLAYER_STUFF
08705 20 D8 8A                      JSR CharSelectInitialize
08708 20 32 E7                      JSR ChkToNextValidCharacter
0870B D0 D8                         BNE CharacterSelect_ChangeCharacter
0870D AD EE EE                      LDA IndependentLives
08710 F0 0E                         BEQ +
08712 A6 8F                         LDX CurrentCharacter
08714 BD F8 73                      LDA PlayerIndependentLives, X
08717 8D ED 04                      STA ExtraLives
0871A 20 19 DA                  	JSR DisplayLevelTitleCardText
0871D 20 76 E4                      JSR WaitForNMI
08720                           +
08720 A5 8F                         LDA CurrentCharacter 
08722 18                            CLC
08723 69 03                         ADC #$3
08725 20 14 E9                      JSR Custom_BufferText
08728 A9 00                     	LDA #ScreenUpdateBuffer_RAM_301
0872A 85 11                     	STA ScreenUpdateIndex
0872C 20 76 E4                      JSR WaitForNMI
0872F 4C 32 87                      JMP loc_BANKF_E311
08732                           ENDIF
08732                           
08732                           loc_BANKF_E311:
08732 A0 00                     	LDY #$00
08734 A9 21                     	LDA #$21
08736 8D 01 03                  	STA PPUBuffer_301
08739 A9 C9                     	LDA #$C9
0873B 8D 02 03                  	STA PPUBuffer_301 + 1
0873E A9 4F                     	LDA #$4F
08740 8D 03 03                  	STA PPUBuffer_301 + 2
08743 A9 FB                     	LDA #$FB
08745 8D 04 03                  	STA PPUBuffer_301 + 3
08748 A9 21                     	LDA #$21
0874A 8D 05 03                  	STA PPUBuffer_301 + 4
0874D A9 E9                     	LDA #$E9
0874F 8D 06 03                  	STA PPUBuffer_301 + 5
08752 A9 4F                     	LDA #$4F
08754 8D 07 03                  	STA PPUBuffer_301 + 6
08757 A9 FB                     	LDA #$FB
08759 8D 08 03                  	STA PPUBuffer_301 + 7
0875C A4 8F                     	LDY CurrentCharacter
0875E A9 21                     	LDA #$21
08760 8D 09 03                  	STA PPUBuffer_301 + 8
08763 B9 A1 DA                  	LDA PlayerSelectArrowTop, Y
08766 8D 0A 03                  	STA PPUBuffer_301 + 9
08769 A9 02                     	LDA #$02
0876B 8D 0B 03                  	STA PPUBuffer_301 + 10
0876E A9 BE                     	LDA #$BE
08770 8D 0C 03                  	STA PPUBuffer_301 + 11
08773 A9 C0                     	LDA #$C0
08775 8D 0D 03                  	STA PPUBuffer_301 + 12
08778 A9 21                     	LDA #$21
0877A 8D 0E 03                  	STA PPUBuffer_301 + 13
0877D B9 A5 DA                  	LDA PlayerSelectArrowBottom, Y
08780 8D 0F 03                  	STA PPUBuffer_301 + 14
08783 A9 02                     	LDA #$02
08785 8D 10 03                  	STA PPUBuffer_301 + 15
08788 A9 BF                     	LDA #$BF
0878A 8D 11 03                  	STA PPUBuffer_301 + 16
0878D A9 C1                     	LDA #$C1
0878F 8D 12 03                  	STA PPUBuffer_301 + 17
08792 A9 00                     	LDA #$00
08794 8D 13 03                  	STA PPUBuffer_301 + 18
08797 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
0879A                           
0879A A2 12                     	LDX #$12
0879C A0 00                     	LDY #$00
0879E                           
0879E                           loc_BANKF_E37D:
0879E B9 3F D9                  	LDA PlayerSelectSpritePalettesDark, Y
087A1 99 01 03                  	STA PPUBuffer_301, Y
087A4 C8                        	INY
087A5 CA                        	DEX
087A6 10 F6                     	BPL loc_BANKF_E37D
087A8                           
087A8                           IFDEF PLAYER_STUFF
087A8 20 E6 8A                      JSR LockCharacterSelectColor
087AB                           ENDIF
087AB                           
087AB A9 06                     	LDA #$06
087AD 85 0A                     	STA byte_RAM_A
087AF A6 8F                     	LDX CurrentCharacter
087B1 BD 52 D9                  	LDA PlayerSelectPaletteOffsets, X
087B4 AA                        	TAX
087B5                           
087B5                           loc_BANKF_E391:
087B5 BD 56 D9                  	LDA PlayerSelectSpritePalettes, X
087B8 99 01 03                  	STA PPUBuffer_301, Y
087BB C8                        	INY
087BC E8                        	INX
087BD C6 0A                     	DEC byte_RAM_A
087BF 10 F4                     	BPL loc_BANKF_E391
087C1                           
087C1 A9 00                     	LDA #$00
087C3 99 01 03                  	STA PPUBuffer_301, Y
087C6                           
087C6                           CharacterSelectMenuLoop:
087C6 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
087C9                           
087C9 A5 F5                     	LDA Player1JoypadPress
087CB 29 80                     	AND #ControllerInput_A
087CD F0 03                     	BEQ + 
087CF 4C 8A DB                      JMP loc_BANKF_E3AE
087D2                           +
087D2 4C DC 86                  	JMP loc_BANKF_E2E8
087D5                           ENDIF
087D5                           
087D5                           
087D5                           IFDEF DEBUG
087D5                           	.include "src/extras/debug-a.asm"
087D5                           
087D5                           ; Custom debug menu for SMB2, probably to help with speedrunners
087D5                           ; or just testing this disassembly.
087D5                           ; @TODO Should probably save a handful of important memory values,
087D5                           ; like the nametable scroll position, maybe some other stuff like
087D5                           ; the contents of $00 and $01 since we clobber those.
087D5                           ; The ability to "abort" is a huuuuge gamble since the game will
087D5                           ; most likely take it *extremely* poorly.
087D5                           
087D5                           Debug_CurrentMenuOption = $7FE0
087D5                           Debug_InMenu = $7FEF
087D5                           Debug_MenuOptionCount = #$4
087D5                           
087D5                           Debug_InitMenu:
087D5 A9 00                     	LDA #0
087D7 8D E0 7F                  	STA Debug_CurrentMenuOption
087DA                           
087DA 20 F6 E3                  	JSR EnableNMI
087DD 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
087E0 20 66 E3                  	JSR DisableNMI
087E3 20 DC D9                  	JSR SetScrollXYTo0
087E6 20 BF D9                  	JSR SetBlackAndWhitePalette
087E9 20 6F E6                  	JSR ClearNametablesAndSprites
087EC 20 66 E3                  	JSR DisableNMI
087EF                           
087EF A9 28                     	LDA #CHRBank_TitleScreenBG1
087F1 8D F7 06                  	STA BackgroundCHR1
087F4 A9 2A                     	LDA #CHRBank_TitleScreenBG2
087F6 8D F8 06                  	STA BackgroundCHR2
087F9 A9 0D                     	LDA #CHRBank_EnemiesDesert
087FB 8D F9 06                  	STA SpriteCHR1
087FE                           
087FE 20 F6 E3                  	JSR EnableNMI
08801 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
08804                           
08804                           	; Draw debug menu text
08804 A9 00                     	LDA #$00 ; DEBUG MENU
08806 20 F3 89                  	JSR Debug_BufferText
08809 20 76 E4                  	JSR WaitForNMI
0880C A9 01                     	LDA #$01 ; WORLD ?
0880E 20 F3 89                  	JSR Debug_BufferText
08811 20 76 E4                  	JSR WaitForNMI
08814 A9 02                     	LDA #$02 ; LEVEL ?
08816 20 F3 89                  	JSR Debug_BufferText
08819 20 76 E4                  	JSR WaitForNMI
0881C A9 03                     	LDA #$03 ; AREA ?
0881E 20 F3 89                  	JSR Debug_BufferText
08821 20 76 E4                  	JSR WaitForNMI
08824 A9 04                     	LDA #$04 ; CHARACTER ?
08826 20 F3 89                  	JSR Debug_BufferText
08829 20 76 E4                  	JSR WaitForNMI
0882C A9 05                     	LDA #$05 ; B BUTTON ... ABORT
0882E 20 F3 89                  	JSR Debug_BufferText
08831 20 76 E4                  	JSR WaitForNMI
08834                           
08834 20 94 89                  	JSR Debug_UpdateWorld ; Draw in the actual values...
08837 20 76 E4                  	JSR WaitForNMI
0883A 20 AF 89                  	JSR Debug_UpdateLevel
0883D 20 76 E4                  	JSR WaitForNMI
08840 20 9E 89                  	JSR Debug_UpdateArea
08843 20 76 E4                  	JSR WaitForNMI
08846 20 A6 89                  	JSR Debug_UpdateCharacter
08849 20 76 E4                  	JSR WaitForNMI
0884C                           
0884C                           	; Add the goofy smiley cursor
0884C A9 4A                     	LDA #$4a ; Y
0884E 8D 00 02                  	STA SpriteDMAArea
08851 A9 38                     	LDA #$38 ; Tile
08853 8D 01 02                  	STA SpriteDMAArea + 1
08856 A9 00                     	LDA #$0 ; Attributes
08858 8D 02 02                  	STA SpriteDMAArea + 2
0885B A9 1B                     	LDA #$1b ; X
0885D 8D 03 02                  	STA SpriteDMAArea + 3
08860 A9 4A                     	LDA #$4a
08862 8D 04 02                  	STA SpriteDMAArea + 4
08865 A9 3A                     	LDA #$3A
08867 8D 05 02                  	STA SpriteDMAArea + 5
0886A A9 00                     	LDA #$0
0886C 8D 06 02                  	STA SpriteDMAArea + 6
0886F A9 23                     	LDA #$23
08871 8D 07 02                  	STA SpriteDMAArea + 7
08874                           
08874                           
08874                           Debug_MenuLoop:
08874 20 76 E4                  	JSR WaitForNMI
08877                           
08877 AD E0 7F                  	LDA Debug_CurrentMenuOption ; Update cursor sprite
0887A 0A                        	ASL A
0887B 0A                        	ASL A
0887C 0A                        	ASL A
0887D 0A                        	ASL A
0887E 18                        	CLC
0887F 69 4A                     	ADC #$4a ; Move the cursor
08881 8D 00 02                  	STA SpriteDMAArea
08884 8D 04 02                  	STA SpriteDMAArea + 4
08887                           
08887 A5 F5                     	LDA Player1JoypadPress ; Check if we should abort
08889 C9 40                     	CMP #ControllerInput_B
0888B F0 1C                     	BEQ Debug_DoAbort
0888D                           
0888D A5 F5                     	LDA Player1JoypadPress ; Check if we should abort
0888F C9 80                     	CMP #ControllerInput_A
08891 F0 19                     	BEQ Debug_DoActivate
08893                           
08893 C9 04                     	CMP #ControllerInput_Down ; Otherwise, move the cursor down?
08895 F0 23                     	BEQ Debug_MenuDown
08897                           
08897 C9 08                     	CMP #ControllerInput_Up ; Maybe up instead?
08899 F0 14                     	BEQ Debug_MenuUp
0889B                           
0889B AD E0 7F                  	LDA Debug_CurrentMenuOption
0889E 20 A6 D9                  	JSR JumpToTableAfterJump
088A1 D4 88                     	.dw DebugMenu_World
088A3 00 89                     	.dw DebugMenu_Level
088A5 2D 89                     	.dw DebugMenu_Area
088A7 61 89                     	.dw DebugMenu_Character
088A9                           
088A9                           
088A9                           Debug_DoAbort:
088A9 4C FD F1                  	JMP Debug_Abort
088AC                           
088AC                           Debug_DoActivate:
088AC 4C 32 F2                  	JMP Debug_Activate
088AF                           
088AF                           Debug_MenuUp:
088AF AD E0 7F                  	LDA Debug_CurrentMenuOption
088B2 F0 C0                     	BEQ Debug_MenuLoop
088B4 CE E0 7F                  	DEC Debug_CurrentMenuOption
088B7 4C C4 88                  	JMP +
088BA                           
088BA                           Debug_MenuDown:
088BA AD E0 7F                  	LDA Debug_CurrentMenuOption
088BD C9 03                     	CMP #Debug_MenuOptionCount - 1
088BF F0 B3                     	BEQ Debug_MenuLoop
088C1 EE E0 7F                  	INC Debug_CurrentMenuOption
088C4                           
088C4 A9 04                     +	LDA #SoundEffect1_CherryGet
088C6 8D 02 06                  	STA SoundEffectQueue1
088C9 4C 74 88                  	JMP Debug_MenuLoop
088CC                           
088CC                           
088CC                           
088CC                           DebugMenu_DoNothing:
088CC A9 80                     -f	LDA #SoundEffect1_HawkOpen_WartBarf
088CE 8D 02 06                  	STA SoundEffectQueue1
088D1 4C 74 88                  -q	JMP Debug_MenuLoop
088D4                           
088D4                           DebugMenu_World:
088D4 A5 F5                     	LDA Player1JoypadPress
088D6 C9 02                     	CMP #ControllerInput_Left ; If left, decrease
088D8 F0 06                     	BEQ +l
088DA C9 01                     	CMP #ControllerInput_Right ; If right, increase
088DC F0 0D                     	BEQ +r
088DE D0 F1                     	BNE -q
088E0 AD 35 06                  +l	LDA CurrentWorld ; Check current world...
088E3 F0 E7                     	BEQ -f ; World is already 1, go away
088E5 CE 35 06                  	DEC CurrentWorld ; Decrease
088E8 4C F5 88                  	JMP +s ; Skip ahead
088EB AD 35 06                  +r	LDA CurrentWorld
088EE C9 06                     	CMP #$06 ; bug: lets you go one too high lol oops
088F0 F0 DA                     	BEQ -f ; Already at world 7, go away
088F2 EE 35 06                  	INC CurrentWorld ; Otherwise increase
088F5 A9 04                     +s	LDA #SoundEffect2_CoinGet
088F7 8D 04 06                  	STA SoundEffectQueue2
088FA 20 94 89                  	JSR Debug_UpdateWorld
088FD 4C 74 88                  	JMP Debug_MenuLoop
08900                           
08900                           
08900                           DebugMenu_Level:
08900 A5 F5                     	LDA Player1JoypadPress
08902 C9 02                     	CMP #ControllerInput_Left ; If left, decrease
08904 F0 06                     	BEQ +l
08906 C9 01                     	CMP #ControllerInput_Right ; If right, increase
08908 F0 0D                     	BEQ +r
0890A D0 C5                     	BNE -q
0890C AD 31 05                  +l	LDA CurrentLevel ; Check current world...
0890F F0 BB                     	BEQ -f ; Level is already 0, go away
08911 CE 31 05                  	DEC CurrentLevel ; Decrease
08914 4C 22 89                  	JMP +s ; Skip ahead
08917 AD 31 05                  +r	LDA CurrentLevel
0891A CD 1A D9                  	CMP #WorldStartingLevel + 7
0891D F0 AD                     	BEQ -f ; Already at last level, go away
0891F EE 31 05                  	INC CurrentLevel ; Otherwise increase
08922 A9 04                     +s	LDA #SoundEffect2_CoinGet
08924 8D 04 06                  	STA SoundEffectQueue2
08927 20 AF 89                  	JSR Debug_UpdateLevel
0892A 4C 74 88                  	JMP Debug_MenuLoop
0892D                           
0892D                           
0892D                           DebugMenu_Area:
0892D A5 F5                     	LDA Player1JoypadPress
0892F C9 02                     	CMP #ControllerInput_Left ; If left, decrease
08931 F0 06                     	BEQ +l
08933 C9 01                     	CMP #ControllerInput_Right ; If right, increase
08935 F0 0D                     	BEQ +r
08937 D0 25                     	BNE +q
08939 AD 32 05                  +l	LDA CurrentLevelArea ; Check current area...
0893C F0 1B                     	BEQ +f ; Area is already 0, go away
0893E CE 32 05                  	DEC CurrentLevelArea ; Decrease
08941 4C 4E 89                  	JMP +s ; Skip ahead
08944 AD 32 05                  +r	LDA CurrentLevelArea
08947 C9 09                     	CMP #$9
08949 F0 0E                     	BEQ +f ; Already at area 9, go away
0894B EE 32 05                  	INC CurrentLevelArea ; Otherwise increase
0894E A9 04                     +s	LDA #SoundEffect2_CoinGet
08950 8D 04 06                  	STA SoundEffectQueue2
08953 20 9E 89                  	JSR Debug_UpdateArea
08956 4C 74 88                  	JMP Debug_MenuLoop
08959                           
08959                           -f
08959                           +f
08959 A9 80                     	LDA #SoundEffect1_HawkOpen_WartBarf
0895B 8D 02 06                  	STA SoundEffectQueue1
0895E                           +q
0895E                           -q
0895E 4C 74 88                  	JMP Debug_MenuLoop
08961                           
08961                           
08961                           DebugMenu_Character:
08961 A5 F5                     	LDA Player1JoypadPress
08963 C9 02                     	CMP #ControllerInput_Left ; If left, decrease
08965 F0 06                     	BEQ +l
08967 C9 01                     	CMP #ControllerInput_Right ; If right, increase
08969 F0 0B                     	BEQ +r
0896B D0 F1                     	BNE -q
0896D A5 8F                     +l	LDA CurrentCharacter ; Check current character...
0896F F0 E8                     	BEQ -f ; Character is already 0, go away
08971 C6 8F                     	DEC CurrentCharacter ; Decrease
08973 4C 7E 89                  	JMP +s ; Skip ahead
08976 A5 8F                     +r	LDA CurrentCharacter
08978 C9 03                     	CMP #3
0897A F0 DD                     	BEQ -f ; Already at character 3, go away
0897C E6 8F                     	INC CurrentCharacter ; Otherwise increase
0897E A9 04                     +s	LDA #SoundEffect2_CoinGet
08980 8D 04 06                  	STA SoundEffectQueue2
08983 20 A6 89                  	JSR Debug_UpdateCharacter
08986 4C 74 88                  	JMP Debug_MenuLoop
08989                           
08989                           
08989                           
08989                           
08989                           
08989                           
08989                           ; Part of update menu screen loop pls ignore
08989                           -:
08989 20 F3 89                  	JSR Debug_BufferText ; Draw requested text
0898C 68                        	PLA ; Pull the value to update...
0898D 18                        	CLC
0898E 69 D0                     	ADC #$D0 ; Move to character offset
08990 8D 04 03                  	STA PPUBuffer_301 + 3
08993 60                        	RTS
08994                           
08994                           Debug_UpdateWorld:
08994 AE 35 06                  	LDX CurrentWorld ; Load current world
08997 E8                        	INX
08998 8A                        	TXA
08999 48                        	PHA ; Push onto stack
0899A A9 06                     	LDA #$06 ; Load text to update
0899C D0 EB                     	BNE - ; Go do that.
0899E                           
0899E                           Debug_UpdateArea:
0899E AD 32 05                  	LDA CurrentLevelArea ; Load current world
089A1 48                        	PHA ; Push onto stack
089A2 A9 08                     	LDA #$08 ; Load text to update
089A4 D0 E3                     	BNE - ; Go do that.
089A6                           
089A6                           Debug_UpdateCharacter:
089A6 A9 09                     	LDA #$09 ; Load text offset of Mario (0)
089A8 18                        	CLC
089A9 65 8F                     	ADC CurrentCharacter ; Add the character index ...
089AB 20 F3 89                  	JSR Debug_BufferText ; ...and draw it.
089AE 60                        	RTS
089AF                           
089AF                           
089AF                           Debug_UpdateLevel:
089AF A2 00                     	LDX #$00 ; Set X to 0
089B1                           -
089B1 AD 31 05                  	LDA CurrentLevel ; Get the starting level index
089B4 DD 13 D9                  	CMP WorldStartingLevel, X ; Is it higher than our current level?
089B7 90 03                     	BCC + ; Yep, jump outta here
089B9 E8                        	INX ; No, try next index
089BA D0 F5                     	BNE -
089BC                           ; At this point, X has the index we used
089BC                           +
089BC CA                        	DEX ; Go down one
089BD 8A                        	TXA ; This is current world - 1
089BE 48                        	PHA ; Stuff onto stack
089BF AD 31 05                  	LDA CurrentLevel
089C2 38                        	SEC
089C3 FD 13 D9                  	SBC WorldStartingLevel, X ; Get the starting level index
089C6 48                        	PHA
089C7                           
089C7 A9 07                     	LDA #$07 ; Load text offset of Mario (0)
089C9 20 F3 89                  	JSR Debug_BufferText ; ...and draw it.
089CC 68                        	PLA ; Then draw the level number...
089CD 18                        	CLC
089CE 69 D1                     	ADC #$D1
089D0 8D 0A 03                  	STA PPUBuffer_301 + 9
089D3 68                        	PLA ; ...and the world number...
089D4 18                        	CLC
089D5 69 D1                     	ADC #$D1
089D7 8D 08 03                  	STA PPUBuffer_301 + 7
089DA AD 31 05                  	LDA CurrentLevel ; ...and the internal level number high nybble...
089DD 4A                        	LSR
089DE 4A                        	LSR
089DF 4A                        	LSR
089E0 4A                        	LSR
089E1 18                        	CLC
089E2 69 D0                     	ADC #$D0
089E4 8D 04 03                  	STA PPUBuffer_301 + 3
089E7 AD 31 05                  	LDA CurrentLevel ; ...and the internal level number low nybble.
089EA 29 0F                     	AND #$0F
089EC 18                        	CLC
089ED 69 D0                     	ADC #$D0
089EF 8D 05 03                  	STA PPUBuffer_301 + 4
089F2 60                        	RTS
089F3                           
089F3                           ; WorldStartingLevel
089F3                           
089F3                           
089F3                           Debug_BufferText:
089F3 0A                        	ASL A ; Rotate A left one
089F4 AA                        	TAX ; A->X
089F5 BD 0B 8A                  	LDA DebugPPU_TextPointers, X ; Load low pointer
089F8 85 00                     	STA $0 ; Store one byte to low address
089FA BD 0C 8A                  	LDA DebugPPU_TextPointers + 1, X ; Store high pointer
089FD 85 01                     	STA $1 ; Store one byte to low address
089FF B1 00                     	LDA ($0), Y ; Load the length of data to copy
08A01 A8                        	TAY
08A02                           -
08A02 B1 00                     	LDA ($0), Y ; Load our PPU data...
08A04 99 00 03                  	STA PPUBuffer_301 - 1, Y ; ...and store it in the buffer
08A07 88                        	DEY
08A08 D0 F8                     	BNE -
08A0A 60                        	RTS
08A0B                           
08A0B                           
08A0B                           
08A0B                           
08A0B                           
08A0B                           
08A0B                           
08A0B                           DebugPPU_TextPointers:
08A0B 25 8A                     	.dw DebugPPU_DebugText ; 0
08A0D 34 8A                     	.dw DebugPPU_WorldText ; 1
08A0F 41 8A                     	.dw DebugPPU_LevelText ; 2
08A11 4E 8A                     	.dw DebugPPU_AreaText ; 3
08A13 5B 8A                     	.dw DebugPPU_CharacterText ; 4
08A15 6C 8A                     	.dw DebugPPU_AbortText ; 5
08A17                           
08A17 83 8A                     	.dw DebugPPU_UpdateWorld ; 6
08A19 89 8A                     	.dw DebugPPU_UpdateLevel ; 7
08A1B 95 8A                     	.dw DebugPPU_UpdateArea ; 8
08A1D 9B 8A                     	.dw DebugPPU_UpdateCharacter0 ; 9
08A1F AA 8A                     	.dw DebugPPU_UpdateCharacter1 ; 10
08A21 B9 8A                     	.dw DebugPPU_UpdateCharacter2 ; 11
08A23 C8 8A                     	.dw DebugPPU_UpdateCharacter3 ; 12
08A25                           
08A25                           
08A25                           DebugPPU_DebugText: ; DEBUG
08A25 0E 20 CB 0A DD DE DB EE.. 	.db #10+4, #$20, #$CB, #$A, #$DD, #$DE, #$DB, #$EE, #$E0, #$FB, #$E6, #$DE, #$E7, #$EE, #0
08A34                           
08A34                           DebugPPU_WorldText: ; WORLD ?
08A34 0C 21 46 08 F0 E8 EB E5.. 	.db #$08+4, #$21, #$46, #$8, #$F0, #$E8, #$EB, #$E5, #$DD, #$FB, #$FB, #$F5, #0
08A41                           
08A41                           DebugPPU_LevelText: ; LEVEL ?
08A41 0C 21 86 08 E5 DE EF DE.. 	.db #$08+4, #$21, #$86, #$8, #$E5, #$DE, #$EF, #$DE, #$E5, #$FB, #$FB, #$F5, #0
08A4E                           
08A4E                           DebugPPU_AreaText: ; AREA  ?
08A4E 0C 21 C6 08 DA EB DE DA.. 	.db #$08+4, #$21, #$C6, #$8, #$DA, #$EB, #$DE, #$DA, #$FB, #$FB, #$FB, #$F5, #0
08A5B                           
08A5B                           DebugPPU_CharacterText: ; CHARACTER ?
08A5B 11 22 06 0C DC E1 DA EB.. 	.db #13+4, #$22, #$06, #$C, #$DC, #$E1, #$DA, #$EB, #$DA, #$DC, #$ED, #$DE, #$EB, #$FB, #$FB, #$F5, #0
08A6C                           
08A6C                           DebugPPU_AbortText: ; B BUTTON...ABORT
08A6C 16 23 27 12 DB FB DB EE.. 	.db #$12+4, #$23, #$27, #$12, #$DB, #$FB, #$DB, #$EE, #$ED, #$ED, #$E8, #$E7, #$FB, #$CF, #$CF, #$CF, #$FB,#$DA, #$DB, #$E8, #$EB, #$ED, #$00
08A83                           
08A83                           DebugPPU_UpdateWorld: ; ?
08A83 05 21 4D 01 FB 00         	.db #$01+4, #$21, #$4D, #$01, #$FB, #0
08A89                           DebugPPU_UpdateLevel: ; ?
08A89 0D 21 8C 07 F5 F5 FB FB.. 	.db #$06+7, #$21, #$8C, #$07, #$F5, #$F5, #$FB, #$FB, #$F5, #$F4, #$F5, #0
08A95                           DebugPPU_UpdateArea: ; ?
08A95 05 21 CD 01 FB 00         	.db #$01+4, #$21, #$CD, #$01, #$FB, #0
08A9B                           DebugPPU_UpdateCharacter0: ; 0 MARIO
08A9B 0E 22 11 0A D0 FB E6 DA.. 	.db #$A+4, #$22, #$11, #$A, #$D0, #$FB, #$E6, #$DA, #$EB, #$E2, #$E8, #$FB, #$FB, #$FB, #0
08AAA                           DebugPPU_UpdateCharacter1: ; 1 PRINCESS
08AAA 0E 22 11 0A D1 FB E9 EB.. 	.db #$A+4, #$22, #$11, #$A, #$D1, #$FB, #$E9, #$EB, #$E2, #$E7, #$DC, #$DE, #$EC, #$EC, #0
08AB9                           DebugPPU_UpdateCharacter2: ; 2 TOAD
08AB9 0E 22 11 0A D2 FB ED E8.. 	.db #$A+4, #$22, #$11, #$A, #$D2, #$FB, #$ED, #$E8, #$DA, #$DD, #$FB, #$FB, #$FB, #$FB, #0
08AC8                           DebugPPU_UpdateCharacter3: ; 3 LUIGI
08AC8 0E 22 11 0A D3 FB E5 EE.. 	.db #$A+4, #$22, #$11, #$A, #$D3, #$FB, #$E5, #$EE, #$E2, #$E0, #$E2, #$FB, #$FB, #$FB, #0
08AD7                           ENDIF
08AD7                           
08AD7                           IFDEF PLAYER_STUFF
08AD7                               .include src/extras/lock-character-f.asm
08AD7                           
08AD7                           CharacterLock_Variable = $7DE0
08AD7                           CharLockVar:
08AD7 00                            .db $00
08AD8                           
08AD8                           
08AD8                           CharSelectInitialize:
08AD8 AD E0 7D                        LDA CharacterLock_Variable ; check lock var, if 0 load new var
08ADB C9 0F                           CMP #$F
08ADD D0 06                           BNE +
08ADF AD D7 8A                        LDA CharLockVar
08AE2 8D E0 7D                        STA CharacterLock_Variable
08AE5 60                        +     RTS
08AE6                           
08AE6                           
08AE6                           LockCharacterSelectColor:
08AE6 A5 8F                           LDA CurrentCharacter
08AE8 48                              PHA
08AE9 98                              TYA
08AEA 48                              PHA
08AEB                           
08AEB A0 03                           LDY #3
08AED A9 00                           LDA #0 
08AEF 85 8F                           STA CurrentCharacter
08AF1 4C FE 8A                        JMP +
08AF4 C6 8F                     -     DEC CurrentCharacter
08AF6 A5 8F                           LDA CurrentCharacter
08AF8 29 03                           AND #3
08AFA C9 00                           CMP #0
08AFC F0 23                           BEQ +++
08AFE 20 32 E7                  +     JSR ChkToNextValidCharacter
08B01 D0 07                           BNE ++
08B03 C8                              INY
08B04 C8                              INY
08B05 C8                              INY
08B06 C8                              INY
08B07 4C F4 8A                        JMP     -
08B0A A9 0F                     ++    LDA     #$0f
08B0C 99 01 03                        STA     PPUBuffer_301,Y
08B0F A9 12                           LDA     #$12
08B11 C8                              INY
08B12 99 01 03                        STA     PPUBuffer_301,Y
08B15 C8                              INY
08B16 99 01 03                        STA     PPUBuffer_301,Y
08B19 C8                              INY
08B1A 99 01 03                        STA     PPUBuffer_301,Y
08B1D C8                              INY
08B1E 4C F4 8A                        JMP     -
08B21                           
08B21 68                        +++   PLA
08B22 A8                              TAY
08B23 68                              PLA
08B24 85 8F                           STA CurrentCharacter
08B26 60                              RTS
08B27                           ENDIF
08B27                           
08B27                           IFDEF PLAYER_STUFF_UNUSED_EXTRA
08B27                           LevelAreaBonusPtrs:
08B27                           ENDIF
08B27                           
08B27                           
08B27                           IFDEF PLAYER_STUFF_SPIKES
08B27                           InitializeEnemyAB:
08B27                           	JSR JumpToTableAfterJump
08B27                           	.dw EnemyInit_Spikes
08B27                           
08B27                           EnemyBehaviorAB:
08B27                           	JSR JumpToTableAfterJump
08B27                           	.dw EnemyBehavior_Spike
08B27                           
08B27                           EnemyInit_Spikes:
08B27                               RTS
08B27                           EnemyBehavior_Spike:
08B27                               LDA ObjectYVelocity,X
08B27                               BEQ +
08B27                               JSR ApplyObjectMovementAB
08B27                               BNE RenderSprite_Spike
08B27                           +   LDA ObjectShakeTimer
08B27                           	BEQ +
08B27                               DEC ObjectShakeTimer
08B27                               BNE ++
08B27                               LDA #$10
08B27                               STA ObjectYVelocity,X
08B27                               BNE RenderSprite_Spike
08B27                           +
08B27                               LDA PlayerXLo
08B27                               CMP ObjectXLo, X
08B27                               BCS ++
08B27                               CLC
08B27                               ADC #$10
08B27                               BCC ++
08B27                               INC ObjectShakeTimer
08B27                           ++
08B27                           RenderSprite_Spike:
08B27                           	LDA byte_RAM_EE
08B27                           	AND #$08
08B27                           	ORA byte_RAM_EF
08B27                               BEQ +
08B27                               JSR AreaResetEnemyDestroy
08B27                           +
08B27                           	LDY byte_RAM_F4
08B27                           	LDA SpriteTempScreenY
08B27                           	STA SpriteDMAArea, Y
08B27                           	LDA SpriteTempScreenX
08B27                           	STA SpriteDMAArea + 3, Y
08B27                               LDA #$A7
08B27                           	STA SpriteDMAArea + 1, Y
08B27                           	LDA #$81
08B27                           	STA SpriteDMAArea + 2, Y
08B27                               RTS
08B27                           ENDIF
08B27 FF FF FF FF FF FF FF FF.. .pad $c000, $ff
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; Banks C and D. The first half is
0C000                           ; a lot of data for the credits.
0C000                           ; The second half is totally empty.
0C000                           .base $8000
08000                           .include "src/prg-c-d.asm"
08000                           ;
08000                           ; Bank C & Bank D
08000                           ; ===============
08000                           ;
08000                           ; What's inside:
08000                           ;
08000                           ;   - The ending sequence with Mario sleeping and the cast roll
08000                           ;
08000                           
08000                           MarioDream_Pointers:
08000 01 03                     	.dw PPUBuffer_301
08002 67 80                     	.dw MarioDream_Bed
08004 1F 82                     	.dw MarioDream_Bubble
08006 B5 82                     	.dw MarioDream_DoNothing
08008 C3 82                     	.dw MarioDream_EraseBubble1
0800A CC 82                     	.dw MarioDream_EraseBubble2
0800C D5 82                     	.dw MarioDream_EraseBubble3
0800E DE 82                     	.dw MarioDream_EraseBubble4
08010 E7 82                     	.dw MarioDream_EraseBubble5
08012 43 80                     	.dw MarioDream_Palettes
08014                           
08014                           ; =============== S U B R O U T I N E =======================================
08014                           
08014                           sub_BANKC_8014:
08014 A9 00                     	LDA #0
08016 F0 02                     	BEQ loc_BANKC_801A
08018                           
08018                           ; End of function sub_BANKC_8014
08018                           
08018                           ; =============== S U B R O U T I N E =======================================
08018                           
08018                           sub_BANKC_8018:
08018 A9 1E                     	LDA #PPUMask_ShowLeft8Pixels_BG | PPUMask_ShowLeft8Pixels_SPR | PPUMask_ShowBackground | PPUMask_ShowSprites
0801A                           
0801A                           loc_BANKC_801A:
0801A 85 FE                     	STA PPUMaskMirror
0801C                           
0801C                           ; End of function sub_BANKC_8018
0801C                           
0801C                           ; =============== S U B R O U T I N E =======================================
0801C                           
0801C                           sub_BANKC_801C:
0801C A5 11                     	LDA ScreenUpdateIndex
0801E 0A                        	ASL A
0801F AA                        	TAX
08020 BD 00 80                  	LDA MarioDream_Pointers, X
08023 85 F0                     	STA RAM_PPUDataBufferPointer
08025 BD 01 80                  	LDA MarioDream_Pointers + 1, X
08028 85 F1                     	STA RAM_PPUDataBufferPointer + 1
0802A A9 00                     	LDA #0
0802C 85 EB                     	STA NMIWaitFlag
0802E                           
0802E                           loc_BANKC_802E:
0802E A5 EB                     	LDA NMIWaitFlag
08030 10 FC                     	BPL loc_BANKC_802E
08032                           
08032 60                        	RTS
08033                           
08033                           ; End of function sub_BANKC_801C
08033                           
08033                           
08033                           EnableNMI_BankC:
08033 A9 B0                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
08035 85 FF                     	STA PPUCtrlMirror
08037 8D 00 20                  	STA PPUCTRL
0803A 60                        	RTS
0803B                           
0803B                           
0803B                           DisableNMI_BankC:
0803B A9 30                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIDisabled
0803D 8D 00 20                  	STA PPUCTRL
08040 85 FF                     	STA PPUCtrlMirror
08042 60                        	RTS
08043                           
08043                           
08043                           MarioDream_Palettes:
08043 3F 00 20                  	.db $3F, $00, $20
08046 02 22 12 0F               	.db $02, $22, $12, $0F
0804A 02 30 16 0F               	.db $02, $30, $16, $0F
0804E 02 30 16 28               	.db $02, $30, $16, $28
08052 02 22 31 0F               	.db $02, $22, $31, $0F
08056 02 27 16 0F               	.db $02, $27, $16, $0F
0805A 02 27 2A 0F               	.db $02, $27, $2A, $0F
0805E 02 27 25 0F               	.db $02, $27, $25, $0F
08062 02 27 3C 0F               	.db $02, $27, $3C, $0F
08066 00                        	.db $00
08067                           
08067                           MarioDream_Bed:
08067 20 00 60 FF               	.db $20, $00, $60, $FF
0806B 20 20 60 FF               	.db $20, $20, $60, $FF
0806F 20 40 60 FF               	.db $20, $40, $60, $FF
08073 20 60 60 FF               	.db $20, $60, $60, $FF
08077 23 40 60 FF               	.db $23, $40, $60, $FF
0807B 23 60 60 FF               	.db $23, $60, $60, $FF
0807F 23 80 60 FF               	.db $23, $80, $60, $FF
08083 23 A0 60 FF               	.db $23, $A0, $60, $FF
08087 20 80 D6 FF               	.db $20, $80, $D6, $FF
0808B 20 81 D6 FF               	.db $20, $81, $D6, $FF
0808F 20 82 D6 FF               	.db $20, $82, $D6, $FF
08093 20 83 D6 FF               	.db $20, $83, $D6, $FF
08097 20 9C D6 FF               	.db $20, $9C, $D6, $FF
0809B 20 9D D6 FF               	.db $20, $9D, $D6, $FF
0809F 20 9E D6 FF               	.db $20, $9E, $D6, $FF
080A3 20 9F D6 FF               	.db $20, $9F, $D6, $FF
080A7 20 84 58 FC               	.db $20, $84, $58, $FC
080AB 20 A4 58 FC               	.db $20, $A4, $58, $FC
080AF 20 C4 58 FC               	.db $20, $C4, $58, $FC
080B3 20 E4 58 FC               	.db $20, $E4, $58, $FC
080B7 21 04 58 FC               	.db $21, $04, $58, $FC
080BB 21 24 58 FC               	.db $21, $24, $58, $FC
080BF 21 44 58 FC               	.db $21, $44, $58, $FC
080C3 21 64 58 FC               	.db $21, $64, $58, $FC
080C7 21 84 58 FC               	.db $21, $84, $58, $FC
080CB 21 A4 58 FC               	.db $21, $A4, $58, $FC
080CF 21 C4 58 FC               	.db $21, $C4, $58, $FC
080D3 21 E4 58 FC               	.db $21, $E4, $58, $FC
080D7 22 04 58 FC               	.db $22, $04, $58, $FC
080DB 22 24 58 FC               	.db $22, $24, $58, $FC
080DF 22 44 58 FC               	.db $22, $44, $58, $FC
080E3 22 64 58 FC               	.db $22, $64, $58, $FC
080E7 22 84 58 FC               	.db $22, $84, $58, $FC
080EB 22 A4 58 FC               	.db $22, $A4, $58, $FC
080EF 22 C4 58 FC               	.db $22, $C4, $58, $FC
080F3 21 4E 02 60 61            	.db $21, $4E, $02, $60, $61
080F8 21 6E 02 70 71            	.db $21, $6E, $02, $70, $71
080FD 21 8E 02 80 81            	.db $21, $8E, $02, $80, $81
08102 21 AC 06 36 37 38 39 3A.. 	.db $21, $AC, $06, $36, $37, $38, $39, $3A, $3B
0810B 21 CA 0C 36 37 35 47 48.. 	.db $21, $CA, $0C, $36, $37, $35, $47, $48, $49, $4A, $4B, $4C, $4D, $4E, $4F
0811A 21 E8 0E 36 37 35 55 56.. 	.db $21, $E8, $0E, $36, $37, $35, $55, $56, $57, $58, $59, $5A, $5B, $5C, $5D
08129 5E 5F                     	.db $5E, $5F ; $F
0812B 22 06 10 36 37 35 FC 64.. 	.db $22, $06, $10, $36, $37, $35, $FC, $64, $65, $66, $67, $68, $69, $6A, $6B
0813A 6C 6D 6E 6F               	.db $6C, $6D, $6E, $6F ; $F
0813E 22 24 12 36 37 35 FC FC.. 	.db $22, $24, $12, $36, $37, $35, $FC, $FC, $FC, $74, $75, $76, $77, $78, $79
0814D 7A 7B 7C 7D 7E 7F         	.db $7A, $7B, $7C, $7D, $7E, $7F ; $F
08153 22 44 18 35 FC FC FC 82.. 	.db $22, $44, $18, $35, $FC, $FC, $FC, $82, $83, $84, $85, $86, $87, $88, $89
08162 8A 8B 8C 8D 8E 8F 00 01.. 	.db $8A, $8B, $8C, $8D, $8E, $8F, $00, $01, $02, $03, $04, $05 ; $F
0816E 22 68 14 92 93 94 95 96.. 	.db $22, $68, $14, $92, $93, $94, $95, $96, $97, $98, $99, $9A, $9B, $9C, $9D
0817D 9E 9F 10 11 12 13 14 15   	.db $9E, $9F, $10, $11, $12, $13, $14, $15 ; $F
08185 22 88 14 A2 A3 A4 A5 A6.. 	.db $22, $88, $14, $A2, $A3, $A4, $A5, $A6, $A7, $A8, $A9, $AA, $AB, $AC, $AD
08194 AE AF FE FE FE FE FE FE   	.db $AE, $AF, $FE, $FE, $FE, $FE, $FE, $FE ; $F
0819C 22 A7 15 B1 B2 B3 B4 B5.. 	.db $22, $A7, $15, $B1, $B2, $B3, $B4, $B5, $B6, $B7, $B8, $B9, $BA, $BB, $BC
081AB BD BE BF FE FE FE FE FE.. 	.db $BD, $BE, $BF, $FE, $FE, $FE, $FE, $FE, $FE ; $F
081B4 22 C6 16 C0 C1 C2 C3 C4.. 	.db $22, $C6, $16, $C0, $C1, $C2, $C3, $C4, $C5, $C6, $C7, $C8, $C9, $CA, $CB
081C3 CC CD FE FE FE FE FE FE.. 	.db $CC, $CD, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE ; $F
081CD 22 E4 18 B1 F1 D0 D1 D2.. 	.db $22, $E4, $18, $B1, $F1, $D0, $D1, $D2, $D3, $D4, $D5, $D6, $D7, $D8, $D9
081DC DA DB FE FE FE FE FE FE.. 	.db $DA, $DB, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE ; $F
081E8 23 04 18 F0 FE FE FE E2.. 	.db $23, $04, $18, $F0, $FE, $FE, $FE, $E2, $E3, $E4, $E5, $E6, $E7, $E8, $E9
081F7 EA FE FE FE FE FE FE FE.. 	.db $EA, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE ; $F
08203 23 24 18 FE FE FE FE F2.. 	.db $23, $24, $18, $FE, $FE, $FE, $FE, $F2, $F3, $F4, $F5, $F6, $F7, $F8, $F9
08212 FA FE FE FE FE FE FE FE.. 	.db $FA, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE ; $F
0821E 00                        	.db $00
0821F                           
0821F                           MarioDream_Bubble:
0821F 20 8F 84 06 16 07 17      	.db $20, $8F, $84, $06, $16, $07, $17
08226 20 D0 85 08 18 09 19 1D   	.db $20, $D0, $85, $08, $18, $09, $19, $1D
0822E 20 90 4C FD               	.db $20, $90, $4C, $FD
08232 20 B0 4C FD               	.db $20, $B0, $4C, $FD
08236 20 D1 4B FD               	.db $20, $D1, $4B, $FD
0823A 20 F1 0B FD FD FD 28 29.. 	.db $20, $F1, $0B, $FD, $FD, $FD, $28, $29, $29, $29, $29, $2A, $FD, $FD
08248 21 11 0B FD FD FD FD 27.. 	.db $21, $11, $0B, $FD, $FD, $FD, $FD, $27, $FD, $FD, $27, $FD, $FD, $FD
08256 21 31 0B FD FD FD FD 27.. 	.db $21, $31, $0B, $FD, $FD, $FD, $FD, $27, $FD, $FD, $27, $FD, $FD, $FD
08264 21 51 0B FD FD 23 24 25.. 	.db $21, $51, $0B, $FD, $FD, $23, $24, $25, $22, $23, $24, $25, $25, $FD
08272 21 71 0B 0B 0C 0D 0E 0F.. 	.db $21, $71, $0B, $0B, $0C, $0D, $0E, $0F, $FD, $FD, $FD, $FD, $FD, $FD
08280 21 95 07 1F 1A 30 31 32.. 	.db $21, $95, $07, $1F, $1A, $30, $31, $32, $33, $1B
0828A 21 B5 06 53 FC 40 41 42.. 	.db $21, $B5, $06, $53, $FC, $40, $41, $42, $43
08293 21 D7 03 50 51 52         	.db $21, $D7, $03, $50, $51, $52
08299 21 F6 02 20 21            	.db $21, $F6, $02, $20, $21
0829E 23 CB 04 44 55 A5 65      	.db $23, $CB, $04, $44, $55, $A5, $65 ; Attribute table changes
082A5 23 D4 03 55 5A 56         	.db $23, $D4, $03, $55, $5A, $56
082AB 23 DD 02 45 15            	.db $23, $DD, $02, $45, $15
082B0 23 E4 01 3F               	.db $23, $E4, $01, $3F
082B4 00                        	.db $00
082B5                           
082B5                           ; This is pointed to, but the very first byte
082B5                           ; is the terminating 0, so nothing gets drawn.
082B5                           ; This would have undone the attribute changes
082B5                           ; done in the above PPU writing, but I guess
082B5                           ; Nintendo realized they were never going to
082B5                           ; use that part of the screen again
082B5                           MarioDream_DoNothing:
082B5 00                        	.db $00
082B6 23 CB 44 00               	.db $23, $CB, $44, $00
082BA 23 D4 43 00               	.db $23, $D4, $43, $00
082BE 23 DD 42 00               	.db $23, $DD, $42, $00
082C2 00                        	.db $00
082C3                           
082C3                           MarioDream_EraseBubble1:
082C3 20 8F 4D FC               	.db $20, $8F, $4D, $FC
082C7 20 AF 4D FC               	.db $20, $AF, $4D, $FC
082CB 00                        	.db $00
082CC                           
082CC                           MarioDream_EraseBubble2:
082CC 20 CF 4D FC               	.db $20, $CF, $4D, $FC
082D0 20 EF 4D FC               	.db $20, $EF, $4D, $FC
082D4 00                        	.db $00
082D5                           
082D5                           MarioDream_EraseBubble3:
082D5 21 10 4C FC               	.db $21, $10, $4C, $FC
082D9 21 30 4C FC               	.db $21, $30, $4C, $FC
082DD 00                        	.db $00
082DE                           
082DE                           MarioDream_EraseBubble4:
082DE 21 50 4C FC               	.db $21, $50, $4C, $FC
082E2 21 71 4B FC               	.db $21, $71, $4B, $FC
082E6 00                        	.db $00
082E7                           
082E7                           MarioDream_EraseBubble5:
082E7 21 95 47 FC               	.db $21, $95, $47, $FC
082EB 21 B5 46 FC               	.db $21, $B5, $46, $FC
082EF 21 D7 43 FC               	.db $21, $D7, $43, $FC
082F3 21 F6 42 FC               	.db $21, $F6, $42, $FC
082F7 00                        	.db $00
082F8                           
082F8                           MarioDream_BubbleSprites:
082F8 28 00 00 A8               	.db $28, $00, $00, $A8 ;; 0 Left-Left, mario
082FC 28 04 01 B0               	.db $28, $04, $01, $B0 ;; 3  left-left, luigi 
08300 28 08 02 C0               	.db $28, $08, $02, $C0 ;; 1
08304 28 0C 03 B8               	.db $28, $0C, $03, $B8 ;; 2 ;;;;;; 0 2 3 1
08308                           
08308                           MarioDream_BubbleSprites2:
08308 28 02 00 A8               	.db $28, $02, $00, $A8
0830C 28 06 01 B0               	.db $28, $06, $01, $B0
08310 28 0A 02 C0               	.db $28, $0A, $02, $C0
08314 28 0E 03 B8               	.db $28, $0E, $03, $B8
08318                           
08318                           MarioDream_SnoringFrameCounts:
08318 20                        	.db $20
08319 0A                        	.db $0A
0831A 0A                        	.db $0A
0831B 0A                        	.db $0A
0831C 0A                        	.db $0A
0831D 0A                        	.db $0A
0831E 0A                        	.db $0A
0831F 20                        	.db $20
08320 0A                        	.db $0A
08321 0A                        	.db $0A
08322 0A                        	.db $0A
08323 0A                        	.db $0A
08324 0A                        	.db $0A
08325 0A                        	.db $0A
08326                           
08326                           MarioDream_WakingFrameCounts:
08326 08                        	.db $08
08327 08                        	.db $08
08328 50                        	.db $50
08329 40                        	.db $40
0832A 30                        	.db $30
0832B 10                        	.db $10
0832C 10                        	.db $10
0832D                           
0832D                           MarioDream_SnoringFrames:
0832D 50                        	.db CHRBank_EndingBackground1
0832E 54                        	.db CHRBank_EndingBackground2
0832F 58                        	.db CHRBank_EndingBackground3
08330 5C                        	.db CHRBank_EndingBackground4
08331 60                        	.db CHRBank_EndingBackground5
08332 64                        	.db CHRBank_EndingBackground6
08333 68                        	.db CHRBank_EndingBackground7
08334 6C                        	.db CHRBank_EndingBackground8
08335 68                        	.db CHRBank_EndingBackground7
08336 64                        	.db CHRBank_EndingBackground6
08337 60                        	.db CHRBank_EndingBackground5
08338 5C                        	.db CHRBank_EndingBackground4
08339 58                        	.db CHRBank_EndingBackground3
0833A 54                        	.db CHRBank_EndingBackground2
0833B                           
0833B                           MarioDream_WakingFrames:
0833B 78                        	.db $78
0833C 74                        	.db $74
0833D 70                        	.db $70
0833E 7C                        	.db $7C
0833F 70                        	.db $70
08340 74                        	.db $74
08341 78                        	.db $78
08342                           
08342                           
08342                           MarioSleepingScene:
08342 20 14 80                  	JSR sub_BANKC_8014
08345                           
08345 A9 00                     	LDA #VMirror
08347 20 15 FE                  	JSR ChangeNametableMirroring
0834A                           
0834A 20 6F E6                  	JSR ClearNametablesAndSprites
0834D                           
0834D A9 40                     	LDA #Stack100_Menu
0834F 8D 00 01                  	STA StackArea
08352 20 33 80                  	JSR EnableNMI_BankC
08355                           
08355 20 1C 80                  	JSR sub_BANKC_801C
08358                           
08358 A9 09                     	LDA #9
0835A 85 11                     	STA ScreenUpdateIndex
0835C 20 1C 80                  	JSR sub_BANKC_801C
0835F                           
0835F A9 01                     	LDA #1
08361 85 11                     	STA ScreenUpdateIndex
08363 20 1C 80                  	JSR sub_BANKC_801C
08366                           
08366 A9 02                     	LDA #2
08368 85 11                     	STA ScreenUpdateIndex
0836A 20 1C 80                  	JSR sub_BANKC_801C
0836D                           
0836D A9 10                     	LDA #$10
0836F 85 18                     	STA ObjectXHi + 3
08371 A9 04                     	LDA #4
08373 85 14                     	STA PlayerXHi
08375                           
08375                           loc_BANKC_8375:
08375 A9 00                     	LDA #0
08377 85 15                     	STA ObjectXHi
08379 A9 0D                     	LDA #$D
0837B 85 16                     	STA ObjectXHi + 1
0837D A9 00                     	LDA #0
0837F 85 17                     	STA ObjectXHi + 2
08381 20 93 84                  	JSR sub_BANKC_8493
08384                           
08384 20 18 80                  	JSR sub_BANKC_8018
08387                           
08387                           loc_BANKC_8387:
08387 A4 15                     	LDY ObjectXHi
08389 B9 2D 83                  	LDA MarioDream_SnoringFrames, Y
0838C 8D F7 06                  	STA BackgroundCHR1
0838F 18                        	CLC
08390 69 02                     	ADC #$02
08392 8D F8 06                  	STA BackgroundCHR2
08395 B9 18 83                  	LDA MarioDream_SnoringFrameCounts, Y
08398 85 10                     	STA byte_RAM_10
0839A                           
0839A                           loc_BANKC_839A:
0839A C6 18                     	DEC ObjectXHi + 3
0839C 10 09                     	BPL loc_BANKC_83A7
0839E                           
0839E A9 10                     	LDA #$10
083A0 85 18                     	STA ObjectXHi + 3
083A2 E6 17                     	INC ObjectXHi + 2
083A4 20 93 84                  	JSR sub_BANKC_8493
083A7                           
083A7                           loc_BANKC_83A7:
083A7 20 1C 80                  	JSR sub_BANKC_801C
083AA                           
083AA C6 10                     	DEC byte_RAM_10
083AC 10 EC                     	BPL loc_BANKC_839A
083AE                           
083AE E6 15                     	INC ObjectXHi
083B0 C6 16                     	DEC ObjectXHi + 1
083B2 10 D3                     	BPL loc_BANKC_8387
083B4                           
083B4 C6 14                     	DEC PlayerXHi
083B6 30 03                     	BMI loc_BANKC_83BB
083B8                           
083B8 4C 75 83                  	JMP loc_BANKC_8375
083BB                           
083BB                           ; ---------------------------------------------------------------------------
083BB                           
083BB                           loc_BANKC_83BB:
083BB A9 03                     	LDA #3
083BD 85 11                     	STA ScreenUpdateIndex
083BF A9 F8                     	LDA #$F8
083C1 8D 00 02                  	STA SpriteDMAArea
083C4 8D 04 02                  	STA SpriteDMAArea + 4
083C7 8D 08 02                  	STA SpriteDMAArea + 8
083CA 8D 0C 02                  	STA SpriteDMAArea + $C
083CD 20 1C 80                  	JSR sub_BANKC_801C
083D0                           
083D0 A9 04                     	LDA #4
083D2 85 11                     	STA ScreenUpdateIndex
083D4 20 1C 80                  	JSR sub_BANKC_801C
083D7                           
083D7 A9 05                     	LDA #5
083D9 85 11                     	STA ScreenUpdateIndex
083DB 20 1C 80                  	JSR sub_BANKC_801C
083DE                           
083DE A9 06                     	LDA #6
083E0 85 11                     	STA ScreenUpdateIndex
083E2 20 1C 80                  	JSR sub_BANKC_801C
083E5                           
083E5 A9 07                     	LDA #7
083E7 85 11                     	STA ScreenUpdateIndex
083E9 20 1C 80                  	JSR sub_BANKC_801C
083EC                           
083EC A9 08                     	LDA #8
083EE 85 11                     	STA ScreenUpdateIndex
083F0 20 1C 80                  	JSR sub_BANKC_801C
083F3                           
083F3 A9 00                     	LDA #0
083F5 85 15                     	STA ObjectXHi
083F7 A9 06                     	LDA #6
083F9 85 16                     	STA ObjectXHi + 1
083FB A9 00                     	LDA #0
083FD 85 14                     	STA PlayerXHi
083FF 20 18 80                  	JSR sub_BANKC_8018
08402                           
08402                           loc_BANKC_8402:
08402 A4 15                     	LDY ObjectXHi
08404 B9 3B 83                  	LDA MarioDream_WakingFrames, Y
08407 8D F7 06                  	STA BackgroundCHR1
0840A 18                        	CLC
0840B 69 02                     	ADC #2
0840D 8D F8 06                  	STA BackgroundCHR2
08410 B9 26 83                  	LDA MarioDream_WakingFrameCounts, Y
08413 85 10                     	STA byte_RAM_10
08415                           
08415                           loc_BANKC_8415:
08415 20 1C 80                  	JSR sub_BANKC_801C
08418                           
08418 C6 10                     	DEC byte_RAM_10
0841A 10 F9                     	BPL loc_BANKC_8415
0841C                           
0841C E6 15                     	INC ObjectXHi
0841E C6 16                     	DEC ObjectXHi + 1
08420 10 E0                     	BPL loc_BANKC_8402
08422                           
08422 A9 10                     	LDA #$10
08424 85 18                     	STA ObjectXHi + 3
08426 A9 01                     	LDA #1
08428 85 14                     	STA PlayerXHi
0842A                           
0842A                           loc_BANKC_842A:
0842A A9 00                     	LDA #0
0842C 85 15                     	STA ObjectXHi
0842E A9 0D                     	LDA #$D
08430 85 16                     	STA ObjectXHi + 1
08432 20 18 80                  	JSR sub_BANKC_8018
08435                           
08435                           loc_BANKC_8435:
08435 A4 15                     	LDY ObjectXHi
08437 B9 2D 83                  	LDA MarioDream_SnoringFrames, Y
0843A 8D F7 06                  	STA BackgroundCHR1
0843D 18                        	CLC
0843E 69 02                     	ADC #2
08440                           
08440                           loc_BANKC_8440:
08440 8D F8 06                  	STA BackgroundCHR2
08443 B9 18 83                  	LDA MarioDream_SnoringFrameCounts, Y
08446 85 10                     	STA byte_RAM_10
08448                           
08448                           loc_BANKC_8448:
08448 20 1C 80                  	JSR sub_BANKC_801C
0844B                           
0844B C6 10                     	DEC byte_RAM_10
0844D 10 F9                     	BPL loc_BANKC_8448
0844F                           
0844F E6 15                     	INC ObjectXHi
08451                           
08451                           loc_BANKC_8451:
08451 C6 16                     	DEC ObjectXHi + 1
08453 10 E0                     	BPL loc_BANKC_8435
08455                           
08455 C6 14                     	DEC PlayerXHi
08457 30 03                     	BMI loc_BANKC_845C
08459                           
08459 4C 2A 84                  	JMP loc_BANKC_842A
0845C                           
0845C                           ; ---------------------------------------------------------------------------
0845C                           
0845C                           loc_BANKC_845C:
0845C 20 29 85                  	JSR sub_BANKC_84FB
0845F                           
0845F 20 1C 80                  	JSR sub_BANKC_801C
08462                           
08462                           loc_BANKC_8462:
08462 A9 00                     	LDA #0
08464 85 15                     	STA ObjectXHi
08466 A9 0D                     	LDA #$D
08468 85 16                     	STA ObjectXHi + 1
0846A 20 18 80                  	JSR sub_BANKC_8018
0846D                           
0846D                           loc_BANKC_846D:
0846D A4 15                     	LDY ObjectXHi
0846F B9 2D 83                  	LDA MarioDream_SnoringFrames, Y
08472 8D F7 06                  	STA BackgroundCHR1
08475 18                        	CLC
08476 69 02                     	ADC #2
08478 8D F8 06                  	STA BackgroundCHR2
0847B B9 18 83                  	LDA MarioDream_SnoringFrameCounts, Y
0847E 85 10                     	STA byte_RAM_10
08480                           
08480                           loc_BANKC_8480:
08480 20 E0 84                  	JSR loc_BANKC_84B2
08483                           
08483 20 1C 80                  	JSR sub_BANKC_801C
08486                           
08486 C6 10                     	DEC byte_RAM_10
08488 10 F6                     	BPL loc_BANKC_8480
0848A                           
0848A E6 15                     	INC ObjectXHi
0848C C6 16                     	DEC ObjectXHi + 1
0848E                           
0848E                           loc_BANKC_848E:
0848E 10 DD                     	BPL loc_BANKC_846D
08490                           
08490                           loc_BANKC_8490:
08490 4C 62 84                  	JMP loc_BANKC_8462
08493                           
08493                           ; =============== S U B R O U T I N E =======================================
08493                           
08493                           
08493                           sub_BANKC_8493:
08493 A0 0F                     	LDY #$F
08495 A5 17                     	LDA ObjectXHi + 2
08497 29 01                     	AND #1
08499 D0 1F                     	BNE loc_BANKC_84A5
0849B                           
0849B                           loc_BANKC_849B:
0849B                           IFDEF PLAYER_STUFF
0849B 98                        -   TYA
0849C 4A                            LSR
0849D 4A                            LSR
0849E AA                            TAX
0849F BD CF 84                      LDA CharLookupTable_Ordered_Dream, X  
084A2 2D E0 7D                      AND CharacterLock_Variable
084A5 F0 09                         BEQ +
084A7 A9 FF                         LDA #$FF 
084A9 99 10 02                  	STA SpriteDMAArea + $10, Y
084AC 88                            DEY
084AD 10 EC                         BPL -
084AF 60                            RTS 
084B0                           +
084B0                           ENDIF
084B0 B9 F8 82                  	LDA MarioDream_BubbleSprites, Y
084B3 99 00 02                  	STA SpriteDMAArea, Y
084B6 88                        	DEY
084B7 10 E2                     	BPL loc_BANKC_849B
084B9                           
084B9 60                        	RTS
084BA                           
084BA                           ; ---------------------------------------------------------------------------
084BA                           
084BA                           loc_BANKC_84A5:
084BA                           IFDEF PLAYER_STUFF
084BA 98                        -   TYA
084BB 4A                            LSR
084BC 4A                            LSR
084BD AA                            TAX
084BE BD CF 84                      LDA CharLookupTable_Ordered_Dream, X  
084C1 2D E0 7D                      AND CharacterLock_Variable
084C4 F0 0D                         BEQ +
084C6 A9 FF                         LDA #$FF 
084C8 99 10 02                  	STA SpriteDMAArea + $10, Y
084CB 88                            DEY
084CC 10 EC                         BPL -
084CE 60                            RTS 
084CF                           CharLookupTable_Ordered_Dream:
084CF 01                        	.db $01 ; Mio 
084D0 02                        	.db $02 ; Lug 
084D1 08                        	.db $08 ; Pch 
084D2 04                        	.db $04 ; Tod 
084D3                           +
084D3                           ENDIF
084D3 B9 08 83                  	LDA MarioDream_BubbleSprites2, Y
084D6 99 00 02                  	STA SpriteDMAArea, Y
084D9 88                        	DEY
084DA 10 DE                     	BPL loc_BANKC_84A5
084DC                           
084DC 60                        	RTS
084DD                           
084DD                           ; End of function sub_BANKC_8493
084DD                           
084DD                           ; ---------------------------------------------------------------------------
084DD                           CastRoll_PaletteFadeIn:
084DD 22                        	.db $22
084DE                           
084DE 32                        	.db $32
084DF 30                        	.db $30
084E0                           ; ---------------------------------------------------------------------------
084E0                           
084E0                           loc_BANKC_84B2:
084E0 E6 2E                     	INC ObjectXLo + 5
084E2 A5 2E                     	LDA ObjectXLo + 5
084E4 29 01                     	AND #1
084E6 D0 06                     	BNE loc_BANKC_84C0
084E8                           
084E8 C6 39                     	DEC ObjectYLo + 6
084EA C6 3A                     	DEC ObjectYLo + 7
084EC C6 3B                     	DEC ObjectYLo + 8
084EE                           
084EE                           loc_BANKC_84C0:
084EE A5 29                     	LDA ObjectXLo
084F0 20 A6 D9                  	JSR JumpToTableAfterJump
084F3                           
084F3                           ; ---------------------------------------------------------------------------
084F3 C1 85                     	.dw loc_BANKC_8593
084F5 04 86                     	.dw loc_BANKC_85D6
084F7 15 86                     	.dw loc_BANKC_85E7
084F9 4A 86                     	.dw loc_BANKC_861C
084FB C6 88                     	.dw loc_BANKC_8898
084FD 05 89                     	.dw loc_BANKC_88D7
084FF E4 89                     	.dw loc_BANKC_89B6
08501 32 8A                     	.dw loc_BANKC_8A04
08503 65 8A                     	.dw loc_BANKC_8A37
08505 80 8A                     	.dw loc_BANKC_8A52
08507 B0 8A                     	.dw loc_BANKC_8A82
08509                           ; ---------------------------------------------------------------------------
08509 60                        	RTS
0850A                           
0850A                           ; ---------------------------------------------------------------------------
0850A                           CastRoll_CASTText:
0850A 60 D4 00 28               	.db $60,$D4,$00,$28
0850E 60 D0 00 38               	.db $60,$D0,$00,$38 ; 4
08512 60 F4 00 48               	.db $60,$F4,$00,$48 ; 8
08516 60 F6 00 58               	.db $60,$F6,$00,$58 ; $C
0851A                           
0851A                           ; =============== S U B R O U T I N E =======================================
0851A                           
0851A                           sub_BANKC_84EC:
0851A A4 2B                     	LDY ObjectXLo + 2
0851C B9 53 8B                  	LDA CastRoll_SpritePointersLo, Y
0851F 85 2F                     	STA ObjectXLo + 6
08521 B9 36 8B                  	LDA CastRoll_SpritePointersHi, Y
08524 85 30                     	STA ObjectXLo + 7
08526 E6 2B                     	INC ObjectXLo + 2
08528 60                        	RTS
08529                           
08529                           ; End of function sub_BANKC_84EC
08529                           
08529                           ; =============== S U B R O U T I N E =======================================
08529                           
08529                           sub_BANKC_84FB:
08529 A0 4C                     	LDY #CHRBank_EndingCast1
0852B 8C F9 06                  	STY SpriteCHR1
0852E                           
0852E                           loc_BANKC_8500:
0852E C8                        	INY
0852F 8C FA 06                  	STY SpriteCHR2
08532 C8                        	INY
08533 8C FB 06                  	STY SpriteCHR3
08536 C8                        	INY
08537 8C FC 06                  	STY SpriteCHR4
0853A A2 07                     	LDX #$07
0853C A9 20                     	LDA #$20
0853E 85 1E                     	STA PlayerYHi
08540 A0 00                     	LDY #$00
08542                           
08542                           loc_BANKC_8514:
08542 A9 0F                     	LDA #$0F
08544 99 00 02                  	STA SpriteDMAArea, Y
08547 C8                        	INY
08548 A9 3E                     	LDA #$3E
0854A 99 00 02                  	STA SpriteDMAArea, Y
0854D C8                        	INY
0854E A9 00                     	LDA #$00
08550 99 00 02                  	STA SpriteDMAArea, Y
08553 C8                        	INY
08554 A5 1E                     	LDA PlayerYHi
08556 99 00 02                  	STA SpriteDMAArea, Y
08559 C8                        	INY
0855A 18                        	CLC
0855B 69 08                     	ADC #$08
0855D 85 1E                     	STA PlayerYHi
0855F CA                        	DEX
08560 10 E0                     	BPL loc_BANKC_8514
08562                           
08562 A2 07                     	LDX #$07
08564 A9 20                     	LDA #$20
08566 85 1E                     	STA PlayerYHi
08568                           
08568                           loc_BANKC_853A:
08568 A9 D0                     	LDA #$D0
0856A 99 00 02                  	STA SpriteDMAArea, Y
0856D C8                        	INY
0856E A9 3E                     	LDA #$3E
08570 99 00 02                  	STA SpriteDMAArea, Y
08573 C8                        	INY
08574 A9 00                     	LDA #$00
08576 99 00 02                  	STA SpriteDMAArea, Y
08579 C8                        	INY
0857A A5 1E                     	LDA PlayerYHi
0857C 99 00 02                  	STA SpriteDMAArea, Y
0857F C8                        	INY
08580 18                        	CLC
08581 69 08                     	ADC #$08
08583 85 1E                     	STA PlayerYHi
08585 CA                        	DEX
08586 10 E0                     	BPL loc_BANKC_853A
08588                           
08588 A2 0F                     	LDX #$0F
0858A                           
0858A                           loc_BANKC_855C:
0858A BD 0A 85                  	LDA CastRoll_CASTText, X
0858D 9D 40 02                  	STA SpriteDMAArea + $40, X
08590 CA                        	DEX
08591 10 F7                     	BPL loc_BANKC_855C
08593                           
08593 A9 3F                     	LDA #$3F
08595 8D 01 03                  	STA PPUBuffer_301
08598 A9 11                     	LDA #$11
0859A 8D 02 03                  	STA PPUBuffer_301 + 1
0859D A9 01                     	LDA #$01
0859F 8D 03 03                  	STA PPUBuffer_301 + 2
085A2 A9 12                     	LDA #$12
085A4 8D 04 03                  	STA PPUBuffer_301 + 3
085A7 A9 00                     	LDA #$00
085A9 8D 05 03                  	STA PPUBuffer_301 + 4
085AC A9 10                     	LDA #$10
085AE 85 28                     	STA PlayerXLo
085B0 A9 00                     	LDA #$00
085B2 85 29                     	STA ObjectXLo
085B4 85 2A                     	STA ObjectXLo + 1
085B6 A0 40                     	LDY #$40
085B8                           
085B8                           loc_BANKC_858A:
085B8 A9 27                     	LDA #EnemyState_27 ; @TODO what is this
085BA 99 50 00                  	STA EnemyState - 1, Y
085BD 88                        	DEY
085BE 10 F8                     	BPL loc_BANKC_858A
085C0                           
085C0 60                        	RTS
085C1                           
085C1                           ; End of function sub_BANKC_84FB
085C1                           
085C1                           ; ---------------------------------------------------------------------------
085C1                           
085C1                           loc_BANKC_8593:
085C1 C6 28                     	DEC PlayerXLo
085C3 10 3E                     	BPL locret_BANKC_85D5
085C5                           
085C5 A9 10                     	LDA #$10
085C7 85 28                     	STA PlayerXLo
085C9 A9 3F                     	LDA #$3F
085CB 8D 01 03                  	STA PPUBuffer_301
085CE A9 11                     	LDA #$11
085D0 8D 02 03                  	STA PPUBuffer_301 + 1
085D3 A9 01                     	LDA #$01
085D5 8D 03 03                  	STA PPUBuffer_301 + 2
085D8 A4 2A                     	LDY ObjectXLo + 1
085DA B9 DD 84                  	LDA CastRoll_PaletteFadeIn, Y
085DD 8D 04 03                  	STA PPUBuffer_301 + 3
085E0                           
085E0                           loc_BANKC_85B2:
085E0 A9 00                     	LDA #$00
085E2 8D 05 03                  	STA PPUBuffer_301 + 4
085E5 E6 2A                     	INC ObjectXLo + 1
085E7 A5 2A                     	LDA ObjectXLo + 1
085E9 C9 03                     	CMP #$03
085EB D0 16                     	BNE locret_BANKC_85D5
085ED                           
085ED E6 29                     	INC ObjectXLo
085EF A9 80                     	LDA #$80
085F1 85 28                     	STA PlayerXLo
085F3 A9 60                     	LDA #$60
085F5 85 1F                     	STA ObjectYHi
085F7 A9 01                     	LDA #$01
085F9 85 35                     	STA ObjectYLo + 2
085FB 85 38                     	STA ObjectYLo + 5
085FD A9 00                     	LDA #$00
085FF 85 36                     	STA ObjectYLo + 3
08601 85 37                     	STA ObjectYLo + 4
08603                           
08603                           locret_BANKC_85D5:
08603 60                        	RTS
08604                           
08604                           ; ---------------------------------------------------------------------------
08604                           
08604                           loc_BANKC_85D6:
08604 C6 28                     	DEC PlayerXLo
08606 10 0C                     	BPL locret_BANKC_85E6
08608                           
08608 E6 29                     	INC ObjectXLo
0860A A9 00                     	LDA #0
0860C 85 2B                     	STA ObjectXLo + 2
0860E 85 3F                     	STA ObjectXVelocity + 2
08610 A9 01                     	LDA #1
08612 85 3A                     	STA ObjectYLo + 7
08614                           
08614                           locret_BANKC_85E6:
08614 60                        	RTS
08615                           
08615                           ; ---------------------------------------------------------------------------
08615                           
08615                           loc_BANKC_85E7:
08615 A5 2E                     	LDA ObjectXLo + 5
08617 29 01                     	AND #1
08619                           
08619                           loc_BANKC_85EB:
08619 F0 2F                     	BEQ loc_BANKC_861C
0861B                           
0861B A5 1F                     	LDA ObjectYHi
0861D 38                        	SEC
0861E E9 01                     	SBC #1
08620 85 1F                     	STA ObjectYHi
08622 8D 40 02                  	STA SpriteDMAArea + $40
08625 8D 44 02                  	STA SpriteDMAArea + $44
08628 8D 48 02                  	STA SpriteDMAArea + $48
0862B 8D 4C 02                  	STA SpriteDMAArea + $4C
0862E A5 1F                     	LDA ObjectYHi
08630 C9 10                     	CMP #$10
08632 D0 16                     	BNE loc_BANKC_861C
08634                           
08634 A9 F8                     	LDA #$F8
08636 8D 40 02                  	STA SpriteDMAArea + $40
08639 8D 44 02                  	STA SpriteDMAArea + $44
0863C 8D 48 02                  	STA SpriteDMAArea + $48
0863F 8D 4A 02                  	STA SpriteDMAArea + $4A
08642 E6 29                     	INC ObjectXLo
08644 A9 00                     	LDA #0
08646 85 38                     	STA ObjectYLo + 5
08648 85 35                     	STA ObjectYLo + 2
0864A                           
0864A                           loc_BANKC_861C:
0864A A5 35                     	LDA ObjectYLo + 2
0864C D0 21                     	BNE loc_BANKC_8641
0864E                           
0864E A5 39                     	LDA ObjectYLo + 6
08650 D0 1D                     	BNE loc_BANKC_8641
08652                           
08652 20 1A 85                  	JSR sub_BANKC_84EC
08655                           
08655 A0 3F                     	LDY #$3F
08657                           
08657                           loc_BANKC_8629:
08657 B1 2F                     	LDA (ObjectXLo+6), Y
08659 99 40 02                  	STA SpriteDMAArea + $40, Y
0865C 88                        	DEY
0865D 10 F8                     	BPL loc_BANKC_8629
0865F                           
0865F A9 01                     	LDA #1
08661 85 35                     	STA ObjectYLo + 2
08663 A9 D0                     	LDA #$D0
08665 85 1F                     	STA ObjectYHi
08667 A9 E0                     	LDA #$E0
08669 85 20                     	STA ObjectYHi + 1
0866B A9 F8                     	LDA #$F8
0866D 85 21                     	STA ObjectYHi + 2
0866F                           
0866F                           loc_BANKC_8641:
0866F A5 36                     	LDA ObjectYLo + 3
08671 D0 21                     	BNE loc_BANKC_8666
08673                           
08673 A5 3A                     	LDA ObjectYLo + 7
08675 D0 1D                     	BNE loc_BANKC_8666
08677                           
08677 20 1A 85                  	JSR sub_BANKC_84EC
0867A                           
0867A A0 3F                     	LDY #$3F
0867C                           
0867C                           loc_BANKC_864E:
0867C B1 2F                     	LDA (ObjectXLo+6), Y
0867E 99 80 02                  	STA SpriteDMAArea + $80, Y
08681 88                        	DEY
08682 10 F8                     	BPL loc_BANKC_864E
08684                           
08684 A9 01                     	LDA #1
08686 85 36                     	STA ObjectYLo + 3
08688 A9 D0                     	LDA #$D0
0868A 85 22                     	STA ObjectYHi + 3
0868C A9 E0                     	LDA #$E0
0868E 85 23                     	STA ObjectYHi + 4
08690 A9 F8                     	LDA #$F8
08692 85 24                     	STA ObjectYHi + 5
08694                           
08694                           loc_BANKC_8666:
08694 A5 37                     	LDA ObjectYLo + 4
08696 D0 29                     	BNE loc_BANKC_8693
08698                           
08698 A5 3B                     	LDA ObjectYLo + 8
0869A D0 25                     	BNE loc_BANKC_8693
0869C                           
0869C 20 1A 85                  	JSR sub_BANKC_84EC
0869F                           
0869F A0 3F                     	LDY #$3F
086A1                           
086A1                           loc_BANKC_8673:
086A1 B1 2F                     	LDA (ObjectXLo+6), Y
086A3 99 C0 02                  	STA SpriteDMAArea + $C0, Y
086A6 88                        	DEY
086A7 10 F8                     	BPL loc_BANKC_8673
086A9                           
086A9 A9 01                     	LDA #1
086AB 85 37                     	STA ObjectYLo + 4
086AD A9 D0                     	LDA #$D0
086AF 85 25                     	STA ObjectYHi + 6
086B1 A9 E0                     	LDA #$E0
086B3 85 26                     	STA ObjectYHi + 7
086B5 A0 F8                     	LDY #$F8
086B7 A5 2B                     	LDA ObjectXLo + 2
086B9 C9 1D                     	CMP #$1D
086BB D0 02                     	BNE loc_BANKC_8691
086BD                           
086BD A0 F0                     	LDY #$F0
086BF                           
086BF                           loc_BANKC_8691:
086BF 84 27                     	STY ObjectYHi + 8
086C1                           
086C1                           loc_BANKC_8693:
086C1 A5 38                     	LDA ObjectYLo + 5
086C3 F0 03                     	BEQ loc_BANKC_869A
086C5                           
086C5 4C 68 87                  	JMP loc_BANKC_873A
086C8                           
086C8                           ; ---------------------------------------------------------------------------
086C8                           
086C8                           loc_BANKC_869A:
086C8 A5 2E                     	LDA ObjectXLo + 5
086CA 29 01                     	AND #1
086CC D0 03                     	BNE loc_BANKC_86A3
086CE                           
086CE 4C 68 87                  	JMP loc_BANKC_873A
086D1                           
086D1                           ; ---------------------------------------------------------------------------
086D1                           
086D1                           loc_BANKC_86A3:
086D1 AD 40 02                  	LDA SpriteDMAArea + $40
086D4 C9 F8                     	CMP #$F8
086D6 F0 19                     	BEQ loc_BANKC_86C3
086D8                           
086D8 A5 1F                     	LDA ObjectYHi
086DA 38                        	SEC
086DB E9 01                     	SBC #1
086DD C9 10                     	CMP #$10
086DF D0 02                     	BNE loc_BANKC_86B5
086E1                           
086E1 A9 F8                     	LDA #$F8
086E3                           
086E3                           loc_BANKC_86B5:
086E3 85 1F                     	STA ObjectYHi
086E5 8D 40 02                  	STA SpriteDMAArea + $40
086E8 8D 44 02                  	STA SpriteDMAArea + $44
086EB 8D 48 02                  	STA SpriteDMAArea + $48
086EE 8D 4C 02                  	STA SpriteDMAArea + $4C
086F1                           
086F1                           loc_BANKC_86C3:
086F1 AD 50 02                  	LDA SpriteDMAArea + $50
086F4 C9 F8                     	CMP #$F8
086F6 F0 28                     	BEQ loc_BANKC_86F2
086F8                           
086F8 C6 20                     	DEC ObjectYHi + 1
086FA C9 F9                     	CMP #$F9
086FC D0 06                     	BNE loc_BANKC_86D6
086FE                           
086FE A5 20                     	LDA ObjectYHi + 1
08700 C9 D0                     	CMP #$D0
08702 D0 1C                     	BNE loc_BANKC_86F2
08704                           
08704                           loc_BANKC_86D6:
08704 A5 20                     	LDA ObjectYHi + 1
08706 C9 10                     	CMP #$10
08708 D0 0A                     	BNE loc_BANKC_86E6
0870A                           
0870A A5 2B                     	LDA ObjectXLo + 2
0870C C9 FF                     	CMP #$FF
0870E D0 02                     	BNE loc_BANKC_86E4
08710                           
08710 E6 29                     	INC ObjectXLo
08712                           
08712                           loc_BANKC_86E4:
08712 A9 F8                     	LDA #$F8
08714                           
08714                           loc_BANKC_86E6:
08714 8D 50 02                  	STA SpriteDMAArea + $50
08717 8D 54 02                  	STA SpriteDMAArea + $54
0871A 8D 58 02                  	STA SpriteDMAArea + $58
0871D 8D 5C 02                  	STA SpriteDMAArea + $5C
08720                           
08720                           loc_BANKC_86F2:
08720 AD 60 02                  	LDA SpriteDMAArea + $60
08723 C9 F8                     	CMP #$F8
08725 F0 41                     	BEQ loc_BANKC_873A
08727                           
08727 C6 21                     	DEC ObjectYHi + 2
08729 C9 F9                     	CMP #$F9
0872B D0 0D                     	BNE loc_BANKC_870C
0872D                           
0872D A5 21                     	LDA ObjectYHi + 2
0872F C9 D0                     	CMP #$D0
08731 D0 35                     	BNE loc_BANKC_873A
08733                           
08733 A4 2B                     	LDY ObjectXLo + 2
08735 B9 50 00                  	LDA EnemyState - 1, Y
08738 85 3A                     	STA ObjectYLo + 7
0873A                           
0873A                           loc_BANKC_870C:
0873A A5 21                     	LDA ObjectYHi + 2
0873C C9 10                     	CMP #$10
0873E D0 10                     	BNE loc_BANKC_8722
08740                           
08740 A9 00                     	LDA #0
08742 85 35                     	STA ObjectYLo + 2
08744 A5 2B                     	LDA ObjectXLo + 2
08746 C9 FF                     	CMP #$FF
08748 D0 04                     	BNE loc_BANKC_8720
0874A                           
0874A A9 FF                     	LDA #$FF
0874C 85 35                     	STA ObjectYLo + 2
0874E                           
0874E                           loc_BANKC_8720:
0874E A9 F8                     	LDA #$F8
08750                           
08750                           loc_BANKC_8722:
08750 8D 60 02                  	STA SpriteDMAArea + $60
08753 8D 64 02                  	STA SpriteDMAArea + $64
08756 8D 68 02                  	STA SpriteDMAArea + $68
08759 8D 6C 02                  	STA SpriteDMAArea + $6C
0875C 8D 70 02                  	STA SpriteDMAArea + $70
0875F 8D 74 02                  	STA SpriteDMAArea + $74
08762 8D 78 02                  	STA SpriteDMAArea + $78
08765 8D 7C 02                  	STA SpriteDMAArea + $7C
08768                           
08768                           loc_BANKC_873A:
08768 A5 2E                     	LDA ObjectXLo + 5
0876A 29 01                     	AND #1
0876C D0 03                     	BNE loc_BANKC_8743
0876E                           
0876E 4C 00 88                  	JMP loc_BANKC_87D2
08771                           
08771                           ; ---------------------------------------------------------------------------
08771                           
08771                           loc_BANKC_8743:
08771 AD 80 02                  	LDA SpriteDMAArea + $80
08774 C9 F8                     	CMP #$F8
08776 F0 19                     	BEQ loc_BANKC_8763
08778                           
08778 A5 22                     	LDA ObjectYHi + 3
0877A                           
0877A                           loc_BANKC_874C:
0877A 38                        	SEC
0877B E9 01                     	SBC #1
0877D C9 10                     	CMP #$10
0877F D0 02                     	BNE loc_BANKC_8755
08781                           
08781 A9 F8                     	LDA #$F8
08783                           
08783                           loc_BANKC_8755:
08783 85 22                     	STA ObjectYHi + 3
08785 8D 80 02                  	STA SpriteDMAArea + $80
08788 8D 84 02                  	STA SpriteDMAArea + $84
0878B 8D 88 02                  	STA SpriteDMAArea + $88
0878E 8D 8C 02                  	STA SpriteDMAArea + $8C
08791                           
08791                           loc_BANKC_8763:
08791 AD 90 02                  	LDA SpriteDMAArea + $90
08794 C9 F8                     	CMP #$F8
08796 F0 20                     	BEQ loc_BANKC_878A
08798                           
08798 C6 23                     	DEC ObjectYHi + 4
0879A C9 F9                     	CMP #$F9
0879C D0 06                     	BNE loc_BANKC_8776
0879E                           
0879E A5 23                     	LDA ObjectYHi + 4
087A0 C9 D0                     	CMP #$D0
087A2 D0 14                     	BNE loc_BANKC_878A
087A4                           
087A4                           loc_BANKC_8776:
087A4 A5 23                     	LDA ObjectYHi + 4
087A6 C9 10                     	CMP #$10
087A8 D0 02                     	BNE loc_BANKC_877E
087AA                           
087AA A9 F8                     	LDA #$F8
087AC                           
087AC                           loc_BANKC_877E:
087AC 8D 90 02                  	STA SpriteDMAArea + $90
087AF 8D 94 02                  	STA SpriteDMAArea + $94
087B2                           
087B2                           loc_BANKC_8784:
087B2 8D 98 02                  	STA SpriteDMAArea + $98
087B5 8D 9C 02                  	STA SpriteDMAArea + $9C
087B8                           
087B8                           loc_BANKC_878A:
087B8 AD A0 02                  	LDA SpriteDMAArea + $A0
087BB C9 F8                     	CMP #$F8
087BD F0 41                     	BEQ loc_BANKC_87D2
087BF                           
087BF C6 24                     	DEC ObjectYHi + 5
087C1 C9 F9                     	CMP #$F9
087C3 D0 0D                     	BNE loc_BANKC_87A4
087C5                           
087C5 A5 24                     	LDA ObjectYHi + 5
087C7 C9 D0                     	CMP #$D0
087C9 D0 35                     	BNE loc_BANKC_87D2
087CB                           
087CB A4 2B                     	LDY ObjectXLo + 2
087CD B9 50 00                  	LDA EnemyState - 1, Y
087D0 85 3B                     	STA ObjectYLo + 8
087D2                           
087D2                           loc_BANKC_87A4:
087D2 A5 24                     	LDA ObjectYHi + 5
087D4 C9 10                     	CMP #$10
087D6 D0 10                     	BNE loc_BANKC_87BA
087D8                           
087D8                           loc_BANKC_87AA:
087D8 A9 00                     	LDA #0
087DA 85 36                     	STA ObjectYLo + 3
087DC A5 2B                     	LDA ObjectXLo + 2
087DE C9 FF                     	CMP #$FF
087E0 D0 04                     	BNE loc_BANKC_87B8
087E2                           
087E2 A9 FF                     	LDA #$FF
087E4 85 36                     	STA ObjectYLo + 3
087E6                           
087E6                           loc_BANKC_87B8:
087E6 A9 F8                     	LDA #$F8
087E8                           
087E8                           loc_BANKC_87BA:
087E8 8D A0 02                  	STA SpriteDMAArea + $A0
087EB 8D A4 02                  	STA SpriteDMAArea + $A4
087EE 8D A8 02                  	STA SpriteDMAArea + $A8
087F1 8D AC 02                  	STA SpriteDMAArea + $AC
087F4 8D B0 02                  	STA SpriteDMAArea + $B0
087F7 8D B4 02                  	STA SpriteDMAArea + $B4
087FA 8D B8 02                  	STA SpriteDMAArea + $B8
087FD 8D BC 02                  	STA SpriteDMAArea + $BC
08800                           
08800                           loc_BANKC_87D2:
08800 A5 2E                     	LDA ObjectXLo + 5
08802 29 01                     	AND #1
08804 D0 03                     	BNE loc_BANKC_87DB
08806                           
08806 4C C5 88                  	JMP locret_BANKC_8897
08809                           
08809                           ; ---------------------------------------------------------------------------
08809                           
08809                           loc_BANKC_87DB:
08809 AD C0 02                  	LDA SpriteDMAArea + $C0
0880C C9 F8                     	CMP #$F8
0880E F0 19                     	BEQ loc_BANKC_87FB
08810                           
08810 A5 25                     	LDA ObjectYHi + 6
08812 38                        	SEC
08813 E9 01                     	SBC #1
08815 C9 10                     	CMP #$10
08817 D0 02                     	BNE loc_BANKC_87ED
08819                           
08819 A9 F8                     	LDA #$F8
0881B                           
0881B                           loc_BANKC_87ED:
0881B 85 25                     	STA ObjectYHi + 6
0881D 8D C0 02                  	STA SpriteDMAArea + $C0
08820 8D C4 02                  	STA SpriteDMAArea + $C4
08823 8D C8 02                  	STA SpriteDMAArea + $C8
08826 8D CC 02                  	STA SpriteDMAArea + $CC
08829                           
08829                           loc_BANKC_87FB:
08829 AD D0 02                  	LDA SpriteDMAArea + $D0
0882C C9 F8                     	CMP #$F8
0882E F0 20                     	BEQ loc_BANKC_8822
08830                           
08830 C6 26                     	DEC ObjectYHi + 7
08832 C9 F9                     	CMP #$F9
08834 D0 06                     	BNE loc_BANKC_880E
08836                           
08836 A5 26                     	LDA ObjectYHi + 7
08838 C9 D0                     	CMP #$D0
0883A D0 14                     	BNE loc_BANKC_8822
0883C                           
0883C                           loc_BANKC_880E:
0883C A5 26                     	LDA ObjectYHi + 7
0883E C9 10                     	CMP #$10
08840 D0 02                     	BNE loc_BANKC_8816
08842                           
08842 A9 F8                     	LDA #$F8
08844                           
08844                           loc_BANKC_8816:
08844 8D D0 02                  	STA SpriteDMAArea + $D0
08847 8D D4 02                  	STA SpriteDMAArea + $D4
0884A 8D D8 02                  	STA SpriteDMAArea + $D8
0884D 8D DC 02                  	STA SpriteDMAArea + $DC
08850                           
08850                           loc_BANKC_8822:
08850 AD E0 02                  	LDA SpriteDMAArea + $E0
08853 C9 F8                     	CMP #$F8
08855 F0 6E                     	BEQ locret_BANKC_8897
08857                           
08857 C6 27                     	DEC ObjectYHi + 8
08859 C9 F9                     	CMP #$F9
0885B D0 0D                     	BNE loc_BANKC_883C
0885D                           
0885D A5 27                     	LDA ObjectYHi + 8
0885F C9 D0                     	CMP #$D0
08861 D0 62                     	BNE locret_BANKC_8897
08863                           
08863 A4 2B                     	LDY ObjectXLo + 2
08865 B9 50 00                  	LDA EnemyState - 1, Y
08868 85 39                     	STA ObjectYLo + 6
0886A                           
0886A                           loc_BANKC_883C:
0886A A5 2B                     	LDA ObjectXLo + 2
0886C C9 1D                     	CMP #$1D
0886E D0 0A                     	BNE loc_BANKC_884C
08870                           
08870 A5 27                     	LDA ObjectYHi + 8
08872 C9 B8                     	CMP #$B8
08874 D0 04                     	BNE loc_BANKC_884C
08876                           
08876 A9 01                     	LDA #1
08878 85 3F                     	STA ObjectXVelocity + 2
0887A                           
0887A                           loc_BANKC_884C:
0887A A5 27                     	LDA ObjectYHi + 8
0887C C9 10                     	CMP #$10
0887E D0 10                     	BNE loc_BANKC_8862
08880                           
08880 A9 00                     	LDA #0
08882 85 37                     	STA ObjectYLo + 4
08884 A5 2B                     	LDA ObjectXLo + 2
08886 C9 FF                     	CMP #$FF
08888 D0 04                     	BNE loc_BANKC_8860
0888A                           
0888A A9 FF                     	LDA #$FF
0888C 85 37                     	STA ObjectYLo + 4
0888E                           
0888E                           loc_BANKC_8860:
0888E A9 F8                     	LDA #$F8
08890                           
08890                           loc_BANKC_8862:
08890 8D E0 02                  	STA SpriteDMAArea + $E0
08893 8D E4 02                  	STA SpriteDMAArea + $E4
08896 8D E8 02                  	STA SpriteDMAArea + $E8
08899 8D EC 02                  	STA SpriteDMAArea + $EC
0889C 8D F0 02                  	STA SpriteDMAArea + $F0
0889F 8D F4 02                  	STA SpriteDMAArea + $F4
088A2 8D F8 02                  	STA SpriteDMAArea + $F8
088A5 8D FC 02                  	STA SpriteDMAArea + $FC
088A8 A5 3F                     	LDA ObjectXVelocity + 2
088AA F0 19                     	BEQ locret_BANKC_8897
088AC                           
088AC A0 1F                     	LDY #$1F
088AE                           
088AE                           loc_BANKC_8880:
088AE B9 B0 92                  	LDA CastRoll_TriclydeText, Y
088B1 99 40 02                  	STA SpriteDMAArea + $40, Y
088B4 88                        	DEY
088B5 10 F7                     	BPL loc_BANKC_8880
088B7                           
088B7 A9 D0                     	LDA #$D0
088B9 85 1F                     	STA ObjectYHi
088BB 85 20                     	STA ObjectYHi + 1
088BD A9 00                     	LDA #0
088BF 85 3F                     	STA ObjectXVelocity + 2
088C1                           
088C1                           loc_BANKC_8893:
088C1 A9 FF                     	LDA #$FF
088C3 85 2B                     	STA ObjectXLo + 2
088C5                           
088C5                           locret_BANKC_8897:
088C5 60                        	RTS
088C6                           
088C6                           ; ---------------------------------------------------------------------------
088C6                           
088C6                           loc_BANKC_8898:
088C6 A0 48                     	LDY #$48
088C8 8C F9 06                  	STY SpriteCHR1
088CB C8                        	INY
088CC 8C FA 06                  	STY SpriteCHR2
088CF C8                        	INY
088D0 8C FB 06                  	STY SpriteCHR3
088D3 C8                        	INY
088D4 8C FC 06                  	STY SpriteCHR4
088D7 A0 5B                     	LDY #$5B
088D9                           
088D9                           loc_BANKC_88AB:
088D9 B9 D0 92                  	LDA CastRoll_Wart, Y
088DC 99 40 02                  	STA SpriteDMAArea + $40, Y
088DF 88                        	DEY
088E0 10 F7                     	BPL loc_BANKC_88AB
088E2                           
088E2 E6 29                     	INC ObjectXLo
088E4 A0 00                     	LDY #0
088E6 A2 0F                     	LDX #$F
088E8 A9 C0                     	LDA #$C0
088EA                           
088EA                           loc_BANKC_88BC:
088EA 99 01 02                  	STA SpriteDMAArea + 1, Y
088ED C8                        	INY
088EE C8                        	INY
088EF C8                        	INY
088F0 C8                        	INY
088F1 CA                        	DEX
088F2 10 F6                     	BPL loc_BANKC_88BC
088F4                           
088F4 A9 D0                     	LDA #$D0
088F6 85 1F                     	STA ObjectYHi
088F8 A9 E0                     	LDA #$E0
088FA 85 20                     	STA ObjectYHi + 1
088FC A9 F0                     	LDA #$F0
088FE 85 21                     	STA ObjectYHi + 2
08900 A9 08                     	LDA #8
08902 85 22                     	STA ObjectYHi + 3
08904 60                        	RTS
08905                           
08905                           ; ---------------------------------------------------------------------------
08905                           
08905                           loc_BANKC_88D7:
08905 A5 2E                     	LDA ObjectXLo + 5
08907 29 01                     	AND #1
08909 D0 03                     	BNE loc_BANKC_88E0
0890B                           
0890B 4C BB 89                  	JMP loc_BANKC_898D
0890E                           
0890E                           ; ---------------------------------------------------------------------------
0890E                           
0890E                           loc_BANKC_88E0:
0890E AD 40 02                  	LDA SpriteDMAArea + $40
08911 C9 F8                     	CMP #$F8
08913 F0 1F                     	BEQ loc_BANKC_8906
08915                           
08915 A5 1F                     	LDA ObjectYHi
08917 38                        	SEC
08918 E9 01                     	SBC #1
0891A C9 50                     	CMP #$50
0891C D0 05                     	BNE loc_BANKC_88F5
0891E                           
0891E E6 29                     	INC ObjectXLo
08920 4C BB 89                  	JMP loc_BANKC_898D
08923                           
08923                           ; ---------------------------------------------------------------------------
08923                           
08923                           loc_BANKC_88F5:
08923 85 1F                     	STA ObjectYHi
08925 8D 40 02                  	STA SpriteDMAArea + $40
08928 8D 44 02                  	STA SpriteDMAArea + $44
0892B 8D 48 02                  	STA SpriteDMAArea + $48
0892E 8D 4C 02                  	STA SpriteDMAArea + $4C
08931 8D 50 02                  	STA SpriteDMAArea + $50
08934                           
08934                           loc_BANKC_8906:
08934 AD 54 02                  	LDA SpriteDMAArea + $54
08937 C9 F8                     	CMP #$F8
08939 F0 23                     	BEQ loc_BANKC_8930
0893B                           
0893B C6 20                     	DEC ObjectYHi + 1
0893D C9 F9                     	CMP #$F9
0893F D0 06                     	BNE loc_BANKC_8919
08941                           
08941 A5 20                     	LDA ObjectYHi + 1
08943 C9 D0                     	CMP #$D0
08945 D0 17                     	BNE loc_BANKC_8930
08947                           
08947                           loc_BANKC_8919:
08947 A5 20                     	LDA ObjectYHi + 1
08949 C9 10                     	CMP #$10
0894B D0 02                     	BNE loc_BANKC_8921
0894D                           
0894D A9 F8                     	LDA #$F8
0894F                           
0894F                           loc_BANKC_8921:
0894F 8D 54 02                  	STA SpriteDMAArea + $54
08952 8D 58 02                  	STA SpriteDMAArea + $58
08955 8D 5C 02                  	STA SpriteDMAArea + $5C
08958 8D 60 02                  	STA SpriteDMAArea + $60
0895B 8D 64 02                  	STA SpriteDMAArea + $64
0895E                           
0895E                           loc_BANKC_8930:
0895E AD 68 02                  	LDA SpriteDMAArea + $68
08961 C9 F8                     	CMP #$F8
08963 F0 23                     	BEQ loc_BANKC_895A
08965                           
08965 C6 21                     	DEC ObjectYHi + 2
08967 C9 F9                     	CMP #$F9
08969 D0 06                     	BNE loc_BANKC_8943
0896B                           
0896B A5 21                     	LDA ObjectYHi + 2
0896D C9 D0                     	CMP #$D0
0896F D0 17                     	BNE loc_BANKC_895A
08971                           
08971                           loc_BANKC_8943:
08971 A5 21                     	LDA ObjectYHi + 2
08973 C9 10                     	CMP #$10
08975 D0 02                     	BNE loc_BANKC_894B
08977                           
08977 A9 F8                     	LDA #$F8
08979                           
08979                           loc_BANKC_894B:
08979 8D 68 02                  	STA SpriteDMAArea + $68
0897C 8D 6C 02                  	STA SpriteDMAArea + $6C
0897F 8D 70 02                  	STA SpriteDMAArea + $70
08982 8D 74 02                  	STA SpriteDMAArea + $74
08985 8D 78 02                  	STA SpriteDMAArea + $78
08988                           
08988                           loc_BANKC_895A:
08988 AD 7C 02                  	LDA SpriteDMAArea + $7C
0898B C9 F8                     	CMP #$F8
0898D F0 2C                     	BEQ loc_BANKC_898D
0898F                           
0898F C6 22                     	DEC ObjectYHi + 3
08991 C9 F9                     	CMP #$F9
08993 D0 06                     	BNE loc_BANKC_896D
08995                           
08995 A5 22                     	LDA ObjectYHi + 3
08997 C9 D0                     	CMP #$D0
08999 D0 20                     	BNE loc_BANKC_898D
0899B                           
0899B                           loc_BANKC_896D:
0899B A5 22                     	LDA ObjectYHi + 3
0899D C9 10                     	CMP #$10
0899F D0 02                     	BNE loc_BANKC_8975
089A1                           
089A1 A9 F8                     	LDA #$F8
089A3                           
089A3                           loc_BANKC_8975:
089A3 8D 7C 02                  	STA SpriteDMAArea + $7C
089A6 8D 80 02                  	STA SpriteDMAArea + $80
089A9 8D 84 02                  	STA SpriteDMAArea + $84
089AC 8D 88 02                  	STA SpriteDMAArea + $88
089AF 8D 8C 02                  	STA SpriteDMAArea + $8C
089B2 8D 90 02                  	STA SpriteDMAArea + $90
089B5 8D 94 02                  	STA SpriteDMAArea + $94
089B8 8D 98 02                  	STA SpriteDMAArea + $98
089BB                           
089BB                           loc_BANKC_898D:
089BB A9 00                     	LDA #0
089BD 85 3D                     	STA ObjectXVelocity
089BF 85 3C                     	STA PlayerXVelocity
089C1 A9 0C                     	LDA #$C
089C3 85 3E                     	STA ObjectXVelocity + 1
089C5 60                        	RTS
089C6                           
089C6                           ; ---------------------------------------------------------------------------
089C6                           byte_BANKC_8998:
089C6 9E                        	.db $9E
089C7                           
089C7 A0                        	.db $A0
089C8 A2                        	.db $A2
089C9 A4                        	.db $A4
089CA 88                        	.db $88
089CB A6                        	.db $A6
089CC A8                        	.db $A8
089CD AA                        	.db $AA
089CE AC                        	.db $AC
089CF 92                        	.db $92
089D0 94                        	.db $94
089D1 96                        	.db $96
089D2 98                        	.db $98
089D3 9A                        	.db $9A
089D4 9C                        	.db $9C
089D5                           byte_BANKC_89A7:
089D5 AE                        	.db $AE
089D6                           
089D6 B0                        	.db $B0
089D7                           byte_BANKC_89A9:
089D7 B2                        	.db $B2
089D8 B4                        	.db $B4
089D9 BE                        	.db $BE
089DA B6                        	.db $B6
089DB B8                        	.db $B8
089DC BA                        	.db $BA
089DD BC                        	.db $BC
089DE 92                        	.db $92
089DF 94                        	.db $94
089E0 96                        	.db $96
089E1 98                        	.db $98
089E2 9A                        	.db $9A
089E3 9C                        	.db $9C
089E4                           ; ---------------------------------------------------------------------------
089E4                           
089E4                           loc_BANKC_89B6:
089E4 C6 3C                     	DEC PlayerXVelocity
089E6 10 46                     	BPL locret_BANKC_8A00
089E8                           
089E8 A9 08                     	LDA #8
089EA 85 3C                     	STA PlayerXVelocity
089EC C6 3E                     	DEC ObjectXVelocity + 1
089EE 10 0B                     	BPL loc_BANKC_89CD
089F0                           
089F0 E6 29                     	INC ObjectXLo
089F2 A9 00                     	LDA #0
089F4 85 28                     	STA PlayerXLo
089F6 85 2A                     	STA ObjectXLo + 1
089F8 4C 2E 8A                  	JMP locret_BANKC_8A00
089FB                           
089FB                           ; ---------------------------------------------------------------------------
089FB                           
089FB                           loc_BANKC_89CD:
089FB A5 3D                     	LDA ObjectXVelocity
089FD 29 01                     	AND #1
089FF D0 18                     	BNE loc_BANKC_89EB
08A01                           
08A01 A0 00                     	LDY #0
08A03 A2 00                     	LDX #0
08A05                           
08A05                           loc_BANKC_89D7:
08A05 E6 3D                     	INC ObjectXVelocity
08A07 BD C6 89                  	LDA byte_BANKC_8998, X
08A0A 99 41 02                  	STA SpriteDMAArea + $41, Y
08A0D C8                        	INY
08A0E C8                        	INY
08A0F C8                        	INY
08A10 C8                        	INY
08A11 E8                        	INX
08A12 E0 0F                     	CPX #$F
08A14 D0 EF                     	BNE loc_BANKC_89D7
08A16                           
08A16 4C 2E 8A                  	JMP locret_BANKC_8A00
08A19                           
08A19                           ; ---------------------------------------------------------------------------
08A19                           
08A19                           loc_BANKC_89EB:
08A19 E6 3D                     	INC ObjectXVelocity
08A1B A2 00                     	LDX #0
08A1D A0 00                     	LDY #0
08A1F                           
08A1F                           loc_BANKC_89F1:
08A1F BD D5 89                  	LDA byte_BANKC_89A7, X
08A22 99 41 02                  	STA SpriteDMAArea + $41, Y
08A25 C8                        	INY
08A26 C8                        	INY
08A27 C8                        	INY
08A28 C8                        	INY
08A29 E8                        	INX
08A2A E0 0F                     	CPX #$F
08A2C D0 F1                     	BNE loc_BANKC_89F1
08A2E                           
08A2E                           locret_BANKC_8A00:
08A2E 60                        	RTS
08A2F                           
08A2F                           ; ---------------------------------------------------------------------------
08A2F                           CastRoll_PaletteFadeOut:
08A2F 32                        	.db $32
08A30                           
08A30                           byte_BANKC_8A02:
08A30 22                        	.db $22
08A31 12                        	.db $12
08A32                           ; ---------------------------------------------------------------------------
08A32                           
08A32                           loc_BANKC_8A04:
08A32 C6 28                     	DEC PlayerXLo
08A34 10 2E                     	BPL locret_BANKC_8A36
08A36                           
08A36 A9 10                     	LDA #$10
08A38 85 28                     	STA PlayerXLo
08A3A A9 3F                     	LDA #$3F
08A3C 8D 01 03                  	STA PPUBuffer_301
08A3F A9 11                     	LDA #$11
08A41 8D 02 03                  	STA PPUBuffer_301 + 1
08A44 A9 01                     	LDA #$01
08A46 8D 03 03                  	STA PPUBuffer_301 + 2
08A49 A4 2A                     	LDY ObjectXLo + 1
08A4B B9 2F 8A                  	LDA CastRoll_PaletteFadeOut, Y
08A4E 8D 04 03                  	STA PPUBuffer_301 + 3
08A51 A9 00                     	LDA #$00
08A53 8D 05 03                  	STA PPUBuffer_301 + 4
08A56 E6 2A                     	INC ObjectXLo + 1
08A58 A5 2A                     	LDA ObjectXLo + 1
08A5A C9 03                     	CMP #$03
08A5C D0 06                     	BNE locret_BANKC_8A36
08A5E                           
08A5E E6 29                     	INC ObjectXLo
08A60 A9 16                     	LDA #$16
08A62 85 28                     	STA PlayerXLo
08A64                           
08A64                           locret_BANKC_8A36:
08A64 60                        	RTS
08A65                           
08A65                           ; ---------------------------------------------------------------------------
08A65                           
08A65                           loc_BANKC_8A37:
08A65 C6 28                     	DEC PlayerXLo
08A67 10 16                     	BPL locret_BANKC_8A51
08A69                           
08A69 A2 16                     	LDX #$16
08A6B A0 00                     	LDY #0
08A6D A9 F8                     	LDA #$F8
08A6F                           
08A6F                           loc_BANKC_8A41:
08A6F 99 40 02                  	STA SpriteDMAArea + $40, Y
08A72 C8                        	INY
08A73 C8                        	INY
08A74 C8                        	INY
08A75 C8                        	INY
08A76 CA                        	DEX
08A77 10 F6                     	BPL loc_BANKC_8A41
08A79                           
08A79 A9 30                     	LDA #$30
08A7B 85 28                     	STA PlayerXLo
08A7D                           
08A7D                           loc_BANKC_8A4F:
08A7D E6 29                     	INC ObjectXLo
08A7F                           
08A7F                           locret_BANKC_8A51:
08A7F 60                        	RTS
08A80                           
08A80                           ; ---------------------------------------------------------------------------
08A80                           
08A80                           loc_BANKC_8A52:
08A80 C6 28                     	DEC PlayerXLo
08A82 10 2B                     	BPL locret_BANKC_8A81
08A84                           
08A84 A9 00                     	LDA #$00
08A86 85 19                     	STA ObjectXHi + 4
08A88 85 1A                     	STA ObjectXHi + 5
08A8A                           
08A8A                           loc_BANKC_8A5C:
08A8A 85 1B                     	STA ObjectXHi + 6
08A8C A9 05                     	LDA #$05
08A8E 85 1C                     	STA ObjectXHi + 7
08A90 A9 14                     	LDA #$14
08A92 85 1D                     	STA ObjectXHi + 8
08A94 A9 3F                     	LDA #$3F
08A96 8D 01 03                  	STA PPUBuffer_301
08A99 A9 11                     	LDA #$11
08A9B 8D 02 03                  	STA PPUBuffer_301 + 1
08A9E A9 01                     	LDA #$01
08AA0 8D 03 03                  	STA PPUBuffer_301 + 2
08AA3 A9 30                     	LDA #$30
08AA5 8D 04 03                  	STA PPUBuffer_301 + 3
08AA8 A9 00                     	LDA #$00
08AAA 8D 05 03                  	STA PPUBuffer_301 + 4
08AAD E6 29                     	INC ObjectXLo
08AAF                           
08AAF                           locret_BANKC_8A81:
08AAF 60                        	RTS
08AB0                           
08AB0                           ; ---------------------------------------------------------------------------
08AB0                           
08AB0                           loc_BANKC_8A82:
08AB0 A5 1A                     	LDA ObjectXHi + 5
08AB2 29 80                     	AND #$80
08AB4 D0 44                     	BNE locret_BANKC_8ACC
08AB6                           
08AB6 A5 1A                     	LDA ObjectXHi + 5
08AB8 D0 41                     	BNE loc_BANKC_8ACD
08ABA                           
08ABA C6 1C                     	DEC ObjectXHi + 7
08ABC 10 3C                     	BPL locret_BANKC_8ACC
08ABE                           
08ABE A9 05                     	LDA #5
08AC0 85 1C                     	STA ObjectXHi + 7
08AC2 A9 03                     	LDA #3
08AC4 85 1B                     	STA ObjectXHi + 6
08AC6 A2 00                     	LDX #0
08AC8 A4 19                     	LDY ObjectXHi + 4
08ACA                           
08ACA                           loc_BANKC_8A9C:
08ACA A9 40                     	LDA #$40
08ACC 9D 00 02                  	STA SpriteDMAArea, X
08ACF E8                        	INX
08AD0 B9 2C 93                  	LDA byte_BANKC_92FE, Y
08AD3 9D 00 02                  	STA SpriteDMAArea, X
08AD6 C8                        	INY
08AD7 E8                        	INX
08AD8 A9 00                     	LDA #0
08ADA 9D 00 02                  	STA SpriteDMAArea, X
08ADD E8                        	INX
08ADE B9 2C 93                  	LDA byte_BANKC_92FE, Y
08AE1 9D 00 02                  	STA SpriteDMAArea, X
08AE4 C8                        	INY
08AE5 E8                        	INX
08AE6 C6 1B                     	DEC ObjectXHi + 6
08AE8 10 E0                     	BPL loc_BANKC_8A9C
08AEA                           
08AEA 84 19                     	STY ObjectXHi + 4
08AEC C6 1D                     	DEC ObjectXHi + 8
08AEE 10 0A                     	BPL locret_BANKC_8ACC
08AF0                           
08AF0 E6 1A                     	INC ObjectXHi + 5
08AF2 A9 12                     	LDA #$12
08AF4 85 1D                     	STA ObjectXHi + 8
08AF6 A9 00                     	LDA #0
08AF8 85 19                     	STA ObjectXHi + 4
08AFA                           
08AFA                           locret_BANKC_8ACC:
08AFA 60                        	RTS
08AFB                           
08AFB                           ; ---------------------------------------------------------------------------
08AFB                           
08AFB                           loc_BANKC_8ACD:
08AFB C6 1C                     	DEC ObjectXHi + 7
08AFD 10 36                     	BPL locret_BANKC_8B07
08AFF                           
08AFF A9 05                     	LDA #5
08B01 85 1C                     	STA ObjectXHi + 7
08B03 A9 03                     	LDA #3
08B05 85 1B                     	STA ObjectXHi + 6
08B07 A2 00                     	LDX #0
08B09 A4 19                     	LDY ObjectXHi + 4
08B0B                           
08B0B                           loc_BANKC_8ADD:
08B0B A9 40                     	LDA #$40
08B0D 9D 10 02                  	STA SpriteDMAArea + $10, X
08B10 E8                        	INX
08B11 B9 D4 93                  	LDA byte_BANKC_93A6, Y
08B14 9D 10 02                  	STA SpriteDMAArea + $10, X
08B17 C8                        	INY
08B18 E8                        	INX
08B19 A9 00                     	LDA #0
08B1B 9D 10 02                  	STA SpriteDMAArea + $10, X
08B1E E8                        	INX
08B1F B9 D4 93                  	LDA byte_BANKC_93A6, Y
08B22 9D 10 02                  	STA SpriteDMAArea + $10, X
08B25 C8                        	INY
08B26 E8                        	INX
08B27 C6 1B                     	DEC ObjectXHi + 6
08B29 10 E0                     	BPL loc_BANKC_8ADD
08B2B                           
08B2B 84 19                     	STY ObjectXHi + 4
08B2D C6 1D                     	DEC ObjectXHi + 8
08B2F 10 04                     	BPL locret_BANKC_8B07
08B31                           
08B31 A9 FF                     	LDA #$FF
08B33 85 1A                     	STA ObjectXHi + 5
08B35                           
08B35                           locret_BANKC_8B07:
08B35 60                        	RTS
08B36                           
08B36                           ; ---------------------------------------------------------------------------
08B36                           CastRoll_SpritePointersHi:
08B36 8B                        	.db >CastRoll_Mario ; DATA XREF: sub_BANKC_84EC+7r
08B37                           
08B37 8B                        	.db >CastRoll_Luigi
08B38 8B                        	.db >CastRoll_Princess
08B39 8C                        	.db >CastRoll_Toad
08B3A 8C                        	.db >CastRoll_Shyguy
08B3B 8C                        	.db >CastRoll_Snifit
08B3C 8C                        	.db >CastRoll_Ninji
08B3D 8D                        	.db >CastRoll_Beezo
08B3E 8D                        	.db >CastRoll_Porcupo
08B3F 8D                        	.db >CastRoll_Tweeter
08B40 8D                        	.db >CastRoll_BobOmb
08B41 8E                        	.db >CastRoll_Hoopstar
08B42 8E                        	.db >CastRoll_Trouter
08B43 8E                        	.db >CastRoll_Pidgit
08B44 8E                        	.db >CastRoll_Panser
08B45 8F                        	.db >CastRoll_Flurry
08B46 8F                        	.db >CastRoll_Albatoss
08B47 8F                        	.db >CastRoll_Phanto
08B48 8F                        	.db >CastRoll_Spark
08B49 90                        	.db >CastRoll_Subcon
08B4A 90                        	.db >CastRoll_Pokey
08B4B 90                        	.db >CastRoll_Birdo
08B4C 90                        	.db >CastRoll_Ostro
08B4D 91                        	.db >CastRoll_Autobomb
08B4E 91                        	.db >CastRoll_Cobrat
08B4F 91                        	.db >CastRoll_Mouser
08B50 91                        	.db >CastRoll_Fryguy
08B51 92                        	.db >CastRoll_Clawglip
08B52 92                        	.db >CastRoll_Triclyde
08B53                           CastRoll_SpritePointersLo:
08B53 70                        	.db <CastRoll_Mario
08B54                           
08B54 B0                        	.db <CastRoll_Luigi
08B55 F0                        	.db <CastRoll_Princess
08B56 30                        	.db <CastRoll_Toad
08B57 70                        	.db <CastRoll_Shyguy
08B58 B0                        	.db <CastRoll_Snifit
08B59 F0                        	.db <CastRoll_Ninji
08B5A 30                        	.db <CastRoll_Beezo
08B5B 70                        	.db <CastRoll_Porcupo
08B5C B0                        	.db <CastRoll_Tweeter
08B5D F0                        	.db <CastRoll_BobOmb
08B5E 30                        	.db <CastRoll_Hoopstar
08B5F 70                        	.db <CastRoll_Trouter
08B60 B0                        	.db <CastRoll_Pidgit
08B61 F0                        	.db <CastRoll_Panser
08B62 30                        	.db <CastRoll_Flurry
08B63 70                        	.db <CastRoll_Albatoss
08B64 B0                        	.db <CastRoll_Phanto
08B65 F0                        	.db <CastRoll_Spark
08B66 30                        	.db <CastRoll_Subcon
08B67 70                        	.db <CastRoll_Pokey
08B68 B0                        	.db <CastRoll_Birdo
08B69 F0                        	.db <CastRoll_Ostro
08B6A 30                        	.db <CastRoll_Autobomb
08B6B 70                        	.db <CastRoll_Cobrat
08B6C B0                        	.db <CastRoll_Mouser
08B6D F0                        	.db <CastRoll_Fryguy
08B6E 30                        	.db <CastRoll_Clawglip
08B6F 70                        	.db <CastRoll_Triclyde
08B70                           CastRoll_Mario:
08B70 D0 3E 00 30               	.db $D0, $3E, $00, $30
08B74 D0 00 00 38               	.db $D0, $00, $00, $38 ; 4
08B78 D0 02 00 40               	.db $D0, $02, $00, $40 ; 8
08B7C D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08B80 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08B84 F9 04 00 38               	.db $F9, $04, $00, $38 ; $14
08B88 F9 06 00 40               	.db $F9, $06, $00, $40 ; $18
08B8C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08B90 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
08B94 F9 E8 00 2C               	.db $F9, $E8, $00, $2C ; $24
08B98 F9 D0 00 34               	.db $F9, $D0, $00, $34 ; $28
08B9C F9 F2 00 3C               	.db $F9, $F2, $00, $3C ; $2C
08BA0 F9 E0 00 44               	.db $F9, $E0, $00, $44 ; $30
08BA4 F9 EC 00 4C               	.db $F9, $EC, $00, $4C ; $34
08BA8 F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
08BAC F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
08BB0                           CastRoll_Luigi:
08BB0 D0 3E 00 30               	.db $D0, $3E, $00, $30
08BB4 D0 08 00 38               	.db $D0, $08, $00, $38 ; 4
08BB8 D0 0A 00 40               	.db $D0, $0A, $00, $40 ; 8
08BBC D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08BC0 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08BC4 F9 0C 00 38               	.db $F9, $0C, $00, $38 ; $14
08BC8 F9 0E 00 40               	.db $F9, $0E, $00, $40 ; $18
08BCC F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08BD0 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
08BD4 F9 E6 00 2C               	.db $F9, $E6, $00, $2C ; $24
08BD8 F9 F8 00 34               	.db $F9, $F8, $00, $34 ; $28
08BDC F9 E0 00 3C               	.db $F9, $E0, $00, $3C ; $2C
08BE0 F9 DC 00 44               	.db $F9, $DC, $00, $44 ; $30
08BE4 F9 E0 00 4C               	.db $F9, $E0, $00, $4C ; $34
08BE8 F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
08BEC F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
08BF0                           CastRoll_Princess:
08BF0 D0 3E 00 30               	.db $D0, $3E, $00, $30
08BF4 D0 10 00 38               	.db $D0, $10, $00, $38 ; 4
08BF8 D0 12 00 40               	.db $D0, $12, $00, $40 ; 8
08BFC D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08C00 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08C04 F9 14 00 38               	.db $F9, $14, $00, $38 ; $14
08C08 F9 16 00 40               	.db $F9, $16, $00, $40 ; $18
08C0C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08C10 F9 EE 00 20               	.db $F9, $EE, $00, $20 ; $20
08C14 F9 F2 00 28               	.db $F9, $F2, $00, $28 ; $24
08C18 F9 E0 00 30               	.db $F9, $E0, $00, $30 ; $28
08C1C F9 EA 00 38               	.db $F9, $EA, $00, $38 ; $2C
08C20 F9 D4 00 40               	.db $F9, $D4, $00, $40 ; $30
08C24 F9 D8 00 48               	.db $F9, $D8, $00, $48 ; $34
08C28 F9 F4 00 50               	.db $F9, $F4, $00, $50 ; $38
08C2C F9 F4 00 58               	.db $F9, $F4, $00, $58 ; $3C
08C30                           CastRoll_Toad:
08C30 D0 3E 00 30               	.db $D0, $3E, $00, $30 ; DATA XREF: BANKC:8B0Bo
08C34 D0 18 00 38               	.db $D0, $18, $00, $38 ; 4
08C38 D0 1A 00 40               	.db $D0, $1A, $00, $40 ; 8
08C3C D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08C40 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08C44 F9 1C 00 38               	.db $F9, $1C, $00, $38 ; $14
08C48 F9 1E 00 40               	.db $F9, $1E, $00, $40 ; $18
08C4C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08C50 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
08C54 F9 3E 00 28               	.db $F9, $3E, $00, $28 ; $24
08C58 F9 F6 00 30               	.db $F9, $F6, $00, $30 ; $28
08C5C F9 EC 00 38               	.db $F9, $EC, $00, $38 ; $2C
08C60 F9 D0 00 40               	.db $F9, $D0, $00, $40 ; $30
08C64 F9 D6 00 48               	.db $F9, $D6, $00, $48 ; $34
08C68 F9 3E 00 50               	.db $F9, $3E, $00, $50 ; $38
08C6C F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
08C70                           CastRoll_Shyguy:
08C70 D0 3E 00 30               	.db $D0, $3E, 0, $30
08C74 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08C78 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08C7C D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08C80 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08C84 F9 20 00 38               	.db $F9, $20, $00, $38 ; $14
08C88 F9 22 00 40               	.db $F9, $22, $00, $40 ; $18
08C8C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08C90 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
08C94 F9 F4 00 28               	.db $F9, $F4, $00, $28 ; $24
08C98 F9 DE 00 30               	.db $F9, $DE, $00, $30 ; $28
08C9C F9 CC 00 38               	.db $F9, $CC, $00, $38 ; $2C
08CA0 F9 DC 00 40               	.db $F9, $DC, $00, $40 ; $30
08CA4 F9 F8 00 48               	.db $F9, $F8, $00, $48 ; $34
08CA8 F9 CC 00 50               	.db $F9, $CC, $00, $50 ; $38
08CAC F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
08CB0                           CastRoll_Snifit:
08CB0 D0 3E 00 30               	.db $D0, $3E, 0, $30
08CB4 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08CB8 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08CBC D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08CC0 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08CC4 F9 24 00 38               	.db $F9, $24, $00, $38 ; $14
08CC8 F9 26 00 40               	.db $F9, $26, $00, $40 ; $18
08CCC F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08CD0 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
08CD4 F9 F4 00 28               	.db $F9, $F4, $00, $28 ; $24
08CD8 F9 EA 00 30               	.db $F9, $EA, $00, $30 ; $28
08CDC F9 E0 00 38               	.db $F9, $E0, $00, $38 ; $2C
08CE0 F9 DA 00 40               	.db $F9, $DA, $00, $40 ; $30
08CE4 F9 E0 00 48               	.db $F9, $E0, $00, $48 ; $34
08CE8 F9 F6 00 50               	.db $F9, $F6, $00, $50 ; $38
08CEC F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
08CF0                           CastRoll_Ninji:
08CF0 D0 3E 00 30               	.db $D0, $3E, $00, $30
08CF4 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08CF8 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08CFC D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08D00 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08D04 F9 28 00 38               	.db $F9, $28, $00, $38 ; $14
08D08 F9 2A 00 40               	.db $F9, $2A, $00, $40 ; $18
08D0C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08D10 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
08D14 F9 EA 00 2C               	.db $F9, $EA, $00, $2C ; $24
08D18 F9 E0 00 34               	.db $F9, $E0, $00, $34 ; $28
08D1C F9 EA 00 3C               	.db $F9, $EA, $00, $3C ; $2C
08D20 F9 E2 00 44               	.db $F9, $E2, $00, $44 ; $30
08D24 F9 E0 00 4C               	.db $F9, $E0, $00, $4C ; $34
08D28 F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
08D2C F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
08D30                           CastRoll_Beezo:
08D30 D0 3E 00 30               	.db $D0, $3E, $00, $30
08D34 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08D38 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08D3C D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08D40 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08D44 F9 2C 00 38               	.db $F9, $2C, $00, $38 ; $14
08D48 F9 2E 00 40               	.db $F9, $2E, $00, $40 ; $18
08D4C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08D50 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
08D54 F9 D2 00 2C               	.db $F9, $D2, $00, $2C ; $24
08D58 F9 D8 00 34               	.db $F9, $D8, $00, $34 ; $28
08D5C F9 D8 00 3C               	.db $F9, $D8, $00, $3C ; $2C
08D60 F9 CE 00 44               	.db $F9, $CE, $00, $44 ; $30
08D64 F9 EC 00 4C               	.db $F9, $EC, $00, $4C ; $34
08D68 F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
08D6C F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
08D70                           CastRoll_Porcupo:
08D70 D0 3E 00 30               	.db $D0, $3E, $00, $30
08D74 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08D78 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08D7C D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08D80 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08D84 F9 30 00 38               	.db $F9, $30, $00, $38 ; $14
08D88 F9 32 00 40               	.db $F9, $32, $00, $40 ; $18
08D8C F9                        	.db $F9 ; $1C
08D8D                           byte_BANKC_8D5F:
08D8D 3E 00 48 F9               	.db $3E, $00, $48, $F9
08D91 EE 00 24 F9               	.db $EE, $00, $24, $F9 ; 4
08D95 EC 00 2C F9               	.db $EC, $00, $2C, $F9 ; 8
08D99 F2 00 34 F9               	.db $F2, $00, $34, $F9 ; $C
08D9D D4 00 3C F9               	.db $D4, $00, $3C, $F9 ; $10
08DA1 F8 00 44 F9               	.db $F8, $00, $44, $F9 ; $14
08DA5 EE 00 4C F9               	.db $EE, $00, $4C, $F9 ; $18
08DA9 EC 00 54 F9               	.db $EC, $00, $54, $F9 ; $1C
08DAD 3E 00 5C                  	.db $3E, $00, $5C ; $20
08DB0                           CastRoll_Tweeter:
08DB0 D0 3E 00 30               	.db $D0, $3E, $00, $30
08DB4 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08DB8 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08DBC D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08DC0 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08DC4 F9 34 00 38               	.db $F9, $34, $00, $38 ; $14
08DC8 F9 36 00 40               	.db $F9, $36, $00, $40 ; $18
08DCC F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08DD0 F9 F6 00 24               	.db $F9, $F6, $00, $24 ; $20
08DD4 F9 FC 00 2C               	.db $F9, $FC, $00, $2C ; $24
08DD8 F9 D8 00 34               	.db $F9, $D8, $00, $34 ; $28
08DDC F9 D8 00 3C               	.db $F9, $D8, $00, $3C ; $2C
08DE0 F9 F6 00 44               	.db $F9, $F6, $00, $44 ; $30
08DE4 F9 D8 00 4C               	.db $F9, $D8, $00, $4C ; $34
08DE8 F9 F2 00 54               	.db $F9, $F2, $00, $54 ; $38
08DEC F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
08DF0                           CastRoll_BobOmb:
08DF0 D0 3E 00 30               	.db $D0, $3E, 0, $30
08DF4 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08DF8 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08DFC D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08E00 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08E04 F9 38 00 38               	.db $F9, $38, $00, $38 ; $14
08E08 F9 3A 00 40               	.db $F9, $3A, $00, $40 ; $18
08E0C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08E10 F9 D2 00 24               	.db $F9, $D2, $00, $24 ; $20
08E14 F9 EC 00 2C               	.db $F9, $EC, $00, $2C ; $24
08E18 F9 D2 00 34               	.db $F9, $D2, $00, $34 ; $28
08E1C F9 3E 00 3C               	.db $F9, $3E, $00, $3C ; $2C
08E20 F9 EC 00 44               	.db $F9, $EC, $00, $44 ; $30
08E24 F9 E8 00 4C               	.db $F9, $E8, $00, $4C ; $34
08E28 F9 D2 00 54               	.db $F9, $D2, $00, $54 ; $38
08E2C F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
08E30                           CastRoll_Hoopstar:
08E30 D0 3E 00 30               	.db $D0, $3E, $00, $30
08E34 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08E38 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08E3C D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08E40 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08E44 F9 3C 00 38               	.db $F9, $3C, $00, $38 ; $14
08E48 F9 3C 40 40               	.db $F9, $3C, $40, $40 ; $18
08E4C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08E50 F9 DE 00 20               	.db $F9, $DE, $00, $20 ; $20
08E54 F9 EC 00 28               	.db $F9, $EC, $00, $28 ; $24
08E58 F9 EC 00 30               	.db $F9, $EC, $00, $30 ; $28
08E5C F9 EE 00 38               	.db $F9, $EE, $00, $38 ; $2C
08E60 F9 F4 00 40               	.db $F9, $F4, $00, $40 ; $30
08E64 F9 F6 00 48               	.db $F9, $F6, $00, $48 ; $34
08E68 F9 D0 00 50               	.db $F9, $D0, $00, $50 ; $38
08E6C F9 F2 00 58               	.db $F9, $F2, $00, $58 ; $3C
08E70                           CastRoll_Trouter:
08E70 D0 3E 00 30               	.db $D0, $3E, $00, $30
08E74 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08E78 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08E7C D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08E80 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08E84 F9 40 00 38               	.db $F9, $40, $00, $38 ; $14
08E88 F9 42 00 40               	.db $F9, $42, $00, $40 ; $18
08E8C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08E90 F9 F6 00 24               	.db $F9, $F6, $00, $24 ; $20
08E94 F9 F2 00 2C               	.db $F9, $F2, $00, $2C ; $24
08E98 F9 EC 00 34               	.db $F9, $EC, $00, $34 ; $28
08E9C F9 F8 00 3C               	.db $F9, $F8, $00, $3C ; $2C
08EA0 F9 F6 00 44               	.db $F9, $F6, $00, $44 ; $30
08EA4 F9 D8 00 4C               	.db $F9, $D8, $00, $4C ; $34
08EA8 F9 F2 00 54               	.db $F9, $F2, $00, $54 ; $38
08EAC F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
08EB0                           CastRoll_Pidgit:
08EB0 D0 3E 00 30               	.db $D0, $3E, 0, $30
08EB4 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08EB8 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08EBC D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08EC0 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08EC4 F9 44 00 38               	.db $F9, $44, $00, $38 ; $14
08EC8 F9 46 00 40               	.db $F9, $46, $00, $40 ; $18
08ECC F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08ED0 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
08ED4 F9 EE 00 28               	.db $F9, $EE, $00, $28 ; $24
08ED8 F9 E0 00 30               	.db $F9, $E0, $00, $30 ; $28
08EDC F9 D6 00 38               	.db $F9, $D6, $00, $38 ; $2C
08EE0 F9 DC 00 40               	.db $F9, $DC, $00, $40 ; $30
08EE4 F9 E0 00 48               	.db $F9, $E0, $00, $48 ; $34
08EE8 F9 F6 00 50               	.db $F9, $F6, $00, $50 ; $38
08EEC F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
08EF0                           CastRoll_Panser:
08EF0 D0 3E 00 30               	.db $D0, $3E, 0, $30
08EF4 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08EF8 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08EFC D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08F00 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08F04 F9 48 00 38               	.db $F9, $48, $00, $38 ; $14
08F08 F9 4A 00 40               	.db $F9, $4A, $00, $40 ; $18
08F0C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08F10 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
08F14 F9 EE 00 28               	.db $F9, $EE, $00, $28 ; $24
08F18 F9 D0 00 30               	.db $F9, $D0, $00, $30 ; $28
08F1C F9 EA 00 38               	.db $F9, $EA, $00, $38 ; $2C
08F20 F9 F4 00 40               	.db $F9, $F4, $00, $40 ; $30
08F24 F9 D8 00 48               	.db $F9, $D8, $00, $48 ; $34
08F28 F9 F2 00 50               	.db $F9, $F2, $00, $50 ; $38
08F2C F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
08F30                           CastRoll_Flurry:
08F30 D0 3E 00 30               	.db $D0, $3E, 0, $30
08F34 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08F38 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08F3C D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08F40 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08F44 F9 4C 00 38               	.db $F9, $4C, $00, $38 ; $14
08F48 F9 4E 00 40               	.db $F9, $4E, $00, $40 ; $18
08F4C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08F50 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
08F54 F9 DA 00 28               	.db $F9, $DA, $00, $28 ; $24
08F58 F9 E6 00 30               	.db $F9, $E6, $00, $30 ; $28
08F5C F9 F8 00 38               	.db $F9, $F8, $00, $38 ; $2C
08F60 F9 F2 00 40               	.db $F9, $F2, $00, $40 ; $30
08F64 F9 F2 00 48               	.db $F9, $F2, $00, $48 ; $34
08F68 F9 CC 00 50               	.db $F9, $CC, $00, $50 ; $38
08F6C F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
08F70                           CastRoll_Albatoss:
08F70 D0 3E 00 30               	.db $D0, $3E, $00, $30
08F74 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08F78 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08F7C D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08F80 F9 50 00 30               	.db $F9, $50, $00, $30 ; $10
08F84 F9 52 00 38               	.db $F9, $52, $00, $38 ; $14
08F88 F9 54 00 40               	.db $F9, $54, $00, $40 ; $18
08F8C F9 56 00 48               	.db $F9, $56, $00, $48 ; $1C
08F90 F9 D0 00 20               	.db $F9, $D0, $00, $20 ; $20
08F94 F9 E6 00 28               	.db $F9, $E6, $00, $28 ; $24
08F98 F9 D2 00 30               	.db $F9, $D2, $00, $30 ; $28
08F9C F9 D0 00 38               	.db $F9, $D0, $00, $38 ; $2C
08FA0 F9 F6 00 40               	.db $F9, $F6, $00, $40 ; $30
08FA4 F9 EC 00 48               	.db $F9, $EC, $00, $48 ; $34
08FA8 F9 F4 00 50               	.db $F9, $F4, $00, $50 ; $38
08FAC F9 F4 00 58               	.db $F9, $F4, $00, $58 ; $3C
08FB0                           CastRoll_Phanto:
08FB0 D0 3E 00 30               	.db $D0, $3E, 0, $30
08FB4 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08FB8 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08FBC D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
08FC0 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
08FC4 F9 68 00 38               	.db $F9, $68, $00, $38 ; $14
08FC8 F9 68 40 40               	.db $F9, $68, $40, $40 ; $18
08FCC F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
08FD0 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
08FD4 F9 EE 00 28               	.db $F9, $EE, $00, $28 ; $24
08FD8 F9 DE 00 30               	.db $F9, $DE, $00, $30 ; $28
08FDC F9 D0 00 38               	.db $F9, $D0, $00, $38 ; $2C
08FE0 F9 EA 00 40               	.db $F9, $EA, $00, $40 ; $30
08FE4 F9 F6 00 48               	.db $F9, $F6, $00, $48 ; $34
08FE8 F9 EC 00 50               	.db $F9, $EC, $00, $50 ; $38
08FEC F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
08FF0                           CastRoll_Spark:
08FF0 D0 3E 00 30               	.db $D0, $3E, $00, $30
08FF4 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
08FF8 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
08FFC D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
09000 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
09004 F9 6A 00 38               	.db $F9, $6A, $00, $38 ; $14
09008 F9 6A 40 40               	.db $F9, $6A, $40, $40 ; $18
0900C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
09010 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
09014 F9 F4 00 2C               	.db $F9, $F4, $00, $2C ; $24
09018 F9 EE 00 34               	.db $F9, $EE, $00, $34 ; $28
0901C F9 D0 00 3C               	.db $F9, $D0, $00, $3C ; $2C
09020 F9 F2 00 44               	.db $F9, $F2, $00, $44 ; $30
09024 F9 E4 00 4C               	.db $F9, $E4, $00, $4C ; $34
09028 F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
0902C F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
09030                           CastRoll_Subcon:
09030 D0 3E 00 30               	.db $D0, $3E, 0, $30
09034 D0 3E 00 38               	.db $D0, $3E, $00, $38 ; 4
09038 D0 3E 00 40               	.db $D0, $3E, $00, $40 ; 8
0903C D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
09040 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
09044 F9 6C 00 38               	.db $F9, $6C, $00, $38 ; $14
09048 F9 6E 00 40               	.db $F9, $6E, $00, $40 ; $18
0904C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
09050 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
09054 F9 F4 00 2C               	.db $F9, $F4, $00, $2C ; $24
09058 F9 F8 00 34               	.db $F9, $F8, $00, $34 ; $28
0905C F9 D2 00 3C               	.db $F9, $D2, $00, $3C ; $2C
09060 F9 D4 00 44               	.db $F9, $D4, $00, $44 ; $30
09064 F9 EC 00 4C               	.db $F9, $EC, $00, $4C ; $34
09068 F9 EA 00 54               	.db $F9, $EA, $00, $54 ; $38
0906C F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
09070                           CastRoll_Pokey:
09070 D0 3E 00 30               	.db $D0, $3E, $00, $30
09074 D0 60 00 38               	.db $D0, $60, $00, $38 ; 4
09078 D0 62 00 40               	.db $D0, $62, $00, $40 ; 8
0907C D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
09080 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
09084 F9 64 00 38               	.db $F9, $64, $00, $38 ; $14
09088 F9 66 00 40               	.db $F9, $66, $00, $40 ; $18
0908C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
09090 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
09094 F9 EE 00 2C               	.db $F9, $EE, $00, $2C ; $24
09098 F9 EC 00 34               	.db $F9, $EC, $00, $34 ; $28
0909C F9 E4 00 3C               	.db $F9, $E4, $00, $3C ; $2C
090A0 F9 D8 00 44               	.db $F9, $D8, $00, $44 ; $30
090A4 F9 CC 00 4C               	.db $F9, $CC, $00, $4C ; $34
090A8 F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
090AC F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
090B0                           CastRoll_Birdo:
090B0 D0 3E 00 30               	.db $D0, $3E, $00, $30
090B4 D0 70 00 38               	.db $D0, $70, $00, $38 ; 4
090B8 D0 72 00 40               	.db $D0, $72, $00, $40 ; 8
090BC D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
090C0 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
090C4 F9 74 00 38               	.db $F9, $74, $00, $38 ; $14
090C8 F9 76 00 40               	.db $F9, $76, $00, $40 ; $18
090CC F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
090D0 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
090D4 F9 D2 00 2C               	.db $F9, $D2, $00, $2C ; $24
090D8 F9 E0 00 34               	.db $F9, $E0, $00, $34 ; $28
090DC F9 F2 00 3C               	.db $F9, $F2, $00, $3C ; $2C
090E0 F9 D6 00 44               	.db $F9, $D6, $00, $44 ; $30
090E4 F9 EC 00 4C               	.db $F9, $EC, $00, $4C ; $34
090E8 F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
090EC F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
090F0                           CastRoll_Ostro:
090F0 D0 3E 00 30               	.db $D0, $3E, $00, $30
090F4 D0 78 00 38               	.db $D0, $78, $00, $38 ; 4
090F8 D0 7A 00 40               	.db $D0, $7A, $00, $40 ; 8
090FC D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
09100 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
09104 F9 7C 00 38               	.db $F9, $7C, $00, $38 ; $14
09108 F9 7E 00 40               	.db $F9, $7E, $00, $40 ; $18
0910C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
09110 F9 3E 00 24               	.db $F9, $3E, $00, $24 ; $20
09114 F9 EC 00 2C               	.db $F9, $EC, $00, $2C ; $24
09118 F9 F4 00 34               	.db $F9, $F4, $00, $34 ; $28
0911C F9 F6 00 3C               	.db $F9, $F6, $00, $3C ; $2C
09120 F9 F2 00 44               	.db $F9, $F2, $00, $44 ; $30
09124 F9 EC 00 4C               	.db $F9, $EC, $00, $4C ; $34
09128 F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $38
0912C F9 3E 00 5C               	.db $F9, $3E, $00, $5C ; $3C
09130                           CastRoll_Autobomb:
09130 D0 3E 00 30               	.db $D0, $3E, $00, $30
09134 D0 80 00 38               	.db $D0, $80, $00, $38 ; 4
09138 D0 82 00 40               	.db $D0, $82, $00, $40 ; 8
0913C D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
09140 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
09144 F9 84 00 38               	.db $F9, $84, $00, $38 ; $14
09148 F9 86 00 40               	.db $F9, $86, $00, $40 ; $18
0914C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
09150 F9 D0 00 20               	.db $F9, $D0, $00, $20 ; $20
09154 F9 F8 00 28               	.db $F9, $F8, $00, $28 ; $24
09158 F9 F6 00 30               	.db $F9, $F6, $00, $30 ; $28
0915C F9 EC 00 38               	.db $F9, $EC, $00, $38 ; $2C
09160 F9 D2 00 40               	.db $F9, $D2, $00, $40 ; $30
09164 F9 EC 00 48               	.db $F9, $EC, $00, $48 ; $34
09168 F9 E8 00 50               	.db $F9, $E8, $00, $50 ; $38
0916C F9 D2 00 58               	.db $F9, $D2, $00, $58 ; $3C
09170                           CastRoll_Cobrat:
09170 D0 3E 00 30               	.db $D0, $3E, 0, $30
09174 D0 58 00 38               	.db $D0, $58, $00, $38 ; 4
09178 D0 5A 00 40               	.db $D0, $5A, $00, $40 ; 8
0917C D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
09180 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $10
09184 F9 5C 00 38               	.db $F9, $5C, $00, $38 ; $14
09188 F9 5E 00 40               	.db $F9, $5E, $00, $40 ; $18
0918C F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
09190 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
09194 F9 D4 00 28               	.db $F9, $D4, $00, $28 ; $24
09198 F9 EC 00 30               	.db $F9, $EC, $00, $30 ; $28
0919C F9 D2 00 38               	.db $F9, $D2, $00, $38 ; $2C
091A0 F9 F2 00 40               	.db $F9, $F2, $00, $40 ; $30
091A4 F9 D0 00 48               	.db $F9, $D0, $00, $48 ; $34
091A8 F9 F6 00 50               	.db $F9, $F6, $00, $50 ; $38
091AC F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
091B0                           CastRoll_Mouser:
091B0 D0 88 00 30               	.db $D0, $88, 0, $30
091B4 D0 8A 00 38               	.db $D0, $8A, $00, $38 ; 4
091B8 D0 8C 00 40               	.db $D0, $8C, $00, $40 ; 8
091BC D0 3E 00 48               	.db $D0, $3E, $00, $48 ; $C
091C0 F9 8E 00 30               	.db $F9, $8E, $00, $30 ; $10
091C4 F9 90 00 38               	.db $F9, $90, $00, $38 ; $14
091C8 F9 92 00 40               	.db $F9, $92, $00, $40 ; $18
091CC F9 3E 00 48               	.db $F9, $3E, $00, $48 ; $1C
091D0 F9 3E 00 1C               	.db $F9, $3E, $00, $1C ; $20
091D4 F9 E8 00 24               	.db $F9, $E8, $00, $24 ; $24
091D8 F9 EC 00 2C               	.db $F9, $EC, $00, $2C ; $28
091DC F9 F8 00 34               	.db $F9, $F8, $00, $34 ; $2C
091E0 F9 F4 00 3C               	.db $F9, $F4, $00, $3C ; $30
091E4 F9 D8 00 44               	.db $F9, $D8, $00, $44 ; $34
091E8 F9 F2 00 4C               	.db $F9, $F2, $00, $4C ; $38
091EC F9 3E 00 54               	.db $F9, $3E, $00, $54 ; $3C
091F0                           CastRoll_Fryguy:
091F0 D0 AA 00 30               	.db $D0, $AA, 0, $30
091F4 D0 AC 00 38               	.db $D0, $AC, $00, $38 ; 4
091F8 D0 AE 00 40               	.db $D0, $AE, $00, $40 ; 8
091FC D0 B0 00 48               	.db $D0, $B0, $00, $48 ; $C
09200 F9 B2 00 30               	.db $F9, $B2, $00, $30 ; $10
09204 F9 B4 00 38               	.db $F9, $B4, $00, $38 ; $14
09208 F9 B6 00 40               	.db $F9, $B6, $00, $40 ; $18
0920C F9 B8 00 48               	.db $F9, $B8, $00, $48 ; $1C
09210 F9 3E 00 20               	.db $F9, $3E, $00, $20 ; $20
09214 F9 DA 00 28               	.db $F9, $DA, $00, $28 ; $24
09218 F9 F2 00 30               	.db $F9, $F2, $00, $30 ; $28
0921C F9 CC 00 38               	.db $F9, $CC, $00, $38 ; $2C
09220 F9 DC 00 40               	.db $F9, $DC, $00, $40 ; $30
09224 F9 F8 00 48               	.db $F9, $F8, $00, $48 ; $34
09228 F9 CC 00 50               	.db $F9, $CC, $00, $50 ; $38
0922C F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $3C
09230                           CastRoll_Clawglip:
09230 D0 BA 00 30               	.db $D0, $BA, $00, $30
09234 D0 BC 00 38               	.db $D0, $BC, $00, $38 ; 4
09238 D0 BE 00 40               	.db $D0, $BE, $00, $40 ; 8
0923C D0 C0 00 48               	.db $D0, $C0, $00, $48 ; $C
09240 F9 C2 00 30               	.db $F9, $C2, $00, $30 ; $10
09244 F9 C4 00 38               	.db $F9, $C4, $00, $38 ; $14
09248 F9 C6 00 40               	.db $F9, $C6, $00, $40 ; $18
0924C F9 C8 00 48               	.db $F9, $C8, $00, $48 ; $1C
09250 F9 D4 00 20               	.db $F9, $D4, $00, $20 ; $20
09254 F9 E6 00 28               	.db $F9, $E6, $00, $28 ; $24
09258 F9 D0 00 30               	.db $F9, $D0, $00, $30 ; $28
0925C F9 FC 00 38               	.db $F9, $FC, $00, $38 ; $2C
09260 F9 DC 00 40               	.db $F9, $DC, $00, $40 ; $30
09264 F9 E6 00 48               	.db $F9, $E6, $00, $48 ; $34
09268 F9 E0 00 50               	.db $F9, $E0, $00, $50 ; $38
0926C F9 EE 00 58               	.db $F9, $EE, $00, $58 ; $3C
09270                           CastRoll_Triclyde:
09270 D0 94 00 30               	.db $D0, $94, $00, $30
09274 D0 96 00 38               	.db $D0, $96, $00, $38 ; 4
09278 D0 98 00 40               	.db $D0, $98, $00, $40 ; 8
0927C D0 9A 00 48               	.db $D0, $9A, $00, $48 ; $C
09280 F9 9C 00 30               	.db $F9, $9C, $00, $30 ; $10
09284 F9 9E 00 38               	.db $F9, $9E, $00, $38 ; $14
09288 F9 A0 00 40               	.db $F9, $A0, $00, $40 ; $18
0928C F9 A2 00 48               	.db $F9, $A2, $00, $48 ; $1C
09290 F9 3E 00 30               	.db $F9, $3E, $00, $30 ; $20
09294 F9 A4 00 38               	.db $F9, $A4, $00, $38 ; $24
09298 F9 A6 00 40               	.db $F9, $A6, $00, $40 ; $28
0929C F9 A8 00 48               	.db $F9, $A8, $00, $48 ; $2C
092A0 F9 3E 00 50               	.db $F9, $3E, $00, $50 ; $30
092A4 F9 3E 00 58               	.db $F9, $3E, $00, $58 ; $34
092A8 F9 3E 00 60               	.db $F9, $3E, $00, $60 ; $38
092AC F9 3E 00 68               	.db $F9, $3E, $00, $68 ; $3C
092B0                           CastRoll_TriclydeText:
092B0 D0 F6 00 20               	.db $D0, $F6, $00, $20
092B4 D0 F2 00 28               	.db $D0, $F2, $00, $28 ; 4
092B8 D0 E0 00 30               	.db $D0, $E0, $00, $30 ; 8
092BC D0 D4 00 38               	.db $D0, $D4, $00, $38 ; $C
092C0 D0 E6 00 40               	.db $D0, $E6, $00, $40 ; $10
092C4 D0 CC 00 48               	.db $D0, $CC, $00, $48 ; $14
092C8 D0 D6 00 50               	.db $D0, $D6, $00, $50 ; $18
092CC D0 D8 00 58               	.db $D0, $D8, $00, $58 ; $1C
092D0                           CastRoll_Wart:
092D0 D0 80 00 28               	.db $D0, $80, $00, $28
092D4 D0 82 00 30               	.db $D0, $82, $00, $30 ; 4
092D8 D0 84 00 38               	.db $D0, $84, $00, $38 ; 8
092DC D0 86 00 40               	.db $D0, $86, $00, $40 ; $C
092E0 D0 88 00 48               	.db $D0, $88, $00, $48 ; $10
092E4 F9 8A 00 28               	.db $F9, $8A, $00, $28 ; $14
092E8 F9 8C 00 30               	.db $F9, $8C, $00, $30 ; $18
092EC F9 8E 00 38               	.db $F9, $8E, $00, $38 ; $1C
092F0 F9 90 00 40               	.db $F9, $90, $00, $40 ; $20
092F4 F9 92 00 48               	.db $F9, $92, $00, $48 ; $24
092F8 F9 94 00 28               	.db $F9, $94, $00, $28 ; $28
092FC F9 96 00 30               	.db $F9, $96, $00, $30 ; $2C
09300 F9 98 00 38               	.db $F9, $98, $00, $38 ; $30
09304 F9 9A 00 40               	.db $F9, $9A, $00, $40 ; $34
09308 F9 9C 00 48               	.db $F9, $9C, $00, $48 ; $38
0930C F9 C0 00 20               	.db $F9, $C0, $00, $20 ; $3C
09310 F9 C0 00 20               	.db $F9, $C0, $00, $20 ; $40
09314 F9 FC 00 2C               	.db $F9, $FC, $00, $2C ; $44
09318 F9 D0 00 34               	.db $F9, $D0, $00, $34 ; $48
0931C F9 F2 00 3C               	.db $F9, $F2, $00, $3C ; $4C
09320 F9 F6 00 44               	.db $F9, $F6, $00, $44 ; $50
09324 F9 C0 00 50               	.db $F9, $C0, $00, $50 ; $54
09328 F9 C0 00 58               	.db $F9, $C0, $00, $58 ; $58
0932C                           byte_BANKC_92FE:
0932C 10                        	.db $10
0932D                           
0932D 90                        	.db $90
0932E 7C                        	.db $7C
0932F 98                        	.db $98
09330 7C                        	.db $7C
09331 A0                        	.db $A0
09332 7C                        	.db $7C
09333 A8                        	.db $A8
09334 12                        	.db $12
09335 90                        	.db $90
09336 7C                        	.db $7C
09337 98                        	.db $98
09338 7C                        	.db $7C
09339 A0                        	.db $A0
0933A 7C                        	.db $7C
0933B A8                        	.db $A8
0933C 14                        	.db $14
0933D 90                        	.db $90
0933E 7C                        	.db $7C
0933F 98                        	.db $98
09340 7C                        	.db $7C
09341 A0                        	.db $A0
09342 7C                        	.db $7C
09343 A8                        	.db $A8
09344 16                        	.db $16
09345 90                        	.db $90
09346 7C                        	.db $7C
09347 98                        	.db $98
09348 7C                        	.db $7C
09349 A0                        	.db $A0
0934A 7C                        	.db $7C
0934B A8                        	.db $A8
0934C 16                        	.db $16
0934D 90                        	.db $90
0934E 18                        	.db $18
0934F 98                        	.db $98
09350 7C                        	.db $7C
09351 A0                        	.db $A0
09352 7C                        	.db $7C
09353 A8                        	.db $A8
09354 16                        	.db $16
09355 90                        	.db $90
09356 1A                        	.db $1A
09357 98                        	.db $98
09358 7C                        	.db $7C
09359 A0                        	.db $A0
0935A 7C                        	.db $7C
0935B A8                        	.db $A8
0935C 16                        	.db $16
0935D 90                        	.db $90
0935E 1C                        	.db $1C
0935F 98                        	.db $98
09360 7C                        	.db $7C
09361 A0                        	.db $A0
09362 7C                        	.db $7C
09363 A8                        	.db $A8
09364 16                        	.db $16
09365 90                        	.db $90
09366 1E                        	.db $1E
09367 98                        	.db $98
09368 7C                        	.db $7C
09369 A0                        	.db $A0
0936A 7C                        	.db $7C
0936B A8                        	.db $A8
0936C 20                        	.db $20
0936D 90                        	.db $90
0936E 1E                        	.db $1E
0936F 98                        	.db $98
09370 7C                        	.db $7C
09371 A0                        	.db $A0
09372 7C                        	.db $7C
09373 A8                        	.db $A8
09374 24                        	.db $24
09375 90                        	.db $90
09376 1E                        	.db $1E
09377 98                        	.db $98
09378 7C                        	.db $7C
09379 A0                        	.db $A0
0937A 7C                        	.db $7C
0937B A8                        	.db $A8
0937C 24                        	.db $24
0937D 90                        	.db $90
0937E 28                        	.db $28
0937F 98                        	.db $98
09380 7C                        	.db $7C
09381 A0                        	.db $A0
09382 7C                        	.db $7C
09383 A8                        	.db $A8
09384 24                        	.db $24
09385 90                        	.db $90
09386 2A                        	.db $2A
09387 98                        	.db $98
09388 7C                        	.db $7C
09389 A0                        	.db $A0
0938A 7C                        	.db $7C
0938B A8                        	.db $A8
0938C 24                        	.db $24
0938D 90                        	.db $90
0938E 2A                        	.db $2A
0938F 98                        	.db $98
09390 2C                        	.db $2C
09391 A0                        	.db $A0
09392 7C                        	.db $7C
09393 A8                        	.db $A8
09394 24                        	.db $24
09395 90                        	.db $90
09396 2A                        	.db $2A
09397 98                        	.db $98
09398 2E                        	.db $2E
09399 A0                        	.db $A0
0939A 7C                        	.db $7C
0939B A8                        	.db $A8
0939C 24                        	.db $24
0939D 90                        	.db $90
0939E 30                        	.db $30
0939F 98                        	.db $98
093A0 32                        	.db $32
093A1 A0                        	.db $A0
093A2 7C                        	.db $7C
093A3 A8                        	.db $A8
093A4 24                        	.db $24
093A5 90                        	.db $90
093A6 30                        	.db $30
093A7 98                        	.db $98
093A8 34                        	.db $34
093A9 A0                        	.db $A0
093AA 7C                        	.db $7C
093AB A8                        	.db $A8
093AC 24                        	.db $24
093AD 90                        	.db $90
093AE 30                        	.db $30
093AF 98                        	.db $98
093B0 36                        	.db $36
093B1 A0                        	.db $A0
093B2 7C                        	.db $7C
093B3 A8                        	.db $A8
093B4 24                        	.db $24
093B5 90                        	.db $90
093B6 30                        	.db $30
093B7 98                        	.db $98
093B8 36                        	.db $36
093B9 A0                        	.db $A0
093BA 38                        	.db $38
093BB A8                        	.db $A8
093BC 24                        	.db $24
093BD 90                        	.db $90
093BE 30                        	.db $30
093BF 98                        	.db $98
093C0 3A                        	.db $3A
093C1 A0                        	.db $A0
093C2 3C                        	.db $3C
093C3 A8                        	.db $A8
093C4 24                        	.db $24
093C5 90                        	.db $90
093C6 30                        	.db $30
093C7 98                        	.db $98
093C8 3E                        	.db $3E
093C9 A0                        	.db $A0
093CA 40                        	.db $40
093CB A8                        	.db $A8
093CC 24                        	.db $24
093CD 90                        	.db $90
093CE 30                        	.db $30
093CF 98                        	.db $98
093D0 3E                        	.db $3E
093D1 A0                        	.db $A0
093D2 42                        	.db $42
093D3 A8                        	.db $A8
093D4                           byte_BANKC_93A6:
093D4 44                        	.db $44
093D5                           
093D5 B0                        	.db $B0
093D6 46                        	.db $46
093D7 B8                        	.db $B8
093D8 7C                        	.db $7C
093D9 C0                        	.db $C0
093DA 7C                        	.db $7C
093DB C8                        	.db $C8
093DC 48                        	.db $48
093DD B0                        	.db $B0
093DE 4A                        	.db $4A
093DF B8                        	.db $B8
093E0 7C                        	.db $7C
093E1 C0                        	.db $C0
093E2 7C                        	.db $7C
093E3 C8                        	.db $C8
093E4 4C                        	.db $4C
093E5 B0                        	.db $B0
093E6 4E                        	.db $4E
093E7 B8                        	.db $B8
093E8 7C                        	.db $7C
093E9 C0                        	.db $C0
093EA 7C                        	.db $7C
093EB C8                        	.db $C8
093EC 50                        	.db $50
093ED B0                        	.db $B0
093EE 52                        	.db $52
093EF B8                        	.db $B8
093F0 7C                        	.db $7C
093F1 C0                        	.db $C0
093F2 7C                        	.db $7C
093F3 C8                        	.db $C8
093F4 54                        	.db $54
093F5 B0                        	.db $B0
093F6 56                        	.db $56
093F7 B8                        	.db $B8
093F8 7C                        	.db $7C
093F9 C0                        	.db $C0
093FA 7C                        	.db $7C
093FB C8                        	.db $C8
093FC 58                        	.db $58
093FD B0                        	.db $B0
093FE 5A                        	.db $5A
093FF B8                        	.db $B8
09400 7C                        	.db $7C
09401 C0                        	.db $C0
09402 7C                        	.db $7C
09403 C8                        	.db $C8
09404 5C                        	.db $5C
09405 B0                        	.db $B0
09406 5E                        	.db $5E
09407 B8                        	.db $B8
09408 7C                        	.db $7C
09409 C0                        	.db $C0
0940A 7C                        	.db $7C
0940B C8                        	.db $C8
0940C 5C                        	.db $5C
0940D B0                        	.db $B0
0940E 60                        	.db $60
0940F B8                        	.db $B8
09410 7C                        	.db $7C
09411 C0                        	.db $C0
09412 7C                        	.db $7C
09413 C8                        	.db $C8
09414 5C                        	.db $5C
09415 B0                        	.db $B0
09416 62                        	.db $62
09417 B8                        	.db $B8
09418 7C                        	.db $7C
09419 C0                        	.db $C0
0941A 7C                        	.db $7C
0941B C8                        	.db $C8
0941C 5C                        	.db $5C
0941D B0                        	.db $B0
0941E 64                        	.db $64
0941F B8                        	.db $B8
09420 66                        	.db $66
09421 C0                        	.db $C0
09422 7C                        	.db $7C
09423 C8                        	.db $C8
09424 5C                        	.db $5C
09425 B0                        	.db $B0
09426 64                        	.db $64
09427 B8                        	.db $B8
09428 68                        	.db $68
09429 C0                        	.db $C0
0942A 7C                        	.db $7C
0942B C8                        	.db $C8
0942C 5C                        	.db $5C
0942D B0                        	.db $B0
0942E 64                        	.db $64
0942F B8                        	.db $B8
09430 6A                        	.db $6A
09431 C0                        	.db $C0
09432 7C                        	.db $7C
09433 C8                        	.db $C8
09434 5C                        	.db $5C
09435 B0                        	.db $B0
09436 64                        	.db $64
09437 B8                        	.db $B8
09438 6C                        	.db $6C
09439 C0                        	.db $C0
0943A 6E                        	.db $6E
0943B C8                        	.db $C8
0943C 5C                        	.db $5C
0943D B0                        	.db $B0
0943E 64                        	.db $64
0943F B8                        	.db $B8
09440 6C                        	.db $6C
09441 C0                        	.db $C0
09442 70                        	.db $70
09443 C8                        	.db $C8
09444 5C                        	.db $5C
09445 B0                        	.db $B0
09446 64                        	.db $64
09447 B8                        	.db $B8
09448 6C                        	.db $6C
09449 C0                        	.db $C0
0944A 72                        	.db $72
0944B C8                        	.db $C8
0944C 5C                        	.db $5C
0944D B0                        	.db $B0
0944E 64                        	.db $64
0944F B8                        	.db $B8
09450 6C                        	.db $6C
09451 C0                        	.db $C0
09452 74                        	.db $74
09453 C8                        	.db $C8
09454 5C                        	.db $5C
09455 B0                        	.db $B0
09456 64                        	.db $64
09457 B8                        	.db $B8
09458 6C                        	.db $6C
09459 C0                        	.db $C0
0945A 76                        	.db $76
0945B C8                        	.db $C8
0945C 5C                        	.db $5C
0945D B0                        	.db $B0
0945E 64                        	.db $64
0945F B8                        	.db $B8
09460 6C                        	.db $6C
09461 C0                        	.db $C0
09462 78                        	.db $78
09463 C8                        	.db $C8
09464 5C                        	.db $5C
09465 B0                        	.db $B0
09466 64                        	.db $64
09467 B8                        	.db $B8
09468 6C                        	.db $6C
09469 C0                        	.db $C0
0946A 7A                        	.db $7A
0946B C8                        	.db $C8
0946C 60                        	.db $60
0946D                           
0946D                           IFDEF PLAYER_STUFF_BONUS
0946D                           EmptyData_Level:
0946D FF FF FF FF                   .db $FF, $FF, $FF, $FF
09471                           GetLevelPointers_CD:
09471 AC F0 73                      LDY CurrentLevelAreaIndex
09474 B9 95 94                  	LDA LevelDataPointersLo_CD, Y
09477 85 05                     	STA byte_RAM_5 ; $0005/$0006 are pointers to the level data
09479 B9 67 95                  	LDA LevelDataPointersHi_CD, Y
0947C 85 06                     	STA byte_RAM_6
0947E A2 FB                     	LDX #$FF - 4 ; Set to load level data into $7800 in RAM
09480 A9 78                     	LDA #$78
09482 85 02                     	STA byte_RAM_2
09484 A9 04                     	LDA #$04
09486 85 01                     	STA byte_RAM_1
09488 A0 00                     	LDY #$00
0948A                           
0948A                           CopyLevelDataToMemory_CD:
0948A B1 05                     	LDA (byte_RAM_5), Y
0948C 91 01                     	STA (byte_RAM_1), Y
0948E C8                        	INY
0948F CA                        	DEX
09490 D0 F8                     	BNE CopyLevelDataToMemory_CD
09492                           
09492 91 01                     	STA (byte_RAM_1), Y
09494 60                            RTS
09495                           
09495                           LevelDataPointersLo_CD:
09495                           	; Level 1-1
09495 6D                        	.db <EmptyData_Level
09496 6D                        	.db <EmptyData_Level
09497 6D                        	.db <EmptyData_Level
09498 6D                        	.db <EmptyData_Level
09499 6D                        	.db <EmptyData_Level
0949A 6D                        	.db <EmptyData_Level
0949B 6D                        	.db <EmptyData_Level
0949C 6D                        	.db <EmptyData_Level
0949D 6D                        	.db <EmptyData_Level
0949E 6D                        	.db <EmptyData_Level
0949F                           	; Level 1-EmptyData_Level
0949F 6D                        	.db <EmptyData_Level
094A0 6D                        	.db <EmptyData_Level
094A1 6D                        	.db <EmptyData_Level
094A2 6D                        	.db <EmptyData_Level
094A3 6D                        	.db <EmptyData_Level
094A4 6D                        	.db <EmptyData_Level
094A5 6D                        	.db <EmptyData_Level
094A6 6D                        	.db <EmptyData_Level
094A7 6D                        	.db <EmptyData_Level
094A8 6D                        	.db <EmptyData_Level
094A9                           	; Level 1-EmptyData_Level
094A9 6D                        	.db <EmptyData_Level
094AA 6D                        	.db <EmptyData_Level
094AB 6D                        	.db <EmptyData_Level
094AC 6D                        	.db <EmptyData_Level
094AD 6D                        	.db <EmptyData_Level
094AE 6D                        	.db <EmptyData_Level
094AF 6D                        	.db <EmptyData_Level
094B0 6D                        	.db <EmptyData_Level
094B1 6D                        	.db <EmptyData_Level
094B2 6D                        	.db <EmptyData_Level
094B3                           	; Level 2-EmptyData_Level
094B3 6D                        	.db <EmptyData_Level
094B4 6D                        	.db <EmptyData_Level
094B5 6D                        	.db <EmptyData_Level
094B6 6D                        	.db <EmptyData_Level
094B7 6D                        	.db <EmptyData_Level
094B8 6D                        	.db <EmptyData_Level
094B9 6D                        	.db <EmptyData_Level
094BA 6D                        	.db <EmptyData_Level
094BB 6D                        	.db <EmptyData_Level
094BC 6D                        	.db <EmptyData_Level
094BD                           	; Level 2-EmptyData_Level
094BD 6D                        	.db <EmptyData_Level
094BE 6D                        	.db <EmptyData_Level
094BF 6D                        	.db <EmptyData_Level
094C0 6D                        	.db <EmptyData_Level
094C1 6D                        	.db <EmptyData_Level
094C2 6D                        	.db <EmptyData_Level
094C3 6D                        	.db <EmptyData_Level
094C4 6D                        	.db <EmptyData_Level
094C5 6D                        	.db <EmptyData_Level
094C6 6D                        	.db <EmptyData_Level
094C7                           	; Level 2-EmptyData_Level
094C7 6D                        	.db <EmptyData_Level
094C8 6D                        	.db <EmptyData_Level
094C9 6D                        	.db <EmptyData_Level
094CA 6D                        	.db <EmptyData_Level
094CB 6D                        	.db <EmptyData_Level
094CC 6D                        	.db <EmptyData_Level
094CD 6D                        	.db <EmptyData_Level
094CE 6D                        	.db <EmptyData_Level
094CF 6D                        	.db <EmptyData_Level
094D0 6D                        	.db <EmptyData_Level
094D1                           	; Level 3-EmptyData_Level
094D1 6D                        	.db <EmptyData_Level
094D2 6D                        	.db <EmptyData_Level
094D3 6D                        	.db <EmptyData_Level
094D4 6D                        	.db <EmptyData_Level
094D5 6D                        	.db <EmptyData_Level
094D6 6D                        	.db <EmptyData_Level
094D7 6D                        	.db <EmptyData_Level
094D8 6D                        	.db <EmptyData_Level
094D9 6D                        	.db <EmptyData_Level
094DA 6D                        	.db <EmptyData_Level
094DB                           	; Level 3-EmptyData_Level
094DB 6D                        	.db <EmptyData_Level
094DC 6D                        	.db <EmptyData_Level
094DD 6D                        	.db <EmptyData_Level
094DE 6D                        	.db <EmptyData_Level
094DF 6D                        	.db <EmptyData_Level
094E0 6D                        	.db <EmptyData_Level
094E1 6D                        	.db <EmptyData_Level
094E2 6D                        	.db <EmptyData_Level
094E3 6D                        	.db <EmptyData_Level
094E4 6D                        	.db <EmptyData_Level
094E5                           	; Level 3-EmptyData_Level
094E5 6D                        	.db <EmptyData_Level
094E6 6D                        	.db <EmptyData_Level
094E7 6D                        	.db <EmptyData_Level
094E8 6D                        	.db <EmptyData_Level
094E9 6D                        	.db <EmptyData_Level
094EA 6D                        	.db <EmptyData_Level
094EB 6D                        	.db <EmptyData_Level
094EC 6D                        	.db <EmptyData_Level
094ED 6D                        	.db <EmptyData_Level
094EE 6D                        	.db <EmptyData_Level
094EF                           	; Level 4-EmptyData_Level
094EF 6D                        	.db <EmptyData_Level
094F0 6D                        	.db <EmptyData_Level
094F1 6D                        	.db <EmptyData_Level
094F2 6D                        	.db <EmptyData_Level
094F3 6D                        	.db <EmptyData_Level
094F4 6D                        	.db <EmptyData_Level
094F5 6D                        	.db <EmptyData_Level
094F6 6D                        	.db <EmptyData_Level
094F7 6D                        	.db <EmptyData_Level
094F8 6D                        	.db <EmptyData_Level
094F9                           	; Level 4-EmptyData_Level
094F9 6D                        	.db <EmptyData_Level
094FA 6D                        	.db <EmptyData_Level
094FB 6D                        	.db <EmptyData_Level
094FC 6D                        	.db <EmptyData_Level
094FD 6D                        	.db <EmptyData_Level
094FE 6D                        	.db <EmptyData_Level
094FF 6D                        	.db <EmptyData_Level
09500 6D                        	.db <EmptyData_Level
09501 6D                        	.db <EmptyData_Level
09502 6D                        	.db <EmptyData_Level
09503                           	; Level 4-EmptyData_Level
09503 6D                        	.db <EmptyData_Level
09504 6D                        	.db <EmptyData_Level
09505 6D                        	.db <EmptyData_Level
09506 6D                        	.db <EmptyData_Level
09507 6D                        	.db <EmptyData_Level
09508 6D                        	.db <EmptyData_Level
09509 6D                        	.db <EmptyData_Level
0950A 6D                        	.db <EmptyData_Level
0950B 6D                        	.db <EmptyData_Level
0950C 6D                        	.db <EmptyData_Level
0950D                           	; Level 5-EmptyData_Level
0950D 6D                        	.db <EmptyData_Level
0950E 6D                        	.db <EmptyData_Level
0950F 6D                        	.db <EmptyData_Level
09510 6D                        	.db <EmptyData_Level
09511 6D                        	.db <EmptyData_Level
09512 6D                        	.db <EmptyData_Level
09513 6D                        	.db <EmptyData_Level
09514 6D                        	.db <EmptyData_Level
09515 6D                        	.db <EmptyData_Level
09516 6D                        	.db <EmptyData_Level
09517                           	; Level 5-EmptyData_Level
09517 6D                        	.db <EmptyData_Level
09518 6D                        	.db <EmptyData_Level
09519 6D                        	.db <EmptyData_Level
0951A 6D                        	.db <EmptyData_Level
0951B 6D                        	.db <EmptyData_Level
0951C 6D                        	.db <EmptyData_Level
0951D 6D                        	.db <EmptyData_Level
0951E 6D                        	.db <EmptyData_Level
0951F 6D                        	.db <EmptyData_Level
09520 6D                        	.db <EmptyData_Level
09521                           	; Level 5-EmptyData_Level
09521 6D                        	.db <EmptyData_Level
09522 6D                        	.db <EmptyData_Level
09523 6D                        	.db <EmptyData_Level
09524 6D                        	.db <EmptyData_Level
09525 6D                        	.db <EmptyData_Level
09526 6D                        	.db <EmptyData_Level
09527 6D                        	.db <EmptyData_Level
09528 6D                        	.db <EmptyData_Level
09529 6D                        	.db <EmptyData_Level
0952A 6D                        	.db <EmptyData_Level
0952B                           	; Level 6-EmptyData_Level
0952B 6D                        	.db <EmptyData_Level
0952C 6D                        	.db <EmptyData_Level
0952D 6D                        	.db <EmptyData_Level
0952E 6D                        	.db <EmptyData_Level
0952F 6D                        	.db <EmptyData_Level
09530 6D                        	.db <EmptyData_Level
09531 6D                        	.db <EmptyData_Level
09532 6D                        	.db <EmptyData_Level
09533 6D                        	.db <EmptyData_Level
09534 6D                        	.db <EmptyData_Level
09535                           	; Level 6-EmptyData_Level
09535 6D                        	.db <EmptyData_Level
09536 6D                        	.db <EmptyData_Level
09537 6D                        	.db <EmptyData_Level
09538 6D                        	.db <EmptyData_Level
09539 6D                        	.db <EmptyData_Level
0953A 6D                        	.db <EmptyData_Level
0953B 6D                        	.db <EmptyData_Level
0953C 6D                        	.db <EmptyData_Level
0953D 6D                        	.db <EmptyData_Level
0953E 6D                        	.db <EmptyData_Level
0953F                           	; Level 6-EmptyData_Level
0953F 6D                        	.db <EmptyData_Level
09540 6D                        	.db <EmptyData_Level
09541 6D                        	.db <EmptyData_Level
09542 6D                        	.db <EmptyData_Level
09543 6D                        	.db <EmptyData_Level
09544 6D                        	.db <EmptyData_Level
09545 6D                        	.db <EmptyData_Level
09546 6D                        	.db <EmptyData_Level
09547 6D                        	.db <EmptyData_Level
09548 6D                        	.db <EmptyData_Level
09549                           	; Level 7-EmptyData_Level
09549 6D                        	.db <EmptyData_Level
0954A 6D                        	.db <EmptyData_Level
0954B 6D                        	.db <EmptyData_Level
0954C 6D                        	.db <EmptyData_Level
0954D 6D                        	.db <EmptyData_Level
0954E 6D                        	.db <EmptyData_Level
0954F 6D                        	.db <EmptyData_Level
09550 6D                        	.db <EmptyData_Level
09551 6D                        	.db <EmptyData_Level
09552 6D                        	.db <EmptyData_Level
09553                           	; Level 7-EmptyData_Level
09553 6D                        	.db <EmptyData_Level
09554 6D                        	.db <EmptyData_Level
09555 6D                        	.db <EmptyData_Level
09556 6D                        	.db <EmptyData_Level
09557 6D                        	.db <EmptyData_Level
09558 6D                        	.db <EmptyData_Level
09559 6D                        	.db <EmptyData_Level
0955A 6D                        	.db <EmptyData_Level
0955B 6D                        	.db <EmptyData_Level
0955C 6D                        	.db <EmptyData_Level
0955D                           	; Level 7-EmptyData_Level
0955D 6D                        	.db <EmptyData_Level
0955E 6D                        	.db <EmptyData_Level
0955F 6D                        	.db <EmptyData_Level
09560 6D                        	.db <EmptyData_Level
09561 6D                        	.db <EmptyData_Level
09562 6D                        	.db <EmptyData_Level
09563 6D                        	.db <EmptyData_Level
09564 6D                        	.db <EmptyData_Level
09565 6D                        	.db <EmptyData_Level
09566 6D                        	.db <EmptyData_Level
09567                           LevelDataPointersHi_CD:
09567                           	; EmptyData_Level 1-1
09567 94                        	.db >EmptyData_Level
09568 94                        	.db >EmptyData_Level
09569 94                        	.db >EmptyData_Level
0956A 94                        	.db >EmptyData_Level
0956B 94                        	.db >EmptyData_Level
0956C 94                        	.db >EmptyData_Level
0956D 94                        	.db >EmptyData_Level
0956E 94                        	.db >EmptyData_Level
0956F 94                        	.db >EmptyData_Level
09570 94                        	.db >EmptyData_Level
09571                           	; Level 1-EmptyData_Level
09571 94                        	.db >EmptyData_Level
09572 94                        	.db >EmptyData_Level
09573 94                        	.db >EmptyData_Level
09574 94                        	.db >EmptyData_Level
09575 94                        	.db >EmptyData_Level
09576 94                        	.db >EmptyData_Level
09577 94                        	.db >EmptyData_Level
09578 94                        	.db >EmptyData_Level
09579 94                        	.db >EmptyData_Level
0957A 94                        	.db >EmptyData_Level
0957B                           	; Level 1-EmptyData_Level
0957B 94                        	.db >EmptyData_Level
0957C 94                        	.db >EmptyData_Level
0957D 94                        	.db >EmptyData_Level
0957E 94                        	.db >EmptyData_Level
0957F 94                        	.db >EmptyData_Level
09580 94                        	.db >EmptyData_Level
09581 94                        	.db >EmptyData_Level
09582 94                        	.db >EmptyData_Level
09583 94                        	.db >EmptyData_Level
09584 94                        	.db >EmptyData_Level
09585                           	; Level 2-EmptyData_Level
09585 94                        	.db >EmptyData_Level
09586 94                        	.db >EmptyData_Level
09587 94                        	.db >EmptyData_Level
09588 94                        	.db >EmptyData_Level
09589 94                        	.db >EmptyData_Level
0958A 94                        	.db >EmptyData_Level
0958B 94                        	.db >EmptyData_Level
0958C 94                        	.db >EmptyData_Level
0958D 94                        	.db >EmptyData_Level
0958E 94                        	.db >EmptyData_Level
0958F                           	; Level 2-EmptyData_Level
0958F 94                        	.db >EmptyData_Level
09590 94                        	.db >EmptyData_Level
09591 94                        	.db >EmptyData_Level
09592 94                        	.db >EmptyData_Level
09593 94                        	.db >EmptyData_Level
09594 94                        	.db >EmptyData_Level
09595 94                        	.db >EmptyData_Level
09596 94                        	.db >EmptyData_Level
09597 94                        	.db >EmptyData_Level
09598 94                        	.db >EmptyData_Level
09599                           	; Level 2-EmptyData_Level
09599 94                        	.db >EmptyData_Level
0959A 94                        	.db >EmptyData_Level
0959B 94                        	.db >EmptyData_Level
0959C 94                        	.db >EmptyData_Level
0959D 94                        	.db >EmptyData_Level
0959E 94                        	.db >EmptyData_Level
0959F 94                        	.db >EmptyData_Level
095A0 94                        	.db >EmptyData_Level
095A1 94                        	.db >EmptyData_Level
095A2 94                        	.db >EmptyData_Level
095A3                           	; Level 3-EmptyData_Level
095A3 94                        	.db >EmptyData_Level
095A4 94                        	.db >EmptyData_Level
095A5 94                        	.db >EmptyData_Level
095A6 94                        	.db >EmptyData_Level
095A7 94                        	.db >EmptyData_Level
095A8 94                        	.db >EmptyData_Level
095A9 94                        	.db >EmptyData_Level
095AA 94                        	.db >EmptyData_Level
095AB 94                        	.db >EmptyData_Level
095AC 94                        	.db >EmptyData_Level
095AD                           	; Level 3-EmptyData_Level
095AD 94                        	.db >EmptyData_Level
095AE 94                        	.db >EmptyData_Level
095AF 94                        	.db >EmptyData_Level
095B0 94                        	.db >EmptyData_Level
095B1 94                        	.db >EmptyData_Level
095B2 94                        	.db >EmptyData_Level
095B3 94                        	.db >EmptyData_Level
095B4 94                        	.db >EmptyData_Level
095B5 94                        	.db >EmptyData_Level
095B6 94                        	.db >EmptyData_Level
095B7                           	; Level 3-EmptyData_Level
095B7 94                        	.db >EmptyData_Level
095B8 94                        	.db >EmptyData_Level
095B9 94                        	.db >EmptyData_Level
095BA 94                        	.db >EmptyData_Level
095BB 94                        	.db >EmptyData_Level
095BC 94                        	.db >EmptyData_Level
095BD 94                        	.db >EmptyData_Level
095BE 94                        	.db >EmptyData_Level
095BF 94                        	.db >EmptyData_Level
095C0 94                        	.db >EmptyData_Level
095C1                           	; Level 4-EmptyData_Level
095C1 94                        	.db >EmptyData_Level
095C2 94                        	.db >EmptyData_Level
095C3 94                        	.db >EmptyData_Level
095C4 94                        	.db >EmptyData_Level
095C5 94                        	.db >EmptyData_Level
095C6 94                        	.db >EmptyData_Level
095C7 94                        	.db >EmptyData_Level
095C8 94                        	.db >EmptyData_Level
095C9 94                        	.db >EmptyData_Level
095CA 94                        	.db >EmptyData_Level
095CB                           	; Level 4-EmptyData_Level
095CB 94                        	.db >EmptyData_Level
095CC 94                        	.db >EmptyData_Level
095CD 94                        	.db >EmptyData_Level
095CE 94                        	.db >EmptyData_Level
095CF 94                        	.db >EmptyData_Level
095D0 94                        	.db >EmptyData_Level
095D1 94                        	.db >EmptyData_Level
095D2 94                        	.db >EmptyData_Level
095D3 94                        	.db >EmptyData_Level
095D4 94                        	.db >EmptyData_Level
095D5                           	; Level 4-EmptyData_Level
095D5 94                        	.db >EmptyData_Level
095D6 94                        	.db >EmptyData_Level
095D7 94                        	.db >EmptyData_Level
095D8 94                        	.db >EmptyData_Level
095D9 94                        	.db >EmptyData_Level
095DA 94                        	.db >EmptyData_Level
095DB 94                        	.db >EmptyData_Level
095DC 94                        	.db >EmptyData_Level
095DD 94                        	.db >EmptyData_Level
095DE 94                        	.db >EmptyData_Level
095DF                           	; Level 5-EmptyData_Level
095DF 94                        	.db >EmptyData_Level
095E0 94                        	.db >EmptyData_Level
095E1 94                        	.db >EmptyData_Level
095E2 94                        	.db >EmptyData_Level
095E3 94                        	.db >EmptyData_Level
095E4 94                        	.db >EmptyData_Level
095E5 94                        	.db >EmptyData_Level
095E6 94                        	.db >EmptyData_Level
095E7 94                        	.db >EmptyData_Level
095E8 94                        	.db >EmptyData_Level
095E9                           	; Level 5-EmptyData_Level
095E9 94                        	.db >EmptyData_Level
095EA 94                        	.db >EmptyData_Level
095EB 94                        	.db >EmptyData_Level
095EC 94                        	.db >EmptyData_Level
095ED 94                        	.db >EmptyData_Level
095EE 94                        	.db >EmptyData_Level
095EF 94                        	.db >EmptyData_Level
095F0 94                        	.db >EmptyData_Level
095F1 94                        	.db >EmptyData_Level
095F2 94                        	.db >EmptyData_Level
095F3                           	; Level 5-EmptyData_Level
095F3 94                        	.db >EmptyData_Level
095F4 94                        	.db >EmptyData_Level
095F5 94                        	.db >EmptyData_Level
095F6 94                        	.db >EmptyData_Level
095F7 94                        	.db >EmptyData_Level
095F8 94                        	.db >EmptyData_Level
095F9 94                        	.db >EmptyData_Level
095FA 94                        	.db >EmptyData_Level
095FB 94                        	.db >EmptyData_Level
095FC 94                        	.db >EmptyData_Level
095FD                           	; Level 6-EmptyData_Level
095FD 94                        	.db >EmptyData_Level
095FE 94                        	.db >EmptyData_Level
095FF 94                        	.db >EmptyData_Level
09600 94                        	.db >EmptyData_Level
09601 94                        	.db >EmptyData_Level
09602 94                        	.db >EmptyData_Level
09603 94                        	.db >EmptyData_Level
09604 94                        	.db >EmptyData_Level
09605 94                        	.db >EmptyData_Level
09606 94                        	.db >EmptyData_Level
09607                           	; Level 6-EmptyData_Level
09607 94                        	.db >EmptyData_Level
09608 94                        	.db >EmptyData_Level
09609 94                        	.db >EmptyData_Level
0960A 94                        	.db >EmptyData_Level
0960B 94                        	.db >EmptyData_Level
0960C 94                        	.db >EmptyData_Level
0960D 94                        	.db >EmptyData_Level
0960E 94                        	.db >EmptyData_Level
0960F 94                        	.db >EmptyData_Level
09610 94                        	.db >EmptyData_Level
09611                           	; Level 6-EmptyData_Level
09611 94                        	.db >EmptyData_Level
09612 94                        	.db >EmptyData_Level
09613 94                        	.db >EmptyData_Level
09614 94                        	.db >EmptyData_Level
09615 94                        	.db >EmptyData_Level
09616 94                        	.db >EmptyData_Level
09617 94                        	.db >EmptyData_Level
09618 94                        	.db >EmptyData_Level
09619 94                        	.db >EmptyData_Level
0961A 94                        	.db >EmptyData_Level
0961B                           	; Level 7-EmptyData_Level
0961B 94                        	.db >EmptyData_Level
0961C 94                        	.db >EmptyData_Level
0961D 94                        	.db >EmptyData_Level
0961E 94                        	.db >EmptyData_Level
0961F 94                        	.db >EmptyData_Level
09620 94                        	.db >EmptyData_Level
09621 94                        	.db >EmptyData_Level
09622 94                        	.db >EmptyData_Level
09623 94                        	.db >EmptyData_Level
09624 94                        	.db >EmptyData_Level
09625                           	; Level 7-EmptyData_Level
09625 94                        	.db >EmptyData_Level
09626 94                        	.db >EmptyData_Level
09627 94                        	.db >EmptyData_Level
09628 94                        	.db >EmptyData_Level
09629 94                        	.db >EmptyData_Level
0962A 94                        	.db >EmptyData_Level
0962B 94                        	.db >EmptyData_Level
0962C 94                        	.db >EmptyData_Level
0962D 94                        	.db >EmptyData_Level
0962E 94                        	.db >EmptyData_Level
0962F                           	; Level 7-EmptyData_Level
0962F 94                        	.db >EmptyData_Level
09630 94                        	.db >EmptyData_Level
09631 94                        	.db >EmptyData_Level
09632 94                        	.db >EmptyData_Level
09633 94                        	.db >EmptyData_Level
09634 94                        	.db >EmptyData_Level
09635 94                        	.db >EmptyData_Level
09636 94                        	.db >EmptyData_Level
09637 94                        	.db >EmptyData_Level
09638 94                        	.db >EmptyData_Level
09639                           LevelData_CD:
09639                           
09639                           ENDIF
09639 FF FF FF FF FF FF FF FF.. .org $c000, $ff
0C000                           
0C000                           ; ----------------------------------------
0C000                           ; Banks E and F. Fixed at $C000-FFFF.
0C000                           ; Important things like NMI and often-used
0C000                           ; routines.
0C000                           ; Bank E also contains PCM data for the
0C000                           ; drums and samples.
0C000                           .base $c000    ; Technically not needed but consistent
0C000                           .include "src/prg-e-f.asm"
0C000                           ;
0C000                           ; Bank E & Bank F
0C000                           ; ===============
0C000                           ;
0C000                           ; What's inside: Lots of game logic.
0C000                           ;
0C000                           ;   - DPCM data
0C000                           ;   - Joypad input reading
0C000                           ;   - PPU update routines
0C000                           ;   - Game initialization routines
0C000                           ;   - Title card display routines
0C000                           ;   - Area initialization routines
0C000                           ;   - Music cue routines
0C000                           ;   - Character select (sprite data, palettes, logic)
0C000                           ;   - Bonus chance (sprite data, palettes, logic)
0C000                           ;   - Game Over / Continue screen
0C000                           ;   - Pause screen
0C000                           ;   - Health logic
0C000                           ;   - Bottomless pit death logic
0C000                           ;   - Bounding box data for collisions
0C000                           ;   - and more!
0C000                           ;
0C000                           
0C000                           ; Include DPCM samples
0C000                           .include "src/music/dpcm-samples.asm"
0C000                           ;
0C000                           ; PCM Sample Data
0C000                           ; @todo reformat to be less ugly
0C000                           ;
0C000                           
0C000                           DPCMSampleData:
0C000                           DPCMSampleData_ItemPull:
0C000 55 2D 55 55 D5 54 55 55.. 	.db $55,$2D,$55,$55,$D5,$54,$55,$55,$55,$55,$AB,$54,$55,$AD,$B6
0C00F FF 3F 00 00 80 FE FF 03.. 	.db $FF,$3F,$00,$00,$80,$FE,$FF,$03,$78,$00,$00,$00,$FC,$FF,$FF,$1F,$F8,$0F ; $0F
0C021 00 00 80 FF FF FF 03 FF.. 	.db $00,$00,$80,$FF,$FF,$FF,$03,$FF,$09,$00,$00,$A0,$FF,$FF,$FF,$FF,$00,$F6 ; $21
0C033 03 00 00 00 FF FF FF FF.. 	.db $03,$00,$00,$00,$FF,$FF,$FF,$FF,$01,$00,$FF,$09,$00,$00,$00,$EC,$FF,$FF,$FF,$FF ; $33
0C047 0F 00 E8 2E 02 00 80 02.. 	.db $0F,$00,$E8,$2E,$02,$00,$80,$02,$D8,$FF,$FF,$FF,$FB,$FF,$07,$00,$00,$DA,$5E ; $47
0C05A 00 00 00 1C E8 F5 FF FF.. 	.db $00,$00,$00,$1C,$E8,$F5,$FF,$FF,$FF,$F3,$FF,$5E,$00,$00,$80,$9E,$3F ; $5A
0C06B 01 00 00 A0 13 FC F5 FF.. 	.db $01,$00,$00,$A0,$13,$FC,$F5,$FF,$FF,$FF,$0F,$FF,$AB,$0B,$00,$00,$00,$C0 ; $6B
0C07D FF 7F 22 00 00 28 F8 13.. 	.db $FF,$7F,$22,$00,$00,$28,$F8,$13,$FD,$BB,$FF,$BF,$FA,$FF,$C0,$0F ; $7D
0C08D FE 07 3F 02 00 00 00 C0.. 	.db $FE,$07,$3F,$02,$00,$00,$00,$C0,$FF,$FF,$27,$0A,$00,$38,$00,$F4,$83,$FE,$17 ; $8D
0C0A0 F8 7F ED DB 7F B1 FF 7F.. 	.db $F8,$7F,$ED,$DB,$7F,$B1,$FF,$7F,$00,$F8,$00,$FC,$3F,$00,$7E,$04,$00 ; $A0
0C0B1 00 E8 04 00 E0 FF FF FF.. 	.db $00,$E8,$04,$00,$E0,$FF,$FF,$FF,$F7,$43,$52,$09,$00,$F8,$4F,$00,$E8,$FF ; $B1
0C0C3 01 FB FF 02 E0 FE FF 62.. 	.db $01,$FB,$FF,$02,$E0,$FE,$FF,$62,$B5,$AB,$DD,$57,$80,$FD,$FE,$1F ; $C3
0C0D3 00 B0 02 00 FE FF 00 00.. 	.db $00,$B0,$02,$00,$FE,$FF,$00,$00,$FD,$05,$01,$42,$05,$80,$FE,$2F,$00,$00,$F8,$FF ; $D3
0C0E7 FF FF FF A2 ED 0F 42 AA.. 	.db $FF,$FF,$FF,$A2,$ED,$0F,$42,$AA,$24,$02,$00,$FE,$FF,$00,$00,$FE,$FF ; $E7
0C0F8 5F 00 FF 7F 00 D0 FE 5F.. 	.db $5F,$00,$FF,$7F,$00,$D0,$FE,$5F,$54,$DB,$AA,$ED,$2B,$01,$ED,$FE ; $F8
0C108 FF 00 00 AC 00 F0 FF 07.. 	.db $FF,$00,$00,$AC,$00,$F0,$FF,$07,$00,$FC,$03,$01,$48,$00,$F0,$BF,$00,$00,$E8,$FF ; $108
0C11C FF FF FF 3F 12 9A 44 00.. 	.db $FF,$FF,$FF,$3F,$12,$9A,$44,$00,$E8,$3F,$00,$C0,$FF,$1F,$F8,$FF ; $11C
0C12C 03 C0 FF 4B DB B5 ED 13.. 	.db $03,$C0,$FF,$4B,$DB,$B5,$ED,$13,$A9,$FF,$3F,$00,$94,$00,$FE,$1F ; $12C
0C13C 40 2F 00 04 00 9C 00 80.. 	.db $40,$2F,$00,$04,$00,$9C,$00,$80,$FF,$FF,$FF,$BF,$12,$00,$E8,$04,$B0,$1F ; $13C
0C14E F8 7F 40 FF D7 6D FF 8B.. 	.db $F8,$7F,$40,$FF,$D7,$6D,$FF,$8B,$EE,$FF,$80,$16,$D8,$3F,$E8 ; $14E
0C15D 05 00 00 00 80 FF FF 2F.. 	.db $05,$00,$00,$00,$80,$FF,$FF,$2F,$11,$80,$00,$6C,$E8,$2F,$F4,$DF,$F6 ; $15D
0C16E FF EA 7F EC E8 3F 5D 00.. 	.db $FF,$EA,$7F,$EC,$E8,$3F,$5D,$00,$00,$00,$C0,$FF,$5F,$22,$00,$00,$10 ; $16E
0C17F 7F E0 6F BF 7F FF 77 E9.. 	.db $7F,$E0,$6F,$BF,$7F,$FF,$77,$E9,$DF,$0F,$00,$00,$80,$7E,$5F,$01,$00 ; $17F
0C190 80 0E 6C FF BF FF BF FE.. 	.db $80,$0E,$6C,$FF,$BF,$FF,$BF,$FE,$5F,$00,$00,$40,$FF,$45,$00,$00,$48 ; $190
0C1A1 B0 FB FE FF FF FF 8B 00.. 	.db $B0,$FB,$FE,$FF,$FF,$FF,$8B,$00,$00,$BC,$2F,$00,$00,$10,$B0,$EE,$FF ; $1A1
0C1B2 FF FF FF 09 00 60 5F 00.. 	.db $FF,$FF,$FF,$09,$00,$60,$5F,$00,$00,$00,$AC,$FB,$FF,$FF,$FF,$5F,$00,$C0 ; $1B2
0C1C4 3E 02 00 00 54 FF FF FF.. 	.db $3E,$02,$00,$00,$54,$FF,$FF,$FF,$FF,$0B,$00,$FA,$00,$00,$00,$B8,$FF,$FF,$FF ; $1C4
0C1D7 FF 00 A0 0F 00 00 80 FF.. 	.db $FF,$00,$A0,$0F,$00,$00,$80,$FF,$FF,$FF,$3F,$80,$6E,$00,$00,$00,$FB,$FF ; $1D7
0C1E9 FF FF 00 BD 00 00 00 FF.. 	.db $FF,$FF,$00,$BD,$00,$00,$00,$FF,$FF,$FF,$07,$F0,$03,$00,$00,$EC,$FF,$FF,$1F ; $1E9
0C1FC F8 01 00 00 F6 FF FF 81.. 	.db $F8,$01,$00,$00,$F6,$FF,$FF,$81,$9F,$00,$00,$60,$FF,$FF,$1F,$FA,$00,$00 ; $1FC
0C20E C0 FF FF 87 7E 00 00 A0.. 	.db $C0,$FF,$FF,$87,$7E,$00,$00,$A0,$FF,$FF,$C9,$0B,$00,$00,$FD,$FF,$2F ; $20E
0C21F FE 00 00 E0 FF 7F E2 07.. 	.db $FE,$00,$00,$E0,$FF,$7F,$E2,$07,$00,$00,$FF,$FF,$E3,$07,$00,$80,$FF,$FF ; $21F
0C231 E3 07 00 00 FF FF E3 03.. 	.db $E3,$07,$00,$00,$FF,$FF,$E3,$03,$00,$E0,$FF,$7F,$6C,$00,$00,$E8,$FF,$AF ; $231
0C243 1F 00 00 FE FF F9 03 00.. 	.db $1F,$00,$00,$FE,$FF,$F9,$03,$00,$B0,$FF,$AF,$0E,$00,$C0,$FF,$FF,$F8,$00 ; $243
0C255 00 F8 FF E3 07 00 E0 FF.. 	.db $00,$F8,$FF,$E3,$07,$00,$E0,$FF,$8F,$1F,$00,$80,$FF,$3F,$7E,$00,$00,$FE ; $255
0C267 BF 3B 00 00 FF FF 1E 00.. 	.db $BF,$3B,$00,$00,$FF,$FF,$1E,$00,$80,$FF,$BF,$4E,$00,$C0,$FF,$AF,$07 ; $267
0C278 00 E0 FF F7 01 00 FA FF.. 	.db $00,$E0,$FF,$F7,$01,$00,$FA,$FF,$DC,$00,$00,$FF,$7F,$1E,$00,$A0,$FF,$EF ; $278
0C28A 01 00 FA 7F 9D 00 A0 FF.. 	.db $01,$00,$FA,$7F,$9D,$00,$A0,$FF,$EF,$01,$00,$FA,$FF,$0E,$00,$F0,$FF,$3B ; $28A
0C29C 01 00 FF BF 03 00 FE 5F.. 	.db $01,$00,$FF,$BF,$03,$00,$FE,$5F,$17,$00,$E8,$FF,$5E,$00,$D0,$FF,$57,$00 ; $29C
0C2AE A0 FF DF 01 00 FF AF 03.. 	.db $A0,$FF,$DF,$01,$00,$FF,$AF,$03,$00,$FE,$5F,$27,$00,$FC,$BF,$0E,$00,$F8 ; $2AE
0C2C0 FF 8E 00 F0 FF 3A 00 E0.. 	.db $FF,$8E,$00,$F0,$FF,$3A,$00,$E0,$FF,$0F,$00,$F8,$FF,$16,$00,$F8,$7F ; $2C0
0C2D1 27 00 EC FF 05 00 FA FF.. 	.db $27,$00,$EC,$FF,$05,$00,$FA,$FF,$03,$00,$FE,$FF,$00,$80,$FF,$6F,$01,$80 ; $2D1
0C2E3 FF 3F 00 E0 FF 0F 00 F6.. 	.db $FF,$3F,$00,$E0,$FF,$0F,$00,$F6,$BF,$05,$00,$FE,$7F,$01,$EC,$03,$FE,$01,$FB ; $2E3
0C2F6 01 FE 40 7F 00 7F 81 BF.. 	.db $01,$FE,$40,$7F,$00,$7F,$81,$BF,$C0,$4F,$00,$DA,$D6,$B6,$D5,$AA ; $2F6
0C306 55 AB AA 4A AB AA 4A 5B.. 	.db $55,$AB,$AA,$4A,$AB,$AA,$4A,$5B,$D5,$AE,$02,$00,$F6,$FF,$01,$00,$E8 ; $306
0C317 B6 BF 25 AA 6A 57 D5 76.. 	.db $B6,$BF,$25,$AA,$6A,$57,$D5,$76,$13,$C9,$ED,$FF,$00,$E0,$03,$D4 ; $317
0C327 FF 22 D0 97 04 49 00 7B.. 	.db $FF,$22,$D0,$97,$04,$49,$00,$7B,$01,$80,$FF,$FF,$EF,$2B,$25,$02,$3B ; $327
0C338 00 FD 45 FF 01 DD B5 6D.. 	.db $00,$FD,$45,$FF,$01,$DD,$B5,$6D,$5F,$FB,$0B,$1F,$FA,$13,$2F,$40 ; $338
0C348 00 04 D0 FF BB 24 40 04.. 	.db $00,$04,$D0,$FF,$BB,$24,$40,$04,$8A,$BD,$E8,$B6,$EE,$D7,$7F,$BC ; $348
0C358 F8 C7 13 04 00 00 D0 BB.. 	.db $F8,$C7,$13,$04,$00,$00,$D0,$BB,$B7,$DB,$DA,$AA,$AB,$5A,$6A,$55 ; $358
0C368 A5 A9 A5 2A 55 55 55 AA.. 	.db $A5,$A9,$A5,$2A,$55,$55,$55,$AA,$AA,$4A,$55,$55,$55,$AA,$AA ; $368
0C377 AA 52 53 55 55 55 55 55.. 	.db $AA,$52,$53,$55,$55,$55,$55,$55,$55 ; $377
0C380                           DPCMSampleDataEnd_ItemPull:
0C380                           
0C380                           DPCMSampleData_BossHurt:
0C380 95 55 55 A9 55 55         	.db $95,$55,$55,$A9,$55,$55 ; $380
0C386 69 55 55 55 FB 7F 02 00.. 	.db $69,$55,$55,$55,$FB,$7F,$02,$00,$F0,$EF,$17,$F0,$02,$00,$B0,$FF,$FF ; $386
0C397 81 0F 00 C0 FD FF 0F 7E.. 	.db $81,$0F,$00,$C0,$FD,$FF,$0F,$7E,$00,$00,$BE,$FF,$7F,$E0,$23,$00,$60 ; $397
0C3A8 FF FF 03 3F 00 00 FB FF.. 	.db $FF,$FF,$03,$3F,$00,$00,$FB,$FF,$1F,$D8,$01,$00,$D8,$FE,$FF,$C2,$0E,$00 ; $3A8
0C3BA C0 FE FF 27 7A 00 00 BA.. 	.db $C0,$FE,$FF,$27,$7A,$00,$00,$BA,$FF,$3F,$D1,$09,$00,$A0,$FF,$FF,$85 ; $3BA
0C3CB 17 00 80 FD FF 0F 7C 02.. 	.db $17,$00,$80,$FD,$FF,$0F,$7C,$02,$00,$E8,$FF,$7F,$A1,$13,$00,$A0,$FF ; $3CB
0C3DC FF 13 9D 00 00 FA FF 5F.. 	.db $FF,$13,$9D,$00,$00,$FA,$FF,$5F,$D8,$0A,$00,$C0,$FF,$FF,$07,$2B,$00,$80 ; $3DC
0C3EE FE FF 2F 74 01 00 B8 FF.. 	.db $FE,$FF,$2F,$74,$01,$00,$B8,$FF,$FF,$81,$0B,$00,$A0,$FF,$FF,$07,$6E ; $3EE
0C3FF 00 00 FE FF 5F E0 05 00.. 	.db $00,$00,$FE,$FF,$5F,$E0,$05,$00,$E0,$FB,$FF,$83,$1B,$00,$80,$FB,$FF ; $3FF
0C410 1F F8 00 00 F8 FF FF C0.. 	.db $1F,$F8,$00,$00,$F8,$FF,$FF,$C0,$0E,$00,$C0,$FE,$FF,$07,$7E,$00,$00,$BA ; $410
0C422 FF BF B0 03 00 A0 FF FF.. 	.db $FF,$BF,$B0,$03,$00,$A0,$FF,$FF,$8B,$96,$00,$00,$FE,$FF,$5F,$E8,$02 ; $422
0C433 00 E0 FF FF 03 2F 00 00.. 	.db $00,$E0,$FF,$FF,$03,$2F,$00,$00,$FB,$FF,$1F,$7A,$01,$00,$E0,$FF,$FF,$D0 ; $433
0C445 07 00 80 FE FF 47 2F 00.. 	.db $07,$00,$80,$FE,$FF,$47,$2F,$00,$00,$FA,$FF,$3F,$7A,$01,$00,$C0,$FF,$FF ; $445
0C457 07 7D 04 00 E0 FF FF 83.. 	.db $07,$7D,$04,$00,$E0,$FF,$FF,$83,$3B,$00,$00,$E8,$FE,$FF,$27,$05,$00,$00,$F6 ; $457
0C46A FF FF F0 17 00 80 FE FF.. 	.db $FF,$FF,$F0,$17,$00,$80,$FE,$FF,$3F,$E8,$02,$00,$00,$FB,$FF,$FF,$90 ; $46A
0C47B 00 00 F8 FF FF E8 0F 00.. 	.db $00,$00,$F8,$FF,$FF,$E8,$0F,$00,$00,$FE,$FF,$2F,$4A,$00,$00,$FE,$FF,$2F ; $47B
0C48D 3E 01 00 80 FF FF CF 02.. 	.db $3E,$01,$00,$80,$FF,$FF,$CF,$02,$00,$80,$FF,$FF,$FF,$15,$00,$00,$E0,$FF ; $48D
0C49F 7F 95 00 0A E0 FF 7F 5E.. 	.db $7F,$95,$00,$0A,$E0,$FF,$7F,$5E,$03,$00,$00,$FF,$FF,$E2,$07,$00,$F4,$FF ; $49F
0C4B1 7F 94 00 00 F0 FF FF 6F.. 	.db $7F,$94,$00,$00,$F0,$FF,$FF,$6F,$00,$00,$80,$FF,$7F,$FC,$00,$00,$FC,$FF ; $4B1
0C4C3 8F 0B 00 00 FE FF FF 8B.. 	.db $8F,$0B,$00,$00,$FE,$FF,$FF,$8B,$00,$00,$E0,$FF,$8F,$9F,$00,$80,$FD,$FF ; $4C3
0C4D5 8F 03 00 80 FE FF FF 13.. 	.db $8F,$03,$00,$80,$FE,$FF,$FF,$13,$00,$00,$EC,$FF,$81,$1F,$00,$A0,$FF ; $4D5
0C4E6 FF 79 00 00 A0 FF FF 7F.. 	.db $FF,$79,$00,$00,$A0,$FF,$FF,$7F,$00,$00,$F0,$FF,$FF,$0B,$00,$80,$FE,$1F ; $4E6
0C4F8 3F 00 00 FA FF E3 07 00.. 	.db $3F,$00,$00,$FA,$FF,$E3,$07,$00,$E0,$FF,$FF,$17,$00,$00,$FC,$FF,$FB,$01 ; $4F8
0C50A 00 F0 FD EF 5E 00 00 F0.. 	.db $00,$F0,$FD,$EF,$5E,$00,$00,$F0,$FF,$FF,$0F,$00,$00,$FE,$5F,$3F,$00,$00,$F8 ; $50A
0C51D FF FF 00 00 E0 FF FF 0D.. 	.db $FF,$FF,$00,$00,$E0,$FF,$FF,$0D,$00,$00,$FC,$FF,$FF,$03,$00,$80,$FF,$FF ; $51D
0C52F 7F 00 00 F0 FF E8 0F 00.. 	.db $7F,$00,$00,$F0,$FF,$E8,$0F,$00,$C0,$FF,$1F,$F8,$01,$00,$F8,$FF,$FF,$02 ; $52F
0C541 00 80 FF FF 9F 00 00 7C.. 	.db $00,$80,$FF,$FF,$9F,$00,$00,$7C,$FF,$F7,$03,$00,$00,$FC,$FF,$FF,$03,$00,$A0 ; $541
0C554 FF E7 0F 00 C0 FE FF 17.. 	.db $FF,$E7,$0F,$00,$C0,$FE,$FF,$17,$00,$00,$F8,$FF,$9F,$03,$00,$00,$FF,$FF ; $554
0C566 FF 02 00 80 FF FF 9F 00.. 	.db $FF,$02,$00,$80,$FF,$FF,$9F,$00,$00,$EC,$FF,$FB,$03,$00,$80,$FF,$3F,$7E ; $566
0C578 00 00 FE FF EF 00 00 80.. 	.db $00,$00,$FE,$FF,$EF,$00,$00,$80,$FE,$FF,$FF,$00,$00,$C0,$FF,$FF,$3F,$00 ; $578
0C58A 00 F8 FF FE 00 00 E0 FF.. 	.db $00,$F8,$FF,$FE,$00,$00,$E0,$FF,$7F,$1E,$00,$00,$FC,$FF,$7F,$00,$00,$80 ; $58A
0C59C FF FF 7F 00 00 F0 FF FF.. 	.db $FF,$FF,$7F,$00,$00,$F0,$FF,$FF,$0F,$00,$00,$FE,$1F,$FF,$01,$00,$E8,$FF ; $59C
0C5AE 0B 3F 00 00 FF FF 5F 00.. 	.db $0B,$3F,$00,$00,$FF,$FF,$5F,$00,$00,$E0,$FF,$BF,$1F,$00,$00,$FD,$FF,$FF ; $5AE
0C5C0 02 00 C0 FF C7 7F 00 00.. 	.db $02,$00,$C0,$FF,$C7,$7F,$00,$00,$F8,$FF,$E2,$0F,$00,$C0,$FF,$FF,$2A,$00 ; $5C0
0C5D2 00 F8 FF EF 00 00 80 FF.. 	.db $00,$F8,$FF,$EF,$00,$00,$80,$FF,$FF,$FF,$00,$00,$E0,$FF,$FF,$1F,$00,$00 ; $5D2
0C5E4 FC FF 7E 02 00 F0 FF E7.. 	.db $FC,$FF,$7E,$02,$00,$F0,$FF,$E7,$0F,$00,$80,$FE,$FF,$3D,$00,$00,$F8,$FF ; $5E4
0C5F6 EB 3F 00 00 F8 FF FF 02.. 	.db $EB,$3F,$00,$00,$F8,$FF,$FF,$02,$00,$00,$FF,$8F,$FF,$00,$00,$FC,$FF,$81 ; $5F6
0C608 1F 00 80 FF FF 0F 00 00.. 	.db $1F,$00,$80,$FF,$FF,$0F,$00,$00,$FA,$FF,$FF,$01,$00,$E8,$FB,$9F,$3F,$00 ; $608
0C61A 00 C0 FE FF 3F 00 00 FB.. 	.db $00,$C0,$FE,$FF,$3F,$00,$00,$FB,$FF,$FD,$00,$00,$E0,$FF,$FF,$03,$00,$00,$FE ; $61A
0C62D FF 7B 02 00 A0 FF FF 7F.. 	.db $FF,$7B,$02,$00,$A0,$FF,$FF,$7F,$00,$00,$F0,$FF,$FF,$09,$00,$00,$FE,$5F ; $62D
0C63F BF 00 00 F8 FF AF 07 00.. 	.db $BF,$00,$00,$F8,$FF,$AF,$07,$00,$E0,$FF,$7F,$1D,$00,$00,$FC,$FF,$AF,$0B ; $63F
0C651 00 00 FE FF FF 03 00 80.. 	.db $00,$00,$FE,$FF,$FF,$03,$00,$80,$FF,$AF,$7E,$00,$00,$FA,$FF,$C7,$07,$00,$C0 ; $651
0C664 FE FF 3D 00 00 E0 FF FF.. 	.db $FE,$FF,$3D,$00,$00,$E0,$FF,$FF,$3F,$00,$00,$F8,$FF,$FF,$05,$00,$00,$FF ; $664
0C676 8F FF 00 00 EC FF 81 1F.. 	.db $8F,$FF,$00,$00,$EC,$FF,$81,$1F,$00,$B0,$FF,$FF,$0E,$00,$E8,$FF,$03,$00 ; $676
0C688 FE 9F 00 F0 FF 05 80 FF.. 	.db $FE,$9F,$00,$F0,$FF,$05,$80,$FF,$27,$00,$FC,$3F,$00,$FC,$BF,$00,$EC ; $688
0C699 7F 01 E0 FF 00 EC BF 00.. 	.db $7F,$01,$E0,$FF,$00,$EC,$BF,$00,$FC,$3F,$00,$FC,$2F,$80,$FF,$03,$00,$A0 ; $699
0C6AB 7F B7 B7 DF 2A 89 50 B5.. 	.db $7F,$B7,$B7,$DF,$2A,$89,$50,$B5,$56,$D5,$3E,$81,$DA,$7F,$00 ; $6AB
0C6BA 3F D0 9F 78 01 00 00 80.. 	.db $3F,$D0,$9F,$78,$01,$00,$00,$80,$FF,$6F,$09,$00,$55,$0F,$BD,$FB,$F7,$FF ; $6BA
0C6CC FB 3F 02 00 00 B4 7B DB.. 	.db $FB,$3F,$02,$00,$00,$B4,$7B,$DB,$B5,$D5,$AA,$55,$AB,$D4,$52,$55 ; $6CC
0C6DC A9 4A 53 55 A9 AA 4A 55.. 	.db $A9,$4A,$53,$55,$A9,$AA,$4A,$55,$55,$A9,$52,$55,$55,$AA,$AA ; $6DC
0C6EB AA AA AA AA B2 AA 4A 4D.. 	.db $AA,$AA,$AA,$AA,$B2,$AA,$4A,$4D,$53,$55,$55,$55,$55,$55,$2D ; $6EB
0C6FA D5 52 D3 CA 52 AB AA AA.. 	.db $D5,$52,$D3,$CA,$52,$AB,$AA,$AA,$AA,$AA,$AA,$6A,$55,$69,$55 ; $6FA
0C709 55 A9 55 55 69 55 55 55.. 	.db $55,$A9,$55,$55,$69,$55,$55,$55,$55,$55,$55,$D3,$D4,$52,$55 ; $709
0C718 55 55 AB B4 B2 AA AA 52.. 	.db $55,$55,$AB,$B4,$B2,$AA,$AA,$52,$AB,$34,$55,$53,$55,$55,$2D ; $718
0C727 AB 52 AB CA 52 2B 55 55.. 	.db $AB,$52,$AB,$CA,$52,$2B,$55,$55,$55,$55,$55,$55,$55,$55,$2B ; $727
0C736 D5 52 55 55 55 55 55 55.. 	.db $D5,$52,$55,$55,$55,$55,$55,$55,$55,$55,$55 ; $736
0C741                           DPCMSampleDataEnd_BossHurt:
0C741                           
0C741                           DPCMSampleData_PlayerDeath:
0C741                           IFNDEF PLAYER_STUFF
0C741                           	.db $53,$55,$55,$55,$55,$55,$55,$55,$B5,$FA,$FE,$FF,$3F,$00,$00,$00 ; NOT logged as PCM data!
0C741                           	.db $80,$FE,$FF,$0B,$00,$00,$80,$FF,$FF,$FF,$01,$00,$00,$FC,$FF,$FF,$1F,$00 ; $10
0C741                           	.db $00,$E0,$FF,$FF,$FF,$00,$00,$00,$FF,$FF,$FF,$07,$00,$00,$E8,$FF,$FF,$1F ; $22
0C741                           	.db $00,$00,$C0,$FE,$FF,$FF,$00,$00,$00,$FE,$FF,$FF,$05,$00,$00,$A0,$FF,$FF,$7F ; $34
0C741                           	.db $00,$00,$80,$FE,$FF,$FF,$03,$00,$00,$E8,$FF,$FF,$1F,$00,$00,$80,$FF,$FF ; $47
0C741                           	.db $FF,$00,$00,$00,$FA,$FF,$FF,$07,$00,$00,$E8,$FF,$FF,$3F,$00,$00,$C0,$FE,$FF ; $59
0C741                           	.db $FF,$01,$00,$00,$FE,$FF,$FF,$01,$00,$00,$F8,$FF,$FF,$0F,$00,$00,$F0,$FF,$FF ; $6C
0C741                           	.db $0F,$00,$00,$D0,$FF,$FF,$7F,$00,$00,$80,$FE,$FF,$FF,$03,$00,$00,$FC,$FF,$FF ; $7F
0C741                           	.db $03,$00,$00,$E0,$FF,$FF,$1F,$00,$00,$E0,$FF,$FF,$1F,$00,$00,$E0,$FF,$FF ; $92
0C741                           	.db $1F,$00,$00,$E0,$FF,$FF,$1F,$00,$00,$E8,$FF,$FF,$03,$00,$00,$FC,$FF,$FF ; $A4
0C741                           	.db $03,$00,$00,$FD,$FF,$FF,$02,$00,$80,$FE,$FF,$7F,$00,$00,$80,$FF,$FF,$7F ; $B6
0C741                           	.db $00,$00,$C0,$FF,$FF,$5F,$00,$00,$A0,$FF,$FF,$2F,$00,$00,$F0,$FF,$FF,$0F ; $C8
0C741                           	.db $00,$00,$F0,$FF,$FF,$0F,$00,$00,$F0,$FF,$FF,$0B,$00,$00,$FE,$FF,$FF,$01,$00 ; $DA
0C741                           	.db $00,$FE,$FF,$3F,$00,$00,$F8,$FF,$FF,$03,$00,$00,$FF,$FF,$9F,$00,$00,$E0,$FF ; $ED
0C741                           	.db $FF,$0B,$00,$00,$FC,$FF,$7F,$02,$00,$A0,$FF,$FF,$0F,$00,$00,$FA,$FF,$FF ; $100
0C741                           	.db $01,$00,$C0,$FF,$FF,$2F,$00,$00,$F8,$FF,$FF,$00,$00,$00,$FF,$FF,$1F,$00,$00 ; $112
0C741                           	.db $EC,$FF,$FF,$03,$00,$80,$FF,$FF,$0F,$00,$00,$FA,$FF,$FF,$01,$00,$C0,$FF ; $125
0C741                           	.db $FF,$07,$00,$00,$FA,$FF,$FF,$02,$00,$00,$40,$FF,$FF,$FF,$FF,$FF,$00,$00,$00 ; $137
0C741                           	.db $00,$80,$FE,$FF,$FF,$FF,$3F,$01,$00,$00,$00,$A0,$FF,$FF,$FF,$FF,$2F ; $14A
0C741                           	.db $00,$00,$00,$00,$E8,$FF,$FF,$FF,$FF,$03,$00,$00,$00,$00,$FE,$FF,$FF,$FF,$FF ; $15B
0C741                           	.db $00,$00,$00,$00,$A0,$FF,$FF,$FF,$FF,$2F,$00,$00,$00,$00,$F4,$FF,$FF,$FF,$FF ; $16E
0C741                           	.db $01,$00,$00,$00,$40,$FF,$FF,$FF,$FF,$0F,$00,$00,$00,$00,$FD,$FF,$FF,$FF,$7F ; $181
0C741                           	.db $00,$00,$00,$00,$C0,$FF,$FF,$FF,$FF,$BF,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; $194
0C741                           	.db $3F,$00,$00,$00,$00,$E0,$FF,$FF,$FF,$FF,$0F,$00,$00,$00,$00,$F8,$FF,$FF,$FF ; $1A7
0C741                           	.db $FF,$03,$00,$00,$00,$00,$FE,$FF,$FF,$FF,$1F,$00,$00,$00,$00,$FA,$FF,$FF,$FF ; $1BA
0C741                           	.db $FF,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$2F,$00,$00,$00,$00,$FC,$FF,$FF,$FF ; $1CD
0C741                           	.db $3F,$00,$00,$00,$00,$EC,$FF,$FF,$FF,$FF,$09,$00,$00,$00,$00,$FB,$FF,$FF,$FF ; $1E0
0C741                           	.db $FF,$03,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$1F,$00,$00,$00,$00,$F0,$FF,$FF,$FF ; $1F3
0C741                           	.db $FF,$02,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$1F,$00,$00,$00,$00,$FC,$FF,$FF,$FF ; $206
0C741                           	.db $BF,$00,$00,$00,$00,$E8,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$E8,$FF,$FF,$FF,$FF ; $219
0C741                           	.db $01,$00,$00,$00,$E0,$FF,$FF,$FF,$FF,$01,$00,$00,$00,$F0,$FF,$FF,$FF,$BF,$00 ; $22C
0C741                           	.db $00,$00,$00,$F4,$FF,$FF,$FF,$7F,$01,$00,$00,$00,$E0,$FF,$FF,$FF,$FF,$01,$00 ; $23F
0C741                           	.db $00,$00,$E0,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$EC,$FF,$FF,$FF,$3F,$00,$00,$00 ; $252
0C741                           	.db $80,$FE,$FF,$FF,$FF,$07,$00,$00,$00,$A0,$FE,$FF,$FF,$FF,$00,$00,$00,$00,$FE ; $265
0C741                           	.db $FF,$FF,$FF,$13,$00,$00,$00,$E8,$FF,$FF,$FF,$3F,$00,$00,$00,$00,$FF,$FF ; $278
0C741                           	.db $FF,$FF,$01,$00,$00,$00,$EC,$FF,$FF,$FF,$1F,$00,$00,$00,$C0,$FF,$FF,$FF ; $28A
0C741                           	.db $FF,$00,$00,$00,$00,$FE,$FF,$FF,$FF,$03,$00,$00,$00,$E8,$FF,$FF,$FF,$2F,$00 ; $29C
0C741                           	.db $00,$00,$A0,$FF,$FF,$FF,$3F,$00,$00,$00,$A0,$FF,$FF,$FF,$1F,$00,$00,$00,$E8 ; $2AF
0C741                           	.db $FF,$FF,$FF,$0F,$00,$00,$00,$E8,$FF,$FF,$FF,$27,$00,$00,$00,$F8,$FF,$FF ; $2C2
0C741                           	.db $FF,$03,$00,$00,$00,$FF,$FF,$FF,$3F,$00,$00,$00,$F0,$FF,$FF,$FF,$13,$00,$00 ; $2D4
0C741                           	.db $00,$F8,$FF,$FF,$FF,$01,$00,$00,$80,$FF,$FF,$FF,$1F,$00,$00,$00,$FC,$FF ; $2E7
0C741                           	.db $FF,$BF,$00,$00,$00,$F0,$FF,$FF,$FF,$03,$00,$00,$00,$FF,$FF,$FF,$2F,$00,$00 ; $2F9
0C741                           	.db $00,$FE,$FF,$FF,$3F,$00,$00,$00,$EC,$FF,$FF,$BF,$00,$00,$00,$F8,$FF,$FF ; $30C
0C741                           	.db $BF,$00,$00,$00,$F0,$FF,$FF,$FF,$02,$00,$00,$E0,$FF,$FF,$FF,$00,$00,$00,$F8 ; $31E
0C741                           	.db $FF,$FF,$3F,$00,$00,$00,$FE,$FF,$FF,$0F,$00,$00,$80,$FF,$FF,$FF,$03,$00,$00 ; $331
0C741                           	.db $E0,$FF,$FF,$FF,$00,$00,$00,$F8,$FF,$FF,$2F,$00,$00,$C0,$FF,$FF,$BF ; $344
0C741                           	.db $00,$00,$00,$FE,$FF,$FF,$05,$00,$00,$F8,$FF,$FF,$0F,$00,$00,$A0,$FF,$FF,$7F ; $355
0C741                           	.db $02,$00,$80,$FE,$FF,$FF,$02,$00,$00,$FC,$FF,$FF,$03,$00,$00,$FC,$FF,$FF,$03 ; $368
0C741                           	.db $00,$00,$EC,$FF,$FF,$0B,$00,$00,$EC,$FF,$FF,$1F,$00,$00,$E0,$FF,$FF,$0F ; $37B
0C741                           	.db $00,$00,$F0,$FF,$FF,$17,$00,$00,$E8,$FF,$FF,$0B,$00,$00,$EC,$FF,$FF,$03,$00 ; $38D
0C741                           	.db $00,$FC,$FF,$FF,$03,$00,$00,$FD,$FF,$FF,$02,$00,$80,$FF,$FF,$3F,$00,$00,$A0 ; $3A0
0C741                           	.db $FF,$FF,$0F,$00,$00,$FA,$FF,$FF,$01,$00,$80,$FE,$FF,$3F,$00,$00,$E0,$FF ; $3B3
0C741                           	.db $FF,$17,$00,$00,$FA,$FF,$FF,$00,$00,$A0,$FF,$FF,$1F,$00,$00,$FC,$FF,$7F ; $3C5
0C741                           	.db $02,$00,$80,$FF,$FF,$0F,$00,$00,$FE,$FF,$3F,$00,$00,$F8,$FF,$FF,$00,$00,$E0 ; $3D7
0C741                           	.db $FF,$FF,$03,$00,$80,$FF,$FF,$0B,$00,$C0,$FF,$FF,$07,$00,$00,$FF,$FF,$1F ; $3EA
0C741                           	.db $00,$00,$FC,$FF,$3F,$00,$00,$F6,$FF,$3F,$00,$00,$F8,$FF,$9F,$00,$00,$FE,$FF ; $3FC
0C741                           	.db $2F,$00,$00,$FE,$FF,$3F,$00,$00,$FB,$FF,$1F,$00,$00,$FC,$FF,$0F,$00,$80,$FE ; $40F
0C741                           	.db $FF,$27,$00,$80,$FF,$FF,$03,$00,$F0,$FF,$FF,$01,$00,$E8,$FF,$BF,$00,$00 ; $422
0C741                           	.db $EC,$FF,$4F,$00,$00,$FE,$FF,$07,$00,$E0,$FF,$FF,$03,$00,$F0,$FF,$3F,$00 ; $434
0C741                           	.db $00,$F8,$FF,$5F,$00,$00,$FE,$FF,$0F,$00,$80,$FE,$FF,$27,$00,$80,$FF,$FF ; $446
0C741                           	.db $03,$00,$F0,$FF,$FF,$01,$00,$E8,$FF,$FF,$00,$00,$E0,$FF,$FF,$02,$00,$D0,$FF ; $458
0C741                           	.db $FF,$01,$00,$C0,$FF,$FF,$07,$00,$00,$FF,$FF,$0B,$00,$80,$FF,$FF,$0F,$00,$00 ; $46B
0C741                           	.db $FE,$FF,$3F,$00,$00,$F8,$FF,$BF,$00,$00,$E8,$FF,$FF,$02,$00,$F0,$FF,$FF ; $47E
0C741                           	.db $01,$00,$C0,$FF,$FF,$07,$00,$00,$FF,$FF,$0F,$00,$00,$FE,$FF,$7F,$00,$00,$F0,$FF ; $490
0C741                           	.db $FF,$01,$00,$80,$FE,$FF,$3F,$00,$00,$E8,$FF,$FF,$07,$00,$00,$FF,$FF,$1F ; $4A4
0C741                           	.db $00,$00,$EC,$FF,$FF,$03,$00,$80,$FF,$FF,$4F,$00,$00,$F0,$FF,$FF,$09,$00,$00 ; $4B6
0C741                           	.db $FE,$FF,$BF,$00,$00,$E0,$FF,$FF,$27,$00,$00,$F8,$FF,$FF,$02,$00,$80,$FF ; $4C9
0C741                           	.db $FF,$1F,$00,$00,$E8,$FF,$FF,$17,$00,$00,$74,$FF,$FF,$4B,$00,$00,$74,$FF ; $4DB
0C741                           	.db $FF,$15,$04,$00,$69,$7B,$AB,$B5,$AD,$5A,$55,$AB,$AA,$AA,$AA,$2A ; $4ED
0C741                           	.db $55,$55 ; $4FD
0C741                           ENDIF
0C741                           DPCMSampleData_BossDeath: ; is this too early...
0C741 6B                        	.db $6B
0C742                           DPCMSampleDataEnd_PlayerDeath: ; ...or is this too late?
0C742 FF 1F 00 00 E8 FF 0F 68.. 	.db $FF,$1F,$00,$00,$E8,$FF,$0F,$68,$05,$00,$A0,$FF,$FF,$0F,$DC,$00,$00 ; Logged as PCM data
0C753 DC FE FF 07 7E 00 00 F6.. 	.db $DC,$FE,$FF,$07,$7E,$00,$00,$F6,$FF,$FF,$81,$0F,$00,$00,$FE,$FF,$7F,$E0 ; $12
0C765 05 00 60 FB FF 0B 3F 00.. 	.db $05,$00,$60,$FB,$FF,$0B,$3F,$00,$00,$FC,$FF,$FF,$C0,$0E,$00,$00,$FE,$FF ; $24
0C777 3F B0 03 00 B0 FF FF 89.. 	.db $3F,$B0,$03,$00,$B0,$FF,$FF,$89,$1D,$00,$00,$EE,$FF,$7F,$68,$05,$00,$60 ; $36
0C789 FF FF 03 1F 01 00 FA FF.. 	.db $FF,$FF,$03,$1F,$01,$00,$FA,$FF,$BF,$D0,$05,$00,$C0,$FF,$FF,$07,$5E,$00 ; $48
0C79B 00 FA FF 3F B8 01 00 B0.. 	.db $00,$FA,$FF,$3F,$B8,$01,$00,$B0,$FF,$FF,$8B,$16,$00,$80,$FE,$FF,$4F ; $5A
0C7AC EC 04 00 E0 FF FF 41 27.. 	.db $EC,$04,$00,$E0,$FF,$FF,$41,$27,$00,$00,$FF,$FF,$0F,$3B,$01,$00,$F8,$FF ; $6B
0C7BE 7F E8 08 00 E0 FF FF C4.. 	.db $7F,$E8,$08,$00,$E0,$FF,$FF,$C4,$47,$00,$00,$FF,$FF,$17,$2E,$00,$00,$FA ; $7D
0C7D0 FF 3F F0 03 00 D0 FF FF.. 	.db $FF,$3F,$F0,$03,$00,$D0,$FF,$FF,$89,$0B,$00,$80,$FF,$FF,$87,$4E,$00 ; $8F
0C7E1 00 FE FF 4F 6C 00 00 FC.. 	.db $00,$FE,$FF,$4F,$6C,$00,$00,$FC,$FF,$3F,$E8,$03,$00,$E0,$FF,$FF,$62 ; $A0
0C7F2 07 00 A0 FF FF A1 07 00.. 	.db $07,$00,$A0,$FF,$FF,$A1,$07,$00,$80,$FF,$FF,$83,$17,$00,$80,$FF,$FF ; $B1
0C803 A3 15 00 00 FF FF 4B 1F.. 	.db $A3,$15,$00,$00,$FF,$FF,$4B,$1F,$00,$00,$FA,$FF,$1F,$3D,$00,$00,$FB,$FF ; $C2
0C815 1F 3A 01 00 F8 FF 1F BB.. 	.db $1F,$3A,$01,$00,$F8,$FF,$1F,$BB,$00,$00,$F8,$FF,$1F,$9B,$00,$00,$FB,$FF ; $D4
0C827 1F BA 00 00 E8 FF 1F 3D.. 	.db $1F,$BA,$00,$00,$E8,$FF,$1F,$3D,$00,$80,$FB,$FF,$1F,$1D,$00,$00,$FA ; $E6
0C838 FF 1F 9F 00 00 F8 FF 9F.. 	.db $FF,$1F,$9F,$00,$00,$F8,$FF,$9F,$78,$01,$00,$FC,$FF,$1F,$78,$01,$00,$FA ; $F7
0C84A FF 1F 3A 01 00 F8 FF 9F.. 	.db $FF,$1F,$3A,$01,$00,$F8,$FF,$9F,$14,$00,$E8,$FF,$8F,$0B,$00,$F8,$FF ; $109
0C85B FC 09 00 F8 FF BE 00 80.. 	.db $FC,$09,$00,$F8,$FF,$BE,$00,$80,$EE,$FF,$0E,$00,$E0,$FF,$EB,$04,$00,$EC ; $11A
0C86D FF 2B 02 00 FE FF 1C 00.. 	.db $FF,$2B,$02,$00,$FE,$FF,$1C,$00,$E0,$FF,$3F,$0E,$00,$B8,$FE,$EF,$0F ; $12C
0C87E 00 F8 7F FC 04 00 FC FF.. 	.db $00,$F8,$7F,$FC,$04,$00,$FC,$FF,$4E,$00,$C0,$FE,$5F,$03,$00,$EC,$FF,$2B ; $13D
0C890 02 80 FE FF 18 00 F0 FF.. 	.db $02,$80,$FE,$FF,$18,$00,$F0,$FF,$8F,$0F,$00,$F8,$FF,$FA,$01,$00,$FB,$AF ; $14F
0C8A2 0F 00 A0 FF BF 00 00 FB.. 	.db $0F,$00,$A0,$FF,$BF,$00,$00,$FB,$FF,$A2,$00,$80,$FF,$FF,$41,$00,$F8,$FF ; $161
0C8B4 E3 07 00 FC FF 5E 00 80.. 	.db $E3,$07,$00,$FC,$FF,$5E,$00,$80,$FE,$EF,$02,$00,$EC,$FF,$59,$00,$C0,$FF ; $173
0C8C6 5F 1A 00 F0 FF F5 03 00.. 	.db $5F,$1A,$00,$F0,$FF,$F5,$03,$00,$FA,$FF,$1F,$01,$80,$FB,$BF,$01,$00,$F6 ; $185
0C8D8 FF 38 00 A0 FF 3F 16 00.. 	.db $FF,$38,$00,$A0,$FF,$3F,$16,$00,$F8,$FF,$FC,$01,$00,$FA,$FF,$0F,$00,$B0 ; $197
0C8EA FF 2F 01 00 FF 7F 08 00.. 	.db $FF,$2F,$01,$00,$FF,$7F,$08,$00,$F8,$FF,$C7,$05,$00,$FB,$FF,$8F,$00,$A0 ; $1A9
0C8FC FF 5F 01 00 FF 5F 08 00.. 	.db $FF,$5F,$01,$00,$FF,$5F,$08,$00,$F4,$FF,$C7,$00,$80,$FF,$FF,$0F,$00,$F0 ; $1BB
0C90E FF 3D 00 80 FF 8F 01 00.. 	.db $FF,$3D,$00,$80,$FF,$8F,$01,$00,$FF,$FF,$98,$00,$60,$FF,$FF,$03,$00,$F6 ; $1CD
0C920 7F 27 00 E0 FF 4B 00 C0.. 	.db $7F,$27,$00,$E0,$FF,$4B,$00,$C0,$FF,$1F,$2F,$00,$F0,$FF,$7F,$00,$80 ; $1DF
0C931 FE BF 04 00 FC FF 48 00.. 	.db $FE,$BF,$04,$00,$FC,$FF,$48,$00,$E8,$FF,$E3,$07,$00,$FE,$FF,$07,$00,$D8 ; $1F0
0C943 FF 95 00 80 FF 3F 04 00.. 	.db $FF,$95,$00,$80,$FF,$3F,$04,$00,$FB,$FF,$1F,$00,$F0,$FF,$1D,$00,$60 ; $202
0C954 FF 8F 02 80 FE 1F 3F 00.. 	.db $FF,$8F,$02,$80,$FE,$1F,$3F,$00,$E8,$FF,$7F,$00,$C0,$FE,$63,$00,$C0 ; $213
0C965 FF 3F 06 00 FD FF 1F 00.. 	.db $FF,$3F,$06,$00,$FD,$FF,$1F,$00,$D0,$FF,$3A,$00,$A0,$FF,$8F,$01,$80 ; $224
0C976 FE FF 17 00 E8 FF 0E 00.. 	.db $FE,$FF,$17,$00,$E8,$FF,$0E,$00,$E8,$FF,$63,$00,$C0,$FF,$FF,$06,$00,$FA ; $235
0C988 BF 03 00 FE BF 28 00 E8.. 	.db $BF,$03,$00,$FE,$BF,$28,$00,$E8,$FF,$7F,$00,$C0,$FF,$57,$00,$A0,$FF ; $247
0C999 A7 08 00 FF FF 0F 00 F8.. 	.db $A7,$08,$00,$FF,$FF,$0F,$00,$F8,$BF,$23,$00,$E8,$FF,$71,$00,$E0,$FF,$FF ; $258
0C9AB 00 80 FF A7 00 40 FF CF.. 	.db $00,$80,$FF,$A7,$00,$40,$FF,$CF,$0A,$00,$FE,$FF,$2F,$00,$E0,$FF,$0A ; $26A
0C9BC 00 F8 FF E2 00 B0 FF FF.. 	.db $00,$F8,$FF,$E2,$00,$B0,$FF,$FF,$00,$80,$FF,$4B,$00,$C0,$FF,$EB,$07 ; $27B
0C9CD 80 F7 FF 00 00 FB 3F 14.. 	.db $80,$F7,$FF,$00,$00,$FB,$3F,$14,$00,$F6,$FF,$3F,$00,$E0,$FF,$06,$00,$F8 ; $28C
0C9DF FF E2 00 B0 FF 7F 01 40.. 	.db $FF,$E2,$00,$B0,$FF,$7F,$01,$40,$FF,$59,$00,$C0,$FF,$EF,$03,$80,$FF ; $29E
0C9F0 AF 00 80 FF 8F 02 80 FE.. 	.db $AF,$00,$80,$FF,$8F,$02,$80,$FE,$FF,$07,$00,$FC,$3F,$09,$00,$FD,$AF,$1F ; $2AF
0CA02 00 F6 FF 03 00 FC 3F 0A.. 	.db $00,$F6,$FF,$03,$00,$FC,$3F,$0A,$00,$F8,$FF,$5F,$00,$F0,$FF,$24,$00,$EC ; $2C1
0CA14 7F 7F 00 D0 FF 0D 00 F8.. 	.db $7F,$7F,$00,$D0,$FF,$0D,$00,$F8,$FF,$18,$00,$E8,$FF,$7F,$00,$C0,$FF ; $2D3
0CA25 13 00 F0 FF 7F 01 A0 FF.. 	.db $13,$00,$F0,$FF,$7F,$01,$A0,$FF,$29,$00,$E8,$FF,$E3,$00,$A0,$FF,$BF ; $2E4
0CA36 00 60 FF 4B 00 C0 FF FF.. 	.db $00,$60,$FF,$4B,$00,$C0,$FF,$FF,$02,$80,$FF,$87,$00,$E0,$FF,$B9,$03 ; $2F5
0CA47 C0 FE FF 00 80 FF 27 04.. 	.db $C0,$FE,$FF,$00,$80,$FF,$27,$04,$00,$FF,$FF,$0B,$00,$FE,$1F,$05,$00,$FD ; $306
0CA59 EF 0F 00 FD DF 01 00 FE.. 	.db $EF,$0F,$00,$FD,$DF,$01,$00,$FE,$1F,$1B,$00,$EC,$FF,$4F,$00,$F8,$7F,$08 ; $318
0CA6B 00 F8 FF 3F 00 F0 FF 06.. 	.db $00,$F8,$FF,$3F,$00,$F0,$FF,$06,$00,$FC,$7F,$F4,$00,$A0,$FF,$3F,$00,$E0 ; $32A
0CA7D FF 31 00 E8 FF BF E0 0E.. 	.db $FF,$31,$00,$E8,$FF,$BF,$E0,$0E,$00,$00,$F6,$FF,$FF,$0B,$8E,$00,$A0 ; $33C
0CA8E FF 1F 00 FC 3F 00 FD 07.. 	.db $FF,$1F,$00,$FC,$3F,$00,$FD,$07,$D0,$7F,$03,$B0,$FF,$02,$80,$FF,$DB ; $34D
0CA9F 01 00 F8 FF FF 02 BA 01.. 	.db $01,$00,$F8,$FF,$FF,$02,$BA,$01,$00,$A0,$FF,$FF,$A7,$03,$00,$FE,$BF,$00,$FA ; $35E
0CAB2 0F 40 FF 09 C0 FF 03 C0.. 	.db $0F,$40,$FF,$09,$C0,$FF,$03,$C0,$FF,$03,$00,$FF,$7F,$F8,$08,$00,$C0,$FE ; $371
0CAC4 FF BF 80 97 00 00 FD FF.. 	.db $FF,$BF,$80,$97,$00,$00,$FD,$FF,$27,$00,$FA,$7F,$00,$FA,$0F,$40,$FF ; $383
0CAD5 05 E0 FF 01 E0 BF 2E 00.. 	.db $05,$E0,$FF,$01,$E0,$BF,$2E,$00,$E0,$FF,$7F,$C0,$0F,$00,$00,$F6,$FF,$FF ; $394
0CAE7 0B 8E 00 A0 FF 1F 00 FC.. 	.db $0B,$8E,$00,$A0,$FF,$1F,$00,$FC,$3F,$80,$FE,$03,$D0,$7F,$02,$F0,$FF ; $3A6
0CAF8 04 80 FF FB 08 00 E8 FE.. 	.db $04,$80,$FF,$FB,$08,$00,$E8,$FE,$FF,$07,$B8,$03,$00,$80,$FF,$FF,$AB,$03 ; $3B7
0CB0A 00 FE 9F 00 FE 0F 40 FF.. 	.db $00,$FE,$9F,$00,$FE,$0F,$40,$FF,$01,$F8,$BF,$02,$E8,$DF,$01,$00,$FF,$7F ; $3C9
0CB1C F8 08 00 C0 FE FF 7F 81.. 	.db $F8,$08,$00,$C0,$FE,$FF,$7F,$81,$8E,$00,$80,$FE,$7F,$07,$00,$FF,$2F ; $3DB
0CB2D 00 FB 0F A0 FF 00 F0 FF.. 	.db $00,$FB,$0F,$A0,$FF,$00,$F0,$FF,$00,$E0,$FF,$0F,$00,$C0,$FF,$FF,$C0 ; $3EC
0CB3E 4F 00 00 F4 FF FF 0B 0D.. 	.db $4F,$00,$00,$F4,$FF,$FF,$0B,$D,$00,$B0,$FF,$2F,$80,$FE,$2D,$80,$7F ; $3FD
0CB4F 03 B0 FF 00 F8 EF 00 D0.. 	.db $03,$B0,$FF,$00,$F8,$EF,$00,$D0,$FF,$ED,$08,$00,$D0,$FF,$FF,$07,$F0,$03 ; $40E
0CB61 00 80 FF FF 79 01 C0 FF.. 	.db $00,$80,$FF,$FF,$79,$01,$C0,$FF,$17,$00,$FF,$03,$E0,$7F,$02,$F8,$3F ; $420
0CB72 00 FC BF 02 80 FE BF F8.. 	.db $00,$FC,$BF,$02,$80,$FE,$BF,$F8,$01,$00,$C0,$FE,$FF,$7F,$81,$0B,$00,$80 ; $431
0CB84 FF FF 09 40 FF 0B A0 FF.. 	.db $FF,$FF,$09,$40,$FF,$0B,$A0,$FF,$00,$EC,$3F,$00,$FD,$1F,$00,$FC,$DF ; $443
0CB95 09 00 F8 FF 1F D8 0B 00.. 	.db $09,$00,$F8,$FF,$1F,$D8,$0B,$00,$00,$FE,$FF,$FF,$D0,$01,$00,$FE,$7F,$02,$B0 ; $454
0CBA8 FF 02 F0 5F 00 FE 0F 00.. 	.db $FF,$02,$F0,$5F,$00,$FE,$0F,$00,$FF,$8F,$00,$F8,$FF,$D8,$05,$00,$C0,$FF ; $467
0CBBA FF 3F 80 0F 00 80 FE      	.db $FF,$3F,$80,$0F,$00,$80,$FE ; $479
0CBC1                           DPCMSampleDataEnd_BossDeath:
0CBC1                           
0CBC1                           ; sort of a zapping sound
0CBC1                           DPCMSampleData_Unused:
0CBC1                           IFNDEF PLAYER_STUFF
0CBC1                           	.db $FF
0CBC1                           	.db $5B,$02,$C0,$FF,$03,$D0,$FF,$02,$F8,$57,$00,$FB,$2F,$00,$FA,$BF,$01,$00 ; NOT logged as PCM data!
0CBC1                           	.db $FE,$FF,$07,$7E,$02,$00,$C0,$FE,$FF,$7F,$E0,$04,$00,$F4,$FF,$AB,$01,$00 ; $12
0CBC1                           	.db $FF,$BF,$02,$80,$FF,$2F,$00,$FE,$2F,$00,$FC,$3F,$80,$FE,$23,$80 ; $24
0CBC1                           	.db $FF,$02,$F8,$1F,$40,$FF,$03,$E0,$BF,$03,$E8,$BF,$02,$D0,$FF,$02,$C0 ; $34
0CBC1                           	.db $FF,$0B,$00,$FE,$5F,$07,$00,$FC,$FF,$F1,$02,$00,$F0,$FF,$3F,$B8,$03,$00,$C0 ; $45
0CBC1                           	.db $EF,$FF,$7F,$80,$3B,$00,$00,$D8,$FF,$FF,$3F,$C0,$13,$00,$80,$FE ; $58
0CBC1                           	.db $FF,$8F,$8E,$00,$80,$FF,$3F,$0F,$00,$F8,$FF,$0A,$00,$FE,$BF,$00,$F4 ; $68
0CBC1                           	.db $7F,$00,$F0,$FF,$00,$FA,$8F,$00,$FE,$0B,$D0,$7F,$00,$FB,$0F,$00,$FF,$0F ; $79
0CBC1                           	.db $00,$FF,$0F,$00,$FF,$5F,$00,$F8,$DF,$01,$80,$FE,$EF,$05,$00,$EC,$FF,$CB ; $8B
0CBC1                           	.db $13,$00,$C0,$FF,$FF,$09,$EE,$00,$00,$70,$FF,$FF,$9F,$00,$7E,$00,$00,$B8 ; $9D
0CBC1                           	.db $FF,$FF,$0F,$74,$03,$00,$E0,$FF,$7F,$E2,$03,$00,$EC,$FF,$3B,$00,$C0,$FF ; $AF
0CBC1                           	.db $9F,$00,$F0,$FF,$04,$B0,$BF,$07,$80,$FF,$07,$C0,$7F,$05,$F0,$1F,$C0 ; $C1
0CBC1                           	.db $FE,$01,$F8,$BF,$02,$E8,$3F,$02,$F8,$BF,$02,$D0,$FF,$02,$40,$FF,$77 ; $D2
0CBC1                           	.db $00,$40,$FD,$FF,$06,$00,$F8,$FF,$1F,$3C,$01,$00,$F8,$FF,$FF,$40,$37 ; $E3
0CBC1                           	.db $00,$00,$B8,$FF,$FF,$7F,$00,$3B,$01,$00,$D0,$FF,$FF,$27,$3A,$02,$00,$F8 ; $F4
0CBC1                           	.db $FF,$2F,$0F,$00,$E0,$FF,$EB,$02,$80,$FF,$1F,$01,$E8,$FF,$01,$E0,$FF ; $106
0CBC1                           	.db $0A,$80,$FF,$0B,$A0,$FF,$00,$FC,$17,$C0,$FF,$00,$F0,$FF,$00,$F0,$FF ; $117
0CBC1                           	.db $02,$D0,$7F,$07,$80,$FF,$9D,$00,$E0,$FF,$3B,$00,$C0,$FE,$9F,$5D,$01 ; $128
0CBC1                           	.db $00,$F8,$FF,$5F,$F8,$0A,$00,$00,$FF,$FF,$7F,$01,$EE,$00,$00,$A0,$FF,$FF ; $139
0CBC1                           	.db $7F,$C0,$4E,$00,$00,$FE,$FF,$1F,$3A,$00,$00,$FE,$FF,$3D,$00,$60,$FF ; $14B
0CBC1                           	.db $3F,$00,$F8,$DF,$01,$C0,$FF,$0B,$00,$FF,$1F,$00,$FE,$0F,$C0,$7F,$02,$FC ; $15C
0CBC1                           	.db $0F,$A0,$FF,$0A,$80,$FF,$07,$00,$FF,$4F,$00,$FC,$7F,$01,$C0,$FF,$6B ; $16E
0CBC1                           	.db $00,$C0,$FF,$AF,$0E,$00,$C0,$FF,$FF,$C4,$07,$00,$00,$FF,$FF,$BF,$80,$AF ; $17F
0CBC1                           	.db $00,$00,$E0,$FF,$FF,$5F,$C0,$2E,$00,$00,$F4,$FF,$FF,$A1,$13,$00,$80 ; $191
0CBC1                           	.db $FF,$BF,$3E,$00,$C0,$FF,$77,$00,$A0,$FF,$1F,$00,$FC,$7F,$01,$E0,$FF ; $1A2
0CBC1                           	.db $01,$E0,$FF,$00,$E8,$3F,$80,$FF,$05,$F0,$BF,$00,$F4,$BF,$00,$F4,$EF ; $1B3
0CBC1                           	.db $00,$F0,$BF,$07,$80,$FD,$6F,$01,$80,$FF,$8F,$0B,$00,$B8,$FF,$3F,$3A ; $1C4
0CBC1                           	.db $02,$00,$BA,$FF,$FF,$80,$56,$00,$04,$75,$FB,$FF,$1F,$C0,$56,$00,$84 ; $1D5
0CBC1                           	.db $DA,$7F,$FF,$09,$5C,$04,$40,$ED,$FF,$87,$16,$00,$DA,$FF,$65,$01,$E0 ; $1E6
0CBC1                           	.db $FF,$31,$02,$FA,$CF,$0A,$E0,$7F ; $1F7
0CBC1                           ENDIF
0CBC1                           DPCMSampleDataEnd_Unused:
0CBC1                           
0CBC1                           DPCMSampleData_PlayerHurt:
0CBC1 55 95 55 55 55 55 55 55.. 	.db $55,$95,$55,$55,$55,$55,$55,$55,$D5,$AA,$FF,$3F,$00,$48,$25 ; Logged as PCM data
0CBD0 B0 8B 80 AE 0B F8 4F 80.. 	.db $B0,$8B,$80,$AE,$0B,$F8,$4F,$80,$7F,$0B,$EC,$2F,$A0,$7F,$23 ; $F
0CBDF F0 4F C4 DF 09 F8 27 A2.. 	.db $F0,$4F,$C4,$DF,$09,$F8,$27,$A2,$DF,$0B,$E8,$95,$D0,$6F,$03,$F4 ; $1E
0CBEF 4A E4 3F 01 FA 49 F0 BF.. 	.db $4A,$E4,$3F,$01,$FA,$49,$F0,$BF,$00,$FC,$05,$F1,$AF,$00,$FE,$13,$D8 ; $2E
0CC00 2F 00 FF 09 EC 2F 80 FE.. 	.db $2F,$00,$FF,$09,$EC,$2F,$80,$FE,$05,$F6,$0D,$C0,$7F,$01,$FD,$46,$00,$FF ; $3F
0CC12 05 EC 9F 00 E8 3F A0 FF.. 	.db $05,$EC,$9F,$00,$E8,$3F,$A0,$FF,$02,$A0,$FF,$02,$FE,$17,$00,$FE,$83 ; $51
0CC23 F8 5F 00 F8 4B 62 FF 04.. 	.db $F8,$5F,$00,$F8,$4B,$62,$FF,$04,$E0,$9F,$84,$7D,$2F,$80,$5F,$05 ; $62
0CC33 BE 57 C0 7E 11 FC BA 02.. 	.db $BE,$57,$C0,$7E,$11,$FC,$BA,$02,$FB,$05,$70,$6F,$0B,$EC,$2F,$80 ; $72
0CC43 5D 2F 80 FF 22 B0 7F 05.. 	.db $5D,$2F,$80,$FF,$22,$B0,$7F,$05,$D0,$FF,$04,$FA,$5F,$00,$FA,$93 ; $82
0CC53 84 BE 8B C0 3E 82 F8 DB.. 	.db $84,$BE,$8B,$C0,$3E,$82,$F8,$DB,$02,$FC,$0F,$00,$FF,$5A,$00,$FA,$5F ; $92
0CC64 A0 FF 06 00 FF 4F 60 DF.. 	.db $A0,$FF,$06,$00,$FF,$4F,$60,$DF,$4E,$00,$BF,$20,$70,$5F,$07,$40,$FF ; $A3
0CC75 0F 42 FF 4F 00 BF 54 A0.. 	.db $0F,$42,$FF,$4F,$00,$BF,$54,$A0,$5F,$27,$00,$FF,$0B,$40,$FF,$0B,$00 ; $B4
0CC86 FB 7F 80 7F 37 01 F8 0F.. 	.db $FB,$7F,$80,$7F,$37,$01,$F8,$0F,$02,$F8,$DF,$12,$00,$C0,$EB,$7F,$B7 ; $C5
0CC97 AD AD 56 B5 AA 2A 55 55.. 	.db $AD,$AD,$56,$B5,$AA,$2A,$55,$55,$A5,$4A,$2D,$55,$A9,$52,$55 ; $D6
0CCA6 A9 2A 55 A9 AA 4A 55 55.. 	.db $A9,$2A,$55,$A9,$AA,$4A,$55,$55,$A5,$A9,$AA,$5A,$AA,$AA,$AA ; $E5
0CCB5 AA AA AA AA 6A A5 69 55.. 	.db $AA,$AA,$AA,$AA,$6A,$A5,$69,$55,$55,$55,$2D,$35,$00 ; $F4
0CCC2                           DPCMSampleDataEnd_PlayerHurt:
0CCC2                           
0CCC2                           DPCMSampleData_DoorOpenBombBom:
0CCC2 B0 82                     	.db $B0,$82
0CCC4 20 59 52 04 00 FD FF 07.. 	.db $20,$59,$52,$04,$00,$FD,$FF,$07,$00,$F8,$FF,$FF,$17,$C0,$F6,$FF,$7F ; $103
0CCD5 00 80 D4 7D FF 57 95 A0.. 	.db $00,$80,$D4,$7D,$FF,$57,$95,$A0,$A6,$B5,$9A,$2A,$4D,$DD,$4B ; $114
0CCE4 92 20 A4 96 DB F6 75 FF.. 	.db $92,$20,$A4,$96,$DB,$F6,$75,$FF,$01,$00,$00,$F0,$AF,$25,$01,$40,$D5 ; $123
0CCF5 FA FF FF 01 00 04 B0 BF.. 	.db $FA,$FF,$FF,$01,$00,$04,$B0,$BF,$FB,$27,$11,$92,$48,$69,$55,$AB ; $134
0CD05 AD 04 D8 6A DF FE 5F A5.. 	.db $AD,$04,$D8,$6A,$DF,$FE,$5F,$A5,$24,$00,$DA,$C0,$EE,$D3,$BE,$FF ; $144
0CD15 FF FB 4F EA 47 80 00 41.. 	.db $FF,$FB,$4F,$EA,$47,$80,$00,$41,$00,$50,$D5,$6A,$D5,$FE,$8A,$22 ; $154
0CD25 28 49 D3 34 55 57 55 AA.. 	.db $28,$49,$D3,$34,$55,$57,$55,$AA,$9A,$AA,$02,$D0,$F6,$96,$EC ; $164
0CD34 BA EF FF 2A 55 AB 24 89.. 	.db $BA,$EF,$FF,$2A,$55,$AB,$24,$89,$00,$A8,$6D,$2B,$50,$7D,$DF ; $173
0CD43 F6 B6 5A B5 7E 93 48 88.. 	.db $F6,$B6,$5A,$B5,$7E,$93,$48,$88,$84,$4A,$95,$2A,$01,$E0,$DD ; $182
0CD52 76 AD 6B DB FD FF 2F 00.. 	.db $76,$AD,$6B,$DB,$FD,$FF,$2F,$00,$00,$00,$00,$00,$BF,$EF,$DB,$DB,$6A ; $191
0CD63 6B B5 52 AB AA AA AA CA.. 	.db $6B,$B5,$52,$AB,$AA,$AA,$AA,$CA,$B2,$54,$55,$4A,$AB,$54,$95 ; $1A2
0CD72 95 AA 4A AB 34 55 53 35.. 	.db $95,$AA,$4A,$AB,$34,$55,$53,$35,$55,$55,$55,$55,$55,$55,$55 ; $1B1
0CD81 D5 B4 B2 AA AA AA AA AA.. 	.db $D5,$B4,$B2,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$5A,$59,$A9 ; $1C0
0CD90 55 55 69 55 55 55 55 CB.. 	.db $55,$55,$69,$55,$55,$55,$55,$CB,$52,$AB,$AA,$AA,$AA,$2A,$AD ; $1CF
0CD9F AA AA B2 AA AA B2 AA AA.. 	.db $AA,$AA,$B2,$AA,$AA,$B2,$AA,$AA,$52,$2B,$2B,$B5,$52,$55,$55 ; $1DE
0CDAE 53 55 55 53 55 55 55 55.. 	.db $53,$55,$55,$53,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55 ; $1ED
0CDBD 55 55 69 55 55 69 55 55.. 	.db $55,$55,$69,$55,$55,$69,$55,$55,$55,$55,$55,$95,$55,$55,$69 ; $1FC
0CDCC 55 55 55 55 55 55 55 59.. 	.db $55,$55,$55,$55,$55,$55,$55,$59,$A9,$A5,$AA,$AA,$5A,$55,$96 ; $20B
0CDDB 55 A5 AA 65 A9 AA 9A AA.. 	.db $55,$A5,$AA,$65,$A9,$AA,$9A,$AA,$AA,$AA,$5A,$AA,$5A,$A5,$A9 ; $21A
0CDEA A5 AA AA AA AA AA AA AA.. 	.db $A5,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA ; $229
0CDF9 6A 59 AA 95 A6 AA 65 A9.. 	.db $6A,$59,$AA,$95,$A6,$AA,$65,$A9,$AA,$AA,$AA,$AA,$A5,$A6,$A9 ; $238
0CE08 55 A5 A9 AA AA A9 65 59.. 	.db $55,$A5,$A9,$AA,$AA,$A9,$65,$59,$A9,$55,$55,$A9,$55,$A5,$A9 ; $247
0CE17 55 A5 69 65 59 A9 55 55.. 	.db $55,$A5,$69,$65,$59,$A9,$55,$55,$69,$55,$55,$A9,$55,$A5,$69 ; $256
0CE26 65 55 69 55 55 55 55 B5.. 	.db $65,$55,$69,$55,$55,$55,$55,$B5,$EA,$FF,$FF,$03,$00,$09,$40,$04,$00 ; $265
0CE37 E8 07 00 FE 1F F4 FF 03.. 	.db $E8,$07,$00,$FE,$1F,$F4,$FF,$03,$F4,$FF,$97,$B6,$57,$EF,$BE,$09,$6A ; $276
0CE48 BF FF 03 00 5C 00 F4 FF.. 	.db $BF,$FF,$03,$00,$5C,$00,$F4,$FF,$03,$00,$ED,$27,$00,$42,$25,$00,$EE,$9F ; $287
0CE5A 00 00 F8 FF FF FF 5F 54.. 	.db $00,$00,$F8,$FF,$FF,$FF,$5F,$54,$FB,$49,$90,$AA,$24,$02,$00,$F7,$FF ; $299
0CE6B 05 00 E8 FF FF 13 40 FB.. 	.db $05,$00,$E8,$FF,$FF,$13,$40,$FB,$FF,$3F,$00,$00,$D8,$F6,$FE,$AD,$54 ; $2AA
0CE7C 90 55 AB 96 A5 D4 EA 93.. 	.db $90,$55,$AB,$96,$A5,$D4,$EA,$93,$0A,$01,$65,$D5,$6E,$DD,$B7,$FF ; $2BB
0CE8C 00 00 00 F8 DF 92 04 00.. 	.db $00,$00,$00,$F8,$DF,$92,$04,$00,$55,$FF,$FF,$FF,$04,$00,$00,$D4,$BF,$FD,$27 ; $2CB
0CE9F 09 51 92 CA B2 DA 5A 09.. 	.db $09,$51,$92,$CA,$B2,$DA,$5A,$09,$68,$AB,$BD,$FF,$37,$55,$25,$01 ; $2DE
0CEAF B0 05 F6 4B EF FF FF DD.. 	.db $B0,$05,$F6,$4B,$EF,$FF,$FF,$DD,$7F,$52,$3F,$01,$02,$20,$00,$40,$55 ; $2EE
0CEC0 5B 55 DB 5F 48 22 49 A9.. 	.db $5B,$55,$DB,$5F,$48,$22,$49,$A9,$AA,$AA,$6A,$55,$55,$55,$55 ; $2FF
0CECF 29 01 DA DE 92 D5 B7 F7.. 	.db $29,$01,$DA,$DE,$92,$D5,$B7,$F7,$BF,$54,$69,$2B,$29,$12,$00,$AA ; $30E
0CEDF 6B 13 A8 ED 7B F7 B6 6A.. 	.db $6B,$13,$A8,$ED,$7B,$F7,$B6,$6A,$B5,$FD,$92,$44,$48,$84,$4A ; $31E
0CEEE AA 2A 01 60 FB BA B5 6D.. 	.db $AA,$2A,$01,$60,$FB,$BA,$B5,$6D,$AB,$FD,$FF,$7F,$00,$00,$00,$00,$40 ; $32D
0CEFF DB A2 DA B7 6B 9B AA B5.. 	.db $DB,$A2,$DA,$B7,$6B,$9B,$AA,$B5,$DB,$AA,$55,$6B,$55,$69,$55 ; $33E
0CF0E 7B A9 A4 24 95 25 A5 4A.. 	.db $7B,$A9,$A4,$24,$95,$25,$A5,$4A,$55,$A5,$42,$6A,$B5,$6A,$AB ; $34D
0CF1D D6 AA 6A 55 55 AD CA 52.. 	.db $D6,$AA,$6A,$55,$55,$AD,$CA,$52,$D3,$54,$A9,$55,$55,$55,$55 ; $35C
0CF2C 55 55 DB 55 4A 95 4A AA.. 	.db $55,$55,$DB,$55,$4A,$95,$4A,$AA,$2A,$55,$09,$6A,$B5,$55,$DB ; $36B
0CF3B AA 69 AB B6 AB 52 A5 6A.. 	.db $AA,$69,$AB,$B6,$AB,$52,$A5,$6A,$2F,$45,$4A,$DD,$FF,$03,$00,$00 ; $37A
0CF4B 00 00 F6 EF FF B6 EB FD.. 	.db $00,$00,$F6,$EF,$FF,$B6,$EB,$FD,$7F,$89,$94,$4A,$91,$22,$01,$68 ; $38A
0CF5B 6B 55 AD DB FE 4F A5 F4.. 	.db $6B,$55,$AD,$DB,$FE,$4F,$A5,$F4,$4B,$04,$01,$48,$52,$09,$68,$DB ; $39A
0CF6B BF AB ED 5F 12 92 28 A9.. 	.db $BF,$AB,$ED,$5F,$12,$92,$28,$A9,$24,$D5,$B2,$6A,$D5,$6A,$AB ; $3AA
0CF7A 4A 00 DB B6 B6 7D FF 52.. 	.db $4A,$00,$DB,$B6,$B6,$7D,$FF,$52,$2A,$A5,$02,$40,$55,$70,$BB,$DA ; $3B9
0CF8A FD 7F DB 4F D5 5E 40 04.. 	.db $FD,$7F,$DB,$4F,$D5,$5E,$40,$04,$21,$00,$55,$AB,$EA,$9F,$48,$48 ; $3C9
0CF9A 2A 55 55 55 55 02 54 55.. 	.db $2A,$55,$55,$55,$55,$02,$54,$55,$ED,$FF,$DB,$4A,$04,$28,$B0,$FB ; $3D9
0CFAA BF 7F 13 29 80 DA BE FF.. 	.db $BF,$7F,$13,$29,$80,$DA,$BE,$FF,$3F,$00,$00,$60,$B5,$EB,$5F,$4B ; $3E9
0CFBA 89 D2 B4 6A 53 55 55 5F.. 	.db $89,$D2,$B4,$6A,$53,$55,$55,$5F,$29,$11,$52,$D5,$6D,$DF,$FF ; $3F9
0CFC9 03 00 00 FC 2B 01 48 EB.. 	.db $03,$00,$00,$FC,$2B,$01,$48,$EB,$FF,$5F,$04,$00,$ED,$FD,$49,$48,$A4,$CA ; $408
0CFDB 12 50 F5 FE 55 01 80 EA.. 	.db $12,$50,$F5,$FE,$55,$01,$80,$EA,$FE,$FF,$FF,$7F,$01,$5A,$77,$91 ; $41A
0CFEB A4 4A 89 00 A1 7F 2F 01.. 	.db $A4,$4A,$89,$00,$A1,$7F,$2F,$01,$A0,$FB,$7F,$02,$DA,$FF,$0B,$00,$D5 ; $42A
0CFFC ED 9F 8A AA D5 B4 B6 93.. 	.db $ED,$9F,$8A,$AA,$D5,$B4,$B6,$93,$88,$6A,$FF,$7E,$00,$40,$2B ; $43B
0D00B 02 F8 FF 01 40 F7 91 20.. 	.db $02,$F8,$FF,$01,$40,$F7,$91,$20,$29,$80,$FA,$46,$00,$E0,$FF,$FF ; $44A
0D01B FF D1 5D 2A 25 01 E8 5E.. 	.db $FF,$D1,$5D,$2A,$25,$01,$E8,$5E,$00,$EC,$7F,$82,$FB,$4F,$40,$DF ; $45A
0D02B AF 52 DB DA AD 92 F6 FF.. 	.db $AF,$52,$DB,$DA,$AD,$92,$F6,$FF,$00,$B0,$01,$FA,$5F,$00,$7D,$41 ; $46A
0D03B 90 00 74 11 00 FE FF BF.. 	.db $90,$00,$74,$11,$00,$FE,$FF,$BF,$BE,$92,$2A,$00,$6E,$05,$B0,$BF,$E8 ; $47A
0D04C 7F 80 FA A7 B5 6D 77 52.. 	.db $7F,$80,$FA,$A7,$B5,$6D,$77,$52,$DF,$2F,$A0,$15,$A8,$7F,$A0 ; $48B
0D05B 5E 40 04 D0 02 00 FE FF.. 	.db $5E,$40,$04,$D0,$02,$00,$FE,$FF,$DF,$2B,$4A,$04,$B8,$02,$F8,$8B,$FE ; $49A
0D06C 07 B8 AF DA DB 97 DA FF.. 	.db $07,$B8,$AF,$DA,$DB,$97,$DA,$FF,$03,$38,$D0,$7F,$C0,$2E,$82,$00 ; $4AB
0D07C 58 00 C0 FF FF 2F 25 01.. 	.db $58,$00,$C0,$FF,$FF,$2F,$25,$01,$9A,$00,$FD,$D0,$7F,$A0,$FB,$AA ; $4BB
0D08C EB BB AA FF C0 26 EC 17.. 	.db $EB,$BB,$AA,$FF,$C0,$26,$EC,$17,$75,$41,$04,$30,$02,$C0,$FF,$BF ; $4CB
0D09C 2B 45 80 23 D0 49 7F C1.. 	.db $2B,$45,$80,$23,$D0,$49,$7F,$C1,$6E,$EB,$B6,$AF,$FA,$7E,$E0 ; $4DB
0D0AB 85 FE 42 17 41 80 04 80.. 	.db $85,$FE,$42,$17,$41,$80,$04,$80,$FF,$DF,$55,$12,$D0,$08,$6C,$EA ; $4EA
0D0BB 0F EC D5 AE 6F DD 5F 74.. 	.db $0F,$EC,$D5,$AE,$6F,$DD,$5F,$74,$E4,$2F,$F4,$04,$08,$14,$00,$FE,$BF ; $4FA
0D0CC AB 44 A0 00 57 EC 43 BB.. 	.db $AB,$44,$A0,$00,$57,$EC,$43,$BB,$EA,$DB,$A7,$EF,$87,$4E,$EE ; $50B
0D0DB C3 4E 80 80 00 F0 FF 37.. 	.db $C3,$4E,$80,$80,$00,$F0,$FF,$37,$95,$80,$0A,$E8,$E8,$0F,$EC,$DA ; $51A
0D0EB DB AB FB C9 43 7F B1      	.db $DB,$AB,$FB,$C9,$43,$7F,$B1 ; $52A
0D0F2 89 00 0A 00 FF DF 49 02.. 	.db $89,$00,$0A,$00,$FF,$DF,$49,$02,$0A,$70,$EA,$07,$EE,$EA,$F6 ; NOT logged as PCM data
0D101                           DPCMSampleDataEnd_DoorOpenBombBom:
0D101                           
0D101                           IFNDEF PROTOTYPE_DPCM_SAMPLES
0D101                           DPCMSampleData_DrumSample:
0D101 6A 55 55 D5 54 AA 5A 55.. 	.db $6A,$55,$55,$D5,$54,$AA,$5A,$55,$55,$85,$D8,$EA,$D7,$FF,$02 ; Logged as PCM data
0D110 00 00 FE FF 5F 62 00 00.. 	.db $00,$00,$FE,$FF,$5F,$62,$00,$00,$00,$FF,$FF,$FF,$27,$00,$00,$E8,$FF,$FF ; $F
0D122 07 00 FC FF FF FF 00 00.. 	.db $07,$00,$FC,$FF,$FF,$FF,$00,$00,$00,$F8,$FF,$03,$00,$80,$FD,$FF,$7F,$00,$00 ; $21
0D135 B0 FF FF 01 00 00 FF FF.. 	.db $B0,$FF,$FF,$01,$00,$00,$FF,$FF,$FF,$0F,$00,$00,$FE,$FF,$05,$00,$00,$FA,$FF ; $34
0D148 5F 04 80 EE FF FF 1F 00.. 	.db $5F,$04,$80,$EE,$FF,$FF,$1F,$00,$00,$00,$FA,$FF,$03,$00,$BA,$FF,$FF,$5F ; $47
0D15A 00 00 D0 EF EF 08 00 40.. 	.db $00,$00,$D0,$EF,$EF,$08,$00,$40,$FF,$FF,$FF,$08,$00,$D8,$FF,$FF,$02,$00,$00 ; $59
0D16D F8 FF 6F 13 01 6A FB B6.. 	.db $F8,$FF,$6F,$13,$01,$6A,$FB,$B6,$AA,$00,$40,$B6,$FF,$B7,$12,$24 ; $6C
0D17D B5 ED 6B 49 00 64 BB B7.. 	.db $B5,$ED,$6B,$49,$00,$64,$BB,$B7,$93,$44,$A9,$55,$F5,$ED,$AB ; $7C
0D18C 44 80 94 A6 B7 9B 54 6A.. 	.db $44,$80,$94,$A6,$B7,$9B,$54,$6A,$95,$56,$B5,$5A,$35,$95,$22 ; $8B
0D19B A4 B6 6A DB 6A 25 A9 AA.. 	.db $A4,$B6,$6A,$DB,$6A,$25,$A9,$AA,$6D,$BB,$15,$04,$A4,$6A,$6F ; $9A
0D1AA AB 12 6A DB B6 95 54 92.. 	.db $AB,$12,$6A,$DB,$B6,$95,$54,$92,$A2,$D4,$6A,$6F,$A5,$42,$55 ; $A9
0D1B9 D5 EA 5B 09 49 AD B6 56.. 	.db $D5,$EA,$5B,$09,$49,$AD,$B6,$56,$25,$28,$E2,$ED,$7E,$4C,$2B ; $B8
0D1C8 41 92 6D BF AB 24 00 52.. 	.db $41,$92,$6D,$BF,$AB,$24,$00,$52,$6F,$B7,$B5,$6A,$49,$55,$5B ; $C7
0D1D7 AB 6A 13 08 69 DB 5A 95.. 	.db $AB,$6A,$13,$08,$69,$DB,$5A,$95,$24,$BA,$6F,$57,$45,$48,$55 ; $D6
0D1E6 DB AD 85 24 42 D5 F6 BD.. 	.db $DB,$AD,$85,$24,$42,$D5,$F6,$BD,$AD,$24,$02,$D5,$F6,$56,$93 ; $E5
0D1F5 08 51 DB BE AD 2A 24 49.. 	.db $08,$51,$DB,$BE,$AD,$2A,$24,$49,$6F,$B7,$A9,$22,$08,$B5,$DD,$AB ; $F4
0D205 A9 44 59 6D 6F 25 91 94.. 	.db $A9,$44,$59,$6D,$6F,$25,$91,$94,$AA,$B6,$6D,$A9,$92,$A8,$DA ; $104
0D214 75 AB 24 91 6A BB 5D 25.. 	.db $75,$AB,$24,$91,$6A,$BB,$5D,$25,$41,$94,$6D,$D7,$AA,$52,$29 ; $113
0D223 55 6D B5 A9 52 49 B5 6D.. 	.db $55,$6D,$B5,$A9,$52,$49,$B5,$6D,$4B,$A2,$54,$D5,$B6,$5A,$29 ; $122
0D232 92 54 DB 6D 2D 29 52 A5.. 	.db $92,$54,$DB,$6D,$2D,$29,$52,$A5,$B6,$6D,$93,$4A,$52,$6B,$D5 ; $131
0D241                           DPCMSampleDataEnd_DrumSample_A:
0D241 92 AA AA 55 5B 55 91 54.. 	.db $92,$AA,$AA,$55,$5B,$55,$91,$54,$59,$B5,$55,$55,$49,$A5,$DA ; $140
0D250 B6 AB 8A 42 A5 F6 B2 25.. 	.db $B6,$AB,$8A,$42,$A5,$F6,$B2,$25,$49,$56,$6D,$B5,$A9,$94,$CA ; $14F
0D25F AA 6A AB 4A A5 54 69 DB.. 	.db $AA,$6A,$AB,$4A,$A5,$54,$69,$DB,$2B,$A9,$A4,$AA,$6A,$6D,$25 ; $15E
0D26E 49 AD 56 55 65 45 95 6B.. 	.db $49,$AD,$56,$55,$65,$45,$95,$6B,$D5,$55,$85,$8A,$52,$EF,$B6 ; $16D
0D27D B5 24 A0 AA D5 55 95 52.. 	.db $B5,$24,$A0,$AA,$D5,$55,$95,$52,$55,$B5,$5A,$AB,$A2,$AA,$AA ; $17C
0D28C B6 55 A5 82 54 DB 6D 55.. 	.db $B6,$55,$A5,$82,$54,$DB,$6D,$55,$49,$48,$DB,$DE,$AA,$52,$09 ; $18B
0D29B 95 6A 5B 55 93 2A 55 6B.. 	.db $95,$6A,$5B,$55,$93,$2A,$55,$6B,$CB,$96,$52,$C9,$EA,$D5,$54 ; $19A
0D2AA 42 52 B5 6D 6B A9 42 25.. 	.db $42,$52,$B5,$6D,$6B,$A9,$42,$25,$BB,$76,$AD,$54,$88,$AA,$B6 ; $1A9
0D2B9 6D 55 09 69 6B AB 55 92.. 	.db $6D,$55,$09,$69,$6B,$AB,$55,$92,$24,$55,$7F,$A5,$52,$A5,$54 ; $1B8
0D2C8 6A 57 55 55 95 AA B5 55.. 	.db $6A,$57,$55,$55,$95,$AA,$B5,$55,$51,$49,$52,$BB,$B7,$25,$24 ; $1C7
0D2D7 A9 D8 F5 55 95 48 92 DD.. 	.db $A9,$D8,$F5,$55,$95,$48,$92,$DD,$B7,$53,$22,$01,$69,$DF,$B7 ; $1D6
0D2E6 96 22 24 69 DF 5E 95 12.. 	.db $96,$22,$24,$69,$DF,$5E,$95,$12,$29,$69,$5B,$AB,$A9,$20,$A9 ; $1E5
0D2F5 6D 6F 5B 51 2A 55 96 AC.. 	.db $6D,$6F,$5B,$51,$2A,$55,$96,$AC,$4A,$B5,$2D,$4B,$A9,$65,$55 ; $1F4
0D304 95 AD 2A 95 A5 D4 6A 57.. 	.db $95,$AD,$2A,$95,$A5,$D4,$6A,$57,$25,$92,$AA,$DA,$6D,$AB,$44 ; $203
0D313 52 25 B5 B7 D5 CA 42 2A.. 	.db $52,$25,$B5,$B7,$D5,$CA,$42,$2A,$D5,$AE,$2B,$4A,$94,$AA,$DA ; $212
0D322 55 AB 5A A9 22 A9 EA 5A.. 	.db $55,$AB,$5A,$A9,$22,$A9,$EA,$5A,$AB,$52,$AA,$5A,$AD,$2D,$A9 ; $221
0D331 4A 53 A9 AA 5A 5B 12 A2.. 	.db $4A,$53,$A9,$AA,$5A,$5B,$12,$A2,$B6,$6E,$5F,$49,$92,$44,$BB ; $230
0D340 5D 53 45 A2 54 AB 77 2F.. 	.db $5D,$53,$45,$A2,$54,$AB,$77,$2F,$25,$82,$A4,$D6,$EE,$6B,$49 ; $23F
0D34F 42 6A DB 4A 95 AA 92 AD.. 	.db $42,$6A,$DB,$4A,$95,$AA,$92,$AD,$B6,$6A,$53,$A1,$AA,$AA,$B6 ; $24E
0D35E 52 25 49 ED AD AA A2 AA.. 	.db $52,$25,$49,$ED,$AD,$AA,$A2,$AA,$AA,$56,$5B,$A5,$92,$25,$A5 ; $25D
0D36D A9 6D AB 4A 95 56 A9 95.. 	.db $A9,$6D,$AB,$4A,$95,$56,$A9,$95,$AA,$52,$AB,$D6,$52,$AD,$AA ; $26C
0D37C 52 95 2A B5 D5            	.db $52,$95,$2A,$B5,$D5
0D381 4A                        	.db $4A ; $27B
0D382                           DPCMSampleDataEnd_DrumSample_B:
0D382                           	; the rest of the drum sample is unused
0D382 A9 2A 55 6D 6B A5 AA 24.. 	.db $A9,$2A,$55,$6D,$6B,$A5,$AA,$24,$55,$55,$DB,$4A,$95,$2A,$B5 ; NOT logged as PCM data
0D391 AD AA AA 49 52 B5 A9 AA.. 	.db $AD,$AA,$AA,$49,$52,$B5,$A9,$AA,$CA,$52,$6B,$DB,$AA,$92,$44 ; $F
0D3A0 92 D5 B7 55 45 89 B2 DD.. 	.db $92,$D5,$B7,$55,$45,$89,$B2,$DD,$5A,$95,$92,$54,$4A,$DF,$DA ; $1E
0D3AF A2 22 A9 6A DB 36 91 54.. 	.db $A2,$22,$A9,$6A,$DB,$36,$91,$54,$B5,$B6,$5A,$49,$4A,$2D,$AB ; $2D
0D3BE B5 A5 24 55 D5 DA 6A 2B.. 	.db $B5,$A5,$24,$55,$D5,$DA,$6A,$2B,$44,$B2,$7A,$B7,$A9,$04,$A5 ; $3C
0D3CD AA DB 56 4A 25 D1 B2 DB.. 	.db $AA,$DB,$56,$4A,$25,$D1,$B2,$DB,$B5,$52,$22,$A5,$6A,$5F,$4B ; $4B
0D3DC 92 24 B5 B7 AD 24 92 54.. 	.db $92,$24,$B5,$B7,$AD,$24,$92,$54,$DB,$6E,$95,$46,$91,$52,$DB ; $5A
0D3EB 6D 27 49 42 6D 77 8D A5.. 	.db $6D,$27,$49,$42,$6D,$77,$8D,$A5,$54,$49,$D3,$AA,$49,$6D,$55 ; $69
0D3FA 55 DB 24 A9 52 D9 6A AF.. 	.db $55,$DB,$24,$A9,$52,$D9,$6A,$AF,$24,$91,$D2,$B6,$6D,$17,$09 ; $78
0D409 92 6A F7 B6 25 09 89 DA.. 	.db $92,$6A,$F7,$B6,$25,$09,$89,$DA,$BE,$B7,$2A,$08,$82,$DD,$BE,$55 ; $87
0D419 95 A4 52 DB 56 A9 94 24.. 	.db $95,$A4,$52,$DB,$56,$A9,$94,$24,$B5,$BB,$56,$4A,$25,$D5,$AA ; $97
0D428 AB 2A 51 53 B5 B5 2A A5.. 	.db $AB,$2A,$51,$53,$B5,$B5,$2A,$A5,$92,$55,$DB,$6A,$95,$24,$69 ; $A6
0D437 AD B6 95 24 A5 B2 5B AB.. 	.db $AD,$B6,$95,$24,$A5,$B2,$5B,$AB,$4A,$95,$B4,$AA,$6D,$4B,$8A ; $B5
0D446 2A B5 B6 55 09 12 ED F6.. 	.db $2A,$B5,$B6,$55,$09,$12,$ED,$F6,$AA,$AB,$24,$A9,$94,$B6,$56 ; $C4
0D455 5B 49 52 D3 D6 6A 25 A9.. 	.db $5B,$49,$52,$D3,$D6,$6A,$25,$A9,$B6,$55,$25,$49,$A5,$AA,$AE ; $D3
0D464 AD 2A A9 D2 5A B5 AA 56.. 	.db $AD,$2A,$A9,$D2,$5A,$B5,$AA,$56,$42,$55,$5B,$55,$2B,$25,$55 ; $E2
0D473 6B AB A9 55 29 A9 9A 4A.. 	.db $6B,$AB,$A9,$55,$29,$A9,$9A,$4A,$B5,$6A,$A9,$AA,$55,$A9,$6A ; $F1
0D482 AB AA 95 2A 28 AD 5D DB.. 	.db $AB,$AA,$95,$2A,$28,$AD,$5D,$DB,$92,$24,$55,$B5,$DA,$B5,$92 ; $100
0D491 A2 54 B5 6D 2B 12 AA D4.. 	.db $A2,$54,$B5,$6D,$2B,$12,$AA,$D4,$6A,$DF,$2A,$89,$AA,$5A,$55 ; $10F
0D4A0 D7 24 51 55 B5 56 2D 29.. 	.db $D7,$24,$51,$55,$B5,$56,$2D,$29,$69,$AF,$56,$B5,$94,$88,$AA ; $11E
0D4AF 2D 5B AD 52 A5 AA AA 5A.. 	.db $2D,$5B,$AD,$52,$A5,$AA,$AA,$5A,$B5,$94,$DA,$AA,$AA,$A4,$12 ; $12D
0D4BE AD B6 95 A5 AA B2 DA 56.. 	.db $AD,$B6,$95,$A5,$AA,$B2,$DA,$56,$A9,$6A,$29,$89,$D5,$AA,$AA ; $13C
0D4CD A5 4A 55 6B 59 69 AD D4.. 	.db $A5,$4A,$55,$6B,$59,$69,$AD,$D4,$AA,$A5,$A8,$52,$55,$B5,$A9 ; $14B
0D4DC 55 55 55 6B 55 95 92 2A.. 	.db $55,$55,$55,$6B,$55,$95,$92,$2A,$A9,$55,$AB,$52,$AD,$AA,$E9 ; $15A
0D4EB 5A 55 42 AB 56 55 53 29.. 	.db $5A,$55,$42,$AB,$56,$55,$53,$29,$B1,$7A,$59,$B5,$54,$55,$52 ; $169
0D4FA 6B AB 56 25 49 56 6D      	.db $6B,$AB,$56,$25,$49,$56,$6D ; $178
0D501                           DPCMSampleDataEnd_DrumSample:
0D501                           ENDIF
0D501                           
0D501                           IFDEF PLAYER_STUFF_DREAM
0D501                           dream:
0D501                           .db $ab,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $aa,$a9,$56,$55,$65,$55,$55,$55,$d5,$aa,$4a,$a5,$aa,$aa,$aa,$aa
0D501                           .db $aa,$aa,$aa,$aa,$aa,$aa,$66,$55,$a9,$aa,$aa,$aa,$aa,$aa,$4a,$55
0D501                           .db $95,$55,$55,$55,$b5,$aa,$aa,$aa,$aa,$2a,$a5,$4a,$aa,$ad,$5a,$55
0D501                           .db $69,$ad,$da,$aa,$aa,$b2,$aa,$2a,$8a,$a8,$aa,$ee,$aa,$aa,$6a,$ab
0D501                           .db $aa,$54,$d5,$aa,$aa,$52,$95,$22,$a2,$ea,$bf,$6e,$a5,$54,$b5,$a2
0D501                           .db $92,$aa,$eb,$aa,$a2,$08,$a2,$aa,$ed,$ef,$ba,$54,$a5,$28,$aa,$aa
0D501                           .db $ba,$ba,$5a,$29,$00,$a2,$b6,$ff,$af,$29,$aa,$52,$8a,$a8,$aa,$af
0D501                           .db $db,$8a,$02,$80,$b4,$fb,$bf,$ab,$a8,$94,$a2,$48,$ba,$ee,$eb,$2a
0D501                           .db $0a,$08,$48,$eb,$fe,$df,$2a,$92,$28,$8a,$6a,$bb,$77,$ad,$24,$22
0D501                           .db $80,$d2,$fa,$ff,$ab,$8a,$80,$a2,$aa,$ee,$ee,$ba,$8a,$82,$08,$a2
0D501                           .db $ea,$fe,$bf,$a5,$08,$20,$b5,$ba,$bb,$ae,$4b,$89,$88,$88,$ca,$ea
0D501                           .db $fb,$5f,$0a,$02,$a8,$db,$ae,$db,$6a,$29,$8a,$28,$4a,$aa,$bb,$ff
0D501                           .db $aa,$08,$20,$b9,$bb,$ab,$b5,$aa,$a4,$22,$aa,$a8,$d4,$be,$bf,$8a
0D501                           .db $00,$aa,$fa,$ba,$aa,$55,$8e,$4a,$a9,$94,$a8,$6c,$ef,$af,$22,$20
0D501                           .db $aa,$af,$ab,$aa,$aa,$a6,$b2,$a8,$a2,$a4,$ec,$be,$af,$08,$28,$ea
0D501                           .db $de,$aa,$aa,$aa,$a6,$2a,$a9,$a2,$24,$db,$fe,$ab,$08,$48,$ba,$bb
0D501                           .db $aa,$aa,$aa,$aa,$aa,$a8,$92,$28,$bb,$ef,$ab,$80,$28,$ba,$bb,$aa
0D501                           .db $aa,$aa,$aa,$2a,$a9,$28,$4a,$bb,$ef,$53,$82,$28,$ae,$bb,$2a,$ab
0D501                           .db $b2,$aa,$2a,$aa,$28,$4a,$bb,$ef,$55,$82,$28,$ae,$6b,$4b,$cb,$aa
0D501                           .db $a9,$2a,$2a,$4a,$aa,$ba,$ef,$56,$82,$28,$ae,$6b,$55,$cd,$aa,$69
0D501                           .db $2a,$29,$4a,$aa,$ba,$ef,$6a,$82,$a2,$ac,$ae,$5a,$ad,$aa,$6a,$a5
0D501                           .db $a4,$28,$aa,$ba,$6f,$ab,$22,$a2,$aa,$ae,$6a,$56,$ab,$aa,$a5,$92
0D501                           .db $a8,$a8,$ba,$be,$ae,$24,$4a,$a3,$b5,$aa,$aa,$5a,$ab,$9a,$4a,$8a
0D501                           .db $52,$d5,$ba,$b6,$2a,$a9,$ca,$aa,$4a,$55,$ad,$da,$6a,$a5,$8a,$a2
0D501                           .db $aa,$6a,$ab,$56,$a9,$aa,$aa,$aa,$2a,$d5,$aa,$ad,$aa,$a9,$a2,$4a
0D501                           .db $aa,$5a,$2d,$2b,$ab,$6a,$ab,$52,$aa,$aa,$da,$aa,$aa,$aa,$2a,$29
0D501                           .db $a9,$aa,$aa,$da,$da,$aa,$aa,$92,$aa,$aa,$aa,$da,$aa,$a6,$2a,$8a
0D501                           .db $52,$ad,$da,$6a,$ab,$aa,$aa,$94,$aa,$aa,$aa,$b6,$aa,$aa,$28,$aa
0D501                           .db $aa,$b6,$aa,$aa,$5a,$b5,$52,$aa,$aa,$aa,$d6,$aa,$92,$aa,$aa,$aa
0D501                           .db $aa,$aa,$aa,$aa,$aa,$aa,$aa,$5a,$ad,$52,$a5,$2a,$a9,$d6,$ea,$aa
0D501                           .db $2a,$29,$a9,$aa,$d6,$aa,$b6,$aa,$2a,$a9,$92,$aa,$b6,$da,$aa,$aa
0D501                           .db $a4,$aa,$aa,$aa,$aa,$6a,$55,$aa,$aa,$54,$d5,$aa,$ae,$aa,$94,$aa
0D501                           .db $ac,$aa,$d6,$aa,$aa,$a4,$4a,$a9,$aa,$aa,$ab,$ab,$aa,$a4,$2a,$ab
0D501                           .db $aa,$55,$4b,$55,$69,$aa,$aa,$52,$55,$ab,$56,$a9,$4a,$d5,$aa,$56
0D501                           .db $2b,$55,$a5,$aa,$aa,$aa,$d4,$aa,$ae,$aa,$a4,$4a,$55,$ab,$aa,$aa
0D501                           .db $aa,$aa,$aa,$aa,$aa,$aa,$aa,$ad,$aa,$a4,$aa,$aa,$5a,$55,$95,$aa
0D501                           .db $aa,$aa,$4a,$a9,$aa,$ad,$b6,$4a,$aa,$aa,$aa,$56,$55,$55,$2d,$55
0D501                           .db $95,$aa,$aa,$b4,$aa,$5a,$a5,$4a,$a9,$ad,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $aa,$aa,$aa,$5a,$ab,$4a,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $54,$d5,$aa,$56,$95,$aa,$aa,$aa,$5a,$59,$96,$55,$55,$a5,$aa,$aa
0D501                           .db $aa,$aa,$56,$a5,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $aa,$56,$55,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$95,$aa,$aa,$aa,$aa,$aa
0D501                           .db $5a,$95,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$6a,$a9,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$55,$a9,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa,$aa
0D501                           .db $aa,$aa,$aa,$aa,$aa,$aa,$0a
0D501                           dreamend:
0D501                           ENDIF
0D501                           
0D501                           IFDEF PROTOTYPE_DPCM_SAMPLES
0D501                           	.include "src/extras/prototype-dpcm-samples.asm"
0D501                           ENDIF
0D501                           
0D501                           ; PPU update buffers used to update the screen
0D501                           ScreenUpdateBufferPointers:
0D501 01 03                     	.dw PPUBuffer_301
0D503 83 05                     	.dw PPUBuffer_583
0D505 5F 05                     	.dw PPUBuffer_55F
0D507 31 D5                     	.dw PPUBuffer_CharacterSelect
0D509 7B D7                     	.dw PPUBuffer_BANKE_DE7A
0D50B 6E E3                     	.dw PPUBuffer_Text_Game_Over
0D50D 7B 06                     	.dw PPUBuffer_67B
0D50F 8D E3                     	.dw PPUBuffer_Text_Retry
0D511 68 71                     	.dw PPUBuffer_7168
0D513 7B 06                     	.dw PPUBuffer_67B
0D515 93 06                     	.dw PPUBuffer_693
0D517 AB 06                     	.dw PPUBuffer_6AB
0D519 BD 06                     	.dw PPUBuffer_6BD
0D51B CC 06                     	.dw PPUBuffer_6CC
0D51D E9 06                     	.dw PPUBuffer_6E9
0D51F DA 06                     	.dw PPUBuffer_6DA
0D521 DF 06                     	.dw PPUBuffer_6DF
0D523 E4 06                     	.dw PPUBuffer_6E4
0D525 94 71                     	.dw PPUBuffer_7194
0D527 A8 71                     	.dw PPUBuffer_71A8
0D529 1B 72                     	.dw PPUBuffer_721B
0D52B B0 D8                     	.dw PPUBuffer_TitleCard
0D52D A8 D8                     	.dw PPUBuffer_PauseExtraLife
0D52F 00 74                     	.dw BonusChanceLayoutRAM
0D531                           
0D531                           PPUBuffer_CharacterSelect:
0D531 21 49 06 E9 E5 DE DA EC.. 	.db $21,$49,$06,$E9,$E5,$DE,$DA,$EC,$DE ; PLEASE
0D53A 21 50 06 EC DE E5 DE DC.. 	.db $21,$50,$06,$EC,$DE,$E5,$DE,$DC,$ED ; SELECT
0D543 21 8C 06 E9 E5 DA F2 DE.. 	.db $21,$8C,$06,$E9,$E5,$DA,$F2,$DE,$EB ; PLAYER
0D54C 20 00 20 B7 B8 B7 B8 B7.. 	.db $20,$00,$20,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8 ; Probably the checkerboard diamonds or w/e
0D55B B7 B8 B7 B8 B7 B8 B7 B8.. 	.db $B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7 ; $F
0D56A B8 B7 B8 B7 B8            	.db $B8,$B7,$B8,$B7,$B8 ; $1E
0D56F 20 20 20 B9 BA B9 BA B9.. 	.db $20,$20,$20,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA
0D57E B9 BA B9 BA B9 BA B9 BA.. 	.db $B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9 ; $F
0D58D BA B9 BA B9 BA            	.db $BA,$B9,$BA,$B9,$BA ; $1E
0D592 23 80 20 B7 B8 B7 B8 B7.. 	.db $23,$80,$20,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8
0D5A1 B7 B8 B7 B8 B7 B8 B7 B8.. 	.db $B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7 ; $F
0D5B0 B8 B7 B8 B7 B8            	.db $B8,$B7,$B8,$B7,$B8 ; $1E
0D5B5 23 A0 20 B9 BA B9 BA B9.. 	.db $23,$A0,$20,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA
0D5C4 B9 BA B9 BA B9 BA B9 BA.. 	.db $B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9 ; $F
0D5D3 BA B9 BA B9 BA            	.db $BA,$B9,$BA,$B9,$BA ; $1E
0D5D8 20 00 9E B7 B9 B7 B9 B7.. 	.db $20,$00,$9E,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9
0D5E7 B7 B9 B7 B9 B7 B9 B7 B9.. 	.db $B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7 ; $F
0D5F6 B9 B7 B9                  	.db $B9,$B7,$B9 ; $1E
0D5F9 20 01 9E B8 BA B8 BA B8.. 	.db $20,$01,$9E,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA
0D608 B8 BA B8 BA B8 BA B8 BA.. 	.db $B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8 ; $F
0D617 BA B8 BA                  	.db $BA,$B8,$BA ; $1E
0D61A 20 1E 9E B7 B9 B7 B9 B7.. 	.db $20,$1E,$9E,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9
0D629 B7 B9 B7 B9 B7 B9 B7 B9.. 	.db $B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7 ; $F
0D638 B9 B7 B9                  	.db $B9,$B7,$B9 ; $1E
0D63B 20 1F 9E B8 BA B8 BA B8.. 	.db $20,$1F,$9E,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA
0D64A B8 BA B8 BA B8 BA B8 BA.. 	.db $B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8 ; $F
0D659 BA B8 BA                  	.db $BA,$B8,$BA ; $1E
0D65C 20 42 5C FD               	.db $20,$42,$5C,$FD
0D660 20 62 5C FD               	.db $20,$62,$5C,$FD
0D664 20 47 05 00 01 02 03 04   	.db $20,$47,$05,$00,$01,$02,$03,4
0D66C 20 54 05 05 06 07 08 09   	.db $20,$54,$05,$05,$06,$07,$08,9
0D674 20 63 0A 0A 0B 0C 0D 0E.. 	.db $20,$63,$0A,$A,$0B,$C,$0D,$E,$0F,$10,$11,$12,$13
0D681 20 73 0A 14 15 16 17 18.. 	.db $20,$73,$0A,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D
0D68E 20 82 1C 1E 1F 20 21 22.. 	.db $20,$82,$1C,$1E,$1F,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29
0D69D FD FD FD FD 2A 2B 2C 2D.. 	.db $FD,$FD,$FD,$FD,$2A,$2B,$2C,$2D,$2E,$2F,$30,$31,$32,$33,$34 ; $F
0D6AC 35                        	.db $35 ; $1E
0D6AD 20 A2 06 36 37 38 39 3A.. 	.db $20,$A2,$06,$36,$37,$38,$39,$3A,$3B
0D6B6 20 AB 0A 3C 3D 3E 3F 40.. 	.db $20,$AB,$0A,$3C,$3D,$3E,$3F,$40,$43,$44,$45,$46,$47
0D6C3 20 B8 06 48 49 4A 4B 4C.. 	.db $20,$B8,$06,$48,$49,$4A,$4B,$4C,$4D
0D6CC 20 C2 05 4E 4F 50 51 52   	.db $20,$C2,$05,$4E,$4F,$50,$51,$52
0D6D4 20 D9 05 53 54 55 56 57   	.db $20,$D9,$05,$53,$54,$55,$56,$57
0D6DC 20 E2 04 58 59 5A 5B      	.db $20,$E2,$04,$58,$59,$5A,$5B
0D6E3 20 E6 CD 5C               	.db $20,$E6,$CD,$5C
0D6E7 20 F9 CD 5C               	.db $20,$F9,$CD,$5C
0D6EB 20 FA 04 5D 5E 5F 60      	.db $20,$FA,$04,$5D,$5E,$5F,$60
0D6F2 21 02 83 61 64 67         	.db $21,$02,$83,$61,$64,$67
0D6F8 21 03 8B 62 65 68 6A 6C.. 	.db $21,$03,$8B,$62,$65,$68,$6A,$6C,$6F,$72,$75,$78,$7B,$7E
0D706 21 04 94 63 66 69 6B 6D.. 	.db $21,$04,$94,$63,$66,$69,$6B,$6D,$70,$73,$76,$79,$7C,$7F,$81
0D715 82 83 84 85 86 87 88 89   	.db $82,$83,$84,$85,$86,$87,$88,$89 ; $F
0D71D 21 85 89 6E 71 74 77 7A.. 	.db $21,$85,$89,$6E,$71,$74,$77,$7A,$7D,$80,$6E,$6E
0D729 21 9A 89 97 9A 9D BB A0.. 	.db $21,$9A,$89,$97,$9A,$9D,$BB,$A0,$A3,$A6,$A9,$AB
0D735 21 1B 94 8C 8F 92 95 98.. 	.db $21,$1B,$94,$8C,$8F,$92,$95,$98,$9B,$9E,$BC,$A1,$A4,$A7,$AA
0D744 AC AD AE B0 B1 B2 B3 B4   	.db $AC,$AD,$AE,$B0,$B1,$B2,$B3,$B4 ; $F
0D74C 21 1C 8B 8D 90 93 96 99.. 	.db $21,$1C,$8B,$8D,$90,$93,$96,$99,$9C,$9F,$BD,$A2,$A5,$A8
0D75A 21 1D 83 8E 91 94         	.db $21,$1D,$83,$8E,$91,$94
0D760 21 62 D1 FD               	.db $21,$62,$D1,$FD
0D764 21 7D D1 FD               	.db $21,$7D,$D1,$FD
0D768 22 63 C9 FD 22 7C C9 FD.. 	.db $22,$63,$C9,$FD,$22,$7C,$C9,$FD,$22,$86,$82,$8A,$8B,$22,$99
0D777 82 8A 8B                  	.db $82,$8A,$8B ; $F
0D77A 00                        	.db $00
0D77B                           PPUBuffer_BANKE_DE7A:
0D77B 23 C0 09 3E 0E 0E 0E 0E.. 	.db $23,$C0,$09,$3E,$0E,$E,$0E,$E,$0E,$E,$8E,$32
0D787 23 CF 01 8C               	.db $23,$CF,$01,$8C
0D78B 23 D0 10 32 00 A0 A0 A0.. 	.db $23,$D0,$10,$32,$00,$A0,$A0,$A0,$20,$00,$8C,$32,$00,$00,$0A,$02,$00,$00,$8C
0D79E 23 E0 09 32 00 00 0E 00.. 	.db $23,$E0,$09,$32,$00,$00,$0E,$00,$00,$00,$8C,$32
0D7AA 23 EF 01 8C               	.db $23,$EF,$01,$8C
0D7AE 23 F0 06 32 00 A0 A0 A0.. 	.db $23,$F0,$06,$32,$00,$A0,$A0,$A0,$A0
0D7B7 23 F7 09 8C 0E 0E 0E 0E.. 	.db $23,$F7,$09,$8C,$0E,$E,$0E,$E,$0E,$E,$0E,$E
0D7C3 24 00 60 FF               	.db $24,$00,$60,$FF
0D7C7 24 20 60 FF               	.db $24,$20,$60,$FF
0D7CB 24 40 60 FF               	.db $24,$40,$60,$FF
0D7CF 24 60 60 FF               	.db $24,$60,$60,$FF
0D7D3 27 40 60 FF               	.db $27,$40,$60,$FF
0D7D7 27 60 60 FF               	.db $27,$60,$60,$FF
0D7DB 27 80 60 FF               	.db $27,$80,$60,$FF
0D7DF 27 A0 60 FF               	.db $27,$A0,$60,$FF
0D7E3 24 80 D6 FF               	.db $24,$80,$D6,$FF
0D7E7 24 81 D6 FF               	.db $24,$81,$D6,$FF
0D7EB 24 82 D6 FF               	.db $24,$82,$D6,$FF
0D7EF 24 9D D6 FF               	.db $24,$9D,$D6,$FF
0D7F3 24 9E D6 FF               	.db $24,$9E,$D6,$FF
0D7F7 24 9F D6 FF               	.db $24,$9F,$D6,$FF
0D7FB 24 83 01 D0               	.db $24,$83,$01,$D0
0D7FF 24 9C 01 D8               	.db $24,$9C,$01,$D8
0D803 24 84 58 FB               	.db $24,$84,$58,$FB
0D807 24 A3 D4 D1               	.db $24,$A3,$D4,$D1
0D80B 24 BC D4 D7               	.db $24,$BC,$D4,$D7
0D80F 24 A4 58 FB               	.db $24,$A4,$58,$FB
0D813 24 C4 58 FB               	.db $24,$C4,$58,$FB
0D817 24 E4 58 FB               	.db $24,$E4,$58,$FB
0D81B 25 04 58 FB               	.db $25,$04,$58,$FB
0D81F 25 24 58 FB               	.db $25,$24,$58,$FB
0D823 25 44 58 FB               	.db $25,$44,$58,$FB
0D827 25 64 58 FB               	.db $25,$64,$58,$FB
0D82B 25 84 58 FB               	.db $25,$84,$58,$FB
0D82F 25 A4 58 FB               	.db $25,$A4,$58,$FB
0D833 25 C4 58 FB               	.db $25,$C4,$58,$FB
0D837 25 E4 58 FB               	.db $25,$E4,$58,$FB
0D83B 26 04 58 FB               	.db $26,$04,$58,$FB
0D83F 26 24 58 FB               	.db $26,$24,$58,$FB
0D843 26 44 58 FB               	.db $26,$44,$58,$FB
0D847 26 64 58 FB               	.db $26,$64,$58,$FB
0D84B 26 84 58 FB               	.db $26,$84,$58,$FB
0D84F 26 A4 58 FB               	.db $26,$A4,$58,$FB
0D853 26 C4 58 FB               	.db $26,$C4,$58,$FB
0D857 26 E4 58 FB               	.db $26,$E4,$58,$FB
0D85B 27 23 01 D2               	.db $27,$23,$01,$D2
0D85F 27 3C 01 D6               	.db $27,$3C,$01,$D6
0D863 27 24 58 D3               	.db $27,$24,$58,$D3
0D867 27 C8 08 44 FF BF AF AF.. 	.db $27,$C8,$08,$44,$FF,$BF,$AF,$AF,$AF,$FF,$11
0D872 27 D0 10 44 BF AF AF AF.. 	.db $27,$D0,$10,$44,$BF,$AF,$AF,$AF,$AF,$EF,$11,$44,$FF,$FF,$FF
0D881 FF FF FF 11               	.db $FF,$FF,$FF,$11 ; $F
0D885 27 E0 10 44 FF FF FF FF.. 	.db $27,$E0,$10,$44,$FF,$FF,$FF,$FF,$FF,$FF,$11,$44,$FF,$FF,$FF
0D894 FF FF AF 11               	.db $FF,$FF,$AF,$11 ; $F
0D898 27 F0 08 44 05 05 05 05.. 	.db $27,$F0,$08,$44,$05,$05,$05,$05,$05,$05,$01
0D8A3 27 04 58 FB               	.db $27,$04,$58,$FB
0D8A7 00                        	.db $00
0D8A8                           
0D8A8                           ; nametable attribute data
0D8A8                           PPUBuffer_PauseExtraLife:
0D8A8 27 EA 05                  	.db $27, $EA, $05
0D8AB AA AA AA AA AA            	.db $AA, $AA, $AA, $AA, $AA
0D8B0                           
0D8B0                           ; nametable attribute data
0D8B0                           PPUBuffer_TitleCard:
0D8B0 20 1E 9E                  	.db $20, $1E, $9E
0D8B3 FF FF FF FF FF FF FF FF.. 	.db $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
0D8C3 FF FF FF FF FF FF FF FF.. 	.db $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
0D8D1 20 1F 9E                  	.db $20, $1F, $9E
0D8D4 FF FF FF FF FF FF FF FF.. 	.db $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
0D8E4 FF FF FF FF FF FF FF FF.. 	.db $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
0D8F2 23 C7 01 00               	.db $23, $C7, $01, $00
0D8F6 23 CF 01 00               	.db $23, $CF, $01, $00
0D8FA 23 D7 01 00               	.db $23, $D7, $01, $00
0D8FE 23 DF 01 00               	.db $23, $DF, $01, $00
0D902 23 E7 01 00               	.db $23, $E7, $01, $00
0D906 23 EF 01 00               	.db $23, $EF, $01, $00
0D90A 23 F7 01 00               	.db $23, $F7, $01, $00
0D90E 23 FF 01 00               	.db $23, $FF, $01, $00
0D912 00                        	.db $00
0D913                           
0D913                           WorldStartingLevel:
0D913 00                        	.db $00
0D914 03                        	.db $03 ; $00
0D915 06                        	.db $06 ; $01
0D916 09                        	.db $09 ; $02
0D917 0C                        	.db $0C ; $03
0D918 0F                        	.db $0F ; $04
0D919 12                        	.db $12 ; $05
0D91A 14                        	.db $14 ; $06
0D91B                           
0D91B                           IFNDEF PLAYER_STUFF
0D91B                           PlayerSelectMarioSprites1:
0D91B                           	.db $8F, $00, $00, $48
0D91B                           	.db $8F, $00, $40, $50
0D91B                           	.db $9F, $02, $00, $48
0D91B                           	.db $9F, $02, $40, $50
0D91B                           
0D91B                           PlayerSelectLuigiSprites1:
0D91B                           	.db $8F, $04, $01, $68
0D91B                           	.db $8F, $04, $41, $70
0D91B                           	.db $9F, $06, $01, $68
0D91B                           	.db $9F, $06, $41, $70
0D91B                           
0D91B                           PlayerSelectToadSprites1:
0D91B                           	.db $8F, $08, $02, $88
0D91B                           	.db $8F, $08, $42, $90
0D91B                           	.db $9F, $0A, $02, $88
0D91B                           	.db $9F, $0A, $42, $90
0D91B                           
0D91B                           PlayerSelectPrincessSprites1:
0D91B                           	.db $8F, $0C, $03, $A8
0D91B                           	.db $8F, $0C, $43, $B0
0D91B                           	.db $9F, $0E, $03, $A8
0D91B                           	.db $9F, $0E, $43, $B0
0D91B                           
0D91B                           PlayerSelectMarioSprites2:
0D91B                           	.db $8F, $10, $00, $48
0D91B                           	.db $8F, $12, $00, $50
0D91B                           	.db $9F, $14, $00, $48
0D91B                           	.db $9F, $16, $00, $50
0D91B                           
0D91B                           PlayerSelectLuigiSprites2:
0D91B                           	.db $8F, $18, $01, $68
0D91B                           	.db $8F, $1A, $01, $70
0D91B                           	.db $9F, $1C, $01, $68
0D91B                           	.db $9F, $1E, $01, $70
0D91B                           
0D91B                           PlayerSelectToadSprites2:
0D91B                           	.db $8F, $20, $02, $88
0D91B                           	.db $8F, $22, $02, $90
0D91B                           	.db $9F, $24, $02, $88
0D91B                           	.db $9F, $26, $02, $90
0D91B                           
0D91B                           PlayerSelectPrincessSprites2:
0D91B                           	.db $8F, $28, $03, $A8
0D91B                           	.db $8F, $2A, $03, $B0
0D91B                           	.db $9F, $2C, $03, $A8
0D91B                           	.db $9F, $2E, $03, $B0
0D91B                           ENDIF
0D91B                           
0D91B                           
0D91B                           PlayerSelectSpriteIndexes:
0D91B 00 30 20 10               	.db $00, $30, $20, $10
0D91F                           
0D91F                           BonusChanceCherrySprite:
0D91F 5F 05 01 58               	.db $5F, $05, $01, $58
0D923 5F 07 01 60               	.db $5F, $07, $01, $60
0D927                           
0D927                           BonusChanceStarSprite:
0D927 5F 09 01 58               	.db $5F, $09, $01, $58
0D92B 5F 09 41 60               	.db $5F, $09, $41, $60
0D92F                           
0D92F                           BonusChanceVeggieSprite:
0D92F 5F 0B 01 58               	.db $5F, $0B, $01, $58
0D933 5F 0B 41 60               	.db $5F, $0B, $41, $60
0D937                           
0D937                           BonusChanceSnifitSprite:
0D937 5F 01 01 58               	.db $5F, $01, $01, $58
0D93B 5F 03 01 60               	.db $5F, $03, $01, $60
0D93F                           
0D93F                           PlayerSelectSpritePalettesDark:
0D93F 3F 10 10                  	.db $3F, $10, $10 ; PPU Data
0D942 0F 22 12 01               	.db $0F, $22, $12, $01
0D946 0F 22 12 01               	.db $0F, $22, $12, $01
0D94A 0F 22 12 01               	.db $0F, $22, $12, $01
0D94E 0F 22 12 01               	.db $0F, $22, $12, $01
0D952                           
0D952                           PlayerSelectPaletteOffsets:
0D952 00                        	.db (PlayerSelectSpritePalettes_Mario - PlayerSelectSpritePalettes)
0D953 15                        	.db (PlayerSelectSpritePalettes_Princess - PlayerSelectSpritePalettes)
0D954 0E                        	.db (PlayerSelectSpritePalettes_Toad - PlayerSelectSpritePalettes)
0D955 07                        	.db (PlayerSelectSpritePalettes_Luigi - PlayerSelectSpritePalettes)
0D956                           
0D956                           PlayerSelectSpritePalettes:
0D956                           PlayerSelectSpritePalettes_Mario:
0D956 3F 10 04                  	.db $3F, $10, $04
0D959 0F 27 16 01               	.db $0F, $27, $16, $01
0D95D                           PlayerSelectSpritePalettes_Luigi:
0D95D 3F 14 04                  	.db $3F, $14, $04
0D960 0F 36 2A 01               	.db $0F, $36, $2A, $01
0D964                           PlayerSelectSpritePalettes_Toad:
0D964 3F 18 04                  	.db $3F, $18, $04
0D967 0F 27 30 01               	.db $0F, $27, $30, $01
0D96B                           PlayerSelectSpritePalettes_Princess:
0D96B 3F 1C 04                  	.db $3F, $1C, $04
0D96E 0F 36 25 07               	.db $0F, $36, $25, $07
0D972                           
0D972                           TitleCardPalettes:
0D972 3F 00 20                  	.db $3F, $00, $20 ; PPU data
0D975 38 30 1A 0F               	.db $38, $30, $1A, $0F
0D979 38 38 0F 0F               	.db $38, $38, $0F, $0F
0D97D 38 17 17 38               	.db $38, $17, $17, $38
0D981 38 28 18 08               	.db $38, $28, $18, $08
0D985 38 30 27 01               	.db $38, $30, $27, $01
0D989 38 37 27 06               	.db $38, $37, $27, $06
0D98D 38 25 36 06               	.db $38, $25, $36, $06
0D991 38 12 36 01               	.db $38, $12, $36, $01
0D995 00                        	.db $00
0D996                           
0D996                           BonusChanceSpritePalettes:
0D996 0F 37 16 0F               	.db $0F,$37,$16,$0F
0D99A 0F 37 16 0F               	.db $0F,$37,$16,$0F ; 4
0D99E 0F 37 16 0F               	.db $0F,$37,$16,$0F ; 8
0D9A2 0F 37 16 0F               	.db $0F,$37,$16,$0F ; $C
0D9A6                           
0D9A6                           
0D9A6                           ;
0D9A6                           ; Load A with an index and call this to
0D9A6                           ; jump to a pointer from the table directly
0D9A6                           ; after the call.
0D9A6                           ;
0D9A6                           JumpToTableAfterJump:
0D9A6 0A                        	ASL A
0D9A7 A8                        	TAY
0D9A8 68                        	PLA
0D9A9 85 0A                     	STA byte_RAM_A
0D9AB 68                        	PLA
0D9AC 85 0B                     	STA byte_RAM_B
0D9AE C8                        	INY
0D9AF B1 0A                     	LDA (byte_RAM_A), Y
0D9B1 85 0C                     	STA byte_RAM_C
0D9B3 C8                        	INY
0D9B4 B1 0A                     	LDA (byte_RAM_A), Y
0D9B6 85 0D                     	STA byte_RAM_D
0D9B8 6C 0C 00                  	JMP (byte_RAM_C)
0D9BB                           
0D9BB                           
0D9BB                           BlackAndWhitePalette:
0D9BB 0F 30 30 0F               	.db $0F,$30,$30,$0F
0D9BF                           
0D9BF                           
0D9BF                           SetBlackAndWhitePalette:
0D9BF AD 02 20                  	LDA PPUSTATUS
0D9C2 A9 3F                     	LDA #$3F
0D9C4 A0 00                     	LDY #$00
0D9C6 8D 06 20                  	STA PPUADDR
0D9C9 8C 06 20                  	STY PPUADDR
0D9CC                           
0D9CC                           SetBlackAndWhitePalette_Loop:
0D9CC 98                        	TYA
0D9CD 29 03                     	AND #$03
0D9CF AA                        	TAX
0D9D0 BD BB D9                  	LDA BlackAndWhitePalette, X
0D9D3 8D 07 20                  	STA PPUDATA
0D9D6 C8                        	INY
0D9D7 C0 14                     	CPY #$14
0D9D9 90 F1                     	BCC SetBlackAndWhitePalette_Loop
0D9DB                           
0D9DB 60                        	RTS
0D9DC                           
0D9DC                           
0D9DC                           SetScrollXYTo0:
0D9DC A9 00                     	LDA #$00
0D9DE 85 FC                     	STA PPUScrollYMirror
0D9E0 85 FD                     	STA PPUScrollXMirror
0D9E2 85 C8                     	STA byte_RAM_C8
0D9E4 85 C9                     	STA byte_RAM_C9
0D9E6 60                        	RTS
0D9E7                           
0D9E7                           
0D9E7                           ;
0D9E7                           ; Clears the screen and resets the scroll position for the title card
0D9E7                           ;
0D9E7                           ; This is used for the character select screen as well, but that has a few PPU
0D9E7                           ; changes of its own.
0D9E7                           ;
0D9E7                           ResetScreenForTitleCard:
0D9E7 20 F6 E3                  	JSR EnableNMI
0D9EA                           
0D9EA 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
0D9ED                           
0D9ED 20 DC D9                  	JSR SetScrollXYTo0
0D9F0                           
0D9F0 A9 02                     	LDA #ScreenUpdateBuffer_RAM_55F
0D9F2 85 11                     	STA ScreenUpdateIndex
0D9F4 20 76 E4                  	JSR WaitForNMI
0D9F7                           
0D9F7 A9 00                     	LDA #VMirror
0D9F9 20 15 FE                  	JSR ChangeNametableMirroring
0D9FC                           
0D9FC 20 6F E6                  	JSR ClearNametablesAndSprites
0D9FF                           
0D9FF 60                        	RTS
0DA00                           
0DA00                           
0DA00                           ;
0DA00                           ; Enables NMI and draws the background of the pause screen
0DA00                           ;
0DA00                           EnableNMI_PauseTitleCard:
0DA00 20 F6 E3                  	JSR EnableNMI
0DA03                           
0DA03 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
0DA06                           
0DA06 A9 40                     	LDA #Stack100_Menu
0DA08 8D 00 01                  	STA StackArea
0DA0B A9 03                     	LDA #ScreenUpdateBuffer_CharacterSelect
0DA0D 85 11                     	STA ScreenUpdateIndex
0DA0F 20 76 E4                  	JSR WaitForNMI
0DA12                           
0DA12 A9 04                     	LDA #ScreenUpdateBuffer_BANKE_DE7A
0DA14 85 11                     	STA ScreenUpdateIndex
0DA16 4C 76 E4                  	JMP WaitForNMI
0DA19                           
0DA19                           
0DA19                           ;
0DA19                           ; Draws world info for the title card and pause screens
0DA19                           ;
0DA19                           ; Input
0DA19                           ;   X = CurrentWorld
0DA19                           ;   Y = CurrentLevel (not actually used)
0DA19                           ;
0DA19                           DisplayLevelTitleCardText:
0DA19                           	; Level number (unused)
0DA19                           	; In Doki Doki Panic, this was displayed as a page number, keeping with
0DA19                           	; the storybook motif.
0DA19 C8                        	INY
0DA1A 98                        	TYA
0DA1B 20 59 E4                  	JSR GetTwoDigitNumberTiles
0DA1E                           
0DA1E                           	; World number
0DA1E E8                        	INX
0DA1F 8A                        	TXA
0DA20 09 D0                     	ORA #$D0
0DA22 8D 7D 71                  	STA byte_RAM_717D
0DA25                           	; Extra Life number
0DA25 AC ED 04                  	LDY ExtraLives
0DA28 88                        	DEY
0DA29 98                        	TYA
0DA2A 20 59 E4                  	JSR GetTwoDigitNumberTiles
0DA2D 8C 91 71                  	STY byte_RAM_7191
0DA30 8D 92 71                  	STA byte_RAM_7192
0DA33                           
0DA33                           	; Reset level dots
0DA33 A0 06                     	LDY #$06
0DA35 A9 FB                     	LDA #$FB
0DA37                           loc_BANKF_E1B6:
0DA37 99 6B 71                  	STA unk_RAM_716B, Y ; writes to $7171
0DA3A 88                        	DEY
0DA3B 10 FA                     	BPL loc_BANKF_E1B6
0DA3D                           
0DA3D                           	; Level number
0DA3D AC 35 06                  	LDY CurrentWorld
0DA40 AD 31 05                  	LDA CurrentLevel
0DA43 38                        	SEC
0DA44 F9 13 D9                  	SBC WorldStartingLevel, Y
0DA47 8D 29 06                  	STA CurrentLevelRelative
0DA4A 18                        	CLC
0DA4B 69 D1                     	ADC #$D1
0DA4D 8D 7F 71                  	STA byte_RAM_717F
0DA50                           
0DA50 B9 14 D9                  	LDA WorldStartingLevel + 1, Y
0DA53 38                        	SEC
0DA54 F9 13 D9                  	SBC WorldStartingLevel, Y
0DA57 85 03                     	STA byte_RAM_3
0DA59                           
0DA59                           	; Level dots
0DA59 A2 00                     	LDX #$00
0DA5B A0 00                     	LDY #$00
0DA5D                           loc_BANKF_E1DC:
0DA5D A9 FD                     	LDA #$FD
0DA5F EC 29 06                  	CPX CurrentLevelRelative
0DA62 D0 02                     	BNE loc_BANKF_E1E5
0DA64                           
0DA64 A9 F6                     	LDA #$F6
0DA66                           
0DA66                           loc_BANKF_E1E5:
0DA66 99 6B 71                  	STA unk_RAM_716B, Y
0DA69 C8                        	INY
0DA6A C8                        	INY
0DA6B E8                        	INX
0DA6C E4 03                     	CPX byte_RAM_3
0DA6E 90 ED                     	BCC loc_BANKF_E1DC
0DA70                           
0DA70                           	; Draw the card
0DA70 A9 08                     	LDA #ScreenUpdateBuffer_RAM_7168
0DA72 85 11                     	STA ScreenUpdateIndex
0DA74 60                        	RTS
0DA75                           
0DA75                           
0DA75                           ;
0DA75                           ; It's game time, pal
0DA75                           ;
0DA75                           SetStack100Gameplay:
0DA75 A9 C0                     	LDA #Stack100_Gameplay
0DA77 8D 00 01                  	STA StackArea
0DA7A 60                        	RTS
0DA7B                           
0DA7B                           
0DA7B                           ; =============== S U B R O U T I N E =======================================
0DA7B                           
0DA7B                           ;
0DA7B                           ; Resets various level-related variables to $00
0DA7B                           ;
0DA7B                           InitializeSomeLevelStuff:
0DA7B A9 00                     	LDA #$00
0DA7D 8D 32 05                  	STA CurrentLevelArea
0DA80 8D E8 04                  	STA CurrentLevelArea_Init
0DA83 8D 33 05                  	STA CurrentLevelEntryPage
0DA86 8D E9 04                  	STA CurrentLevelEntryPage_Init
0DA89 8D 34 05                  	STA TransitionType
0DA8C 8D EA 04                  	STA TransitionType_Init
0DA8F 85 50                     	STA PlayerState
0DA91 8D E6 04                  	STA PlayerState_Init
0DA94 8D 28 06                  	STA InSubspaceOrJar
0DA97 8D EE 04                  	STA InJarType
0DA9A 8D FF 04                  	STA StopwatchTimer
0DA9D 8D F6 06                  	STA PlayerCurrentSize
0DAA0 60                        	RTS
0DAA1                           
0DAA1                           
0DAA1                           PlayerSelectArrowTop:
0DAA1 C9                        	.db $C9
0DAA2 D5                        	.db $D5
0DAA3 D1                        	.db $D1
0DAA4 CD                        	.db $CD
0DAA5                           PlayerSelectArrowBottom:
0DAA5 E9                        	.db $E9
0DAA6 F5                        	.db $F5
0DAA7 F1                        	.db $F1
0DAA8 ED                        	.db $ED
0DAA9                           
0DAA9                           
0DAA9                           ;
0DAA9                           ; Displays the level title card and prepares the level to start by loading
0DAA9                           ; the world tiles, PRG banks A/B, and copying character data
0DAA9                           ;
0DAA9                           DisplayLevelTitleCardAndMore:
0DAA9 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
0DAAC                           
0DAAC 20 66 E3                  	JSR DisableNMI
0DAAF                           
0DAAF                           	; Set the scrolling mirror over to the right side...
0DAAF                           	; This Isn't quiiite correct, and causes a bunch of
0DAAF                           	; crud to show on the very left pixel -- residue
0DAAF                           	; from the character select screen
0DAAF A9 FF                     	LDA #$FF
0DAB1 85 FD                     	STA PPUScrollXMirror
0DAB3 20 97 FD                  	JSR ChangeTitleCardCHR
0DAB6                           
0DAB6 A9 05                     	LDA #PRGBank_A_B
0DAB8 20 FA FD                  	JSR ChangeMappedPRGBank
0DABB                           
0DABB 20 D9 84                  	JSR CopyCharacterStatsAndStuff
0DABE                           
0DABE 20 F6 E3                  	JSR EnableNMI
0DAC1                           
0DAC1 20 85 E6                  	JSR HideAllSprites
0DAC4                           
0DAC4 A0 23                     	LDY #$23
0DAC6                           DisplayLevelTitleCardAndMore_TitleCardPaletteLoop:
0DAC6 B9 72 D9                  	LDA TitleCardPalettes, Y
0DAC9 99 5F 05                  	STA PPUBuffer_55F, Y
0DACC 88                        	DEY
0DACD 10 F7                     	BPL DisplayLevelTitleCardAndMore_TitleCardPaletteLoop
0DACF                           
0DACF A9 02                     	LDA #ScreenUpdateBuffer_RAM_55F ; Then tell it to dump that into the PPU
0DAD1 85 11                     	STA ScreenUpdateIndex
0DAD3 20 76 E4                  	JSR WaitForNMI
0DAD6                           
0DAD6 A9 15                     	LDA #ScreenUpdateBuffer_TitleCard
0DAD8 85 11                     	STA ScreenUpdateIndex
0DADA 20 76 E4                  	JSR WaitForNMI
0DADD                           
0DADD 20 27 83                  	JSR DrawTitleCardWorldImage
0DAE0                           
0DAE0 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
0DAE3                           
0DAE3 20 C3 F4                  	JSR RestorePlayerToFullHealth
0DAE6                           
0DAE6                           	; Pause for the title card
0DAE6 A9 50                     	LDA #$50
0DAE8 85 02                     	STA byte_RAM_2
0DAEA                           PreLevelTitleCard_PauseLoop:
0DAEA 20 76 E4                  	JSR WaitForNMI
0DAED C6 02                     	DEC byte_RAM_2
0DAEF 10 F9                     	BPL PreLevelTitleCard_PauseLoop
0DAF1                           
0DAF1                           PreStartLevel:
0DAF1 20 75 DA                  	JSR SetStack100Gameplay
0DAF4                           
0DAF4 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
0DAF7                           
0DAF7 20 66 E3                  	JSR DisableNMI
0DAFA                           
0DAFA 20 2B FD                  	JSR LoadWorldCHRBanks
0DAFD                           
0DAFD A9 05                     	LDA #PRGBank_A_B
0DAFF 20 FA FD                  	JSR ChangeMappedPRGBank
0DB02                           
0DB02 20 D9 84                  	JSR CopyCharacterStatsAndStuff
0DB05                           
0DB05 20 F6 E3                  	JSR EnableNMI
0DB08                           
0DB08 60                        	RTS
0DB09                           
0DB09                           
0DB09                           ;
0DB09                           ; Runs the Character Select menu
0DB09                           ;
0DB09                           DoCharacterSelectMenu:
0DB09 20 76 E4                  	JSR WaitForNMI
0DB0C                           
0DB0C A9 00                     	LDA #$00
0DB0E 8D 01 20                  	STA PPUMASK
0DB11 20 66 E3                  	JSR DisableNMI
0DB14                           
0DB14 20 80 FD                  	JSR LoadCharacterSelectCHRBanks
0DB17                           
0DB17 A9 05                     	LDA #PRGBank_A_B
0DB19 20 FA FD                  	JSR ChangeMappedPRGBank
0DB1C                           
0DB1C                           IFDEF PLAYER_STUFF
0DB1C 20 D8 8A                      JSR CharSelectInitialize
0DB1F                           ENDIF
0DB1F                           
0DB1F 20 D9 84                  	JSR CopyCharacterStatsAndStuff
0DB22                           
0DB22 20 E7 D9                  	JSR ResetScreenForTitleCard
0DB25                           
0DB25 AD 36 06                  	LDA CharacterSelectBankSwitch
0DB28 C9 A5                     	CMP #$A5
0DB2A F0 0A                     	BEQ loc_BANKF_E2B2
0DB2C                           
0DB2C A9 05                     	LDA #PRGBank_A_B
0DB2E 20 FA FD                  	JSR ChangeMappedPRGBank
0DB31                           
0DB31 A9 A5                     	LDA #$A5
0DB33 8D 36 06                  	STA CharacterSelectBankSwitch
0DB36                           
0DB36                           loc_BANKF_E2B2:
0DB36 20 00 DA                  	JSR EnableNMI_PauseTitleCard
0DB39                           
0DB39 20 66 E3                  	JSR DisableNMI
0DB3C                           
0DB3C A9 02                     	LDA #Music1_CharacterSelect
0DB3E 8D 00 06                  	STA MusicQueue1
0DB41                           IFDEF PLAYER_STUFF
0DB41 C6 8F                         DEC CurrentCharacter
0DB43 E6 8F                     -   INC CurrentCharacter
0DB45 20 32 E7                      JSR ChkToNextValidCharacter 
0DB48 D0 F9                         BNE -
0DB4A AD EE EE                      LDA IndependentLives
0DB4D F0 08                         BEQ +
0DB4F A6 8F                         LDX CurrentCharacter
0DB51 BD F8 73                      LDA PlayerIndependentLives, X
0DB54 8D ED 04                      STA ExtraLives
0DB57                           +
0DB57 A5 8F                         LDA CurrentCharacter 
0DB59 18                            CLC
0DB5A 69 03                         ADC #$3
0DB5C 20 14 E9                      JSR Custom_BufferText
0DB5F                           ENDIF
0DB5F A5 8F                     	LDA CurrentCharacter
0DB61 8D 04 04                  	STA PreviousCharacter
0DB64 AD 35 06                  	LDA CurrentWorld
0DB67 8D 05 04                  	STA PreviousWorld
0DB6A A0 3F                     	LDY #$3F
0DB6C                           
0DB6C                           loc_BANKF_E2CA:
0DB6C B9 59 84                  	LDA PlayerSelectMarioSprites1, Y
0DB6F 99 10 02                  	STA SpriteDMAArea + $10, Y
0DB72 88                        	DEY
0DB73 10 F7                     	BPL loc_BANKF_E2CA
0DB75                           
0DB75 20 F6 E3                  	JSR EnableNMI
0DB78                           
0DB78 20 76 E4                  	JSR WaitForNMI
0DB7B                           
0DB7B AE 35 06                  	LDX CurrentWorld
0DB7E AC 31 05                  	LDY CurrentLevel
0DB81 20 19 DA                  	JSR DisplayLevelTitleCardText
0DB84                           
0DB84 20 76 E4                  	JSR WaitForNMI
0DB87                           
0DB87 4C 32 87                  	JMP loc_BANKF_E311
0DB8A                           
0DB8A                           ; ---------------------------------------------------------------------------
0DB8A                           
0DB8A                           IFNDEF PLAYER_STUFF_MOVE_CS
0DB8A                           loc_BANKF_E2E8:
0DB8A                           	LDA Player1JoypadPress
0DB8A                           	AND #ControllerInput_Right | ControllerInput_Left
0DB8A                           	BNE CharacterSelect_ChangeCharacter
0DB8A                           
0DB8A                           	JMP CharacterSelectMenuLoop
0DB8A                           
0DB8A                           ; ---------------------------------------------------------------------------
0DB8A                           
0DB8A                           CharacterSelect_ChangeCharacter:
0DB8A                           	LDA Player1JoypadPress
0DB8A                           	AND #ControllerInput_Right
0DB8A                           	BEQ loc_BANKF_E2FE
0DB8A                           
0DB8A                           	DEC CurrentCharacter
0DB8A                           	LDA #SoundEffect1_CherryGet
0DB8A                           	STA SoundEffectQueue1
0DB8A                           
0DB8A                           loc_BANKF_E2FE:
0DB8A                           	LDA Player1JoypadPress
0DB8A                           	AND #ControllerInput_Left
0DB8A                           	BEQ loc_BANKF_E30B
0DB8A                           
0DB8A                           	INC CurrentCharacter
0DB8A                           	LDA #SoundEffect1_CherryGet
0DB8A                           	STA SoundEffectQueue1
0DB8A                           
0DB8A                           loc_BANKF_E30B:
0DB8A                           	LDA CurrentCharacter
0DB8A                           	AND #$03
0DB8A                           	STA CurrentCharacter
0DB8A                           IFDEF PLAYER_STUFF
0DB8A                               JSR CharSelectInitialize
0DB8A                               JSR ChkToNextValidCharacter
0DB8A                               BNE CharacterSelect_ChangeCharacter
0DB8A                               LDA IndependentLives
0DB8A                               BEQ +
0DB8A                               LDX CurrentCharacter
0DB8A                               LDA PlayerIndependentLives, X
0DB8A                               STA ExtraLives
0DB8A                           	JSR DisplayLevelTitleCardText
0DB8A                               JSR WaitForNMI
0DB8A                           +
0DB8A                               LDA CurrentCharacter 
0DB8A                               CLC
0DB8A                               ADC #$3
0DB8A                               JSR Custom_BufferText
0DB8A                           	LDA #ScreenUpdateBuffer_RAM_301
0DB8A                           	STA ScreenUpdateIndex
0DB8A                               JSR WaitForNMI
0DB8A                               JMP loc_BANKF_E311
0DB8A                           ENDIF
0DB8A                           
0DB8A                           loc_BANKF_E311:
0DB8A                           	LDY #$00
0DB8A                           	LDA #$21
0DB8A                           	STA PPUBuffer_301
0DB8A                           	LDA #$C9
0DB8A                           	STA PPUBuffer_301 + 1
0DB8A                           	LDA #$4F
0DB8A                           	STA PPUBuffer_301 + 2
0DB8A                           	LDA #$FB
0DB8A                           	STA PPUBuffer_301 + 3
0DB8A                           	LDA #$21
0DB8A                           	STA PPUBuffer_301 + 4
0DB8A                           	LDA #$E9
0DB8A                           	STA PPUBuffer_301 + 5
0DB8A                           	LDA #$4F
0DB8A                           	STA PPUBuffer_301 + 6
0DB8A                           	LDA #$FB
0DB8A                           	STA PPUBuffer_301 + 7
0DB8A                           	LDY CurrentCharacter
0DB8A                           	LDA #$21
0DB8A                           	STA PPUBuffer_301 + 8
0DB8A                           	LDA PlayerSelectArrowTop, Y
0DB8A                           	STA PPUBuffer_301 + 9
0DB8A                           	LDA #$02
0DB8A                           	STA PPUBuffer_301 + 10
0DB8A                           	LDA #$BE
0DB8A                           	STA PPUBuffer_301 + 11
0DB8A                           	LDA #$C0
0DB8A                           	STA PPUBuffer_301 + 12
0DB8A                           	LDA #$21
0DB8A                           	STA PPUBuffer_301 + 13
0DB8A                           	LDA PlayerSelectArrowBottom, Y
0DB8A                           	STA PPUBuffer_301 + 14
0DB8A                           	LDA #$02
0DB8A                           	STA PPUBuffer_301 + 15
0DB8A                           	LDA #$BF
0DB8A                           	STA PPUBuffer_301 + 16
0DB8A                           	LDA #$C1
0DB8A                           	STA PPUBuffer_301 + 17
0DB8A                           	LDA #$00
0DB8A                           	STA PPUBuffer_301 + 18
0DB8A                           	JSR WaitForNMI_TurnOnPPU
0DB8A                           
0DB8A                           	LDX #$12
0DB8A                           	LDY #$00
0DB8A                           
0DB8A                           loc_BANKF_E37D:
0DB8A                           	LDA PlayerSelectSpritePalettesDark, Y
0DB8A                           	STA PPUBuffer_301, Y
0DB8A                           	INY
0DB8A                           	DEX
0DB8A                           	BPL loc_BANKF_E37D
0DB8A                           
0DB8A                           IFDEF PLAYER_STUFF
0DB8A                               JSR LockCharacterSelectColor
0DB8A                           ENDIF
0DB8A                           
0DB8A                           	LDA #$06
0DB8A                           	STA byte_RAM_A
0DB8A                           	LDX CurrentCharacter
0DB8A                           	LDA PlayerSelectPaletteOffsets, X
0DB8A                           	TAX
0DB8A                           
0DB8A                           loc_BANKF_E391:
0DB8A                           	LDA PlayerSelectSpritePalettes, X
0DB8A                           	STA PPUBuffer_301, Y
0DB8A                           	INY
0DB8A                           	INX
0DB8A                           	DEC byte_RAM_A
0DB8A                           	BPL loc_BANKF_E391
0DB8A                           
0DB8A                           	LDA #$00
0DB8A                           	STA PPUBuffer_301, Y
0DB8A                           
0DB8A                           CharacterSelectMenuLoop:
0DB8A                           	JSR WaitForNMI_TurnOnPPU
0DB8A                           
0DB8A                           	LDA Player1JoypadPress
0DB8A                           	AND #ControllerInput_A
0DB8A                           	BNE loc_BANKF_E3AE
0DB8A                           
0DB8A                           	JMP loc_BANKF_E2E8
0DB8A                           ENDIF
0DB8A                           
0DB8A                           ; ---------------------------------------------------------------------------
0DB8A                           
0DB8A                           loc_BANKF_E3AE:
0DB8A A9 04                     	LDA #SoundEffect1_CherryGet
0DB8C 8D 02 06                  	STA SoundEffectQueue1
0DB8F AE 35 06                  	LDX CurrentWorld
0DB92 AC 31 05                  	LDY CurrentLevel
0DB95 20 19 DA                  	JSR DisplayLevelTitleCardText
0DB98                           
0DB98 A9 40                     	LDA #$40
0DB9A 85 10                     	STA byte_RAM_10
0DB9C 20 76 E4                  	JSR WaitForNMI
0DB9F                           
0DB9F A2 0F                     	LDX #$F
0DBA1 A5 8F                     	LDA CurrentCharacter
0DBA3 A8                        	TAY
0DBA4 B9 1B D9                  	LDA PlayerSelectSpriteIndexes, Y
0DBA7 A8                        	TAY
0DBA8                           
0DBA8                           loc_BANKF_E3CC:
0DBA8 B9 99 84                  	LDA PlayerSelectMarioSprites2, Y
0DBAB 99 10 02                  	STA SpriteDMAArea + $10, Y
0DBAE C8                        	INY
0DBAF CA                        	DEX
0DBB0 10 F6                     	BPL loc_BANKF_E3CC
0DBB2                           
0DBB2                           loc_BANKF_E3D6:
0DBB2 20 76 E4                  	JSR WaitForNMI
0DBB5                           
0DBB5 C6 10                     	DEC byte_RAM_10
0DBB7 10 F9                     	BPL loc_BANKF_E3D6
0DBB9                           
0DBB9 A0 3F                     	LDY #$3F
0DBBB                           
0DBBB                           loc_BANKF_E3DF:
0DBBB B9 59 84                  	LDA PlayerSelectMarioSprites1, Y
0DBBE 99 10 02                  	STA SpriteDMAArea + $10, Y
0DBC1 88                        	DEY
0DBC2 10 F7                     	BPL loc_BANKF_E3DF
0DBC4                           
0DBC4 A9 40                     	LDA #$40
0DBC6 85 10                     	STA byte_RAM_10
0DBC8                           
0DBC8                           loc_BANKF_E3EC:
0DBC8 20 76 E4                  	JSR WaitForNMI
0DBCB                           
0DBCB C6 10                     	DEC byte_RAM_10
0DBCD 10 F9                     	BPL loc_BANKF_E3EC
0DBCF                           
0DBCF A9 80                     	LDA #Music2_StopMusic
0DBD1 8D 03 06                  	STA MusicQueue2
0DBD4 60                        	RTS
0DBD5                           
0DBD5                           
0DBD5                           ;
0DBD5                           ; This starts the game once RESET has done its thing.
0DBD5                           ; We also come here after choosing "RETRY" from the game over menu.
0DBD5                           ;
0DBD5                           IFDEF EXTENDED_PTR_CONTINUE:
0DBD5                           Data_StartLevel:
0DBD5 00 00 00 00                   .db $0, $0, $0, $0
0DBD9                           ENDIF
0DBD9                           StartGame:
0DBD9 A9 00                     	LDA #$00
0DBDB 8D 01 20                  	STA PPUMASK
0DBDE 20 66 E3                  	JSR DisableNMI
0DBE1                           
0DBE1 A9 00                     	LDA #PRGBank_0_1
0DBE3 8D F3 06                  	STA GameMilestoneCounter
0DBE6 20 FA FD                  	JSR ChangeMappedPRGBank
0DBE9                           
0DBE9 20 83 A0                  	JSR TitleScreen ; The whole title screen is a subroutine, lol
0DBEC                           
0DBEC EE F3 06                  	INC GameMilestoneCounter
0DBEF                           IFDEF EXTENDED_PTR_CONTINUE:
0DBEF AD D5 DB                      LDA Data_StartLevel
0DBF2 8D C6 05                      STA ContinueLevel
0DBF5 AD D6 DB                      LDA Data_StartLevel + 1 
0DBF8 8D C7 05                      STA ContinueLevel + 1
0DBFB AD D7 DB                      LDA Data_StartLevel + 2
0DBFE 8D C8 05                      STA ContinueLevel + 2
0DC01 AD D8 DB                      LDA Data_StartLevel + 3
0DC04 8D C9 05                      STA ContinueLevel + 3
0DC07                           ENDIF
0DC07                           SetNumContinues:
0DC07 A9 02                     	LDA #$02 ; Number of continues on start
0DC09 8D C5 05                  	STA Continues
0DC0C                           IFDEF PLAYER_STUFF
0DC0C A9 0F                         LDA #$F
0DC0E 8D E0 7D                      STA CharacterLock_Variable
0DC11 20 88 E9                      JSR ClearPlayerStuff
0DC14                           ENDIF
0DC14                           IFDEF FLAGSET
0DC14 AD EC EE                      LDA StartHealth
0DC17 8D C3 04                      STA PlayerMaxHealth
0DC1A A0 0B                         LDY #$0b
0DC1C B9 F3 EE                  -   LDA StartingInventory, Y
0DC1F 99 E0 76                      STA Player_Bit_Flags, Y
0DC22 88                            DEY
0DC23 10 F7                         BPL -
0DC25                           ENDIF
0DC25                           IFDEF HOT_SPOTS
0DC25 20 BE EE                      JSR ClearHotSpots
0DC28                           ENDIF
0DC28                           
0DC28                           ; We return here after picking "CONTINUE" from the game over menu.
0DC28                           ContinueGame:
0DC28 A9 03                     	LDA #$03 ; Number of lives to start
0DC2A 8D ED 04                  	STA ExtraLives
0DC2D                           IFDEF FLAGSET
0DC2D                           ResetPlayer_Lives:
0DC2D A0 03                         LDY #$03
0DC2F 99 F8 73                  -   STA PlayerIndependentLives, Y
0DC32 88                            DEY
0DC33 10 FA                         BPL -
0DC35                           ENDIF
0DC35                           
0DC35                           StartCharacterSelectMenu:
0DC35                           IFNDEF EXTENDED_PTR_CONTINUE:
0DC35                           	LDX CurrentWorld
0DC35                           	LDY WorldStartingLevel, X
0DC35                           	STY CurrentLevel
0DC35                           	STY CurrentLevel_Init
0DC35                           ENDIF
0DC35 20 09 DB                  	JSR DoCharacterSelectMenu
0DC38                           
0DC38 20 7B DA                  	JSR InitializeSomeLevelStuff
0DC3B                           
0DC3B                           IFDEF EXTENDED_PTR_CONTINUE:
0DC3B A0 03                         LDY #$03
0DC3D                           Func_ContinueLevel_Replace:
0DC3D B9 C6 05                  	LDA ContinueLevel, Y
0DC40 99 E7 04                  	STA CurrentLevel_Init, Y
0DC43 99 31 05                  	STA CurrentLevel, Y
0DC46 88                        	DEY
0DC47 10 F4                         BPL Func_ContinueLevel_Replace
0DC49 20 67 FC                      JSR WorldChangeF
0DC4C AC 35 06                  	LDY CurrentWorld
0DC4F 38                        	SEC
0DC50 F9 13 D9                  	SBC WorldStartingLevel, Y
0DC53 8D 29 06                  	STA CurrentLevelRelative
0DC56                           ENDIF
0DC56                           
0DC56 20 A9 DA                  	JSR DisplayLevelTitleCardAndMore
0DC59                           
0DC59 A9 FF                     	LDA #$FF
0DC5B 8D 45 05                  	STA CurrentMusicIndex
0DC5E D0 1A                     	BNE StartLevel ; Branch always
0DC60                           
0DC60                           CharacterSelectMenu:
0DC60 20 09 DB                  	JSR DoCharacterSelectMenu
0DC63                           
0DC63                           StartLevelAfterTitleCard:
0DC63                           IFDEF PLAYER_STUFF
0DC63                           
0DC63 A9 05                     	LDA #PRGBank_A_B
0DC65 20 FA FD                  	JSR ChangeMappedPRGBank
0DC68                           
0DC68 20 E7 D9                  	JSR ResetScreenForTitleCard
0DC6B 20 00 DA                  	JSR EnableNMI_PauseTitleCard
0DC6E AE 35 06                  	LDX CurrentWorld
0DC71 AC 31 05                  	LDY CurrentLevel
0DC74 20 19 DA                  	JSR DisplayLevelTitleCardText
0DC77                           
0DC77                           ENDIF
0DC77 20 A9 DA                  	JSR DisplayLevelTitleCardAndMore
0DC7A                           
0DC7A                           StartLevel:
0DC7A 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
0DC7D                           
0DC7D A9 B0                     	LDA #$B0
0DC7F 05 C9                     	ORA byte_RAM_C9
0DC81 A4 EC                     	LDY IsHorizontalLevel
0DC83 D0 04                     	BNE StartLevel_SetPPUCtrlMirror
0DC85                           
0DC85 29 FE                     	AND #$FE
0DC87 05 C8                     	ORA byte_RAM_C8
0DC89                           
0DC89                           StartLevel_SetPPUCtrlMirror:
0DC89 85 FF                     	STA PPUCtrlMirror
0DC8B 8D 00 20                  	STA PPUCTRL
0DC8E A9 80                     	LDA #Stack100_Transition
0DC90 8D 00 01                  	STA StackArea
0DC93 A9 04                     	LDA #PRGBank_8_9
0DC95 20 FA FD                  	JSR ChangeMappedPRGBank
0DC98                           
0DC98 20 16 FB                  	JSR GetLevelPointers
0DC9B                           
0DC9B A9 03                     	LDA #PRGBank_6_7
0DC9D 20 FA FD                  	JSR ChangeMappedPRGBank
0DCA0                           
0DCA0 20 78 95                  	JSR LoadCurrentArea
0DCA3                           
0DCA3 20 A4 93                  	JSR LoadCurrentPalette
0DCA6                           
0DCA6                           IFDEF AREA_HEADER_TILESET
0DCA6 20 2B FD                  	JSR LoadWorldCHRBanks
0DCA9                           ENDIF
0DCA9                           
0DCA9 20 85 E6                  	JSR HideAllSprites
0DCAC                           
0DCAC 20 76 E4                  	JSR WaitForNMI
0DCAF                           
0DCAF 20 75 DA                  	JSR SetStack100Gameplay
0DCB2                           
0DCB2 A9 B0                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0DCB4 85 FF                     	STA PPUCtrlMirror
0DCB6                           
0DCB6 A5 EC                     	LDA IsHorizontalLevel
0DCB8 F0 54                     	BEQ StartLevel_Vertical_Loop
0DCBA                           
0DCBA                           StartLevel_Horizontal_Loop:
0DCBA 20 76 E4                  	JSR WaitForNMI
0DCBD                           
0DCBD A9 00                     	LDA #PRGBank_0_1
0DCBF 20 FA FD                  	JSR ChangeMappedPRGBank
0DCC2                           
0DCC2 20 B8 84                  	JSR InitializeAreaHorizontal
0DCC5                           
0DCC5 20 2F FA                  	JSR EnsureCorrectMusic
0DCC8                           
0DCC8 A5 13                     	LDA BreakStartLevelLoop
0DCCA F0 EE                     	BEQ StartLevel_Horizontal_Loop
0DCCC                           
0DCCC A9 00                     	LDA #$00
0DCCE 85 13                     	STA BreakStartLevelLoop
0DCD0 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
0DCD3                           
0DCD3                           loc_BANKF_E491:
0DCD3 20 76 E4                  	JSR WaitForNMI
0DCD6                           
0DCD6 A5 D8                     	LDA NeedVerticalScroll
0DCD8 29 04                     	AND #$04
0DCDA D0 09                     	BNE loc_BANKF_E4A3
0DCDC                           
0DCDC A5 F5                     	LDA Player1JoypadPress
0DCDE 29 10                     	AND #ControllerInput_Start
0DCE0 F0 03                     	BEQ loc_BANKF_E4A3
0DCE2                           
0DCE2 4C 57 DD                  	JMP ShowPauseScreen
0DCE5                           
0DCE5                           ; ---------------------------------------------------------------------------
0DCE5                           
0DCE5                           loc_BANKF_E4A3:
0DCE5 AD 28 06                  	LDA InSubspaceOrJar
0DCE8 F0 03                     	BEQ loc_BANKF_E4AB
0DCEA                           
0DCEA 4C FD DD                  	JMP loc_BANKF_E5A0
0DCED                           
0DCED                           ; ---------------------------------------------------------------------------
0DCED                           
0DCED                           ; horizontal level
0DCED                           loc_BANKF_E4AB:
0DCED 20 85 E6                  	JSR HideAllSprites
0DCF0                           
0DCF0 20 78 F3                  	JSR sub_BANKF_F11E
0DCF3                           
0DCF3 AC EC 04                  	LDY GameMode
0DCF6 F0 03                     	BEQ loc_BANKF_E4B9
0DCF8                           
0DCF8 4C D1 DE                  	JMP loc_BANKF_E665
0DCFB                           
0DCFB                           ; ---------------------------------------------------------------------------
0DCFB                           
0DCFB                           loc_BANKF_E4B9:
0DCFB AD 27 06                  	LDA DoAreaTransition
0DCFE F0 D3                     	BEQ loc_BANKF_E491
0DD00                           
0DD00 20 CF F9                  	JSR sub_BANKF_F6A1
0DD03                           
0DD03 20 4C F4                  	JSR sub_BANKF_F1AE
0DD06                           
0DD06 A9 00                     	LDA #$00
0DD08 8D 27 06                  	STA DoAreaTransition
0DD0B 4C 7A DC                  	JMP StartLevel
0DD0E                           
0DD0E                           StartLevel_Vertical_Loop:
0DD0E 20 76 E4                  	JSR WaitForNMI
0DD11                           
0DD11 A9 00                     	LDA #PRGBank_0_1
0DD13 20 FA FD                  	JSR ChangeMappedPRGBank
0DD16                           
0DD16 20 00 80                  	JSR InitializeAreaVertical
0DD19                           
0DD19 20 2F FA                  	JSR EnsureCorrectMusic
0DD1C                           
0DD1C A5 13                     	LDA BreakStartLevelLoop
0DD1E F0 EE                     	BEQ StartLevel_Vertical_Loop
0DD20                           
0DD20 A9 00                     	LDA #$00
0DD22 85 13                     	STA BreakStartLevelLoop
0DD24 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
0DD27                           
0DD27                           loc_BANKF_E4E5:
0DD27 20 76 E4                  	JSR WaitForNMI
0DD2A                           
0DD2A A5 D8                     	LDA NeedVerticalScroll
0DD2C 29 04                     	AND #$04
0DD2E D0 06                     	BNE loc_BANKF_E4F4
0DD30                           
0DD30 A5 F5                     	LDA Player1JoypadPress
0DD32 29 10                     	AND #ControllerInput_Start
0DD34 D0 21                     	BNE ShowPauseScreen
0DD36                           
0DD36                           ; vertical level
0DD36                           loc_BANKF_E4F4:
0DD36                           IFDEF PLAYER_STUFF_JAR
0DD36                           	LDA InSubspaceOrJar
0DD36                           	BEQ +
0DD36                               JMP loc_BANKF_E5A0
0DD36                           +
0DD36                           ENDIF
0DD36                           
0DD36 20 85 E6                  	JSR HideAllSprites
0DD39                           
0DD39 20 15 F4                  	JSR sub_BANKF_F17E
0DD3C                           
0DD3C AC EC 04                  	LDY GameMode
0DD3F F0 03                     	BEQ loc_BANKF_E502
0DD41                           
0DD41 4C D1 DE                  	JMP loc_BANKF_E665
0DD44                           
0DD44                           ; ---------------------------------------------------------------------------
0DD44                           
0DD44                           loc_BANKF_E502:
0DD44 AD 27 06                  	LDA DoAreaTransition
0DD47 F0 DE                     	BEQ loc_BANKF_E4E5
0DD49                           
0DD49 20 CF F9                  	JSR sub_BANKF_F6A1
0DD4C                           
0DD4C 20 4C F4                  	JSR sub_BANKF_F1AE
0DD4F                           
0DD4F A9 00                     	LDA #$00
0DD51 8D 27 06                  	STA DoAreaTransition
0DD54 4C 7A DC                  	JMP StartLevel
0DD57                           
0DD57                           
0DD57                           ;
0DD57                           ; Pauses the game
0DD57                           ;
0DD57                           ShowPauseScreen:
0DD57 20 AD E3                  	JSR PauseScreen_ExtraLife
0DD5A                           IFDEF PLAYER_STUFF
0DD5A A5 F7                         LDA Player1JoypadHeld
0DD5C 29 20                         AND #ControllerInput_Select
0DD5E F0 12                         BEQ +
0DD60 A9 00                     	LDA #$00
0DD62 8D C7 04                  	STA PlayerInRocket
0DD65 8D 1B 04                  	STA PlayerLock
0DD68 AD F8 04                      LDA FryguySplitFlames
0DD6B F0 05                         BEQ +
0DD6D A9 00                         LDA #$0
0DD6F 8D AE 04                      STA AreaInitialized
0DD72                           +
0DD72                           ENDIF
0DD72                           
0DD72                           	; used when running sound queues
0DD72 A9 41                     	LDA #Stack100_Pause
0DD74 8D 00 01                  	STA StackArea
0DD77                           
0DD77                           PauseScreenLoop:
0DD77 A9 0E                     	LDA #$0E
0DD79 85 06                     	STA byte_RAM_6
0DD7B                           
0DD7B                           DoSuicideCheatCheck:
0DD7B 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
0DD7E                           
0DD7E A5 50                     	LDA PlayerState ; Check if the player is already dying
0DD80 C9 07                     	CMP #PlayerState_Dying
0DD82 F0 09                     	BEQ PauseScreenExitCheck ; If so, skip the suicide code check
0DD84                           
0DD84 A5 F8                     	LDA Player2JoypadHeld ; Check for suicide code
0DD86 C9 C8                     	CMP #ControllerInput_Up | ControllerInput_B | ControllerInput_A ; Up + A + B
0DD88 D0 03                     	BNE PauseScreenExitCheck ; Not being held! Nothing to see here
0DD8A                           
0DD8A 20 C3 FA                  	JSR KillPlayer ; KILL THYSELF
0DD8D                           
0DD8D                           PauseScreenExitCheck:
0DD8D A5 F5                     	LDA Player1JoypadPress
0DD8F 29 10                     	AND #ControllerInput_Start
0DD91 D0 15                     	BNE HidePauseScreen
0DD93                           
0DD93                           IFDEF FLAGSET
0DD93 20 08 F0                      JSR InputPause_Stats
0DD96                           ENDIF
0DD96                           
0DD96 C6 06                     	DEC byte_RAM_6
0DD98 10 E1                     	BPL DoSuicideCheatCheck
0DD9A                           
0DD9A E6 07                     	INC byte_RAM_7
0DD9C A5 07                     	LDA byte_RAM_7
0DD9E 29 01                     	AND #$01
0DDA0 18                        	CLC
0DDA1 69 0D                     	ADC #$0D ; Will use either $0D or $0E from the update index pointers
0DDA3 85 11                     	STA ScreenUpdateIndex ; @TODO I assume this is what blinks "PAUSE"
0DDA5 4C 77 DD                  	JMP PauseScreenLoop
0DDA8                           
0DDA8                           ;
0DDA8                           ; Unpauses the game
0DDA8                           ;
0DDA8                           HidePauseScreen:
0DDA8 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
0DDAB                           
0DDAB 20 2B FD                  	JSR LoadWorldCHRBanks
0DDAE                           
0DDAE A9 03                     	LDA #PRGBank_6_7
0DDB0 20 FA FD                  	JSR ChangeMappedPRGBank
0DDB3                           
0DDB3 20 A4 93                  	JSR LoadCurrentPalette
0DDB6                           
0DDB6 20 76 E4                  	JSR WaitForNMI
0DDB9                           
0DDB9 20 75 DA                  	JSR SetStack100Gameplay
0DDBC                           
0DDBC 20 85 E6                  	JSR HideAllSprites
0DDBF                           
0DDBF A9 00                     	LDA #PRGBank_0_1
0DDC1 20 FA FD                  	JSR ChangeMappedPRGBank
0DDC4                           
0DDC4 20 D6 81                  	JSR RestoreScreenScrollPosition
0DDC7                           
0DDC7 A5 EC                     	LDA IsHorizontalLevel
0DDC9 D0 19                     	BNE HidePauseScreen_Horizontal
0DDCB                           
0DDCB                           HidePauseScreen_Vertical:
0DDCB A9 01                     	LDA #HMirror
0DDCD 20 15 FE                  	JSR ChangeNametableMirroring
0DDD0                           
0DDD0 20 FE 81                  	JSR sub_BANK0_81FE
0DDD3                           
0DDD3                           HidePauseScreen_Vertical_Loop:
0DDD3 20 76 E4                  	JSR WaitForNMI
0DDD6                           
0DDD6 20 3D 82                  	JSR sub_BANK0_823D
0DDD9                           
0DDD9 AD 37 05                  	LDA byte_RAM_537
0DDDC F0 F5                     	BEQ HidePauseScreen_Vertical_Loop
0DDDE                           
0DDDE 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
0DDE1                           
0DDE1 4C 27 DD                  	JMP loc_BANKF_E4E5
0DDE4                           
0DDE4                           HidePauseScreen_Horizontal:
0DDE4 A9 00                     	LDA #VMirror
0DDE6 20 15 FE                  	JSR ChangeNametableMirroring
0DDE9                           
0DDE9 20 3D 87                  	JSR sub_BANK0_8785
0DDEC                           
0DDEC                           HidePauseScreen_Horizontal_Loop:
0DDEC 20 76 E4                  	JSR WaitForNMI
0DDEF                           
0DDEF 20 62 87                  	JSR sub_BANK0_87AA
0DDF2                           
0DDF2 AD 37 05                  	LDA byte_RAM_537
0DDF5 F0 F5                     	BEQ HidePauseScreen_Horizontal_Loop
0DDF7                           
0DDF7 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
0DDFA                           
0DDFA 4C D3 DC                  	JMP loc_BANKF_E491
0DDFD                           
0DDFD                           ; ---------------------------------------------------------------------------
0DDFD                           
0DDFD                           loc_BANKF_E5A0:
0DDFD 20 6F E6                  	JSR ClearNametablesAndSprites
0DE00                           
0DE00 A9 03                     	LDA #PRGBank_6_7
0DE02 20 FA FD                  	JSR ChangeMappedPRGBank
0DE05                           
0DE05 A9 00                     	LDA #$00
0DE07 8D 22 06                  	STA SubspaceCoins
0DE0A AD 28 06                  	LDA InSubspaceOrJar
0DE0D C9 02                     	CMP #$02
0DE0F F0 20                     	BEQ loc_BANKF_E5D4
0DE11                           
0DE11 A9 04                     	LDA #PRGBank_8_9
0DE13 20 FA FD                  	JSR ChangeMappedPRGBank
0DE16                           
0DE16 20 83 FB                  	JSR GetJarPointers
0DE19                           
0DE19 20 42 FB                  	JSR GetEnemyPointers
0DE1C                           
0DE1C A9 03                     	LDA #PRGBank_6_7
0DE1E 20 FA FD                  	JSR ChangeMappedPRGBank
0DE21                           
0DE21 20 B9 94                  	JSR ClearSubAreaTileLayout
0DE24                           
0DE24 A9 04                     	LDA #Music1_Inside
0DE26 8D 00 06                  	STA MusicQueue1
0DE29 A9 01                     	LDA #$01
0DE2B 8D 45 05                  	STA CurrentMusicIndex
0DE2E 4C 3E DE                  	JMP loc_BANKF_E5E1
0DE31                           
0DE31                           ; ---------------------------------------------------------------------------
0DE31                           
0DE31                           loc_BANKF_E5D4:
0DE31 20 1D 94                  	JSR GenerateSubspaceArea
0DE34                           
0DE34 A9 20                     	LDA #Music1_Subspace
0DE36 8D 00 06                  	STA MusicQueue1
0DE39 A9 04                     	LDA #$04
0DE3B 8D 45 05                  	STA CurrentMusicIndex
0DE3E                           
0DE3E                           loc_BANKF_E5E1:
0DE3E A9 00                     	LDA #PRGBank_0_1
0DE40 20 FA FD                  	JSR ChangeMappedPRGBank
0DE43                           
0DE43 20 C4 86                  	JSR sub_BANK0_870C
0DE46                           
0DE46 20 F6 E3                  	JSR EnableNMI
0DE49                           
0DE49                           loc_BANKF_E5EC:
0DE49 20 76 E4                  	JSR WaitForNMI
0DE4C                           
0DE4C 20 62 87                  	JSR sub_BANK0_87AA
0DE4F                           
0DE4F AD 37 05                  	LDA byte_RAM_537
0DE52 F0 F5                     	BEQ loc_BANKF_E5EC
0DE54                           
0DE54 AD 28 06                  	LDA InSubspaceOrJar
0DE57 C9 02                     	CMP #$02
0DE59 F0 08                     	BEQ loc_BANKF_E606
0DE5B                           
0DE5B A9 03                     	LDA #PRGBank_6_7
0DE5D 20 FA FD                  	JSR ChangeMappedPRGBank
0DE60                           
0DE60 20 A4 93                  	JSR LoadCurrentPalette
0DE63                           
0DE63                           loc_BANKF_E606:
0DE63 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
0DE66                           
0DE66                           ; subspace
0DE66                           loc_BANKF_E609:
0DE66 20 76 E4                  	JSR WaitForNMI
0DE69                           
0DE69 20 85 E6                  	JSR HideAllSprites
0DE6C                           
0DE6C 20 4C F3                  	JSR sub_BANKF_F0F9
0DE6F                           
0DE6F AC EC 04                  	LDY GameMode
0DE72 F0 03                     	BEQ loc_BANKF_E61A
0DE74                           
0DE74 4C D1 DE                  	JMP loc_BANKF_E665
0DE77                           
0DE77                           ; ---------------------------------------------------------------------------
0DE77                           
0DE77                           loc_BANKF_E61A:
0DE77 AD 28 06                  	LDA InSubspaceOrJar
0DE7A D0 EA                     	BNE loc_BANKF_E609
0DE7C                           
0DE7C                           IFNDEF FLAGSET
0DE7C                           	LDA SubspaceCoins
0DE7C                           	BEQ loc_BANKF_E627
0DE7C                           ENDIF
0DE7C                           
0DE7C EE 21 06                  	INC SubspaceVisits
0DE7F                           IFDEF FLAGSET
0DE7F EE E4 73                      INC Level_Count_SubspaceVisits
0DE82 A2 10                         LDX #CustomBitFlag_Sub1
0DE84 20 83 F1                      JSR ApplyFlagLevel
0DE87 D0 07                         BNE +
0DE89 A2 20                         LDX #CustomBitFlag_Sub2
0DE8B 20 83 F1                      JSR ApplyFlagLevel 
0DE8E D0 00                         BNE +
0DE90                           +   
0DE90                           ENDIF
0DE90                           
0DE90                           loc_BANKF_E627:
0DE90 AD 19 05                  	LDA CurrentLevelAreaCopy
0DE93 8D 32 05                  	STA CurrentLevelArea
0DE96 A9 03                     	LDA #PRGBank_6_7
0DE98 20 FA FD                  	JSR ChangeMappedPRGBank
0DE9B                           
0DE9B 20 A4 93                  	JSR LoadCurrentPalette
0DE9E                           
0DE9E 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
0DEA1                           
0DEA1 20 85 E6                  	JSR HideAllSprites
0DEA4                           
0DEA4 AC 44 05                  	LDY CompareMusicIndex
0DEA7 8C 45 05                  	STY CurrentMusicIndex
0DEAA AD E0 04                  	LDA StarInvincibilityTimer
0DEAD D0 09                     	BNE loc_BANKF_E64C
0DEAF                           
0DEAF B9 47 F3                  	LDA LevelMusicIndexes, Y
0DEB2 8D 00 06                  	STA MusicQueue1
0DEB5                           IFDEF PLAYER_STUFF
0DEB5 20 00 F4                      JSR CustomMusicChange
0DEB8                           ENDIF
0DEB8                           
0DEB8                           loc_BANKF_E64C:
0DEB8 A9 00                     	LDA #PRGBank_0_1
0DEBA 20 FA FD                  	JSR ChangeMappedPRGBank
0DEBD                           
0DEBD 20 04 87                  	JSR sub_BANK0_874C
0DEC0                           
0DEC0                           loc_BANKF_E654:
0DEC0 20 76 E4                  	JSR WaitForNMI
0DEC3                           
0DEC3 20 62 87                  	JSR sub_BANK0_87AA
0DEC6                           
0DEC6 AD 37 05                  	LDA byte_RAM_537
0DEC9 F0 F5                     	BEQ loc_BANKF_E654
0DECB                           
0DECB 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
0DECE                           
0DECE 4C D3 DC                  	JMP loc_BANKF_E491
0DED1                           
0DED1                           ; ---------------------------------------------------------------------------
0DED1                           
0DED1                           loc_BANKF_E665:
0DED1 20 66 FA                  	JSR DoAreaReset
0DED4                           
0DED4 AC EC 04                  	LDY GameMode
0DED7 A9 00                     	LDA #GameMode_InGame
0DED9 8D EC 04                  	STA GameMode
0DEDC 8D E0 04                  	STA StarInvincibilityTimer
0DEDF 8D 2C 06                  	STA BigVeggiesPulled
0DEE2 8D 2A 06                  	STA CherryCount
0DEE5                           IFDEF PLAYER_STUFF
0DEE5 8D E9 73                      STA Level_Count_Cherries
0DEE8                           ENDIF
0DEE8 8D FF 04                  	STA StopwatchTimer
0DEEB 88                        	DEY
0DEEC D0 75                     	BNE loc_BANKF_E69F
0DEEE                           
0DEEE 8C F6 06                  	STY PlayerCurrentSize
0DEF1 20 8C F4                  	JSR LevelInitialization
0DEF4                           
0DEF4 A9 FF                     	LDA #$FF
0DEF6 8D 45 05                  	STA CurrentMusicIndex
0DEF9                           	; this looks like an address
0DEF9 A9 25                     	LDA #$25
0DEFB 8D 80 71                  	STA byte_RAM_7180
0DEFE A9 48                     	LDA #$48
0DF00 8D 81 71                  	STA byte_RAM_7181
0DF03 A9 15                     	LDA #ScreenUpdateBuffer_TitleCard
0DF05 8D BD 05                  	STA CardScreenUpdateIndex
0DF08 20 BC E3                  	JSR PauseScreen_Card
0DF0B                           
0DF0B                           AfterDeathJump:
0DF0B                           IFDEF FLAGSET
0DF0B A6 8F                         LDX CurrentCharacter
0DF0D BD F8 73                      LDA PlayerIndependentLives, X
0DF10 D0 03                         BNE +
0DF12 4C 60 DC                  	JMP CharacterSelectMenu
0DF15                           +
0DF15 AD F0 EE                      LDA CharSelectDeath
0DF18 F0 03                         BEQ +
0DF1A 4C 60 DC                  	JMP CharacterSelectMenu
0DF1D                           +
0DF1D                           ENDIF
0DF1D                           IFNDEF CHARACTER_SELECT_AFTER_DEATH
0DF1D 4C 63 DC                  	JMP StartLevelAfterTitleCard
0DF20                           ENDIF
0DF20                           IFDEF CHARACTER_SELECT_AFTER_DEATH
0DF20                           	JMP CharacterSelectMenu
0DF20                           ENDIF
0DF20                           
0DF20                           ; ---------------------------------------------------------------------------
0DF20                           
0DF20                           IFDEF HOT_SPOTS
0DF20                           EnemyInit1toF:
0DF20 A9 01                         LDA #PRGBank_2_3
0DF22 20 FA FD                      JSR ChangeMappedPRGBank
0DF25 B5 90                     	LDA ObjectType, X
0DF27 20 1F 84                      JSR InitializeEnemy
0DF2A A9 00                         LDA #PRGBank_0_1
0DF2C 20 FA FD                      JSR ChangeMappedPRGBank
0DF2F 60                            RTS
0DF30                           ENDIF
0DF30                           
0DF30                           IFDEF PLAYER_STUFF_EXTENDED
0DF30                           EnemyTableInit2toA:
0DF30                               LDA #PRGBank_A_B
0DF30                               JSR ChangeMappedPRGBank
0DF30                           	LDA ObjectType, X
0DF30                               CLC
0DF30                               SBC #LastEnemySlot
0DF30                               JSR InitializeEnemyAB
0DF30                               LDA #PRGBank_2_3
0DF30                               JSR ChangeMappedPRGBank
0DF30                               RTS
0DF30                           
0DF30                           EnemyTableBeh2toA:
0DF30                               LDA #PRGBank_A_B
0DF30                               JSR ChangeMappedPRGBank
0DF30                           	LDA ObjectType, X
0DF30                               CLC
0DF30                               SBC #LastEnemySlot
0DF30                               JSR EnemyBehaviorAB 
0DF30                               LDA #PRGBank_2_3
0DF30                               JSR ChangeMappedPRGBank
0DF30                               RTS
0DF30                           
0DF30                           EnemyTableHopAto2:
0DF30                               LDA #PRGBank_A_B
0DF30                               JSR ChangeMappedPRGBank
0DF30                           	LDA ObjectType, X
0DF30                               JSR InitializeEnemyAB
0DF30                               LDA #PRGBank_2_3
0DF30                               JSR ChangeMappedPRGBank
0DF30                               RTS
0DF30                           ENDIF
0DF30                           
0DF30                           IFDEF PLAYER_STUFF
0DF30                           Projectile2to1:
0DF30 A9 00                         LDA #PRGBank_0_1
0DF32 20 FA FD                      JSR ChangeMappedPRGBank
0DF35 20 A0 B5                      JSR CreateFireballStart
0DF38 A9 01                         LDA #PRGBank_2_3
0DF3A 20 FA FD                      JSR ChangeMappedPRGBank
0DF3D 60                            RTS
0DF3E                           
0DF3E                           SnapEnemy:
0DF3E B5 33                     	LDA ObjectYLo,X
0DF40 18                        	CLC
0DF41 69 08                     	ADC #$08
0DF43 29 F0                     	AND #$F0
0DF45 95 33                     	STA ObjectYLo,X
0DF47 90 08                     	BCC SnapEnemyX
0DF49                           
0DF49 A5 EC                     	LDA IsHorizontalLevel
0DF4B D0 04                     	BNE SnapEnemyX
0DF4D A9 01                         LDA #$1
0DF4F                           
0DF4F 95 15                     	STA ObjectXHi,X
0DF51                           
0DF51                           SnapEnemyX:
0DF51 B5 29                     	LDA ObjectXLo,X
0DF53 18                        	CLC
0DF54 69 08                     	ADC #$08
0DF56 29 F0                     	AND #$F0
0DF58 95 29                     	STA ObjectXLo,X
0DF5A 90 06                     	BCC SnapEnemyExit
0DF5C                           
0DF5C A5 EC                     	LDA IsHorizontalLevel
0DF5E F0 02                     	BEQ SnapEnemyExit
0DF60                           
0DF60 95 15                     	STA ObjectXHi,X
0DF62                           SnapEnemyExit:
0DF62 60                        	RTS
0DF63                           ENDIF
0DF63                           
0DF63                           loc_BANKF_E69F:
0DF63                           IFDEF PLAYER_STUFF
0DF63 AD EB EE                      LDA ResetHealth
0DF66 CD C3 04                      CMP PlayerMaxHealth
0DF69 B0 03                         BCS +
0DF6B 8D C3 04                  	STA PlayerMaxHealth
0DF6E 20 C3 F4                  +   JSR RestorePlayerToFullHealth
0DF71 A9 00                         LDA #$00
0DF73                           ENDIF
0DF73                           IFNDEF PLAYER_STUFF
0DF73                           	LDA #PlayerHealth_2_HP
0DF73                           	STA PlayerHealth
0DF73                           	LDA #$00
0DF73                           	STA PlayerMaxHealth
0DF73                           ENDIF
0DF73 8D B0 04                  	STA KeyUsed
0DF76 8D 20 06                  	STA Mushroom1upPulled
0DF79 8D FB 04                  	STA Mushroom1Pulled
0DF7C 8D FC 04                  	STA Mushroom2Pulled
0DF7F 8D 21 06                  	STA SubspaceVisits
0DF82 8D AD 04                  	STA EnemiesKilledForHeart
0DF85 88                        	DEY
0DF86 F0 03                     	BEQ DoGameOverStuff
0DF88                           
0DF88 4C 53 E0                  	JMP loc_BANKF_E75A
0DF8B                           
0DF8B                           
0DF8B                           ; ---------------------------------------------------------------------------
0DF8B                           
0DF8B                           DoGameOverStuff:
0DF8B 8C F6 06                  	STY PlayerCurrentSize
0DF8E A9 10                     	LDA #Music2_GameOver
0DF90 8D 03 06                  	STA MusicQueue2
0DF93 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
0DF96                           
0DF96 20 97 FD                  	JSR ChangeTitleCardCHR
0DF99                           
0DF99 20 6F E6                  	JSR ClearNametablesAndSprites
0DF9C                           
0DF9C 20 BF D9                  	JSR SetBlackAndWhitePalette
0DF9F                           
0DF9F 20 DC D9                  	JSR SetScrollXYTo0
0DFA2                           
0DFA2 20 F6 E3                  	JSR EnableNMI
0DFA5                           
0DFA5 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
0DFA8                           
0DFA8 A9 05                     	LDA #ScreenUpdateBuffer_Text_Game_Over
0DFAA 85 11                     	STA ScreenUpdateIndex
0DFAC A9 C0                     	LDA #$C0
0DFAE 85 06                     	STA byte_RAM_6
0DFB0                           
0DFB0                           loc_BANKF_E6E6:
0DFB0 20 76 E4                  	JSR WaitForNMI
0DFB3                           
0DFB3 C6 06                     	DEC byte_RAM_6
0DFB5 D0 F9                     	BNE loc_BANKF_E6E6
0DFB7                           
0DFB7 A0 28                     	LDY #$28
0DFB9                           
0DFB9                           loc_BANKF_E6EF:
0DFB9 B9 7C E3                  	LDA Text_Continue, Y
0DFBC 99 7B 06                  	STA PPUBuffer_67B, Y
0DFBF 88                        	DEY
0DFC0 10 F7                     	BPL loc_BANKF_E6EF
0DFC2                           
0DFC2 A9 FB                     	LDA #$FB
0DFC4 8D 8F 06                  	STA byte_RAM_68F
0DFC7 AD C5 05                  	LDA Continues
0DFCA 18                        	CLC
0DFCB 69 D0                     	ADC #$D0
0DFCD 8D 7E 06                  	STA byte_RAM_67E
0DFD0 A9 00                     	LDA #$00
0DFD2 85 08                     	STA byte_RAM_8
0DFD4 A9 06                     	LDA #ScreenUpdateBuffer_RAM_67B
0DFD6 CE C5 05                  	DEC Continues
0DFD9 10 06                     	BPL loc_BANKF_E717
0DFDB                           
0DFDB A9 01                     	LDA #$01
0DFDD 85 08                     	STA byte_RAM_8
0DFDF A9 07                     	LDA #ScreenUpdateBuffer_Text_Retry
0DFE1                           
0DFE1                           loc_BANKF_E717:
0DFE1 85 11                     	STA ScreenUpdateIndex
0DFE3                           
0DFE3                           loc_BANKF_E719:
0DFE3 20 76 E4                  	JSR WaitForNMI
0DFE6                           
0DFE6 A5 F5                     	LDA Player1JoypadPress
0DFE8 29 20                     	AND #ControllerInput_Select
0DFEA F0 25                     	BEQ loc_BANKF_E747
0DFEC                           
0DFEC A5 08                     	LDA byte_RAM_8
0DFEE 49 01                     	EOR #$01
0DFF0 85 08                     	STA byte_RAM_8
0DFF2 AC C5 05                  	LDY Continues
0DFF5 C0 FF                     	CPY #$FF
0DFF7 D0 04                     	BNE loc_BANKF_E733
0DFF9                           
0DFF9 A9 01                     	LDA #$01
0DFFB 85 08                     	STA byte_RAM_8
0DFFD                           
0DFFD                           loc_BANKF_E733:
0DFFD 0A                        	ASL A
0DFFE 0A                        	ASL A
0DFFF A8                        	TAY
0E000 A9 FB                     	LDA #$FB
0E002 8D AB 71                  	STA byte_RAM_71AB
0E005 8D AF 71                  	STA byte_RAM_71AF
0E008 A9 F6                     	LDA #$F6
0E00A 99 AB 71                  	STA byte_RAM_71AB, Y
0E00D A9 13                     	LDA #ScreenUpdateBuffer_RAM_71a8
0E00F 85 11                     	STA ScreenUpdateIndex
0E011                           
0E011                           loc_BANKF_E747:
0E011 A5 F5                     	LDA Player1JoypadPress
0E013 29 10                     	AND #ControllerInput_Start
0E015 F0 CC                     	BEQ loc_BANKF_E719
0E017                           
0E017 A5 08                     	LDA byte_RAM_8
0E019 D0 06                     	BNE GameOver_Retry
0E01B                           
0E01B 8D 2B 06                  	STA SlotMachineCoins
0E01E 4C 28 DC                  	JMP ContinueGame
0E021                           
0E021                           ; ---------------------------------------------------------------------------
0E021                           
0E021                           GameOver_Retry:
0E021 4C D9 DB                  	JMP StartGame
0E024                           
0E024                           IFDEF PLAYER_STUFF
0E024                           ShopSetup:
0E024 98                            TYA
0E025 48                            PHA
0E026 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
0E029                           
0E029 20 DC D9                  	JSR SetScrollXYTo0
0E02C                           
0E02C 20 6F E6                  	JSR ClearNametablesAndSprites
0E02F                           
0E02F 20 BF D9                  	JSR SetBlackAndWhitePalette
0E032                           
0E032 20 F6 E3                  	JSR EnableNMI
0E035                           
0E035 20 97 FD                  	JSR ChangeTitleCardCHR
0E038                               
0E038 68                            PLA
0E039 A8                            TAY
0E03A 88                        	DEY
0E03B                           
0E03B F0 03                     	BEQ +
0E03D 20 43 E0                      JSR ShopLoop
0E040                           +
0E040                           
0E040 4C 60 DC                  	JMP CharacterSelectMenu
0E043                           
0E043                           ShopLoop:
0E043 A0 08                         LDY #$08
0E045 A9 80                     -	LDA #SoundEffect1_HawkOpen_WartBarf
0E047 8D 02 06                  	STA SoundEffectQueue1
0E04A A9 10                         LDA #$10
0E04C 20 01 E3                  	JSR DelayFrames
0E04F 88                            DEY
0E050 10 F3                         BPL -
0E052 60                            RTS
0E053                           ENDIF
0E053                           
0E053                           ; ---------------------------------------------------------------------------
0E053                           
0E053                           loc_BANKF_E75A:
0E053 88                        	DEY
0E054 F0 64                     	BEQ EndOfLevel
0E056                           
0E056                           IFNDEF PLAYER_STUFF
0E056                           	LDY CurrentWorld
0E056                           	STY PreviousWorld
0E056                           	LDA WarpDestinations, Y
0E056                           	STA CurrentWorld
0E056                           	TAY
0E056                           	LDX CurrentCharacter
0E056                           	LDA WorldStartingLevel, Y
0E056                           	STA CurrentLevel
0E056                           	STA CurrentLevel_Init
0E056                           ENDIF
0E056                           IFDEF HOT_SPOTS
0E056 88                        	DEY
0E057 D0 CB                     	BNE ShopSetup
0E059 A9 00                     	LDA #$00
0E05B 85 50                     	STA PlayerState
0E05D 8D E6 04                  	STA PlayerState_Init
0E060 8D 28 06                  	STA InSubspaceOrJar
0E063 8D EE 04                  	STA InJarType
0E066 8D FF 04                  	STA StopwatchTimer
0E069 AD CD 76                      LDA WarpDestinationRam
0E06C 8D 31 05                      STA CurrentLevel
0E06F 8D E7 04                      STA CurrentLevel_Init
0E072 20 67 FC                      JSR WorldChangeF
0E075 AC 35 06                      LDY CurrentWorld
0E078 AD CE 76                      LDA WarpDestinationRam + 1
0E07B 8D 32 05                      STA CurrentLevelArea
0E07E 8D E8 04                      STA CurrentLevelArea_Init
0E081 AD CF 76                      LDA WarpDestinationRam + 2
0E084 8D 33 05                      STA CurrentLevelEntryPage
0E087 8D E9 04                      STA CurrentLevelEntryPage_Init
0E08A A9 01                         LDA #$1
0E08C 8D 34 05                      STA TransitionType
0E08F 8D EA 04                      STA TransitionType_Init
0E092                           +
0E092                           ENDIF
0E092 C8                        	INY
0E093 98                        	TYA
0E094 09 D0                     	ORA #$D0
0E096 8D A6 71                  	STA byte_RAM_71A6
0E099 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
0E09C                           
0E09C 20 DC D9                  	JSR SetScrollXYTo0
0E09F                           
0E09F 20 6F E6                  	JSR ClearNametablesAndSprites
0E0A2                           
0E0A2 20 BF D9                  	JSR SetBlackAndWhitePalette
0E0A5                           
0E0A5 20 F6 E3                  	JSR EnableNMI
0E0A8                           
0E0A8 20 97 FD                  	JSR ChangeTitleCardCHR
0E0AB                           
0E0AB A9 12                     	LDA #ScreenUpdateBuffer_RAM_7194
0E0AD 85 11                     	STA ScreenUpdateIndex
0E0AF A9 40                     	LDA #Music2_SlotWarpFanfare
0E0B1 8D 03 06                  	STA MusicQueue2
0E0B4 20 FF E2                  	JSR Delay160Frames
0E0B7                           
0E0B7                           IFNDEF PLAYER_STUFF
0E0B7                           	JSR InitializeSomeLevelStuff
0E0B7                           ENDIF
0E0B7                           
0E0B7 4C 60 DC                  	JMP CharacterSelectMenu
0E0BA                           
0E0BA                           
0E0BA                           ; ---------------------------------------------------------------------------
0E0BA                           
0E0BA                           EndOfLevel:
0E0BA                           	; Stop the music
0E0BA A9 80                     	LDA #Music2_StopMusic ; Stop music
0E0BC 8D 03 06                  	STA MusicQueue2
0E0BF                           
0E0BF                           IFNDEF PLAYER_STUFF
0E0BF                           	; Increase current characters "contribution" counter
0E0BF                           	LDX CurrentCharacter
0E0BF                           	INC CharacterLevelsCompleted, X
0E0BF                           	; Check if we've completed the final level
0E0BF                           	LDA CurrentLevel
0E0BF                           	CMP #$13
0E0BF                           ENDIF
0E0BF                           
0E0BF                           IFDEF PLAYER_STUFF
0E0BF AD E8 73                      LDA Level_Count_Crystals
0E0C2 CD 07 EF                      CMP CrystalCondition
0E0C5 90 15                         BCC ++ 
0E0C7 AD EF 73                      LDA World_Count_Bosses 
0E0CA CD 08 EF                      CMP BossCondition 
0E0CD 90 0D                         BCC ++
0E0CF AD 09 EF                      LDA RescueCondition 
0E0D2 F0 0B                         BEQ +
0E0D4 AD E0 7D                      LDA CharacterLock_Variable
0E0D7 D0 03                         BNE ++
0E0D9 4C DF E0                      JMP +
0E0DC 4C F1 E0                  ++  JMP EndOfLevelJump
0E0DF                           +   ; Check if we've completed the final level
0E0DF AD 0A EF                  	LDA WinLevel
0E0E2 C9 FF                         CMP #$FF
0E0E4 D0 03                         BNE +
0E0E6 4C 0B E3                      JMP EndingSceneRoutine
0E0E9 CD 31 05                  +   CMP CurrentLevel
0E0EC D0 08                         BNE EndOfLevelSlotMachine
0E0EE 4C 0B E3                      JMP EndingSceneRoutine
0E0F1                           ENDIF
0E0F1                               
0E0F1                           IFNDEF DISABLE_BONUS_CHANCE
0E0F1                           	; If not, go to bonus chance and proceed to the next level
0E0F1                           EndOfLevelJump:
0E0F1 D0 03                     	BNE EndOfLevelSlotMachine
0E0F3                           ENDIF
0E0F3                           IFDEF DISABLE_BONUS_CHANCE
0E0F3                           	STY PlayerCurrentSize
0E0F3                           EndOfLevelJump:
0E0F3                           	BNE GoToNextLevel
0E0F3                           ENDIF
0E0F3                           	; Otherwise, display the ending
0E0F3 4C 0B E3                  	JMP EndingSceneRoutine
0E0F6                           
0E0F6                           EndOfLevelSlotMachine:
0E0F6 8C F6 06                  	STY PlayerCurrentSize
0E0F9 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
0E0FC                           
0E0FC 20 6F E6                  	JSR ClearNametablesAndSprites
0E0FF                           
0E0FF                           IFDEF REV_A
0E0FF 20 F6 E3                  	JSR EnableNMI
0E102 20 76 E4                  	JSR WaitForNMI
0E105                           ENDIF
0E105                           
0E105 20 A1 FD                  	JSR LoadBonusChanceCHRBanks
0E108                           
0E108                           IFNDEF BONUS_CHANCE_RAM_CLEANUP
0E108 20 03 E5                  	JSR CopyUnusedCoinSpriteToSpriteArea
0E10B                           ENDIF
0E10B                           
0E10B A9 05                     	LDA #PRGBank_A_B
0E10D 20 FA FD                  	JSR ChangeMappedPRGBank
0E110                           
0E110 20 10 83                  	JSR CopyBonusChanceLayoutToRAM
0E113                           
0E113 A9 17                     	LDA #ScreenUpdateBuffer_RAM_BonusChanceLayout
0E115 85 11                     	STA ScreenUpdateIndex
0E117 A9 40                     	LDA #Stack100_Menu
0E119 8D 00 01                  	STA StackArea
0E11C 20 F6 E3                  	JSR EnableNMI
0E11F                           
0E11F 20 76 E4                  	JSR WaitForNMI
0E122                           
0E122 A9 C0                     	LDA #Stack100_Gameplay
0E124 8D 00 01                  	STA StackArea
0E127 20 66 E3                  	JSR DisableNMI
0E12A                           
0E12A 20 FE E3                  	JSR sub_BANKF_EA33
0E12D                           
0E12D A9 40                     	LDA #Music2_SlotWarpFanfare
0E12F 8D 03 06                  	STA MusicQueue2
0E132 AD 2B 06                  	LDA SlotMachineCoins
0E135 D0 03                     	BNE loc_BANKF_E7F2
0E137                           
0E137 4C D5 E2                  	JMP NoCoinsForSlotMachine
0E13A                           
0E13A                           ; ---------------------------------------------------------------------------
0E13A                           
0E13A                           loc_BANKF_E7F2:
0E13A A9 03                     	LDA #$03
0E13C 85 2C                     	STA ObjectXLo + 3
0E13E 85 2D                     	STA ObjectXLo + 4
0E140 85 2E                     	STA ObjectXLo + 5
0E142 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
0E145                           
0E145                           IFDEF PLAYER_STUFF
0E145 AD EE EE                      LDA IndependentLives
0E148 F0 08                         BEQ +
0E14A A6 8F                         LDX CurrentCharacter
0E14C BD F8 73                      LDA PlayerIndependentLives, X
0E14F 8D ED 04                      STA ExtraLives
0E152                           +
0E152                           ENDIF
0E152                           
0E152                           loc_BANKF_E7FD:
0E152 AD 2B 06                  	LDA SlotMachineCoins
0E155 D0 72                     	BNE StartSlotMachine
0E157                           
0E157                           GoToNextLevel:
0E157                           IFDEF FLAGSET
0E157 AD EE EE                      LDA IndependentLives
0E15A F0 08                         BEQ +
0E15C AD ED 04                      LDA ExtraLives
0E15F A6 8F                         LDX CurrentCharacter
0E161 9D F8 73                      STA PlayerIndependentLives, X
0E164                           +
0E164                           ENDIF
0E164 AC 35 06                  	LDY CurrentWorld
0E167 B9 14 D9                  	LDA WorldStartingLevel + 1, Y
0E16A 38                        	SEC
0E16B E9 01                     	SBC #$01
0E16D CD 31 05                  	CMP CurrentLevel
0E170                           IFDEF EXTENDED_PTR_CONTINUE:
0E170 4C 83 E1                      JMP loc_BANKF_E81E
0E173                           ENDIF
0E173 D0 0E                     	BNE loc_BANKF_E81E
0E175 20 75 DA                  	JSR SetStack100Gameplay
0E178                           
0E178 A9 FF                     	LDA #$FF
0E17A 8D 45 05                  	STA CurrentMusicIndex
0E17D EE 35 06                  	INC CurrentWorld
0E180 4C 35 DC                  	JMP StartCharacterSelectMenu
0E183                           
0E183                           ; ---------------------------------------------------------------------------
0E183                           
0E183                           loc_BANKF_E81E:
0E183 20 CF F9                  	JSR sub_BANKF_F6A1
0E186 AD 31 05                  	LDA CurrentLevel
0E189 A0 00                     	LDY #$00
0E18B                           
0E18B                           loc_BANKF_E826:
0E18B C8                        	INY
0E18C D9 13 D9                  	CMP WorldStartingLevel, Y
0E18F B0 FA                     	BCS loc_BANKF_E826
0E191                           
0E191 88                        	DEY
0E192 8C 35 06                  	STY CurrentWorld ; I am sure this is important somehow, but... why
0E195 AC 35 06                  	LDY CurrentWorld
0E198 AD 31 05                  	LDA CurrentLevel
0E19B                           IFDEF EXTENDED_PTR_CONTINUE:
0E19B 20 67 FC                      JSR WorldChangeF
0E19E 20 2B FD                      JSR LoadWorldCHRBanks
0E1A1                           ENDIF
0E1A1 38                        	SEC
0E1A2 F9 13 D9                  	SBC WorldStartingLevel, Y
0E1A5 8D 29 06                  	STA CurrentLevelRelative
0E1A8 AD 31 05                  	LDA CurrentLevel
0E1AB 8D E7 04                  	STA CurrentLevel_Init
0E1AE AD 32 05                  	LDA CurrentLevelArea
0E1B1 8D E8 04                  	STA CurrentLevelArea_Init
0E1B4 AD 33 05                  	LDA CurrentLevelEntryPage
0E1B7 8D E9 04                  	STA CurrentLevelEntryPage_Init
0E1BA A0 00                     	LDY #$00
0E1BC 8C E6 04                  	STY PlayerState_Init
0E1BF                           IFNDEF EXTENDED_PTR_CONTINUE
0E1BF                           	STY TransitionType
0E1BF                           	STY TransitionType_Init
0E1BF                           ENDIF
0E1BF 88                        	DEY
0E1C0 8C 45 05                  	STY CurrentMusicIndex
0E1C3 20 75 DA                  	JSR SetStack100Gameplay
0E1C6                           
0E1C6 4C 60 DC                  	JMP CharacterSelectMenu
0E1C9                           
0E1C9                           ; ---------------------------------------------------------------------------
0E1C9                           
0E1C9                           StartSlotMachine:
0E1C9                           IFNDEF SLOT_CHANGES
0E1C9                           	DEC SlotMachineCoins
0E1C9                           ENDIF
0E1C9 20 76 E4                  	JSR WaitForNMI
0E1CC                           
0E1CC 20 33 E4                  	JSR sub_BANKF_EA68
0E1CF                           
0E1CF A9 01                     	LDA #$01 ; Set all reel timers
0E1D1 85 29                     	STA ObjectXLo
0E1D3 85 2A                     	STA ObjectXLo + 1
0E1D5 85 2B                     	STA ObjectXLo + 2
0E1D7 4A                        	LSR A ; Set all reels to the first position
0E1D8 85 2F                     	STA ObjectXLo + 6
0E1DA 85 30                     	STA ObjectXLo + 7
0E1DC 85 31                     	STA ObjectXLo + 8
0E1DE                           
0E1DE                           IFDEF SLOT_CHANGES
0E1DE A9 00                         LDA #$0 
0E1E0 20 14 E9                      JSR Custom_BufferText
0E1E3 A9 00                     	LDA #ScreenUpdateBuffer_RAM_301
0E1E5 85 11                     	STA ScreenUpdateIndex
0E1E7                           ENDIF
0E1E7                           DoSlotMachineSpinnyShit:
0E1E7 20 76 E4                  	JSR WaitForNMI ; $2C-$2E: Reel change timer
0E1EA                           	; $2F-$31: Current reel icon
0E1EA                           
0E1EA A9 02                     	LDA #SoundEffect2_Climbing ; Play "reel sound" sound effect
0E1EC 8D 04 06                  	STA SoundEffectQueue2
0E1EF 20 8D E4                  	JSR sub_BANKF_EAC2
0E1F2                           IFDEF SLOT_CHANGES
0E1F2 A5 F5                         LDA Player1JoypadPress
0E1F4 29 10                         AND #ControllerInput_Start
0E1F6 F0 2F                         BEQ +
0E1F8 A5 29                     	LDA ObjectXLo ; Reel 1 still active?
0E1FA F0 2B                         BEQ +
0E1FC AD 2B 06                      LDA SlotMachineCoins
0E1FF C9 05                         CMP #$5
0E201 B0 08                         BCS +o
0E203 A9 80                     	LDA #SoundEffect1_HawkOpen_WartBarf ; Play "reel sound" sound effect
0E205 8D 02 06                  	STA SoundEffectQueue1
0E208 4C 27 E2                      JMP +
0E20B                           +o
0E20B 38                            SEC
0E20C E9 05                         SBC #$5
0E20E 8D 2B 06                      STA SlotMachineCoins
0E211 EE ED 04                      INC ExtraLives
0E214 A9 10                     	LDA #SoundEffect1_1UP ; Play "reel sound" sound effect
0E216 8D 02 06                  	STA SoundEffectQueue1
0E219 20 33 E4                  	JSR sub_BANKF_EA68
0E21C AD 2B 06                      LDA SlotMachineCoins
0E21F D0 06                         BNE +
0E221 20 FB E2                  	JSR Delay80Frames
0E224 4C 57 E1                      JMP GoToNextLevel 
0E227                           +
0E227 A5 F5                         LDA Player1JoypadPress
0E229 29 40                         AND #ControllerInput_B
0E22B F0 0F                         BEQ ++
0E22D A5 29                     	LDA ObjectXLo ; Reel 1 still active?
0E22F D0 08                         BNE +
0E231 A9 80                     	LDA #SoundEffect1_HawkOpen_WartBarf ; Play "reel sound" sound effect
0E233 8D 02 06                  	STA SoundEffectQueue1
0E236 4C 3C E2                      JMP ++
0E239 4C 57 E1                  +   JMP GoToNextLevel 
0E23C                           ++
0E23C                           ENDIF
0E23C 20 AE E4                  	JSR sub_BANKF_EADC
0E23F                           
0E23F 20 C8 E4                  	JSR sub_BANKF_EAF6
0E242                           
0E242 20 CB E2                  	JSR sub_BANKF_E916
0E245                           
0E245 B9 A7 E3                  	LDA byte_BANKF_E9DF, Y
0E248 85 11                     	STA ScreenUpdateIndex
0E24A E6 06                     	INC byte_RAM_6
0E24C A5 29                     	LDA ObjectXLo ; Reel 1 still active?
0E24E 05 2A                     	ORA ObjectXLo + 1 ; Reel 2 still active?
0E250 05 2B                     	ORA ObjectXLo + 2 ; Reel 3 still active?
0E252 D0 93                     	BNE DoSlotMachineSpinnyShit ; If any are still active, go back to waiting
0E254                           
0E254 A9 10                     	LDA #ScreenUpdateBuffer_RAM_6df
0E256 85 11                     	STA ScreenUpdateIndex
0E258 20 76 E4                  	JSR WaitForNMI
0E25B                           
0E25B A0 00                     	LDY #$00
0E25D A6 2F                     	LDX ObjectXLo + 6 ; Load reel 1
0E25F BD 3B 06                  	LDA SlotMachineReelOrder1RAM, X
0E262 D0 01                     	BNE CheckReel2Symbol ; Is this reel a cherry?
0E264                           
0E264 C8                        	INY ; Yes; add one life
0E265                           
0E265                           CheckReel2Symbol:
0E265 A6 30                     	LDX ObjectXLo + 7 ; Load reel 2
0E267 DD 43 06                  	CMP SlotMachineReelOrder2RAM, X
0E26A D0 13                     	BNE AddSlotMachineExtraLives ; Does this match the previous symbol?
0E26C                           
0E26C C9 00                     	CMP #$00 ; Yes; are they both cherries?
0E26E D0 01                     	BNE CheckReel3Symbol ; If no, skip to third reel
0E270                           
0E270 C8                        	INY ; They are both cherries, add another life or something
0E271                           
0E271                           CheckReel3Symbol:
0E271 A6 31                     	LDX ObjectXLo + 8 ; Load reel 3
0E273 DD 4B 06                  	CMP SlotMachineReelOrder3RAM, X ; Does reel 3 match the previous two?
0E276 D0 07                     	BNE AddSlotMachineExtraLives ; No, fuck you
0E278                           
0E278 C8                        	INY ; They all match! Yay! Add a life.
0E279                           ; Cherry count: 3 / Non-cherry: 1
0E279 C9 00                     	CMP #$00 ; Were they all cherries?
0E27B D0 02                     	BNE AddSlotMachineExtraLives ; Nope, all done
0E27D                           
0E27D C8                        	INY ; Yes, add 2 more extra lives
0E27E C8                        	INY
0E27F                           
0E27F                           AddSlotMachineExtraLives:
0E27F 98                        	TYA ; Y contains extra lives to add
0E280 18                        	CLC
0E281 6D ED 04                  	ADC ExtraLives ; Add won extra lives to current lives
0E284 90 02                     	BCC loc_BANKF_E8D3 ; Check if adding extra lives has wrapped the counter
0E286                           
0E286 A9 FF                     	LDA #$FF ; If so, set extra lives to 255 (#$FF)
0E288                           
0E288                           loc_BANKF_E8D3:
0E288 8D ED 04                  	STA ExtraLives
0E28B 98                        	TYA ; Did we actually win any lives?
0E28C F0 25                     	BEQ SlotMachineLoseFanfare ; No, play lose sound effect
0E28E                           
0E28E 09 D0                     	ORA #$D0
0E290 8D C8 06                  	STA byte_RAM_6C8
0E293 A9 20                     	LDA #Music2_CrystalGetFanfare ; Play winner jingle
0E295 8D 03 06                  	STA MusicQueue2
0E298 A9 A0                     	LDA #$A0
0E29A 85 06                     	STA byte_RAM_6
0E29C 20 76 E4                  	JSR WaitForNMI
0E29F                           
0E29F 20 33 E4                  	JSR sub_BANKF_EA68
0E2A2                           
0E2A2                           loc_BANKF_E8ED:
0E2A2 20 76 E4                  	JSR WaitForNMI
0E2A5                           
0E2A5 20 CB E2                  	JSR sub_BANKF_E916
0E2A8                           
0E2A8 B9 AB E3                  	LDA byte_BANKF_E9E3, Y
0E2AB 85 11                     	STA ScreenUpdateIndex
0E2AD C6 06                     	DEC byte_RAM_6
0E2AF D0 F1                     	BNE loc_BANKF_E8ED
0E2B1                           
0E2B1 F0 0E                     	BEQ loc_BANKF_E90C
0E2B3                           
0E2B3                           SlotMachineLoseFanfare:
0E2B3 A9 08                     	LDA #Music2_DeathJingle
0E2B5 8D 03 06                  	STA MusicQueue2
0E2B8 20 76 E4                  	JSR WaitForNMI
0E2BB                           
0E2BB 20 33 E4                  	JSR sub_BANKF_EA68
0E2BE                           
0E2BE 20 FF E2                  	JSR Delay160Frames
0E2C1                           
0E2C1                           loc_BANKF_E90C:
0E2C1 A9 11                     	LDA #ScreenUpdateBuffer_RAM_6e4
0E2C3 85 11                     	STA ScreenUpdateIndex
0E2C5 20 76 E4                  	JSR WaitForNMI
0E2C8                           
0E2C8 4C 52 E1                  	JMP loc_BANKF_E7FD
0E2CB                           
0E2CB                           ; =============== S U B R O U T I N E =======================================
0E2CB                           
0E2CB                           sub_BANKF_E916:
0E2CB A5 06                     	LDA byte_RAM_6
0E2CD 4A                        	LSR A
0E2CE 4A                        	LSR A
0E2CF 4A                        	LSR A
0E2D0 4A                        	LSR A
0E2D1 29 01                     	AND #$01
0E2D3 A8                        	TAY
0E2D4 60                        	RTS
0E2D5                           
0E2D5                           ; End of function sub_BANKF_E916
0E2D5                           
0E2D5                           ; ---------------------------------------------------------------------------
0E2D5                           
0E2D5                           NoCoinsForSlotMachine:
0E2D5 20 FB E2                  	JSR Delay80Frames
0E2D8                           
0E2D8 A9 08                     	LDA #Music2_DeathJingle
0E2DA 8D 03 06                  	STA MusicQueue2
0E2DD                           
0E2DD                           IFDEF EXPAND_MUSIC
0E2DD                           	LDA #$08
0E2DD                           ENDIF
0E2DD 85 06                     	STA byte_RAM_6
0E2DF                           loc_BANKF_E92A:
0E2DF A5 06                     	LDA byte_RAM_6
0E2E1 29 01                     	AND #$01
0E2E3 A8                        	TAY
0E2E4 B9 A9 E3                  	LDA byte_BANKF_E9E1, Y
0E2E7 85 11                     	STA ScreenUpdateIndex
0E2E9                           
0E2E9 A9 0A                     	LDA #$0A
0E2EB 85 07                     	STA byte_RAM_7
0E2ED                           loc_BANKF_E938:
0E2ED 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
0E2F0 C6 07                     	DEC byte_RAM_7
0E2F2 D0 F9                     	BNE loc_BANKF_E938
0E2F4                           
0E2F4 C6 06                     	DEC byte_RAM_6
0E2F6 10 E7                     	BPL loc_BANKF_E92A
0E2F8                           
0E2F8 4C 57 E1                  	JMP GoToNextLevel
0E2FB                           
0E2FB                           
0E2FB                           Delay80Frames:
0E2FB A9 50                     	LDA #$50
0E2FD D0 02                     	BNE DelayFrames
0E2FF                           
0E2FF                           Delay160Frames:
0E2FF A9 A0                     	LDA #$A0
0E301                           
0E301                           DelayFrames:
0E301 85 07                     	STA byte_RAM_7
0E303                           DelayFrames_Loop:
0E303 20 72 E4                  	JSR WaitForNMI_TurnOnPPU
0E306 C6 07                     	DEC byte_RAM_7
0E308 D0 F9                     	BNE DelayFrames_Loop
0E30A                           
0E30A 60                        	RTS
0E30B                           
0E30B                           
0E30B                           ;
0E30B                           ; Do the ending!
0E30B                           ;
0E30B                           EndingSceneRoutine:
0E30B                           IFDEF FLAGSET
0E30B A9 06                         LDA #$6
0E30D 8D 35 06                      STA CurrentWorld
0E310 8D 34 06                      STA CurrentWorldTileset
0E313 20 2B FD                      JSR LoadWorldCHRBanks
0E316                           ENDIF
0E316 20 DC D9                  	JSR SetScrollXYTo0
0E319                           
0E319 A9 80                     	LDA #$80
0E31B                           	; FDS leftover; $4080 is an old sound register
0E31B                           	; The prototype had two writes to this address!
0E31B                           	; It looks like they missed this one, though.
0E31B 8D 80 40                  	STA FDS_WAVETABLE_VOL
0E31E 0A                        	ASL A
0E31F 8D 07 06                  	STA SoundEffectPlaying1
0E322 A9 00                     	LDA #PRGBank_0_1
0E324 20 FA FD                  	JSR ChangeMappedPRGBank
0E327                           
0E327 20 47 A5                  	JSR FreeSubconsScene
0E32A                           
0E32A 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
0E32D                           
0E32D 20 66 E3                  	JSR DisableNMI
0E330                           
0E330 20 75 FD                  	JSR LoadCelebrationSceneBackgroundCHR
0E333                           
0E333 20 F6 E3                  	JSR EnableNMI
0E336                           
0E336 20 76 E4                  	JSR WaitForNMI
0E339                           
0E339 A9 00                     	LDA #PRGBank_0_1
0E33B 20 FA FD                  	JSR ChangeMappedPRGBank
0E33E                           
0E33E EE F3 06                  	INC GameMilestoneCounter
0E341                           
0E341 20 8F AB                  	JSR ContributorScene
0E344                           
0E344 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
0E347                           
0E347 20 66 E3                  	JSR DisableNMI
0E34A                           
0E34A                           SetupMarioSleepingScene:
0E34A 20 AC FD                  	JSR LoadMarioSleepingCHRBanks
0E34D                           
0E34D 20 F6 E3                  	JSR EnableNMI
0E350                           
0E350 20 76 E4                  	JSR WaitForNMI
0E353                           
0E353 A9 06                     	LDA #PRGBank_C_D
0E355 20 FA FD                  	JSR ChangeMappedPRGBank
0E358                           
0E358 EE F3 06                  	INC GameMilestoneCounter
0E35B 4C 42 83                  	JMP MarioSleepingScene
0E35E                           
0E35E                           ; =============== S U B R O U T I N E =======================================
0E35E                           IFDEF PLAYER_STUFF
0E35E                           CharLookupTable:
0E35E 01                        	.db $01 ; Mio 
0E35F 08                        	.db $08 ; Pch 
0E360 04                        	.db $04 ; Tod 
0E361 02                        	.db $02 ; Lug 
0E362                           CharLookupTable_Ordered:
0E362 01                        	.db $01 ; Mio 
0E363 02                        	.db $02 ; Lug 
0E364 04                        	.db $04 ; Tod 
0E365 08                        	.db $08 ; Pch 
0E366                           ENDIF
0E366                           
0E366                           DisableNMI:
0E366                           IFDEF PLAYER_STUFF_IRQ
0E366                               SEI
0E366                           ENDIF
0E366 A9 30                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIDisabled
0E368 8D 00 20                  	STA PPUCTRL
0E36B 85 FF                     	STA PPUCtrlMirror
0E36D 60                        	RTS
0E36E                           
0E36E                           ; End of function DisableNMI
0E36E                           
0E36E                           ; ---------------------------------------------------------------------------
0E36E                           PPUBuffer_Text_Game_Over:
0E36E 21 CB 0A E0 DA E6 DE FB.. 	.db $21, $CB, $0A, $E0, $DA, $E6, $DE, $FB, $FB, $E8, $EF, $DE
0E37A EB 00                     	.db $EB, $00 ; $C ; "GAME OVER"
0E37C                           Text_Continue:
0E37C 21 75 01 00               	.db $21, $75, $01, $00 ; (Placeholder for continue count)
0E380                           ; This is loaded manually and drawn so the count
0E380                           ; can be patched in
0E380                           ; * CONTINUE
0E380 21 6A 0A F6 FB DC E8 E7.. 	.db $21, $6A, $0A, $F6, $FB, $DC, $E8, $E7, $ED, $E2, $E7, $EE
0E38C DE                        	.db $DE ; $C
0E38D                           PPUBuffer_Text_Retry:
0E38D 21 AA 07 F6 FB EB DE ED.. 	.db $21, $AA, $07, $F6, $FB, $EB, $DE, $ED, $EB, $F2 ; * RETRY
0E397 21 CB 0A FB FB FB FB FB.. 	.db $21, $CB, $0A, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB ; Blank, erases "GAME OVER"
0E3A3 FB 00                     	.db $FB, $00 ; $C
0E3A5 09                        	.db $09
0E3A6 0F                        	.db $0F
0E3A7                           byte_BANKF_E9DF:
0E3A7 0B                        	.db ScreenUpdateBuffer_RAM_6ab
0E3A8 10                        	.db ScreenUpdateBuffer_RAM_6df
0E3A9                           byte_BANKF_E9E1:
0E3A9 0A                        	.db ScreenUpdateBuffer_RAM_693
0E3AA 0F                        	.db ScreenUpdateBuffer_RAM_6da
0E3AB                           byte_BANKF_E9E3:
0E3AB 0C                        	.db ScreenUpdateBuffer_RAM_6bd
0E3AC 0F                        	.db ScreenUpdateBuffer_RAM_6da
0E3AD                           
0E3AD                           ; =============== S U B R O U T I N E =======================================
0E3AD                           
0E3AD                           ;
0E3AD                           ; Displays extra life info on the pause screen
0E3AD                           ;
0E3AD                           PauseScreen_ExtraLife:
0E3AD A9 16                     	LDA #ScreenUpdateBuffer_PauseExtraLife
0E3AF 8D BD 05                  	STA CardScreenUpdateIndex
0E3B2 A9 26                     	LDA #$26
0E3B4 8D 80 71                  	STA byte_RAM_7180
0E3B7 A9 C8                     	LDA #$C8
0E3B9 8D 81 71                  	STA byte_RAM_7181
0E3BC                           
0E3BC                           ;
0E3BC                           ; Loads the palette and graphics for the pause screen to display
0E3BC                           ;
0E3BC                           PauseScreen_Card:
0E3BC 20 6E E4                  	JSR WaitForNMI_TurnOffPPU
0E3BF                           
0E3BF 20 97 FD                  	JSR ChangeTitleCardCHR
0E3C2                           
0E3C2 A9 00                     	LDA #PRGBank_0_1
0E3C4 20 FA FD                  	JSR ChangeMappedPRGBank
0E3C7                           
0E3C7 20 A2 81                  	JSR StashScreenScrollPosition
0E3CA                           
0E3CA                           	; Load title card palette
0E3CA A0 23                     	LDY #$23
0E3CC                           PauseScreen_Card_Loop:
0E3CC B9 72 D9                  	LDA TitleCardPalettes, Y
0E3CF 99 5F 05                  	STA PPUBuffer_55F, Y
0E3D2 88                        	DEY
0E3D3 10 F7                     	BPL PauseScreen_Card_Loop
0E3D5                           
0E3D5                           PauseScreen_Card_ScreenReset:
0E3D5 20 E7 D9                  	JSR ResetScreenForTitleCard
0E3D8                           
0E3D8 20 00 DA                  	JSR EnableNMI_PauseTitleCard
0E3DB                           
0E3DB AE 35 06                  	LDX CurrentWorld
0E3DE AC 31 05                  	LDY CurrentLevel
0E3E1 20 19 DA                  	JSR DisplayLevelTitleCardText
0E3E4                           
0E3E4 A9 FF                     	LDA #$FF
0E3E6 85 FD                     	STA PPUScrollXMirror
0E3E8 20 76 E4                  	JSR WaitForNMI
0E3EB                           
0E3EB AD BD 05                  	LDA CardScreenUpdateIndex
0E3EE 85 11                     	STA ScreenUpdateIndex
0E3F0 20 76 E4                  	JSR WaitForNMI
0E3F3                           
0E3F3                           IFDEF FLAGSET
0E3F3 20 3B F0                      JSR Draw_Pause_Stats_Palette
0E3F6                           ENDIF
0E3F6                           
0E3F6                           
0E3F6                           EnableNMI:
0E3F6 A9 B0                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0E3F8 85 FF                     	STA PPUCtrlMirror
0E3FA 8D 00 20                  	STA PPUCTRL
0E3FD 60                        	RTS
0E3FE                           
0E3FE                           
0E3FE                           ; =============== S U B R O U T I N E =======================================
0E3FE                           
0E3FE                           sub_BANKF_EA33:
0E3FE 20 DC D9                  	JSR SetScrollXYTo0
0E401                           
0E401 AD 02 20                  	LDA PPUSTATUS
0E404 A0 00                     	LDY #$00
0E406 A9 3F                     	LDA #$3F
0E408 8D 06 20                  	STA PPUADDR
0E40B 8C 06 20                  	STY PPUADDR
0E40E                           
0E40E                           loc_BANKF_EA43:
0E40E B9 9C 05                  	LDA unk_RAM_59C, Y
0E411 8D 07 20                  	STA PPUDATA
0E414 C8                        	INY
0E415 C0 10                     	CPY #$10
0E417 90 F5                     	BCC loc_BANKF_EA43
0E419                           
0E419 A0 00                     	LDY #$00
0E41B AD 02 20                  	LDA PPUSTATUS
0E41E A9 3F                     	LDA #$3F
0E420 8D 06 20                  	STA PPUADDR
0E423 A9 10                     	LDA #$10
0E425 8D 06 20                  	STA PPUADDR
0E428                           
0E428                           SetBonusChancePalette:
0E428 B9 96 D9                  	LDA BonusChanceSpritePalettes, Y
0E42B 8D 07 20                  	STA PPUDATA
0E42E C8                        	INY
0E42F C0 10                     	CPY #$10
0E431 90 F5                     	BCC SetBonusChancePalette
0E433                           
0E433                           ; End of function sub_BANKF_EA33
0E433                           
0E433                           ; =============== S U B R O U T I N E =======================================
0E433                           
0E433                           sub_BANKF_EA68:
0E433 AC ED 04                  	LDY ExtraLives
0E436 88                        	DEY
0E437 98                        	TYA
0E438 20 59 E4                  	JSR GetTwoDigitNumberTiles
0E43B                           
0E43B 8C 99 05                  	STY byte_RAM_599
0E43E 8D 9A 05                  	STA byte_RAM_59A
0E441 AD 2B 06                  	LDA SlotMachineCoins
0E444 18                        	CLC
0E445 69 D0                     	ADC #$D0
0E447 8D 88 05                  	STA byte_RAM_588
0E44A A9 01                     	LDA #ScreenUpdateBuffer_RAM_583
0E44C 85 11                     	STA ScreenUpdateIndex
0E44E A9 40                     	LDA #Stack100_Menu
0E450 8D 00 01                  	STA StackArea
0E453 20 F6 E3                  	JSR EnableNMI
0E456                           
0E456 4C 76 E4                  	JMP WaitForNMI
0E459                           
0E459                           ; End of function sub_BANKF_EA68
0E459                           
0E459                           ; =============== S U B R O U T I N E =======================================
0E459                           
0E459                           ;
0E459                           ; Converts a number to numerical tiles with space for 2 digits
0E459                           ;
0E459                           ; Input
0E459                           ;   A = number to display
0E459                           ; Output
0E459                           ;   A = second digit of the number (ones)
0E459                           ;   Y = first digit of the number (tens)
0E459                           ;
0E459                           GetTwoDigitNumberTiles:
0E459 A0 D0                     	LDY #$D0 ; zero
0E45B                           
0E45B                           GetTwoDigitNumberTiles_TensLoop:
0E45B                           	; Count up the tens digit until A < 10
0E45B C9 0A                     	CMP #$0A
0E45D 90 06                     	BCC GetTwoDigitNumberTiles_Ones
0E45F                           
0E45F E9 0A                     	SBC #$0A
0E461 C8                        	INY
0E462 4C 5B E4                  	JMP GetTwoDigitNumberTiles_TensLoop
0E465                           
0E465                           GetTwoDigitNumberTiles_Ones:
0E465 09 D0                     	ORA #$D0
0E467 C0 D0                     	CPY #$D0
0E469 D0 02                     	BNE GetTwoDigitNumberTiles_Exit
0E46B                           
0E46B A0 FB                     	LDY #$FB
0E46D                           
0E46D                           GetTwoDigitNumberTiles_Exit:
0E46D 60                        	RTS
0E46E                           
0E46E                           
0E46E                           WaitForNMI_TurnOffPPU:
0E46E A9 00                     	LDA #$00
0E470 F0 02                     	BEQ _WaitForNMI_StuffPPUMask ; Branch always
0E472                           
0E472                           WaitForNMI_TurnOnPPU:
0E472 A9 1E                     	LDA #PPUMask_ShowLeft8Pixels_BG | PPUMask_ShowLeft8Pixels_SPR | PPUMask_ShowBackground | PPUMask_ShowSprites
0E474                           
0E474                           _WaitForNMI_StuffPPUMask:
0E474 85 FE                     	STA PPUMaskMirror
0E476                           
0E476                           WaitForNMI:
0E476 A5 11                     	LDA ScreenUpdateIndex
0E478 0A                        	ASL A
0E479 AA                        	TAX
0E47A BD 01 D5                  	LDA ScreenUpdateBufferPointers, X
0E47D 85 F0                     	STA RAM_PPUDataBufferPointer
0E47F BD 02 D5                  	LDA ScreenUpdateBufferPointers + 1, X
0E482 85 F1                     	STA RAM_PPUDataBufferPointer + 1
0E484 A9 00                     	LDA #$00
0E486 85 EB                     	STA NMIWaitFlag ; Start waiting for NMI to finish
0E488                           
0E488                           WaitForNMILoop:
0E488 A5 EB                     	LDA NMIWaitFlag ; Has the NMI routine set the flag yet?
0E48A 10 FC                     	BPL WaitForNMILoop ; If no, wait some more
0E48C                           
0E48C 60                        	RTS ; If yes, go back to what we were doing
0E48D                           
0E48D                           ; End of function WaitForNMI
0E48D                           
0E48D                           ; =============== S U B R O U T I N E =======================================
0E48D                           
0E48D                           sub_BANKF_EAC2:
0E48D A5 F5                     	LDA Player1JoypadPress
0E48F 10 0B                     	BPL locret_BANKF_EAD1
0E491                           
0E491 A2 00                     	LDX #$00
0E493                           
0E493                           loc_BANKF_EAC8:
0E493 B5 29                     	LDA ObjectXLo, X
0E495 D0 06                     	BNE loc_BANKF_EAD2
0E497                           
0E497 E8                        	INX
0E498 E0 03                     	CPX #$03
0E49A 90 F7                     	BCC loc_BANKF_EAC8
0E49C                           
0E49C                           locret_BANKF_EAD1:
0E49C 60                        	RTS
0E49D                           
0E49D                           ; ---------------------------------------------------------------------------
0E49D                           
0E49D                           loc_BANKF_EAD2:
0E49D A9 00                     	LDA #$00
0E49F 95 29                     	STA ObjectXLo, X
0E4A1 A9 04                     	LDA #SoundEffect1_CherryGet
0E4A3 8D 02 06                  	STA SoundEffectQueue1
0E4A6                           IFDEF SLOT_CHANGES
0E4A6 E0 00                         CPX #0
0E4A8 D0 03                         BNE +
0E4AA CE 2B 06                  	DEC SlotMachineCoins
0E4AD                           +
0E4AD                           ENDIF
0E4AD 60                        	RTS
0E4AE                           
0E4AE                           ; End of function sub_BANKF_EAC2
0E4AE                           
0E4AE                           ; =============== S U B R O U T I N E =======================================
0E4AE                           
0E4AE                           sub_BANKF_EADC:
0E4AE A2 02                     	LDX #$02
0E4B0                           
0E4B0                           loc_BANKF_EADE:
0E4B0 B5 29                     	LDA ObjectXLo, X
0E4B2 F0 10                     	BEQ loc_BANKF_EAF2
0E4B4                           
0E4B4 D6 2C                     	DEC ObjectXLo + 3, X
0E4B6 D0 0C                     	BNE loc_BANKF_EAF2
0E4B8                           
0E4B8 A9 04                     	LDA #$04
0E4BA 95 2C                     	STA ObjectXLo + 3, X
0E4BC D6 2F                     	DEC ObjectXLo + 6, X
0E4BE 10 04                     	BPL loc_BANKF_EAF2
0E4C0                           
0E4C0 A9 07                     	LDA #$07
0E4C2 95 2F                     	STA ObjectXLo + 6, X
0E4C4                           
0E4C4                           loc_BANKF_EAF2:
0E4C4 CA                        	DEX
0E4C5 10 E9                     	BPL loc_BANKF_EADE
0E4C7                           
0E4C7 60                        	RTS
0E4C8                           
0E4C8                           ; End of function sub_BANKF_EADC
0E4C8                           
0E4C8                           ; =============== S U B R O U T I N E =======================================
0E4C8                           
0E4C8                           sub_BANKF_EAF6:
0E4C8 A9 02                     	LDA #$02
0E4CA 85 00                     	STA byte_RAM_0
0E4CC                           
0E4CC                           loc_BANKF_EAFA:
0E4CC A5 00                     	LDA byte_RAM_0
0E4CE A8                        	TAY
0E4CF 0A                        	ASL A
0E4D0 0A                        	ASL A
0E4D1 0A                        	ASL A
0E4D2 AA                        	TAX
0E4D3 79 2F 00                  	ADC ObjectXLo + 6, Y
0E4D6 A8                        	TAY
0E4D7 B9 3B 06                  	LDA SlotMachineReelOrder1RAM, Y
0E4DA A8                        	TAY
0E4DB A9 07                     	LDA #$07
0E4DD 85 01                     	STA byte_RAM_1
0E4DF                           
0E4DF                           loc_BANKF_EB0D:
0E4DF B9 1F D9                  	LDA BonusChanceCherrySprite, Y
0E4E2 9D 10 02                  	STA SpriteDMAArea + $10, X
0E4E5 E8                        	INX
0E4E6 C8                        	INY
0E4E7 C6 01                     	DEC byte_RAM_1
0E4E9 10 F4                     	BPL loc_BANKF_EB0D
0E4EB                           
0E4EB C6 00                     	DEC byte_RAM_0
0E4ED 10 DD                     	BPL loc_BANKF_EAFA
0E4EF                           
0E4EF A2 17                     	LDX #$17
0E4F1                           
0E4F1                           loc_BANKF_EB1F:
0E4F1 8A                        	TXA
0E4F2 29 18                     	AND #$18
0E4F4 0A                        	ASL A
0E4F5 0A                        	ASL A
0E4F6 7D 10 02                  	ADC SpriteDMAArea + $10, X
0E4F9 9D 10 02                  	STA SpriteDMAArea + $10, X
0E4FC CA                        	DEX
0E4FD CA                        	DEX
0E4FE CA                        	DEX
0E4FF CA                        	DEX
0E500 10 EF                     	BPL loc_BANKF_EB1F
0E502                           
0E502 60                        	RTS
0E503                           
0E503                           ; End of function sub_BANKF_EAF6
0E503                           
0E503                           IFNDEF BONUS_CHANCE_RAM_CLEANUP
0E503                           ;
0E503                           ; Copies the unused coin sprite from memory into the sprite DMA area at $200
0E503                           ;
0E503                           CopyUnusedCoinSpriteToSpriteArea:
0E503 A0 00                     	LDY #$00
0E505                           
0E505                           CopyUnusedCoinSpriteToSpriteArea_Loop:
0E505 B9 53 06                  	LDA unk_RAM_653, Y ; Copy two sprites from memory to memory.
0E508 99 28 02                  	STA SpriteDMAArea + $28, Y ; This is definitely efficient.
0E50B C8                        	INY ; Two sprites for each half of the coin.
0E50C C0 08                     	CPY #$08 ; Four bytes per sprite * 2 sprites = 8 bytes
0E50E 90 F5                     	BCC CopyUnusedCoinSpriteToSpriteArea_Loop
0E510                           
0E510 60                        	RTS
0E511                           ENDIF
0E511                           
0E511                           StaticScreenNMI_Routine:
0E511 A9 00                     	LDA #$00
0E513 8D 03 20                  	STA OAMADDR
0E516 A9 02                     	LDA #$02
0E518 8D 14 40                  	STA OAM_DMA ;; write OAM/sprites 
0E51B 20 E8 FD                  	JSR ChangeCHRBanks
0E51E                           
0E51E A5 FE                     	LDA PPUMaskMirror ;; write masking
0E520 8D 01 20                  	STA PPUMASK
0E523 20 61 E6                  	JSR DoSoundProcessing
0E526                           
0E526 A5 FF                     	LDA PPUCtrlMirror
0E528 8D 00 20                  	STA PPUCTRL
0E52B C6 EB                     	DEC NMIWaitFlag
0E52D 4C 46 E6                  	JMP ReturnFromNMI
0E530                           
0E530                           ; ---------------------------------------------------------------------------
0E530                           
0E530                           StandardGameNMI_Routine:
0E530 A9 00                     	LDA #$00
0E532 8D 01 20                  	STA PPUMASK
0E535 8D 03 20                  	STA OAMADDR
0E538 A9 02                     	LDA #$02
0E53A 8D 14 40                  	STA OAM_DMA
0E53D 20 E8 FD                  	JSR ChangeCHRBanks
0E540                           
0E540 20 EB E6                  	JSR UpdatePPUFromBufferWithOptions
0E543                           
0E543 20 4D E6                  	JSR sub_BANKF_EC68
0E546                           
0E546 A5 FD                     	LDA PPUScrollXMirror
0E548 8D 05 20                  	STA PPUSCROLL
0E54B A9 00                     	LDA #$00
0E54D 8D 05 20                  	STA PPUSCROLL
0E550 A5 FE                     	LDA PPUMaskMirror
0E552 8D 01 20                  	STA PPUMASK
0E555 4C 1D E6                  	JMP loc_BANKF_EC4B
0E558                           
0E558                           ; ---------------------------------------------------------------------------
0E558                           
0E558                           loc_BANKF_EB86:
0E558 A5 FE                     	LDA PPUMaskMirror
0E55A 8D 01 20                  	STA PPUMASK
0E55D 4C 30 E6                  	JMP loc_BANKF_EC5E
0E560                           
0E560                           
0E560                           ; public NMI
0E560                           NMI:
0E560 08                        	PHP ; store current processor state
0E561 48                        	PHA
0E562 8A                        	TXA
0E563 48                        	PHA
0E564 98                        	TYA
0E565 48                        	PHA
0E566 2C 00 01                  	BIT StackArea
0E569 10 C5                     	BPL StandardGameNMI_Routine ; branch if bit 7 was 0
0E56B                           
0E56B 50 A4                     	BVC StaticScreenNMI_Routine ; branch if bit 6 was 0
0E56D                           
0E56D A9 00                     	LDA #$00
0E56F 8D 01 20                  	STA PPUMASK
0E572 8D 03 20                  	STA OAMADDR
0E575 A9 02                     	LDA #$02
0E577 8D 14 40                  	STA OAM_DMA
0E57A                           IFNDEF PLAYER_STUFF_TOP
0E57A 20 E8 FD                  	JSR ChangeCHRBanks
0E57D                           ENDIF
0E57D                           IFDEF PLAYER_STUFF_TOP
0E57D                           	LDA #$80
0E57D                           	STA $8000
0E57D                               LDA #$00
0E57D                           	STA $8001
0E57D                           ENDIF
0E57D                           
0E57D A5 EB                     	LDA NMIWaitFlag
0E57F D0 D7                     	BNE loc_BANKF_EB86
0E581                           
0E581 A5 EC                     	LDA IsHorizontalLevel
0E583 F0 6C                     	BEQ loc_BANKF_EC1F
0E585                           
0E585 AD 1C 05                  	LDA byte_RAM_51C
0E588 F0 30                     	BEQ loc_BANKF_EBE8
0E58A                           
0E58A A9 00                     	LDA #$00
0E58C 8D 1C 05                  	STA byte_RAM_51C
0E58F A2 1E                     	LDX #$1E
0E591 A0 00                     	LDY #$00
0E593 AD 02 20                  	LDA PPUSTATUS
0E596 A9 B4                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteVertical | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0E598 8D 00 20                  	STA PPUCTRL
0E59B                           
0E59B                           loc_BANKF_EBC9:
0E59B                           	LDA_abs byte_RAM_D1
0E59B                           	IFDEF COMPATIBILITY
0E59B AD                        		.db $ad
0E59C D1 00                     		.dw byte_RAM_D1
0E59E                           	ELSE
0E59E                           		LDA byte_RAM_D1
0E59E                           		NOP_compat
0E59E                           	ENDIF
0E59E 8D 06 20                  	STA PPUADDR
0E5A1                           	LDA_abs byte_RAM_D2
0E5A1                           	IFDEF COMPATIBILITY
0E5A1 AD                        		.db $ad
0E5A2 D2 00                     		.dw byte_RAM_D2
0E5A4                           	ELSE
0E5A4                           		LDA byte_RAM_D2
0E5A4                           		NOP_compat
0E5A4                           	ENDIF
0E5A4 8D 06 20                  	STA PPUADDR
0E5A7                           
0E5A7                           loc_BANKF_EBD5:
0E5A7 B9 80 03                  	LDA unk_RAM_380, Y
0E5AA 8D 07 20                  	STA PPUDATA
0E5AD C8                        	INY
0E5AE CA                        	DEX
0E5AF D0 F6                     	BNE loc_BANKF_EBD5
0E5B1                           
0E5B1 A2 1E                     	LDX #$1E
0E5B3                           	INC_abs byte_RAM_D2
0E5B3                           	IFDEF COMPATIBILITY
0E5B3 EE                        		.db $ee
0E5B4 D2 00                     		.dw byte_RAM_D2
0E5B6                           	ELSE
0E5B6                           		INC byte_RAM_D2
0E5B6                           		NOP_compat
0E5B6                           	ENDIF
0E5B6                           
0E5B6 C0 3C                     	CPY #$3C
0E5B8 D0 E1                     	BNE loc_BANKF_EBC9
0E5BA                           
0E5BA                           loc_BANKF_EBE8:
0E5BA AD BC 03                  	LDA byte_RAM_3BC
0E5BD F0 32                     	BEQ loc_BANKF_EC1F
0E5BF                           
0E5BF A9 B4                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteVertical | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0E5C1 8D 00 20                  	STA PPUCTRL
0E5C4 A0 00                     	LDY #$00
0E5C6 A2 04                     	LDX #$04
0E5C8                           
0E5C8                           loc_BANKF_EBF6:
0E5C8 AD 02 20                  	LDA PPUSTATUS
0E5CB AD BC 03                  	LDA byte_RAM_3BC
0E5CE 8D 06 20                  	STA PPUADDR
0E5D1 AD BD 03                  	LDA byte_RAM_3BD
0E5D4 8D 06 20                  	STA PPUADDR
0E5D7                           
0E5D7                           loc_BANKF_EC05:
0E5D7 B9 BE 03                  	LDA unk_RAM_3BE, Y
0E5DA 8D 07 20                  	STA PPUDATA
0E5DD C8                        	INY
0E5DE 98                        	TYA
0E5DF 4A                        	LSR A
0E5E0 B0 F5                     	BCS loc_BANKF_EC05
0E5E2                           
0E5E2 AD BD 03                  	LDA byte_RAM_3BD
0E5E5 18                        	CLC
0E5E6 69 08                     	ADC #$08
0E5E8 8D BD 03                  	STA byte_RAM_3BD
0E5EB CA                        	DEX
0E5EC D0 DA                     	BNE loc_BANKF_EBF6
0E5EE                           
0E5EE 8E BC 03                  	STX byte_RAM_3BC
0E5F1                           
0E5F1                           loc_BANKF_EC1F:
0E5F1 20 C3 E6                  	JSR UpdatePPUFromBufferNMI
0E5F4                           
0E5F4 20 4D E6                  	JSR sub_BANKF_EC68
0E5F7                           
0E5F7 A9 B0                     	LDA #$B0
0E5F9 05 C9                     	ORA byte_RAM_C9
0E5FB A4 EC                     	LDY IsHorizontalLevel
0E5FD D0 04                     	BNE loc_BANKF_EC31
0E5FF                           
0E5FF 29 FE                     	AND #$FE
0E601 05 C8                     	ORA byte_RAM_C8
0E603                           
0E603                           loc_BANKF_EC31:
0E603 8D 00 20                  	STA PPUCTRL
0E606 85 FF                     	STA PPUCtrlMirror
0E608                           IFNDEF PLAYER_STUFF_TOP_IRQ
0E608 A5 FD                     	LDA PPUScrollXMirror
0E60A 8D 05 20                  	STA PPUSCROLL
0E60D A5 FC                     	LDA PPUScrollYMirror
0E60F 18                        	CLC
0E610 6D C5 04                  	ADC BackgroundYOffset
0E613 8D 05 20                  	STA PPUSCROLL
0E616                           ENDIF
0E616                           IFDEF PLAYER_STUFF_TOP_IRQ
0E616                               LDA #$0
0E616                               STA PPUSCROLL
0E616                               STA PPUSCROLL
0E616                           ENDIF
0E616 A5 FE                     	LDA PPUMaskMirror
0E618 8D 01 20                  	STA PPUMASK
0E61B E6 10                     	INC byte_RAM_10
0E61D                           
0E61D                           loc_BANKF_EC4B:
0E61D A5 11                     	LDA ScreenUpdateIndex
0E61F D0 06                     	BNE StandardGameNMI_End
0E621                           
0E621 8D 00 03                  	STA byte_RAM_300
0E624 8D 01 03                  	STA PPUBuffer_301
0E627                           
0E627                           StandardGameNMI_End:
0E627 A9 00                     	LDA #ScreenUpdateBuffer_RAM_301
0E629 85 11                     	STA ScreenUpdateIndex
0E62B 20 8F F9                  	JSR UpdateJoypads
0E62E                           
0E62E C6 EB                     	DEC NMIWaitFlag
0E630                           
0E630                           loc_BANKF_EC5E:
0E630 20 61 E6                  	JSR DoSoundProcessing
0E633                           IFDEF PLAYER_STUFF_IRQ
0E633                               LDA #$E0
0E633                               STA $E000
0E633                               STA $C000
0E633                               STA $C001
0E633                               STA $E001
0E633                               SEI
0E633                           ENDIF
0E633                           
0E633                           IFDEF DEBUG
0E633                           DebugHook:
0E633                           ; Hook into debug routine if select is pressed
0E633                           IFDEF PLAYER_STUFF
0E633 AD EA EE                      LDA DebugSet
0E636 F0 0E                         BEQ ReturnFromNMI
0E638 A5 F7                     	LDA Player1JoypadHeld
0E63A C9 F0                     	CMP #ControllerInput_Select | #ControllerInput_Start | #ControllerInput_A | #ControllerInput_B
0E63C D0 08                     	BNE ReturnFromNMI
0E63E                           ENDIF
0E63E                           IFNDEF PLAYER_STUFF
0E63E                           	LDA Player1JoypadPress
0E63E                           	CMP #ControllerInput_Select
0E63E                           	BNE ReturnFromNMI
0E63E                           ENDIF
0E63E A9 F1                     	LDA #>Debug_Init
0E640 48                        	PHA
0E641 A9 C2                     	LDA #<Debug_Init
0E643 48                        	PHA
0E644 08                        	PHP
0E645 40                        	RTI
0E646                           ENDIF
0E646                           
0E646                           ReturnFromNMI:
0E646 68                        	PLA
0E647 A8                        	TAY
0E648 68                        	PLA
0E649 AA                        	TAX
0E64A 68                        	PLA
0E64B 28                        	PLP
0E64C 40                        	RTI
0E64D                           
0E64D                           ; End of function NMI
0E64D                           
0E64D                           IFDEF PLAYER_STUFF_IRQ
0E64D                           IRQ_Start:
0E64D                               LDA #$01
0E64D                               STA $E000
0E64D                               PLA ;; remove JSR from stack
0E64D                               PLA
0E64D                           	TXA ;; store state
0E64D                           	PHA
0E64D                           	TYA
0E64D                           	PHA
0E64D                               LDA #$01
0E64D                               STA $E000
0E64D                           	JSR ChangeCHRBanks
0E64D                           IFDEF DUMB
0E64D                           	LDA PPUScrollXMirror
0E64D                           	STA PPUSCROLL
0E64D                           	LDA PPUScrollYMirror
0E64D                           	CLC
0E64D                           	ADC BackgroundYOffset
0E64D                           	STA PPUSCROLL
0E64D                           ENDIF
0E64D                               LDA #$0
0E64D                               STA PPUADDR
0E64D                               STA PPUSCROLL
0E64D                               STA PPUSCROLL
0E64D                               STA PPUADDR
0E64D                           	PLA
0E64D                           	TAY
0E64D                           	PLA
0E64D                           	TAX
0E64D                           	PLA
0E64D                           	PLP
0E64D                           	RTI
0E64D                           ENDIF
0E64D                           
0E64D                           ; =============== S U B R O U T I N E =======================================
0E64D                           
0E64D                           sub_BANKF_EC68:
0E64D AD 02 20                  	LDA PPUSTATUS
0E650 A9 3F                     	LDA #$3F
0E652 8D 06 20                  	STA PPUADDR
0E655 A9 00                     	LDA #$00
0E657 8D 06 20                  	STA PPUADDR
0E65A 8D 06 20                  	STA PPUADDR
0E65D 8D 06 20                  	STA PPUADDR
0E660 60                        	RTS
0E661                           
0E661                           ; End of function sub_BANKF_EC68
0E661                           
0E661                           
0E661                           DoSoundProcessing:
0E661 A9 02                     	LDA #PRGBank_4_5
0E663 20 FD FD                  	JSR ChangeMappedPRGBankWithoutSaving
0E666                           
0E666 20 00 80                  	JSR StartProcessingSoundQueue
0E669                           
0E669 AD F2 06                  	LDA MMC3PRGBankTemp
0E66C 4C FA FD                  	JMP ChangeMappedPRGBank
0E66F                           
0E66F                           
0E66F                           ClearNametablesAndSprites:
0E66F A9 00                     	LDA #$00
0E671 85 FE                     	STA PPUMaskMirror
0E673 8D 01 20                  	STA PPUMASK
0E676 A9 20                     	LDA #$20
0E678 20 93 E6                  	JSR ClearNametableChunk
0E67B                           
0E67B A9 24                     	LDA #$24
0E67D 20 93 E6                  	JSR ClearNametableChunk
0E680                           
0E680 A9 28                     	LDA #$28
0E682 20 93 E6                  	JSR ClearNametableChunk
0E685                           
0E685                           
0E685                           HideAllSprites:
0E685 A0 00                     	LDY #$00
0E687 A9 F8                     	LDA #$F8
0E689                           
0E689                           HideAllSpritesLoop:
0E689 99 00 02                  	STA SpriteDMAArea, Y
0E68C 88                        	DEY
0E68D 88                        	DEY
0E68E 88                        	DEY
0E68F 88                        	DEY
0E690 D0 F7                     	BNE HideAllSpritesLoop
0E692                           
0E692 60                        	RTS
0E693                           
0E693                           
0E693                           ClearNametableChunk:
0E693 AC 02 20                  	LDY PPUSTATUS ; Reset PPU address latch
0E696 A0 30                     	LDY #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIDisabled
0E698 8C 00 20                  	STY PPUCTRL ; Turn off NMI
0E69B 84 FF                     	STY PPUCtrlMirror
0E69D A0 00                     	LDY #$00
0E69F                           	; A contains the high byte of the PPU address (generally $20, $24, $28)
0E69F 8D 06 20                  	STA PPUADDR
0E6A2 8C 06 20                  	STY PPUADDR ; And Y has the low byte ($00)
0E6A5 A2 03                     	LDX #$03 ; Do $300 bytes for this loop.
0E6A7 A9 FB                     	LDA #$FB
0E6A9                           
0E6A9                           ClearNametableChunk_Loop:
0E6A9 8D 07 20                  	STA PPUDATA ; Store the blank tile $300 times
0E6AC C8                        	INY
0E6AD D0 FA                     	BNE ClearNametableChunk_Loop ; (Loop falls through every $100 bytes)
0E6AF                           
0E6AF CA                        	DEX
0E6B0 D0 F7                     	BNE ClearNametableChunk_Loop ; Loop falls through after $300 bytes
0E6B2                           
0E6B2                           ClearNametableChunk_Loop2:
0E6B2                           	; Do another loop of $C0 bytes to clear the
0E6B2                           	; rest of the nametable chunk
0E6B2 8D 07 20                  	STA PPUDATA
0E6B5 C8                        	INY
0E6B6 C0 C0                     	CPY #$C0
0E6B8 D0 F8                     	BNE ClearNametableChunk_Loop2
0E6BA                           
0E6BA A9 00                     	LDA #$00 ; Load A with $00 for clearing the attribute tables
0E6BC                           
0E6BC                           ClearNametableChunk_AttributeTableLoop:
0E6BC 8D 07 20                  	STA PPUDATA ; Clear attribute table...
0E6BF C8                        	INY ; Y was $C0 on entry, so write $40 bytes...
0E6C0 D0 FA                     	BNE ClearNametableChunk_AttributeTableLoop
0E6C2                           
0E6C2                           PPUBufferUpdatesComplete:
0E6C2 60                        	RTS ; Woo fucking hoo
0E6C3                           
0E6C3                           
0E6C3                           ;
0E6C3                           ; Used to update the PPU nametable / palette data during NMI.
0E6C3                           ;
0E6C3                           ; This function can only handle $100 bytes of data
0E6C3                           ; (actually less).
0E6C3                           ;
0E6C3                           ; Unlike UpdatePPUFromBuffer, this one does not support
0E6C3                           ; $80 or $40 as options, instead treating them as direct length.
0E6C3                           ; It also does not increment the buffer pointer, only using Y
0E6C3                           ; to read further data.
0E6C3                           ;
0E6C3                           ; If Y overflows, it will resume copying again from the beginning,
0E6C3                           ; and can get into an infinite loop if it doesn't encounter
0E6C3                           ; a terminating $00. Welp!
0E6C3                           ;
0E6C3                           UpdatePPUFromBufferNMI:
0E6C3 A9 B0                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled
0E6C5 8D 00 20                  	STA PPUCTRL
0E6C8 A0 00                     	LDY #$00
0E6CA                           
0E6CA                           UpdatePPUFromBufferNMI_CheckForBuffer:
0E6CA B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y
0E6CC F0 F4                     	BEQ PPUBufferUpdatesComplete
0E6CE                           
0E6CE AE 02 20                  	LDX PPUSTATUS
0E6D1 8D 06 20                  	STA PPUADDR
0E6D4 C8                        	INY
0E6D5 B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y
0E6D7 8D 06 20                  	STA PPUADDR
0E6DA C8                        	INY
0E6DB B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y
0E6DD AA                        	TAX
0E6DE                           
0E6DE                           UpdatePPUFromBufferNMI_CopyLoop:
0E6DE C8                        	INY
0E6DF B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y
0E6E1 8D 07 20                  	STA PPUDATA
0E6E4 CA                        	DEX
0E6E5 D0 F7                     	BNE UpdatePPUFromBufferNMI_CopyLoop
0E6E7                           
0E6E7 C8                        	INY
0E6E8 4C CA E6                  	JMP UpdatePPUFromBufferNMI_CheckForBuffer
0E6EB                           
0E6EB                           
0E6EB                           ;
0E6EB                           ; This reads from $F0/$F1 to determine where a "buffer" is.
0E6EB                           ; Basically, a buffer is like this:
0E6EB                           ;
0E6EB                           ; PPUADDR  LEN DATA ......
0E6EB                           ; $20 $04  $03 $E9 $F0 $FB
0E6EB                           ; $25 $5F  $4F $FB
0E6EB                           ; $21 $82  $84 $00 $01 $02 $03
0E6EB                           ; $00
0E6EB                           ;
0E6EB                           ; PPUADDR is two bytes (hi,lo) for the address to send to PPUADDR.
0E6EB                           ; LEN is the length, with the following two bitmasks:
0E6EB                           ; - $80: Set the "draw vertically" option
0E6EB                           ;  - $40: Use ONE tile instead of a string
0E6EB                           ; DATA is either (LEN) bytes or one byte.
0E6EB                           ;
0E6EB                           ; After (LEN) bytes have been written, the buffer pointer
0E6EB                           ; is incremented to (LEN+2) and the function restarts.
0E6EB                           ; A byte of $00 terminates execution and returns.
0E6EB                           ;
0E6EB                           ; There is a similar function, UpdatePPUFromBufferNMI,
0E6EB                           ; that is called during NMI, but unlike this one,
0E6EB                           ; that one does NOT use bitmasks, nor increment the pointer.
0E6EB                           ;
0E6EB                           UpdatePPUFromBufferWithOptions:
0E6EB                           	; First, check if we have anything to send to the PPU
0E6EB A0 00                     	LDY #$00
0E6ED B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y
0E6EF                           	; If the first byte at the buffer address is #$00, we have nothing. We're done here!
0E6EF F0 D1                     	BEQ PPUBufferUpdatesComplete
0E6F1                           
0E6F1                           	; Clear address latch
0E6F1 AE 02 20                  	LDX PPUSTATUS
0E6F4                           	; Set the PPU address to the
0E6F4                           	; address from the PPU buffer
0E6F4 8D 06 20                  	STA PPUADDR
0E6F7 C8                        	INY
0E6F8 B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y
0E6FA 8D 06 20                  	STA PPUADDR
0E6FD C8                        	INY
0E6FE B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y ; Data segment length byte...
0E700 0A                        	ASL A
0E701 48                        	PHA
0E702                           	; Enable NMI + Vertical increment + whatever else was already set...
0E702 A5 FF                     	LDA PPUCtrlMirror
0E704 09 84                     	ORA #PPUCtrl_Base2000 | PPUCtrl_WriteVertical | PPUCtrl_Sprite0000 | PPUCtrl_Background0000 | PPUCtrl_SpriteSize8x8 | PPUCtrl_NMIEnabled
0E706                           	; ...but only if $80 was set in the length byte. Otherwise, turn vertical incrementing back off.
0E706 B0 02                     	BCS UpdatePPUFBWO_EnableVerticalIncrement
0E708                           
0E708 29 FB                     	AND #PPUCtrl_Base2C00 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite1000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled | $40
0E70A                           
0E70A                           UpdatePPUFBWO_EnableVerticalIncrement:
0E70A 8D 00 20                  	STA PPUCTRL
0E70D 68                        	PLA
0E70E                           	; Check if the second bit ($40) in the length has been set
0E70E 0A                        	ASL A
0E70F                           	; If not, we are copying a string of data
0E70F 90 03                     	BCC UpdatePPUFBWO_CopyStringOfTiles
0E711                           
0E711                           	; Length (A) is now (A << 2).
0E711                           	; OR in #$02 now if we are copying a single tile;
0E711                           	; This will be rotated out into register C momentarily
0E711 09 02                     	ORA #$02
0E713 C8                        	INY
0E714                           
0E714                           UpdatePPUFBWO_CopyStringOfTiles:
0E714                           	; Restore the data length.
0E714                           	; A = (Length & #$3F)
0E714 4A                        	LSR A
0E715                           
0E715                           	; This moves the second bit (used above to signal
0E715                           	; "one tile mode") into the Carry register
0E715 4A                        	LSR A
0E716 AA                        	TAX ; Copy the length into register X
0E717                           
0E717                           UpdatePPUFBWO_CopyLoop:
0E717                           	; If Carry is set (from above), we're only copying one tile.
0E717                           	; Do not increment Y to advance copying index
0E717 B0 01                     	BCS UpdatePPUFBWO_CopySingleTileSkip
0E719                           
0E719 C8                        	INY
0E71A                           
0E71A                           UpdatePPUFBWO_CopySingleTileSkip:
0E71A B1 F0                     	LDA (RAM_PPUDataBufferPointer), Y ; Load data from buffer...
0E71C 8D 07 20                  	STA PPUDATA ; ...store it to the PPU.
0E71F CA                        	DEX ; Decrease remaining length.
0E720 D0 F5                     	BNE UpdatePPUFBWO_CopyLoop ; Are we done? If no, copy more stuff
0E722                           
0E722 C8                        	INY ; Y contains the amount of copied data now
0E723 98                        	TYA ; ...and now A does
0E724 18                        	CLC ; Clear carry bit (from earlier)
0E725 65 F0                     	ADC RAM_PPUDataBufferPointer ; Add the length to the PPU data buffer
0E727 85 F0                     	STA RAM_PPUDataBufferPointer
0E729 A5 F1                     	LDA RAM_PPUDataBufferPointer + 1
0E72B                           	; If the length overflowed (carry set),
0E72B                           	; add that to the hi byte of the pointer
0E72B 69 00                     	ADC #$00
0E72D 85 F1                     	STA RAM_PPUDataBufferPointer + 1
0E72F                           	; Start the cycle over again.
0E72F                           	; (If the PPU buffer points to a 0, it will terminate after this jump)
0E72F 4C EB E6                  	JMP UpdatePPUFromBufferWithOptions
0E732                           
0E732                           IFDEF PLAYER_STUFF
0E732                               .include "src/extras/player-stuff.asm"
0E732                           PlayerLevelPowerup_1 = $7600
0E732                           PlayerLevelPowerup_2 = $7601
0E732                           PlayerLevelPowerup_3 = $7602 ; change these slots to only read once, store variable into mushroom
0E732                           Is_Player_Projectile = $7610 ; combined with hits
0E732                           Enemy_Fireball_Hits = $7610
0E732                           MushroomEffect = $7620
0E732                           Enemy_Champion = $7620
0E732                           MoreEnemyInfo = $7D20
0E732                           PlayerModStats = $7630
0E732                           Independent_Player_Stats = $7691
0E732                           Player_Bit_Flags = $76E0
0E732                           Player_Bit_Flags_2 = $76E4
0E732                           Player_Bit_Flags_3 = $76E8
0E732                           Player_Luck = $76EC
0E732                           Player_Cursed = $76ED
0E732                           Player_CursedPersistence = $76EE
0E732                           Player_ChampionChance = $76EF
0E732                           RandomDropType = $76F0
0E732                           ProjectileType = $76F1
0E732                           ProjectileNumber = $76F2
0E732                           ProjectileTimer = $76F3
0E732                           StoredItem = $76F4
0E732                           Boss_HP = $76F6
0E732                           CrushTimer = $76F7
0E732                           MushroomFragments = $76F8
0E732                           SpriteTableCustom1 = $7700
0E732                           SpriteTableCustom2 = $7780
0E732                           LastWarpLoc = $7D0E
0E732                           LastMusicChoice = $7D0F
0E732                           ShopInfo = $7D10
0E732                           WarpDestinationRam = $76cd
0E732                           
0E732                           PlayerState_Nothing = $9 
0E732                           
0E732                           SpriteAnimation_CustomFrame1 = #SpriteAnimation_Climbing + 1 ; can't reorganize this since not the entire disasm is compiled right
0E732                           SpriteAnimation_GroundPound = #SpriteAnimation_Climbing + 1 ; can't reorganize this since not the entire disasm is compiled right
0E732                           
0E732                           GameMode_JustCharacter = #GameMode_Warp + 1
0E732                           GameMode_Shop = #GameMode_Warp + 2
0E732                           
0E732                           ; 23, 24, 25, 26...
0E732                           ; 
0E732                           BackgroundTile_BB1 = $23
0E732                           BackgroundTile_PB1 = $24
0E732                           BackgroundTile_LB1 = $25
0E732                           BackgroundTile_TB1 = $26
0E732                           
0E732                           BackgroundTile_BB1 = $7B
0E732                           BackgroundTile_PB1 = $7C
0E732                           BackgroundTile_LockBlock = $7D
0E732                           BackgroundTile_TB_RED = $7E
0E732                           BackgroundTile_LAD = $7F ; LAD
0E732                           
0E732                           BackgroundTile_BreakBlock1 = $AC
0E732                           BackgroundTile_BreakBlock2 = $AD
0E732                           BackgroundTile_LockBlockRed = $AE
0E732                           BackgroundTile_TreasureBlock = $AF
0E732                           
0E732                           BackgroundTile_BB4 = $D8
0E732                           BackgroundTile_PB4 = $D9
0E732                           BackgroundTile_LB4 = $DA
0E732                           BackgroundTile_TB4 = $DB
0E732                           
0E732                           CustomBitFlag_PowerThrow = %00000001
0E732                           CustomBitFlag_PowerCharge = %00000010
0E732                           CustomBitFlag_PowerWalk = %00000100
0E732                           CustomBitFlag_StoreItem = %00001000
0E732                           CustomBitFlag_FallDefense = %00010000
0E732                           CustomBitFlag_ImmuneFire = %00100000
0E732                           CustomBitFlag_ImmuneElec = %01000000
0E732                           CustomBitFlag_Secret = %10000000
0E732                           
0E732                           CustomBitFlag_AllTerrain = %00000001
0E732                           CustomBitFlag_HiJumpBoot = %00000010
0E732                           CustomBitFlag_FloatBoots = %00000100
0E732                           CustomBitFlag_MasterKey = %00001000
0E732                           CustomBitFlag_AirHop = %00010000
0E732                           CustomBitFlag_WarpWhistle = %00100000
0E732                           CustomBitFlag_WarpSigil = %00100000
0E732                           CustomBitFlag_Map = %10000000
0E732                           
0E732                           CustomBitFlag_KirbyJump = %00000001
0E732                           CustomBitFlag_Grapple = %00000010
0E732                           CustomBitFlag_SpaceJump = %00000100
0E732                           CustomBitFlag_BounceJump = %00001000
0E732                           CustomBitFlag_BounceAll = %00010000
0E732                           CustomBitFlag_GroundPound = %00100000
0E732                           CustomBitFlag_WallCling = %01000000
0E732                           CustomBitFlag_WallJump = %10000000
0E732                           
0E732                           ChkToNextValidCharacter:
0E732 A5 8F                           LDA     CurrentCharacter
0E734 29 03                           AND     #$3
0E736 85 8F                           STA     CurrentCharacter
0E738 AA                              TAX
0E739 BD 5E E3                        LDA     CharLookupTable, X
0E73C 2D E0 7D                        AND     CharacterLock_Variable
0E73F 60                              RTS
0E740                           
0E740                           ProjectileTileHealth:
0E740 B8                            .db $B8 
0E741 A4                            .db $a4  
0E742 B9                            .db $b9   
0E743 DD                            .db $dd   
0E744 EF                            .db $ef   
0E745 9E                            .db $9e   
0E746 A8                            .db $a8
0E747 AE                            .db $ae   
0E748 DD                            .db $dd   
0E749 F3                            .db $f3 
0E74A B8                            .db $B8
0E74B B8                            .db $B8
0E74C 60                            .db $60
0E74D 3D                            .db $3d
0E74E                           
0E74E                           IFDEF PLAYER_STUFF
0E74E                           ChampSet:
0E74E B5 90                         LDA ObjectType, X
0E750 C9 12                         CMP #Enemy_Pidgit
0E752 F0 2B                         BEQ ++
0E754 C9 3D                         CMP #Enemy_Key
0E756 F0 27                         BEQ ++
0E758 C9 44                         CMP #Enemy_CrystalBall
0E75A F0 23                         BEQ ++
0E75C BD 20 76                      LDA Enemy_Champion, X
0E75F D0 06                         BNE +
0E761 AD AE 05                      LDA PseudoRNGValues + 2 
0E764 9D 20 76                      STA Enemy_Champion, X
0E767                           +
0E767 CD 0B EF                      CMP ChampionChance
0E76A B0 13                         BCS ++
0E76C A9 03                         LDA #ObjAttrib_Palette3
0E76E 55 65                         EOR ObjectAttributes, X
0E770 95 65                     	STA ObjectAttributes, X
0E772 B9 60 F8                      LDA EnemyArray_46E_Data, Y
0E775 09 42                         ORA #$42 
0E777 9D 6E 04                      STA EnemyArray_46E, X
0E77A FE 65 04                      INC EnemyHP, X
0E77D 38                            SEC
0E77E 60                            RTS
0E77F                           ++  
0E77F 60                            RTS
0E780                           ENDIF
0E780                           
0E780                           FreezeEntity:
0E780                           IFDEF PLAYER_STUFF
0E780 B9 10 76                  	LDA Enemy_Fireball_Hits, Y
0E783 10 35                         BPL +
0E785 BD 9A 04                  	LDA unk_RAM_49B - 1, X ; boss
0E788 D0 30                         BNE +
0E78A B9 20 7D                      LDA MoreEnemyInfo, Y
0E78D C9 03                         CMP #$3 ;; freeze
0E78F D0 29                         BNE +
0E791 B5 8F                         LDA ObjectType - 1, X
0E793 C9 2B                         CMP #Enemy_FryguySplit
0E795 F0 23                         BEQ +
0E797 C9 2A                         CMP #Enemy_Fryguy
0E799 F0 1F                         BEQ +
0E79B C9 21                         CMP #Enemy_Clawgrip
0E79D F0 1B                         BEQ +
0E79F C9 1A                         CMP #Enemy_Pokey
0E7A1 F0 17                         BEQ +
0E7A3 A9 00                         LDA #0
0E7A5 95 85                         STA EnemyTimer - 1, X
0E7A7 95 3C                     	STA ObjectXVelocity - 1, X
0E7A9 9D CB 04                  	STA ObjectXAcceleration - 1, X
0E7AC CA                            DEX
0E7AD 20 B0 84                      JSR SetEnemyAttributes
0E7B0 E8                            INX
0E7B1 A9 20                     	LDA #SoundEffect1_EnemyHit
0E7B3 8D 02 06                  	STA SoundEffectQueue1
0E7B6 A9 08                         LDA #EnemyState_Frozen
0E7B8 95 50                         STA EnemyState - 1, X
0E7BA                           ENDIF
0E7BA 60                        +   RTS
0E7BB                           
0E7BB                           
0E7BB                           IFDEF PLAYER_STUFF
0E7BB                           HandleEnemyState_Frozen:
0E7BB B5 86                         LDA EnemyTimer, X
0E7BD D0 08                         BNE +
0E7BF D6 86                         DEC EnemyTimer, X
0E7C1 B5 65                     	LDA ObjectAttributes, X
0E7C3 29 FC                         AND #%11111100
0E7C5 95 65                     	STA ObjectAttributes, X
0E7C7                           +
0E7C7 C9 01                         CMP #1
0E7C9 D0 11                         BNE +
0E7CB A9 01                         LDA #EnemyState_Alive
0E7CD 95 51                         STA EnemyState, X
0E7CF 20 B0 84                      JSR SetEnemyAttributes
0E7D2 D6 86                         DEC EnemyTimer, X
0E7D4 BD 65 04                      LDA EnemyHP, X
0E7D7 10 23                         BPL +o
0E7D9 F6 51                         INC EnemyState, X
0E7DB                           ++
0E7DB 60                            RTS
0E7DC                           +
0E7DC B5 90                         LDA ObjectType, X
0E7DE 48                            PHA
0E7DF A9 37                         LDA #Enemy_Bomb
0E7E1 95 90                         STA ObjectType, X
0E7E3 A9 01                         LDA #EnemyState_Alive
0E7E5 95 51                         STA EnemyState, X
0E7E7 20 3D 8A                      JSR HandleEnemyState_Alive
0E7EA 68                            PLA
0E7EB 95 90                         STA ObjectType, X
0E7ED A9 08                         LDA #EnemyState_Frozen
0E7EF 95 51                         STA EnemyState, X
0E7F1 A5 9C                         LDA HoldingItem
0E7F3 F0 07                         BEQ +o
0E7F5 EC 2D 04                      CPX ObjectBeingCarriedIndex
0E7F8 D0 02                         BNE +o
0E7FA F6 86                         INC EnemyTimer, X
0E7FC                           +o
0E7FC 4C 90 9D                      JMP RenderSprite
0E7FF                           
0E7FF                           HandleEnemyState_Bisect:
0E7FF 20 90 9D                      JSR RenderSprite
0E802                           ENDIF
0E802                           
0E802                           IFDEF PLAYER_STUFF
0E802                           HandlePlayerProjectileEffect:
0E802 8A                            TXA
0E803 48                            PHA
0E804 98                            TYA
0E805 48                            PHA
0E806 AA                            TAX
0E807 BD 10 76                      LDA Enemy_Fireball_Hits, X
0E80A 29 40                         AND #ProjChar_PuffEnemy
0E80C F0 03                     	BEQ +
0E80E 20 27 93                  	JSR TurnIntoPuffOfSmoke
0E811 BD 10 76                  +   LDA Enemy_Fireball_Hits, X
0E814 29 20                         AND #ProjChar_Disappear
0E816 F0 07                     	BEQ +
0E818 20 27 93                  	JSR TurnIntoPuffOfSmoke
0E81B A9 00                         LDA #$0
0E81D 95 86                         STA EnemyTimer, X
0E81F BD 10 76                  +   LDA Enemy_Fireball_Hits, X
0E822 29 08                         AND #ProjChar_Explosion
0E824 F0 03                     	BEQ +
0E826 20 84 92                  	JSR EnemyBehavior_Bomb_Explode
0E829 68                        +   PLA
0E82A A8                            TAY
0E82B 68                            PLA
0E82C AA                            TAX
0E82D 60                            RTS
0E82E                           ENDIF
0E82E                           
0E82E                           
0E82E                           IFDEF PLAYER_STUFF
0E82E                           BossDefeatMush:
0E82E 20 27 93                      JSR TurnIntoPuffOfSmoke_Proper
0E831                           
0E831 A2 02                         LDX #CustomBitFlag_Boss_Defeated 
0E833 20 8C F1                      JSR ApplyFlagWorld
0E836 F0 03                         BEQ +
0E838 EE EF 73                      INC World_Count_Bosses
0E83B                           +
0E83B AD F2 EE                      LDA BossMushroom
0E83E F0 39                         BEQ +
0E840 A2 02                         LDX #CustomBitFlag_Mush1
0E842 20 4E F1                      JSR ChkFlagLevel
0E845 F0 32                         BEQ +
0E847 A6 12                         LDX byte_RAM_12
0E849 20 7E 94                      JSR CreateEnemy_TryAllSlots
0E84C 30 2B                         BMI +
0E84E 8A                            TXA
0E84F 48                            PHA
0E850 A6 00                     	LDX byte_RAM_0
0E852 86 12                         STX byte_RAM_12
0E854 A0 00                         LDY #$0
0E856 94 79                         STY EnemyVariable, X
0E858 B9 00 76                      LDA PlayerLevelPowerup_1, Y
0E85B 9D 20 76                      STA MushroomEffect, X
0E85E A9 3F                         LDA #Enemy_Mushroom
0E860 95 90                         STA ObjectType, X
0E862 20 F3 EC                      JSR ProcessCustomPowerup    
0E865 68                            PLA
0E866 85 12                         STA byte_RAM_12
0E868 A6 00                     	LDX byte_RAM_0
0E86A A4 12                     	LDY byte_RAM_12
0E86C B9 EF 04                  	LDA unk_RAM_4EF, Y
0E86F 95 15                     	STA ObjectXHi, X
0E871 A9 D0                         LDA #$D0
0E873 95 47                         STA ObjectYVelocity, X
0E875 A9 00                         LDA #$0
0E877 95 3D                         STA ObjectXVelocity, X
0E879                           +   
0E879 A6 12                     	LDX byte_RAM_12
0E87B 60                            RTS
0E87C                           ENDIF
0E87C                           
0E87C                           IFDEF EXTENDED_PTR_CONTINUE
0E87C                           SetGameModeBonusChanceCustom:
0E87C AD 35 05                      LDA CurrentLevelPage
0E87F 0A                            ASL
0E880 AA                            TAX
0E881 BD 1D 05                  	LDA AreaPointersByPage, X
0E884 C9 1F                         CMP #$1F
0E886 D0 0F                         BNE +
0E888 A0 06                         LDY #GameMode_Shop
0E88A 8C EC 04                      STY GameMode
0E88D AD 35 05                      LDA CurrentLevelPage
0E890 8D 33 05                      STA CurrentLevelEntryPage
0E893 8D E9 04                      STA CurrentLevelEntryPage_Init
0E896 60                            RTS
0E897                           +
0E897 AD 35 05                      LDA CurrentLevelPage
0E89A 0A                            ASL
0E89B AA                            TAX
0E89C BD 1D 05                      LDA AreaPointersByPage, X
0E89F 29 20                         AND #$20
0E8A1 C9 20                         CMP #$20
0E8A3 F0 01                         BEQ +
0E8A5 60                            RTS
0E8A6                           +
0E8A6 A9 03                     	LDA #GameMode_BonusChance
0E8A8 8D EC 04                  	STA GameMode
0E8AB 60                        	RTS
0E8AC                           ENDIF
0E8AC                           
0E8AC                           BonusChanceText_PUSH_OTHER_BUTTON:
0E8AC 17 22 87 13 DB FB DC DA.. 	.db $13+4,$22,$87,$13,$DB,$FB,$DC,$DA,$E7,$DC,$DE,$E5,$F7,$FB,$EC,$ED,$DA,$EB,$ED,$FB,$D1,$EE,$E9,$0
0E8C4                           TEXT_UP:
0E8C4 06 2E 58 02 EE E9 00      	.db $2+4,$2E,$58,$2,$EE,$E9,$0
0E8CB                           TEXT_DN:
0E8CB 06 2E F8 02 DD E7 00      	.db $2+4,$2E,$F8,$2,$DD,$E7,$0
0E8D2                           TEXT_Mario:
0E8D2 0C 22 EC 08 FB E6 DA EB.. 	.db $8+4,$22,$EC,$8, $FB, $E6, $DA, $EB, $E2, $E8, $FB, $FB, $0
0E8DF                           TEXT_Princess:
0E8DF 0C 22 EC 08 E9 EB E2 E7.. 	.db $8+4,$22,$EC,$8, $E9, $EB, $E2, $E7, $DC, $DE, $EC, $EC, $0
0E8EC                           TEXT_Toad:
0E8EC 0C 22 EC 08 FB FB ED E8.. 	.db $8+4,$22,$EC,$8, $FB, $FB, $ED, $E8, $DA, $DD, $FB, $FB, $0
0E8F9                           TEXT_Luigi:
0E8F9 0C 22 EC 08 FB E5 EE E2.. 	.db $8+4,$22,$EC,$8, $FB, $E5, $EE, $E2, $E0, $E2, $FB, $FB, $0
0E906                           Custom_TextPointers:
0E906 AC E8                     	.dw BonusChanceText_PUSH_OTHER_BUTTON ; 0
0E908 C4 E8                         .dw TEXT_UP ; 1
0E90A CB E8                         .dw TEXT_DN ; 1
0E90C D2 E8                         .dw TEXT_Mario ; 1
0E90E DF E8                         .dw TEXT_Princess ; 1
0E910 EC E8                         .dw TEXT_Toad; 1
0E912 F9 E8                         .dw TEXT_Luigi ; 1
0E914                           
0E914                           ;; thx XK
0E914                           Custom_BufferText:
0E914 A0 00                         LDY #$0
0E916 0A                        	ASL A ; Rotate A left one
0E917 AA                        	TAX ; A->X
0E918 BD 06 E9                  	LDA Custom_TextPointers, X ; Load low pointer
0E91B 85 00                     	STA $0 ; Store one byte to low address
0E91D BD 07 E9                  	LDA Custom_TextPointers + 1, X ; Store high pointer
0E920 85 01                     	STA $1 ; Store one byte to low address
0E922 B1 00                     	LDA ($0), Y ; Load the length of data to copy
0E924 A8                        	TAY
0E925                           -
0E925 B1 00                     	LDA ($0), Y ; Load our PPU data...
0E927 99 00 03                  	STA PPUBuffer_301 - 1, Y ; ...and store it in the buffer
0E92A 88                        	DEY
0E92B D0 F8                     	BNE -
0E92D 60                        	RTS
0E92E                           
0E92E                           ;; other ideas:
0E92E                           ;; stat upgrades
0E92E                           ;; mltp unlock
0E92E                           ;; map radar
0E92E                           ;; mask egg buddy 
0E92E                           ;; luck
0E92E                           ;; reduce item chances
0E92E                           ;; fixx:
0E92E                           ;; radar, sound or tile draw, remove potion, add crystal
0E92E                           ;; fire, straight forward
0E92E                           
0E92E                           ItemCollisionCustom:
0E92E 4C 5B E9                      JMP + ;; skip collision until we get a better way to do it
0E931 B9 90 00                  	LDA ObjectType, Y
0E934 C9 3F                         CMP #Enemy_Mushroom
0E936 D0 23                         BNE +
0E938 B9 20 76                      LDA MushroomEffect, Y
0E93B F0 1E                         BEQ +
0E93D B9 47 00                      LDA ObjectYVelocity, Y
0E940 30 19                         BMI +
0E942 A6 12                         LDX byte_RAM_12
0E944 20 27 93                  	JSR TurnIntoPuffOfSmoke
0E947 20 3B EA                      JSR ProcessCustomPowerupAward
0E94A A4 12                         LDY byte_RAM_12
0E94C A9 39                     ++  LDA #Enemy_MushroomBlock
0E94E 99 90 00                      STA ObjectType, Y
0E951 A9 01                         LDA #$1
0E953 99 2F 04                      STA EnemyArray_42F, Y
0E956 68                            PLA
0E957 68                            PLA
0E958 4C A6 B8                      JMP CheckCollisionWithPlayer_Exit
0E95B                           +
0E95B B9 90 00                  	LDA ObjectType, Y
0E95E C9 36                     	CMP #Enemy_Coin
0E960 D0 25                         BNE +
0E962 B9 10 76                  	LDA Is_Player_Projectile, Y
0E965 30 18                         BMI ++
0E967 A9 05                         LDA #EnemyState_PuffOfSmoke
0E969 99 51 00                  	STA EnemyState, Y
0E96C A9 04                     	LDA #SoundEffect2_CoinGet
0E96E 8D 04 06                  	STA SoundEffectQueue2
0E971 EE 2B 06                      INC SlotMachineCoins
0E974 B9 20 76                      LDA Enemy_Champion, Y
0E977 CD 0B EF                      CMP ChampionChance
0E97A B0 03                         BCS ++
0E97C EE 2B 06                      INC SlotMachineCoins
0E97F                           ++
0E97F EE E2 73                      INC Level_Count_Coins
0E982 68                            PLA
0E983 68                            PLA
0E984 4C A6 B8                      JMP CheckCollisionWithPlayer_Exit
0E987 60                        +   RTS
0E988                           
0E988                           IFDEF PLAYER_STUFF_HANDLE_FROZEN
0E988                           EnemyBehavior_Frozen:
0E988                               LDA EnemyVariable, X
0E988                               STA ObjectType, X
0E988                               LDA EnemyTimer, X
0E988                               BNE +
0E988                               DEC EnemyTimer, X
0E988                           +
0E988                               CMP #1
0E988                               BNE +
0E988                               LDA EnemyHP, X
0E988                               PHA
0E988                               JSR InitializeEnemy
0E988                               PLA
0E988                               STA EnemyHP, X
0E988                               DEC EnemyTimer, X
0E988                               LDA #EnemyState_Alive
0E988                               STA EnemyState, X
0E988                               LDA EnemyHP, X
0E988                               BPL ++
0E988                               LDA #EnemyState_Dead
0E988                               STA EnemyState, X
0E988                           ++
0E988                               RTS
0E988                           +
0E988                               LDA HoldingItem
0E988                               BEQ +
0E988                               CPX ObjectBeingCarriedIndex
0E988                               BNE + 
0E988                               INC EnemyTimer, X
0E988                           +
0E988                           	LDA EnemyArray_42F, X
0E988                               BEQ +
0E988                           	DEC EnemyArray_42F, X
0E988                           +
0E988                           	LDA ObjectAnimationTimer, X
0E988                               PHA
0E988                           	LDA ObjectXVelocity, X
0E988                               BEQ +o
0E988                           	LDA EnemyCollision, X
0E988                           	AND #CollisionFlags_Down
0E988                           	BEQ +l
0E988                           	LDA ObjectXVelocity, X
0E988                               BPL +p
0E988                               INC ObjectXVelocity, X
0E988                               JMP +k 
0E988                           +p  DEC ObjectXVelocity, X
0E988                           +k  BEQ +o
0E988                           +l  JSR EnemyBehavior_Shell
0E988                               JMP +m 
0E988                           +o  JSR SetEnemyAttributes
0E988                           	LDA ObjectAttributes, X
0E988                               AND #%11111100
0E988                           	STA ObjectAttributes, X
0E988                               JSR EnemyBehavior_Bomb
0E988                           +m  JSR RenderSprite
0E988                               PLA
0E988                           	STA ObjectAnimationTimer, X
0E988                               LDA #LastEnemySlot - 3
0E988                               STA ObjectType, X
0E988                               RTS
0E988                           ENDIF
0E988                           
0E988                           ClearPlayerStuff:
0E988 A0 11                         LDY #$11
0E98A A9 00                         LDA #0
0E98C 8D F6 76                      STA Boss_HP
0E98F 8D F7 76                      STA CrushTimer
0E992 8D F2 76                      STA ProjectileNumber
0E995 99 1D 05                  -	STA AreaPointersByPage, Y
0E998 88                            DEY
0E999 10 FA                         BPL -
0E99B A0 08                         LDY #$8
0E99D 99 00 76                  -	STA PlayerLevelPowerup_1, Y
0E9A0 88                            DEY
0E9A1 10 FA                         BPL -
0E9A3 60                            RTS
0E9A4                           
0E9A4                           WarpSigil_Function:
0E9A4                           WarpWhistle_Function:
0E9A4 A5 F7                         LDA Player1JoypadHeld
0E9A6 29 24                         AND #ControllerInput_Select | #ControllerInput_Down
0E9A8 C9 24                         CMP #ControllerInput_Select | #ControllerInput_Down
0E9AA D0 6F                         BNE +
0E9AC A2 20                         LDX #CustomBitFlag_WarpWhistle
0E9AE 20 3F F1                      JSR ChkFlagPlayer2
0E9B1 D0 68                         BNE +
0E9B3 AD CA 04                      LDA CrouchJumpTimer
0E9B6 C9 3C                         CMP #$3C
0E9B8 90 61                         BCC +
0E9BA A5 99                         LDA PlayerInAir
0E9BC 0D 28 06                      ORA InSubspaceOrJar
0E9BF D0 5A                         BNE +
0E9C1 20 88 E9                      JSR ClearPlayerStuff
0E9C4 AD 0E 7D                      LDA LastWarpLoc
0E9C7 0A                        	ASL A
0E9C8 A8                            TAY
0E9C9 AD 35 05                      LDA CurrentLevelPage
0E9CC 0A                            ASL
0E9CD AA                            TAX
0E9CE B9 1D EA                  	LDA WarpWhistle_Table, Y
0E9D1 9D 1D 05                  	STA AreaPointersByPage, X
0E9D4 8D 31 05                  	STA CurrentLevel
0E9D7 B9 1E EA                  	LDA WarpWhistle_Table + 1, Y
0E9DA 9D 1E 05                  	STA AreaPointersByPage + 1, X
0E9DD 4A                        	LSR A
0E9DE 4A                        	LSR A
0E9DF 4A                        	LSR A
0E9E0 4A                        	LSR A
0E9E1 8D 32 05                  	STA CurrentLevelArea
0E9E4 B9 1E EA                  	LDA WarpWhistle_Table + 1, Y
0E9E7 29 0F                     	AND #$0F
0E9E9 8D 33 05                  	STA CurrentLevelEntryPage
0E9EC EE 27 06                      INC DoAreaTransition
0E9EF A9 00                         LDA #$0
0E9F1 8D AE 04                      STA AreaInitialized
0E9F4 8D CA 04                      STA CrouchJumpTimer
0E9F7 A2 09                         LDX #$9
0E9F9 95 50                     -   STA EnemyState - 1, X
0E9FB CA                            DEX
0E9FC D0 FB                         BNE -
0E9FE A9 01                         LDA #$1
0EA00 8D 34 05                      STA TransitionType
0EA03 A9 08                         LDA #SoundEffect1_ThrowItem
0EA05 8D 02 06                      STA SoundEffectQueue1
0EA08 20 01 E3                  	JSR DelayFrames
0EA0B C8                            INY
0EA0C C8                            INY
0EA0D 98                            TYA
0EA0E 4A                            LSR A
0EA0F CD 1C EA                      CMP WarpTableSize
0EA12 90 02                         BCC ++
0EA14 A9 00                         LDA #$0
0EA16                           ++
0EA16 8D 0E 7D                      STA LastWarpLoc
0EA19 68                            PLA
0EA1A 68                            PLA
0EA1B 60                        +   RTS
0EA1C                           
0EA1C                           WarpTableSize:
0EA1C 0F                            .db $0F
0EA1D                           WarpWhistle_Table:
0EA1D 40 00                         .db $40, $00
0EA1F 41 00                         .db $41, $00
0EA21 42 00                         .db $42, $00
0EA23 43 00                         .db $43, $00
0EA25 44 00                         .db $44, $00
0EA27 45 00                         .db $45, $00
0EA29 47 00                         .db $47, $00
0EA2B 48 00                         .db $48, $00
0EA2D 49 00                         .db $49, $00
0EA2F 4A 00                         .db $4a, $00
0EA31 4B 00                         .db $4b, $00
0EA33 4C 00                         .db $4c, $00
0EA35 4D 00                         .db $4d, $00
0EA37 4E 00                         .db $4e, $00
0EA39 4F 00                         .db $4f, $00
0EA3B                           
0EA3B                           CustomTransitionFlag_Continue = $80
0EA3B                           CustomTransitionFlag_ResetPos = $40
0EA3B                           CustomTransitionFlag_LevelComplete = $20
0EA3B                           
0EA3B                           ProcessCustomPowerupAward: ;; setup enum for extra options on compile
0EA3B BD 20 76                      LDA MushroomEffect, X
0EA3E                           ProcessCustomPowerupAward_NoLookup:
0EA3E AA                            TAX
0EA3F 20 A6 D9                  	JSR JumpToTableAfterJump
0EA42                           
0EA42 ED EA                     	.dw Normal_Mushroom_BEH ; Mushroom
0EA44 3E EB                     	.dw CustomBeh_Flag 
0EA46 3E EB                     	.dw CustomBeh_Flag 
0EA48 3E EB                     	.dw CustomBeh_Flag 
0EA4A 3E EB                     	.dw CustomBeh_Flag 
0EA4C 3E EB                     	.dw CustomBeh_Flag 
0EA4E 3E EB                     	.dw CustomBeh_Flag 
0EA50 3E EB                     	.dw CustomBeh_Flag 
0EA52 3E EB                     	.dw CustomBeh_Flag 
0EA54 49 EB                     	.dw CustomBeh_Flag2 
0EA56 49 EB                     	.dw CustomBeh_Flag2 
0EA58 49 EB                     	.dw CustomBeh_Flag2 
0EA5A 49 EB                     	.dw CustomBeh_Flag2 ;;key
0EA5C 49 EB                     	.dw CustomBeh_Flag2 
0EA5E 49 EB                     	.dw CustomBeh_Flag2 
0EA60 ED EA                     	.dw Normal_Mushroom_BEH 
0EA62 ED EA                     	.dw Normal_Mushroom_BEH 
0EA64 FD EB                         .dw CustomBeh_Fireball ; $11
0EA66 0B EC                         .dw CustomBeh_Egg ; $12
0EA68 19 EC                         .dw CustomBeh_Bomb
0EA6A 24 EC                         .dw CustomBeh_Phanto
0EA6C 2F EC                         .dw CustomBeh_Fry
0EA6E 3A EC                         .dw CustomBeh_Hammer
0EA70 45 EC                         .dw CustomBeh_Freeze
0EA72 7E EA                         .dw CustomBeh_Continue
0EA74 A1 EA                     	.dw CustomBeh_UnlockM 
0EA76 B6 EA                     	.dw CustomBeh_UnlockL 
0EA78 AF EA                     	.dw CustomBeh_UnlockT 
0EA7A A8 EA                     	.dw CustomBeh_UnlockP 
0EA7C 88 EA                     	.dw CustomBeh_Mushroom_Fragment 
0EA7E                               ;; leave objects at end, empty data
0EA7E                           
0EA7E                           CustomBeh_Continue:
0EA7E EE C5 05                      INC Continues
0EA81 20 21 EB                      JSR RemoveFromPlayfield
0EA84 20 16 EB                      JSR PlayMushGet
0EA87 60                            RTS 
0EA88                           
0EA88                           CustomBeh_Mushroom_Fragment:
0EA88 EE F8 76                      INC MushroomFragments
0EA8B AD F8 76                      LDA MushroomFragments
0EA8E C9 04                         CMP #$4
0EA90 90 08                         BCC ++
0EA92 A9 00                         LDA #$0
0EA94 8D F8 76                      STA MushroomFragments
0EA97 20 ED EA                      JSR Normal_Mushroom_BEH
0EA9A 20 21 EB                  ++  JSR RemoveFromPlayfield
0EA9D 20 16 EB                      JSR PlayMushGet
0EAA0 60                            RTS
0EAA1                           
0EAA1                           ; $00 Mario
0EAA1                           ; $01 Princess
0EAA1                           ; $02 Toad
0EAA1                           ; $03 Luigi
0EAA1                           ; however on screen
0EAA1                           ; $00 Mario
0EAA1                           ; $03 Luigi
0EAA1                           ; $02 Toad
0EAA1                           ; $01 Princess
0EAA1                           ;CharLookupTable:
0EAA1                           ;	.db $01 ; Mio 
0EAA1                           ;	.db $08 ; Pch 
0EAA1                           ;	.db $04 ; Tod 
0EAA1                           ;	.db $02 ; Lug 
0EAA1                           ;ENDIF
0EAA1                           CustomBeh_UnlockM:
0EAA1 A9 0E                         LDA #$0F ^ #%0001
0EAA3 A2 00                         LDX #0
0EAA5 4C BD EA                      JMP CustomBeh_Unlock
0EAA8                           CustomBeh_UnlockP:
0EAA8 A9 07                         LDA #$0F ^ #%1000
0EAAA A2 01                         LDX #1
0EAAC 4C BD EA                      JMP CustomBeh_Unlock
0EAAF                           CustomBeh_UnlockT:
0EAAF A9 0B                         LDA #$0F ^ #%0100 ; their respective slot
0EAB1 A2 02                         LDX #2
0EAB3 4C BD EA                      JMP CustomBeh_Unlock
0EAB6                           CustomBeh_UnlockL:
0EAB6 A9 0D                         LDA #$0F ^ #%0010
0EAB8 A2 03                         LDX #3
0EABA 4C BD EA                      JMP CustomBeh_Unlock
0EABD                           
0EABD                           CustomBeh_Unlock:
0EABD 2D E0 7D                      AND CharacterLock_Variable
0EAC0 8D E0 7D                      STA CharacterLock_Variable
0EAC3 AD EE EE                      LDA IndependentLives
0EAC6 F0 0E                         BEQ +
0EAC8 AD 29 DC                      LDA ContinueGame + 1 ;; lives
0EACB DD F8 73                      CMP PlayerIndependentLives, X
0EACE 90 11                         BCC ++
0EAD0 9D F8 73                      STA PlayerIndependentLives, X
0EAD3 4C E1 EA                      JMP ++
0EAD6 AD 29 DC                  +   LDA ContinueGame + 1 ;; lives
0EAD9 DD F8 73                      CMP PlayerIndependentLives, X
0EADC 90 03                         BCC ++
0EADE 9D F8 73                      STA PlayerIndependentLives, X
0EAE1                           ++
0EAE1 AD 09 EF                      LDA RescueCondition
0EAE4 D0 03                         BNE +++
0EAE6 20 21 EB                      JSR RemoveFromPlayfield
0EAE9                           +++
0EAE9 20 16 EB                      JSR PlayMushGet
0EAEC 60                            RTS
0EAED                           
0EAED                           Normal_Mushroom_BEH:
0EAED AD C3 04                      LDA PlayerMaxHealth
0EAF0 30 1E                         BMI ++
0EAF2 EE C3 04                  	INC PlayerMaxHealth
0EAF5 EE E1 73                      INC Level_Count_MushCount
0EAF8 20 21 EB                      JSR RemoveFromPlayfield
0EAFB AD C3 04                      LDA PlayerMaxHealth
0EAFE CD ED EE                      CMP MaxedHealth
0EB01 90 06                         BCC + 
0EB03 AD ED EE                      LDA MaxedHealth
0EB06 8D C3 04                      STA PlayerMaxHealth
0EB09 20 C3 F4                  +   JSR RestorePlayerToFullHealth
0EB0C 20 16 EB                      JSR PlayMushGet
0EB0F 60                            RTS
0EB10                           ++
0EB10 A9 1F                         LDA #$1F
0EB12 8D C2 04                      STA PlayerHealth
0EB15 60                            RTS
0EB16                           
0EB16                           PlayMushGet:
0EB16 A9 01                     	LDA #Music2_MushroomGetJingle
0EB18 8D 03 06                  	STA MusicQueue2
0EB1B A9 00                     	LDA #0
0EB1D 8D 02 06                  	STA SoundEffectQueue1
0EB20 60                            RTS
0EB21                           
0EB21                           RemoveFromPlayfield:
0EB21 A4 12                         LDY byte_RAM_12
0EB23 B6 79                         LDX EnemyVariable, Y ;; make this less weird
0EB25 E0 02                         CPX #$2
0EB27 B0 06                         BCS ++
0EB29 20 1F F1                      JSR GetMushFlag_Bitmask
0EB2C 20 83 F1                      JSR ApplyFlagLevel 
0EB2F 60                        ++  RTS
0EB30                           
0EB30                           
0EB30                           ShiftBit:
0EB30 8A                            TXA
0EB31 A8                            TAY
0EB32 A9 01                         LDA #1
0EB34 C0 01                     -   CPY #1
0EB36 F0 05                         BEQ +
0EB38 0A                            ASL
0EB39 88                            DEY
0EB3A 4C 34 EB                      JMP -
0EB3D 60                        +   RTS
0EB3E                           
0EB3E                           CustomBeh_Flag:
0EB3E 20 30 EB                      JSR ShiftBit
0EB41 AA                            TAX
0EB42 20 6C F1                      JSR ApplyFlagPlayer
0EB45 20 21 EB                      JSR RemoveFromPlayfield
0EB48 60                            RTS
0EB49                           
0EB49                           CustomBeh_Flag2:
0EB49 8A                            TXA
0EB4A 29 07                         AND #%111
0EB4C AA                            TAX
0EB4D 20 30 EB                      JSR ShiftBit
0EB50 AA                            TAX
0EB51 20 66 F1                      JSR ApplyFlagPlayer2
0EB54 20 21 EB                      JSR RemoveFromPlayfield
0EB57 60                            RTS
0EB58                           
0EB58                           JumpAttack:
0EB58 A5 46                         LDA PlayerYVelocity
0EB5A 30 5E                         BMI +
0EB5C C9 10                         CMP #$10
0EB5E 90 5A                         BCC +
0EB60 20 B9 F1                      JSR LoadFlagPlayer3
0EB63 A4 8F                         LDY CurrentCharacter
0EB65 B1 C5                         LDA (byte_RAM_C5), Y
0EB67 29 10                         AND #CustomBitFlag_BounceAll
0EB69 D0 2D                         BNE +ok
0EB6B B1 C5                         LDA (byte_RAM_C5), Y
0EB6D 29 08                         AND #CustomBitFlag_BounceJump
0EB6F F0 09                         BEQ +o
0EB71 A5 C7                         LDA PlayerAnimationFrame
0EB73 C9 06                         CMP #SpriteAnimation_Jumping
0EB75 F0 21                         BEQ +ok
0EB77 4C BA EB                      JMP +
0EB7A                           +o
0EB7A B1 C5                         LDA (byte_RAM_C5), Y
0EB7C 29 20                         AND #CustomBitFlag_GroundPound
0EB7E F0 15                         BEQ +o
0EB80 A5 F7                         LDA Player1JoypadHeld
0EB82 29 04                         AND #ControllerInput_Down
0EB84 F0 34                         BEQ +
0EB86 AD F7 76                      LDA CrushTimer
0EB89 C9 08                         CMP #$08
0EB8B B0 0B                         BCS +ok
0EB8D A9 00                         LDA #$0
0EB8F 8D F7 76                      STA CrushTimer
0EB92 4C BA EB                      JMP +
0EB95                           +o
0EB95 4C BA EB                      JMP +
0EB98                           +ok
0EB98 A9 00                         LDA #$0
0EB9A 8D F7 76                      STA CrushTimer
0EB9D A5 F7                         LDA Player1JoypadHeld
0EB9F 29 80                         AND #ControllerInput_A
0EBA1 F0 06                         BEQ ++
0EBA3 A9 A0                         LDA #$A0
0EBA5 85 46                         STA PlayerYVelocity
0EBA7 D0 04                         BNE +++
0EBA9 A9 C0                     ++  LDA #$C0
0EBAB 85 46                         STA PlayerYVelocity
0EBAD A6 12                     +++ LDX byte_RAM_12
0EBAF E8                            INX
0EBB0 A0 14                         LDY #$14
0EBB2 20 8B BB                      JSR DamageEnemy_NoProjectile
0EBB5 A6 ED                     	LDX byte_RAM_ED
0EBB7 68                            PLA
0EBB8 68                            PLA
0EBB9 60                            RTS
0EBBA                           +
0EBBA 60                            RTS
0EBBB                           
0EBBB                           AwardHealth:
0EBBB 48                            PHA ;; award one extra health to a full stack, but only if we aren't farming
0EBBC CD F1 76                      CMP ProjectileType
0EBBF F0 35                         BEQ +o
0EBC1 A9 00                         LDA #$0
0EBC3 8D F6 06                      STA PlayerCurrentSize
0EBC6 A9 06                     	LDA #$06
0EBC8 85 82                     	STA PlayerStateTimer
0EBCA A9 08                     	LDA #PlayerState_ChangingSize
0EBCC 85 50                     	STA PlayerState
0EBCE AD C2 04                  	LDA PlayerHealth
0EBD1 C9 FF                         CMP #$FF
0EBD3 F0 26                         BEQ +
0EBD5 EE C3 04                      INC PlayerMaxHealth
0EBD8 EE C3 04                      INC PlayerMaxHealth
0EBDB 4A                            LSR
0EBDC 4A                            LSR
0EBDD 4A                            LSR
0EBDE 4A                            LSR
0EBDF CD C3 04                      CMP PlayerMaxHealth
0EBE2 B0 09                         BCS ++
0EBE4 AD C2 04                      LDA PlayerHealth
0EBE7 18                        	CLC
0EBE8 69 10                     	ADC #$10
0EBEA 8D C2 04                      STA PlayerHealth
0EBED CE C3 04                  ++  DEC PlayerMaxHealth
0EBF0 CE C3 04                      DEC PlayerMaxHealth
0EBF3 4C FB EB                      JMP +
0EBF6 A9 04                     +o  LDA #SoundEffect1_CherryGet
0EBF8 8D 02 06                  	STA SoundEffectQueue1
0EBFB 68                        +   PLA
0EBFC 60                            RTS
0EBFD                           
0EBFD                           CustomBeh_Fireball:
0EBFD A9 01                         LDA #$1
0EBFF 20 BB EB                      JSR AwardHealth
0EC02 8D F1 76                      STA ProjectileType
0EC05 A2 00                     --  LDX #0
0EC07 20 AC EC                      JSR RptPaletteCustom
0EC0A 60                            RTS
0EC0B                           
0EC0B                           CustomBeh_Egg:
0EC0B A9 02                         LDA #$2
0EC0D 20 BB EB                      JSR AwardHealth
0EC10 8D F1 76                      STA ProjectileType
0EC13 A2 08                     -   LDX #8
0EC15 20 AC EC                      JSR RptPaletteCustom
0EC18 60                            RTS
0EC19                           
0EC19                           CustomBeh_Bomb:
0EC19 A9 03                         LDA #$3
0EC1B 20 BB EB                      JSR AwardHealth
0EC1E 8D F1 76                      STA ProjectileType
0EC21 4C 13 EC                      JMP -
0EC24                           
0EC24                           CustomBeh_Phanto:
0EC24 A9 04                         LDA #$4
0EC26 20 BB EB                      JSR AwardHealth
0EC29 8D F1 76                      STA ProjectileType
0EC2C 4C 13 EC                      JMP -
0EC2F                           
0EC2F                           CustomBeh_Fry:
0EC2F A9 05                         LDA #$5
0EC31 20 BB EB                      JSR AwardHealth
0EC34 8D F1 76                      STA ProjectileType
0EC37 4C 05 EC                      JMP --
0EC3A                           
0EC3A                           CustomBeh_Hammer:
0EC3A A9 09                         LDA #$9
0EC3C 20 BB EB                      JSR AwardHealth
0EC3F 8D F1 76                      STA ProjectileType
0EC42 4C 05 EC                      JMP --
0EC45                           
0EC45                           CustomBeh_Freeze:
0EC45 A9 0D                         LDA #$D
0EC47 20 BB EB                      JSR AwardHealth
0EC4A 8D F1 76                      STA ProjectileType
0EC4D 4C 05 EC                      JMP --
0EC50                           
0EC50                           
0EC50                           CustomCopyChar:
0EC50 A9 05                           LDA     #PRGBank_A_B
0EC52 20 FA FD                        JSR     ChangeMappedPRGBank
0EC55                           CharSel:
0EC55 A5 8F                           LDA     CurrentCharacter
0EC57 8D 04 04                        STA PreviousCharacter
0EC5A AA                              TAX
0EC5B BC C9 83                        LDY     StatOffsets,X
0EC5E A2 00                           LDX     #0
0EC60                           
0EC60                           
0EC60                           RptStats:
0EC60 B9 CD 83                        LDA     MarioStats,Y
0EC63 9D 46 05                        STA     PickupSpeedAnimation,X
0EC66 C8                              INY
0EC67 E8                              INX
0EC68 E0 17                           CPX     #$17
0EC6A 90 F4                           BCC     RptStats
0EC6C                           GetCharBit:
0EC6C A5 8F                           LDA     CurrentCharacter
0EC6E 0A                              ASL     A
0EC6F 0A                              ASL     A
0EC70 AA                              TAX
0EC71 20 C4 EC                        JSR     RptPalette
0EC74                           
0EC74                           EndCharacterSwap:
0EC74 A9 01                           LDA     #PRGBank_2_3
0EC76 20 FA FD                        JSR     ChangeMappedPRGBank
0EC79                               ; load carry offsets
0EC79                           	; Copy the character-specific FINAL carrying heights into memory
0EC79 A4 8F                     	LDY CurrentCharacter
0EC7B B9 00 80                  	LDA CarryYOffsetBigLo, Y
0EC7E 8D 00 7F                  	STA ItemCarryYOffsetsRAM
0EC81 B9 08 80                  	LDA CarryYOffsetSmallLo, Y
0EC84 8D 07 7F                  	STA ItemCarryYOffsetsRAM + $07
0EC87 B9 04 80                  	LDA CarryYOffsetBigHi, Y
0EC8A 8D 0E 7F                  	STA ItemCarryYOffsetsRAM + $0E
0EC8D B9 0C 80                  	LDA CarryYOffsetSmallHi, Y
0EC90 8D 15 7F                  	STA ItemCarryYOffsetsRAM + $15
0EC93 A9 00                           LDA     #PRGBank_0_1
0EC95 20 FA FD                        JSR     ChangeMappedPRGBank
0EC98                           	; update chr for character
0EC98 20 48 FD                  	JSR LoadCharacterCHRBanks
0EC9B 60                            RTS
0EC9C                           
0EC9C                           CustomPalette:
0EC9C 0F 01 16 27               	.db $0F,$01,$16,$27
0ECA0 0F 06 25 36               	.db $0F,$06,$25,$36
0ECA4 0F 01 30 27               	.db $0F,$01,$30,$27
0ECA8 0F 01 2A 36               	.db $0F,$01,$2A,$36
0ECAC                           
0ECAC                           RptPaletteCustom:
0ECAC 60                              RTS
0ECAD A0 00                           LDY #0
0ECAF                             -
0ECAF BD 9C EC                        LDA     CustomPalette,X
0ECB2 99 37 06                        STA     RestorePlayerPalette0,Y
0ECB5 E8                              INX
0ECB6 C8                              INY
0ECB7 C0 04                           CPY     #4
0ECB9 D0 F4                           BNE     -
0ECBB AD C6 04                        LDA SkyFlashTimer
0ECBE D0 03                           BNE +
0ECC0 EE C6 04                        INC     SkyFlashTimer
0ECC3                           +
0ECC3 60                              RTS
0ECC4                           
0ECC4                           RptPalette:
0ECC4 A0 00                           LDY #0
0ECC6                             -
0ECC6 BD 29 84                        LDA     MarioPalette,X
0ECC9 99 37 06                        STA     RestorePlayerPalette0,Y
0ECCC E8                              INX
0ECCD C8                              INY
0ECCE C0 04                           CPY     #4
0ECD0 D0 F4                           BNE     -
0ECD2 AD C6 04                        LDA SkyFlashTimer
0ECD5 D0 03                           BNE +
0ECD7 EE C6 04                        INC     SkyFlashTimer
0ECDA                           +
0ECDA 60                              RTS
0ECDB                           
0ECDB                           IFDEF PLAYER_STUFF
0ECDB                           ;; appearances
0ECDB                           ProcessCustomPowerup_WithRemove:
0ECDB B5 79                         LDA EnemyVariable, X
0ECDD C9 FF                         CMP #$FF
0ECDF F0 10                         BEQ +
0ECE1 AA                            TAX
0ECE2 20 1F F1                      JSR GetMushFlag_Bitmask
0ECE5 20 4E F1                      JSR ChkFlagLevel
0ECE8 D0 07                         BNE +
0ECEA A6 12                         LDX byte_RAM_12
0ECEC A9 00                         LDA #$0
0ECEE 95 51                         STA EnemyState, X
0ECF0 60                            RTS
0ECF1 A6 12                     +   LDX byte_RAM_12
0ECF3                           ProcessCustomPowerup: ;; setup enum for extra options on compile
0ECF3 BD 20 76                      LDA MushroomEffect, X
0ECF6                           ProcessCustomPowerup_NoLookup: ;; setup enum for extra options on compile
0ECF6 AA                            TAX
0ECF7 20 A6 D9                  	JSR JumpToTableAfterJump
0ECFA                           
0ECFA BD ED                     	.dw Normal_Mushroom
0ECFC 49 EE                     	.dw CustomObject_PowerItem 
0ECFE 49 EE                     	.dw CustomObject_PowerItem 
0ED00 49 EE                     	.dw CustomObject_PowerItem 
0ED02 49 EE                     	.dw CustomObject_PowerItem 
0ED04 49 EE                     	.dw CustomObject_PowerItem 
0ED06 49 EE                     	.dw CustomObject_PowerItem 
0ED08 49 EE                     	.dw CustomObject_PowerItem 
0ED0A 49 EE                     	.dw CustomObject_PowerItem 
0ED0C 49 EE                     	.dw CustomObject_PowerItem ;; set 2 
0ED0E 49 EE                     	.dw CustomObject_PowerItem 
0ED10 49 EE                     	.dw CustomObject_PowerItem 
0ED12 49 EE                     	.dw CustomObject_PowerItem 
0ED14 49 EE                     	.dw CustomObject_PowerItem 
0ED16 49 EE                     	.dw CustomObject_PowerItem ; ocarina?
0ED18 BD ED                     	.dw Normal_Mushroom 
0ED1A BD ED                     	.dw Normal_Mushroom 
0ED1C 51 EE                     	.dw CustomObject_PowerItem_NoChrSwitch ;; fire
0ED1E 51 EE                     	.dw CustomObject_PowerItem_NoChrSwitch ;; egg
0ED20 51 EE                     	.dw CustomObject_PowerItem_NoChrSwitch ;; bomb
0ED22 51 EE                     	.dw CustomObject_PowerItem_NoChrSwitch ;; phanto
0ED24 51 EE                     	.dw CustomObject_PowerItem_NoChrSwitch ;; fry
0ED26 03 EE                     	.dw CustomObject_MushHalf ;; hammer
0ED28 51 EE                     	.dw CustomObject_PowerItem_NoChrSwitch ;; freeze
0ED2A 49 EE                     	.dw CustomObject_PowerItem ;; Continue
0ED2C FB ED                     	.dw CustomObject_RescueHalf ;; unlock m
0ED2E FB ED                     	.dw CustomObject_RescueHalf ;; unlock l
0ED30 FB ED                     	.dw CustomObject_RescueHalf ;; unlock t
0ED32 FB ED                     	.dw CustomObject_RescueHalf ;; unlock p
0ED34 03 EE                     	.dw CustomObject_MushHalf ;; mushhalf
0ED36 AF ED                     	.dw PReplaceItem_Persistent ; key
0ED38 A8 ED                     	.dw PReplaceItem ; coin (one time coin)
0ED3A AF ED                     	.dw PReplaceItem_Persistent ; shell 
0ED3C A8 ED                     	.dw PReplaceItem ; life (one time life)
0ED3E AF ED                     	.dw PReplaceItem_Persistent ; star
0ED40 AF ED                     	.dw PReplaceItem_Persistent ; stop
0ED42 AF ED                     	.dw PReplaceItem_Persistent ; bomb
0ED44 AF ED                     	.dw PReplaceItem_Persistent ; crystal (stays persistent, null on spawn anyway)
0ED46                           
0ED46                           
0ED46                           EnemyCustom_Attributes:
0ED46 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $3F Enemy_Mushroom
0ED47 01                        	.db ObjAttrib_Palette1 ; $3F Enemy_Mushroom
0ED48 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored; $3F Enemy_Mushroom
0ED49 01                        	.db ObjAttrib_Palette1 ; $3F Enemy_Mushroom
0ED4A 01                        	.db ObjAttrib_Palette1 ; $3F Enemy_Mushroom
0ED4B 19                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing | ObjAttrib_Mirrored ; $3F Enemy_Mushroom
0ED4C 19                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing | ObjAttrib_Mirrored ; $3F Enemy_Mushroom
0ED4D 19                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing | ObjAttrib_Mirrored ; $3F Enemy_Mushroom
0ED4E 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $3F Enemy_Mushroom
0ED4F                           
0ED4F 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $3F Enemy_Mushroom  ; SET 2
0ED50 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $3F Enemy_Mushroom
0ED51 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $3F Enemy_Mushroom
0ED52 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing  ; $3F Enemy_Mushroom
0ED53 19                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing | ObjAttrib_Mirrored ; $3F Enemy_Mushroom
0ED54 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing  ; $3F Enemy_Mushroom
0ED55 1A                        	.db ObjAttrib_Palette2 | ObjAttrib_FrontFacing | ObjAttrib_Mirrored ; $3F Enemy_Mushroom
0ED56 1A                        	.db ObjAttrib_Palette2 | ObjAttrib_FrontFacing | ObjAttrib_Mirrored ; $3F Enemy_Mushroom
0ED57                           
0ED57 19                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing | ObjAttrib_Mirrored ; $3F Enemy_Mushroom
0ED58 0A                        	.db ObjAttrib_Palette2 | ObjAttrib_FrontFacing  ; $3F Enemy_Mushroom
0ED59 1B                        	.db ObjAttrib_Palette3 | ObjAttrib_FrontFacing | ObjAttrib_Mirrored ; $3F Enemy_Mushroom
0ED5A 19                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing | ObjAttrib_Mirrored ; $3F Enemy_Mushroom
0ED5B 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $3F Enemy_Mushroom
0ED5C 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing  ; $3F Enemy_Mushroom
0ED5D 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing  ; $3F Enemy_Mushroom
0ED5E                           
0ED5E 19                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing | ObjAttrib_Mirrored ;; cont
0ED5F 0B                        	.db ObjAttrib_Palette3 | ObjAttrib_FrontFacing ; $3F Enemy_Mushroom ;; rescue
0ED60 0B                        	.db ObjAttrib_Palette3 | ObjAttrib_FrontFacing ; $3F Enemy_Mushroom
0ED61 0B                        	.db ObjAttrib_Palette3 | ObjAttrib_FrontFacing ; $3F Enemy_Mushroom
0ED62 0B                        	.db ObjAttrib_Palette3 | ObjAttrib_FrontFacing ; $3F Enemy_Mushroom
0ED63 0A                        	.db ObjAttrib_Palette2 | ObjAttrib_FrontFacing ; $3F Enemy_Mushroom
0ED64 3D                        	.db #Enemy_Key
0ED65 36                        	.db #Enemy_Coin
0ED66 35                        	.db #Enemy_Shell
0ED67 40                        	.db #Enemy_Mushroom1up
0ED68 45                        	.db #Enemy_Starman
0ED69 46                        	.db #Enemy_Stopwatch
0ED6A 03                        	.db #Enemy_ShyguyPink
0ED6B 44                        	.db #Enemy_CrystalBall
0ED6C                           
0ED6C                           EnemyCustom_TableSprites:
0ED6C A5 A5                         .db $a5, $a5
0ED6E                           
0ED6E E0 E2                         .db $e0, $e2 
0ED70 F2 F2                         .db $f2, $f2
0ED72 F8 FA                         .db $f8, $fa
0ED74 C8 CA                         .db $c8, $ca
0ED76 CC CC                         .db $cc, $cc
0ED78 A8 A8                         .db $a8, $a8
0ED7A A6 A6                         .db $a6, $a6
0ED7C EC EE                         .db $ec, $ee
0ED7E                           
0ED7E D8 DA                         .db $d8, $da
0ED80 D4 D6                         .db $d4, $d6
0ED82 D0 D2                         .db $d0, $d2
0ED84 C4 C6                         .db $c4, $c6
0ED86 FE FE                         .db $fe, $fe
0ED88 F4 F6                         .db $f4, $f6
0ED8A A5 A5                         .db $a5, $a5
0ED8C A5 A5                         .db $a5, $a5
0ED8E                           
0ED8E A4 A4                         .db $a4, $a4
0ED90 B5 B9                         .db $b5, $b9
0ED92 DB DB                         .db $db, $db
0ED94 ED ED                         .db $ed, $ed
0ED96 9C 9C                         .db $9c, $9c
0ED98 FB F3                         .db $fb, $f3
0ED9A A4 3F                         .db $a4, $3f
0ED9C                           
0ED9C FC FC                         .db $fc, $fc
0ED9E E4 FB                         .db $e4, $fb 
0EDA0 E6 FB                         .db $e6, $fb 
0EDA2 E8 FB                         .db $e8, $fb 
0EDA4 EA FB                         .db $ea, $fb 
0EDA6 BA FB                         .db $ba, $fb
0EDA8                               ;; leave objects at end, empty data
0EDA8                           
0EDA8                           
0EDA8                           PReplaceItem:
0EDA8 20 AF ED                      JSR PReplaceItem_Persistent
0EDAB 20 21 EB                      JSR RemoveFromPlayfield
0EDAE 60                            RTS
0EDAF                           PReplaceItem_Persistent:
0EDAF                               ;; autoremove from playfield?
0EDAF                               ;; turn below into F helper, or load in bank for enemy attribs/init
0EDAF BD 46 ED                      LDA EnemyCustom_Attributes, X
0EDB2 A6 12                         LDX byte_RAM_12
0EDB4 95 90                     	STA ObjectType, X
0EDB6                           IFDEF DISABLED
0EDB6                               CMP #Enemy_Mushroom1up
0EDB6                               BNE +
0EDB6                               LDX #CustomBitFlag_1up 
0EDB6                               JSR ApplyFlagLevel
0EDB6                               BEQ ++
0EDB6                               INC Level_Count_1ups
0EDB6                               INC Mushroom1upPulled 
0EDB6                               BNE +
0EDB6                           ++  LDX byte_RAM_12
0EDB6                               LDA #$0
0EDB6                               STA EnemyState, X
0EDB6                               RTS
0EDB6                           +   LDX byte_RAM_12
0EDB6                           ENDIF
0EDB6 B4 90                         LDY ObjectType, X
0EDB8 20 C9 ED                      JSR Normal_Mushroom_Spawn
0EDBB 60                            RTS
0EDBC                           
0EDBC                           PDoNothing:
0EDBC 60                            RTS
0EDBD                           
0EDBD                           Normal_Mushroom:
0EDBD 8A                            TXA
0EDBE 48                            PHA
0EDBF A0 3F                     	LDY #Enemy_Mushroom
0EDC1 A6 12                         LDX byte_RAM_12
0EDC3 20 C9 ED                      JSR Normal_Mushroom_Spawn
0EDC6 68                            PLA
0EDC7 AA                            TAX
0EDC8 60                            RTS
0EDC9                               
0EDC9                           Normal_Mushroom_Spawn:
0EDC9 B9 19 F8                  	LDA ObjectAttributeTable, Y
0EDCC 29 7F                     	AND #$7F
0EDCE 95 65                     	STA ObjectAttributes, X
0EDD0 B9 60 F8                  	LDA EnemyArray_46E_Data, Y
0EDD3 9D 6E 04                  	STA EnemyArray_46E, X
0EDD6 B9 EE F8                  	LDA EnemyArray_489_Data, Y
0EDD9 9D 89 04                  	STA EnemyArray_489, X
0EDDC B9 A7 F8                  	LDA EnemyArray_492_Data, Y
0EDDF 9D 92 04                  	STA EnemyArray_492, X
0EDE2 A9 FF                     	LDA #$FF
0EDE4 9D 41 04                  	STA unk_RAM_441, X
0EDE7 A5 12                         LDA byte_RAM_12
0EDE9 0A                            ASL
0EDEA 0A                            ASL
0EDEB A8                            TAY
0EDEC A2 00                         LDX #0
0EDEE BD 6C ED                      LDA EnemyCustom_TableSprites, X
0EDF1 99 00 77                      STA SpriteTableCustom1, Y
0EDF4 BD 6D ED                      LDA EnemyCustom_TableSprites + 1, X
0EDF7 99 01 77                      STA SpriteTableCustom1 + 1, Y
0EDFA 60                            RTS
0EDFB                           
0EDFB                           CustomObject_RescueHalf:
0EDFB A9 32                         LDA #$32
0EDFD 8D FC 06                      STA SpriteCHR4
0EE00 20 1F EE                      JSR CustomDestroyAll
0EE03                           CustomObject_MushHalf:
0EE03 20 51 EE                      JSR CustomObject_PowerItem_NoChrSwitch
0EE06 A6 12                         LDX byte_RAM_12
0EE08 B5 29                         LDA ObjectXLo, X
0EE0A AD 28 06                      LDA InSubspaceOrJar
0EE0D F0 08                         BEQ +
0EE0F B5 29                         LDA ObjectXLo, X
0EE11 38                            SEC
0EE12 E9 04                         SBC #$4
0EE14 4C 1C EE                      JMP ++
0EE17                           +
0EE17 B5 29                         LDA ObjectXLo, X
0EE19 18                            CLC
0EE1A 69 04                         ADC #$4
0EE1C                           ++
0EE1C 95 29                         STA ObjectXLo, X
0EE1E 60                            RTS
0EE1F                           
0EE1F                           CustomDestroyAll:
0EE1F A9 01                         LDA #PRGBank_2_3
0EE21 20 FD FD                      JSR ChangeMappedPRGBankWithoutSaving
0EE24 A5 0E                         LDA byte_RAM_E
0EE26 48                            PHA
0EE27 20 58 9B                      JSR DestroyOnscreenEnemies
0EE2A 68                            PLA
0EE2B 85 0E                         STA byte_RAM_E
0EE2D AD F2 06                      LDA MMC3PRGBankTemp
0EE30 20 FA FD                      JSR ChangeMappedPRGBank
0EE33 BD 20 76                      LDA MushroomEffect, X
0EE36 AA                            TAX
0EE37 60                            RTS
0EE38                           
0EE38                           CustomReplaceTile:
0EE38 48                            PHA
0EE39 A9 00                         LDA #PRGBank_0_1
0EE3B 20 FD FD                      JSR ChangeMappedPRGBankWithoutSaving
0EE3E 68                            PLA
0EE3F 20 52 97                      JSR ReplaceTile_Bank0
0EE42 AD F2 06                      LDA MMC3PRGBankTemp
0EE45 20 FA FD                      JSR ChangeMappedPRGBank
0EE48 60                            RTS
0EE49                           
0EE49                           CustomObject_PowerItem:
0EE49 A9 32                         LDA #$32
0EE4B 8D FC 06                      STA SpriteCHR4
0EE4E 20 1F EE                      JSR CustomDestroyAll
0EE51                           CustomObject_PowerItem_NoChrSwitch:
0EE51 20 BD ED                      JSR Normal_Mushroom
0EE54 A4 12                         LDY byte_RAM_12
0EE56 BD 46 ED                      LDA EnemyCustom_Attributes, X
0EE59 99 65 00                      STA ObjectAttributes, Y
0EE5C A9 05                         LDA #$5
0EE5E 99 92 04                      STA EnemyArray_492, Y
0EE61 A9 02                         LDA #$2
0EE63 99 89 04                      STA EnemyArray_489, Y
0EE66 A5 12                         LDA byte_RAM_12
0EE68 0A                            ASL
0EE69 0A                            ASL
0EE6A A8                            TAY
0EE6B 8A                            TXA
0EE6C 0A                            ASL
0EE6D AA                            TAX
0EE6E BD 6C ED                      LDA EnemyCustom_TableSprites, X
0EE71 99 00 77                      STA SpriteTableCustom1, Y
0EE74 BD 6D ED                      LDA EnemyCustom_TableSprites + 1, X
0EE77 99 01 77                      STA SpriteTableCustom1 + 1, Y
0EE7A 60                            RTS
0EE7B                           ENDIF
0EE7B                           ENDIF
0EE7B                           
0EE7B                           IFDEF HOT_SPOTS: 
0EE7B                               .include "src/extras/hot-spots.asm"
0EE7B                           
0EE7B                           Hot_Spots = $76A0
0EE7B                           Hot_Spot_Slot2 = $76A5
0EE7B                           RecoverPlayerPos = $76D0
0EE7B                           HotSpotMidvar = $76F9
0EE7B                           Hot_Spot_Midvar = $76F9
0EE7B                           HotSpotMidvar2 = $76FA
0EE7B                           HotSpotMidvar3 = $76FB
0EE7B                           
0EE7B                           
0EE7B                           ; consider making this a lot simpler by referring to tile pointer instead of page/xy
0EE7B                           ; issues with finesse of pixel/tile division might come into obvious play
0EE7B                           ; also consider: don't overlap with certain functions that aren't tile related (block fizzle)
0EE7B                           HotSpotLookup:
0EE7B E8                            INX
0EE7C A0 00                         LDY #$00 
0EE7E 4C 86 EE                      JMP +
0EE81 C8                        -   INY
0EE82 C8                        --  INY
0EE83 C8                            INY
0EE84 C8                            INY
0EE85 C8                            INY
0EE86 C0 2C                     +   CPY #$2C
0EE88 B0 30                         BCS HotSpotExit
0EE8A A5 EC                         LDA IsHorizontalLevel 
0EE8C F0 0A                         BEQ +
0EE8E B9 A0 76                      LDA Hot_Spots, Y
0EE91 D5 14                         CMP PlayerXHi, X
0EE93 F0 0D                         BEQ HotSpotPageSuccess
0EE95 4C 81 EE                      JMP -
0EE98 B9 A0 76                  +   LDA Hot_Spots, Y
0EE9B D5 1E                         CMP PlayerYHi, X
0EE9D F0 03                         BEQ HotSpotPageSuccess
0EE9F 4C 81 EE                      JMP -
0EEA2                           HotSpotPageSuccess:
0EEA2 C8                            INY
0EEA3 B5 28                         LDA PlayerXLo, X
0EEA5 4A                            LSR
0EEA6 4A                            LSR
0EEA7 4A                            LSR
0EEA8 4A                            LSR
0EEA9 18                            CLC
0EEAA 75 32                         ADC PlayerYLo, X
0EEAC D9 A0 76                      CMP Hot_Spots, Y
0EEAF F0 03                         BEQ HotSpotLocSuccess
0EEB1 4C 82 EE                      JMP --
0EEB4                           HotSpotLocSuccess:
0EEB4 C8                            INY
0EEB5 B9 A0 76                      LDA Hot_Spots, Y
0EEB8                           IFDEF PLAYER_STUFF_OLD
0EEB8                               PHA
0EEB8                               CPX #$0
0EEB8                               BEQ +
0EEB8                               CMP #Enemy_Mushroom
0EEB8                               BNE +
0EEB8                               TXA
0EEB8                               PHA
0EEB8                               INY
0EEB8                               LDA Hot_Spots, Y
0EEB8                               STA 
0EEB8                               DEX
0EEB8                               STX byte_RAM_12
0EEB8                               INX
0EEB8                               LDY #$2
0EEB8                               STY EnemyVariable, X
0EEB8                               JSR ProcessCustomPowerup
0EEB8                               PLA
0EEB8                               TAX
0EEB8                           +   PLA
0EEB8                           ENDIF
0EEB8 CA                            DEX
0EEB9 60                            RTS
0EEBA                           HotSpotExit:
0EEBA A9 FF                         LDA #$FF
0EEBC CA                            DEX
0EEBD 60                            RTS
0EEBE                           
0EEBE                           ClearHotSpots:
0EEBE A0 2C                         LDY #$2C
0EEC0 A9 FF                         LDA #$FF
0EEC2 99 A0 76                  -	STA Hot_Spots, Y
0EEC5 88                            DEY
0EEC6 10 FA                         BPL -
0EEC8 60                            RTS
0EEC9                           ENDIF
0EEC9                           
0EEC9                           IFDEF FLAGSET
0EEC9                               .include "src/extras/flag-set.asm"
0EEC9                           ; Flag Set
0EEC9                           ; Takes PTR, 
0EEC9                           Level_Bit_Flags = $7300
0EEC9                           World_Bit_Flags = $73D2
0EEC9                           Level_Count_Discovery = $73E0
0EEC9                           Level_Count_MushCount = $73E1
0EEC9                           Level_Count_Coins = $73E2
0EEC9                           Level_Count_1ups = $73E3
0EEC9                           Level_Count_SubspaceVisits = $73E4
0EEC9                           Level_Count_Unlocks = $73E5
0EEC9                           Level_Count_BigKill = $73E6
0EEC9                           Level_Count_KillCnt = $73E6
0EEC9                           Level_Count_LivesLost = $73E7
0EEC9                           Level_Count_Crystals = $73E8
0EEC9                           Level_Count_Cherries = $73E9
0EEC9                           World_Count_Bosses = $73EF
0EEC9                           CurrentLevelAreaIndex = $73F0
0EEC9                           StatPrintOffset = $73F1
0EEC9                           StatPrintCurOffset = $73F2
0EEC9                           StatPrintDec = $73F3
0EEC9                           StatPrintDecRow = $73F4
0EEC9                           
0EEC9                           PlayerIndependentLives = $73F8
0EEC9                           PlayerIndependentMaxHealth = $73FC
0EEC9                           
0EEC9                           CustomBitFlag_Boss_Defeated = %00000010
0EEC9                           
0EEC9                           CustomBitFlag_Visited = %00000001
0EEC9                           CustomBitFlag_Mush1 = %00000010
0EEC9                           CustomBitFlag_Mush2 = %00000100
0EEC9                           CustomBitFlag_1up = %00001000
0EEC9                           CustomBitFlag_Sub1 = %00010000
0EEC9                           CustomBitFlag_Sub2 = %00100000
0EEC9                           CustomBitFlag_Key = %01000000
0EEC9                           CustomBitFlag_Crystal = %10000000
0EEC9                           
0EEC9                           CustomCharFlag_Shrinking = %00000001
0EEC9                           CustomCharFlag_Running = %00000010
0EEC9                           CustomCharFlag_Fluttering = %00000100
0EEC9                           CustomCharFlag_PeachWalk = %00001000
0EEC9                           CustomCharFlag_WeaponCherry = %00010000
0EEC9                           CustomCharFlag_StoreCherry = %00100000
0EEC9                           CustomCharFlag_AirControl = %01000000
0EEC9                           CustomCharFlag_WideSprite = %10000000
0EEC9                           
0EEC9                           CustomCharFlag_StandStill = %00000001
0EEC9                           
0EEC9                           DokiMode:
0EEC9 03                            .db %0011  ;; doki
0EECA 0B                            .db %1011  ;; doki
0EECB 03                            .db %0011  ;; doki
0EECC 07                            .db %0111  ;; doki
0EECD                           MoreCharacteristics:
0EECD 00                            .db %0 ;; doki
0EECE 00                            .db %0  ;; doki
0EECF 00                            .db %0  ;; doki
0EED0 00                            .db %0  ;; doki
0EED1                           IFDEF PLAYER_STUFF_EYE_OFFSET
0EED1                           EyeOffsetY:
0EED1                               .db $0  ;; doki
0EED1                               .db $0  ;; doki
0EED1                               .db $0  ;; doki
0EED1                               .db $0  ;; doki
0EED1                           EyeOffsetX:
0EED1                               .db $0  ;; doki
0EED1                               .db $0  ;; doki
0EED1                               .db $0  ;; doki
0EED1                               .db $0  ;; doki
0EED1                           ENDIF
0EED1                           HeightOffset:
0EED1 00                            .db $0  ;; doki
0EED2 00                            .db $0  ;; doki
0EED3 00                            .db $0  ;; doki
0EED4 00                            .db $0  ;; doki
0EED5                           HeightOffsetSmall:
0EED5 08                            .db $8  ;; doki
0EED6 08                            .db $8  ;; doki
0EED7 08                            .db $8  ;; doki
0EED8 08                            .db $8  ;; doki
0EED9                           HeldOffset:
0EED9 00                            .db $0
0EEDA 00                            .db $0
0EEDB 00                            .db $0
0EEDC 00                            .db $0
0EEDD 00                            .db $0
0EEDE 00                            .db $0
0EEDF 00                            .db $0
0EEE0 00                            .db $0
0EEE1                           AccelReduction:
0EEE1 00                            .db $0
0EEE2 00                            .db $0
0EEE3 00                            .db $0
0EEE4 00                            .db $0
0EEE5 00                            .db $0
0EEE6 00                            .db $0
0EEE7 00                            .db $0
0EEE8 00                            .db $0
0EEE9                           GBreaker:
0EEE9 00                            .db $0  ;; gbreak
0EEEA                           DebugSet:
0EEEA 01                            .db $1  ;; debug
0EEEB                           ResetHealth:
0EEEB 06                            .db $06  ;; reset health (after slots/boss)
0EEEC                           StartHealth:
0EEEC 08                            .db $08  ;; start health
0EEED                           MaxedHealth:
0EEED FF                            .db $ff  ;; maxed health
0EEEE                           IndependentLives:
0EEEE 00                            .db $0  ;; elimination mode
0EEEF                           IndependentPlayers:
0EEEF 00                            .db $0  ;; powerups per player
0EEF0                           CharSelectDeath:
0EEF0 00                            .db $0  ;; select death
0EEF1                           CharSelectAnytime:
0EEF1 01                            .db $1  ;; select death
0EEF2                           BossMushroom:
0EEF2 01                            .db $1  ;; select death
0EEF3                           StartingInventory:
0EEF3 00                            .db $0  ;; select death
0EEF4 00                            .db $0  ;; select death
0EEF5 00                            .db $0  ;; select death
0EEF6 00                            .db $0  ;; select death
0EEF7 00                            .db $0  ;; select death
0EEF8 00                            .db $0  ;; select death
0EEF9 00                            .db $0  ;; select death
0EEFA 00                            .db $0  ;; select death
0EEFB 00                            .db %0  ;; select death
0EEFC 00                            .db $0  ;; select death
0EEFD 00                            .db $0  ;; select death
0EEFE 00                            .db $0  ;; select death
0EEFF                           StartingProjectile:
0EEFF 00                            .db $0  ;; select death
0EF00 00                            .db $0  ;; select death
0EF01 00                            .db $0  ;; select death
0EF02 00                            .db $0  ;; select death
0EF03                           StartingHold:
0EF03 00                            .db $0  ;; select death
0EF04 00                            .db $0  ;; select death
0EF05 00                            .db $0  ;; select death
0EF06 00                            .db $0  ;; select death
0EF07                           CrystalCondition:
0EF07 00                            .db $0 ;; crystals
0EF08                           BossCondition:
0EF08 00                            .db $0  ;; bosses
0EF09                           RescueCondition:
0EF09 00                            .db $0  ;; ok
0EF0A                           WinLevel:
0EF0A FF                            .db $FF ;; bosses
0EF0B                           ChampionChance:
0EF0B 10                            .db $10
0EF0C                           
0EF0C                           TEXT_Health:
0EF0C E1 DE DA E5 ED E1 F8 F8..     .db $e1,$de,$da,$e5,$ed,$e1,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$d0
0EF1C                           TEXT_Extra_Lives:
0EF1C DE F1 ED EB DA FB E5 E2..     .db $de,$f1,$ed,$eb,$da,$fb,$e5,$e2,$ef,$de,$ec,$f8,$f8,$f8,$f8,$d0
0EF2C                           TEXT_Coins:
0EF2C DC E8 E2 E7 EC F8 F8 F8..     .db $dc,$e8,$e2,$e7,$ec,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$d0
0EF3C                           TEXT_Cherries:
0EF3C DC E1 DE EB EB F2 EC F8..     .db $dc,$e1,$de,$eb,$eb,$f2,$ec,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$d0
0EF4C                           TEXT_Crystals:
0EF4C DC EB F2 EC ED DA E5 EC..     .db $dc,$eb,$f2,$ec,$ed,$da,$e5,$ec,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$d0
0EF5C                           TEXT_Bosses:
0EF5C DB E8 EC EC DE EC F8 F8..     .db $db,$e8,$ec,$ec,$de,$ec,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$d0
0EF6C                           TEXT_Fragments:
0EF6C DF EB DA E0 E6 DE E7 ED..     .db $DF,$EB,$DA,$E0,$E6,$DE,$E7,$ED,$EC,$F8,$F8,$F8,$F8,$F8,$F8,$d0
0EF7C                           TEXT_Total_Rooms:
0EF7C ED E8 ED DA E5 FB EB E8..     .db $ed,$e8,$ed,$da,$e5,$fb,$eb,$e8,$e8,$e6,$ec,$f8,$f8,$f8,$f8,$d0
0EF8C                           TEXT_Continues:
0EF8C DC E8 E7 ED E2 E7 EE DE..     .db $dc,$e8,$e7,$ed,$e2,$e7,$ee,$de,$ec,$f8,$f8,$f8,$f8,$f8,$f8,$d0
0EF9C                           TEXT_Max_Health:
0EF9C E6 DA F1 FB E1 DE DA E5..     .db $e6,$da,$f1,$fb,$e1,$de,$da,$e5,$ed,$e1,$f8,$f8,$f8,$f8,$f8,$d0
0EFAC                           TEXT_Total_1ups:
0EFAC E6 DA F1 FB E5 E2 EF DE..     .db $e6,$da,$f1,$fb,$e5,$e2,$ef,$de,$ec,$f8,$f8,$f8,$f8,$f8,$f8,$d0
0EFBC                           TEXT_Murders:
0EFBC E6 EE EB DD DE EB EC F8..     .db $e6,$ee,$eb,$dd,$de,$eb,$ec,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$d0
0EFCC                           TEXT_Crystals2:
0EFCC DC EB F2 EC ED DA E5 EC..     .db $dc,$eb,$f2,$ec,$ed,$da,$e5,$ec,$f8,$dc,$f8,$f8,$f8,$f8,$f8,$d0
0EFDC                           TEXT_Bosses2:
0EFDC DB E8 EC EC DE EC F8 DC..     .db $db,$e8,$ec,$ec,$de,$ec,$f8,$dc,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$d0
0EFEC                           
0EFEC                           StatDrawMemory:
0EFEC C2 04                         .dw PlayerHealth
0EFEE ED 04                         .dw ExtraLives
0EFF0 2B 06                         .dw SlotMachineCoins
0EFF2 E9 73                         .dw Level_Count_Cherries
0EFF4 E8 73                         .dw Level_Count_Crystals
0EFF6 EF 73                         .dw World_Count_Bosses
0EFF8 F8 76                         .dw MushroomFragments
0EFFA E0 73                         .dw Level_Count_Discovery
0EFFC C5 05                         .dw Continues
0EFFE C3 04                         .dw PlayerMaxHealth
0F000 E3 73                         .dw Level_Count_1ups
0F002 E6 73                         .dw Level_Count_KillCnt
0F004 07 EF                         .dw CrystalCondition
0F006 08 EF                         .dw BossCondition
0F008                           
0F008                           InputPause_Stats:
0F008 A5 F7                     	LDA Player1JoypadHeld
0F00A 29 0C                     	AND #ControllerInput_Down | #ControllerInput_Up
0F00C F0 2C                         BEQ +
0F00E 29 04                         AND #ControllerInput_Down
0F010 F0 06                         BEQ +++
0F012 EE F1 73                      INC StatPrintOffset
0F015 EE F1 73                      INC StatPrintOffset
0F018 CE F1 73                  +++ DEC StatPrintOffset   
0F01B F0 16                         BEQ ++
0F01D 10 08                         BPL +++
0F01F A9 00                         LDA #0
0F021 8D F1 73                      STA StatPrintOffset
0F024 4C 33 F0                      JMP ++
0F027 AD F1 73                  +++ LDA StatPrintOffset
0F02A C9 09                         CMP #$9
0F02C 90 05                         BCC ++
0F02E A9 08                         LDA #$8
0F030 8D F1 73                      STA StatPrintOffset
0F033 A9 02                     ++  LDA #ScreenUpdateBuffer_RAM_55F
0F035 85 11                     	STA ScreenUpdateIndex
0F037 20 6B F0                      JSR Draw_Pause_Stats
0F03A 60                        +   RTS
0F03B                           
0F03B                           Draw_Pause_Stats_Palette:
0F03B A0 00                         LDY #0
0F03D A2 E1                         LDX #$E1
0F03F                           -
0F03F A9 27                         LDA #$27
0F041 99 5F 05                  	STA $55F, Y
0F044 C8                            INY
0F045 8A                            TXA
0F046 99 5F 05                  	STA $55F, Y
0F049 C8                            INY
0F04A A9 45                         LDA #$45
0F04C 99 5F 05                  	STA $55F, Y
0F04F C8                            INY
0F050 A9 AA                         LDA #%10101010
0F052 99 5F 05                  	STA $55F, Y
0F055 C8                            INY
0F056 8A                            TXA
0F057 18                            CLC
0F058 69 08                         ADC #$08
0F05A AA                            TAX
0F05B C9 F0                         CMP #$F0
0F05D 90 E0                         BCC -
0F05F A9 00                         LDA #0
0F061 99 5F 05                  	STA $55F, Y
0F064 A9 02                     	LDA #ScreenUpdateBuffer_RAM_55F
0F066 85 11                     	STA ScreenUpdateIndex
0F068 20 76 E4                      JSR WaitForNMI
0F06B                           
0F06B                           Draw_Pause_Stats: ;; needs some clear refactoring but works, very dated
0F06B A9 01                         LDA #$1 
0F06D 20 14 E9                      JSR Custom_BufferText
0F070 A9 00                     	LDA #ScreenUpdateBuffer_RAM_301
0F072 85 11                     	STA ScreenUpdateIndex
0F074 20 76 E4                      JSR WaitForNMI
0F077 A9 02                         LDA #$2
0F079 20 14 E9                      JSR Custom_BufferText
0F07C 20 76 E4                      JSR WaitForNMI
0F07F A9 00                         LDA #$0 
0F081 AE F1 73                  	LDX StatPrintOffset
0F084 8E F2 73                      STX StatPrintCurOffset
0F087 F0 07                     --  BEQ ++
0F089 18                            CLC
0F08A 69 10                         ADC #$10
0F08C CA                            DEX
0F08D 4C 87 F0                      JMP --
0F090                           ++
0F090 AA                            TAX
0F091 A9 60                         LDA #$60 ;; amount of characters to print, 0x10 per line
0F093 8D F3 73                      STA StatPrintDec
0F096 A9 46                         LDA #$46 ;; starting row
0F098 8D F4 73                      STA StatPrintDecRow
0F09B A0 00                         LDY #0
0F09D                           -   
0F09D BD 0C EF                      LDA TEXT_Health, X
0F0A0 99 62 05                  	STA $55F+3, Y
0F0A3 E8                            INX
0F0A4 C8                            INY
0F0A5 C0 10                         CPY #$10
0F0A7 D0 5F                         BNE +
0F0A9 A9 26                         LDA #$26
0F0AB 8D 5F 05                  	STA $55F
0F0AE AD F4 73                      LDA StatPrintDecRow
0F0B1 8D 60 05                  	STA $55F + 1
0F0B4 18                            CLC
0F0B5 69 20                         ADC #$20
0F0B7 8D F4 73                      STA StatPrintDecRow
0F0BA A9 12                         LDA #$12
0F0BC 8D 61 05                  	STA $55F + 2
0F0BF A9 FB                         LDA #$FB
0F0C1 99 62 05                  	STA $55F + 3, Y
0F0C4 A9 FB                         LDA #$FB
0F0C6 99 63 05                  	STA $55F + 4, Y
0F0C9 A9 00                         LDA #0
0F0CB 99 64 05                  	STA $55F + 5, Y
0F0CE AD F2 73                      LDA StatPrintCurOffset 
0F0D1 0A                            ASL
0F0D2 A8                            TAY
0F0D3 B9 EC EF                      LDA StatDrawMemory, Y
0F0D6 85 C5                         STA byte_RAM_C5
0F0D8 B9 ED EF                      LDA StatDrawMemory + 1, Y
0F0DB 85 C6                         STA byte_RAM_C5 + 1
0F0DD A0 00                         LDY #$0
0F0DF B1 C5                         LDA (byte_RAM_C5), Y
0F0E1 AC F2 73                      LDY StatPrintCurOffset
0F0E4 C0 00                         CPY #$0
0F0E6 D0 07                         BNE +++
0F0E8 4A                            LSR
0F0E9 4A                            LSR
0F0EA 4A                            LSR
0F0EB 4A                            LSR
0F0EC 18                            CLC
0F0ED 69 01                         ADC #1
0F0EF 20 59 E4                  +++	JSR GetTwoDigitNumberTiles
0F0F2 8D 71 05                      STA $55F + 18
0F0F5 8C 70 05                      STY $55F + 17
0F0F8 EE F2 73                      INC StatPrintCurOffset 
0F0FB 8A                            TXA
0F0FC 48                            PHA
0F0FD A9 02                     	LDA #ScreenUpdateBuffer_RAM_55F
0F0FF 85 11                     	STA ScreenUpdateIndex
0F101 20 76 E4                      JSR WaitForNMI
0F104 A0 00                         LDY #$0
0F106 68                            PLA
0F107 AA                            TAX
0F108 CE F3 73                  +   DEC StatPrintDec
0F10B D0 90                         BNE -
0F10D                           ++
0F10D A9 25                     	LDA #$25
0F10F 8D 5F 05                  	STA $55F
0F112 A9 0E                     	LDA #$0E
0F114 8D 60 05                  	STA $55F + 1
0F117 A9 07                     	LDA #$07
0F119 8D 61 05                  	STA $55F + 2
0F11C A9 00                         LDA #$0 
0F11E 60                            RTS
0F11F                               
0F11F                           
0F11F                           GetMushFlag_Bitmask:
0F11F                           ;# takes LDX = mush num
0F11F A9 02                         LDA #CustomBitFlag_Mush1
0F121 E0 00                         CPX #0
0F123 F0 02                         BEQ ApplyMush1
0F125 A9 04                         LDA #CustomBitFlag_Mush2
0F127                           ApplyMush1:
0F127 AA                            TAX
0F128 60                            RTS
0F129                           
0F129                           
0F129                           ApplyFlag:
0F129 8A                            TXA
0F12A 20 33 F1                      JSR ChkFlag_Inner
0F12D F0 09                         BEQ Unmodified_Return
0F12F 91 C5                         STA (byte_RAM_C5), Y
0F131 60                            RTS
0F132                           ChkFlag:
0F132                               ;# takes LDX = bit
0F132                               ;# return flag if modified
0F132 8A                            TXA
0F133                           ChkFlag_Inner:
0F133 11 C5                         ORA (byte_RAM_C5), Y
0F135 D1 C5                         CMP (byte_RAM_C5), Y
0F137 60                            RTS
0F138                           Unmodified_Return:
0F138 60                            RTS
0F139                           
0F139                           IFDEF PLAYER_STUFF
0F139                           ChkFlagPlayer3:
0F139 20 B9 F1                      JSR LoadFlagPlayer3
0F13C 4C 48 F1                      JMP +
0F13F                           ChkFlagPlayer2:
0F13F 20 B0 F1                      JSR LoadFlagPlayer2
0F142 4C 48 F1                      JMP +
0F145                           ChkFlagPlayer:
0F145 20 A7 F1                      JSR LoadFlagPlayer
0F148 A4 8F                     +   LDY CurrentCharacter
0F14A                           ENDIF
0F14A 20 32 F1                  --  JSR ChkFlag
0F14D 60                            RTS
0F14E                           ChkFlagLevel:
0F14E 20 95 F1                      JSR LoadFlagLevel
0F151 AC F0 73                      LDY CurrentLevelAreaIndex
0F154 4C 4A F1                      JMP --
0F157                           ChkFlagWorld:
0F157 20 9E F1                      JSR LoadFlagWorld
0F15A AC 35 06                      LDY CurrentWorld
0F15D 4C 4A F1                      JMP --
0F160                           IFDEF PLAYER_STUFF
0F160                           ApplyFlagPlayer3:
0F160 20 B9 F1                      JSR LoadFlagPlayer3
0F163 4C 6F F1                      JMP +
0F166                           ApplyFlagPlayer2:
0F166 20 B0 F1                      JSR LoadFlagPlayer2
0F169 4C 6F F1                      JMP +
0F16C                           ApplyFlagPlayer:
0F16C 20 A7 F1                      JSR LoadFlagPlayer
0F16F A4 8F                     +   LDY CurrentCharacter
0F171 AD EF EE                      LDA IndependentPlayers
0F174 D0 09                         BNE +
0F176 A0 03                         LDY #3
0F178 20 29 F1                  --  JSR ApplyFlag
0F17B 88                            DEY
0F17C 10 FA                         BPL --
0F17E 60                            RTS
0F17F                           +
0F17F                           ENDIF
0F17F 20 29 F1                  --  JSR ApplyFlag
0F182 60                            RTS
0F183                           ApplyFlagLevel:
0F183 20 95 F1                      JSR LoadFlagLevel
0F186 AC F0 73                      LDY CurrentLevelAreaIndex
0F189 4C 7F F1                      JMP --
0F18C                           ApplyFlagWorld:
0F18C 20 9E F1                      JSR LoadFlagWorld
0F18F AC 35 06                      LDY CurrentWorld
0F192 4C 7F F1                      JMP --
0F195                           
0F195                           
0F195                           LoadPlayerSlot:
0F195                           
0F195                           ;; this is likely excessive for what is just a glorified AND check
0F195                           LoadFlagLevel:
0F195 A9 00                         LDA #<Level_Bit_Flags
0F197 85 C5                         STA byte_RAM_C5
0F199 A9 73                         LDA #>Level_Bit_Flags
0F19B 85 C6                         STA byte_RAM_C5 + 1
0F19D 60                            RTS
0F19E                           
0F19E                           LoadFlagWorld:
0F19E A9 D2                         LDA #<World_Bit_Flags
0F1A0 85 C5                         STA byte_RAM_C5
0F1A2 A9 73                         LDA #>World_Bit_Flags
0F1A4 85 C6                         STA byte_RAM_C5 + 1
0F1A6 60                            RTS
0F1A7                           
0F1A7                           IFDEF PLAYER_STUFF
0F1A7                           LoadFlagPlayer: ;; use a table for this
0F1A7 A9 E0                         LDA #<Player_Bit_Flags
0F1A9 85 C5                         STA byte_RAM_C5
0F1AB A9 76                         LDA #>Player_Bit_Flags
0F1AD 85 C6                         STA byte_RAM_C5 + 1
0F1AF 60                            RTS
0F1B0                           
0F1B0                           LoadFlagPlayer2:
0F1B0 A9 E4                         LDA #<Player_Bit_Flags_2
0F1B2 85 C5                         STA byte_RAM_C5
0F1B4 A9 76                         LDA #>Player_Bit_Flags_2
0F1B6 85 C6                         STA byte_RAM_C5 + 1
0F1B8 60                            RTS
0F1B9                           
0F1B9                           LoadFlagPlayer3:
0F1B9 A9 E8                         LDA #<Player_Bit_Flags_3
0F1BB 85 C5                         STA byte_RAM_C5
0F1BD A9 76                         LDA #>Player_Bit_Flags_3
0F1BF 85 C6                         STA byte_RAM_C5 + 1
0F1C1 60                            RTS
0F1C2                           ENDIF
0F1C2                           
0F1C2                           ENDIF
0F1C2                           
0F1C2                           IFDEF DEBUG
0F1C2                           	.include "src/extras/debug-f.asm"
0F1C2                           
0F1C2                           ; Debug tools
0F1C2                           Debug_Init:
0F1C2 AD EF 7F                  	LDA Debug_InMenu ; If already in the debug menu,
0F1C5 D0 64                     	BNE Debug_AlreadyIn ; don't re-hook everything. That's bad.
0F1C7 AD F2 06                  	LDA MMC3PRGBankTemp ; Save the current bank...
0F1CA 48                        	PHA ; and put it on the stack.
0F1CB A9 01                     	LDA #1
0F1CD 8D EF 7F                  	STA Debug_InMenu
0F1D0 A9 05                     	LDA #PRGBank_A_B ; Swap to the debug/credits bank
0F1D2 20 FA FD                  	JSR ChangeMappedPRGBank
0F1D5                           
0F1D5 A5 FD                     	LDA PPUScrollXMirror
0F1D7 8D E0 7F                  	STA $7FE0
0F1DA A5 FC                     	LDA PPUScrollYMirror
0F1DC 8D E1 7F                  	STA $7FE1
0F1DF A5 FE                     	LDA PPUMaskMirror
0F1E1 8D E2 7F                  	STA $7FE2
0F1E4 A5 FF                     	LDA PPUCtrlMirror
0F1E6 8D E3 7F                  	STA $7FE3
0F1E9 AD C5 04                  	LDA $4c5
0F1EC 8D E4 7F                  	STA $7FE4
0F1EF A2 06                     	LDX #6
0F1F1 BD F6 06                  -	LDA BackgroundCHR1 - 1, X
0F1F4 9D E4 7F                  	STA $7FE5 - 1, X
0F1F7 CA                        	DEX
0F1F8 D0 F7                     	BNE -
0F1FA                           
0F1FA 4C D5 87                  	JMP Debug_InitMenu ; And off we go
0F1FD                           
0F1FD                           
0F1FD                           Debug_Abort:
0F1FD                           ; Restore a bunch of crap we nuked
0F1FD AD E0 7F                  	LDA $7FE0
0F200 85 FD                     	STA PPUScrollXMirror
0F202 AD E1 7F                  	LDA $7FE1
0F205 85 FC                     	STA PPUScrollYMirror
0F207 AD E2 7F                  	LDA $7FE2
0F20A 85 FE                     	STA PPUMaskMirror
0F20C AD E3 7F                  	LDA $7FE3
0F20F 85 FF                     	STA PPUCtrlMirror
0F211 AD E4 7F                  	LDA $7FE4
0F214 8D C5 04                  	STA $4C5
0F217 A2 06                     	LDX #6
0F219 BD E4 7F                  -	LDA $7FE5 - 1, X
0F21C 9D F6 06                  	STA BackgroundCHR1 - 1, X
0F21F CA                        	DEX
0F220 D0 F7                     	BNE -
0F222                           
0F222                           
0F222 A9 00                     	LDA #0
0F224 8D EF 7F                  	STA Debug_InMenu
0F227 68                        	PLA
0F228 20 FA FD                  	JSR ChangeMappedPRGBank
0F22B                           Debug_AlreadyIn:
0F22B                           ; Restore the stack to the way it was (that is, undo our hijack)
0F22B                           ; This will NOT fix anything the debug menu wiped out, like
0F22B                           ; the nametables, palettes, whatever else...
0F22B                           ; It's basically a "I just want to see what happens" button.
0F22B                           ; Sometimes you can almost fix it if you pause/unpause though.
0F22B 68                        	PLA
0F22C A8                        	TAY
0F22D 68                        	PLA
0F22E AA                        	TAX
0F22F 68                        	PLA
0F230 28                        	PLP
0F231 40                        	RTI
0F232                           
0F232                           Debug_Activate:
0F232 A9 00                     	LDA #0
0F234 8D EF 7F                  	STA Debug_InMenu
0F237 A9 80                     	LDA #Music2_StopMusic
0F239 8D 03 06                  	STA MusicQueue2
0F23C A9 01                     	LDA #1
0F23E 85 50                     	STA PlayerState
0F240 A9 01                     	LDA #1
0F242 85 82                     	STA PlayerStateTimer
0F244 8D 34 05                  	STA TransitionType
0F247 68                        	PLA ; Clean up the stack from our mess earlier
0F248 68                        	PLA
0F249 A8                        	TAY
0F24A 68                        	PLA
0F24B AA                        	TAX
0F24C 68                        	PLA
0F24D 28                        	PLP
0F24E 68                        	PLA
0F24F 68                        	PLA
0F250 4C 63 DC                  	JMP StartLevelAfterTitleCard
0F253                           ENDIF
0F253                           
0F253                           IFDEF MMC5
0F253                           RESET_MMC5:
0F253                           	; Set PRG mode 3 and CHR mode 3
0F253                           	LDA #$03
0F253                           	STA $5100 ; PRG mode
0F253                           	STA $5101 ; CHR mode
0F253                           
0F253                           	; Enable PRG RAM writing
0F253                           	LDA #$02
0F253                           	STA $5102 ; PRG RAM Protect 1
0F253                           	LDA #$01
0F253                           	STA $5103 ; PRG RAM Protect 2
0F253                           
0F253                           	; Set nametable mapping
0F253                           	LDA #%01010000
0F253                           	STA $5105
0F253                           
0F253                           	LDA #$00
0F253                           	STA $5113 ; PRG RAM bank
0F253                           	STA $5130 ; Upper CHR Bank bits
0F253                           
0F253                           	LDA #$0F
0F253                           	STA $5015
0F253                           
0F253                           	; PRG bank 0
0F253                           	LDA #$80 ; ROM bank 0
0F253                           	STA $5114
0F253                           
0F253                           	; PRG bank 1
0F253                           	LDA #$81 ; ROM bank 1
0F253                           	STA $5115
0F253                           
0F253                           	; PRG bank 2
0F253                           	LDA #$8E ; ROM bank E
0F253                           	STA $5116
0F253                           
0F253                           	; PRG bank 3
0F253                           	LDA #$8F ; ROM bank F
0F253                           	STA $5117
0F253                           
0F253                           	JMP RESET
0F253                           
0F253                           
0F253                           ChangeCHRBanks_MMC5:
0F253                           	LDA SpriteCHR1
0F253                           	STA $5120
0F253                           
0F253                           	LDA SpriteCHR2
0F253                           	STA $5121
0F253                           
0F253                           	LDA SpriteCHR3
0F253                           	STA $5122
0F253                           
0F253                           	LDA SpriteCHR4
0F253                           	STA $5123
0F253                           
0F253                           	LDA BackgroundCHR1
0F253                           	STA $5124
0F253                           	ADC #$01
0F253                           	STA $5125
0F253                           
0F253                           	LDA BackgroundCHR2
0F253                           	STA $5126
0F253                           	ADC #$01
0F253                           	STA $5127
0F253                           
0F253                           	LDA BackgroundCHR1
0F253                           	STA $5128
0F253                           	ADC #$01
0F253                           	STA $5129
0F253                           
0F253                           	LDA BackgroundCHR2
0F253                           	STA $512A
0F253                           	ADC #$01
0F253                           	STA $512B
0F253                           
0F253                           	RTS
0F253                           ENDIF
0F253                           
0F253                           ; Unused space in the original ($ED4D - $EFFF)
0F253                           unusedSpace $F000, $FF
0F253                           	IFDEF PRESERVE_UNUSED_SPACE
0F253                           		.pad $F000, $FF
0F253                           	ENDIF
0F253                           
0F253                           ; these seem like they might be pointers, not actual values?
0F253                           byte_BANKF_F000:
0F253 00                        	.db $00 ; 0x0
0F254 08                        	.db $08 ; ??
0F255 10                        	.db $10 ; ??
0F256 18                        	.db $18 ; ??
0F257 20                        	.db $20 ; most 16x16 items, clips in 1px
0F258 24                        	.db $24 ; most 16x16 enemies, clips in 4px
0F259                           byte_BANKF_F006:
0F259 28                        	.db $28
0F25A 2A                        	.db $2A
0F25B 29                        	.db $29
0F25C 2B                        	.db $2B
0F25D                           byte_BANKF_F00A:
0F25D 2C                        	.db $2C
0F25E                           byte_BANKF_F00B:
0F25E 2E                        	.db $2E
0F25F 30                        	.db $30 ; 16x32 enemies, clips in 4px (birdo, mouser)
0F260 34                        	.db $34 ; bullet, clips in 8px
0F261 38                        	.db $38 ; 16x48 enemies, clips in 4px (tryclde)
0F262 3C                        	.db $3C ; spark, clips in 0px
0F263 40                        	.db $40 ; flying carpet
0F264                           
0F264                           ; collision x bounding box
0F264                           byte_BANKF_F011:
0F264 06 09 06 09               	.db $06,$09,$06,$09 ; $00 ;; 
0F268 01 01 0E 0E               	.db $01,$01,$0E,$0E ; $04
0F26C 06 09 06 09               	.db $06,$09,$06,$09 ; $08
0F270 01 01 0E 0E               	.db $01,$01,$0E,$0E ; $0C
0F274 06 09 06 09               	.db $06,$09,$06,$09 ; $10
0F278 01 01 0E 0E               	.db $01,$01,$0E,$0E ; $14
0F27C 06 09 06 09               	.db $06,$09,$06,$09 ; $18
0F280 01 01 0E 0E               	.db $01,$01,$0E,$0E ; $1C ;; mostly the same for X if holding/ducking
0F284 08 08 00 0F               	.db $08,$08,$00,$0F ; $20
0F288 08 08 03 0C               	.db $08,$08,$03,$0C ; $24
0F28C F8 18 F8 18               	.db $F8,$18,$F8,$18 ; $28
0F290 08 08 08 08               	.db $08,$08,$08,$08 ; $2C
0F294 08 08 03 0C               	.db $08,$08,$03,$0C ; $30
0F298 03 03 02 05               	.db $03,$03,$02,$05 ; $34
0F29C 08 08 03 0C               	.db $08,$08,$03,$0C ; $38
0F2A0 08 08 FF 10               	.db $08,$08,$FF,$10 ; $3C
0F2A4 10 10 02 1E               	.db $10,$10,$02,$1E ; $40
0F2A8                           
0F2A8                           ; collision y bounding box
0F2A8                           byte_BANKF_F055:
0F2A8 07 07 20 20               	.db $07,$07,$20,$20 ; $00
0F2AC 0D 1C 0D 1C               	.db $0D,$1C,$0D,$1C ; $04
0F2B0 FF FF 20 20               	.db $FF,$FF,$20,$20 ; $08
0F2B4 04 1C 04 1C               	.db $04,$1C,$04,$1C ; $0C
0F2B8 0F 0F 20 20               	.db $0F,$0F,$20,$20 ; $10
0F2BC 1C 1C 1C 1C               	.db $1C,$1C,$1C,$1C ; $14
0F2C0 07 07 20 20               	.db $07,$07,$20,$20 ; $18
0F2C4 0D 1C 0D 1C               	.db $0D,$1C,$0D,$1C ; $1C ;; proper heights for player when holding/ducking
0F2C8 00 10 09 09               	.db $00,$10,$09,$09 ; $20
0F2CC 03 10 09 09               	.db $03,$10,$09,$09 ; $24
0F2D0 FF FF 0F 0F               	.db $FF,$FF,$0F,$0F ; $28
0F2D4 0C 14 07 20               	.db $0C,$14,$07,$20 ; $2C
0F2D8 FE 20 10 10               	.db $FE,$20,$10,$10 ; $30
0F2DC 09 0A 08 08               	.db $09,$0A,$08,$08 ; $34
0F2E0 03 30 18 18               	.db $03,$30,$18,$18 ; $38
0F2E4 FF 10 08 08               	.db $FF,$10,$08,$08 ; $3C
0F2E8 09 0A 08 08               	.db $09,$0A,$08,$08 ; $40
0F2EC                           
0F2EC                           ; object collision bounding box
0F2EC                           byte_BANKF_F099:
0F2EC 02 02 03 00               	.db $02,$02,$03,$00 ; $00
0F2F0 03 03 F8 00               	.db $03,$03,$F8,$00 ; $04
0F2F4 03 01 F3 04               	.db $03,$01,$F3,$04 ; $08
0F2F8 03 03 03 F2               	.db $03,$03,$03,$F2 ; $0C
0F2FC 03 03 05 03               	.db $03,$03,$05,$03 ; $10
0F300 0B 10 03 00               	.db $0B,$10,$03,$00 ; $14, shy guy y?
0F304 03 03 F8 00               	.db $03,$03,$F8,$00 ; $18
0F308 09 04 03 03               	.db $09,$04,$03,$03 ; $1C
0F30C 0E 03 03 03               	.db $0E,$03,$03,$03 ; $20
0F310 F6 0C 02 03               	.db $F6,$0C,$02,$03 ; $24
0F314 0B 0B 09 10               	.db $0B,$0B,$09,$10 ; $28, shy guy x?
0F318 09 19 20 20               	.db $09,$19,$20,$20 ; $2C
0F31C 03 1E 19 08               	.db $03,$1E,$19,$08 ; $30
0F320 09 09 09 18               	.db $09,$09,$09,$18 ; $34
0F324 09 1A 06 15               	.db $09,$1A,$06,$15 ; $38
0F328 16 11 0D 10               	.db $16,$11,$0D,$10 ; $3C
0F32C 1A 19 24 10               	.db $1A,$19,$24,$10 ; $40
0F330 03 04 2D 30               	.db $03,$04,$2D,$30 ; $44
0F334 0F 2E 3E 1E               	.db $0F,$2E,$3E,$1E ; $48
0F338 28 13 48 26               	.db $28,$13,$48,$26 ; $4C
0F33C                           
0F33C                           
0F33C                           NextSpriteFlickerSlot:
0F33C CE 00 04                  	DEC SpriteFlickerSlot
0F33F 10 05                     	BPL NextSpriteFlickerSlot_Exit
0F341                           
0F341 A9 08                     	LDA #$08
0F343 8D 00 04                  	STA SpriteFlickerSlot
0F346                           
0F346                           NextSpriteFlickerSlot_Exit:
0F346 60                        	RTS
0F347                           
0F347                           
0F347                           LevelMusicIndexes:
0F347 01                        	.db Music1_Overworld
0F348 04                        	.db Music1_Inside ; 1 ; Music1 indexes.
0F349 08                        	.db Music1_Boss ; 2
0F34A 40                        	.db Music1_Wart ; 3
0F34B 20                        	.db Music1_Subspace ; 4
0F34C                           
0F34C                           
0F34C                           ; =============== S U B R O U T I N E =======================================
0F34C                           
0F34C                           sub_BANKF_F0F9:
0F34C 20 3C F3                  	JSR NextSpriteFlickerSlot
0F34F                           
0F34F AD C7 04                  	LDA PlayerInRocket
0F352 D0 21                     	BNE loc_BANKF_F11B
0F354                           
0F354                           	; boss clear fanfare locks player movement
0F354 AD 06 06                  	LDA MusicPlaying2
0F357 C9 02                     	CMP #Music2_BossClearFanfare
0F359 F0 14                     	BEQ loc_BANKF_F115
0F35B                           IFDEF SCROLL_FIX
0F35B A5 D8                         LDA NeedVerticalScroll
0F35D D0 03                         BNE +
0F35F 8D 1B 04                      STA PlayerLock
0F362                               +
0F362                           ENDIF
0F362 AD 1B 04                  	LDA PlayerLock
0F365 D0 08                     	BNE loc_BANKF_F115
0F367                           
0F367 A9 00                     	LDA #PRGBank_0_1
0F369 20 FA FD                  	JSR ChangeMappedPRGBank
0F36C                           
0F36C 20 52 89                  	JSR HandlePlayerState
0F36F                           
0F36F                           loc_BANKF_F115:
0F36F 20 F7 F4                  	JSR sub_BANKF_F228
0F372                           
0F372 20 E1 F5                  	JSR RenderPlayer
0F375                           
0F375                           loc_BANKF_F11B:
0F375 4C A5 F3                  	JMP loc_BANKF_F146
0F378                           
0F378                           ; End of function sub_BANKF_F0F9
0F378                           
0F378                           ; =============== S U B R O U T I N E =======================================
0F378                           
0F378                           sub_BANKF_F11E:
0F378 20 3C F3                  	JSR NextSpriteFlickerSlot
0F37B                           
0F37B AD C7 04                  	LDA PlayerInRocket
0F37E D0 25                     	BNE loc_BANKF_F146
0F380                           
0F380 A9 00                     	LDA #PRGBank_0_1
0F382 20 FA FD                  	JSR ChangeMappedPRGBank
0F385                           
0F385                           	; boss clear fanfare locks player movement
0F385 AD 06 06                  	LDA MusicPlaying2
0F388 C9 02                     	CMP #Music2_BossClearFanfare
0F38A F0 0D                     	BEQ loc_BANKF_F13A
0F38C                           
0F38C                           IFDEF SCROLL_FIX
0F38C A9 00                         LDA #$0
0F38E 8D 1B 04                      STA PlayerLock
0F391                           ENDIF
0F391 AD 1B 04                  	LDA PlayerLock
0F394 D0 03                     	BNE loc_BANKF_F13A
0F396                           
0F396 20 52 89                  	JSR HandlePlayerState
0F399                           
0F399                           loc_BANKF_F13A:
0F399                           	; horizonal scrolling?
0F399 20 B6 F5                  	JSR sub_BANKF_F2C2
0F39C                           
0F39C                           	; horizonal scrolling?
0F39C 20 A4 85                  	JSR sub_BANK0_85EC
0F39F                           
0F39F                           	; screen boundary triggers
0F39F 20 F7 F4                  	JSR sub_BANKF_F228
0F3A2                           
0F3A2 20 E1 F5                  	JSR RenderPlayer
0F3A5                           
0F3A5                           loc_BANKF_F146:
0F3A5 A9 01                     	LDA #PRGBank_2_3
0F3A7 20 FA FD                  	JSR ChangeMappedPRGBank
0F3AA                           
0F3AA 20 10 80                  	JSR AreaMainRoutine
0F3AD                           
0F3AD 20 72 BE                  	JSR AreaSecondaryRoutine
0F3B0                           
0F3B0                           IFDEF CONTROLLER_2_DEBUG
0F3B0                           	JSR AreaDebugRoutine
0F3B0                           ENDIF
0F3B0                           
0F3B0 20 FB FB                  	JSR AnimateCHRRoutine
0F3B3                           
0F3B3 20 A4 F7                  	JSR SetAreaStartPage
0F3B6                           
0F3B6 A2 03                     	LDX #$03
0F3B8                           
0F3B8                           loc_BANKF_F159:
0F3B8 B5 82                     	LDA PlayerStateTimer, X
0F3BA F0 02                     	BEQ loc_BANKF_F15F
0F3BC                           
0F3BC D6 82                     	DEC PlayerStateTimer, X
0F3BE                           
0F3BE                           loc_BANKF_F15F:
0F3BE CA                        	DEX
0F3BF 10 F7                     	BPL loc_BANKF_F159
0F3C1                           IFDEF RANDOMIZER_T
0F3C1 A5 85                         LDA DamageInvulnTime
0F3C3 D0 1C                         BNE +
0F3C5 AD B1 04                      LDA AreaTransitioned_Invuln
0F3C8 F0 17                         BEQ +
0F3CA 85 85                         STA DamageInvulnTime
0F3CC A5 F7                         LDA Player1JoypadHeld
0F3CE 29 0F                         AND #$F
0F3D0 D0 0A                         BNE ++
0F3D2 A5 F5                         LDA Player1JoypadPress
0F3D4 D0 06                         BNE ++
0F3D6 A5 46                         LDA PlayerYVelocity
0F3D8 C9 04                         CMP #4
0F3DA 90 05                         BCC +
0F3DC A9 00                     ++  LDA #0
0F3DE 8D B1 04                      STA AreaTransitioned_Invuln
0F3E1                           +
0F3E1                           ENDIF
0F3E1 AC E0 04                  	LDY StarInvincibilityTimer
0F3E4 F0 19                     	BEQ locret_BANKF_F17D
0F3E6                           
0F3E6 A5 10                     	LDA byte_RAM_10
0F3E8 29 07                     	AND #$07
0F3EA D0 13                     	BNE locret_BANKF_F17D
0F3EC                           
0F3EC CE E0 04                  	DEC StarInvincibilityTimer
0F3EF C0 08                     	CPY #$08
0F3F1 D0 0C                     	BNE locret_BANKF_F17D
0F3F3 AC 45 05                  	LDY CurrentMusicIndex
0F3F6 B9 47 F3                  	LDA LevelMusicIndexes, Y
0F3F9 8D 00 06                  	STA MusicQueue1
0F3FC                           IFDEF PLAYER_STUFF
0F3FC 20 00 F4                      JSR CustomMusicChange
0F3FF                           ENDIF
0F3FF                           
0F3FF                           locret_BANKF_F17D:
0F3FF 60                        	RTS
0F400                           
0F400                           ; End of function sub_BANKF_F11E
0F400                           
0F400                           IFDEF PLAYER_STUFF
0F400                           CustomMusicChange:
0F400 AD 0F 7D                      LDA LastMusicChoice
0F403 F0 0F                         BEQ +
0F405 10 0A                         BPL +k
0F407 C9 80                         CMP #$80
0F409 F0 06                         BEQ +k
0F40B 29 7F                         AND #$7F
0F40D 8D 03 06                      STA MusicQueue2
0F410 60                            RTS
0F411                           +k
0F411 8D 00 06                  	STA MusicQueue1
0F414                           +
0F414 60                            RTS
0F415                           ENDIF
0F415                           
0F415                           ; =============== S U B R O U T I N E =======================================
0F415                           
0F415                           sub_BANKF_F17E:
0F415 20 3C F3                  	JSR NextSpriteFlickerSlot
0F418                           
0F418 20 BC F7                  	JSR sub_BANKF_F494
0F41B                           
0F41B AD C7 04                  	LDA PlayerInRocket
0F41E D0 29                     	BNE loc_BANKF_F1AB
0F420                           
0F420                           	; boss clear fanfare locks player movement
0F420 AD 06 06                  	LDA MusicPlaying2
0F423 C9 02                     	CMP #Music2_BossClearFanfare
0F425 F0 14                     	BEQ loc_BANKF_F19D
0F427                           
0F427                           IFDEF SCROLL_FIX
0F427 A5 D8                         LDA NeedVerticalScroll
0F429 D0 03                         BNE +
0F42B                               ;LDA DoorAnimationTimer
0F42B                               ;BNE +
0F42B 8D 1B 04                      STA PlayerLock
0F42E                               +
0F42E                           ENDIF
0F42E AD 1B 04                  	LDA PlayerLock
0F431 D0 08                     	BNE loc_BANKF_F19D
0F433                           
0F433 A9 00                     	LDA #PRGBank_0_1
0F435 20 FA FD                  	JSR ChangeMappedPRGBank
0F438                           
0F438 20 52 89                  	JSR HandlePlayerState
0F43B                           
0F43B                           loc_BANKF_F19D:
0F43B A9 00                     	LDA #PRGBank_0_1
0F43D 20 FA FD                  	JSR ChangeMappedPRGBank
0F440                           
0F440 20 83 80                  	JSR sub_BANK0_8083
0F443                           
0F443 20 F7 F4                  	JSR sub_BANKF_F228
0F446                           
0F446 20 E1 F5                  	JSR RenderPlayer
0F449                           
0F449                           loc_BANKF_F1AB:
0F449 4C A5 F3                  	JMP loc_BANKF_F146
0F44C                           
0F44C                           ; End of function sub_BANKF_F17E
0F44C                           
0F44C                           ; =============== S U B R O U T I N E =======================================
0F44C                           
0F44C                           sub_BANKF_F1AE:
0F44C AD 27 06                  	LDA DoAreaTransition
0F44F C9 02                     	CMP #$02
0F451 F0 38                     	BEQ locret_BANKF_F1E0
0F453                           
0F453 A0 03                     	LDY #$03
0F455                           
0F455                           loc_BANKF_F1B7:
0F455 B9 31 05                  	LDA CurrentLevel, Y
0F458 99 E7 04                  	STA CurrentLevel_Init, Y
0F45B 88                        	DEY
0F45C 10 F7                     	BPL loc_BANKF_F1B7
0F45E                           IFDEF EXTENDED_PTR_CONTINUE:
0F45E AC 35 06                  	LDY CurrentWorld
0F461 AD 31 05                  	LDA CurrentLevel
0F464 38                        	SEC
0F465 F9 13 D9                  	SBC WorldStartingLevel, Y
0F468 8D 29 06                  	STA CurrentLevelRelative
0F46B                           ENDIF
0F46B A5 28                     	LDA PlayerXLo
0F46D 8D E1 04                  	STA PlayerXLo_Init
0F470 A5 32                     	LDA PlayerYLo
0F472 8D E2 04                  	STA PlayerYLo_Init
0F475 AD 28 04                  	LDA PlayerScreenX
0F478 8D E3 04                  	STA PlayerScreenX_Init
0F47B AD 2B 04                  	LDA PlayerScreenYLo
0F47E 8D E4 04                  	STA PlayerScreenYLo_Init
0F481 A5 46                     	LDA PlayerYVelocity
0F483 8D E5 04                  	STA PlayerYVelocity_Init
0F486 A5 50                     	LDA PlayerState
0F488 8D E6 04                  	STA PlayerState_Init
0F48B                           
0F48B                           locret_BANKF_F1E0:
0F48B 60                        	RTS
0F48C                           
0F48C                           ; End of function sub_BANKF_F1AE
0F48C                           
0F48C                           ; =============== S U B R O U T I N E =======================================
0F48C                           
0F48C                           ;
0F48C                           ; Level Initialization
0F48C                           ; ====================
0F48C                           ;
0F48C                           ; Sets up in-level gameplay (eg. after level card)
0F48C                           ;
0F48C                           LevelInitialization:
0F48C A0 03                     	LDY #$03
0F48E                           
0F48E                           ; Loop through and set level, area, page, and transition from RAM
0F48E                           LevelInitialization_AreaSetupLoop:
0F48E B9 E7 04                  	LDA CurrentLevel_Init, Y
0F491 99 31 05                  	STA CurrentLevel, Y
0F494 88                        	DEY
0F495 10 F7                     	BPL LevelInitialization_AreaSetupLoop
0F497                           
0F497                           	; position the player
0F497 AD E1 04                  	LDA PlayerXLo_Init
0F49A 85 28                     	STA PlayerXLo
0F49C AD E2 04                  	LDA PlayerYLo_Init
0F49F 85 32                     	STA PlayerYLo
0F4A1 AD E3 04                  	LDA PlayerScreenX_Init
0F4A4 8D 28 04                  	STA PlayerScreenX
0F4A7 AD E4 04                  	LDA PlayerScreenYLo_Init
0F4AA 8D 2B 04                  	STA PlayerScreenYLo
0F4AD AD E5 04                  	LDA PlayerYVelocity_Init
0F4B0 85 46                     	STA PlayerYVelocity
0F4B2 AD E6 04                  	LDA PlayerState_Init
0F4B5 85 50                     	STA PlayerState
0F4B7 A9 00                     	LDA #$00
0F4B9 8D 28 06                  	STA InSubspaceOrJar
0F4BC 8D EE 04                  	STA InJarType
0F4BF 85 99                     	STA PlayerInAir
0F4C1 85 85                     	STA DamageInvulnTime
0F4C3                           
0F4C3                           
0F4C3                           RestorePlayerToFullHealth:
0F4C3                           IFDEF HEALTH_REVAMP
0F4C3 EE C3 04                      INC PlayerMaxHealth
0F4C6                           
0F4C6 AD C2 04                  	LDA PlayerHealth
0F4C9 C9 FF                         CMP #$FF
0F4CB F0 13                         BEQ +++
0F4CD 4A                            LSR
0F4CE 4A                            LSR
0F4CF 4A                            LSR
0F4D0 4A                            LSR
0F4D1 CD C3 04                      CMP PlayerMaxHealth
0F4D4 B0 0A                         BCS +++
0F4D6 AD C3 04                      LDA PlayerMaxHealth
0F4D9 0A                            ASL
0F4DA 0A                            ASL
0F4DB 0A                            ASL
0F4DC 0A                            ASL
0F4DD 8D C2 04                      STA PlayerHealth
0F4E0 CE C3 04                  +++ DEC PlayerMaxHealth
0F4E3 AD C2 04                  	LDA PlayerHealth
0F4E6 09 0F                         ORA #$F
0F4E8 8D C2 04                  	STA PlayerHealth
0F4EB 60                              RTS
0F4EC                           ENDIF
0F4EC                           IFNDEF HEALTH_REVAMP
0F4EC                                 LDY     PlayerMaxHealth			  ; Get	player's current max HP
0F4EC                                 LDA     PlayerHealthValueByHeartCount,Y	  ; Get	the health value for this amount of hearts
0F4EC                                 STA     PlayerHealth
0F4EC                                 RTS
0F4EC                           ENDIF
0F4EC                           
0F4EC                           
0F4EC                           PlayerHealthValueByHeartCount:
0F4EC 1F                        	.db PlayerHealth_2_HP
0F4ED 2F                        	.db PlayerHealth_3_HP
0F4EE 3F                        	.db PlayerHealth_4_HP
0F4EF                           ; Max hearts = (hearts - 2), value is 0,$01,2
0F4EF                           ; This table determines what the player's HP is set to
0F4EF                           
0F4EF                           ClimbSpeed:
0F4EF 00                        	.db $00
0F4F0                           ClimbSpeedDown:
0F4F0 20                        	.db $20
0F4F1                           ClimbSpeedUp:
0F4F1 F0                        	.db $F0
0F4F2                           ; Bug: The climb speed index is determined by checking the up/down flags in
0F4F2                           ; Player1JoypadHeld. If both are enabled, the index it out of bounds and uses
0F4F2                           ; the LDA ($A5) below, which zips the player up the vine!
0F4F2                           IFDEF FIX_CLIMB_ZIP
0F4F2 00                        	.db $00
0F4F3                           ENDIF
0F4F3                           IFDEF PLAYER_STUFF
0F4F3                           ClimbSpeedPowered:
0F4F3 00                        	.db $00
0F4F4 18                        	.db $18
0F4F5 E8                        	.db $E8
0F4F6 00                        	.db $00
0F4F7                           ENDIF
0F4F7                           
0F4F7                           ; =============== S U B R O U T I N E =======================================
0F4F7                           
0F4F7                           ; Bottomless pit check
0F4F7                           sub_BANKF_F228:
0F4F7 A5 28                     	LDA PlayerXLo
0F4F9 38                        	SEC
0F4FA ED C0 04                  	SBC ScreenBoundaryLeftLo
0F4FD 8D 28 04                  	STA PlayerScreenX
0F500 A5 32                     	LDA PlayerYLo
0F502 18                        	CLC
0F503 E5 CB                     	SBC ScreenYLo
0F505 8D 2B 04                  	STA PlayerScreenYLo
0F508 A5 1E                     	LDA PlayerYHi
0F50A E5 CA                     	SBC ScreenYHi
0F50C 8D 2A 04                  	STA PlayerScreenYHi
0F50F A5 50                     	LDA PlayerState
0F511 C9 02                     	CMP #PlayerState_Lifting
0F513 B0 76                     	BCS locret_BANKF_F297
0F515                           
0F515 AD 2A 04                  	LDA PlayerScreenYHi
0F518 F0 72                     	BEQ loc_BANKF_F298
0F51A                           
0F51A 30 27                     	BMI loc_BANKF_F254
0F51C                           
0F51C                           	; bottomless pit
0F51C                           IFDEF PLAYER_STUFF
0F51C A2 10                         LDX #CustomBitFlag_FallDefense
0F51E 20 45 F1                      JSR ChkFlagPlayer
0F521 D0 19                         BNE +
0F523 A9 80                         LDA #$80
0F525 85 46                         STA PlayerYVelocity
0F527 A9 20                         LDA #SoundEffect1_EnemyHit
0F529 8D 02 06                      STA SoundEffectQueue1
0F52C A9 01                         LDA #PRGBank_2_3
0F52E 20 FA FD                      JSR ChangeMappedPRGBank
0F531 20 CB BA                      JSR DamagePlayerNoImmune
0F534 A9 00                         LDA #PRGBank_0_1
0F536 20 FA FD                      JSR ChangeMappedPRGBank
0F539 4C 43 F5                      JMP loc_BANKF_F254
0F53C                           +
0F53C                           ENDIF
0F53C A9 00                     	LDA #$00
0F53E 85 82                     	STA PlayerStateTimer
0F540                           
0F540 4C C3 FA                  	JMP KillPlayer
0F543                           
0F543                           ; ---------------------------------------------------------------------------
0F543                           
0F543                           loc_BANKF_F254:
0F543 A5 1E                     	LDA PlayerYHi
0F545 10 44                     	BPL locret_BANKF_F297
0F547                           
0F547 AD EE 04                  	LDA InJarType
0F54A F0 40                     	BEQ loc_BANKF_F298
0F54C                           
0F54C A5 32                     	LDA PlayerYLo
0F54E C9 F0                     	CMP #$F0
0F550 B0 39                     	BCS locret_BANKF_F297
0F552                           
0F552 20 66 FA                  	JSR DoAreaReset
0F555                           
0F555 68                        	PLA
0F556 68                        	PLA
0F557 A0 00                     	LDY #$00
0F559 84 9A                     	STY PlayerDucking
0F55B 84 46                     	STY PlayerYVelocity
0F55D 84 3C                     	STY PlayerXVelocity
0F55F A9 05                     	LDA #PlayerState_ExitingJar
0F561 85 50                     	STA PlayerState
0F563 A9 04                     	LDA #SpriteAnimation_Ducking
0F565 85 C7                     	STA PlayerAnimationFrame
0F567 AD EE 04                  	LDA InJarType
0F56A 8C EE 04                  	STY InJarType
0F56D C9 02                     	CMP #$02
0F56F D0 09                     	BNE loc_BANKF_F286
0F571                           
0F571 8D 27 06                  	STA DoAreaTransition
0F574                           IFDEF PLAYER_STUFF
0F574 A9 01                         LDA #TransitionType_Door
0F576 8D 34 05                      STA TransitionType
0F579                           ENDIF
0F579 60                        	RTS
0F57A                           
0F57A                           ; ---------------------------------------------------------------------------
0F57A                           
0F57A                           loc_BANKF_F286:
0F57A 8C 28 06                  	STY InSubspaceOrJar
0F57D AD 19 05                  	LDA CurrentLevelAreaCopy
0F580 8D 32 05                  	STA CurrentLevelArea
0F583 A9 04                     	LDA #PRGBank_8_9
0F585 20 FA FD                  	JSR ChangeMappedPRGBank
0F588                           
0F588 4C 42 FB                  	JMP GetEnemyPointers
0F58B                           
0F58B                           ; ---------------------------------------------------------------------------
0F58B                           
0F58B                           locret_BANKF_F297:
0F58B 60                        	RTS
0F58C                           
0F58C                           ; ---------------------------------------------------------------------------
0F58C                           
0F58C                           loc_BANKF_F298:
0F58C A5 50                     	LDA PlayerState
0F58E C9 01                     	CMP #PlayerState_Climbing
0F590 D0 F9                     	BNE locret_BANKF_F297
0F592                           
0F592 AD 28 06                  	LDA InSubspaceOrJar
0F595 C9 02                     	CMP #$02
0F597 F0 F2                     	BEQ locret_BANKF_F297
0F599                           
0F599 AD F1 F4                  	LDA ClimbSpeedUp
0F59C A4 1E                     	LDY PlayerYHi
0F59E 30 0F                     	BMI loc_BANKF_F2BB
0F5A0                           
0F5A0 AD 2B 04                  	LDA PlayerScreenYLo
0F5A3 C9 B8                     	CMP #$B8
0F5A5 90 E4                     	BCC locret_BANKF_F297
0F5A7                           
0F5A7 46 32                     	LSR PlayerYLo
0F5A9 38                        	SEC
0F5AA 26 32                     	ROL PlayerYLo
0F5AC AD F0 F4                  	LDA ClimbSpeedDown
0F5AF                           
0F5AF                           loc_BANKF_F2BB:
0F5AF 85 46                     	STA PlayerYVelocity
0F5B1 A9 03                     	LDA #PlayerState_ClimbingAreaTransition
0F5B3 85 50                     	STA PlayerState
0F5B5 60                        	RTS
0F5B6                           
0F5B6                           ; End of function sub_BANKF_F228
0F5B6                           
0F5B6                           ; =============== S U B R O U T I N E =======================================
0F5B6                           
0F5B6                           sub_BANKF_F2C2:
0F5B6 A9 00                     	LDA #$00
0F5B8 AC FA 04                  	LDY ScrollXLock
0F5BB D0 09                     	BNE loc_BANKF_F2D2
0F5BD                           
0F5BD A5 28                     	LDA PlayerXLo
0F5BF 38                        	SEC
0F5C0 E9 78                     	SBC #$78
0F5C2 38                        	SEC
0F5C3 ED C0 04                  	SBC ScreenBoundaryLeftLo
0F5C6                           
0F5C6                           loc_BANKF_F2D2:
0F5C6 85 BA                     	STA byte_RAM_BA
0F5C8 60                        	RTS
0F5C9                           
0F5C9                           ; End of function sub_BANKF_F2C2
0F5C9                           
0F5C9                           ; Tiles to use for eye sprite. If $00, this will use the character-specific table
0F5C9                           CharacterFrameEyeTiles:
0F5C9 00                        	.db $00 ; Walk1
0F5CA 00                        	.db $00 ; Carry1
0F5CB 00                        	.db $00 ; Walk2
0F5CC 00                        	.db $00 ; Carry2
0F5CD FB                        	.db $FB ; Duck
0F5CE FB                        	.db $FB ; DuckCarry
0F5CF 00                        	.db $00 ; Jump
0F5D0 FB                        	.db $FB ; Death
0F5D1 FB                        	.db $FB ; Lift
0F5D2 00                        	.db $00 ; Throw
0F5D3 FB                        	.db $FB ; Climb
0F5D4 00                        	.db $00 ; Pound
0F5D5                           
0F5D5                           ; Specific to each character
0F5D5                           CharacterEyeTiles:
0F5D5 D5                        	.db $D5 ; Mario
0F5D6 D9                        	.db $D9 ; Princess
0F5D7 FB                        	.db $FB ; Toad
0F5D8 D7                        	.db $D7 ; Luigi
0F5D9                           
0F5D9                           IFNDEF PLAYER_STUFF_expand_sprites
0F5D9                           CharacterTiles_Walk1:
0F5D9                           	.db $00
0F5D9                           	.db $02
0F5D9                           	.db $04 ; $00 - start of relative character tile offets, for some reason
0F5D9                           	.db $06 ; $01
0F5D9                           
0F5D9                           CharacterTiles_Carry1:
0F5D9                           	.db $0C ; $02
0F5D9                           	.db $0E ; $03
0F5D9                           	.db $10 ; $04
0F5D9                           	.db $12 ; $05
0F5D9                           
0F5D9                           CharacterTiles_Walk2:
0F5D9                           	.db $00 ; $06
0F5D9                           	.db $02 ; $07
0F5D9                           	.db $08 ; $08
0F5D9                           	.db $0A ; $09
0F5D9                           
0F5D9                           CharacterTiles_Carry2:
0F5D9                           	.db $0C ; $0a
0F5D9                           	.db $0E ; $0b
0F5D9                           	.db $14 ; $0c
0F5D9                           	.db $16 ; $0d
0F5D9                           
0F5D9                           CharacterTiles_Duck:
0F5D9                           	.db $FB ; $0e
0F5D9                           	.db $FB ; $0f
0F5D9                           	.db $2C ; $10
0F5D9                           	.db $2C ; $11
0F5D9                           
0F5D9                           CharacterTiles_DuckCarry:
0F5D9                           	.db $FB ; $12
0F5D9                           	.db $FB ; $13
0F5D9                           	.db $2E ; $14
0F5D9                           	.db $2E ; $15
0F5D9                           
0F5D9                           CharacterTiles_Jump:
0F5D9                           	.db $0C ; $16
0F5D9                           	.db $0E ; $17
0F5D9                           	.db $10 ; $18
0F5D9                           	.db $12 ; $19
0F5D9                           
0F5D9                           CharacterTiles_Death:
0F5D9                           	.db $30 ; $1a
0F5D9                           	.db $30 ; $1b
0F5D9                           	.db $32 ; $1c
0F5D9                           	.db $32 ; $1d
0F5D9                           
0F5D9                           CharacterTiles_Lift:
0F5D9                           	.db $20 ; $1e
0F5D9                           	.db $22 ; $1f
0F5D9                           	.db $24 ; $20
0F5D9                           	.db $26 ; $21
0F5D9                           
0F5D9                           CharacterTiles_Throw:
0F5D9                           	.db $00 ; $22
0F5D9                           	.db $02 ; $23
0F5D9                           	.db $28 ; $24
0F5D9                           	.db $2A ; $25
0F5D9                           
0F5D9                           CharacterTiles_Climb:
0F5D9                           	.db $18 ; $26
0F5D9                           	.db $1A ; $27
0F5D9                           	.db $1C ; $28
0F5D9                           	.db $1E ; $29
0F5D9                           
0F5D9                           CharacterTiles_PrincessJumpBody:
0F5D9                           IFDEF PLAYER_STUFF
0F5D9                           	.db $3C ; $2a
0F5D9                           	.db $3E ; $2b
0F5D9                           ENDIF
0F5D9                           IFNDEF PLAYER_STUFF
0F5D9                           	.db $B4 ; $2a
0F5D9                           	.db $B6 ; $2b
0F5D9                           ENDIF
0F5D9                           ENDIF
0F5D9                           
0F5D9                           
0F5D9                           DamageInvulnBlinkFrames:
0F5D9 01 01 01 02 02 04 04 04   	.db $01, $01, $01, $02, $02, $04, $04, $04
0F5E1                           
0F5E1                           IFDEF CONTROLLER_2_DEBUG
0F5E1                           ChangePlayerPoofTiles:
0F5E1                           	.db $5E
0F5E1                           	.db $3A
0F5E1                           	.db $3A
0F5E1                           	.db $3A
0F5E1                           	.db $38
0F5E1                           	.db $38
0F5E1                           	.db $38
0F5E1                           	.db $36
0F5E1                           	.db $34
0F5E1                           ENDIF
0F5E1                           
0F5E1                           ;
0F5E1                           ; Renders the player sprite
0F5E1                           ;
0F5E1                           RenderPlayer:
0F5E1                           IFDEF CONTROLLER_2_DEBUG
0F5E1                           	LDA ChangeCharacterPoofTimer
0F5E1                           	BEQ RenderPlayer_AfterChangeCharacterPoof
0F5E1                           
0F5E1                           	DEC ChangeCharacterPoofTimer
0F5E1                           
0F5E1                           	; tile
0F5E1                           	LDY ChangeCharacterPoofTimer
0F5E1                           	LDA ChangePlayerPoofTiles, Y
0F5E1                           	STA SpriteDMAArea + $01
0F5E1                           	STA SpriteDMAArea + $05
0F5E1                           	STA SpriteDMAArea + $09
0F5E1                           	STA SpriteDMAArea + $0D
0F5E1                           
0F5E1                           	; attributes
0F5E1                           	LDA #ObjAttrib_Palette1
0F5E1                           	STA SpriteDMAArea + $02
0F5E1                           	STA SpriteDMAArea + $0A
0F5E1                           	LDA #ObjAttrib_Palette1 | ObjAttrib_16x32
0F5E1                           	STA SpriteDMAArea + $06
0F5E1                           	STA SpriteDMAArea + $0E
0F5E1                           
0F5E1                           	; y-position
0F5E1                           	LDA PlayerScreenYLo
0F5E1                           	STA SpriteDMAArea + $00
0F5E1                           	STA SpriteDMAArea + $04
0F5E1                           	CLC
0F5E1                           	ADC #$10
0F5E1                           	STA SpriteDMAArea + $08
0F5E1                           	STA SpriteDMAArea + $0C
0F5E1                           
0F5E1                           	; x-position
0F5E1                           	LDA PlayerScreenX
0F5E1                           	STA SpriteDMAArea + $03
0F5E1                           	STA SpriteDMAArea + $0B
0F5E1                           	CLC
0F5E1                           	ADC #$08
0F5E1                           	STA SpriteDMAArea + $07
0F5E1                           	STA SpriteDMAArea + $0F
0F5E1                           
0F5E1                           RenderPlayer_AfterChangeCharacterPoof:
0F5E1                           ENDIF
0F5E1                           
0F5E1                           	LDY_abs PlayerState
0F5E1                           	IFDEF COMPATIBILITY
0F5E1 AC                        		.db $ac
0F5E2 50 00                     		.dw PlayerState
0F5E4                           	ELSE
0F5E4                           		LDX PlayerState
0F5E4                           		NOP_compat
0F5E4                           	ENDIF
0F5E4 C0 08                     	CPY #PlayerState_ChangingSize
0F5E6 F0 16                     	BEQ loc_BANKF_F337
0F5E8                           
0F5E8 AC E0 04                  	LDY StarInvincibilityTimer
0F5EB D0 11                     	BNE loc_BANKF_F337
0F5ED                           
0F5ED A5 85                     	LDA DamageInvulnTime ; Determine if the player is invincible from damage,
0F5EF                           ; and if so, if they should be visible
0F5EF F0 1B                     	BEQ loc_BANKF_F345
0F5F1                           
0F5F1 4A                        	LSR A
0F5F2 4A                        	LSR A
0F5F3 4A                        	LSR A
0F5F4 4A                        	LSR A
0F5F5 A8                        	TAY
0F5F6 A5 85                     	LDA DamageInvulnTime
0F5F8 39 D9 F5                  	AND DamageInvulnBlinkFrames, Y
0F5FB D0 0F                     	BNE loc_BANKF_F345
0F5FD                           
0F5FD 60                        	RTS
0F5FE                           
0F5FE                           ; ---------------------------------------------------------------------------
0F5FE                           
0F5FE                           loc_BANKF_F337:
0F5FE A5 10                     	LDA byte_RAM_10
0F600 C0 18                     	CPY #$18
0F602 B0 02                     	BCS loc_BANKF_F33F
0F604                           
0F604 4A                        	LSR A
0F605 4A                        	LSR A
0F606                           
0F606                           loc_BANKF_F33F:
0F606 29 03                     	AND #ObjAttrib_Palette
0F608 05 64                     	ORA PlayerAttributes
0F60A 85 64                     	STA PlayerAttributes
0F60C                           
0F60C                           loc_BANKF_F345:
0F60C AD DF 04                  	LDA QuicksandDepth
0F60F F0 06                     	BEQ loc_BANKF_F350
0F611                           
0F611 A9 20                     	LDA #ObjAttrib_BehindBackground
0F613 05 64                     	ORA PlayerAttributes
0F615 85 64                     	STA PlayerAttributes
0F617                           
0F617                           loc_BANKF_F350:
0F617 AD 28 04                  	LDA PlayerScreenX
0F61A                           IFDEF PLAYER_STUFF
0F61A AD F6 06                      LDA PlayerCurrentSize ;; move X pos depending on if "wide"
0F61D D0 23                         BNE ++
0F61F A6 8F                         LDX CurrentCharacter
0F621 BD C9 EE                      LDA DokiMode, X
0F624 10 1C                         BPL ++
0F626 A5 9D                         LDA PlayerDirection
0F628 D0 0C                         BNE +++
0F62A AD 28 04                  	LDA PlayerScreenX
0F62D 18                            CLC
0F62E 69 04                         ADC #$04
0F630 8D 28 04                      STA PlayerScreenX
0F633 4C 42 F6                      JMP ++
0F636                           +++
0F636 AD 28 04                  	LDA PlayerScreenX
0F639 38                            SEC
0F63A E9 04                         SBC #$04
0F63C 8D 28 04                      STA PlayerScreenX
0F63F 4C 42 F6                      JMP ++
0F642                           ++
0F642 AD 28 04                  	LDA PlayerScreenX
0F645                           ENDIF
0F645 8D 23 02                  	STA SpriteDMAArea + $23
0F648 8D 2B 02                  	STA SpriteDMAArea + $2B
0F64B 18                        	CLC
0F64C 69 08                     	ADC #$08
0F64E 8D 27 02                  	STA SpriteDMAArea + $27
0F651 8D 2F 02                  	STA SpriteDMAArea + $2F
0F654                           IFDEF PLAYER_STUFF
0F654 A5 9D                         LDA PlayerDirection
0F656 F0 09                         BEQ +
0F658 AD 28 04                  	LDA PlayerScreenX
0F65B 18                        	CLC
0F65C 69 10                     	ADC #$10
0F65E 4C 67 F6                      JMP ++
0F661                           +
0F661 AD 28 04                  	LDA PlayerScreenX
0F664 38                        	SEC
0F665 E9 08                     	SBC #$08
0F667                           ++
0F667 8D 1B 02                  	STA SpriteDMAArea + $1B
0F66A 8D 1F 02                  	STA SpriteDMAArea + $1F
0F66D                           ENDIF
0F66D AD 2B 04                  	LDA PlayerScreenYLo
0F670                           IFDEF PLAYER_STUFF
0F670 A6 C7                     	LDX PlayerAnimationFrame
0F672 E0 04                     	CPX #SpriteAnimation_Ducking
0F674 F0 06                         BEQ +
0F676 A6 8F                         LDX CurrentCharacter
0F678 18                            CLC
0F679 7D D1 EE                      ADC HeightOffset, X
0F67C                           +
0F67C                           ENDIF
0F67C 85 00                     	STA byte_RAM_0
0F67E AD 2A 04                  	LDA PlayerScreenYHi
0F681 85 01                     	STA byte_RAM_1
0F683 A4 C7                     	LDY PlayerAnimationFrame
0F685 C0 04                     	CPY #SpriteAnimation_Ducking
0F687 F0 13                     	BEQ loc_BANKF_F382
0F689                           
0F689 AD F6 06                  	LDA PlayerCurrentSize
0F68C F0 0E                     	BEQ loc_BANKF_F382
0F68E                           
0F68E A5 00                     	LDA byte_RAM_0
0F690                           IFDEF PLAYER_STUFF
0F690 A6 8F                         LDX CurrentCharacter
0F692 18                            CLC
0F693 7D D5 EE                      ADC HeightOffset + 4, X
0F696                           ENDIF
0F696                           IFNDEF PLAYER_STUFF
0F696                           	CLC
0F696                           	ADC #$08
0F696                           ENDIF
0F696 85 00                     	STA byte_RAM_0
0F698 90 02                     	BCC loc_BANKF_F382
0F69A                           
0F69A E6 01                     	INC byte_RAM_1
0F69C                           
0F69C                           loc_BANKF_F382:
0F69C                           IFNDEF PLAYER_STUFF
0F69C                           	LDA CurrentCharacter
0F69C                           	CMP #Character_Princess
0F69C                           	BEQ loc_BANKF_F394
0F69C                           ENDIF
0F69C                           IFDEF PLAYER_STUFF
0F69C BD C9 EE                      LDA DokiMode, X
0F69F 29 08                         AND #CustomCharFlag_PeachWalk
0F6A1 D0 0C                     	BNE loc_BANKF_F394
0F6A3                           ENDIF
0F6A3                           
0F6A3 C0 00                     	CPY #$00
0F6A5 D0 08                     	BNE loc_BANKF_F394
0F6A7                           
0F6A7 A5 00                     	LDA byte_RAM_0
0F6A9 D0 02                     	BNE loc_BANKF_F392
0F6AB                           
0F6AB C6 01                     	DEC byte_RAM_1
0F6AD                           
0F6AD                           loc_BANKF_F392:
0F6AD C6 00                     	DEC byte_RAM_0
0F6AF                           
0F6AF                           loc_BANKF_F394:
0F6AF 20 2F FC                  	JSR loc_BANKF_FAFE
0F6B2                           
0F6B2 A5 01                     	LDA byte_RAM_1
0F6B4 D0 0E                     	BNE loc_BANKF_F3A6
0F6B6                           
0F6B6 A5 00                     	LDA byte_RAM_0 ;; Y POSITION
0F6B8 99 00 02                  	STA SpriteDMAArea, Y
0F6BB                           IFDEF PLAYER_STUFF_EYE_OFFSET
0F6BB                               CLC
0F6BB                               ADC EyeOffsetY, X
0F6BB                           	STA SpriteDMAArea, Y
0F6BB                           ENDIF
0F6BB                           IFDEF PLAYER_STUFF
0F6BB 8D 18 02                  	STA SpriteDMAArea + $18
0F6BE                           ENDIF
0F6BE 8D 20 02                  	STA SpriteDMAArea + $20
0F6C1 8D 24 02                  	STA SpriteDMAArea + $24
0F6C4                           
0F6C4                           loc_BANKF_F3A6:
0F6C4 A5 00                     	LDA byte_RAM_0
0F6C6                           IFNDEF PLAYER_STUFF_UPSIDE_DOWN
0F6C6 18                            CLC
0F6C7 69 10                     	ADC #$10
0F6C9                           ENDIF
0F6C9                           IFDEF PLAYER_STUFF_UPSIDE_DOWN
0F6C9                           	SEC
0F6C9                           	SBC #$10
0F6C9                               CLC
0F6C9                           ENDIF
0F6C9 85 00                     	STA byte_RAM_0
0F6CB A5 01                     	LDA byte_RAM_1
0F6CD 69 00                     	ADC #$00
0F6CF D0 0B                     	BNE loc_BANKF_F3BB
0F6D1                           
0F6D1 A5 00                     	LDA byte_RAM_0
0F6D3                           IFDEF PLAYER_STUFF
0F6D3 8D 1C 02                  	STA SpriteDMAArea + $1C
0F6D6                           ENDIF
0F6D6 8D 28 02                  	STA SpriteDMAArea + $28
0F6D9 8D 2C 02                  	STA SpriteDMAArea + $2C
0F6DC                           
0F6DC                           loc_BANKF_F3BB:
0F6DC AD CA 04                  	LDA CrouchJumpTimer
0F6DF C9 3C                     	CMP #$3C
0F6E1 90 08                     	BCC loc_BANKF_F3CA
0F6E3                           
0F6E3 A5 10                     	LDA byte_RAM_10
0F6E5 29 01                     	AND #ObjAttrib_Palette1
0F6E7 05 64                     	ORA PlayerAttributes
0F6E9 85 64                     	STA PlayerAttributes
0F6EB                           
0F6EB                           loc_BANKF_F3CA:
0F6EB A5 9D                     	LDA PlayerDirection
0F6ED 4A                        	LSR A
0F6EE 6A                        	ROR A
0F6EF 6A                        	ROR A
0F6F0 05 64                     	ORA PlayerAttributes
0F6F2 29 FC                     	AND #%11111100
0F6F4 09 01                     	ORA #ObjAttrib_Palette1
0F6F6                           IFDEF PLAYER_STUFF_UPSIDE_DOWN
0F6F6                           	ORA #$80
0F6F6                           ENDIF
0F6F6 99 02 02                  	STA SpriteDMAArea + 2, Y
0F6F9                           IFDEF PLAYER_STUFF
0F6F9 29 FC                     	AND #$FC
0F6FB 05 64                     	ORA PlayerAttributes
0F6FD 8D 22 02                  	STA SpriteDMAArea + $22
0F700 8D 2A 02                  	STA SpriteDMAArea + $2A
0F703 8D 26 02                  	STA SpriteDMAArea + $26
0F706 8D 2E 02                  	STA SpriteDMAArea + $2E
0F709 8D 1A 02                  	STA SpriteDMAArea + $1A
0F70C 8D 1E 02                  	STA SpriteDMAArea + $1E
0F70F AD F6 06                      LDA PlayerCurrentSize
0F712 20 90 B9                      JSR ApplyMetaInformation
0F715 A6 C7                     	LDX PlayerAnimationFrame
0F717                           ENDIF
0F717                           IFNDEF PLAYER_STUFF
0F717                           	LDX PlayerAnimationFrame
0F717                           	CPX #$07
0F717                           	BEQ loc_BANKF_F3E2
0F717                           
0F717                           	CPX #$04
0F717                           	BNE loc_BANKF_F3EE
0F717                           
0F717                           loc_BANKF_F3E2:
0F717                           	LDA PlayerAttributes
0F717                           	STA SpriteDMAArea + $22
0F717                           	STA SpriteDMAArea + $2A
0F717                           	ORA #$40
0F717                           	BNE loc_BANKF_F3F8
0F717                           
0F717                           loc_BANKF_F3EE:
0F717                           	AND #$FC
0F717                           	ORA PlayerAttributes
0F717                           	STA SpriteDMAArea + $22
0F717                           	STA SpriteDMAArea + $2A
0F717                           
0F717                           loc_BANKF_F3F8:
0F717                           	STA SpriteDMAArea + $26
0F717                           	STA SpriteDMAArea + $2E
0F717                           ENDIF
0F717 BD C9 F5                  	LDA CharacterFrameEyeTiles, X
0F71A D0 05                     	BNE loc_BANKF_F408
0F71C                           
0F71C A6 8F                     	LDX CurrentCharacter
0F71E BD D5 F5                  	LDA CharacterEyeTiles, X
0F721                           
0F721                           loc_BANKF_F408:
0F721 99 01 02                  	STA SpriteDMAArea + 1, Y
0F724 A5 C7                     	LDA PlayerAnimationFrame
0F726 C9 06                     	CMP #$06
0F728 B0 02                     	BCS loc_BANKF_F413
0F72A                           
0F72A 05 9C                     	ORA HoldingItem
0F72C                           
0F72C                           loc_BANKF_F413:
0F72C 0A                        	ASL A
0F72D 0A                        	ASL A
0F72E AA                        	TAX
0F72F                           IFDEF PLAYER_STUFF
0F72F AD F6 06                      LDA PlayerCurrentSize
0F732 F0 03                         BEQ +
0F734 4C 23 BA                      JMP RenderSmallPlayer
0F737                           +
0F737                           ENDIF
0F737 A5 9D                     	LDA PlayerDirection
0F739 D0 25                     	BNE loc_BANKF_F44A
0F73B                           
0F73B AD 23 02                  	LDA SpriteDMAArea + $23
0F73E 99 03 02                  	STA SpriteDMAArea + 3, Y
0F741                           
0F741                           IFDEF PLAYER_STUFF_expand_sprites
0F741 8A                            TXA
0F742 18                            CLC
0F743 A6 8F                     	LDX CurrentCharacter
0F745 7D 1C B9                      ADC CharacterStartTiles, X
0F748 AA                            TAX
0F749 BD 3C B7                  	LDA CharacterOne_Frames, X
0F74C 8D 21 02                  	STA SpriteDMAArea + $21
0F74F BD 3D B7                  	LDA CharacterOne_Frames + 1, X
0F752 8D 25 02                  	STA SpriteDMAArea + $25
0F755                           
0F755                           loc_BANKF_F43F:
0F755 BD 3E B7                  	LDA CharacterOne_Frames + 2, X
0F758 8D 29 02                  	STA SpriteDMAArea + $29
0F75B BD 3F B7                  	LDA CharacterOne_Frames + 3, X
0F75E D0 23                     	BNE loc_BANKF_F478
0F760                           
0F760                           loc_BANKF_F44A:
0F760 8A                            TXA
0F761 18                            CLC
0F762 A6 8F                     	LDX CurrentCharacter
0F764 7D 1C B9                      ADC CharacterStartTiles, X
0F767 AA                            TAX
0F768 AD 27 02                  	LDA SpriteDMAArea + $27
0F76B 99 03 02                  	STA SpriteDMAArea + 3, Y
0F76E BD 3D B7                  	LDA CharacterOne_Frames + 1, X
0F771 8D 21 02                  	STA SpriteDMAArea + $21
0F774 BD 3C B7                  	LDA CharacterOne_Frames, X
0F777 8D 25 02                  	STA SpriteDMAArea + $25
0F77A                           
0F77A                           loc_BANKF_F46F:
0F77A BD 3F B7                  	LDA CharacterOne_Frames + 3, X
0F77D 8D 29 02                  	STA SpriteDMAArea + $29
0F780 BD 3E B7                  	LDA CharacterOne_Frames + 2, X
0F783                           
0F783                           loc_BANKF_F478:
0F783 8D 2D 02                  	STA SpriteDMAArea + $2D
0F786                           
0F786 8A                            TXA
0F787 4A                            LSR
0F788 AA                            TAX
0F789 BD 30 B9                  	LDA ExtraFramesOne, X
0F78C 8D 19 02                  	STA SpriteDMAArea + $19
0F78F C9 FB                         CMP #$FB
0F791 D0 03                         BNE +
0F793 8D 18 02                  	STA SpriteDMAArea + $18
0F796                           +
0F796 BD 31 B9                  	LDA ExtraFramesOne + 1, X
0F799 8D 1D 02                  	STA SpriteDMAArea + $1d
0F79C C9 FB                         CMP #$FB
0F79E D0 03                         BNE +
0F7A0 8D 1C 02                  	STA SpriteDMAArea + $1C
0F7A3                           +
0F7A3 60                            RTS
0F7A4                           
0F7A4                           
0F7A4                           ENDIF
0F7A4                           
0F7A4                           IFNDEF PLAYER_STUFF_expand_sprites
0F7A4                           	LDA CharacterTiles_Walk1, X
0F7A4                           	STA SpriteDMAArea + $21
0F7A4                           	LDA CharacterTiles_Walk1 + 1, X
0F7A4                           	STA SpriteDMAArea + $25
0F7A4                           	LDA PlayerCurrentSize
0F7A4                           	BNE loc_BANKF_F43F
0F7A4                           
0F7A4                           	LDA CurrentCharacter
0F7A4                           	CMP #Character_Princess
0F7A4                           	BNE loc_BANKF_F43F
0F7A4                           
0F7A4                           	LDA PlayerAnimationFrame
0F7A4                           	CMP #SpriteAnimation_Jumping
0F7A4                           	BNE loc_BANKF_F43F
0F7A4                           
0F7A4                           	LDX #$2A
0F7A4                           
0F7A4                           loc_BANKF_F43F:
0F7A4                           	LDA CharacterTiles_Walk1 + 2, X
0F7A4                           	STA SpriteDMAArea + $29
0F7A4                           	LDA CharacterTiles_Walk1 + 3, X
0F7A4                           	BNE loc_BANKF_F478
0F7A4                           
0F7A4                           loc_BANKF_F44A:
0F7A4                           	LDA SpriteDMAArea + $27
0F7A4                           	STA SpriteDMAArea + 3, Y
0F7A4                           	LDA CharacterTiles_Walk1 + 1, X
0F7A4                           	STA SpriteDMAArea + $21
0F7A4                           	LDA CharacterTiles_Walk1, X
0F7A4                           	STA SpriteDMAArea + $25
0F7A4                           	LDA PlayerCurrentSize
0F7A4                           	BNE loc_BANKF_F46F
0F7A4                           
0F7A4                           	LDA CurrentCharacter
0F7A4                           	CMP #Character_Princess
0F7A4                           	BNE loc_BANKF_F46F
0F7A4                           
0F7A4                           	LDA PlayerAnimationFrame
0F7A4                           	CMP #SpriteAnimation_Jumping
0F7A4                           	BNE loc_BANKF_F46F
0F7A4                           
0F7A4                           	LDX #$2A
0F7A4                           
0F7A4                           loc_BANKF_F46F:
0F7A4                           	LDA CharacterTiles_Walk1 + 3, X
0F7A4                           	STA SpriteDMAArea + $29
0F7A4                           	LDA CharacterTiles_Walk1 + 2, X
0F7A4                           
0F7A4                           loc_BANKF_F478:
0F7A4                           	STA SpriteDMAArea + $2D
0F7A4                           	RTS
0F7A4                           ENDIF
0F7A4                           
0F7A4                           
0F7A4                           ; =============== S U B R O U T I N E =======================================
0F7A4                           
0F7A4                           SetAreaStartPage:
0F7A4 A5 EC                     	LDA IsHorizontalLevel
0F7A6 D0 0E                     	BNE SetAreaStartPage_HorizontalLevel
0F7A8                           
0F7A8 A4 1E                     	LDY PlayerYHi
0F7AA A5 32                     	LDA PlayerYLo
0F7AC 20 F1 F7                  	JSR GetVerticalAreaStartPage
0F7AF                           
0F7AF 98                        	TYA
0F7B0 10 06                     	BPL SetAreaStartPage_SetAndExit
0F7B2 A9 00                     	LDA #$00
0F7B4 F0 02                     	BEQ SetAreaStartPage_SetAndExit
0F7B6                           
0F7B6                           SetAreaStartPage_HorizontalLevel:
0F7B6 A5 14                     	LDA PlayerXHi
0F7B8                           
0F7B8                           SetAreaStartPage_SetAndExit:
0F7B8 8D 35 05                  	STA CurrentLevelPage
0F7BB 60                        	RTS
0F7BC                           
0F7BC                           ; End of function SetAreaStartPage
0F7BC                           
0F7BC                           ; =============== S U B R O U T I N E =======================================
0F7BC                           
0F7BC                           sub_BANKF_F494:
0F7BC A6 D8                     	LDX NeedVerticalScroll
0F7BE D0 30                     	BNE locret_BANKF_F4C2
0F7C0                           
0F7C0 A5 50                     	LDA PlayerState
0F7C2 C9 02                     	CMP #PlayerState_Lifting
0F7C4 B0 2A                     	BCS locret_BANKF_F4C2
0F7C6                           
0F7C6 AD 2B 04                  	LDA PlayerScreenYLo
0F7C9 AC 2A 04                  	LDY PlayerScreenYHi
0F7CC 30 0A                     	BMI loc_BANKF_F4B0
0F7CE                           
0F7CE D0 14                     	BNE loc_BANKF_F4B6
0F7D0                           
0F7D0 C9 B4                     	CMP #$B4
0F7D2 B0 10                     	BCS loc_BANKF_F4B6
0F7D4                           
0F7D4 C9 21                     	CMP #$21
0F7D6 B0 0E                     	BCS loc_BANKF_F4B8
0F7D8                           
0F7D8                           loc_BANKF_F4B0:
0F7D8 A4 99                     	LDY PlayerInAir
0F7DA                           IFDEF PLAYER_STUFF
0F7DA C0 02                         CPY #$2
0F7DC B0 07                         BCS loc_BANKF_F4B7
0F7DE C0 00                         CPY #$0
0F7E0                           ENDIF
0F7E0 D0 04                     	BNE loc_BANKF_F4B8
0F7E2                           
0F7E2 F0 01                     	BEQ loc_BANKF_F4B7
0F7E4                           
0F7E4                           loc_BANKF_F4B6:
0F7E4 E8                        	INX
0F7E5                           
0F7E5                           loc_BANKF_F4B7:
0F7E5 E8                        	INX
0F7E6                           
0F7E6                           loc_BANKF_F4B8:
0F7E6 AD 25 04                  	LDA VerticalScrollDirection
0F7E9 8E 25 04                  	STX VerticalScrollDirection
0F7EC D0 02                     	BNE locret_BANKF_F4C2
0F7EE                           
0F7EE 86 D8                     	STX NeedVerticalScroll
0F7F0                           
0F7F0                           locret_BANKF_F4C2:
0F7F0 60                        	RTS
0F7F1                           
0F7F1                           ; End of function sub_BANKF_F494
0F7F1                           
0F7F1                           ; =============== S U B R O U T I N E =======================================
0F7F1                           
0F7F1                           ; Determines start page for vertical area
0F7F1                           GetVerticalAreaStartPage:
0F7F1 85 0F                     	STA byte_RAM_F
0F7F3 98                        	TYA
0F7F4 30 11                     	BMI locret_BANKF_F4D9
0F7F6                           
0F7F6 0A                        	ASL A
0F7F7 0A                        	ASL A
0F7F8 0A                        	ASL A
0F7F9 0A                        	ASL A
0F7FA 18                        	CLC
0F7FB 65 0F                     	ADC byte_RAM_F
0F7FD B0 04                     	BCS loc_BANKF_F4D5
0F7FF                           
0F7FF C9 F0                     	CMP #$F0
0F801 90 04                     	BCC locret_BANKF_F4D9
0F803                           
0F803                           loc_BANKF_F4D5:
0F803 18                        	CLC
0F804 69 10                     	ADC #$10
0F806 C8                        	INY
0F807                           
0F807                           locret_BANKF_F4D9:
0F807 60                        	RTS
0F808                           
0F808                           ; End of function GetVerticalAreaStartPage
0F808                           
0F808                           ; ---------------------------------------------------------------------------
0F808                           byte_BANKF_F4DA:
0F808 C0                        	.db $C0
0F809 70                        	.db $70
0F80A 80                        	.db $80
0F80B 50                        	.db $50
0F80C A0                        	.db $A0
0F80D 40                        	.db $40
0F80E B0                        	.db $B0
0F80F 60                        	.db $60
0F810 90                        	.db $90
0F811 C0                        	.db $C0
0F812 70                        	.db $70
0F813 80                        	.db $80
0F814 50                        	.db $50
0F815 A0                        	.db $A0
0F816 40                        	.db $40
0F817 B0                        	.db $B0
0F818 60                        	.db $60
0F819                           
0F819                           ; Sprite display configuration
0F819                           ObjectAttributeTable:
0F819 01                        	.db ObjAttrib_Palette1 ; $00 Enemy_Heart
0F81A 01                        	.db ObjAttrib_Palette1 ; $01 Enemy_ShyguyRed
0F81B 01                        	.db ObjAttrib_Palette1 ; $02 Enemy_Tweeter
0F81C 03                        	.db ObjAttrib_Palette3 ; $03 Enemy_ShyguyPink
0F81D 02                        	.db ObjAttrib_Palette2 ; $04 Enemy_Porcupo
0F81E 01                        	.db ObjAttrib_Palette1 ; $05 Enemy_SnifitRed
0F81F 02                        	.db ObjAttrib_Palette2 ; $06 Enemy_SnifitGray
0F820 03                        	.db ObjAttrib_Palette3 ; $07 Enemy_SnifitPink
0F821 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 ; $08 Enemy_Ostro
0F822 01                        	.db ObjAttrib_Palette1 ; $09 Enemy_BobOmb
0F823 45                        	.db ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_16x32 ; $0A Enemy_AlbatossCarryingBobOmb
0F824 45                        	.db ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_16x32 ; $0B Enemy_AlbatossStartRight
0F825 45                        	.db ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_16x32 ; $0C Enemy_AlbatossStartLeft
0F826 01                        	.db ObjAttrib_Palette1 ; $0D Enemy_NinjiRunning
0F827 01                        	.db ObjAttrib_Palette1 ; $0E Enemy_NinjiJumping
0F828 01                        	.db ObjAttrib_Palette1 ; $0F Enemy_BeezoDiving
0F829 02                        	.db ObjAttrib_Palette2 ; $10 Enemy_BeezoStraight
0F82A 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $11 Enemy_WartBubble
0F82B 0D                        	.db ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_FrontFacing ; $12 Enemy_Pidgit
0F82C 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $13 Enemy_Trouter
0F82D 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $14 Enemy_Hoopstar
0F82E 00                        	.db ObjAttrib_Palette0 ; $15 Enemy_JarGeneratorShyguy
0F82F 00                        	.db ObjAttrib_Palette0 ; $16 Enemy_JarGeneratorBobOmb
0F830 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $17 Enemy_Phanto
0F831 C1                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 | ObjAttrib_UpsideDown ; $18 Enemy_CobratJar
0F832 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 ; $19 Enemy_CobratSand
0F833 0A                        	.db ObjAttrib_Palette2 | ObjAttrib_FrontFacing ; $1A Enemy_Pokey
0F834 0A                        	.db ObjAttrib_Palette2 | ObjAttrib_FrontFacing ; $1B Enemy_Bullet
0F835 42                        	.db ObjAttrib_Palette2 | ObjAttrib_16x32 ; $1C Enemy_Birdo
0F836 43                        	.db ObjAttrib_Palette3 | ObjAttrib_16x32 ; $1D Enemy_Mouser
0F837 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $1E Enemy_Egg
0F838 0A                        	.db ObjAttrib_Palette2 | ObjAttrib_FrontFacing ; $1F Enemy_Tryclyde
0F839 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $20 Enemy_Fireball
0F83A 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 ; $21 Enemy_Clawgrip
0F83B 02                        	.db ObjAttrib_Palette2 ; $22 Enemy_ClawgripRock
0F83C 01                        	.db ObjAttrib_Palette1 ; $23 Enemy_PanserStationaryFiresAngled
0F83D 03                        	.db ObjAttrib_Palette3 ; $24 Enemy_PanserWalking
0F83E 02                        	.db ObjAttrib_Palette2 ; $25 Enemy_PanserStationaryFiresUp
0F83F 01                        	.db ObjAttrib_Palette1 ; $26 Enemy_Autobomb
0F840 01                        	.db ObjAttrib_Palette1 ; $27 Enemy_AutobombFire
0F841 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $28 Enemy_WhaleSpout
0F842 01                        	.db ObjAttrib_Palette1 ; $29 Enemy_Flurry
0F843 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 ; $2A Enemy_Fryguy
0F844 01                        	.db ObjAttrib_Palette1 ; $2B Enemy_FryguySplit
0F845 4F                        	.db ObjAttrib_Palette3 | ObjAttrib_Horizontal | ObjAttrib_FrontFacing | ObjAttrib_16x32 ; $2C Enemy_Wart
0F846 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 ; $2D Enemy_HawkmouthBoss
0F847 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $2E Enemy_Spark1
0F848 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $2F Enemy_Spark2
0F849 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $30 Enemy_Spark3
0F84A 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $31 Enemy_Spark4
0F84B 91                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored | ObjAttrib_UpsideDown ; $32 Enemy_VegetableSmall
0F84C 91                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored | ObjAttrib_UpsideDown ; $33 Enemy_VegetableLarge
0F84D 92                        	.db ObjAttrib_Palette2 | ObjAttrib_Mirrored | ObjAttrib_UpsideDown ; $34 Enemy_VegetableWart
0F84E 91                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored | ObjAttrib_UpsideDown ; $35 Enemy_Shell
0F84F 91                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored | ObjAttrib_UpsideDown ; $36 Enemy_Coin
0F850 81                        	.db ObjAttrib_Palette1 | ObjAttrib_UpsideDown ; $37 Enemy_Bomb
0F851 81                        	.db ObjAttrib_Palette1 | ObjAttrib_UpsideDown ; $38 Enemy_Rocket
0F852 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $39 Enemy_MushroomBlock
0F853 89                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing | ObjAttrib_UpsideDown ; $3A Enemy_POWBlock
0F854 4D                        	.db ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_FrontFacing | ObjAttrib_16x32 ; $3B Enemy_FallingLogs
0F855 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $3C Enemy_SubspaceDoor
0F856 09                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing ; $3D Enemy_Key
0F857 89                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing | ObjAttrib_UpsideDown ; $3E Enemy_SubspacePotion
0F858 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $3F Enemy_Mushroom
0F859 89                        	.db ObjAttrib_Palette1 | ObjAttrib_FrontFacing | ObjAttrib_UpsideDown ; $40 Enemy_Mushroom1up
0F85A 45                        	.db ObjAttrib_Palette1 | ObjAttrib_Horizontal | ObjAttrib_16x32 ; $41 Enemy_FlyingCarpet
0F85B 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 ; $42 Enemy_HawkmouthRight
0F85C 41                        	.db ObjAttrib_Palette1 | ObjAttrib_16x32 ; $43 Enemy_HawkmouthLeft
0F85D 11                        	.db ObjAttrib_Palette1 | ObjAttrib_Mirrored ; $44 Enemy_CrystalBall
0F85E 12                        	.db ObjAttrib_Palette2 | ObjAttrib_Mirrored ; $45 Enemy_Starman
0F85F 92                        	.db ObjAttrib_Palette2 | ObjAttrib_Mirrored | ObjAttrib_UpsideDown ; $46 Enemy_Stopwatch
0F860                           
0F860                           ;
0F860                           ; Enemy Behavior 46E
0F860                           ;
0F860                           ;   bit 7 ($80) - uses mirrored sprite for animation
0F860                           ;   bit 6 ($40) - double speed
0F860                           ;   bit 5 ($20) - wider sprite? used for mouser
0F860                           ;   bit 4 ($10) - use tilemap 2
0F860                           ;   bit 3 ($08) - squawk on death (prevents despawning offscreen?)
0F860                           ;   bit 2 ($04) - disable collision with other enemies
0F860                           ;   bit 1 ($02) - unliftable
0F860                           ;   bit 0 ($01) - hurts when touched from above
0F860                           EnemyArray_46E_Data:
0F860 04                        	.db %00000100 ; $00 Enemy_Heart
0F861 00                        	.db %00000000 ; $01 Enemy_ShyguyRed
0F862 00                        	.db %00000000 ; $02 Enemy_Tweeter
0F863 00                        	.db %00000000 ; $03 Enemy_ShyguyPink
0F864 03                        	.db %00000011 ; $04 Enemy_Porcupo
0F865 00                        	.db %00000000 ; $05 Enemy_SnifitRed
0F866 00                        	.db %00000000 ; $06 Enemy_SnifitGray
0F867 00                        	.db %00000000 ; $07 Enemy_SnifitPink
0F868 50                        	.db %01010000 ; $08 Enemy_Ostro
0F869 40                        	.db %01000000 ; $09 Enemy_BobOmb
0F86A 42                        	.db %01000010 ; $0A Enemy_AlbatossCarryingBobOmb
0F86B 42                        	.db %01000010 ; $0B Enemy_AlbatossStartRight
0F86C 42                        	.db %01000010 ; $0C Enemy_AlbatossStartLeft
0F86D 40                        	.db %01000000 ; $0D Enemy_NinjiRunning
0F86E 40                        	.db %01000000 ; $0E Enemy_NinjiJumping
0F86F 40                        	.db %01000000 ; $0F Enemy_BeezoDiving
0F870 40                        	.db %01000000 ; $10 Enemy_BeezoStraight
0F871 13                        	.db %00010011 ; $11 Enemy_WartBubble
0F872 D0                        	.db %11010000 ; $12 Enemy_Pidgit
0F873 80                        	.db %10000000 ; $13 Enemy_Trouter
0F874 00                        	.db %00000000 ; $14 Enemy_Hoopstar
0F875 06                        	.db %00000110 ; $15 Enemy_JarGeneratorShyguy
0F876 06                        	.db %00000110 ; $16 Enemy_JarGeneratorBobOmb
0F877 07                        	.db %00000111 ; $17 Enemy_Phanto
0F878 10                        	.db %00010000 ; $18 Enemy_CobratJar
0F879 50                        	.db %01010000 ; $19 Enemy_CobratSand
0F87A 90                        	.db %10010000 ; $1A Enemy_Pokey
0F87B 07                        	.db %00000111 ; $1B Enemy_Bullet
0F87C 0A                        	.db %00001010 ; $1C Enemy_Birdo
0F87D 3B                        	.db %00111011 ; $1D Enemy_Mouser
0F87E 40                        	.db %01000000 ; $1E Enemy_Egg
0F87F 18                        	.db %00011000 ; $1F Enemy_Tryclyde
0F880 07                        	.db %00000111 ; $20 Enemy_Fireball
0F881 1B                        	.db %00011011 ; $21 Enemy_Clawgrip
0F882 10                        	.db %00010000 ; $22 Enemy_ClawgripRock
0F883 07                        	.db %00000111 ; $23 Enemy_PanserStationaryFiresAngled
0F884 07                        	.db %00000111 ; $24 Enemy_PanserWalking
0F885 07                        	.db %00000111 ; $25 Enemy_PanserStationaryFiresUp
0F886 50                        	.db %01010000 ; $26 Enemy_Autobomb
0F887 53                        	.db %01010011 ; $27 Enemy_AutobombFire
0F888 96                        	.db %10010110 ; $28 Enemy_WhaleSpout
0F889 50                        	.db %01010000 ; $29 Enemy_Flurry
0F88A 9B                        	.db %10011011 ; $2A Enemy_Fryguy
0F88B D3                        	.db %11010011 ; $2B Enemy_FryguySplit
0F88C 1B                        	.db %00011011 ; $2C Enemy_Wart
0F88D 0B                        	.db %00001011 ; $2D Enemy_HawkmouthBoss
0F88E 03                        	.db %00000011 ; $2E Enemy_Spark1
0F88F 03                        	.db %00000011 ; $2F Enemy_Spark2
0F890 03                        	.db %00000011 ; $30 Enemy_Spark3
0F891 03                        	.db %00000011 ; $31 Enemy_Spark4
0F892 00                        	.db %00000000 ; $32 Enemy_VegetableSmall
0F893 00                        	.db %00000000 ; $33 Enemy_VegetableLarge
0F894 00                        	.db %00000000 ; $34 Enemy_VegetableWart
0F895 00                        	.db %00000000 ; $35 Enemy_Shell
0F896 04                        	.db %00000100 ; $36 Enemy_Coin
0F897 04                        	.db %00000100 ; $37 Enemy_Bomb
0F898 04                        	.db %00000100 ; $38 Enemy_Rocket
0F899 00                        	.db %00000000 ; $39 Enemy_MushroomBlock
0F89A 00                        	.db %00000000 ; $3A Enemy_POWBlock
0F89B 06                        	.db %00000110 ; $3B Enemy_FallingLogs
0F89C 04                        	.db %00000100 ; $3C Enemy_SubspaceDoor
0F89D 00                        	.db %00000000 ; $3D Enemy_Key
0F89E 04                        	.db %00000100 ; $3E Enemy_SubspacePotion
0F89F 04                        	.db %00000100 ; $3F Enemy_Mushroom
0F8A0 04                        	.db %00000100 ; $40 Enemy_Mushroom1up
0F8A1 16                        	.db %00010110 ; $41 Enemy_FlyingCarpet
0F8A2 06                        	.db %00000110 ; $42 Enemy_HawkmouthRight
0F8A3 06                        	.db %00000110 ; $43 Enemy_HawkmouthLeft
0F8A4 0C                        	.db %00001100 ; $44 Enemy_CrystalBall
0F8A5 04                        	.db %00000100 ; $45 Enemy_Starman
0F8A6 04                        	.db %00000100 ; $46 Enemy_Stopwatch
0F8A7                           
0F8A7                           ;
0F8A7                           ; Height and Vertical collision detection
0F8A7                           ;
0F8A7                           EnemyArray_492_Data:
0F8A7 00                        	.db $00 ; $00 Enemy_Heart
0F8A8 05                        	.db $05 ; $01 Enemy_ShyguyRed
0F8A9 05                        	.db $05 ; $02 Enemy_Tweeter
0F8AA 05                        	.db $05 ; $03 Enemy_ShyguyPink
0F8AB 05                        	.db $05 ; $04 Enemy_Porcupo
0F8AC 05                        	.db $05 ; $05 Enemy_SnifitRed
0F8AD 05                        	.db $05 ; $06 Enemy_SnifitGray
0F8AE 05                        	.db $05 ; $07 Enemy_SnifitPink
0F8AF 0C                        	.db $0C ; $08 Enemy_Ostro
0F8B0 05                        	.db $05 ; $09 Enemy_BobOmb
0F8B1 05                        	.db $05 ; $0A Enemy_AlbatossCarryingBobOmb
0F8B2 05                        	.db $05 ; $0B Enemy_AlbatossStartRight
0F8B3 05                        	.db $05 ; $0C Enemy_AlbatossStartLeft
0F8B4 05                        	.db $05 ; $0D Enemy_NinjiRunning
0F8B5 05                        	.db $05 ; $0E Enemy_NinjiJumping
0F8B6 05                        	.db $05 ; $0F Enemy_BeezoDiving
0F8B7 05                        	.db $05 ; $10 Enemy_BeezoStraight
0F8B8 05                        	.db $05 ; $11 Enemy_WartBubble
0F8B9 05                        	.db $05 ; $12 Enemy_Pidgit
0F8BA 05                        	.db $05 ; $13 Enemy_Trouter
0F8BB 05                        	.db $05 ; $14 Enemy_Hoopstar
0F8BC 0D                        	.db $0D ; $15 Enemy_JarGeneratorShyguy
0F8BD 0D                        	.db $0D ; $16 Enemy_JarGeneratorBobOmb
0F8BE 05                        	.db $05 ; $17 Enemy_Phanto
0F8BF 0C                        	.db $0C ; $18 Enemy_CobratJar
0F8C0 0C                        	.db $0C ; $19 Enemy_CobratSand
0F8C1 05                        	.db $05 ; $1A Enemy_Pokey
0F8C2 0D                        	.db $0D ; $1B Enemy_Bullet
0F8C3 0C                        	.db $0C ; $1C Enemy_Birdo
0F8C4 0C                        	.db $0C ; $1D Enemy_Mouser
0F8C5 05                        	.db $05 ; $1E Enemy_Egg
0F8C6 0E                        	.db $0E ; $1F Enemy_Tryclyde
0F8C7 0D                        	.db $0D ; $20 Enemy_Fireball
0F8C8 0C                        	.db $0C ; $21 Enemy_Clawgrip
0F8C9 05                        	.db $05 ; $22 Enemy_ClawgripRock
0F8CA 05                        	.db $05 ; $23 Enemy_PanserStationaryFiresAngled
0F8CB 05                        	.db $05 ; $24 Enemy_PanserWalking
0F8CC 05                        	.db $05 ; $25 Enemy_PanserStationaryFiresUp
0F8CD 0C                        	.db $0C ; $26 Enemy_Autobomb
0F8CE 05                        	.db $05 ; $27 Enemy_AutobombFire
0F8CF 05                        	.db $05 ; $28 Enemy_WhaleSpout
0F8D0 05                        	.db $05 ; $29 Enemy_Flurry
0F8D1 05                        	.db $05 ; $2A Enemy_Fryguy
0F8D2 05                        	.db $05 ; $2B Enemy_FryguySplit
0F8D3 05                        	.db $05 ; $2C Enemy_Wart
0F8D4 00                        	.db $00 ; $2D Enemy_HawkmouthBoss
0F8D5 0F                        	.db $0F ; $2E Enemy_Spark1
0F8D6 0F                        	.db $0F ; $2F Enemy_Spark2
0F8D7 0F                        	.db $0F ; $30 Enemy_Spark3
0F8D8 0F                        	.db $0F ; $31 Enemy_Spark4
0F8D9 05                        	.db $05 ; $32 Enemy_VegetableSmall
0F8DA 05                        	.db $05 ; $33 Enemy_VegetableLarge
0F8DB 05                        	.db $05 ; $34 Enemy_VegetableWart
0F8DC 05                        	.db $05 ; $35 Enemy_Shell
0F8DD 05                        	.db $05 ; $36 Enemy_Coin
0F8DE 05                        	.db $05 ; $37 Enemy_Bomb
0F8DF 05                        	.db $05 ; $38 Enemy_Rocket
0F8E0 04                        	.db $04 ; $39 Enemy_MushroomBlock
0F8E1 04                        	.db $04 ; $3A Enemy_POWBlock
0F8E2 04                        	.db $04 ; $3B Enemy_FallingLogs
0F8E3 04                        	.db $04 ; $3C Enemy_SubspaceDoor
0F8E4 04                        	.db $04 ; $3D Enemy_Key
0F8E5 04                        	.db $04 ; $3E Enemy_SubspacePotion
0F8E6 04                        	.db $04 ; $3F Enemy_Mushroom
0F8E7 04                        	.db $04 ; $40 Enemy_Mushroom1up
0F8E8 10                        	.db $10 ; $41 Enemy_FlyingCarpet
0F8E9 00                        	.db $00 ; $42 Enemy_HawkmouthRight
0F8EA 00                        	.db $00 ; $43 Enemy_HawkmouthLeft
0F8EB 05                        	.db $05 ; $44 Enemy_CrystalBall
0F8EC 05                        	.db $05 ; $45 Enemy_Starman
0F8ED 05                        	.db $05 ; $46 Enemy_Stopwatch
0F8EE                           
0F8EE                           ;
0F8EE                           ; Horizontal hitbox, collision detection, and carried height
0F8EE                           ;
0F8EE                           EnemyArray_489_Data:
0F8EE 08                        	.db $08 ; $00Enemy_Heart
0F8EF 02                        	.db $02 ; $01Enemy_ShyguyRed
0F8F0 02                        	.db $02 ; $02Enemy_Tweeter
0F8F1 02                        	.db $02 ; $03Enemy_ShyguyPink
0F8F2 02                        	.db $02 ; $04Enemy_Porcupo
0F8F3 02                        	.db $02 ; $05Enemy_SnifitRed
0F8F4 02                        	.db $02 ; $06Enemy_SnifitGray
0F8F5 02                        	.db $02 ; $07Enemy_SnifitPink
0F8F6 04                        	.db $04 ; $08Enemy_Ostro
0F8F7 02                        	.db $02 ; $09Enemy_BobOmb
0F8F8 09                        	.db $09 ; $0AEnemy_AlbatossCarryingBobOmb
0F8F9 09                        	.db $09 ; $0BEnemy_AlbatossStartRight
0F8FA 09                        	.db $09 ; $0CEnemy_AlbatossStartLeft
0F8FB 02                        	.db $02 ; $0DEnemy_NinjiRunning
0F8FC 02                        	.db $02 ; $0EEnemy_NinjiJumping
0F8FD 02                        	.db $02 ; $0FEnemy_BeezoDiving
0F8FE 02                        	.db $02 ; $10Enemy_BeezoStraight
0F8FF 02                        	.db $02 ; $11Enemy_WartBubble
0F900 02                        	.db $02 ; $12Enemy_Pidgit
0F901 02                        	.db $02 ; $13Enemy_Trouter
0F902 02                        	.db $02 ; $14Enemy_Hoopstar
0F903 08                        	.db $08 ; $15Enemy_JarGeneratorShyguy
0F904 08                        	.db $08 ; $16Enemy_JarGeneratorBobOmb
0F905 02                        	.db $02 ; $17Enemy_Phanto
0F906 04                        	.db $04 ; $18Enemy_CobratJar
0F907 04                        	.db $04 ; $19Enemy_CobratSand
0F908 0E                        	.db $0E ; $1AEnemy_Pokey
0F909 08                        	.db $08 ; $1BEnemy_Bullet
0F90A 04                        	.db $04 ; $1CEnemy_Birdo
0F90B 04                        	.db $04 ; $1DEnemy_Mouser
0F90C 02                        	.db $02 ; $1EEnemy_Egg
0F90D 0F                        	.db $0F ; $1FEnemy_Tryclyde
0F90E 02                        	.db $02 ; $20Enemy_Fireball
0F90F 13                        	.db $13 ; $21Enemy_Clawgrip
0F910 02                        	.db $02 ; $22Enemy_ClawgripRock
0F911 02                        	.db $02 ; $23Enemy_PanserStationaryFiresAngled
0F912 02                        	.db $02 ; $24Enemy_PanserWalking
0F913 02                        	.db $02 ; $25Enemy_PanserStationaryFiresUp
0F914 10                        	.db $10 ; $26Enemy_Autobomb
0F915 02                        	.db $02 ; $27Enemy_AutobombFire
0F916 12                        	.db $12 ; $28Enemy_WhaleSpout
0F917 02                        	.db $02 ; $29Enemy_Flurry
0F918 0F                        	.db $0F ; $2AEnemy_Fryguy
0F919 02                        	.db $02 ; $2BEnemy_FryguySplit
0F91A 11                        	.db $11 ; $2CEnemy_Wart
0F91B 0B                        	.db $0B ; $2DEnemy_HawkmouthBoss
0F91C 02                        	.db $02 ; $2EEnemy_Spark1
0F91D 02                        	.db $02 ; $2FEnemy_Spark2
0F91E 02                        	.db $02 ; $30Enemy_Spark3
0F91F 02                        	.db $02 ; $31Enemy_Spark4
0F920 02                        	.db $02 ; $32Enemy_VegetableSmall
0F921 02                        	.db $02 ; $33Enemy_VegetableLarge
0F922 02                        	.db $02 ; $34Enemy_VegetableWart
0F923 02                        	.db $02 ; $35Enemy_Shell
0F924 02                        	.db $02 ; $36Enemy_Coin
0F925 02                        	.db $02 ; $37Enemy_Bomb
0F926 04                        	.db $04 ; $38Enemy_Rocket
0F927 03                        	.db $03 ; $39Enemy_MushroomBlock
0F928 03                        	.db $03 ; $3AEnemy_POWBlock
0F929 07                        	.db $07 ; $3BEnemy_FallingLogs
0F92A 04                        	.db $04 ; $3CEnemy_SubspaceDoor
0F92B 03                        	.db $03 ; $3DEnemy_Key
0F92C 03                        	.db $03 ; $3EEnemy_SubspacePotion
0F92D 03                        	.db $03 ; $3FEnemy_Mushroom
0F92E 03                        	.db $03 ; $40Enemy_Mushroom1up
0F92F 09                        	.db $09 ; $41Enemy_FlyingCarpet
0F930 0B                        	.db $0B ; $42Enemy_HawkmouthRight
0F931 0B                        	.db $0B ; $43Enemy_HawkmouthLeft
0F932 02                        	.db $02 ; $44Enemy_CrystalBall
0F933 02                        	.db $02 ; $45Enemy_Starman
0F934 02                        	.db $02 ; $46Enemy_Stopwatch
0F935                           
0F935                           ; More collision (post-throw)
0F935                           byte_BANKF_F607:
0F935 00                        	.db $00 ; $00Enemy_Heart
0F936 00                        	.db $00 ; $01Enemy_ShyguyRed
0F937 00                        	.db $00 ; $02Enemy_Tweeter
0F938 00                        	.db $00 ; $03Enemy_ShyguyPink
0F939 00                        	.db $00 ; $04Enemy_Porcupo
0F93A 00                        	.db $00 ; $05Enemy_SnifitRed
0F93B 00                        	.db $00 ; $06Enemy_SnifitGray
0F93C 00                        	.db $00 ; $07Enemy_SnifitPink
0F93D 00                        	.db $00 ; $08Enemy_Ostro
0F93E 00                        	.db $00 ; $09Enemy_BobOmb
0F93F 00                        	.db $00 ; $0AEnemy_AlbatossCarryingBobOmb
0F940 00                        	.db $00 ; $0BEnemy_AlbatossStartRight
0F941 00                        	.db $00 ; $0CEnemy_AlbatossStartLeft
0F942 00                        	.db $00 ; $0DEnemy_NinjiRunning
0F943 00                        	.db $00 ; $0EEnemy_NinjiJumping
0F944 00                        	.db $00 ; $0FEnemy_BeezoDiving
0F945 00                        	.db $00 ; $10Enemy_BeezoStraight
0F946 00                        	.db $00 ; $11Enemy_WartBubble
0F947 00                        	.db $00 ; $12Enemy_Pidgit
0F948 00                        	.db $00 ; $13Enemy_Trouter
0F949 00                        	.db $00 ; $14Enemy_Hoopstar
0F94A 00                        	.db $00 ; $15Enemy_JarGeneratorShyguy
0F94B 00                        	.db $00 ; $16Enemy_JarGeneratorBobOmb
0F94C 00                        	.db $00 ; $17Enemy_Phanto
0F94D 00                        	.db $00 ; $18Enemy_CobratJar
0F94E 00                        	.db $00 ; $19Enemy_CobratSand
0F94F 00                        	.db $00 ; $1AEnemy_Pokey
0F950 00                        	.db $00 ; $1BEnemy_Bullet
0F951 00                        	.db $00 ; $1CEnemy_Birdo
0F952 00                        	.db $00 ; $1DEnemy_Mouser
0F953 00                        	.db $00 ; $1EEnemy_Egg
0F954 00                        	.db $00 ; $1FEnemy_Tryclyde
0F955 00                        	.db $00 ; $20Enemy_Fireball
0F956 00                        	.db $00 ; $21Enemy_Clawgrip
0F957 00                        	.db $00 ; $22Enemy_ClawgripRock
0F958 00                        	.db $00 ; $23Enemy_PanserStationaryFiresAngled
0F959 00                        	.db $00 ; $24Enemy_PanserWalking
0F95A 00                        	.db $00 ; $25Enemy_PanserStationaryFiresUp
0F95B 00                        	.db $00 ; $26Enemy_Autobomb
0F95C 00                        	.db $00 ; $27Enemy_AutobombFire
0F95D 00                        	.db $00 ; $28Enemy_WhaleSpout
0F95E 00                        	.db $00 ; $29Enemy_Flurry
0F95F 00                        	.db $00 ; $2AEnemy_Fryguy
0F960 00                        	.db $00 ; $2BEnemy_FryguySplit
0F961 00                        	.db $00 ; $2CEnemy_Wart
0F962 00                        	.db $00 ; $2DEnemy_HawkmouthBoss
0F963 00                        	.db $00 ; $2EEnemy_Spark1
0F964 00                        	.db $00 ; $2FEnemy_Spark2
0F965 00                        	.db $00 ; $30Enemy_Spark3
0F966 00                        	.db $00 ; $31Enemy_Spark4
0F967 01                        	.db $01 ; $32Enemy_VegetableSmall
0F968 01                        	.db $01 ; $33Enemy_VegetableLarge
0F969 01                        	.db $01 ; $34Enemy_VegetableWart
0F96A 01                        	.db $01 ; $35Enemy_Shell
0F96B 02                        	.db $02 ; $36Enemy_Coin
0F96C 01                        	.db $01 ; $37Enemy_Bomb
0F96D 00                        	.db $00 ; $38Enemy_Rocket
0F96E 02                        	.db $02 ; $39Enemy_MushroomBlock
0F96F 03                        	.db $03 ; $3AEnemy_POWBlock
0F970 02                        	.db $02 ; $3BEnemy_FallingLogs
0F971 04                        	.db $04 ; $3CEnemy_SubspaceDoor
0F972 02                        	.db $02 ; $3DEnemy_Key
0F973 02                        	.db $02 ; $3EEnemy_SubspacePotion
0F974 02                        	.db $02 ; $3FEnemy_Mushroom
0F975 02                        	.db $02 ; $40Enemy_Mushroom1up
0F976 02                        	.db $02 ; $41Enemy_FlyingCarpet
0F977 02                        	.db $02 ; $42Enemy_HawkmouthRight
0F978 02                        	.db $02 ; $43Enemy_HawkmouthLeft
0F979 02                        	.db $02 ; $44Enemy_CrystalBall
0F97A 00                        	.db $00 ; $45Enemy_Starman
0F97B 02                        	.db $02 ; $46Enemy_Stopwatch
0F97C                           
0F97C                           ;
0F97C                           ; This table determines the "solidness" of tiles.
0F97C                           ;
0F97C                           ; Solidness is broken into four tiers:
0F97C                           ;   - background (no collisions)
0F97C                           ;   - background to player/enemies, solid to mushroom blocks
0F97C                           ;   - jumpthrough block (collision on top only)
0F97C                           ;   - solid block (collision on all sides)
0F97C                           ;
0F97C                           ; Tiles are divided into groups of $40. For each category, the corresponding
0F97C                           ; the groups are divided into two groups: tiles that have a collision rule and
0F97C                           ; tiles that don't.
0F97C                           ;
0F97C                           TileSolidnessTable:
0F97C                           	; solid to mushroom blocks unless < these values
0F97C 01                        	.db $01
0F97D 43                        	.db $43
0F97E 80                        	.db $80
0F97F C0                        	.db $C0
0F980                           	; solid on top unless < these values
0F980 12                        	.db $12
0F981 60                        	.db $60
0F982 91                        	.db $91
0F983 CA                        	.db $CA
0F984                           	; solid on all sides unless < these values
0F984 18                        	.db $18
0F985 69                        	.db $69
0F986 98                        	.db $98
0F987 D5                        	.db $D5
0F988                           
0F988                           WarpDestinations:
0F988 03 01 04 05 06 05 06      	.db $03, $01, $04, $05, $06, $05, $06
0F98F                           
0F98F                           IFDEF PLAYER_STUFF_TILE_NEW
0F98F                           NewSolidTable:
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                               .db %11111111
0F98F                           ENDIF
0F98F                           
0F98F                           
0F98F                           ;
0F98F                           ; Updates joypad press/held values
0F98F                           ;
0F98F                           UpdateJoypads:
0F98F 20 AC F9                  	JSR ReadJoypads
0F992                           
0F992                           UpdateJoypads_DoubleCheck:
0F992                           	; Work around DPCM sample bug,
0F992                           	; where some spurious inputs are read
0F992                           IFDEF CONTROLLER_2_DEBUG
0F992                           	LDY Player2JoypadPress
0F992                           	STY UpdateJoypadsTemp
0F992                           ENDIF
0F992 A4 F5                     	LDY Player1JoypadPress
0F994 20 AC F9                  	JSR ReadJoypads
0F997                           
0F997 C4 F5                     	CPY Player1JoypadPress
0F999 D0 F7                     	BNE UpdateJoypads_DoubleCheck
0F99B                           
0F99B                           IFDEF CONTROLLER_2_DEBUG
0F99B                           	LDY UpdateJoypadsTemp
0F99B                           	CPY Player2JoypadPress
0F99B                           	BNE UpdateJoypads_DoubleCheck
0F99B                           ENDIF
0F99B                           
0F99B A2 01                     	LDX #$01
0F99D                           
0F99D                           UpdateJoypads_Loop:
0F99D B5 F5                     	LDA Player1JoypadPress, X ; Update the press/held values
0F99F A8                        	TAY
0F9A0 55 F7                     	EOR Player1JoypadHeld, X
0F9A2 35 F5                     	AND Player1JoypadPress, X
0F9A4 95 F5                     	STA Player1JoypadPress, X
0F9A6 94 F7                     	STY Player1JoypadHeld, X
0F9A8 CA                        	DEX
0F9A9 10 F2                     	BPL UpdateJoypads_Loop
0F9AB                           
0F9AB 60                        	RTS
0F9AC                           
0F9AC                           
0F9AC                           ;
0F9AC                           ; Reads joypad pressed input
0F9AC                           ;
0F9AC                           ReadJoypads:
0F9AC A2 01                     	LDX #$01
0F9AE 8E 16 40                  	STX JOY1
0F9B1 CA                        	DEX
0F9B2 8E 16 40                  	STX JOY1
0F9B5                           
0F9B5 A2 08                     	LDX #$08
0F9B7                           ReadJoypadLoop:
0F9B7 AD 16 40                  	LDA JOY1
0F9BA 4A                        	LSR A
0F9BB 26 F5                     	ROL Player1JoypadPress
0F9BD 4A                        	LSR A
0F9BE                           	; @TODO These seem to never be read, and even then are using a
0F9BE                           	; second bit from JOY1/JOY2 ... Was this reading from
0F9BE                           	; the expansion port???
0F9BE 2E F4 06                  	ROL Player1JoypadUnk
0F9C1 AD 17 40                  	LDA JOY2
0F9C4 4A                        	LSR A
0F9C5 26 F6                     	ROL Player2JoypadPress
0F9C7 4A                        	LSR A
0F9C8 2E F5 06                  	ROL Player2JoypadUnk
0F9CB CA                        	DEX
0F9CC D0 E9                     	BNE ReadJoypadLoop
0F9CE                           
0F9CE 60                        	RTS
0F9CF                           
0F9CF                           
0F9CF                           ; =============== S U B R O U T I N E =======================================
0F9CF                           
0F9CF                           sub_BANKF_F6A1:
0F9CF                           IFDEF HOT_SPOTS
0F9CF A2 FF                         LDX #$FF
0F9D1 20 7B EE                      JSR HotSpotLookup
0F9D4 C9 FF                         CMP #$FF
0F9D6 F0 17                         BEQ +
0F9D8 AD 35 05                  	LDA CurrentLevelPage
0F9DB 0A                        	ASL A
0F9DC AA                        	TAX
0F9DD B9 A0 76                      LDA Hot_Spots, Y
0F9E0 9D 1D 05                      STA AreaPointersByPage, X
0F9E3 B9 A1 76                      LDA Hot_Spots + 1, Y
0F9E6 9D 1E 05                      STA AreaPointersByPage + 1, X
0F9E9 B9 A2 76                      LDA Hot_Spots + 2, Y
0F9EC 8D D0 76                      STA RecoverPlayerPos
0F9EF                           +
0F9EF                           ENDIF
0F9EF AD 35 05                  	LDA CurrentLevelPage
0F9F2 0A                        	ASL A
0F9F3 A8                        	TAY
0F9F4 B9 1D 05                  	LDA AreaPointersByPage, Y
0F9F7 8D 31 05                  	STA CurrentLevel
0F9FA                           IFDEF EXTENDED_PTR_CONTINUE:
0F9FA 29 E0                         AND #$E0
0F9FC 8D CA 05                      STA StoreContinue
0F9FF AD 31 05                  	LDA CurrentLevel
0FA02 29 1F                         AND #$1F
0FA04 8D 31 05                  	STA CurrentLevel
0FA07 99 1D 05                      STA AreaPointersByPage, Y
0FA0A 20 67 FC                      JSR WorldChangeF
0FA0D 20 2B FD                      JSR LoadWorldCHRBanks
0FA10 AD 35 05                      LDA CurrentLevelPage
0FA13 0A                            ASL A
0FA14 A8                            TAY
0FA15                           ENDIF
0FA15 C8                        	INY
0FA16 B9 1D 05                  	LDA AreaPointersByPage, Y
0FA19 4A                        	LSR A
0FA1A 4A                        	LSR A
0FA1B 4A                        	LSR A
0FA1C 4A                        	LSR A
0FA1D 8D 32 05                  	STA CurrentLevelArea
0FA20 B9 1D 05                  	LDA AreaPointersByPage, Y
0FA23 29 0F                     	AND #$0F
0FA25 8D 33 05                  	STA CurrentLevelEntryPage
0FA28                           IFDEF PLAYER_STUFF
0FA28 20 88 E9                      JSR ClearPlayerStuff
0FA2B                           ENDIF
0FA2B                           IFDEF HOT_SPOTS
0FA2B 20 BE EE                      JSR ClearHotSpots
0FA2E                           ENDIF
0FA2E 60                        	RTS
0FA2F                           
0FA2F                           ; End of function sub_BANKF_F6A1
0FA2F                           
0FA2F                           
0FA2F                           ;
0FA2F                           ; Checks that we're playing the correct music and switches if necessary, unless
0FA2F                           ; we're playing the invincibility music.
0FA2F                           ;
0FA2F                           ; Input
0FA2F                           ;   CompareMusicIndex = music we should be playing
0FA2F                           ;   CurrentMusicIndex = music we're actually playing
0FA2F                           ;   StarInvincibilityTimer = whether the player is invincible
0FA2F                           ;
0FA2F                           ; Output
0FA2F                           ;   CurrentMusicIndex = music we should be plathing
0FA2F                           ;   MusicQueue1 = song to play if we need to change the music
0FA2F                           ;
0FA2F                           EnsureCorrectMusic:
0FA2F                           IFDEF PLAYER_STUFF
0FA2F AD 0F 7D                      LDA LastMusicChoice
0FA32 F0 0F                         BEQ ++
0FA34 CD 09 06                      CMP MusicPlaying1
0FA37 F0 2C                         BEQ EnsureCorrectMusic_Exit
0FA39 29 7F                         AND #$7F
0FA3B CD 06 06                      CMP MusicPlaying2
0FA3E F0 25                         BEQ EnsureCorrectMusic_Exit
0FA40 4C 4F FA                      JMP SetCustomMusicCorrect
0FA43                           ++
0FA43                           ENDIF
0FA43                           
0FA43 AD 44 05                  	LDA CompareMusicIndex
0FA46 CD 45 05                  	CMP CurrentMusicIndex
0FA49 F0 1A                     	BEQ EnsureCorrectMusic_Exit
0FA4B                           
0FA4B AA                        	TAX
0FA4C 8E 45 05                  	STX CurrentMusicIndex
0FA4F                           IFNDEF PLAYER_STUFF
0FA4F                           	LDA StarInvincibilityTimer
0FA4F                           	CMP #$08
0FA4F                           	BCS EnsureCorrectMusic_Exit
0FA4F                           
0FA4F                           	LDA LevelMusicIndexes, X
0FA4F                           	STA MusicQueue1
0FA4F                           ENDIF
0FA4F                           IFDEF PLAYER_STUFF
0FA4F                           SetCustomMusicCorrect:
0FA4F AD E0 04                  	LDA StarInvincibilityTimer
0FA52 C9 08                     	CMP #$08
0FA54 B0 0F                     	BCS EnsureCorrectMusic_Exit
0FA56                           
0FA56 BD 47 F3                  	LDA LevelMusicIndexes, X
0FA59 8D 00 06                  	STA MusicQueue1
0FA5C                           
0FA5C 20 00 F4                      JSR CustomMusicChange
0FA5F                           
0FA5F AD 44 05                  	LDA CompareMusicIndex
0FA62 8D 45 05                      STA CurrentMusicIndex
0FA65                           ENDIF
0FA65                           
0FA65                           EnsureCorrectMusic_Exit:
0FA65 60                        	RTS
0FA66                           
0FA66                           
0FA66                           DoAreaReset:
0FA66 A9 00                     	LDA #$00
0FA68 8D AE 04                  	STA AreaInitialized
0FA6B 8D AF 04                  	STA ObjectCarriedOver
0FA6E 8D B7 04                  	STA SubspaceTimer
0FA71 8D B3 04                  	STA SubspaceDoorTimer
0FA74                           IFDEF PLAYER_STUFF
0FA74 20 2B FD                      JSR LoadWorldCHRBanks
0FA77                           ENDIF
0FA77                           IFDEF CONTROLLER_2_DEBUG
0FA77                           	STA ChangeCharacterPoofTimer
0FA77                           ENDIF
0FA77 A2 08                     	LDX #$08
0FA79                           
0FA79                           DoAreaReset_EnemyLoop:
0FA79 B5 51                     	LDA EnemyState, X
0FA7B F0 10                     	BEQ DoAreaReset_EnemyLoopEnd
0FA7D                           
0FA7D B5 A8                     	LDA ObjectBeingCarriedTimer, X
0FA7F F0 09                     	BEQ DoAreaReset_AfterCarryOver
0FA81                           
0FA81 B5 90                     	LDA ObjectType, X
0FA83 C9 39                     	CMP #Enemy_MushroomBlock
0FA85 F0 03                     	BEQ DoAreaReset_AfterCarryOver
0FA87                           
0FA87 8D AF 04                  	STA ObjectCarriedOver
0FA8A                           
0FA8A                           DoAreaReset_AfterCarryOver:
0FA8A 20 93 FA                  	JSR AreaResetEnemyDestroy
0FA8D                           
0FA8D                           DoAreaReset_EnemyLoopEnd:
0FA8D CA                        	DEX
0FA8E 10 E9                     	BPL DoAreaReset_EnemyLoop
0FA90                           
0FA90 A6 12                     	LDX byte_RAM_12
0FA92 60                        	RTS
0FA93                           
0FA93                           ; End of function DoAreaReset
0FA93                           
0FA93                           ; =============== S U B R O U T I N E =======================================
0FA93                           
0FA93                           AreaResetEnemyDestroy:
0FA93                           	; load raw enemy data offset so we can allow the level object to respawn
0FA93 BC 41 04                  	LDY unk_RAM_441, X
0FA96                           	; nothing to reset if offset is invalid
0FA96 30 06                     	BMI AreaResetEnemyDestroy_AfterAllowRespawn
0FA98                           
0FA98                           	; disabling bit 7 allows the object to respawn
0FA98 B1 CC                     	LDA (RawEnemyData), Y
0FA9A 29 7F                     	AND #$7F
0FA9C 91 CC                     	STA (RawEnemyData), Y
0FA9E                           
0FA9E                           AreaResetEnemyDestroy_AfterAllowRespawn:
0FA9E                           IFDEF PLAYER_STUFF
0FA9E B5 51                     	LDA EnemyState, X
0FAA0 F0 14                         BEQ +
0FAA2 BD 10 76                      LDA Enemy_Fireball_Hits, X
0FAA5 10 0F                         BPL +
0FAA7 AD F2 76                      LDA ProjectileNumber
0FAAA 10 05                         BPL ++
0FAAC A9 00                         LDA #$0
0FAAE 8D F2 76                      STA ProjectileNumber
0FAB1 F0 03                     ++  BEQ +
0FAB3 CE F2 76                      DEC ProjectileNumber
0FAB6                           +
0FAB6 A9 00                         LDA #0
0FAB8 9D 10 76                      STA Enemy_Fireball_Hits, X
0FABB 9D 20 76                      STA Enemy_Champion, X
0FABE                           ENDIF
0FABE A9 00                     	LDA #EnemyState_Inactive
0FAC0 95 51                     	STA EnemyState, X
0FAC2 60                        	RTS
0FAC3                           
0FAC3                           
0FAC3                           ; End of function AreaResetEnemyDestroy
0FAC3                           
0FAC3                           ; =============== S U B R O U T I N E =======================================
0FAC3                           
0FAC3                           KillPlayer:
0FAC3                           IFDEF PLAYER_STUFF
0FAC3 A9 00                         LDA #$0
0FAC5 8D F1 76                      STA ProjectileType
0FAC8                           ENDIF
0FAC8 A9 07                     	LDA #PlayerState_Dying ; Mark player as dead
0FACA 85 50                     	STA PlayerState
0FACC A9 00                     	LDA #$00 ; Clear some variables
0FACE 8D C2 04                  	STA PlayerHealth
0FAD1 8D CA 04                  	STA CrouchJumpTimer
0FAD4 8D E0 04                  	STA StarInvincibilityTimer
0FAD7 A9 07                     	LDA #SpriteAnimation_Dead ; Set player animation to dead?
0FAD9 85 C7                     	STA PlayerAnimationFrame
0FADB A5 9C                     	LDA HoldingItem
0FADD F0 1E                     	BEQ loc_BANKF_F749
0FADF                           
0FADF                           	; Probably something to throw away
0FADF                           	; a held item on death
0FADF C6 9C                     	DEC HoldingItem
0FAE1 AC 2D 04                  	LDY ObjectBeingCarriedIndex
0FAE4 99 2F 04                  	STA EnemyArray_42F, Y
0FAE7 4A                        	LSR A
0FAE8 99 A8 00                  	STA ObjectBeingCarriedTimer, Y
0FAEB 99 3D 00                  	STA ObjectXVelocity, Y
0FAEE A9 E0                     	LDA #$E0
0FAF0 86 0D                     	STX byte_RAM_D
0FAF2 B6 51                     	LDX EnemyState, Y
0FAF4 E0 07                     	CPX #EnemyState_7
0FAF6 F0 03                     	BEQ loc_BANKF_F747
0FAF8                           
0FAF8 99 47 00                  	STA ObjectYVelocity, Y
0FAFB                           
0FAFB                           loc_BANKF_F747:
0FAFB A6 0D                     	LDX byte_RAM_D
0FAFD                           
0FAFD                           loc_BANKF_F749:
0FAFD                           	; Set music to death jingle
0FAFD A9 08                     	LDA #Music2_DeathJingle
0FAFF 8D 03 06                  	STA MusicQueue2
0FB02                           	; BUG: Setting DPCM at the same time as music
0FB02 A9 80                     	LDA #DPCM_PlayerDeath
0FB04 8D 01 06                  	STA DPCMQueue
0FB07 60                        	RTS
0FB08                           
0FB08                           ; End of function KillPlayer
0FB08                           
0FB08                           ; =============== S U B R O U T I N E =======================================
0FB08                           
0FB08                           ; Something to do with loading levels here
0FB08                           
0FB08                           IFDEF PLAYER_STUFF_BONUS
0FB08                           LoadBonusLevelPtr:
0FB08 A9 06                     	LDA #PRGBank_C_D
0FB0A 20 FA FD                  	JSR ChangeMappedPRGBank
0FB0D                           
0FB0D 20 71 94                  	JSR GetLevelPointers_CD
0FB10                           
0FB10 A9 03                     	LDA #PRGBank_6_7
0FB12 20 FA FD                  	JSR ChangeMappedPRGBank
0FB15 60                            RTS
0FB16                           ENDIF
0FB16                           
0FB16                           GetLevelPointers:
0FB16 AC 31 05                  	LDY CurrentLevel
0FB19 B9 00 80                  	LDA LevelAreaStartIndexes, Y
0FB1C 18                        	CLC
0FB1D 6D 32 05                  	ADC CurrentLevelArea
0FB20 A8                        	TAY ; Y now contains the current area or something
0FB21                           IFDEF FLAGSET
0FB21 8D F0 73                      STA CurrentLevelAreaIndex
0FB24                           ENDIF
0FB24 B9 15 80                  	LDA LevelDataPointersLo, Y
0FB27 85 05                     	STA byte_RAM_5 ; $0005/$0006 are pointers to the level data
0FB29 B9 E7 80                  	LDA LevelDataPointersHi, Y
0FB2C 85 06                     	STA byte_RAM_6
0FB2E A2 FF                     	LDX #$FF ; Set to load level data into $7800 in RAM
0FB30 A9 78                     	LDA #$78
0FB32 85 02                     	STA byte_RAM_2
0FB34 A0 00                     	LDY #$00
0FB36 84 01                     	STY byte_RAM_1
0FB38                           
0FB38                           CopyLevelDataToMemory:
0FB38 B1 05                     	LDA (byte_RAM_5), Y
0FB3A 91 01                     	STA (byte_RAM_1), Y
0FB3C C8                        	INY
0FB3D CA                        	DEX
0FB3E D0 F8                     	BNE CopyLevelDataToMemory
0FB40                           
0FB40 91 01                     	STA (byte_RAM_1), Y
0FB42                           
0FB42                           ; End of function GetLevelPointers
0FB42                           
0FB42                           ; =============== S U B R O U T I N E =======================================
0FB42                           
0FB42                           GetEnemyPointers:
0FB42 AC 31 05                  	LDY CurrentLevel
0FB45 B9 00 A5                  	LDA EnemyPointersByLevel_HiHi, Y
0FB48 85 01                     	STA byte_RAM_1
0FB4A B9 15 A5                  	LDA EnemyPointersByLevel_HiLo, Y
0FB4D 85 00                     	STA byte_RAM_0
0FB4F B9 2A A5                  	LDA EnemyPointersByLevel_LoHi, Y
0FB52 85 03                     	STA byte_RAM_3
0FB54 B9 3F A5                  	LDA EnemyPointersByLevel_LoLo, Y
0FB57 85 02                     	STA byte_RAM_2
0FB59 AD 28 06                  	LDA InSubspaceOrJar ; Are we in a jar?
0FB5C C9 01                     	CMP #$01
0FB5E D0 05                     	BNE loc_BANKF_F7A0 ; No, load the area as usual
0FB60                           
0FB60 A0 04                     	LDY #AreaIndex_Jar
0FB62 4C 68 FB                  	JMP loc_BANKF_F7A3
0FB65                           
0FB65                           ; ---------------------------------------------------------------------------
0FB65                           
0FB65                           loc_BANKF_F7A0:
0FB65 AC 32 05                  	LDY CurrentLevelArea
0FB68                           
0FB68                           loc_BANKF_F7A3:
0FB68 B1 00                     	LDA (byte_RAM_0), Y
0FB6A 85 01                     	STA byte_RAM_1
0FB6C B1 02                     	LDA (byte_RAM_2), Y
0FB6E 85 00                     	STA byte_RAM_0
0FB70 A2 FF                     	LDX #$FF
0FB72 A9 7B                     	LDA #>RawEnemyDataAddr
0FB74 85 03                     	STA byte_RAM_3
0FB76 A0 00                     	LDY #<RawEnemyDataAddr
0FB78 84 02                     	STY byte_RAM_2
0FB7A                           
0FB7A                           CopyEnemyDataToMemory:
0FB7A B1 00                     	LDA (byte_RAM_0), Y
0FB7C 91 02                     	STA (byte_RAM_2), Y
0FB7E C8                        	INY
0FB7F CA                        	DEX
0FB80 D0 F8                     	BNE CopyEnemyDataToMemory
0FB82                           
0FB82 60                        	RTS
0FB83                           
0FB83                           ; End of function GetEnemyPointers
0FB83                           
0FB83                           ; =============== S U B R O U T I N E =======================================
0FB83                           
0FB83                           GetJarPointers:
0FB83 AC 31 05                  	LDY CurrentLevel ; Get the area starting index for the current level
0FB86 B9 00 80                  	LDA LevelAreaStartIndexes, Y
0FB89 18                        	CLC
0FB8A 69 04                     	ADC #AreaIndex_Jar
0FB8C A8                        	TAY
0FB8D B9 15 80                  	LDA LevelDataPointersLo, Y
0FB90 85 05                     	STA byte_RAM_5
0FB92 B9 E7 80                  	LDA LevelDataPointersHi, Y
0FB95 85 06                     	STA byte_RAM_6
0FB97 A9 7A                     	LDA #>RawJarData
0FB99 85 02                     	STA byte_RAM_2
0FB9B A0 00                     	LDY #<RawJarData
0FB9D 84 01                     	STY byte_RAM_1
0FB9F                           
0FB9F                           CopyJarDataToMemory:
0FB9F B1 05                     	LDA (byte_RAM_5), Y
0FBA1 C9 FF                     	CMP #$FF ; This one actually terminates on any $FF read! Welp.
0FBA3 F0 06                     	BEQ CopyJarDataToMemoryFinished
0FBA5                           
0FBA5 91 01                     	STA (byte_RAM_1), Y
0FBA7 C8                        	INY
0FBA8 4C 9F FB                  	JMP CopyJarDataToMemory
0FBAB                           
0FBAB                           ; ---------------------------------------------------------------------------
0FBAB                           
0FBAB                           CopyJarDataToMemoryFinished:
0FBAB 91 01                     	STA (byte_RAM_1), Y
0FBAD 60                        	RTS
0FBAE                           
0FBAE                           ; End of function GetJarPointers
0FBAE                           
0FBAE                           
0FBAE                           
0FBAE                           EndOfLevelDoor: ; PPU data
0FBAE 22 D0 04 FC FC AD FA      	.db $22,$D0,$04,$FC,$FC,$AD,$FA
0FBB5 22 F0 04 FC FC AC AD      	.db $22,$F0,$04,$FC,$FC,$AC,$AD
0FBBC 23 10 06 FC FC AC AC AD.. 	.db $23,$10,$06,$FC,$FC,$AC,$AC,$AD,$FA
0FBC5 23 30 06 FC FC AC AC AC.. 	.db $23,$30,$06,$FC,$FC,$AC,$AC,$AC,$AD
0FBCE 00                        	.db $00
0FBCF                           
0FBCF                           EndOfLevelDoorRowOffsets:
0FBCF 00                        	.db $00
0FBD0 07                        	.db $07
0FBD1 0E                        	.db $0E
0FBD2 17                        	.db $17
0FBD3                           
0FBD3                           DefaultCHRAnimationSpeed_Level:
0FBD3 00                        	.db $00 ; 1-1
0FBD4 00                        	.db $00 ; 1-1
0FBD5 06                        	.db $06 ; 3-1
0FBD6 06                        	.db $06 ; 3-1
0FBD7 0A                        	.db $0A ; 4-2
0FBD8 0A                        	.db $0A ; 4-2
0FBD9 0B                        	.db $0B ; 4-3
0FBDA 0D                        	.db $0D ; 5-2
0FBDB 0E                        	.db $0E ; 5-3
0FBDC 11                        	.db $11 ; 6-3
0FBDD 11                        	.db $11 ; 6-3
0FBDE 12                        	.db $12 ; 7-1
0FBDF 12                        	.db $12 ; 7-1
0FBE0 12                        	.db $12 ; 7-1
0FBE1 12                        	.db $12 ; 7-1
0FBE2 13                        	.db $13 ; 7-2
0FBE3                           
0FBE3                           DefaultCHRAnimationSpeed_Area:
0FBE3 01                        	.db $01 ; 1-1 upward climb
0FBE4 05                        	.db $05 ; 1-1 birdo
0FBE5 01                        	.db $01 ; 3-1 main part
0FBE6 03                        	.db $03 ; 3-1 sky part
0FBE7 01                        	.db $01 ; 4-2 sky ice
0FBE8 02                        	.db $02 ; 4-2 whales
0FBE9 04                        	.db $04 ; 4-3 tower tops
0FBEA 02                        	.db $02 ; 5-2 upward climb
0FBEB 04                        	.db $04 ; 5-3 miniboss birdo
0FBEC 03                        	.db $03 ; 6-3 upward climb
0FBED 04                        	.db $04 ; 6-3 sky pyramid
0FBEE 00                        	.db $00 ; 7-1 beginning area
0FBEF 01                        	.db $01 ; 7-1 albatoss area
0FBF0 02                        	.db $02 ; 7-1 cloud maze
0FBF1 03                        	.db $03 ; 7-1 upward climb
0FBF2 00                        	.db $00 ; 7-2 entrance
0FBF3                           
0FBF3                           BackgroundCHRAnimationSpeedByWorld:
0FBF3 07                        	.db $07 ; World 1
0FBF4 07                        	.db $07 ; World 2
0FBF5 07                        	.db $07 ; World 3
0FBF6 07                        	.db $07 ; World 4
0FBF7 09                        	.db $09 ; World 5
0FBF8 07                        	.db $07 ; World 6
0FBF9 05                        	.db $05 ; World 7
0FBFA 0B                        	.db $0B ; Default
0FBFB                           
0FBFB                           
0FBFB                           ;
0FBFB                           ; Increments the frame of the CHR animation using the world/area speed
0FBFB                           ;
0FBFB                           AnimateCHRRoutine:
0FBFB CE FD 06                  	DEC BackgroundCHR2Timer
0FBFE 10 2E                     	BPL AnimateCHRRoutine_Exit
0FC00                           
0FC00 A2 07                     	LDX #$07 ; default index for animation speed table
0FC02                           
0FC02                           	; Certain level/area combinations use a fixed animation speed.
0FC02                           	; It seems to be used in areas that prominently feature cloud platforms.
0FC02                           	; This loop performs the lookup to see if that should happen.
0FC02 A0 0F                     	LDY #(DefaultCHRAnimationSpeed_Area - DefaultCHRAnimationSpeed_Level - 1)
0FC04                           AnimateCHRRoutine_DefaultSpeedLoop:
0FC04 AD E7 04                  	LDA CurrentLevel_Init
0FC07 D9 D3 FB                  	CMP DefaultCHRAnimationSpeed_Level, Y
0FC0A D0 08                     	BNE AnimateCHRRoutine_DefaultSpeedNext
0FC0C                           
0FC0C AD E8 04                  	LDA CurrentLevelArea_Init
0FC0F D9 E3 FB                  	CMP DefaultCHRAnimationSpeed_Area, Y
0FC12 F0 06                     	BEQ AnimateCHRRoutine_SetSpeed
0FC14                           
0FC14                           AnimateCHRRoutine_DefaultSpeedNext:
0FC14 88                        	DEY
0FC15 10 ED                     	BPL AnimateCHRRoutine_DefaultSpeedLoop
0FC17                           
0FC17 AE 34 06                  	LDX CurrentWorldTileset
0FC1A                           
0FC1A                           AnimateCHRRoutine_SetSpeed:
0FC1A BD F3 FB                  	LDA BackgroundCHRAnimationSpeedByWorld, X
0FC1D 8D FD 06                  	STA BackgroundCHR2Timer
0FC20 AC F8 06                  	LDY BackgroundCHR2
0FC23 C8                        	INY
0FC24 C8                        	INY
0FC25                           
0FC25                           AnimatedCHRCheck:
0FC25                           IFDEF FIX_CHR_CYCLE
0FC25 C0 27                     	CPY #CHRBank_Animated8 + 1
0FC27                           ENDIF
0FC27                           IFNDEF FIX_CHR_CYCLE
0FC27                           	; Bug: This is in the original game
0FC27                           	; The last frame of the animation is effectively skipped because
0FC27                           	; we immediately reset to the first frame when we hit it.
0FC27                           	CPY #CHRBank_Animated8
0FC27                           ENDIF
0FC27                           
0FC27 90 02                     	BCC AnimateCHRRoutine_SetCHR
0FC29                           
0FC29 A0 18                     	LDY #CHRBank_Animated1
0FC2B                           
0FC2B                           AnimateCHRRoutine_SetCHR:
0FC2B 8C F8 06                  	STY BackgroundCHR2
0FC2E                           
0FC2E                           AnimateCHRRoutine_Exit:
0FC2E 60                        	RTS
0FC2F                           
0FC2F                           
0FC2F                           ; ---------------------------------------------------------------------------
0FC2F                           
0FC2F                           loc_BANKF_FAFE:
0FC2F A2 08                     	LDX #$08 ; @TODO Something to with drawing certain sprites?
0FC31                           
0FC31                           loc_BANKF_FB00:
0FC31 B5 51                     	LDA EnemyState, X
0FC33 F0 18                     	BEQ loc_BANKF_FB1C
0FC35                           
0FC35                           loc_BANKF_FB04:
0FC35 CA                        	DEX
0FC36 10 F9                     	BPL loc_BANKF_FB00
0FC38                           
0FC38 A0 00                     	LDY #$00
0FC3A B9 00 02                  	LDA SpriteDMAArea, Y
0FC3D C9 F8                     	CMP #$F8
0FC3F D0 07                     	BNE loc_BANKF_FB17
0FC41                           
0FC41 B9 04 02                  	LDA SpriteDMAArea + 4, Y
0FC44 C9 F8                     	CMP #$F8
0FC46 F0 02                     	BEQ loc_BANKF_FB19
0FC48                           
0FC48                           loc_BANKF_FB17:
0FC48 A0 10                     	LDY #$10
0FC4A                           
0FC4A                           loc_BANKF_FB19:
0FC4A A6 12                     	LDX byte_RAM_12
0FC4C 60                        	RTS
0FC4D                           
0FC4D                           ; ---------------------------------------------------------------------------
0FC4D                           
0FC4D                           loc_BANKF_FB1C:
0FC4D 8A                        	TXA
0FC4E 18                        	CLC
0FC4F 6D 00 04                  	ADC SpriteFlickerSlot
0FC52 A8                        	TAY
0FC53 B9 08 F8                  	LDA byte_BANKF_F4DA, Y
0FC56 A8                        	TAY
0FC57 B9 00 02                  	LDA SpriteDMAArea, Y
0FC5A C9 F8                     	CMP #$F8
0FC5C D0 D7                     	BNE loc_BANKF_FB04
0FC5E                           
0FC5E B9 04 02                  	LDA SpriteDMAArea + 4, Y
0FC61 C9 F8                     	CMP #$F8
0FC63 D0 D0                     	BNE loc_BANKF_FB04
0FC65 F0 E3                     	BEQ loc_BANKF_FB19
0FC67                           
0FC67                           
0FC67                           IFDEF EXTENDED_PTR_CONTINUE: 
0FC67                               .include "src/extras/worldchange-f.asm"
0FC67                           WorldChangeF:
0FC67 48                            PHA ;; after this, reload character tables
0FC68 4E 35 06                      LSR CurrentWorld
0FC6B 4E 35 06                      LSR CurrentWorld
0FC6E 4E 35 06                      LSR CurrentWorld
0FC71 38                        -   SEC
0FC72 E9 03                         SBC #$03
0FC74 90 05                         BCC + 
0FC76 EE 35 06                      INC CurrentWorld
0FC79 D0 F6                         BNE -
0FC7B 68                        +   PLA
0FC7C 60                            RTS
0FC7D                           ENDIF
0FC7D                           
0FC7D                           IFDEF HEALTH_REVAMP
0FC7D                               .include "src/extras/health-revamp-3.asm
0FC7D                           NewHealthRender:
0FC7D 98                            TYA
0FC7E 48                            PHA
0FC7F 8A                            TXA
0FC80 48                            PHA
0FC81 AD C2 04                      LDA PlayerHealth
0FC84 F0 0E                         BEQ ++
0FC86 AE F1 76                      LDX ProjectileType
0FC89 BD 40 E7                  	LDA ProjectileTileHealth, X
0FC8C 99 01 02                  	STA SpriteDMAArea + 1, Y
0FC8F 68                            PLA
0FC90 AA                            TAX
0FC91 4C 9B FC                      JMP +++
0FC94 68                        ++  PLA
0FC95 AA                            TAX
0FC96                           DrawHealthPip:
0FC96 A9 BA                         LDA #$BA
0FC98 99 01 02                      STA SpriteDMAArea+1,Y
0FC9B                           +++
0FC9B A9 10                         LDA #$10
0FC9D 99 03 02                      STA SpriteDMAArea+3,Y
0FCA0 A9 03                         LDA #3
0FCA2 99 02 02                      STA SpriteDMAArea+2,Y
0FCA5 A5 00                         LDA byte_RAM_0
0FCA7 99 00 02                      STA SpriteDMAArea,Y
0FCAA 18                            CLC
0FCAB 69 10                         ADC #$10
0FCAD 85 00                         STA byte_RAM_0
0FCAF E8                            INX
0FCB0 E6 03                         INC byte_RAM_3
0FCB2 E6 03                         INC byte_RAM_3
0FCB4 A5 03                         LDA byte_RAM_3
0FCB6 C9 06                         CMP #6
0FCB8 B0 0C                         BCS +
0FCBA CD C3 04                      CMP PlayerMaxHealth
0FCBD B0 07                         BCS +
0FCBF C8                            INY
0FCC0 C8                            INY
0FCC1 C8                            INY
0FCC2 C8                            INY
0FCC3 4C 96 FC                      JMP DrawHealthPip
0FCC6 68                        +   PLA
0FCC7 AA                            TAX
0FCC8 98                            TYA
0FCC9 85 03                         STA byte_RAM_3
0FCCB AD C2 04                      LDA PlayerHealth
0FCCE F0 44                         BEQ EndDrawHealth
0FCD0                           FillHealthPip:
0FCD0 E9 10                         SBC #$10
0FCD2 90 23                         BCC EndFillHealth
0FCD4 A8                            TAY
0FCD5 BD 01 02                      LDA SpriteDMAArea+1,X
0FCD8 C9 BA                         CMP #$BA
0FCDA D0 05                         BNE +
0FCDC A9 B8                         LDA #$B8
0FCDE 9D 01 02                      STA SpriteDMAArea+1,X
0FCE1                           +
0FCE1 DE 02 02                      DEC SpriteDMAArea+2,X
0FCE4 DE 02 02                      DEC SpriteDMAArea+2,X
0FCE7 98                            TYA
0FCE8 E9 10                         SBC #$10
0FCEA 90 0B                         BCC EndFillHealth
0FCEC                               ;DEC SpriteDMAArea+2,X
0FCEC                               ;SBC #$10
0FCEC                               ;BCC EndFillHealth
0FCEC E8                            INX
0FCED E4 03                         CPX byte_RAM_3
0FCEF B0 06                         BCS EndFillHealth
0FCF1 E8                            INX
0FCF2 E8                            INX
0FCF3 E8                            INX
0FCF4 4C D0 FC                      JMP FillHealthPip
0FCF7                           EndFillHealth:
0FCF7 AD C2 04                      LDA PlayerHealth
0FCFA C9 8F                         CMP #$8F
0FCFC B0 16                         BCS EndDrawHealth
0FCFE A9 12                         LDA #$12
0FD00 9D 03 02                      STA SpriteDMAArea+3,X
0FD03 AC F8 06                      LDY BackgroundCHR2 
0FD06 C0 20                         CPY #$20
0FD08 90 0A                         BCC EndDrawHealth
0FD0A BD 02 02                      LDA SpriteDMAArea+2,X
0FD0D C9 03                         CMP #$3
0FD0F D0 03                         BNE EndDrawHealth
0FD11 DE 02 02                      DEC SpriteDMAArea+2,X
0FD14                               ;LDA #$B8
0FD14                               ;STA SpriteDMAArea+1,X
0FD14                               ;DEC SpriteDMAArea+2,X
0FD14                               ;DEC SpriteDMAArea+2,X
0FD14                           EndDrawHealth:
0FD14 60                            RTS
0FD15                           ENDIF
0FD15                           
0FD15                           ; Unused space in the original ($FB36 - $FDFF)
0FD15                           unusedSpace $FE00, $FF
0FD15                           	IFDEF PRESERVE_UNUSED_SPACE
0FD15                           		.pad $FE00, $FF
0FD15                           	ENDIF
0FD15                           
0FD15                           
0FD15                           CHRBank_WorldEnemies:
0FD15 0C                        	.db CHRBank_EnemiesGrass
0FD16 0D                        	.db CHRBank_EnemiesDesert
0FD17 0C                        	.db CHRBank_EnemiesGrass
0FD18 0E                        	.db CHRBank_EnemiesIce
0FD19 0C                        	.db CHRBank_EnemiesGrass
0FD1A 0D                        	.db CHRBank_EnemiesDesert
0FD1B 0F                        	.db CHRBank_EnemiesSky
0FD1C                           
0FD1C                           CHRBank_WorldBossBackground:
0FD1C 10                        	.db CHRBank_BackgroundGrass
0FD1D 12                        	.db CHRBank_BackgroundDesert
0FD1E 10                        	.db CHRBank_BackgroundGrass
0FD1F 14                        	.db CHRBank_BackgroundIce
0FD20 0A                        	.db CHRBank_BackgroundGrassClawgrip
0FD21 12                        	.db CHRBank_BackgroundDesert
0FD22 16                        	.db CHRBank_BackgroundSky
0FD23                           
0FD23                           CHRBank_CharacterSize:
0FD23 00                        	.db CHRBank_Mario
0FD24 04                        	.db CHRBank_MarioSmall
0FD25 02                        	.db CHRBank_Princess
0FD26 06                        	.db CHRBank_PrincessSmall
0FD27 03                        	.db CHRBank_Toad
0FD28 07                        	.db CHRBank_ToadSmall
0FD29 01                        	.db CHRBank_Luigi
0FD2A 05                        	.db CHRBank_LuigiSmall
0FD2B                           
0FD2B                           
0FD2B                           LoadWorldCHRBanks:
0FD2B A0 08                     	LDY #CHRBank_CommonEnemies1
0FD2D 8C FA 06                  	STY SpriteCHR2
0FD30 C8                        	INY
0FD31 8C FB 06                  	STY SpriteCHR3
0FD34 AC 34 06                  	LDY CurrentWorldTileset
0FD37 B9 15 FD                  	LDA CHRBank_WorldEnemies, Y
0FD3A 8D FC 06                  	STA SpriteCHR4
0FD3D B9 1C FD                  	LDA CHRBank_WorldBossBackground, Y
0FD40 8D F7 06                  	STA BackgroundCHR1
0FD43 A9 18                     	LDA #CHRBank_Animated1
0FD45 8D F8 06                  	STA BackgroundCHR2
0FD48                           
0FD48                           LoadCharacterCHRBanks:
0FD48 A5 8F                     	LDA CurrentCharacter
0FD4A 0A                        	ASL A
0FD4B 0D F6 06                  	ORA PlayerCurrentSize
0FD4E A8                        	TAY
0FD4F B9 23 FD                  	LDA CHRBank_CharacterSize, Y
0FD52 8D F9 06                  	STA SpriteCHR1
0FD55 60                        	RTS
0FD56                           
0FD56                           
0FD56                           LoadTitleScreenCHRBanks:
0FD56                           IFDEF PLAYER_STUFF
0FD56 A9 00                         LDA #$0
0FD58 8D F9 06                      STA SpriteCHR1
0FD5B A9 01                         LDA #$1
0FD5D 8D FA 06                      STA SpriteCHR2
0FD60 A9 02                         LDA #$2
0FD62 8D FB 06                      STA SpriteCHR3
0FD65 A9 03                         LDA #$3
0FD67 8D FC 06                      STA SpriteCHR4
0FD6A                           ENDIF
0FD6A A9 28                     	LDA #CHRBank_TitleScreenBG1
0FD6C 8D F7 06                  	STA BackgroundCHR1
0FD6F A9 2A                     	LDA #CHRBank_TitleScreenBG2
0FD71 8D F8 06                  	STA BackgroundCHR2
0FD74 60                        	RTS
0FD75                           
0FD75                           
0FD75                           LoadCelebrationSceneBackgroundCHR:
0FD75 A9 38                     	LDA #CHRBank_CelebrationBG1
0FD77 8D F7 06                  	STA BackgroundCHR1
0FD7A A9 3A                     	LDA #CHRBank_CelebrationBG2
0FD7C 8D F8 06                  	STA BackgroundCHR2
0FD7F 60                        	RTS
0FD80                           
0FD80                           
0FD80                           LoadCharacterSelectCHRBanks:
0FD80 A9 30                     	LDA #CHRBank_CharacterSelectSprites
0FD82 8D F9 06                  	STA SpriteCHR1
0FD85 A9 2C                     	LDA #CHRBank_CharacterSelectBG1
0FD87 8D F7 06                  	STA BackgroundCHR1
0FD8A A9 2E                     	LDA #CHRBank_CharacterSelectBG2
0FD8C 8D F8 06                  	STA BackgroundCHR2
0FD8F 60                        	RTS
0FD90                           
0FD90                           
0FD90                           TitleCardCHRBanks:
0FD90 40                        	.db CHRBank_TitleCardGrass
0FD91 42                        	.db CHRBank_TitleCardDesert
0FD92 40                        	.db CHRBank_TitleCardGrass
0FD93 44                        	.db CHRBank_TitleCardIce
0FD94 40                        	.db CHRBank_TitleCardGrass
0FD95 42                        	.db CHRBank_TitleCardDesert
0FD96 46                        	.db CHRBank_TitleCardSky
0FD97                           
0FD97                           
0FD97                           ChangeTitleCardCHR:
0FD97 AC 35 06                  	LDY CurrentWorld
0FD9A B9 90 FD                  	LDA TitleCardCHRBanks, Y
0FD9D 8D F8 06                  	STA BackgroundCHR2
0FDA0 60                        	RTS
0FDA1                           
0FDA1                           
0FDA1                           LoadBonusChanceCHRBanks:
0FDA1 A9 34                     	LDA #CHRBank_ChanceBG1
0FDA3 8D F7 06                  	STA BackgroundCHR1
0FDA6 A9 36                     	LDA #CHRBank_ChanceBG2
0FDA8 8D F8 06                  	STA BackgroundCHR2
0FDAB 60                        	RTS
0FDAC                           
0FDAC                           
0FDAC                           LoadMarioSleepingCHRBanks:
0FDAC A0 48                     	LDY #CHRBank_EndingSprites
0FDAE 8C F9 06                  	STY SpriteCHR1
0FDB1 C8                        	INY
0FDB2 8C FA 06                  	STY SpriteCHR2
0FDB5 A9 50                     	LDA #CHRBank_EndingBackground1
0FDB7 8D F7 06                  	STA BackgroundCHR1
0FDBA A9 52                     	LDA #CHRBank_EndingBackground1 + 2
0FDBC 8D F8 06                  	STA BackgroundCHR2
0FDBF 60                        	RTS
0FDC0                           
0FDC0                           
0FDC0                           ; Unused space in the original ($FE97 - $FF4F)
0FDC0                           unusedSpace $FF50, $FF
0FDC0                           	IFDEF PRESERVE_UNUSED_SPACE
0FDC0                           		.pad $FF50, $FF
0FDC0                           	ENDIF
0FDC0                           
0FDC0                           
0FDC0                           ; public RESET
0FDC0                           ; This code is called when the NES is reset
0FDC0                           RESET:
0FDC0 78                        	SEI
0FDC1 D8                        	CLD
0FDC2 A9 00                     	LDA #PPUCtrl_Base2000 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite0000 | PPUCtrl_Background0000 | PPUCtrl_SpriteSize8x8 | PPUCtrl_NMIDisabled
0FDC4 8D 00 20                  	STA PPUCTRL
0FDC7 A2 FF                     	LDX #$FF ; Reset stack pointer
0FDC9 9A                        	TXS
0FDCA                           
0FDCA                           RESET_VBlankLoop:
0FDCA                           	; Wait for first VBlank
0FDCA AD 02 20                  	LDA PPUSTATUS
0FDCD 29 80                     	AND #PPUStatus_VBlankHit
0FDCF F0 F9                     	BEQ RESET_VBlankLoop
0FDD1                           
0FDD1                           RESET_VBlank2Loop:
0FDD1                           	; Wait for second VBlank
0FDD1 AD 02 20                  	LDA PPUSTATUS
0FDD4 10 FB                     	BPL RESET_VBlank2Loop
0FDD6                           
0FDD6                           IFDEF DEBUG
0FDD6 A9 00                     	LDA #$00
0FDD8 8D EF 7F                  	STA Debug_InMenu
0FDDB                           ENDIF
0FDDB                           
0FDDB A9 00                     	LDA #VMirror
0FDDD 8D 00 A0                  	STA NametableMapping
0FDE0 A9 80                     	LDA #$80
0FDE2 8D 01 A0                  	STA $A001
0FDE5 4C D9 DB                  	JMP StartGame
0FDE8                           
0FDE8                           
0FDE8                           IFNDEF MMC5
0FDE8                           ;
0FDE8                           ; Switches the current CHR banks
0FDE8                           ;
0FDE8                           ChangeCHRBanks:
0FDE8 A0 05                     	LDY #$05
0FDEA                           ChangeCHRBanks_Loop:
0FDEA 98                        	TYA
0FDEB 09 80                     	ORA #$80
0FDED 8D 00 80                  	STA $8000
0FDF0 B9 F7 06                  	LDA BackgroundCHR1, Y
0FDF3 8D 01 80                  	STA $8001
0FDF6 88                        	DEY
0FDF7 10 F1                     	BPL ChangeCHRBanks_Loop
0FDF9                           
0FDF9 60                        	RTS
0FDFA                           ENDIF
0FDFA                           
0FDFA                           IFDEF MMC5
0FDFA                           ;
0FDFA                           ; Switches the current CHR banks
0FDFA                           ;
0FDFA                           ChangeCHRBanks:
0FDFA                           	JMP ChangeCHRBanks_MMC5
0FDFA                           
0FDFA                           	; Maintain location of the next subroutine
0FDFA                           	unusedSpace $FF85, $FF
0FDFA                           
0FDFA                           ENDIF
0FDFA                           
0FDFA                           
0FDFA                           ;
0FDFA                           ; Calling this one will save the changed bank
0FDFA                           ; to RAM, so if something uses the below version
0FDFA                           ; the original bank set with this can be restored.
0FDFA                           ;
0FDFA                           ChangeMappedPRGBank:
0FDFA 8D F2 06                  	STA MMC3PRGBankTemp ; See below comment.
0FDFD                           
0FDFD                           ;
0FDFD                           ; Any call to this sub switches the lower two banks together, eg:
0FDFD                           ; LDA 0 JSR Change... = Bank 0/1
0FDFD                           ; LDA 1 JSR Change... = Bank 2/3
0FDFD                           ; etc.
0FDFD                           ;
0FDFD                           ; This version changes the bank numbers without
0FDFD                           ; saving the change to RAM, so the previous bank
0FDFD                           ; can be recalled later (mostly for temporary switches,
0FDFD                           ; like music handling and such)
0FDFD                           ;
0FDFD                           ChangeMappedPRGBankWithoutSaving:
0FDFD 0A                        	ASL A
0FDFE                           IFNDEF MMC5
0FDFE 48                        	PHA
0FDFF A9 86                     	LDA #$86
0FE01 8D 00 80                  	STA $8000
0FE04 68                        	PLA
0FE05 8D 01 80                  	STA $8001 ; Change first bank
0FE08 09 01                     	ORA #$01 ; Use the bank right after this one next
0FE0A 48                        	PHA
0FE0B A9 87                     	LDA #$87
0FE0D 8D 00 80                  	STA $8000
0FE10 68                        	PLA
0FE11 8D 01 80                  	STA $8001 ; Change second bank
0FE14 60                        	RTS
0FE15                           ENDIF
0FE15                           IFDEF MMC5
0FE15                           	ORA #$80
0FE15                           	STA $5114
0FE15                           	ORA #$01
0FE15                           	STA $5115
0FE15                           	RTS
0FE15                           
0FE15                           	; Maintain location of the next subroutine
0FE15                           	unusedSpace $FFA0, $FF
0FE15                           
0FE15                           ENDIF
0FE15                           
0FE15                           
0FE15                           ;
0FE15                           ; Writing to $A000 sets mirroring.
0FE15                           ;   A = $00 for vertical
0FE15                           ;   A = $01 for horizontal
0FE15                           ;
0FE15                           ChangeNametableMirroring:
0FE15 8D 00 A0                  	STA NametableMapping
0FE18 60                        	RTS
0FE19                           
0FE19                           
0FE19                           ; Unused space in the original ($FFA4 - $FFEA)
0FE19                           unusedSpace $FFEB, $FF
0FE19                           	IFDEF PRESERVE_UNUSED_SPACE
0FE19                           		.pad $FFEB, $FF
0FE19                           	ENDIF
0FE19                           
0FE19                           ; Technically you can delete the stuff from here to the vector table as well,
0FE19                           ; but because it looks slightly less like unused space it isn't being removed.
0FE19                           
0FE19                           ; Not used; leftover part of FamicomBox cart title?
0FE19                           UnusedTextZELDA:
0FE19 5A 45 4C 44 41            	.db 'ZELDA'
0FE1E                           
0FE1E                           ; Note that this is NOT CODE.
0FE1E                           ; If the NES actually hits a BRK, the game will probably just explode.
0FE1E                           ; If you wanted, you could write  some sort of crash handler though.
0FE1E                           IRQ:
0FE1E                           IFNDEF PLAYER_STUFF_IRQ
0FE1E DF                        	.db $DF
0FE1F E6                        	.db $E6
0FE20 00                        	.db $00
0FE21 00                        	.db $00
0FE22 38                        	.db $38
0FE23 04                        	.db $04
0FE24 01                        	.db $01
0FE25 04                        	.db $04
0FE26 01                        	.db $01
0FE27 BE                        	.db $BE
0FE28                           ENDIF
0FE28                           IFDEF PLAYER_STUFF_IRQ
0FE28                           	PHP ; store current processor state
0FE28                               PHA
0FE28                               JSR IRQ_Start
0FE28                           ENDIF
0FE28                           
0FE28                           ; Ensure our vectors are always here
0FE28 FF FF FF FF FF FF FF FF.. 	.pad $FFFA, $FF
0FFFA                           
0FFFA                           ; Vectors for the NES CPU. These should ALWAYS be at $FFFA!
0FFFA                           ; Add a .pad or .base before here if you change code above.
0FFFA                           ; NMI = VBlank
0FFFA                           ; RESET = ...well, reset.
0FFFA                           ; IRQ is not used, but you could if you wanted.
0FFFA                           NESVectorTables:
0FFFA 60 E5                     	.dw NMI
0FFFC                           IFNDEF MMC5
0FFFC C0 FD                     	.dw RESET
0FFFE                           ENDIF
0FFFE                           IFDEF MMC5
0FFFE                           	.dw RESET_MMC5
0FFFE                           ENDIF
0FFFE 1E FE                     	.dw IRQ
10000                           
10000                           
10000                           ; -----------------------------------------
10000                           ; include CHR-ROM
10000                           IFNDEF RANDOMIZER_T
10000                           .incbin "smb2.chr"
10000                           ENDIF
10000                           IFDEF RANDOMIZER_T
10000 00 00 00 00 00 07 08 08.. .incbin "smb2-custom.chr"
30000                           ENDIF
30000                           
